var webpackLib =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 83);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(3)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = __webpack_require__(127).Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(126)(module)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(90)
var ieee754 = __webpack_require__(91)
var isArray = __webpack_require__(43)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(7)))

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;
var BN = __webpack_require__(2);
var minAssert = __webpack_require__(4);
var minUtils = __webpack_require__(70);

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;



/***/ }),
/* 6 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 7 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(4);
var inherits = __webpack_require__(0);

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(1).Buffer
var Transform = __webpack_require__(25).Transform
var StringDecoder = __webpack_require__(30).StringDecoder
var inherits = __webpack_require__(0)

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var pna = __webpack_require__(19);
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = Object.create(__webpack_require__(14));
util.inherits = __webpack_require__(0);
/*</replacement>*/

var Readable = __webpack_require__(48);
var Writable = __webpack_require__(29);

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = __webpack_require__(1).Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(7), __webpack_require__(6)))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(1).Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(0)
var MD5 = __webpack_require__(24)
var RIPEMD160 = __webpack_require__(31)
var sha = __webpack_require__(32)
var Base = __webpack_require__(9)

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3).Buffer))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3).Buffer))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(8);
var assert = __webpack_require__(4);

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = exports;

asn1.bignum = __webpack_require__(2);

asn1.define = __webpack_require__(152).define;
asn1.base = __webpack_require__(18);
asn1.constants = __webpack_require__(76);
asn1.decoders = __webpack_require__(157);
asn1.encoders = __webpack_require__(159);


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var base = exports;

base.Reporter = __webpack_require__(154).Reporter;
base.DecoderBuffer = __webpack_require__(75).DecoderBuffer;
base.EncoderBuffer = __webpack_require__(75).EncoderBuffer;
base.Node = __webpack_require__(155);


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = __webpack_require__(1).Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(1).Buffer
var MD5 = __webpack_require__(24)

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(2);
var utils = __webpack_require__(5);
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = __webpack_require__(151)
var aesid = __webpack_require__(162)
var fixProc = __webpack_require__(163)
var ciphers = __webpack_require__(34)
var compat = __webpack_require__(57)
var Buffer = __webpack_require__(1).Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(0)
var HashBase = __webpack_require__(47)
var Buffer = __webpack_require__(1).Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__(26).EventEmitter;
var inherits = __webpack_require__(0);

inherits(Stream, EE);
Stream.Readable = __webpack_require__(27);
Stream.Writable = __webpack_require__(99);
Stream.Duplex = __webpack_require__(100);
Stream.Transform = __webpack_require__(101);
Stream.PassThrough = __webpack_require__(102);

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(48);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(29);
exports.Duplex = __webpack_require__(10);
exports.Transform = __webpack_require__(51);
exports.PassThrough = __webpack_require__(98);


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(3)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var pna = __webpack_require__(19);
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = Object.create(__webpack_require__(14));
util.inherits = __webpack_require__(0);
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(97)
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(49);
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(28).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = __webpack_require__(50);

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(10);

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(10);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6), __webpack_require__(95).setImmediate, __webpack_require__(7)))

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__(1).Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Buffer = __webpack_require__(3).Buffer
var inherits = __webpack_require__(0)
var HashBase = __webpack_require__(47)

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = __webpack_require__(103)
exports.sha1 = __webpack_require__(104)
exports.sha224 = __webpack_require__(105)
exports.sha256 = __webpack_require__(52)
exports.sha384 = __webpack_require__(106)
exports.sha512 = __webpack_require__(53)


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(4);

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

var ciphers = __webpack_require__(115)
var deciphers = __webpack_require__(123)
var modes = __webpack_require__(65)

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

var modeModules = {
  ECB: __webpack_require__(116),
  CBC: __webpack_require__(117),
  CFB: __webpack_require__(118),
  CFB8: __webpack_require__(119),
  CFB1: __webpack_require__(120),
  OFB: __webpack_require__(121),
  CTR: __webpack_require__(63),
  GCM: __webpack_require__(63)
}

var modes = __webpack_require__(65)

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = __webpack_require__(128);
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var bn = __webpack_require__(2);
var randomBytes = __webpack_require__(11);
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3).Buffer))

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = exports;

elliptic.version = __webpack_require__(133).version;
elliptic.utils = __webpack_require__(5);
elliptic.rand = __webpack_require__(36);
elliptic.curve = __webpack_require__(71);
elliptic.curves = __webpack_require__(39);

// Protocols
elliptic.ec = __webpack_require__(144);
elliptic.eddsa = __webpack_require__(148);


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curves = exports;

var hash = __webpack_require__(40);
var curve = __webpack_require__(71);
var utils = __webpack_require__(5);

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = __webpack_require__(143);
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var hash = exports;

hash.utils = __webpack_require__(8);
hash.common = __webpack_require__(16);
hash.sha = __webpack_require__(137);
hash.ripemd = __webpack_require__(141);
hash.hmac = __webpack_require__(142);

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 * Versions enum
 */
var Versions;
(function (Versions) {
    Versions["0.0.1"] = "0.0.1";
})(Versions = exports.Versions || (exports.Versions = {}));
(function (Versions) {
    /**
     *
     * Checks if the provided version is supported
     * @param {string} str - Provided version string.
     * @returns {boolean} - If is supported or not.
     * @memberof Versions
     */
    function isSupported(version) {
        switch (version) {
            case Versions['0.0.1'].toString():
                return true;
            case '':
                return false;
            default:
                return false;
        }
    }
    Versions.isSupported = isSupported;
})(Versions = exports.Versions || (exports.Versions = {}));


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Helper = /** @class */ (function () {
    function Helper() {
    }
    /**
     * referenced from https://stackoverflow.com/a/10121740
     * Checks the lenght of a provided string
     * @param {string} str - Provided string.
     * @returns {number} - The string lenght in bytes.
     * @memberof Helper
     */
    Helper.byteLength = function (str) {
        var a = [];
        for (var i = 0; i < str.length; i += 2) {
            a.push(str.substr(i, 2));
        }
        return a.length;
    };
    /**
     * referenced from https://www.sitepoint.com/community/t/how-to-check-if-string-is-hexadecimal/162739/2
     * Checks if the provided string is a valid Hex.
     * @param {string} str - Provided string.
     * @returns {boolean} - If is a valid Hex string or not.
     * @memberof Helper
     */
    Helper.validateHexStr = function (str) {
        var re = /[0-9A-Fa-f]/g;
        if (re.test(str)) {
            return true;
        }
        return false;
    };
    Helper.fromHex = function (str) {
        if (!str) {
            return new Uint8Array(0);
        }
        var data = [];
        for (var index = 0, len = str.length; index < len; index += 2) {
            data.push(parseInt(str.substr(index, 2), 16));
        }
        return new Uint8Array(data);
    };
    return Helper;
}());
exports.Helper = Helper;


/***/ }),
/* 43 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 44 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = __webpack_require__(11)
exports.createHash = exports.Hash = __webpack_require__(13)
exports.createHmac = exports.Hmac = __webpack_require__(54)

var algos = __webpack_require__(108)
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = __webpack_require__(57)
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = __webpack_require__(110)

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = __webpack_require__(125)

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = __webpack_require__(131)

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = __webpack_require__(165)

var publicEncrypt = __webpack_require__(166)

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = __webpack_require__(169)

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Buffer = __webpack_require__(1).Buffer
var Transform = __webpack_require__(25).Transform
var inherits = __webpack_require__(0)

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var pna = __webpack_require__(19);
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__(43);
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(26).EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(49);
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(28).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = Object.create(__webpack_require__(14));
util.inherits = __webpack_require__(0);
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(92);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(93);
var destroyImpl = __webpack_require__(50);
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(10);

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(30).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(10);

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(30).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(7), __webpack_require__(6)))

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(26).EventEmitter;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var pna = __webpack_require__(19);
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(10);

/*<replacement>*/
var util = Object.create(__webpack_require__(14));
util.inherits = __webpack_require__(0);
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(0)
var Hash = __webpack_require__(12)
var Buffer = __webpack_require__(1).Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(0)
var Hash = __webpack_require__(12)
var Buffer = __webpack_require__(1).Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(0)
var Legacy = __webpack_require__(107)
var Base = __webpack_require__(9)
var Buffer = __webpack_require__(1).Buffer
var md5 = __webpack_require__(55)
var RIPEMD160 = __webpack_require__(31)

var sha = __webpack_require__(32)

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var MD5 = __webpack_require__(24)

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}


/***/ }),
/* 56 */
/***/ (function(module) {

module.exports = JSON.parse("{\"sha224WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"RSA-SHA224\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"sha256WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"RSA-SHA256\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"sha384WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"RSA-SHA384\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"sha512WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA512\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA1\":{\"sign\":\"rsa\",\"hash\":\"sha1\",\"id\":\"3021300906052b0e03021a05000414\"},\"ecdsa-with-SHA1\":{\"sign\":\"ecdsa\",\"hash\":\"sha1\",\"id\":\"\"},\"sha256\":{\"sign\":\"ecdsa\",\"hash\":\"sha256\",\"id\":\"\"},\"sha224\":{\"sign\":\"ecdsa\",\"hash\":\"sha224\",\"id\":\"\"},\"sha384\":{\"sign\":\"ecdsa\",\"hash\":\"sha384\",\"id\":\"\"},\"sha512\":{\"sign\":\"ecdsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-SHA1\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-WITH-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-WITH-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-WITH-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-WITH-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-RIPEMD160\":{\"sign\":\"dsa\",\"hash\":\"rmd160\",\"id\":\"\"},\"ripemd160WithRSA\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"RSA-RIPEMD160\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"md5WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"},\"RSA-MD5\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"}}");

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

exports.pbkdf2 = __webpack_require__(109)
exports.pbkdf2Sync = __webpack_require__(60)


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

function checkBuffer (buf, name) {
  if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
    throw new TypeError(name + ' must be a buffer or string')
  }
}

module.exports = function (password, salt, iterations, keylen) {
  checkBuffer(password, 'Password')
  checkBuffer(salt, 'Salt')

  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3).Buffer))

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var defaultEncoding
/* istanbul ignore next */
if (process.browser) {
  defaultEncoding = 'utf-8'
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
}
module.exports = defaultEncoding

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)))

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

var md5 = __webpack_require__(55)
var RIPEMD160 = __webpack_require__(31)
var sha = __webpack_require__(32)

var checkParameters = __webpack_require__(58)
var defaultEncoding = __webpack_require__(59)
var Buffer = __webpack_require__(1).Buffer
var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(password, salt, iterations, keylen)

  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(4);
var inherits = __webpack_require__(0);

var utils = __webpack_require__(61);
var Cipher = __webpack_require__(33);

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__(15)
var Buffer = __webpack_require__(1).Buffer
var incr32 = __webpack_require__(64)

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}


/***/ }),
/* 64 */
/***/ (function(module, exports) {

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32


/***/ }),
/* 65 */
/***/ (function(module) {

module.exports = JSON.parse("{\"aes-128-ecb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-192-ecb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-256-ecb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-128-cbc\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-192-cbc\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-256-cbc\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes128\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes192\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes256\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-128-cfb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-192-cfb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-256-cfb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-128-cfb8\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-192-cfb8\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-256-cfb8\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-128-cfb1\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-192-cfb1\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-256-cfb1\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-128-ofb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-192-ofb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-256-ofb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-128-ctr\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-192-ctr\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-256-ctr\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-128-gcm\":{\"cipher\":\"AES\",\"key\":128,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-192-gcm\":{\"cipher\":\"AES\",\"key\":192,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-256-gcm\":{\"cipher\":\"AES\",\"key\":256,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"}}");

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var aes = __webpack_require__(20)
var Buffer = __webpack_require__(1).Buffer
var Transform = __webpack_require__(9)
var inherits = __webpack_require__(0)
var GHASH = __webpack_require__(122)
var xor = __webpack_require__(15)
var incr32 = __webpack_require__(64)

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var aes = __webpack_require__(20)
var Buffer = __webpack_require__(1).Buffer
var Transform = __webpack_require__(9)
var inherits = __webpack_require__(0)

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

var randomBytes = __webpack_require__(11);
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = __webpack_require__(2);
var TWENTYFOUR = new BN(24);
var MillerRabin = __webpack_require__(69);
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var bn = __webpack_require__(2);
var brorand = __webpack_require__(36);

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = exports;

curve.base = __webpack_require__(22);
curve.short = __webpack_require__(134);
curve.mont = __webpack_require__(135);
curve.edwards = __webpack_require__(136);


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(8);
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(8);
var common = __webpack_require__(16);
var shaCommon = __webpack_require__(72);
var assert = __webpack_require__(4);

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(8);
var common = __webpack_require__(16);
var assert = __webpack_require__(4);

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(0);
var Reporter = __webpack_require__(18).Reporter;
var Buffer = __webpack_require__(3).Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = __webpack_require__(156);


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(0);

var asn1 = __webpack_require__(17);
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(0);
var Buffer = __webpack_require__(3).Buffer;

var asn1 = __webpack_require__(17);
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}


/***/ }),
/* 79 */
/***/ (function(module) {

module.exports = JSON.parse("{\"1.3.132.0.10\":\"secp256k1\",\"1.3.132.0.33\":\"p224\",\"1.2.840.10045.3.1.1\":\"p192\",\"1.2.840.10045.3.1.7\":\"p256\",\"1.3.132.0.34\":\"p384\",\"1.3.132.0.35\":\"p521\"}");

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

var createHash = __webpack_require__(13)
var Buffer = __webpack_require__(1).Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}


/***/ }),
/* 81 */
/***/ (function(module, exports) {

module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

var BN = __webpack_require__(2)
var Buffer = __webpack_require__(1).Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// created from 'create-ts-index'
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(84));
__export(__webpack_require__(85));


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// created from 'create-ts-index'
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(41));
__export(__webpack_require__(42));


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var js_sha3_1 = __webpack_require__(86);
var helper_1 = __webpack_require__(42);
var enums_1 = __webpack_require__(41);
var Sodium = __webpack_require__(88);
/**
 * @description PocketAAT implementation
 * (version 0.0.1 of the specification:
 * https://github.com/pokt-network/pocket-core/blob/staging/doc/application-auth-token.md).
 */
var PocketAAT = /** @class */ (function () {
    /**
     * @description PocketAAT constructor
     * @param {string} version - Version information.
     * @param {string} clientPublicKey - Client Public Key.
     * @param {string} applicationPublicKey - Application Public Key.
     * @param {string} applicationSignature - Application Signature.
     */
    function PocketAAT(version, clientPublicKey, applicationPublicKey, applicationSignature) {
        this.version = enums_1.Versions['0.0.1'].toString();
        this.version = version;
        this.clientPublicKey = clientPublicKey;
        this.applicationPublicKey = applicationPublicKey;
        this.applicationSignature = applicationSignature;
        // Payload to verify signature
        var payload = {
            version: version,
            app_pub_key: applicationPublicKey,
            client_pub_key: clientPublicKey,
            signature: '',
        };
        if (!this.isValid()) {
            throw new TypeError('Invalid properties format.');
        }
        if (!this.verifyAATSignature(payload, applicationPublicKey, applicationSignature)) {
            throw new TypeError('Invalid AAT Signature.');
        }
    }
    /**
     *
     * Creates a PocketAAT object, automatically creates the
     * signature using the provided parameters
     * @param {string} version - Version information.
     * @param {string} clientPublicKey - Client Public Key.
     * @param {string} applicationPublicKey - Application Public Key.
     * @param {string} privateKey - Private Key.
     * @returns {PocketAAT} - Pocket Authentication Token object.
     * @memberof PocketAAT
     */
    PocketAAT.from = function (version, clientPublicKey, applicationPublicKey, privateKey) {
        var _this = this;
        return Sodium.ready.then(function () {
            if (enums_1.Versions.isSupported(version)) {
                var applicationSignature = _this.sign({
                    version: version,
                    app_pub_key: applicationPublicKey,
                    client_pub_key: clientPublicKey,
                    signature: '',
                }, privateKey);
                return new PocketAAT(version, clientPublicKey, applicationPublicKey, applicationSignature);
            }
            else {
                console.log("POCKET AAT ERROR");
                throw new TypeError('Provided version is not supported.');
            }
        });
    };
    /**
     * @description Given an aatPayload object, create a SHA3 hash of it and signs it using privateKey.
     * @param aatPayload - Object with the mandatory parameters.
     * @param privateKey - Private Key
     */
    PocketAAT.sign = function (aatPayload, privateKey) {
        // Generate sha3 hash of the aat payload object
        var hash = js_sha3_1.sha3_256.create();
        hash.update(JSON.stringify(aatPayload));
        var bufferPayload = helper_1.Helper.fromHex(hash.hex());
        if (helper_1.Helper.byteLength(privateKey) === 64 && helper_1.Helper.validateHexStr(privateKey)) {
            // Return signed aat payload hash
            var privateKeyBuffer = helper_1.Helper.fromHex(privateKey);
            var signature = Sodium.crypto_sign(bufferPayload, privateKeyBuffer, 'hex');
            return signature.substring(0, 128);
        }
        else {
            throw new TypeError("Private key can't be an empty string");
        }
    };
    /**
     * @description Returns whether or not this is a valid AAT according to the current version.
     */
    PocketAAT.prototype.isValid = function () {
        return (this.version.length !== 0 &&
            helper_1.Helper.byteLength(this.clientPublicKey) === 32 &&
            helper_1.Helper.validateHexStr(this.clientPublicKey) &&
            helper_1.Helper.byteLength(this.applicationPublicKey) === 32 &&
            helper_1.Helper.validateHexStr(this.applicationPublicKey) &&
            helper_1.Helper.validateHexStr(this.applicationSignature));
    };
    /**
     * @description Verifies if the application signature belongs to the application public .
     * @param aatPayload - Object with the mandatory parameters.
     * @param privateKey - Private Key
     */
    PocketAAT.prototype.verifyAATSignature = function (payload, applicationPublicKey, applicationSignature) {
        // Generate sha3 hash of the aat payload object
        var hash = js_sha3_1.sha3_256.create();
        hash.update(JSON.stringify(payload));
        var bufferPayload = helper_1.Helper.fromHex(hash.hex());
        var bufferApplicationSignature = helper_1.Helper.fromHex(applicationSignature);
        var bufferApplicationPublicKey = helper_1.Helper.fromHex(applicationPublicKey);
        return Sodium.crypto_sign_verify_detached(bufferApplicationSignature, bufferPayload, bufferApplicationPublicKey);
    };
    return PocketAAT;
}());
exports.PocketAAT = PocketAAT;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */
/*jslint bitwise: true */
(function () {
  'use strict';

  var INPUT_ERROR = 'input is invalid type';
  var FINALIZE_ERROR = 'finalize already called';
  var WINDOW = typeof window === 'object';
  var root = WINDOW ? window : {};
  if (root.JS_SHA3_NO_WINDOW) {
    WINDOW = false;
  }
  var WEB_WORKER = !WINDOW && typeof self === 'object';
  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
  if (NODE_JS) {
    root = global;
  } else if (WEB_WORKER) {
    root = self;
  }
  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;
  var AMD =  true && __webpack_require__(87);
  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
  var HEX_CHARS = '0123456789abcdef'.split('');
  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
  var KECCAK_PADDING = [1, 256, 65536, 16777216];
  var PADDING = [6, 1536, 393216, 100663296];
  var SHIFT = [0, 8, 16, 24];
  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
  var BITS = [224, 256, 384, 512];
  var SHAKE_BITS = [128, 256];
  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
  var CSHAKE_BYTEPAD = {
    '128': 168,
    '256': 136
  };

  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
    Array.isArray = function (obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    };
  }

  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
    ArrayBuffer.isView = function (obj) {
      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    };
  }

  var createOutputMethod = function (bits, padding, outputType) {
    return function (message) {
      return new Keccak(bits, padding, bits).update(message)[outputType]();
    };
  };

  var createShakeOutputMethod = function (bits, padding, outputType) {
    return function (message, outputBits) {
      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
    };
  };

  var createCshakeOutputMethod = function (bits, padding, outputType) {
    return function (message, outputBits, n, s) {
      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
    };
  };

  var createKmacOutputMethod = function (bits, padding, outputType) {
    return function (key, message, outputBits, s) {
      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
    };
  };

  var createOutputMethods = function (method, createMethod, bits, padding) {
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createMethod(bits, padding, type);
    }
    return method;
  };

  var createMethod = function (bits, padding) {
    var method = createOutputMethod(bits, padding, 'hex');
    method.create = function () {
      return new Keccak(bits, padding, bits);
    };
    method.update = function (message) {
      return method.create().update(message);
    };
    return createOutputMethods(method, createOutputMethod, bits, padding);
  };

  var createShakeMethod = function (bits, padding) {
    var method = createShakeOutputMethod(bits, padding, 'hex');
    method.create = function (outputBits) {
      return new Keccak(bits, padding, outputBits);
    };
    method.update = function (message, outputBits) {
      return method.create(outputBits).update(message);
    };
    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
  };

  var createCshakeMethod = function (bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createCshakeOutputMethod(bits, padding, 'hex');
    method.create = function (outputBits, n, s) {
      if (!n && !s) {
        return methods['shake' + bits].create(outputBits);
      } else {
        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
      }
    };
    method.update = function (message, outputBits, n, s) {
      return method.create(outputBits, n, s).update(message);
    };
    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
  };

  var createKmacMethod = function (bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createKmacOutputMethod(bits, padding, 'hex');
    method.create = function (key, outputBits, s) {
      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
    };
    method.update = function (key, message, outputBits, s) {
      return method.create(key, outputBits, s).update(message);
    };
    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
  };

  var algorithms = [
    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
  ];

  var methods = {}, methodNames = [];

  for (var i = 0; i < algorithms.length; ++i) {
    var algorithm = algorithms[i];
    var bits = algorithm.bits;
    for (var j = 0; j < bits.length; ++j) {
      var methodName = algorithm.name + '_' + bits[j];
      methodNames.push(methodName);
      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
      if (algorithm.name !== 'sha3') {
        var newMethodName = algorithm.name + bits[j];
        methodNames.push(newMethodName);
        methods[newMethodName] = methods[methodName];
      }
    }
  }

  function Keccak(bits, padding, outputBits) {
    this.blocks = [];
    this.s = [];
    this.padding = padding;
    this.outputBits = outputBits;
    this.reset = true;
    this.finalized = false;
    this.block = 0;
    this.start = 0;
    this.blockCount = (1600 - (bits << 1)) >> 5;
    this.byteCount = this.blockCount << 2;
    this.outputBlocks = outputBits >> 5;
    this.extraBytes = (outputBits & 31) >> 3;

    for (var i = 0; i < 50; ++i) {
      this.s[i] = 0;
    }
  }

  Keccak.prototype.update = function (message) {
    if (this.finalized) {
      throw new Error(FINALIZE_ERROR);
    }
    var notString, type = typeof message;
    if (type !== 'string') {
      if (type === 'object') {
        if (message === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        } else if (!Array.isArray(message)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }
      notString = true;
    }
    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
      blockCount = this.blockCount, index = 0, s = this.s, i, code;

    while (index < length) {
      if (this.reset) {
        this.reset = false;
        blocks[0] = this.block;
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      if (notString) {
        for (i = this.start; index < length && i < byteCount; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < byteCount; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          }
        }
      }
      this.lastByteIndex = i;
      if (i >= byteCount) {
        this.start = i - byteCount;
        this.block = blocks[blockCount];
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
        this.reset = true;
      } else {
        this.start = i;
      }
    }
    return this;
  };

  Keccak.prototype.encode = function (x, right) {
    var o = x & 255, n = 1;
    var bytes = [o];
    x = x >> 8;
    o = x & 255;
    while (o > 0) {
      bytes.unshift(o);
      x = x >> 8;
      o = x & 255;
      ++n;
    }
    if (right) {
      bytes.push(n);
    } else {
      bytes.unshift(n);
    }
    this.update(bytes);
    return bytes.length;
  };

  Keccak.prototype.encodeString = function (str) {
    var notString, type = typeof str;
    if (type !== 'string') {
      if (type === 'object') {
        if (str === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
          str = new Uint8Array(str);
        } else if (!Array.isArray(str)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }
      notString = true;
    }
    var bytes = 0, length = str.length;
    if (notString) {
      bytes = length;
    } else {
      for (var i = 0; i < str.length; ++i) {
        var code = str.charCodeAt(i);
        if (code < 0x80) {
          bytes += 1;
        } else if (code < 0x800) {
          bytes += 2;
        } else if (code < 0xd800 || code >= 0xe000) {
          bytes += 3;
        } else {
          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
          bytes += 4;
        }
      }
    }
    bytes += this.encode(bytes * 8);
    this.update(str);
    return bytes;
  };

  Keccak.prototype.bytepad = function (strs, w) {
    var bytes = this.encode(w);
    for (var i = 0; i < strs.length; ++i) {
      bytes += this.encodeString(strs[i]);
    }
    var paddingBytes = w - bytes % w;
    var zeros = [];
    zeros.length = paddingBytes;
    this.update(zeros);
    return this;
  };

  Keccak.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
    blocks[i >> 2] |= this.padding[i & 3];
    if (this.lastByteIndex === this.byteCount) {
      blocks[0] = blocks[blockCount];
      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0;
      }
    }
    blocks[blockCount - 1] |= 0x80000000;
    for (i = 0; i < blockCount; ++i) {
      s[i] ^= blocks[i];
    }
    f(s);
  };

  Keccak.prototype.toString = Keccak.prototype.hex = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var hex = '', block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        block = s[i];
        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
      }
      if (j % blockCount === 0) {
        f(s);
        i = 0;
      }
    }
    if (extraBytes) {
      block = s[i];
      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
      if (extraBytes > 1) {
        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
      }
      if (extraBytes > 2) {
        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
      }
    }
    return hex;
  };

  Keccak.prototype.arrayBuffer = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var bytes = this.outputBits >> 3;
    var buffer;
    if (extraBytes) {
      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
    } else {
      buffer = new ArrayBuffer(bytes);
    }
    var array = new Uint32Array(buffer);
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        array[j] = s[i];
      }
      if (j % blockCount === 0) {
        f(s);
      }
    }
    if (extraBytes) {
      array[i] = s[i];
      buffer = buffer.slice(0, bytes);
    }
    return buffer;
  };

  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

  Keccak.prototype.digest = Keccak.prototype.array = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var array = [], offset, block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        offset = j << 2;
        block = s[i];
        array[offset] = block & 0xFF;
        array[offset + 1] = (block >> 8) & 0xFF;
        array[offset + 2] = (block >> 16) & 0xFF;
        array[offset + 3] = (block >> 24) & 0xFF;
      }
      if (j % blockCount === 0) {
        f(s);
      }
    }
    if (extraBytes) {
      offset = j << 2;
      block = s[i];
      array[offset] = block & 0xFF;
      if (extraBytes > 1) {
        array[offset + 1] = (block >> 8) & 0xFF;
      }
      if (extraBytes > 2) {
        array[offset + 2] = (block >> 16) & 0xFF;
      }
    }
    return array;
  };

  function Kmac(bits, padding, outputBits) {
    Keccak.call(this, bits, padding, outputBits);
  }

  Kmac.prototype = new Keccak();

  Kmac.prototype.finalize = function () {
    this.encode(this.outputBits, true);
    return Keccak.prototype.finalize.call(this);
  };

  var f = function (s) {
    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
    for (n = 0; n < 48; n += 2) {
      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
      s[0] ^= h;
      s[1] ^= l;
      s[10] ^= h;
      s[11] ^= l;
      s[20] ^= h;
      s[21] ^= l;
      s[30] ^= h;
      s[31] ^= l;
      s[40] ^= h;
      s[41] ^= l;
      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
      s[2] ^= h;
      s[3] ^= l;
      s[12] ^= h;
      s[13] ^= l;
      s[22] ^= h;
      s[23] ^= l;
      s[32] ^= h;
      s[33] ^= l;
      s[42] ^= h;
      s[43] ^= l;
      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
      s[4] ^= h;
      s[5] ^= l;
      s[14] ^= h;
      s[15] ^= l;
      s[24] ^= h;
      s[25] ^= l;
      s[34] ^= h;
      s[35] ^= l;
      s[44] ^= h;
      s[45] ^= l;
      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
      s[6] ^= h;
      s[7] ^= l;
      s[16] ^= h;
      s[17] ^= l;
      s[26] ^= h;
      s[27] ^= l;
      s[36] ^= h;
      s[37] ^= l;
      s[46] ^= h;
      s[47] ^= l;
      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
      s[8] ^= h;
      s[9] ^= l;
      s[18] ^= h;
      s[19] ^= l;
      s[28] ^= h;
      s[29] ^= l;
      s[38] ^= h;
      s[39] ^= l;
      s[48] ^= h;
      s[49] ^= l;

      b0 = s[0];
      b1 = s[1];
      b32 = (s[11] << 4) | (s[10] >>> 28);
      b33 = (s[10] << 4) | (s[11] >>> 28);
      b14 = (s[20] << 3) | (s[21] >>> 29);
      b15 = (s[21] << 3) | (s[20] >>> 29);
      b46 = (s[31] << 9) | (s[30] >>> 23);
      b47 = (s[30] << 9) | (s[31] >>> 23);
      b28 = (s[40] << 18) | (s[41] >>> 14);
      b29 = (s[41] << 18) | (s[40] >>> 14);
      b20 = (s[2] << 1) | (s[3] >>> 31);
      b21 = (s[3] << 1) | (s[2] >>> 31);
      b2 = (s[13] << 12) | (s[12] >>> 20);
      b3 = (s[12] << 12) | (s[13] >>> 20);
      b34 = (s[22] << 10) | (s[23] >>> 22);
      b35 = (s[23] << 10) | (s[22] >>> 22);
      b16 = (s[33] << 13) | (s[32] >>> 19);
      b17 = (s[32] << 13) | (s[33] >>> 19);
      b48 = (s[42] << 2) | (s[43] >>> 30);
      b49 = (s[43] << 2) | (s[42] >>> 30);
      b40 = (s[5] << 30) | (s[4] >>> 2);
      b41 = (s[4] << 30) | (s[5] >>> 2);
      b22 = (s[14] << 6) | (s[15] >>> 26);
      b23 = (s[15] << 6) | (s[14] >>> 26);
      b4 = (s[25] << 11) | (s[24] >>> 21);
      b5 = (s[24] << 11) | (s[25] >>> 21);
      b36 = (s[34] << 15) | (s[35] >>> 17);
      b37 = (s[35] << 15) | (s[34] >>> 17);
      b18 = (s[45] << 29) | (s[44] >>> 3);
      b19 = (s[44] << 29) | (s[45] >>> 3);
      b10 = (s[6] << 28) | (s[7] >>> 4);
      b11 = (s[7] << 28) | (s[6] >>> 4);
      b42 = (s[17] << 23) | (s[16] >>> 9);
      b43 = (s[16] << 23) | (s[17] >>> 9);
      b24 = (s[26] << 25) | (s[27] >>> 7);
      b25 = (s[27] << 25) | (s[26] >>> 7);
      b6 = (s[36] << 21) | (s[37] >>> 11);
      b7 = (s[37] << 21) | (s[36] >>> 11);
      b38 = (s[47] << 24) | (s[46] >>> 8);
      b39 = (s[46] << 24) | (s[47] >>> 8);
      b30 = (s[8] << 27) | (s[9] >>> 5);
      b31 = (s[9] << 27) | (s[8] >>> 5);
      b12 = (s[18] << 20) | (s[19] >>> 12);
      b13 = (s[19] << 20) | (s[18] >>> 12);
      b44 = (s[29] << 7) | (s[28] >>> 25);
      b45 = (s[28] << 7) | (s[29] >>> 25);
      b26 = (s[38] << 8) | (s[39] >>> 24);
      b27 = (s[39] << 8) | (s[38] >>> 24);
      b8 = (s[48] << 14) | (s[49] >>> 18);
      b9 = (s[49] << 14) | (s[48] >>> 18);

      s[0] = b0 ^ (~b2 & b4);
      s[1] = b1 ^ (~b3 & b5);
      s[10] = b10 ^ (~b12 & b14);
      s[11] = b11 ^ (~b13 & b15);
      s[20] = b20 ^ (~b22 & b24);
      s[21] = b21 ^ (~b23 & b25);
      s[30] = b30 ^ (~b32 & b34);
      s[31] = b31 ^ (~b33 & b35);
      s[40] = b40 ^ (~b42 & b44);
      s[41] = b41 ^ (~b43 & b45);
      s[2] = b2 ^ (~b4 & b6);
      s[3] = b3 ^ (~b5 & b7);
      s[12] = b12 ^ (~b14 & b16);
      s[13] = b13 ^ (~b15 & b17);
      s[22] = b22 ^ (~b24 & b26);
      s[23] = b23 ^ (~b25 & b27);
      s[32] = b32 ^ (~b34 & b36);
      s[33] = b33 ^ (~b35 & b37);
      s[42] = b42 ^ (~b44 & b46);
      s[43] = b43 ^ (~b45 & b47);
      s[4] = b4 ^ (~b6 & b8);
      s[5] = b5 ^ (~b7 & b9);
      s[14] = b14 ^ (~b16 & b18);
      s[15] = b15 ^ (~b17 & b19);
      s[24] = b24 ^ (~b26 & b28);
      s[25] = b25 ^ (~b27 & b29);
      s[34] = b34 ^ (~b36 & b38);
      s[35] = b35 ^ (~b37 & b39);
      s[44] = b44 ^ (~b46 & b48);
      s[45] = b45 ^ (~b47 & b49);
      s[6] = b6 ^ (~b8 & b0);
      s[7] = b7 ^ (~b9 & b1);
      s[16] = b16 ^ (~b18 & b10);
      s[17] = b17 ^ (~b19 & b11);
      s[26] = b26 ^ (~b28 & b20);
      s[27] = b27 ^ (~b29 & b21);
      s[36] = b36 ^ (~b38 & b30);
      s[37] = b37 ^ (~b39 & b31);
      s[46] = b46 ^ (~b48 & b40);
      s[47] = b47 ^ (~b49 & b41);
      s[8] = b8 ^ (~b0 & b2);
      s[9] = b9 ^ (~b1 & b3);
      s[18] = b18 ^ (~b10 & b12);
      s[19] = b19 ^ (~b11 & b13);
      s[28] = b28 ^ (~b20 & b22);
      s[29] = b29 ^ (~b21 & b23);
      s[38] = b38 ^ (~b30 & b32);
      s[39] = b39 ^ (~b31 & b33);
      s[48] = b48 ^ (~b40 & b42);
      s[49] = b49 ^ (~b41 & b43);

      s[0] ^= RC[n];
      s[1] ^= RC[n + 1];
    }
  };

  if (COMMON_JS) {
    module.exports = methods;
  } else {
    for (i = 0; i < methodNames.length; ++i) {
      root[methodNames[i]] = methods[methodNames[i]];
    }
    if (AMD) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
        return methods;
      }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
  }
})();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6), __webpack_require__(7)))

/***/ }),
/* 87 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function(e){function t(e,t){"use strict";var r,a="uint8array",_=t.ready.then(function(){function a(){if(0!==r._sodium_init())throw new Error("libsodium was not correctly initialized.");for(var t=["crypto_aead_chacha20poly1305_decrypt","crypto_aead_chacha20poly1305_decrypt_detached","crypto_aead_chacha20poly1305_encrypt","crypto_aead_chacha20poly1305_encrypt_detached","crypto_aead_chacha20poly1305_ietf_decrypt","crypto_aead_chacha20poly1305_ietf_decrypt_detached","crypto_aead_chacha20poly1305_ietf_encrypt","crypto_aead_chacha20poly1305_ietf_encrypt_detached","crypto_aead_chacha20poly1305_ietf_keygen","crypto_aead_chacha20poly1305_keygen","crypto_aead_xchacha20poly1305_ietf_decrypt","crypto_aead_xchacha20poly1305_ietf_decrypt_detached","crypto_aead_xchacha20poly1305_ietf_encrypt","crypto_aead_xchacha20poly1305_ietf_encrypt_detached","crypto_aead_xchacha20poly1305_ietf_keygen","crypto_auth","crypto_auth_hmacsha256","crypto_auth_hmacsha256_keygen","crypto_auth_hmacsha256_verify","crypto_auth_hmacsha512","crypto_auth_hmacsha512_keygen","crypto_auth_hmacsha512_verify","crypto_auth_keygen","crypto_auth_verify","crypto_box_beforenm","crypto_box_curve25519xchacha20poly1305_keypair","crypto_box_curve25519xchacha20poly1305_seal","crypto_box_curve25519xchacha20poly1305_seal_open","crypto_box_detached","crypto_box_easy","crypto_box_easy_afternm","crypto_box_keypair","crypto_box_open_detached","crypto_box_open_easy","crypto_box_open_easy_afternm","crypto_box_seal","crypto_box_seal_open","crypto_box_seed_keypair","crypto_core_ristretto255_add","crypto_core_ristretto255_from_hash","crypto_core_ristretto255_is_valid_point","crypto_core_ristretto255_random","crypto_core_ristretto255_scalar_add","crypto_core_ristretto255_scalar_complement","crypto_core_ristretto255_scalar_invert","crypto_core_ristretto255_scalar_mul","crypto_core_ristretto255_scalar_negate","crypto_core_ristretto255_scalar_random","crypto_core_ristretto255_scalar_reduce","crypto_core_ristretto255_scalar_sub","crypto_core_ristretto255_sub","crypto_generichash","crypto_generichash_blake2b_salt_personal","crypto_generichash_final","crypto_generichash_init","crypto_generichash_keygen","crypto_generichash_update","crypto_hash","crypto_hash_sha256","crypto_hash_sha512","crypto_kdf_derive_from_key","crypto_kdf_keygen","crypto_kx_client_session_keys","crypto_kx_keypair","crypto_kx_seed_keypair","crypto_kx_server_session_keys","crypto_onetimeauth","crypto_onetimeauth_final","crypto_onetimeauth_init","crypto_onetimeauth_keygen","crypto_onetimeauth_update","crypto_onetimeauth_verify","crypto_pwhash","crypto_pwhash_scryptsalsa208sha256","crypto_pwhash_scryptsalsa208sha256_ll","crypto_pwhash_scryptsalsa208sha256_str","crypto_pwhash_scryptsalsa208sha256_str_verify","crypto_pwhash_str","crypto_pwhash_str_verify","crypto_scalarmult","crypto_scalarmult_base","crypto_scalarmult_ristretto255","crypto_scalarmult_ristretto255_base","crypto_secretbox_detached","crypto_secretbox_easy","crypto_secretbox_keygen","crypto_secretbox_open_detached","crypto_secretbox_open_easy","crypto_secretstream_xchacha20poly1305_init_pull","crypto_secretstream_xchacha20poly1305_init_push","crypto_secretstream_xchacha20poly1305_keygen","crypto_secretstream_xchacha20poly1305_pull","crypto_secretstream_xchacha20poly1305_push","crypto_secretstream_xchacha20poly1305_rekey","crypto_shorthash","crypto_shorthash_keygen","crypto_shorthash_siphashx24","crypto_sign","crypto_sign_detached","crypto_sign_ed25519_pk_to_curve25519","crypto_sign_ed25519_sk_to_curve25519","crypto_sign_ed25519_sk_to_pk","crypto_sign_ed25519_sk_to_seed","crypto_sign_final_create","crypto_sign_final_verify","crypto_sign_init","crypto_sign_keypair","crypto_sign_open","crypto_sign_seed_keypair","crypto_sign_update","crypto_sign_verify_detached","crypto_stream_chacha20","crypto_stream_chacha20_ietf_xor","crypto_stream_chacha20_ietf_xor_ic","crypto_stream_chacha20_keygen","crypto_stream_chacha20_xor","crypto_stream_chacha20_xor_ic","crypto_stream_keygen","crypto_stream_xchacha20_keygen","crypto_stream_xchacha20_xor","crypto_stream_xchacha20_xor_ic","randombytes_buf","randombytes_buf_deterministic","randombytes_close","randombytes_random","randombytes_set_implementation","randombytes_stir","randombytes_uniform","sodium_version_string"],a=[x,E,w,S,T,Y,A,B,K,I,M,L,N,U,O,R,P,C,G,D,X,V,F,H,z,j,q,W,J,Q,Z,$,ee,te,re,ae,_e,ne,se,ce,he,oe,pe,ye,ie,le,ue,ve,de,ge,be,fe,me,ke,xe,Ee,we,Se,Te,Ye,Ae,Be,Ke,Ie,Me,Le,Ne,Ue,Oe,Re,Pe,Ce,Ge,De,Xe,Ve,Fe,He,ze,je,qe,We,Je,Qe,Ze,$e,et,tt,rt,at,_t,nt,st,ct,ht,ot,pt,yt,it,lt,ut,vt,dt,gt,bt,ft,mt,kt,xt,Et,wt,St,Tt,Yt,At,Bt,Kt,It,Mt,Lt,Nt,Ut,Ot,Rt,Pt,Ct,Gt,Dt,Xt],_=0;_<a.length;_++)"function"==typeof r["_"+t[_]]&&(e[t[_]]=a[_]);var n=["SODIUM_LIBRARY_VERSION_MAJOR","SODIUM_LIBRARY_VERSION_MINOR","crypto_aead_chacha20poly1305_ABYTES","crypto_aead_chacha20poly1305_KEYBYTES","crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX","crypto_aead_chacha20poly1305_NPUBBYTES","crypto_aead_chacha20poly1305_NSECBYTES","crypto_aead_chacha20poly1305_ietf_ABYTES","crypto_aead_chacha20poly1305_ietf_KEYBYTES","crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX","crypto_aead_chacha20poly1305_ietf_NPUBBYTES","crypto_aead_chacha20poly1305_ietf_NSECBYTES","crypto_aead_xchacha20poly1305_ietf_ABYTES","crypto_aead_xchacha20poly1305_ietf_KEYBYTES","crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX","crypto_aead_xchacha20poly1305_ietf_NPUBBYTES","crypto_aead_xchacha20poly1305_ietf_NSECBYTES","crypto_auth_BYTES","crypto_auth_KEYBYTES","crypto_auth_hmacsha256_BYTES","crypto_auth_hmacsha256_KEYBYTES","crypto_auth_hmacsha512_BYTES","crypto_auth_hmacsha512_KEYBYTES","crypto_box_BEFORENMBYTES","crypto_box_MACBYTES","crypto_box_MESSAGEBYTES_MAX","crypto_box_NONCEBYTES","crypto_box_PUBLICKEYBYTES","crypto_box_SEALBYTES","crypto_box_SECRETKEYBYTES","crypto_box_SEEDBYTES","crypto_box_curve25519xchacha20poly1305_NONCEBYTES","crypto_box_curve25519xchacha20poly1305_PUBLICKEYBYTES","crypto_box_curve25519xchacha20poly1305_SECRETKEYBYTES","crypto_core_hchacha20_CONSTBYTES","crypto_core_hchacha20_INPUTBYTES","crypto_core_hchacha20_KEYBYTES","crypto_core_hchacha20_OUTPUTBYTES","crypto_core_ristretto255_BYTES","crypto_core_ristretto255_HASHBYTES","crypto_core_ristretto255_NONREDUCEDSCALARBYTES","crypto_core_ristretto255_SCALARBYTES","crypto_generichash_BYTES","crypto_generichash_BYTES_MAX","crypto_generichash_BYTES_MIN","crypto_generichash_KEYBYTES","crypto_generichash_KEYBYTES_MAX","crypto_generichash_KEYBYTES_MIN","crypto_generichash_blake2b_BYTES","crypto_generichash_blake2b_BYTES_MAX","crypto_generichash_blake2b_BYTES_MIN","crypto_generichash_blake2b_KEYBYTES","crypto_generichash_blake2b_KEYBYTES_MAX","crypto_generichash_blake2b_KEYBYTES_MIN","crypto_generichash_blake2b_PERSONALBYTES","crypto_generichash_blake2b_SALTBYTES","crypto_hash_BYTES","crypto_hash_sha256_BYTES","crypto_hash_sha512_BYTES","crypto_kdf_BYTES_MAX","crypto_kdf_BYTES_MIN","crypto_kdf_CONTEXTBYTES","crypto_kdf_KEYBYTES","crypto_kx_PUBLICKEYBYTES","crypto_kx_SECRETKEYBYTES","crypto_kx_SEEDBYTES","crypto_kx_SESSIONKEYBYTES","crypto_onetimeauth_BYTES","crypto_onetimeauth_KEYBYTES","crypto_pwhash_ALG_ARGON2I13","crypto_pwhash_ALG_ARGON2ID13","crypto_pwhash_ALG_DEFAULT","crypto_pwhash_BYTES_MAX","crypto_pwhash_BYTES_MIN","crypto_pwhash_MEMLIMIT_INTERACTIVE","crypto_pwhash_MEMLIMIT_MAX","crypto_pwhash_MEMLIMIT_MIN","crypto_pwhash_MEMLIMIT_MODERATE","crypto_pwhash_MEMLIMIT_SENSITIVE","crypto_pwhash_OPSLIMIT_INTERACTIVE","crypto_pwhash_OPSLIMIT_MAX","crypto_pwhash_OPSLIMIT_MIN","crypto_pwhash_OPSLIMIT_MODERATE","crypto_pwhash_OPSLIMIT_SENSITIVE","crypto_pwhash_PASSWD_MAX","crypto_pwhash_PASSWD_MIN","crypto_pwhash_SALTBYTES","crypto_pwhash_STRBYTES","crypto_pwhash_STR_VERIFY","crypto_pwhash_scryptsalsa208sha256_BYTES_MAX","crypto_pwhash_scryptsalsa208sha256_BYTES_MIN","crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE","crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MAX","crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MIN","crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE","crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE","crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MAX","crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MIN","crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE","crypto_pwhash_scryptsalsa208sha256_SALTBYTES","crypto_pwhash_scryptsalsa208sha256_STRBYTES","crypto_pwhash_scryptsalsa208sha256_STR_VERIFY","crypto_scalarmult_BYTES","crypto_scalarmult_SCALARBYTES","crypto_scalarmult_ristretto255_BYTES","crypto_scalarmult_ristretto255_SCALARBYTES","crypto_secretbox_KEYBYTES","crypto_secretbox_MACBYTES","crypto_secretbox_MESSAGEBYTES_MAX","crypto_secretbox_NONCEBYTES","crypto_secretstream_xchacha20poly1305_ABYTES","crypto_secretstream_xchacha20poly1305_HEADERBYTES","crypto_secretstream_xchacha20poly1305_KEYBYTES","crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX","crypto_secretstream_xchacha20poly1305_MESSAGESBYTES_MAX","crypto_secretstream_xchacha20poly1305_NPUBBYTES","crypto_secretstream_xchacha20poly1305_TAG_FINAL","crypto_secretstream_xchacha20poly1305_TAG_MESSAGE","crypto_secretstream_xchacha20poly1305_TAG_PUSH","crypto_secretstream_xchacha20poly1305_TAG_REKEY","crypto_shorthash_BYTES","crypto_shorthash_KEYBYTES","crypto_shorthash_siphashx24_BYTES","crypto_shorthash_siphashx24_KEYBYTES","crypto_sign_BYTES","crypto_sign_MESSAGEBYTES_MAX","crypto_sign_PUBLICKEYBYTES","crypto_sign_SECRETKEYBYTES","crypto_sign_SEEDBYTES","crypto_stream_KEYBYTES","crypto_stream_MESSAGEBYTES_MAX","crypto_stream_NONCEBYTES","crypto_stream_chacha20_KEYBYTES","crypto_stream_chacha20_NONCEBYTES","crypto_stream_chacha20_ietf_KEYBYTES","crypto_stream_chacha20_ietf_MESSAGEBYTES_MAX","crypto_stream_chacha20_ietf_NONCEBYTES","crypto_stream_xchacha20_KEYBYTES","crypto_stream_xchacha20_MESSAGEBYTES_MAX","crypto_stream_xchacha20_NONCEBYTES","randombytes_SEEDBYTES"];for(_=0;_<n.length;_++)"function"==typeof(c=r["_"+n[_].toLowerCase()])&&(e[n[_]]=c());var s=["SODIUM_VERSION_STRING","crypto_pwhash_STRPREFIX","crypto_pwhash_scryptsalsa208sha256_STRPREFIX"];for(_=0;_<s.length;_++){var c;"function"==typeof(c=r["_"+s[_].toLowerCase()])&&(e[s[_]]=r.UTF8ToString(c()))}}r=t;try{a();var _=new Uint8Array([98,97,108,108,115]),n=e.randombytes_buf(e.crypto_secretbox_NONCEBYTES),s=e.randombytes_buf(e.crypto_secretbox_KEYBYTES),c=e.crypto_secretbox_easy(_,n,s),h=e.crypto_secretbox_open_easy(c,n,s);if(e.memcmp(_,h))return}catch(e){if(null==r.useBackupModule)throw new Error("Both wasm and asm failed to load"+e)}r.useBackupModule(),a()});function n(e){if("function"==typeof TextEncoder)return(new TextEncoder).encode(e);e=unescape(encodeURIComponent(e));for(var t=new Uint8Array(e.length),r=0,a=e.length;r<a;r++)t[r]=e.charCodeAt(r);return t}function s(e){if("function"==typeof TextDecoder)return new TextDecoder("utf-8",{fatal:!0}).decode(e);var t=Math.ceil(e.length/8192);if(t<=1)try{return decodeURIComponent(escape(String.fromCharCode.apply(null,e)))}catch(e){throw new TypeError("The encoded data was not valid.")}for(var r="",a=0,_=0;_<t;_++){var n=Array.prototype.slice.call(e,8192*_+a,8192*(_+1)+a);if(0!=n.length){var c,h=n.length,o=0;do{var p=n[--h];p>=240?(o=4,c=!0):p>=224?(o=3,c=!0):p>=192?(o=2,c=!0):p<128&&(o=1,c=!0)}while(!c);for(var y=o-(n.length-h),i=0;i<y;i++)a--,n.pop();r+=s(n)}}return r}function c(e){e=k(null,e,"input");for(var t,r,a,_="",n=0;n<e.length;n++)a=87+(r=15&e[n])+(r-10>>8&-39)<<8|87+(t=e[n]>>>4)+(t-10>>8&-39),_+=String.fromCharCode(255&a)+String.fromCharCode(a>>>8);return _}var h={ORIGINAL:1,ORIGINAL_NO_PADDING:3,URLSAFE:5,URLSAFE_NO_PADDING:7};function o(e){if(null==e)return h.URLSAFE_NO_PADDING;if(e!==h.ORIGINAL&&e!==h.ORIGINAL_NO_PADDING&&e!==h.URLSAFE&&e!=h.URLSAFE_NO_PADDING)throw new Error("unsupported base64 variant");return e}function p(e,t){t=o(t),e=k(_,e,"input");var a,_=[],n=0|Math.floor(e.length/3),c=e.length-3*n,h=4*n+(0!==c?0==(2&t)?4:2+(c>>>1):0),p=new u(h+1),y=v(e);return _.push(y),_.push(p.address),0===r._sodium_bin2base64(p.address,p.length,y,e.length,t)&&b(_,"conversion failed"),p.length=h,a=s(p.to_Uint8Array()),g(_),a}function y(e,t){var r=t||a;if(!i(r))throw new Error(r+" output format is not available");if(e instanceof u){if("uint8array"===r)return e.to_Uint8Array();if("text"===r)return s(e.to_Uint8Array());if("hex"===r)return c(e.to_Uint8Array());if("base64"===r)return p(e.to_Uint8Array(),h.URLSAFE_NO_PADDING);throw new Error('What is output format "'+r+'"?')}if("object"==typeof e){for(var _=Object.keys(e),n={},o=0;o<_.length;o++)n[_[o]]=y(e[_[o]],r);return n}if("string"==typeof e)return e;throw new TypeError("Cannot format output")}function i(e){for(var t=["uint8array","text","hex","base64"],r=0;r<t.length;r++)if(t[r]===e)return!0;return!1}function l(e){if(e){if("string"!=typeof e)throw new TypeError("When defined, the output format must be a string");if(!i(e))throw new Error(e+" is not a supported output format")}}function u(e){this.length=e,this.address=d(e)}function v(e){var t=d(e.length);return r.HEAPU8.set(e,t),t}function d(e){var t=r._malloc(e);if(0===t)throw{message:"_malloc() failed",length:e};return t}function g(e){if(e)for(var t=0;t<e.length;t++)a=e[t],r._free(a);var a}function b(e,t){throw g(e),new Error(t)}function f(e,t){throw g(e),new TypeError(t)}function m(e,t,r){null==t&&f(e,r+" cannot be null or undefined")}function k(e,t,r){return m(e,t,r),t instanceof Uint8Array?t:"string"==typeof t?n(t):void f(e,"unsupported input type for "+r)}function x(e,t,a,_,n,s){var c=[];l(s);var h=null;null!=e&&(h=v(e=k(c,e,"secret_nonce")),e.length,c.push(h)),t=k(c,t,"ciphertext");var o,p=r._crypto_aead_chacha20poly1305_abytes(),i=t.length;i<p&&f(c,"ciphertext is too short"),o=v(t),c.push(o);var d=null,m=0;null!=a&&(d=v(a=k(c,a,"additional_data")),m=a.length,c.push(d)),_=k(c,_,"public_nonce");var x,E=0|r._crypto_aead_chacha20poly1305_npubbytes();_.length!==E&&f(c,"invalid public_nonce length"),x=v(_),c.push(x),n=k(c,n,"key");var w,S=0|r._crypto_aead_chacha20poly1305_keybytes();n.length!==S&&f(c,"invalid key length"),w=v(n),c.push(w);var T=new u(i-r._crypto_aead_chacha20poly1305_abytes()|0),Y=T.address;if(c.push(Y),0===r._crypto_aead_chacha20poly1305_decrypt(Y,null,h,o,i,0,d,m,0,x,w)){var A=y(T,s);return g(c),A}b(c,"ciphertext cannot be decrypted using that key")}function E(e,t,a,_,n,s,c){var h=[];l(c);var o=null;null!=e&&(o=v(e=k(h,e,"secret_nonce")),e.length,h.push(o));var p=v(t=k(h,t,"ciphertext")),i=t.length;h.push(p),a=k(h,a,"mac");var d,m=0|r._crypto_box_macbytes();a.length!==m&&f(h,"invalid mac length"),d=v(a),h.push(d);var x=null,E=0;null!=_&&(x=v(_=k(h,_,"additional_data")),E=_.length,h.push(x)),n=k(h,n,"public_nonce");var w,S=0|r._crypto_aead_chacha20poly1305_npubbytes();n.length!==S&&f(h,"invalid public_nonce length"),w=v(n),h.push(w),s=k(h,s,"key");var T,Y=0|r._crypto_aead_chacha20poly1305_keybytes();s.length!==Y&&f(h,"invalid key length"),T=v(s),h.push(T);var A=new u(0|i),B=A.address;if(h.push(B),0===r._crypto_aead_chacha20poly1305_decrypt_detached(B,o,p,i,0,d,x,E,0,w,T)){var K=y(A,c);return g(h),K}b(h,"ciphertext cannot be decrypted using that key")}function w(e,t,a,_,n,s){var c=[];l(s);var h=v(e=k(c,e,"message")),o=e.length;c.push(h);var p=null,i=0;null!=t&&(p=v(t=k(c,t,"additional_data")),i=t.length,c.push(p));var d=null;null!=a&&(d=v(a=k(c,a,"secret_nonce")),a.length,c.push(d)),_=k(c,_,"public_nonce");var m,x=0|r._crypto_aead_chacha20poly1305_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=v(_),c.push(m),n=k(c,n,"key");var E,w=0|r._crypto_aead_chacha20poly1305_keybytes();n.length!==w&&f(c,"invalid key length"),E=v(n),c.push(E);var S=new u(o+r._crypto_aead_chacha20poly1305_abytes()|0),T=S.address;if(c.push(T),0===r._crypto_aead_chacha20poly1305_encrypt(T,null,h,o,0,p,i,0,d,m,E)){var Y=y(S,s);return g(c),Y}b(c,"invalid usage")}function S(e,t,a,_,n,s){var c=[];l(s);var h=v(e=k(c,e,"message")),o=e.length;c.push(h);var p=null,i=0;null!=t&&(p=v(t=k(c,t,"additional_data")),i=t.length,c.push(p));var d=null;null!=a&&(d=v(a=k(c,a,"secret_nonce")),a.length,c.push(d)),_=k(c,_,"public_nonce");var m,x=0|r._crypto_aead_chacha20poly1305_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=v(_),c.push(m),n=k(c,n,"key");var E,w=0|r._crypto_aead_chacha20poly1305_keybytes();n.length!==w&&f(c,"invalid key length"),E=v(n),c.push(E);var S=new u(0|o),T=S.address;c.push(T);var Y=new u(0|r._crypto_aead_chacha20poly1305_abytes()),A=Y.address;if(c.push(A),0===r._crypto_aead_chacha20poly1305_encrypt_detached(T,A,null,h,o,0,p,i,0,d,m,E)){var B=y({ciphertext:S,mac:Y},s);return g(c),B}b(c,"invalid usage")}function T(e,t,a,_,n,s){var c=[];l(s);var h=null;null!=e&&(h=v(e=k(c,e,"secret_nonce")),e.length,c.push(h)),t=k(c,t,"ciphertext");var o,p=r._crypto_aead_chacha20poly1305_ietf_abytes(),i=t.length;i<p&&f(c,"ciphertext is too short"),o=v(t),c.push(o);var d=null,m=0;null!=a&&(d=v(a=k(c,a,"additional_data")),m=a.length,c.push(d)),_=k(c,_,"public_nonce");var x,E=0|r._crypto_aead_chacha20poly1305_ietf_npubbytes();_.length!==E&&f(c,"invalid public_nonce length"),x=v(_),c.push(x),n=k(c,n,"key");var w,S=0|r._crypto_aead_chacha20poly1305_ietf_keybytes();n.length!==S&&f(c,"invalid key length"),w=v(n),c.push(w);var T=new u(i-r._crypto_aead_chacha20poly1305_ietf_abytes()|0),Y=T.address;if(c.push(Y),0===r._crypto_aead_chacha20poly1305_ietf_decrypt(Y,null,h,o,i,0,d,m,0,x,w)){var A=y(T,s);return g(c),A}b(c,"ciphertext cannot be decrypted using that key")}function Y(e,t,a,_,n,s,c){var h=[];l(c);var o=null;null!=e&&(o=v(e=k(h,e,"secret_nonce")),e.length,h.push(o));var p=v(t=k(h,t,"ciphertext")),i=t.length;h.push(p),a=k(h,a,"mac");var d,m=0|r._crypto_box_macbytes();a.length!==m&&f(h,"invalid mac length"),d=v(a),h.push(d);var x=null,E=0;null!=_&&(x=v(_=k(h,_,"additional_data")),E=_.length,h.push(x)),n=k(h,n,"public_nonce");var w,S=0|r._crypto_aead_chacha20poly1305_ietf_npubbytes();n.length!==S&&f(h,"invalid public_nonce length"),w=v(n),h.push(w),s=k(h,s,"key");var T,Y=0|r._crypto_aead_chacha20poly1305_ietf_keybytes();s.length!==Y&&f(h,"invalid key length"),T=v(s),h.push(T);var A=new u(0|i),B=A.address;if(h.push(B),0===r._crypto_aead_chacha20poly1305_ietf_decrypt_detached(B,o,p,i,0,d,x,E,0,w,T)){var K=y(A,c);return g(h),K}b(h,"ciphertext cannot be decrypted using that key")}function A(e,t,a,_,n,s){var c=[];l(s);var h=v(e=k(c,e,"message")),o=e.length;c.push(h);var p=null,i=0;null!=t&&(p=v(t=k(c,t,"additional_data")),i=t.length,c.push(p));var d=null;null!=a&&(d=v(a=k(c,a,"secret_nonce")),a.length,c.push(d)),_=k(c,_,"public_nonce");var m,x=0|r._crypto_aead_chacha20poly1305_ietf_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=v(_),c.push(m),n=k(c,n,"key");var E,w=0|r._crypto_aead_chacha20poly1305_ietf_keybytes();n.length!==w&&f(c,"invalid key length"),E=v(n),c.push(E);var S=new u(o+r._crypto_aead_chacha20poly1305_ietf_abytes()|0),T=S.address;if(c.push(T),0===r._crypto_aead_chacha20poly1305_ietf_encrypt(T,null,h,o,0,p,i,0,d,m,E)){var Y=y(S,s);return g(c),Y}b(c,"invalid usage")}function B(e,t,a,_,n,s){var c=[];l(s);var h=v(e=k(c,e,"message")),o=e.length;c.push(h);var p=null,i=0;null!=t&&(p=v(t=k(c,t,"additional_data")),i=t.length,c.push(p));var d=null;null!=a&&(d=v(a=k(c,a,"secret_nonce")),a.length,c.push(d)),_=k(c,_,"public_nonce");var m,x=0|r._crypto_aead_chacha20poly1305_ietf_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=v(_),c.push(m),n=k(c,n,"key");var E,w=0|r._crypto_aead_chacha20poly1305_ietf_keybytes();n.length!==w&&f(c,"invalid key length"),E=v(n),c.push(E);var S=new u(0|o),T=S.address;c.push(T);var Y=new u(0|r._crypto_aead_chacha20poly1305_ietf_abytes()),A=Y.address;if(c.push(A),0===r._crypto_aead_chacha20poly1305_ietf_encrypt_detached(T,A,null,h,o,0,p,i,0,d,m,E)){var B=y({ciphertext:S,mac:Y},s);return g(c),B}b(c,"invalid usage")}function K(e){var t=[];l(e);var a=new u(0|r._crypto_aead_chacha20poly1305_ietf_keybytes()),_=a.address;t.push(_),r._crypto_aead_chacha20poly1305_ietf_keygen(_);var n=y(a,e);return g(t),n}function I(e){var t=[];l(e);var a=new u(0|r._crypto_aead_chacha20poly1305_keybytes()),_=a.address;t.push(_),r._crypto_aead_chacha20poly1305_keygen(_);var n=y(a,e);return g(t),n}function M(e,t,a,_,n,s){var c=[];l(s);var h=null;null!=e&&(h=v(e=k(c,e,"secret_nonce")),e.length,c.push(h)),t=k(c,t,"ciphertext");var o,p=r._crypto_aead_xchacha20poly1305_ietf_abytes(),i=t.length;i<p&&f(c,"ciphertext is too short"),o=v(t),c.push(o);var d=null,m=0;null!=a&&(d=v(a=k(c,a,"additional_data")),m=a.length,c.push(d)),_=k(c,_,"public_nonce");var x,E=0|r._crypto_aead_xchacha20poly1305_ietf_npubbytes();_.length!==E&&f(c,"invalid public_nonce length"),x=v(_),c.push(x),n=k(c,n,"key");var w,S=0|r._crypto_aead_xchacha20poly1305_ietf_keybytes();n.length!==S&&f(c,"invalid key length"),w=v(n),c.push(w);var T=new u(i-r._crypto_aead_xchacha20poly1305_ietf_abytes()|0),Y=T.address;if(c.push(Y),0===r._crypto_aead_xchacha20poly1305_ietf_decrypt(Y,null,h,o,i,0,d,m,0,x,w)){var A=y(T,s);return g(c),A}b(c,"ciphertext cannot be decrypted using that key")}function L(e,t,a,_,n,s,c){var h=[];l(c);var o=null;null!=e&&(o=v(e=k(h,e,"secret_nonce")),e.length,h.push(o));var p=v(t=k(h,t,"ciphertext")),i=t.length;h.push(p),a=k(h,a,"mac");var d,m=0|r._crypto_box_macbytes();a.length!==m&&f(h,"invalid mac length"),d=v(a),h.push(d);var x=null,E=0;null!=_&&(x=v(_=k(h,_,"additional_data")),E=_.length,h.push(x)),n=k(h,n,"public_nonce");var w,S=0|r._crypto_aead_xchacha20poly1305_ietf_npubbytes();n.length!==S&&f(h,"invalid public_nonce length"),w=v(n),h.push(w),s=k(h,s,"key");var T,Y=0|r._crypto_aead_xchacha20poly1305_ietf_keybytes();s.length!==Y&&f(h,"invalid key length"),T=v(s),h.push(T);var A=new u(0|i),B=A.address;if(h.push(B),0===r._crypto_aead_xchacha20poly1305_ietf_decrypt_detached(B,o,p,i,0,d,x,E,0,w,T)){var K=y(A,c);return g(h),K}b(h,"ciphertext cannot be decrypted using that key")}function N(e,t,a,_,n,s){var c=[];l(s);var h=v(e=k(c,e,"message")),o=e.length;c.push(h);var p=null,i=0;null!=t&&(p=v(t=k(c,t,"additional_data")),i=t.length,c.push(p));var d=null;null!=a&&(d=v(a=k(c,a,"secret_nonce")),a.length,c.push(d)),_=k(c,_,"public_nonce");var m,x=0|r._crypto_aead_xchacha20poly1305_ietf_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=v(_),c.push(m),n=k(c,n,"key");var E,w=0|r._crypto_aead_xchacha20poly1305_ietf_keybytes();n.length!==w&&f(c,"invalid key length"),E=v(n),c.push(E);var S=new u(o+r._crypto_aead_xchacha20poly1305_ietf_abytes()|0),T=S.address;if(c.push(T),0===r._crypto_aead_xchacha20poly1305_ietf_encrypt(T,null,h,o,0,p,i,0,d,m,E)){var Y=y(S,s);return g(c),Y}b(c,"invalid usage")}function U(e,t,a,_,n,s){var c=[];l(s);var h=v(e=k(c,e,"message")),o=e.length;c.push(h);var p=null,i=0;null!=t&&(p=v(t=k(c,t,"additional_data")),i=t.length,c.push(p));var d=null;null!=a&&(d=v(a=k(c,a,"secret_nonce")),a.length,c.push(d)),_=k(c,_,"public_nonce");var m,x=0|r._crypto_aead_xchacha20poly1305_ietf_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=v(_),c.push(m),n=k(c,n,"key");var E,w=0|r._crypto_aead_xchacha20poly1305_ietf_keybytes();n.length!==w&&f(c,"invalid key length"),E=v(n),c.push(E);var S=new u(0|o),T=S.address;c.push(T);var Y=new u(0|r._crypto_aead_xchacha20poly1305_ietf_abytes()),A=Y.address;if(c.push(A),0===r._crypto_aead_xchacha20poly1305_ietf_encrypt_detached(T,A,null,h,o,0,p,i,0,d,m,E)){var B=y({ciphertext:S,mac:Y},s);return g(c),B}b(c,"invalid usage")}function O(e){var t=[];l(e);var a=new u(0|r._crypto_aead_xchacha20poly1305_ietf_keybytes()),_=a.address;t.push(_),r._crypto_aead_xchacha20poly1305_ietf_keygen(_);var n=y(a,e);return g(t),n}function R(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"key");var c,h=0|r._crypto_auth_keybytes();t.length!==h&&f(_,"invalid key length"),c=v(t),_.push(c);var o=new u(0|r._crypto_auth_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_auth(p,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function P(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"key");var c,h=0|r._crypto_auth_hmacsha256_keybytes();t.length!==h&&f(_,"invalid key length"),c=v(t),_.push(c);var o=new u(0|r._crypto_auth_hmacsha256_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_auth_hmacsha256(p,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function C(e){var t=[];l(e);var a=new u(0|r._crypto_auth_hmacsha256_keybytes()),_=a.address;t.push(_),r._crypto_auth_hmacsha256_keygen(_);var n=y(a,e);return g(t),n}function G(e,t,a){var _=[];e=k(_,e,"tag");var n,s=0|r._crypto_auth_hmacsha256_bytes();e.length!==s&&f(_,"invalid tag length"),n=v(e),_.push(n);var c=v(t=k(_,t,"message")),h=t.length;_.push(c),a=k(_,a,"key");var o,p=0|r._crypto_auth_hmacsha256_keybytes();a.length!==p&&f(_,"invalid key length"),o=v(a),_.push(o);var y=0==(0|r._crypto_auth_hmacsha256_verify(n,c,h,0,o));return g(_),y}function D(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"key");var c,h=0|r._crypto_auth_hmacsha512_keybytes();t.length!==h&&f(_,"invalid key length"),c=v(t),_.push(c);var o=new u(0|r._crypto_auth_hmacsha512_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_auth_hmacsha512(p,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function X(e){var t=[];l(e);var a=new u(0|r._crypto_auth_hmacsha512_keybytes()),_=a.address;t.push(_),r._crypto_auth_hmacsha512_keygen(_);var n=y(a,e);return g(t),n}function V(e,t,a){var _=[];e=k(_,e,"tag");var n,s=0|r._crypto_auth_hmacsha512_bytes();e.length!==s&&f(_,"invalid tag length"),n=v(e),_.push(n);var c=v(t=k(_,t,"message")),h=t.length;_.push(c),a=k(_,a,"key");var o,p=0|r._crypto_auth_hmacsha512_keybytes();a.length!==p&&f(_,"invalid key length"),o=v(a),_.push(o);var y=0==(0|r._crypto_auth_hmacsha512_verify(n,c,h,0,o));return g(_),y}function F(e){var t=[];l(e);var a=new u(0|r._crypto_auth_keybytes()),_=a.address;t.push(_),r._crypto_auth_keygen(_);var n=y(a,e);return g(t),n}function H(e,t,a){var _=[];e=k(_,e,"tag");var n,s=0|r._crypto_auth_bytes();e.length!==s&&f(_,"invalid tag length"),n=v(e),_.push(n);var c=v(t=k(_,t,"message")),h=t.length;_.push(c),a=k(_,a,"key");var o,p=0|r._crypto_auth_keybytes();a.length!==p&&f(_,"invalid key length"),o=v(a),_.push(o);var y=0==(0|r._crypto_auth_verify(n,c,h,0,o));return g(_),y}function z(e,t,a){var _=[];l(a),e=k(_,e,"publicKey");var n,s=0|r._crypto_box_publickeybytes();e.length!==s&&f(_,"invalid publicKey length"),n=v(e),_.push(n),t=k(_,t,"privateKey");var c,h=0|r._crypto_box_secretkeybytes();t.length!==h&&f(_,"invalid privateKey length"),c=v(t),_.push(c);var o=new u(0|r._crypto_box_beforenmbytes()),p=o.address;if(_.push(p),0==(0|r._crypto_box_beforenm(p,n,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function j(e){var t=[];l(e);var a=new u(0|r._crypto_box_curve25519xchacha20poly1305_publickeybytes()),_=a.address;t.push(_);var n=new u(0|r._crypto_box_curve25519xchacha20poly1305_secretkeybytes()),s=n.address;t.push(s),r._crypto_box_curve25519xchacha20poly1305_keypair(_,s);var c=y({publicKey:a,privateKey:n,keyType:"curve25519"},e);return g(t),c}function q(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"publicKey");var c,h=0|r._crypto_box_curve25519xchacha20poly1305_publickeybytes();t.length!==h&&f(_,"invalid publicKey length"),c=v(t),_.push(c);var o=new u(s+r._crypto_box_curve25519xchacha20poly1305_sealbytes()|0),p=o.address;_.push(p),r._crypto_box_curve25519xchacha20poly1305_seal(p,n,s,0,c);var i=y(o,a);return g(_),i}function W(e,t,a,_){var n=[];l(_),e=k(n,e,"ciphertext");var s,c=r._crypto_box_curve25519xchacha20poly1305_sealbytes(),h=e.length;h<c&&f(n,"ciphertext is too short"),s=v(e),n.push(s),t=k(n,t,"publicKey");var o,p=0|r._crypto_box_curve25519xchacha20poly1305_publickeybytes();t.length!==p&&f(n,"invalid publicKey length"),o=v(t),n.push(o),a=k(n,a,"secretKey");var i,d=0|r._crypto_box_curve25519xchacha20poly1305_secretkeybytes();a.length!==d&&f(n,"invalid secretKey length"),i=v(a),n.push(i);var b=new u(h-r._crypto_box_curve25519xchacha20poly1305_sealbytes()|0),m=b.address;n.push(m),r._crypto_box_curve25519xchacha20poly1305_seal_open(m,s,h,0,o,i);var x=y(b,_);return g(n),x}function J(e,t,a,_,n){var s=[];l(n);var c=v(e=k(s,e,"message")),h=e.length;s.push(c),t=k(s,t,"nonce");var o,p=0|r._crypto_box_noncebytes();t.length!==p&&f(s,"invalid nonce length"),o=v(t),s.push(o),a=k(s,a,"publicKey");var i,d=0|r._crypto_box_publickeybytes();a.length!==d&&f(s,"invalid publicKey length"),i=v(a),s.push(i),_=k(s,_,"privateKey");var m,x=0|r._crypto_box_secretkeybytes();_.length!==x&&f(s,"invalid privateKey length"),m=v(_),s.push(m);var E=new u(0|h),w=E.address;s.push(w);var S=new u(0|r._crypto_box_macbytes()),T=S.address;if(s.push(T),0==(0|r._crypto_box_detached(w,T,c,h,0,o,i,m))){var Y=y({ciphertext:E,mac:S},n);return g(s),Y}b(s,"invalid usage")}function Q(e,t,a,_,n){var s=[];l(n);var c=v(e=k(s,e,"message")),h=e.length;s.push(c),t=k(s,t,"nonce");var o,p=0|r._crypto_box_noncebytes();t.length!==p&&f(s,"invalid nonce length"),o=v(t),s.push(o),a=k(s,a,"publicKey");var i,d=0|r._crypto_box_publickeybytes();a.length!==d&&f(s,"invalid publicKey length"),i=v(a),s.push(i),_=k(s,_,"privateKey");var m,x=0|r._crypto_box_secretkeybytes();_.length!==x&&f(s,"invalid privateKey length"),m=v(_),s.push(m);var E=new u(h+r._crypto_box_macbytes()|0),w=E.address;if(s.push(w),0==(0|r._crypto_box_easy(w,c,h,0,o,i,m))){var S=y(E,n);return g(s),S}b(s,"invalid usage")}function Z(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"message")),c=e.length;n.push(s),t=k(n,t,"nonce");var h,o=0|r._crypto_box_noncebytes();t.length!==o&&f(n,"invalid nonce length"),h=v(t),n.push(h),a=k(n,a,"sharedKey");var p,i=0|r._crypto_box_beforenmbytes();a.length!==i&&f(n,"invalid sharedKey length"),p=v(a),n.push(p);var d=new u(c+r._crypto_box_macbytes()|0),m=d.address;if(n.push(m),0==(0|r._crypto_box_easy_afternm(m,s,c,0,h,p))){var x=y(d,_);return g(n),x}b(n,"invalid usage")}function $(e){var t=[];l(e);var a=new u(0|r._crypto_box_publickeybytes()),_=a.address;t.push(_);var n=new u(0|r._crypto_box_secretkeybytes()),s=n.address;if(t.push(s),0==(0|r._crypto_box_keypair(_,s))){var c={publicKey:y(a,e),privateKey:y(n,e),keyType:"x25519"};return g(t),c}b(t,"internal error")}function ee(e,t,a,_,n,s){var c=[];l(s);var h=v(e=k(c,e,"ciphertext")),o=e.length;c.push(h),t=k(c,t,"mac");var p,i=0|r._crypto_box_macbytes();t.length!==i&&f(c,"invalid mac length"),p=v(t),c.push(p),a=k(c,a,"nonce");var d,m=0|r._crypto_box_noncebytes();a.length!==m&&f(c,"invalid nonce length"),d=v(a),c.push(d),_=k(c,_,"publicKey");var x,E=0|r._crypto_box_publickeybytes();_.length!==E&&f(c,"invalid publicKey length"),x=v(_),c.push(x),n=k(c,n,"privateKey");var w,S=0|r._crypto_box_secretkeybytes();n.length!==S&&f(c,"invalid privateKey length"),w=v(n),c.push(w);var T=new u(0|o),Y=T.address;if(c.push(Y),0==(0|r._crypto_box_open_detached(Y,h,p,o,0,d,x,w))){var A=y(T,s);return g(c),A}b(c,"incorrect key pair for the given ciphertext")}function te(e,t,a,_,n){var s=[];l(n),e=k(s,e,"ciphertext");var c,h=r._crypto_box_macbytes(),o=e.length;o<h&&f(s,"ciphertext is too short"),c=v(e),s.push(c),t=k(s,t,"nonce");var p,i=0|r._crypto_box_noncebytes();t.length!==i&&f(s,"invalid nonce length"),p=v(t),s.push(p),a=k(s,a,"publicKey");var d,m=0|r._crypto_box_publickeybytes();a.length!==m&&f(s,"invalid publicKey length"),d=v(a),s.push(d),_=k(s,_,"privateKey");var x,E=0|r._crypto_box_secretkeybytes();_.length!==E&&f(s,"invalid privateKey length"),x=v(_),s.push(x);var w=new u(o-r._crypto_box_macbytes()|0),S=w.address;if(s.push(S),0==(0|r._crypto_box_open_easy(S,c,o,0,p,d,x))){var T=y(w,n);return g(s),T}b(s,"incorrect key pair for the given ciphertext")}function re(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"ciphertext")),c=e.length;n.push(s),t=k(n,t,"nonce");var h,o=0|r._crypto_box_noncebytes();t.length!==o&&f(n,"invalid nonce length"),h=v(t),n.push(h),a=k(n,a,"sharedKey");var p,i=0|r._crypto_box_beforenmbytes();a.length!==i&&f(n,"invalid sharedKey length"),p=v(a),n.push(p);var d=new u(c-r._crypto_box_macbytes()|0),m=d.address;if(n.push(m),0==(0|r._crypto_box_open_easy_afternm(m,s,c,0,h,p))){var x=y(d,_);return g(n),x}b(n,"incorrect secret key for the given ciphertext")}function ae(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"publicKey");var c,h=0|r._crypto_box_publickeybytes();t.length!==h&&f(_,"invalid publicKey length"),c=v(t),_.push(c);var o=new u(s+r._crypto_box_sealbytes()|0),p=o.address;if(_.push(p),0==(0|r._crypto_box_seal(p,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function _e(e,t,a,_){var n=[];l(_),e=k(n,e,"ciphertext");var s,c=r._crypto_box_sealbytes(),h=e.length;h<c&&f(n,"ciphertext is too short"),s=v(e),n.push(s),t=k(n,t,"publicKey");var o,p=0|r._crypto_box_publickeybytes();t.length!==p&&f(n,"invalid publicKey length"),o=v(t),n.push(o),a=k(n,a,"privateKey");var i,d=0|r._crypto_box_secretkeybytes();a.length!==d&&f(n,"invalid privateKey length"),i=v(a),n.push(i);var m=new u(h-r._crypto_box_sealbytes()|0),x=m.address;if(n.push(x),0==(0|r._crypto_box_seal_open(x,s,h,0,o,i))){var E=y(m,_);return g(n),E}b(n,"incorrect key pair for the given ciphertext")}function ne(e,t){var a=[];l(t),e=k(a,e,"seed");var _,n=0|r._crypto_box_seedbytes();e.length!==n&&f(a,"invalid seed length"),_=v(e),a.push(_);var s=new u(0|r._crypto_box_publickeybytes()),c=s.address;a.push(c);var h=new u(0|r._crypto_box_secretkeybytes()),o=h.address;if(a.push(o),0==(0|r._crypto_box_seed_keypair(c,o,_))){var p={publicKey:y(s,t),privateKey:y(h,t),keyType:"x25519"};return g(a),p}b(a,"invalid usage")}function se(e,t,a){var _=[];l(a),e=k(_,e,"p");var n,s=0|r._crypto_core_ristretto255_bytes();e.length!==s&&f(_,"invalid p length"),n=v(e),_.push(n),t=k(_,t,"q");var c,h=0|r._crypto_core_ristretto255_bytes();t.length!==h&&f(_,"invalid q length"),c=v(t),_.push(c);var o=new u(0|r._crypto_core_ristretto255_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_core_ristretto255_add(p,n,c))){var i=y(o,a);return g(_),i}b(_,"inputs is invalid element")}function ce(e,t){var a=[];l(t);var _=v(e=k(a,e,"r"));e.length,a.push(_);var n=new u(0|r._crypto_core_ristretto255_bytes()),s=n.address;if(a.push(s),0==(0|r._crypto_core_ristretto255_from_hash(s,_))){var c=y(n,t);return g(a),c}b(a,"invalid usage")}function he(e,t){var a=[];l(t);var _=v(e=k(a,e,"point"));e.length,a.push(_);var n=1==(0|r._crypto_core_ristretto255_is_valid_point(_));return g(a),n}function oe(e){var t=[];l(e);var a=new u(0|r._crypto_core_ristretto255_bytes()),_=a.address;t.push(_),r._crypto_core_ristretto255_random(_);var n=y(a,e);return g(t),n}function pe(e,t,a){var _=[];l(a),e=k(_,e,"x");var n,s=0|r._crypto_core_ristretto255_scalarbytes();e.length!==s&&f(_,"invalid x length"),n=v(e),_.push(n),t=k(_,t,"y");var c,h=0|r._crypto_core_ristretto255_scalarbytes();t.length!==h&&f(_,"invalid y length"),c=v(t),_.push(c);var o=new u(0|r._crypto_core_ristretto255_scalarbytes()),p=o.address;_.push(p),r._crypto_core_ristretto255_scalar_add(p,n,c);var i=y(o,a);return g(_),i}function ye(e,t){var a=[];l(t);var _=v(e=k(a,e,"s"));e.length,a.push(_);var n=new u(0|r._crypto_core_ristretto255_scalarbytes()),s=n.address;a.push(s),r._crypto_core_ristretto255_scalar_complement(s,_);var c=y(n,t);return g(a),c}function ie(e,t){var a=[];l(t);var _=v(e=k(a,e,"s"));e.length,a.push(_);var n=new u(0|r._crypto_core_ristretto255_scalarbytes()),s=n.address;if(a.push(s),0==(0|r._crypto_core_ristretto255_scalar_invert(s,_))){var c=y(n,t);return g(a),c}b(a,"invalid reciprocate")}function le(e,t,a){var _=[];l(a),e=k(_,e,"x");var n,s=0|r._crypto_core_ristretto255_scalarbytes();e.length!==s&&f(_,"invalid x length"),n=v(e),_.push(n),t=k(_,t,"y");var c,h=0|r._crypto_core_ristretto255_scalarbytes();t.length!==h&&f(_,"invalid y length"),c=v(t),_.push(c);var o=new u(0|r._crypto_core_ristretto255_scalarbytes()),p=o.address;_.push(p),r._crypto_core_ristretto255_scalar_mul(p,n,c);var i=y(o,a);return g(_),i}function ue(e,t){var a=[];l(t);var _=v(e=k(a,e,"s"));e.length,a.push(_);var n=new u(0|r._crypto_core_ristretto255_scalarbytes()),s=n.address;a.push(s),r._crypto_core_ristretto255_scalar_negate(s,_);var c=y(n,t);return g(a),c}function ve(e){var t=[];l(e);var a=new u(0|r._crypto_core_ristretto255_scalarbytes()),_=a.address;t.push(_),r._crypto_core_ristretto255_random(_);var n=y(a,e);return g(t),n}function de(e,t){var a=[];l(t);var _=v(e=k(a,e,"sample"));e.length,a.push(_);var n=new u(0|r._crypto_core_ristretto255_scalarbytes()),s=n.address;a.push(s),r._crypto_core_ristretto255_scalar_reduce(s,_);var c=y(n,t);return g(a),c}function ge(e,t,a){var _=[];l(a),e=k(_,e,"x");var n,s=0|r._crypto_core_ristretto255_scalarbytes();e.length!==s&&f(_,"invalid x length"),n=v(e),_.push(n),t=k(_,t,"y");var c,h=0|r._crypto_core_ristretto255_scalarbytes();t.length!==h&&f(_,"invalid y length"),c=v(t),_.push(c);var o=new u(0|r._crypto_core_ristretto255_scalarbytes()),p=o.address;_.push(p),r._crypto_core_ristretto255_scalar_sub(p,n,c);var i=y(o,a);return g(_),i}function be(e,t,a){var _=[];l(a),e=k(_,e,"p");var n,s=0|r._crypto_core_ristretto255_bytes();e.length!==s&&f(_,"invalid p length"),n=v(e),_.push(n),t=k(_,t,"q");var c,h=0|r._crypto_core_ristretto255_bytes();t.length!==h&&f(_,"invalid q length"),c=v(t),_.push(c);var o=new u(0|r._crypto_core_ristretto255_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_core_ristretto255_sub(p,n,c))){var i=y(o,a);return g(_),i}b(_,"inputs is invalid element")}function fe(e,t,a,_){var n=[];l(_),m(n,e,"hash_length"),("number"!=typeof e||(0|e)!==e||e<0)&&f(n,"hash_length must be an unsigned integer");var s=v(t=k(n,t,"message")),c=t.length;n.push(s);var h=null,o=0;null!=a&&(h=v(a=k(n,a,"key")),o=a.length,n.push(h));var p=new u(e|=0),i=p.address;if(n.push(i),0==(0|r._crypto_generichash(i,e,s,c,0,h,o))){var d=y(p,_);return g(n),d}b(n,"invalid usage")}function me(e,t,a,_,n){var s=[];l(n),m(s,e,"subkey_len"),("number"!=typeof e||(0|e)!==e||e<0)&&f(s,"subkey_len must be an unsigned integer");var c=null,h=0;null!=t&&(c=v(t=k(s,t,"key")),h=t.length,s.push(c)),a=k(s,a,"id");var o,p=0|r._crypto_generichash_blake2b_saltbytes();a.length!==p&&f(s,"invalid id length"),o=v(a),s.push(o),_=k(s,_,"ctx");var i,d=0|r._crypto_generichash_blake2b_personalbytes();_.length!==d&&f(s,"invalid ctx length"),i=v(_),s.push(i);var x=new u(0|e),E=x.address;if(s.push(E),0==(0|r._crypto_generichash_blake2b_salt_personal(E,e,null,0,0,c,h,o,i))){var w=y(x,n);return g(s),w}b(s,"invalid usage")}function ke(e,t,a){var _=[];l(a),m(_,e,"state_address"),m(_,t,"hash_length"),("number"!=typeof t||(0|t)!==t||t<0)&&f(_,"hash_length must be an unsigned integer");var n=new u(t|=0),s=n.address;if(_.push(s),0==(0|r._crypto_generichash_final(e,s,t))){var c=(r._free(e),y(n,a));return g(_),c}b(_,"invalid usage")}function xe(e,t,a){var _=[];l(a);var n=null,s=0;null!=e&&(n=v(e=k(_,e,"key")),s=e.length,_.push(n)),m(_,t,"hash_length"),("number"!=typeof t||(0|t)!==t||t<0)&&f(_,"hash_length must be an unsigned integer");var c=new u(357).address;if(0==(0|r._crypto_generichash_init(c,n,s,t))){var h=c;return g(_),h}b(_,"invalid usage")}function Ee(e){var t=[];l(e);var a=new u(0|r._crypto_generichash_keybytes()),_=a.address;t.push(_),r._crypto_generichash_keygen(_);var n=y(a,e);return g(t),n}function we(e,t,a){var _=[];l(a),m(_,e,"state_address");var n=v(t=k(_,t,"message_chunk")),s=t.length;_.push(n),0!=(0|r._crypto_generichash_update(e,n,s))&&b(_,"invalid usage"),g(_)}function Se(e,t){var a=[];l(t);var _=v(e=k(a,e,"message")),n=e.length;a.push(_);var s=new u(0|r._crypto_hash_bytes()),c=s.address;if(a.push(c),0==(0|r._crypto_hash(c,_,n,0))){var h=y(s,t);return g(a),h}b(a,"invalid usage")}function Te(e,t){var a=[];l(t);var _=v(e=k(a,e,"message")),n=e.length;a.push(_);var s=new u(0|r._crypto_hash_sha256_bytes()),c=s.address;if(a.push(c),0==(0|r._crypto_hash_sha256(c,_,n,0))){var h=y(s,t);return g(a),h}b(a,"invalid usage")}function Ye(e,t){var a=[];l(t);var _=v(e=k(a,e,"message")),n=e.length;a.push(_);var s=new u(0|r._crypto_hash_sha512_bytes()),c=s.address;if(a.push(c),0==(0|r._crypto_hash_sha512(c,_,n,0))){var h=y(s,t);return g(a),h}b(a,"invalid usage")}function Ae(e,t,a,_,s){var c=[];l(s),m(c,e,"subkey_len"),("number"!=typeof e||(0|e)!==e||e<0)&&f(c,"subkey_len must be an unsigned integer"),m(c,t,"subkey_id"),("number"!=typeof t||(0|t)!==t||t<0)&&f(c,"subkey_id must be an unsigned integer"),"string"!=typeof a&&f(c,"ctx must be a string");var h=v(a=n(a+"\0"));a.length,c.push(h),_=k(c,_,"key");var o,p=0|r._crypto_kdf_keybytes();_.length!==p&&f(c,"invalid key length"),o=v(_),c.push(o);var i=new u(0|e),d=i.address;c.push(d),r._crypto_kdf_derive_from_key(d,e,t,t>>>24>>>8,h,o);var b=y(i,s);return g(c),b}function Be(e){var t=[];l(e);var a=new u(0|r._crypto_kdf_keybytes()),_=a.address;t.push(_),r._crypto_kdf_keygen(_);var n=y(a,e);return g(t),n}function Ke(e,t,a,_){var n=[];l(_),e=k(n,e,"clientPublicKey");var s,c=0|r._crypto_kx_publickeybytes();e.length!==c&&f(n,"invalid clientPublicKey length"),s=v(e),n.push(s),t=k(n,t,"clientSecretKey");var h,o=0|r._crypto_kx_secretkeybytes();t.length!==o&&f(n,"invalid clientSecretKey length"),h=v(t),n.push(h),a=k(n,a,"serverPublicKey");var p,i=0|r._crypto_kx_publickeybytes();a.length!==i&&f(n,"invalid serverPublicKey length"),p=v(a),n.push(p);var d=new u(0|r._crypto_kx_sessionkeybytes()),m=d.address;n.push(m);var x=new u(0|r._crypto_kx_sessionkeybytes()),E=x.address;if(n.push(E),0==(0|r._crypto_kx_client_session_keys(m,E,s,h,p))){var w=y({sharedRx:d,sharedTx:x},_);return g(n),w}b(n,"invalid usage")}function Ie(e){var t=[];l(e);var a=new u(0|r._crypto_kx_publickeybytes()),_=a.address;t.push(_);var n=new u(0|r._crypto_kx_secretkeybytes()),s=n.address;if(t.push(s),0==(0|r._crypto_kx_keypair(_,s))){var c={publicKey:y(a,e),privateKey:y(n,e),keyType:"x25519"};return g(t),c}b(t,"internal error")}function Me(e,t){var a=[];l(t),e=k(a,e,"seed");var _,n=0|r._crypto_kx_seedbytes();e.length!==n&&f(a,"invalid seed length"),_=v(e),a.push(_);var s=new u(0|r._crypto_kx_publickeybytes()),c=s.address;a.push(c);var h=new u(0|r._crypto_kx_secretkeybytes()),o=h.address;if(a.push(o),0==(0|r._crypto_kx_seed_keypair(c,o,_))){var p={publicKey:y(s,t),privateKey:y(h,t),keyType:"x25519"};return g(a),p}b(a,"internal error")}function Le(e,t,a,_){var n=[];l(_),e=k(n,e,"serverPublicKey");var s,c=0|r._crypto_kx_publickeybytes();e.length!==c&&f(n,"invalid serverPublicKey length"),s=v(e),n.push(s),t=k(n,t,"serverSecretKey");var h,o=0|r._crypto_kx_secretkeybytes();t.length!==o&&f(n,"invalid serverSecretKey length"),h=v(t),n.push(h),a=k(n,a,"clientPublicKey");var p,i=0|r._crypto_kx_publickeybytes();a.length!==i&&f(n,"invalid clientPublicKey length"),p=v(a),n.push(p);var d=new u(0|r._crypto_kx_sessionkeybytes()),m=d.address;n.push(m);var x=new u(0|r._crypto_kx_sessionkeybytes()),E=x.address;if(n.push(E),0==(0|r._crypto_kx_server_session_keys(m,E,s,h,p))){var w=y({sharedRx:d,sharedTx:x},_);return g(n),w}b(n,"invalid usage")}function Ne(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"key");var c,h=0|r._crypto_onetimeauth_keybytes();t.length!==h&&f(_,"invalid key length"),c=v(t),_.push(c);var o=new u(0|r._crypto_onetimeauth_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_onetimeauth(p,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function Ue(e,t){var a=[];l(t),m(a,e,"state_address");var _=new u(0|r._crypto_onetimeauth_bytes()),n=_.address;if(a.push(n),0==(0|r._crypto_onetimeauth_final(e,n))){var s=(r._free(e),y(_,t));return g(a),s}b(a,"invalid usage")}function Oe(e,t){var a=[];l(t);var _=null;null!=e&&(_=v(e=k(a,e,"key")),e.length,a.push(_));var n=new u(144).address;if(0==(0|r._crypto_onetimeauth_init(n,_))){var s=n;return g(a),s}b(a,"invalid usage")}function Re(e){var t=[];l(e);var a=new u(0|r._crypto_onetimeauth_keybytes()),_=a.address;t.push(_),r._crypto_onetimeauth_keygen(_);var n=y(a,e);return g(t),n}function Pe(e,t,a){var _=[];l(a),m(_,e,"state_address");var n=v(t=k(_,t,"message_chunk")),s=t.length;_.push(n),0!=(0|r._crypto_onetimeauth_update(e,n,s))&&b(_,"invalid usage"),g(_)}function Ce(e,t,a){var _=[];e=k(_,e,"hash");var n,s=0|r._crypto_onetimeauth_bytes();e.length!==s&&f(_,"invalid hash length"),n=v(e),_.push(n);var c=v(t=k(_,t,"message")),h=t.length;_.push(c),a=k(_,a,"key");var o,p=0|r._crypto_onetimeauth_keybytes();a.length!==p&&f(_,"invalid key length"),o=v(a),_.push(o);var y=0==(0|r._crypto_onetimeauth_verify(n,c,h,0,o));return g(_),y}function Ge(e,t,a,_,n,s,c){var h=[];l(c),m(h,e,"keyLength"),("number"!=typeof e||(0|e)!==e||e<0)&&f(h,"keyLength must be an unsigned integer");var o=v(t=k(h,t,"password")),p=t.length;h.push(o),a=k(h,a,"salt");var i,d=0|r._crypto_pwhash_saltbytes();a.length!==d&&f(h,"invalid salt length"),i=v(a),h.push(i),m(h,_,"opsLimit"),("number"!=typeof _||(0|_)!==_||_<0)&&f(h,"opsLimit must be an unsigned integer"),m(h,n,"memLimit"),("number"!=typeof n||(0|n)!==n||n<0)&&f(h,"memLimit must be an unsigned integer"),m(h,s,"algorithm"),("number"!=typeof s||(0|s)!==s||s<0)&&f(h,"algorithm must be an unsigned integer");var x=new u(0|e),E=x.address;if(h.push(E),0==(0|r._crypto_pwhash(E,e,0,o,p,0,i,_,0,n,s))){var w=y(x,c);return g(h),w}b(h,"invalid usage")}function De(e,t,a,_,n,s){var c=[];l(s),m(c,e,"keyLength"),("number"!=typeof e||(0|e)!==e||e<0)&&f(c,"keyLength must be an unsigned integer");var h=v(t=k(c,t,"password")),o=t.length;c.push(h),a=k(c,a,"salt");var p,i=0|r._crypto_pwhash_scryptsalsa208sha256_saltbytes();a.length!==i&&f(c,"invalid salt length"),p=v(a),c.push(p),m(c,_,"opsLimit"),("number"!=typeof _||(0|_)!==_||_<0)&&f(c,"opsLimit must be an unsigned integer"),m(c,n,"memLimit"),("number"!=typeof n||(0|n)!==n||n<0)&&f(c,"memLimit must be an unsigned integer");var d=new u(0|e),x=d.address;if(c.push(x),0==(0|r._crypto_pwhash_scryptsalsa208sha256(x,e,0,h,o,0,p,_,0,n))){var E=y(d,s);return g(c),E}b(c,"invalid usage")}function Xe(e,t,a,_,n,s,c){var h=[];l(c);var o=v(e=k(h,e,"password")),p=e.length;h.push(o);var i=v(t=k(h,t,"salt")),d=t.length;h.push(i),m(h,a,"opsLimit"),("number"!=typeof a||(0|a)!==a||a<0)&&f(h,"opsLimit must be an unsigned integer"),m(h,_,"r"),("number"!=typeof _||(0|_)!==_||_<0)&&f(h,"r must be an unsigned integer"),m(h,n,"p"),("number"!=typeof n||(0|n)!==n||n<0)&&f(h,"p must be an unsigned integer"),m(h,s,"keyLength"),("number"!=typeof s||(0|s)!==s||s<0)&&f(h,"keyLength must be an unsigned integer");var x=new u(0|s),E=x.address;if(h.push(E),0==(0|r._crypto_pwhash_scryptsalsa208sha256_ll(o,p,i,d,a,0,_,n,E,s))){var w=y(x,c);return g(h),w}b(h,"invalid usage")}function Ve(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"password")),c=e.length;n.push(s),m(n,t,"opsLimit"),("number"!=typeof t||(0|t)!==t||t<0)&&f(n,"opsLimit must be an unsigned integer"),m(n,a,"memLimit"),("number"!=typeof a||(0|a)!==a||a<0)&&f(n,"memLimit must be an unsigned integer");var h=new u(0|r._crypto_pwhash_scryptsalsa208sha256_strbytes()).address;if(n.push(h),0==(0|r._crypto_pwhash_scryptsalsa208sha256_str(h,s,c,0,t,0,a))){var o=r.UTF8ToString(h);return g(n),o}b(n,"invalid usage")}function Fe(e,t,a){var _=[];l(a),"string"!=typeof e&&f(_,"hashed_password must be a string");var s=v(e=n(e+"\0"));e.length,_.push(s);var c=v(t=k(_,t,"password")),h=t.length;_.push(c);var o=0==(0|r._crypto_pwhash_scryptsalsa208sha256_str_verify(s,c,h,0));return g(_),o}function He(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"password")),c=e.length;n.push(s),m(n,t,"opsLimit"),("number"!=typeof t||(0|t)!==t||t<0)&&f(n,"opsLimit must be an unsigned integer"),m(n,a,"memLimit"),("number"!=typeof a||(0|a)!==a||a<0)&&f(n,"memLimit must be an unsigned integer");var h=new u(0|r._crypto_pwhash_strbytes()).address;if(n.push(h),0==(0|r._crypto_pwhash_str(h,s,c,0,t,0,a))){var o=r.UTF8ToString(h);return g(n),o}b(n,"invalid usage")}function ze(e,t,a){var _=[];l(a),"string"!=typeof e&&f(_,"hashed_password must be a string");var s=v(e=n(e+"\0"));e.length,_.push(s);var c=v(t=k(_,t,"password")),h=t.length;_.push(c);var o=0==(0|r._crypto_pwhash_str_verify(s,c,h,0));return g(_),o}function je(e,t,a){var _=[];l(a),e=k(_,e,"privateKey");var n,s=0|r._crypto_scalarmult_scalarbytes();e.length!==s&&f(_,"invalid privateKey length"),n=v(e),_.push(n),t=k(_,t,"publicKey");var c,h=0|r._crypto_scalarmult_scalarbytes();t.length!==h&&f(_,"invalid publicKey length"),c=v(t),_.push(c);var o=new u(0|r._crypto_scalarmult_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_scalarmult(p,n,c))){var i=y(o,a);return g(_),i}b(_,"weak public key")}function qe(e,t){var a=[];l(t),e=k(a,e,"privateKey");var _,n=0|r._crypto_scalarmult_scalarbytes();e.length!==n&&f(a,"invalid privateKey length"),_=v(e),a.push(_);var s=new u(0|r._crypto_scalarmult_scalarbytes()),c=s.address;if(a.push(c),0==(0|r._crypto_scalarmult_base(c,_))){var h=y(s,t);return g(a),h}b(a,"insecure scalar")}function We(e,t,a){var _=[];l(a),e=k(_,e,"scalar");var n,s=0|r._crypto_scalarmult_ristretto255_scalarbytes();e.length!==s&&f(_,"invalid scalar length"),n=v(e),_.push(n),t=k(_,t,"privateKey");var c,h=0|r._crypto_scalarmult_ristretto255_bytes();t.length!==h&&f(_,"invalid privateKey length"),c=v(t),_.push(c);var o=new u(0|r._crypto_scalarmult_ristretto255_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_scalarmult_ristretto255(p,n,c))){var i=y(o,a);return g(_),i}b(_,"input is zero element")}function Je(e,t){var a=[];l(t);var _=v(e=k(a,e,"scalar"));e.length,a.push(_);var n=new u(0|r._crypto_core_ristretto255_bytes()),s=n.address;if(a.push(s),0==(0|r._crypto_scalarmult_ristretto255_base(s,_))){var c=y(n,t);return g(a),c}b(a,"scalar is 0")}function Qe(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"message")),c=e.length;n.push(s),t=k(n,t,"nonce");var h,o=0|r._crypto_secretbox_noncebytes();t.length!==o&&f(n,"invalid nonce length"),h=v(t),n.push(h),a=k(n,a,"key");var p,i=0|r._crypto_secretbox_keybytes();a.length!==i&&f(n,"invalid key length"),p=v(a),n.push(p);var d=new u(0|c),m=d.address;n.push(m);var x=new u(0|r._crypto_secretbox_macbytes()),E=x.address;if(n.push(E),0==(0|r._crypto_secretbox_detached(m,E,s,c,0,h,p))){var w=y({mac:x,cipher:d},_);return g(n),w}b(n,"invalid usage")}function Ze(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"message")),c=e.length;n.push(s),t=k(n,t,"nonce");var h,o=0|r._crypto_secretbox_noncebytes();t.length!==o&&f(n,"invalid nonce length"),h=v(t),n.push(h),a=k(n,a,"key");var p,i=0|r._crypto_secretbox_keybytes();a.length!==i&&f(n,"invalid key length"),p=v(a),n.push(p);var d=new u(c+r._crypto_secretbox_macbytes()|0),m=d.address;if(n.push(m),0==(0|r._crypto_secretbox_easy(m,s,c,0,h,p))){var x=y(d,_);return g(n),x}b(n,"invalid usage")}function $e(e){var t=[];l(e);var a=new u(0|r._crypto_secretbox_keybytes()),_=a.address;t.push(_),r._crypto_secretbox_keygen(_);var n=y(a,e);return g(t),n}function et(e,t,a,_,n){var s=[];l(n);var c=v(e=k(s,e,"ciphertext")),h=e.length;s.push(c),t=k(s,t,"mac");var o,p=0|r._crypto_secretbox_macbytes();t.length!==p&&f(s,"invalid mac length"),o=v(t),s.push(o),a=k(s,a,"nonce");var i,d=0|r._crypto_secretbox_noncebytes();a.length!==d&&f(s,"invalid nonce length"),i=v(a),s.push(i),_=k(s,_,"key");var m,x=0|r._crypto_secretbox_keybytes();_.length!==x&&f(s,"invalid key length"),m=v(_),s.push(m);var E=new u(0|h),w=E.address;if(s.push(w),0==(0|r._crypto_secretbox_open_detached(w,c,o,h,0,i,m))){var S=y(E,n);return g(s),S}b(s,"wrong secret key for the given ciphertext")}function tt(e,t,a,_){var n=[];l(_),e=k(n,e,"ciphertext");var s,c=r._crypto_secretbox_macbytes(),h=e.length;h<c&&f(n,"ciphertext is too short"),s=v(e),n.push(s),t=k(n,t,"nonce");var o,p=0|r._crypto_secretbox_noncebytes();t.length!==p&&f(n,"invalid nonce length"),o=v(t),n.push(o),a=k(n,a,"key");var i,d=0|r._crypto_secretbox_keybytes();a.length!==d&&f(n,"invalid key length"),i=v(a),n.push(i);var m=new u(h-r._crypto_secretbox_macbytes()|0),x=m.address;if(n.push(x),0==(0|r._crypto_secretbox_open_easy(x,s,h,0,o,i))){var E=y(m,_);return g(n),E}b(n,"wrong secret key for the given ciphertext")}function rt(e,t,a){var _=[];l(a),e=k(_,e,"header");var n,s=0|r._crypto_secretstream_xchacha20poly1305_headerbytes();e.length!==s&&f(_,"invalid header length"),n=v(e),_.push(n),t=k(_,t,"key");var c,h=0|r._crypto_secretstream_xchacha20poly1305_keybytes();t.length!==h&&f(_,"invalid key length"),c=v(t),_.push(c);var o=new u(52).address;if(0==(0|r._crypto_secretstream_xchacha20poly1305_init_pull(o,n,c))){var p=o;return g(_),p}b(_,"invalid usage")}function at(e,t){var a=[];l(t),e=k(a,e,"key");var _,n=0|r._crypto_secretstream_xchacha20poly1305_keybytes();e.length!==n&&f(a,"invalid key length"),_=v(e),a.push(_);var s=new u(52).address,c=new u(0|r._crypto_secretstream_xchacha20poly1305_headerbytes()),h=c.address;if(a.push(h),0==(0|r._crypto_secretstream_xchacha20poly1305_init_push(s,h,_))){var o={state:s,header:y(c,t)};return g(a),o}b(a,"invalid usage")}function _t(e){var t=[];l(e);var a=new u(0|r._crypto_secretstream_xchacha20poly1305_keybytes()),_=a.address;t.push(_),r._crypto_secretstream_xchacha20poly1305_keygen(_);var n=y(a,e);return g(t),n}function nt(e,t,a,_){var n=[];l(_),m(n,e,"state_address"),t=k(n,t,"cipher");var s,c=r._crypto_secretstream_xchacha20poly1305_abytes(),h=t.length;h<c&&f(n,"cipher is too short"),s=v(t),n.push(s);var o=null,p=0;null!=a&&(o=v(a=k(n,a,"ad")),p=a.length,n.push(o));var i=new u(h-r._crypto_secretstream_xchacha20poly1305_abytes()|0),b=i.address;n.push(b);var x,E=(x=d(1),n.push(x),(E=0===r._crypto_secretstream_xchacha20poly1305_pull(e,b,0,x,s,h,0,o,p)&&{tag:r.HEAPU8[x],message:i})&&{message:y(E.message,_),tag:E.tag});return g(n),E}function st(e,t,a,_,n){var s=[];l(n),m(s,e,"state_address");var c=v(t=k(s,t,"message_chunk")),h=t.length;s.push(c);var o=null,p=0;null!=a&&(o=v(a=k(s,a,"ad")),p=a.length,s.push(o)),m(s,_,"tag"),("number"!=typeof _||(0|_)!==_||_<0)&&f(s,"tag must be an unsigned integer");var i=new u(h+r._crypto_secretstream_xchacha20poly1305_abytes()|0),d=i.address;if(s.push(d),0==(0|r._crypto_secretstream_xchacha20poly1305_push(e,d,0,c,h,0,o,p,0,_))){var x=y(i,n);return g(s),x}b(s,"invalid usage")}function ct(e,t){var a=[];return l(t),m(a,e,"state_address"),r._crypto_secretstream_xchacha20poly1305_rekey(e),g(a),!0}function ht(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"key");var c,h=0|r._crypto_shorthash_keybytes();t.length!==h&&f(_,"invalid key length"),c=v(t),_.push(c);var o=new u(0|r._crypto_shorthash_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_shorthash(p,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function ot(e){var t=[];l(e);var a=new u(0|r._crypto_shorthash_keybytes()),_=a.address;t.push(_),r._crypto_shorthash_keygen(_);var n=y(a,e);return g(t),n}function pt(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"key");var c,h=0|r._crypto_shorthash_siphashx24_keybytes();t.length!==h&&f(_,"invalid key length"),c=v(t),_.push(c);var o=new u(0|r._crypto_shorthash_siphashx24_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_shorthash_siphashx24(p,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function yt(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"privateKey");var c,h=0|r._crypto_sign_secretkeybytes();t.length!==h&&f(_,"invalid privateKey length"),c=v(t),_.push(c);var o=new u(e.length+r._crypto_sign_bytes()|0),p=o.address;if(_.push(p),0==(0|r._crypto_sign(p,null,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function it(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"privateKey");var c,h=0|r._crypto_sign_secretkeybytes();t.length!==h&&f(_,"invalid privateKey length"),c=v(t),_.push(c);var o=new u(0|r._crypto_sign_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_sign_detached(p,null,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function lt(e,t){var a=[];l(t),e=k(a,e,"edPk");var _,n=0|r._crypto_sign_publickeybytes();e.length!==n&&f(a,"invalid edPk length"),_=v(e),a.push(_);var s=new u(0|r._crypto_scalarmult_scalarbytes()),c=s.address;if(a.push(c),0==(0|r._crypto_sign_ed25519_pk_to_curve25519(c,_))){var h=y(s,t);return g(a),h}b(a,"invalid key")}function ut(e,t){var a=[];l(t),e=k(a,e,"edSk");var _,n=0|r._crypto_sign_secretkeybytes();e.length!==n&&f(a,"invalid edSk length"),_=v(e),a.push(_);var s=new u(0|r._crypto_scalarmult_scalarbytes()),c=s.address;if(a.push(c),0==(0|r._crypto_sign_ed25519_sk_to_curve25519(c,_))){var h=y(s,t);return g(a),h}b(a,"invalid key")}function vt(e,t){var a=[];l(t),e=k(a,e,"privateKey");var _,n=0|r._crypto_sign_secretkeybytes();e.length!==n&&f(a,"invalid privateKey length"),_=v(e),a.push(_);var s=new u(0|r._crypto_sign_publickeybytes()),c=s.address;if(a.push(c),0==(0|r._crypto_sign_ed25519_sk_to_pk(c,_))){var h=y(s,t);return g(a),h}b(a,"invalid key")}function dt(e,t){var a=[];l(t),e=k(a,e,"privateKey");var _,n=0|r._crypto_sign_secretkeybytes();e.length!==n&&f(a,"invalid privateKey length"),_=v(e),a.push(_);var s=new u(0|r._crypto_sign_seedbytes()),c=s.address;if(a.push(c),0==(0|r._crypto_sign_ed25519_sk_to_seed(c,_))){var h=y(s,t);return g(a),h}b(a,"invalid key")}function gt(e,t,a){var _=[];l(a),m(_,e,"state_address"),t=k(_,t,"privateKey");var n,s=0|r._crypto_sign_secretkeybytes();t.length!==s&&f(_,"invalid privateKey length"),n=v(t),_.push(n);var c=new u(0|r._crypto_sign_bytes()),h=c.address;if(_.push(h),0==(0|r._crypto_sign_final_create(e,h,null,n))){var o=(r._free(e),y(c,a));return g(_),o}b(_,"invalid usage")}function bt(e,t,a,_){var n=[];l(_),m(n,e,"state_address"),t=k(n,t,"signature");var s,c=0|r._crypto_sign_bytes();t.length!==c&&f(n,"invalid signature length"),s=v(t),n.push(s),a=k(n,a,"publicKey");var h,o=0|r._crypto_sign_publickeybytes();a.length!==o&&f(n,"invalid publicKey length"),h=v(a),n.push(h);var p=0==(0|r._crypto_sign_final_verify(e,s,h));return g(n),p}function ft(e){var t=[];l(e);var a=new u(208).address;if(0==(0|r._crypto_sign_init(a))){var _=a;return g(t),_}b(t,"internal error")}function mt(e){var t=[];l(e);var a=new u(0|r._crypto_sign_publickeybytes()),_=a.address;t.push(_);var n=new u(0|r._crypto_sign_secretkeybytes()),s=n.address;if(t.push(s),0==(0|r._crypto_sign_keypair(_,s))){var c={publicKey:y(a,e),privateKey:y(n,e),keyType:"ed25519"};return g(t),c}b(t,"internal error")}function kt(e,t,a){var _=[];l(a),e=k(_,e,"signedMessage");var n,s=r._crypto_sign_bytes(),c=e.length;c<s&&f(_,"signedMessage is too short"),n=v(e),_.push(n),t=k(_,t,"publicKey");var h,o=0|r._crypto_sign_publickeybytes();t.length!==o&&f(_,"invalid publicKey length"),h=v(t),_.push(h);var p=new u(c-r._crypto_sign_bytes()|0),i=p.address;if(_.push(i),0==(0|r._crypto_sign_open(i,null,n,c,0,h))){var d=y(p,a);return g(_),d}b(_,"incorrect signature for the given public key")}function xt(e,t){var a=[];l(t),e=k(a,e,"seed");var _,n=0|r._crypto_sign_seedbytes();e.length!==n&&f(a,"invalid seed length"),_=v(e),a.push(_);var s=new u(0|r._crypto_sign_publickeybytes()),c=s.address;a.push(c);var h=new u(0|r._crypto_sign_secretkeybytes()),o=h.address;if(a.push(o),0==(0|r._crypto_sign_seed_keypair(c,o,_))){var p={publicKey:y(s,t),privateKey:y(h,t),keyType:"ed25519"};return g(a),p}b(a,"invalid usage")}function Et(e,t,a){var _=[];l(a),m(_,e,"state_address");var n=v(t=k(_,t,"message_chunk")),s=t.length;_.push(n),0!=(0|r._crypto_sign_update(e,n,s))&&b(_,"invalid usage"),g(_)}function wt(e,t,a){var _=[];e=k(_,e,"signature");var n,s=0|r._crypto_sign_bytes();e.length!==s&&f(_,"invalid signature length"),n=v(e),_.push(n);var c=v(t=k(_,t,"message")),h=t.length;_.push(c),a=k(_,a,"publicKey");var o,p=0|r._crypto_sign_publickeybytes();a.length!==p&&f(_,"invalid publicKey length"),o=v(a),_.push(o);var y=0==(0|r._crypto_sign_verify_detached(n,c,h,0,o));return g(_),y}function St(e,t,a,_){var n=[];l(_),m(n,e,"outLength"),("number"!=typeof e||(0|e)!==e||e<0)&&f(n,"outLength must be an unsigned integer"),t=k(n,t,"key");var s,c=0|r._crypto_stream_chacha20_keybytes();t.length!==c&&f(n,"invalid key length"),s=v(t),n.push(s),a=k(n,a,"nonce");var h,o=0|r._crypto_stream_chacha20_noncebytes();a.length!==o&&f(n,"invalid nonce length"),h=v(a),n.push(h);var p=new u(0|e),i=p.address;n.push(i),r._crypto_stream_chacha20(i,e,0,h,s);var d=y(p,_);return g(n),d}function Tt(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"input_message")),c=e.length;n.push(s),t=k(n,t,"nonce");var h,o=0|r._crypto_stream_chacha20_ietf_noncebytes();t.length!==o&&f(n,"invalid nonce length"),h=v(t),n.push(h),a=k(n,a,"key");var p,i=0|r._crypto_stream_chacha20_ietf_keybytes();a.length!==i&&f(n,"invalid key length"),p=v(a),n.push(p);var d=new u(0|c),m=d.address;if(n.push(m),0===r._crypto_stream_chacha20_ietf_xor(m,s,c,0,h,p)){var x=y(d,_);return g(n),x}b(n,"invalid usage")}function Yt(e,t,a,_,n){var s=[];l(n);var c=v(e=k(s,e,"input_message")),h=e.length;s.push(c),t=k(s,t,"nonce");var o,p=0|r._crypto_stream_chacha20_ietf_noncebytes();t.length!==p&&f(s,"invalid nonce length"),o=v(t),s.push(o),m(s,a,"nonce_increment"),("number"!=typeof a||(0|a)!==a||a<0)&&f(s,"nonce_increment must be an unsigned integer"),_=k(s,_,"key");var i,d=0|r._crypto_stream_chacha20_ietf_keybytes();_.length!==d&&f(s,"invalid key length"),i=v(_),s.push(i);var x=new u(0|h),E=x.address;if(s.push(E),0===r._crypto_stream_chacha20_ietf_xor_ic(E,c,h,0,o,a,0,i)){var w=y(x,n);return g(s),w}b(s,"invalid usage")}function At(e){var t=[];l(e);var a=new u(0|r._crypto_stream_chacha20_keybytes()),_=a.address;t.push(_),r._crypto_stream_chacha20_keygen(_);var n=y(a,e);return g(t),n}function Bt(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"input_message")),c=e.length;n.push(s),t=k(n,t,"nonce");var h,o=0|r._crypto_stream_chacha20_noncebytes();t.length!==o&&f(n,"invalid nonce length"),h=v(t),n.push(h),a=k(n,a,"key");var p,i=0|r._crypto_stream_chacha20_keybytes();a.length!==i&&f(n,"invalid key length"),p=v(a),n.push(p);var d=new u(0|c),m=d.address;if(n.push(m),0===r._crypto_stream_chacha20_xor(m,s,c,0,h,p)){var x=y(d,_);return g(n),x}b(n,"invalid usage")}function Kt(e,t,a,_,n){var s=[];l(n);var c=v(e=k(s,e,"input_message")),h=e.length;s.push(c),t=k(s,t,"nonce");var o,p=0|r._crypto_stream_chacha20_noncebytes();t.length!==p&&f(s,"invalid nonce length"),o=v(t),s.push(o),m(s,a,"nonce_increment"),("number"!=typeof a||(0|a)!==a||a<0)&&f(s,"nonce_increment must be an unsigned integer"),_=k(s,_,"key");var i,d=0|r._crypto_stream_chacha20_keybytes();_.length!==d&&f(s,"invalid key length"),i=v(_),s.push(i);var x=new u(0|h),E=x.address;if(s.push(E),0===r._crypto_stream_chacha20_xor_ic(E,c,h,0,o,a,0,i)){var w=y(x,n);return g(s),w}b(s,"invalid usage")}function It(e){var t=[];l(e);var a=new u(0|r._crypto_stream_keybytes()),_=a.address;t.push(_),r._crypto_stream_keygen(_);var n=y(a,e);return g(t),n}function Mt(e){var t=[];l(e);var a=new u(0|r._crypto_stream_xchacha20_keybytes()),_=a.address;t.push(_),r._crypto_stream_xchacha20_keygen(_);var n=y(a,e);return g(t),n}function Lt(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"input_message")),c=e.length;n.push(s),t=k(n,t,"nonce");var h,o=0|r._crypto_stream_xchacha20_noncebytes();t.length!==o&&f(n,"invalid nonce length"),h=v(t),n.push(h),a=k(n,a,"key");var p,i=0|r._crypto_stream_xchacha20_keybytes();a.length!==i&&f(n,"invalid key length"),p=v(a),n.push(p);var d=new u(0|c),m=d.address;if(n.push(m),0===r._crypto_stream_xchacha20_xor(m,s,c,0,h,p)){var x=y(d,_);return g(n),x}b(n,"invalid usage")}function Nt(e,t,a,_,n){var s=[];l(n);var c=v(e=k(s,e,"input_message")),h=e.length;s.push(c),t=k(s,t,"nonce");var o,p=0|r._crypto_stream_xchacha20_noncebytes();t.length!==p&&f(s,"invalid nonce length"),o=v(t),s.push(o),m(s,a,"nonce_increment"),("number"!=typeof a||(0|a)!==a||a<0)&&f(s,"nonce_increment must be an unsigned integer"),_=k(s,_,"key");var i,d=0|r._crypto_stream_xchacha20_keybytes();_.length!==d&&f(s,"invalid key length"),i=v(_),s.push(i);var x=new u(0|h),E=x.address;if(s.push(E),0===r._crypto_stream_xchacha20_xor_ic(E,c,h,0,o,a,0,i)){var w=y(x,n);return g(s),w}b(s,"invalid usage")}function Ut(e,t){var a=[];l(t),m(a,e,"length"),("number"!=typeof e||(0|e)!==e||e<0)&&f(a,"length must be an unsigned integer");var _=new u(0|e),n=_.address;a.push(n),r._randombytes_buf(n,e);var s=y(_,t);return g(a),s}function Ot(e,t,a){var _=[];l(a),m(_,e,"length"),("number"!=typeof e||(0|e)!==e||e<0)&&f(_,"length must be an unsigned integer"),t=k(_,t,"seed");var n,s=0|r._randombytes_seedbytes();t.length!==s&&f(_,"invalid seed length"),n=v(t),_.push(n);var c=new u(0|e),h=c.address;_.push(h),r._randombytes_buf_deterministic(h,e,n);var o=y(c,a);return g(_),o}function Rt(e){l(e),r._randombytes_close()}function Pt(e){l(e);var t=r._randombytes_random()>>>0;return g([]),t}function Ct(e,t){var a=[];l(t);for(var _=r._malloc(24),n=0;n<6;n++)r.setValue(_+4*n,r.Runtime.addFunction(e[["implementation_name","random","stir","uniform","buf","close"][n]]),"i32");0!=(0|r._randombytes_set_implementation(_))&&b(a,"unsupported implementation"),g(a)}function Gt(e){l(e),r._randombytes_stir()}function Dt(e,t){var a=[];l(t),m(a,e,"upper_bound"),("number"!=typeof e||(0|e)!==e||e<0)&&f(a,"upper_bound must be an unsigned integer");var _=r._randombytes_uniform(e)>>>0;return g(a),_}function Xt(){var e=r._sodium_version_string(),t=r.UTF8ToString(e);return g([]),t}return u.prototype.to_Uint8Array=function(){var e=new Uint8Array(this.length);return e.set(r.HEAPU8.subarray(this.address,this.address+this.length)),e},e.add=function(e,t){if(!(e instanceof Uint8Array&&t instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can added");var r=e.length,a=0,_=0;if(t.length!=e.length)throw new TypeError("Arguments must have the same length");for(_=0;_<r;_++)a>>=8,a+=e[_]+t[_],e[_]=255&a},e.base64_variants=h,e.compare=function(e,t){if(!(e instanceof Uint8Array&&t instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be compared");if(e.length!==t.length)throw new TypeError("Only instances of identical length can be compared");for(var r=0,a=1,_=e.length;_-- >0;)r|=t[_]-e[_]>>8&a,a&=(t[_]^e[_])-1>>8;return r+r+a-1},e.from_base64=function(e,t){t=o(t);var a,_=[],n=new u(3*(e=k(_,e,"input")).length/4),s=v(e),c=d(4),h=d(4);return _.push(s),_.push(n.address),_.push(n.result_bin_len_p),_.push(n.b64_end_p),0!==r._sodium_base642bin(n.address,n.length,s,e.length,0,c,h,t)&&b(_,"invalid input"),r.getValue(h,"i32")-s!==e.length&&b(_,"incomplete input"),n.length=r.getValue(c,"i32"),a=n.to_Uint8Array(),g(_),a},e.from_hex=function(e){var t,a=[],_=new u((e=k(a,e,"input")).length/2),n=v(e),s=d(4);return a.push(n),a.push(_.address),a.push(_.hex_end_p),0!==r._sodium_hex2bin(_.address,_.length,n,e.length,0,0,s)&&b(a,"invalid input"),r.getValue(s,"i32")-n!==e.length&&b(a,"incomplete input"),t=_.to_Uint8Array(),g(a),t},e.from_string=n,e.increment=function(e){if(!(e instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be incremented");for(var t=256,r=0,a=e.length;r<a;r++)t>>=8,t+=e[r],e[r]=255&t},e.is_zero=function(e){if(!(e instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be checked");for(var t=0,r=0,a=e.length;r<a;r++)t|=e[r];return 0===t},e.libsodium=t,e.memcmp=function(e,t){if(!(e instanceof Uint8Array&&t instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be compared");if(e.length!==t.length)throw new TypeError("Only instances of identical length can be compared");for(var r=0,a=0,_=e.length;a<_;a++)r|=e[a]^t[a];return 0===r},e.memzero=function(e){if(!(e instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be wiped");for(var t=0,r=e.length;t<r;t++)e[t]=0},e.output_formats=function(){return["uint8array","text","hex","base64"]},e.pad=function(e,t){if(!(e instanceof Uint8Array))throw new TypeError("buffer must be a Uint8Array");if((t|=0)<=0)throw new Error("block size must be > 0");var a,_=[],n=d(4),s=1,c=0,h=0|e.length,o=new u(h+t);_.push(n),_.push(o.address);for(var p=o.address,y=o.address+h+t;p<y;p++)r.HEAPU8[p]=e[c],c+=s=1&~((65535&((h-=s)>>>48|h>>>32|h>>>16|h))-1>>16);return 0!==r._sodium_pad(n,o.address,e.length,t,o.length)&&b(_,"internal error"),o.length=r.getValue(n,"i32"),a=o.to_Uint8Array(),g(_),a},e.unpad=function(e,t){if(!(e instanceof Uint8Array))throw new TypeError("buffer must be a Uint8Array");if((t|=0)<=0)throw new Error("block size must be > 0");var a=[],_=v(e),n=d(4);return a.push(_),a.push(n),0!==r._sodium_unpad(n,_,e.length,t)&&b(a,"unsupported/invalid padding"),e=(e=new Uint8Array(e)).subarray(0,r.getValue(n,"i32")),g(a),e},e.ready=_,e.symbols=function(){return Object.keys(e).sort()},e.to_base64=p,e.to_hex=c,e.to_string=s,e}var r="object"==typeof e.sodium&&"function"==typeof e.sodium.onload?e.sodium.onload:null; true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports,__webpack_require__(89)], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):undefined,r&&e.sodium.ready.then(function(){r(e.sodium)})}(this);


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process, __dirname, Buffer) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function(A){function I(A){"use strict";var I;void 0===(I=A)&&(I={});var g=I;"object"!=typeof g.sodium&&("object"==typeof global?g=global:"object"==typeof window&&(g=window)),"object"==typeof g.sodium&&"number"==typeof g.sodium.totalMemory&&(I.TOTAL_MEMORY=g.sodium.totalMemory);var B=I;return I.ready=new Promise(function(A,I){(C=B).onAbort=I,C.print=function(A){},C.printErr=function(A){},C.onRuntimeInitialized=function(){try{C._crypto_secretbox_keybytes(),A()}catch(A){I(A)}},C.useBackupModule=function(){var A,I=void 0!==(I={})?I:{},g={};for(A in I)I.hasOwnProperty(A)&&(g[A]=I[A]);var C,Q,E,i,e=[],o=!1;C="object"==typeof window,Q="function"==typeof importScripts,E="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,o=E&&!C&&!Q,i=!C&&!o&&!Q;var c,a,n,r,t,f="";o?(f=__dirname+"/",c=function(A,I){var g;return(g=iA(A))||(r||(r=__webpack_require__(44)),t||(t=__webpack_require__(45)),A=t.normalize(A),g=r.readFileSync(A)),I?g:g.toString()},n=function(A){var I=c(A,!0);return I.buffer||(I=new Uint8Array(I)),D(I.buffer),I},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),e=process.argv.slice(2), true&&(module.exports=I),process.on("unhandledRejection",j),I.inspect=function(){return"[Emscripten Module object]"}):i?("undefined"!=typeof read&&(c=function(A){var I=iA(A);return I?QA(I):read(A)}),n=function(A){var I;return(I=iA(A))?I:"function"==typeof readbuffer?new Uint8Array(readbuffer(A)):(D("object"==typeof(I=read(A,"binary"))),I)},"undefined"!=typeof scriptArgs?e=scriptArgs:void 0!==arguments&&(e=arguments),"undefined"!=typeof print&&("undefined"==typeof console&&(console={}),console.log=print,console.warn=console.error="undefined"!=typeof printErr?printErr:print)):(C||Q)&&(Q?f=self.location.href:document.currentScript&&(f=document.currentScript.src),f=0!==f.indexOf("blob:")?f.substr(0,f.lastIndexOf("/")+1):"",c=function(A){try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.send(null),I.responseText}catch(I){var g=iA(A);if(g)return QA(g);throw I}},Q&&(n=function(A){try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.responseType="arraybuffer",I.send(null),new Uint8Array(I.response)}catch(I){var g=iA(A);if(g)return g;throw I}}),a=function(A,I,g){var B=new XMLHttpRequest;B.open("GET",A,!0),B.responseType="arraybuffer",B.onload=function(){if(200==B.status||0==B.status&&B.response)I(B.response);else{var C=iA(A);C?I(C.buffer):g()}},B.onerror=g,B.send(null)});var w=I.print||void 0,y=I.printErr||void 0;for(A in g)g.hasOwnProperty(A)&&(I[A]=g[A]);g=null,I.arguments&&(e=I.arguments),I.thisProgram&&I.thisProgram,I.quit&&I.quit,new Array(8);var s=0;I.wasmBinary&&I.wasmBinary,I.noExitRuntime&&I.noExitRuntime;var h=!1;function D(A,I){A||j("Assertion failed: "+I)}var F,p,u,H,k,l,_,G="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function d(A,I){return A?function(A,I,g){for(var B=I+g,C=I;A[C]&&!(C>=B);)++C;if(C-I>16&&A.subarray&&G)return G.decode(A.subarray(I,C));for(var Q="";I<C;){var E=A[I++];if(128&E){var i=63&A[I++];if(192!=(224&E)){var e=63&A[I++];if((E=224==(240&E)?(15&E)<<12|i<<6|e:(7&E)<<18|i<<12|e<<6|63&A[I++])<65536)Q+=String.fromCharCode(E);else{var o=E-65536;Q+=String.fromCharCode(55296|o>>10,56320|1023&o)}}else Q+=String.fromCharCode((31&E)<<6|i)}else Q+=String.fromCharCode(E)}return Q}(u,A,I):""}function Y(A,I){return A%I>0&&(A+=I-A%I),A}function M(A){F=A,I.HEAP8=p=new Int8Array(A),I.HEAP16=H=new Int16Array(A),I.HEAP32=k=new Int32Array(A),I.HEAPU8=u=new Uint8Array(A),I.HEAPU16=new Uint16Array(A),I.HEAPU32=new Uint32Array(A),I.HEAPF32=l=new Float32Array(A),I.HEAPF64=_=new Float64Array(A)}"undefined"!=typeof TextDecoder&&new TextDecoder("utf-16le");var S=I.TOTAL_MEMORY||16777216;function U(A){for(;A.length>0;){var g=A.shift();if("function"!=typeof g){var B=g.func;"number"==typeof B?void 0===g.arg?I.dynCall_v(B):I.dynCall_vi(B,g.arg):B(void 0===g.arg?null:g.arg)}else g()}}S=(F=I.buffer?I.buffer:new ArrayBuffer(S)).byteLength,M(F),k[8808]=5278304;var v=[],b=[],J=[],P=[],R=Math.abs,N=Math.ceil,m=Math.floor,L=Math.min,x=0,K=null,X=null;function j(A){throw I.onAbort&&I.onAbort(A),w(A+=""),y(A),h=!0,"abort("+A+"). Build with -s ASSERTIONS=1 for more info."}I.preloadedImages={},I.preloadedAudios={};var T,q,V=null,z="data:application/octet-stream;base64,";function W(A){return String.prototype.startsWith?A.startsWith(z):0===A.indexOf(z)}var O=[function(){return I.getRandomValue()},function(){if(void 0===I.getRandomValue)try{var A="object"==typeof window?window:self,g=void 0!==A.crypto?A.crypto:A.msCrypto,B=function(){var A=new Uint32Array(1);return g.getRandomValues(A),A[0]>>>0};B(),I.getRandomValue=B}catch(A){try{var C=__webpack_require__(46),Q=function(){var A=C.randomBytes(4);return(A[0]<<24|A[1]<<16|A[2]<<8|A[3])>>>0};Q(),I.getRandomValue=Q}catch(A){throw"No secure random number generator found"}}}];function Z(A){return A}function $(A){return A.replace(/\b__Z[\w\d_]+/g,function(A){var I=Z(A);return A===I?A:I+" ["+A+"]"})}function AA(){var A=new Error;if(!A.stack){try{throw new Error(0)}catch(I){A=I}if(!A.stack)return"(no stack trace available)"}return A.stack.toString()}function IA(){return p.length}function gA(A){try{var I=new ArrayBuffer(A);if(I.byteLength!=A)return;return new Int8Array(I).set(p),aA(I),M(I),1}catch(A){}}function BA(A){return I.___errno_location&&(k[I.___errno_location()>>2]=A),A}V="data:application/octet-stream;base64,";var CA=!1;function QA(A){for(var I=[],g=0;g<A.length;g++){var B=A[g];B>255&&(CA&&D(!1,"Character code "+B+" ("+String.fromCharCode(B)+")  at offset "+g+" not in 0x00-0xFF."),B&=255),I.push(String.fromCharCode(B))}return I.join("")}var EA="function"==typeof atob?atob:function(A){var I,g,B,C,Q,E,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",e="",o=0;A=A.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{I=i.indexOf(A.charAt(o++))<<2|(C=i.indexOf(A.charAt(o++)))>>4,g=(15&C)<<4|(Q=i.indexOf(A.charAt(o++)))>>2,B=(3&Q)<<6|(E=i.indexOf(A.charAt(o++))),e+=String.fromCharCode(I),64!==Q&&(e+=String.fromCharCode(g)),64!==E&&(e+=String.fromCharCode(B))}while(o<A.length);return e};function iA(A){if(W(A))return function(A){if("boolean"==typeof o&&o){var I;try{I=Buffer.from(A,"base64")}catch(g){I=new Buffer(A,"base64")}return new Uint8Array(I.buffer,I.byteOffset,I.byteLength)}try{for(var g=EA(A),B=new Uint8Array(g.length),C=0;C<g.length;++C)B[C]=g.charCodeAt(C);return B}catch(A){throw new Error("Converting base64 string to bytes failed.")}}(A.slice(z.length))}var eA,oA,cA=function(A,I,g){"almost asm";var B=new A.Int8Array(g),C=new A.Int32Array(g),Q=new A.Uint8Array(g),E=A.Math.imul,i=A.Math.clz32,e=I.b,o=I.c,c=I.d,a=I.f,n=I.g,r=I.h,t=I.i,f=I.j,w=I.k,y=35424;function s(A,I){A|=0,I|=0;var g,E,i,e,c,a,n=0,r=0,t=0,f=0,w=0,s=0,h=0,D=0,F=0,p=0,u=0,H=0,k=0,l=0,_=0,G=0,d=0,Y=0,M=0,S=0,U=0,v=0,b=0,J=0,P=0,R=0,N=0,m=0,L=0,x=0,K=0,X=0,j=0,T=0,q=0,V=0,z=0,W=0,O=0,Z=0,$=0,AA=0,IA=0,gA=0,BA=0,CA=0,QA=0,EA=0,iA=0,eA=0,oA=0,cA=0,aA=0,nA=0,rA=0,tA=0,fA=0,wA=0,yA=0,sA=0;g=y,E=y=y+63&-64,y=y+256|0,n=0;do{f=0|qI(I+(n<<3)|0),t=0|o(),C[(r=E+128+(n<<3)|0)>>2]=f,C[r+4>>2]=t,n=n+1|0}while(16!=(0|n));n=A,r=(I=E)+64|0;do{B[I>>0]=0|B[n>>0],I=I+1|0,n=n+1|0}while((0|I)<(0|r));for(C[E+88>>2]=1595750129,C[E+88+4>>2]=-1521486534,X=-1377402159^(Q[A+64>>0]|Q[A+64+1>>0]<<8|Q[A+64+2>>0]<<16|Q[A+64+3>>0]<<24),K=1359893119^(Q[A+64+4>>0]|Q[A+64+4+1>>0]<<8|Q[A+64+4+2>>0]<<16|Q[A+64+4+3>>0]<<24),S=725511199^(Q[A+72>>0]|Q[A+72+1>>0]<<8|Q[A+72+2>>0]<<16|Q[A+72+3>>0]<<24),U=-1694144372^(Q[A+72+4>>0]|Q[A+72+4+1>>0]<<8|Q[A+72+4+2>>0]<<16|Q[A+72+4+3>>0]<<24),u=-79577749^(Q[A+80>>0]|Q[A+80+1>>0]<<8|Q[A+80+2>>0]<<16|Q[A+80+3>>0]<<24),H=528734635^(Q[A+80+4>>0]|Q[A+80+4+1>>0]<<8|Q[A+80+4+2>>0]<<16|Q[A+80+4+3>>0]<<24),AA=327033209^(Q[A+88>>0]|Q[A+88+1>>0]<<8|Q[A+88+2>>0]<<16|Q[A+88+3>>0]<<24),$=1541459225^(Q[A+88+4>>0]|Q[A+88+4+1>>0]<<8|Q[A+88+4+2>>0]<<16|Q[A+88+4+3>>0]<<24),h=0|C[E+32>>2],D=0|C[E+32+4>>2],D=0|ZI((I=0|vg(0|(K=0|ZI((wA=0|vg(0|(yA=0|vg(0|(j=0|C[E+128>>2]),0|(T=0|C[E+128+4>>2]),0|h,0|D)),0|(wA=0|o()),0|C[E>>2],0|C[E+4>>2]))^X,(yA=0|o())^K,32)),0|(X=0|o()),-205731576,1779033703))^h,(f=0|o())^D,24),h=0|o(),IA=0|C[E+128+8>>2],gA=0|C[E+128+8+4>>2],X=0|ZI((yA=0|vg(0|(yA=0|vg(0|D,0|h,0|wA,0|yA)),0|o(),0|IA,0|gA))^K,(wA=0|o())^X,16),K=0|o(),C[E+96>>2]=X,C[E+96+4>>2]=K,f=0|vg(0|X,0|K,0|I,0|f),I=0|o(),C[E+64>>2]=f,C[E+64+4>>2]=I,h=0|ZI(f^D,I^h,63),D=0|o(),C[E+32>>2]=h,C[E+32+4>>2]=D,W=0|C[E+40>>2],O=0|C[E+40+4>>2],O=0|ZI((s=0|vg(0|(U=0|ZI((nA=0|vg(0|(aA=0|vg(0|(r=0|C[E+128+16>>2]),0|(n=0|C[E+128+16+4>>2]),0|W,0|O)),0|(nA=0|o()),0|C[E+8>>2],0|C[E+8+4>>2]))^S,(aA=0|o())^U,32)),0|(S=0|o()),-2067093701,-1150833019))^W,(F=0|o())^O,24),W=0|o(),p=0|C[E+128+24>>2],k=0|C[E+128+24+4>>2],S=0|ZI((aA=0|vg(0|(aA=0|vg(0|O,0|W,0|nA,0|aA)),0|o(),0|p,0|k))^U,(nA=0|o())^S,16),U=0|o(),C[E+104>>2]=S,C[E+104+4>>2]=U,F=0|vg(0|S,0|U,0|s,0|F),s=0|o(),C[E+72>>2]=F,C[E+72+4>>2]=s,W=0|ZI(F^O,s^W,63),O=0|o(),m=0|C[E+48>>2],L=0|C[E+48+4>>2],L=0|ZI((z=0|vg(0|(H=0|ZI((oA=0|vg(0|(eA=0|vg(0|(a=0|C[E+128+32>>2]),0|(rA=0|C[E+128+32+4>>2]),0|m,0|L)),0|(oA=0|o()),0|C[E+16>>2],0|C[E+16+4>>2]))^u,(eA=0|o())^H,32)),0|(u=0|o()),-23791573,1013904242))^m,(Z=0|o())^L,24),m=0|o(),i=0|C[E+128+40>>2],G=0|C[E+128+40+4>>2],m=0|ZI((Z=0|vg(0|(u=0|ZI((eA=0|vg(0|(eA=0|vg(0|L,0|m,0|oA,0|eA)),0|o(),0|i,0|G))^H,(oA=0|o())^u,16)),0|(H=0|o()),0|z,0|Z))^L,(z=0|o())^m,63),L=0|o(),Y=0|C[E+56>>2],d=0|C[E+56+4>>2],d=0|ZI((N=0|vg(0|($=0|ZI((EA=0|vg(0|(QA=0|vg(0|(_=0|C[E+128+48>>2]),0|(l=0|C[E+128+48+4>>2]),0|Y,0|d)),0|(EA=0|o()),0|C[E+24>>2],0|C[E+24+4>>2]))^AA,(QA=0|o())^$,32)),0|(AA=0|o()),1595750129,-1521486534))^Y,(x=0|o())^d,24),Y=0|o(),M=0|C[E+128+56>>2],v=0|C[E+128+56+4>>2],Y=0|ZI((x=0|vg(0|(AA=0|ZI((QA=0|vg(0|(QA=0|vg(0|d,0|Y,0|EA,0|QA)),0|o(),0|M,0|v))^$,(EA=0|o())^AA,16)),0|($=0|o()),0|N,0|x))^d,(N=0|o())^Y,63),d=0|o(),q=0|C[E+128+64>>2],V=0|C[E+128+64+4>>2],O=0|ZI((z=0|vg(0|($=0|ZI((wA=0|vg(0|(wA=0|vg(0|W,0|O,0|yA,0|wA)),0|o(),0|q,0|V))^AA,(yA=0|o())^$,32)),0|(AA=0|o()),0|Z,0|z))^W,(Z=0|o())^O,24),W=0|o(),c=0|C[E+128+72>>2],cA=0|C[E+128+72+4>>2],AA=0|ZI((yA=0|vg(0|(yA=0|vg(0|O,0|W,0|wA,0|yA)),0|o(),0|c,0|cA))^$,(wA=0|o())^AA,16),$=0|o(),C[E+120>>2]=AA,C[E+120+4>>2]=$,Z=0|vg(0|AA,0|$,0|z,0|Z),z=0|o(),C[E+80>>2]=Z,C[E+80+4>>2]=z,W=0|ZI(Z^O,z^W,63),O=0|o(),BA=0|C[E+128+80>>2],CA=0|C[E+128+80+4>>2],L=0|ZI((N=0|vg(0|(K=0|ZI((nA=0|vg(0|(nA=0|vg(0|m,0|L,0|aA,0|nA)),0|o(),0|BA,0|CA))^X,(aA=0|o())^K,32)),0|(X=0|o()),0|x,0|N))^m,(x=0|o())^L,24),m=0|o(),b=0|C[E+128+88>>2],J=0|C[E+128+88+4>>2],m=0|ZI((x=0|vg(0|(X=0|ZI((aA=0|vg(0|(aA=0|vg(0|L,0|m,0|nA,0|aA)),0|o(),0|b,0|J))^K,(nA=0|o())^X,16)),0|(K=0|o()),0|N,0|x))^L,(N=0|o())^m,63),L=0|o(),t=0|C[E+128+96>>2],w=0|C[E+128+96+4>>2],d=0|ZI((I=0|vg(0|(U=0|ZI((oA=0|vg(0|(oA=0|vg(0|Y,0|d,0|eA,0|oA)),0|o(),0|t,0|w))^S,(eA=0|o())^U,32)),0|(S=0|o()),0|f,0|I))^Y,(f=0|o())^d,24),Y=0|o(),e=0|C[E+128+104>>2],iA=0|C[E+128+104+4>>2],Y=0|ZI((f=0|vg(0|(S=0|ZI((eA=0|vg(0|(eA=0|vg(0|d,0|Y,0|oA,0|eA)),0|o(),0|e,0|iA))^U,(oA=0|o())^S,16)),0|(U=0|o()),0|I,0|f))^d,(I=0|o())^Y,63),d=0|o(),tA=0|C[E+128+112>>2],fA=0|C[E+128+112+4>>2],D=0|ZI((s=0|vg(0|(H=0|ZI((EA=0|vg(0|(EA=0|vg(0|QA,0|EA,0|h,0|D)),0|o(),0|tA,0|fA))^u,(QA=0|o())^H,32)),0|(u=0|o()),0|F,0|s))^h,(F=0|o())^D,24),h=0|o(),P=0|C[E+128+120>>2],R=0|C[E+128+120+4>>2],h=0|ZI((F=0|vg(0|(u=0|ZI((QA=0|vg(0|(QA=0|vg(0|D,0|h,0|EA,0|QA)),0|o(),0|P,0|R))^H,(EA=0|o())^u,16)),0|(H=0|o()),0|s,0|F))^D,(s=0|o())^h,63),D=0|o(),D=0|ZI((I=0|vg(0|(K=0|ZI((wA=0|vg(0|(wA=0|vg(0|tA,0|fA,0|yA,0|wA)),0|o(),0|h,0|D))^X,(yA=0|o())^K,32)),0|(X=0|o()),0|f,0|I))^h,(f=0|o())^D,24),h=0|o(),h=0|ZI((f=0|vg(0|(X=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|BA,0|CA)),0|o(),0|D,0|h))^K,(wA=0|o())^X,16)),0|(K=0|o()),0|I,0|f))^D,(I=0|o())^h,63),D=0|o(),C[E+32>>2]=h,C[E+32+4>>2]=D,O=0|ZI((s=0|vg(0|(U=0|ZI(S^(nA=0|vg(0|(sA=0|vg(0|W,0|O,0|a,0|rA)),0|o(),0|aA,0|nA)),U^(aA=0|o()),32)),0|(S=0|o()),0|F,0|s))^W,(F=0|o())^O,24),W=0|o(),W=0|ZI((F=0|vg(0|(S=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|q,0|V)),0|o(),0|O,0|W))^U,(nA=0|o())^S,16)),0|(U=0|o()),0|s,0|F))^O,(s=0|o())^W,63),O=0|o(),L=0|ZI((z=0|vg(0|(H=0|ZI(u^(oA=0|vg(0|(sA=0|vg(0|m,0|L,0|c,0|cA)),0|o(),0|eA,0|oA)),H^(eA=0|o()),32)),0|(u=0|o()),0|Z,0|z))^m,(Z=0|o())^L,24),m=0|o(),m=0|ZI((Z=0|vg(0|(u=0|ZI((eA=0|vg(0|(eA=0|vg(0|P,0|R,0|oA,0|eA)),0|o(),0|L,0|m))^H,(oA=0|o())^u,16)),0|(H=0|o()),0|z,0|Z))^L,(z=0|o())^m,63),L=0|o(),d=0|ZI((N=0|vg(0|($=0|ZI((EA=0|vg(0|(sA=0|vg(0|Y,0|d,0|e,0|iA)),0|o(),0|QA,0|EA))^AA,(QA=0|o())^$,32)),0|(AA=0|o()),0|x,0|N))^Y,(x=0|o())^d,24),Y=0|o(),Y=0|ZI((x=0|vg(0|(AA=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|_,0|l)),0|o(),0|d,0|Y))^$,(EA=0|o())^AA,16)),0|($=0|o()),0|N,0|x))^d,(N=0|o())^Y,63),d=0|o(),O=0|ZI((z=0|vg(0|($=0|ZI(AA^(wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|IA,0|gA)),0|o(),0|W,0|O)),$^(yA=0|o()),32)),0|(AA=0|o()),0|Z,0|z))^W,(Z=0|o())^O,24),W=0|o(),AA=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|t,0|w)),0|o(),0|O,0|W))^$,(wA=0|o())^AA,16),$=0|o(),C[E+120>>2]=AA,C[E+120+4>>2]=$,W=0|ZI((Z=0|vg(0|AA,0|$,0|z,0|Z))^O,(z=0|o())^W,63),O=0|o(),L=0|ZI((N=0|vg(0|(K=0|ZI((nA=0|vg(0|(nA=0|vg(0|aA,0|nA,0|j,0|T)),0|o(),0|m,0|L))^X,(aA=0|o())^K,32)),0|(X=0|o()),0|x,0|N))^m,(x=0|o())^L,24),m=0|o(),m=0|ZI((x=0|vg(0|(X=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|r,0|n)),0|o(),0|L,0|m))^K,(nA=0|o())^X,16)),0|(K=0|o()),0|N,0|x))^L,(N=0|o())^m,63),L=0|o(),d=0|ZI((I=0|vg(0|(U=0|ZI((oA=0|vg(0|(oA=0|vg(0|eA,0|oA,0|b,0|J)),0|o(),0|Y,0|d))^S,(eA=0|o())^U,32)),0|(S=0|o()),0|f,0|I))^Y,(f=0|o())^d,24),Y=0|o(),Y=0|ZI((f=0|vg(0|(S=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|M,0|v)),0|o(),0|d,0|Y))^U,(oA=0|o())^S,16)),0|(U=0|o()),0|I,0|f))^d,(I=0|o())^Y,63),d=0|o(),D=0|ZI((s=0|vg(0|(H=0|ZI((EA=0|vg(0|(sA=0|vg(0|h,0|D,0|i,0|G)),0|o(),0|QA,0|EA))^u,(QA=0|o())^H,32)),0|(u=0|o()),0|F,0|s))^h,(F=0|o())^D,24),h=0|o(),h=0|ZI((F=0|vg(0|(u=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|p,0|k)),0|o(),0|D,0|h))^H,(EA=0|o())^u,16)),0|(H=0|o()),0|s,0|F))^D,(s=0|o())^h,63),D=0|o(),D=0|ZI((I=0|vg(0|(K=0|ZI((wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|b,0|J)),0|o(),0|h,0|D))^X,(yA=0|o())^K,32)),0|(X=0|o()),0|f,0|I))^h,(f=0|o())^D,24),h=0|o(),h=0|ZI((f=0|vg(0|(X=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|q,0|V)),0|o(),0|D,0|h))^K,(wA=0|o())^X,16)),0|(K=0|o()),0|I,0|f))^D,(I=0|o())^h,63),D=0|o(),C[E+32>>2]=h,C[E+32+4>>2]=D,O=0|ZI((s=0|vg(0|(U=0|ZI(S^(nA=0|vg(0|(sA=0|vg(0|W,0|O,0|t,0|w)),0|o(),0|aA,0|nA)),U^(aA=0|o()),32)),0|(S=0|o()),0|F,0|s))^W,(F=0|o())^O,24),W=0|o(),W=0|ZI((F=0|vg(0|(S=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|j,0|T)),0|o(),0|O,0|W))^U,(nA=0|o())^S,16)),0|(U=0|o()),0|s,0|F))^O,(s=0|o())^W,63),O=0|o(),L=0|ZI((z=0|vg(0|(H=0|ZI(u^(oA=0|vg(0|(sA=0|vg(0|m,0|L,0|i,0|G)),0|o(),0|eA,0|oA)),H^(eA=0|o()),32)),0|(u=0|o()),0|Z,0|z))^m,(Z=0|o())^L,24),m=0|o(),m=0|ZI((Z=0|vg(0|(u=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|r,0|n)),0|o(),0|L,0|m))^H,(oA=0|o())^u,16)),0|(H=0|o()),0|z,0|Z))^L,(z=0|o())^m,63),L=0|o(),d=0|ZI((N=0|vg(0|($=0|ZI((EA=0|vg(0|(sA=0|vg(0|Y,0|d,0|P,0|R)),0|o(),0|QA,0|EA))^AA,(QA=0|o())^$,32)),0|(AA=0|o()),0|x,0|N))^Y,(x=0|o())^d,24),Y=0|o(),Y=0|ZI((x=0|vg(0|(AA=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|e,0|iA)),0|o(),0|d,0|Y))^$,(EA=0|o())^AA,16)),0|($=0|o()),0|N,0|x))^d,(N=0|o())^Y,63),d=0|o(),O=0|ZI((z=0|vg(0|($=0|ZI(AA^(wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|BA,0|CA)),0|o(),0|W,0|O)),$^(yA=0|o()),32)),0|(AA=0|o()),0|Z,0|z))^W,(Z=0|o())^O,24),W=0|o(),AA=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|tA,0|fA)),0|o(),0|O,0|W))^$,(wA=0|o())^AA,16),$=0|o(),C[E+120>>2]=AA,C[E+120+4>>2]=$,W=0|ZI((Z=0|vg(0|AA,0|$,0|z,0|Z))^O,(z=0|o())^W,63),O=0|o(),L=0|ZI((N=0|vg(0|(K=0|ZI((nA=0|vg(0|(nA=0|vg(0|aA,0|nA,0|p,0|k)),0|o(),0|m,0|L))^X,(aA=0|o())^K,32)),0|(X=0|o()),0|x,0|N))^m,(x=0|o())^L,24),m=0|o(),m=0|ZI((x=0|vg(0|(X=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|_,0|l)),0|o(),0|L,0|m))^K,(nA=0|o())^X,16)),0|(K=0|o()),0|N,0|x))^L,(N=0|o())^m,63),L=0|o(),d=0|ZI((I=0|vg(0|(U=0|ZI((oA=0|vg(0|(oA=0|vg(0|eA,0|oA,0|M,0|v)),0|o(),0|Y,0|d))^S,(eA=0|o())^U,32)),0|(S=0|o()),0|f,0|I))^Y,(f=0|o())^d,24),Y=0|o(),Y=0|ZI((f=0|vg(0|(S=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|IA,0|gA)),0|o(),0|d,0|Y))^U,(oA=0|o())^S,16)),0|(U=0|o()),0|I,0|f))^d,(I=0|o())^Y,63),d=0|o(),D=0|ZI((s=0|vg(0|(H=0|ZI((EA=0|vg(0|(sA=0|vg(0|h,0|D,0|c,0|cA)),0|o(),0|QA,0|EA))^u,(QA=0|o())^H,32)),0|(u=0|o()),0|F,0|s))^h,(F=0|o())^D,24),h=0|o(),h=0|ZI((F=0|vg(0|(u=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|a,0|rA)),0|o(),0|D,0|h))^H,(EA=0|o())^u,16)),0|(H=0|o()),0|s,0|F))^D,(s=0|o())^h,63),D=0|o(),D=0|ZI((I=0|vg(0|(K=0|ZI((wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|M,0|v)),0|o(),0|h,0|D))^X,(yA=0|o())^K,32)),0|(X=0|o()),0|f,0|I))^h,(f=0|o())^D,24),h=0|o(),h=0|ZI((f=0|vg(0|(X=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|c,0|cA)),0|o(),0|D,0|h))^K,(wA=0|o())^X,16)),0|(K=0|o()),0|I,0|f))^D,(I=0|o())^h,63),D=0|o(),C[E+32>>2]=h,C[E+32+4>>2]=D,O=0|ZI((s=0|vg(0|(U=0|ZI(S^(nA=0|vg(0|(sA=0|vg(0|W,0|O,0|p,0|k)),0|o(),0|aA,0|nA)),U^(aA=0|o()),32)),0|(S=0|o()),0|F,0|s))^W,(F=0|o())^O,24),W=0|o(),W=0|ZI((F=0|vg(0|(S=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|IA,0|gA)),0|o(),0|O,0|W))^U,(nA=0|o())^S,16)),0|(U=0|o()),0|s,0|F))^O,(s=0|o())^W,63),O=0|o(),L=0|ZI((z=0|vg(0|(H=0|ZI(u^(oA=0|vg(0|(sA=0|vg(0|m,0|L,0|e,0|iA)),0|o(),0|eA,0|oA)),H^(eA=0|o()),32)),0|(u=0|o()),0|Z,0|z))^m,(Z=0|o())^L,24),m=0|o(),m=0|ZI((Z=0|vg(0|(u=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|t,0|w)),0|o(),0|L,0|m))^H,(oA=0|o())^u,16)),0|(H=0|o()),0|z,0|Z))^L,(z=0|o())^m,63),L=0|o(),d=0|ZI((N=0|vg(0|($=0|ZI((EA=0|vg(0|(sA=0|vg(0|Y,0|d,0|b,0|J)),0|o(),0|QA,0|EA))^AA,(QA=0|o())^$,32)),0|(AA=0|o()),0|x,0|N))^Y,(x=0|o())^d,24),Y=0|o(),Y=0|ZI((x=0|vg(0|(AA=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|tA,0|fA)),0|o(),0|d,0|Y))^$,(EA=0|o())^AA,16)),0|($=0|o()),0|N,0|x))^d,(N=0|o())^Y,63),d=0|o(),O=0|ZI((z=0|vg(0|($=0|ZI(AA^(wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|r,0|n)),0|o(),0|W,0|O)),$^(yA=0|o()),32)),0|(AA=0|o()),0|Z,0|z))^W,(Z=0|o())^O,24),W=0|o(),AA=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|_,0|l)),0|o(),0|O,0|W))^$,(wA=0|o())^AA,16),$=0|o(),C[E+120>>2]=AA,C[E+120+4>>2]=$,W=0|ZI((Z=0|vg(0|AA,0|$,0|z,0|Z))^O,(z=0|o())^W,63),O=0|o(),L=0|ZI((N=0|vg(0|(K=0|ZI((nA=0|vg(0|(nA=0|vg(0|aA,0|nA,0|i,0|G)),0|o(),0|m,0|L))^X,(aA=0|o())^K,32)),0|(X=0|o()),0|x,0|N))^m,(x=0|o())^L,24),m=0|o(),m=0|ZI((x=0|vg(0|(X=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|BA,0|CA)),0|o(),0|L,0|m))^K,(nA=0|o())^X,16)),0|(K=0|o()),0|N,0|x))^L,(N=0|o())^m,63),L=0|o(),d=0|ZI((I=0|vg(0|(U=0|ZI((oA=0|vg(0|(oA=0|vg(0|eA,0|oA,0|a,0|rA)),0|o(),0|Y,0|d))^S,(eA=0|o())^U,32)),0|(S=0|o()),0|f,0|I))^Y,(f=0|o())^d,24),Y=0|o(),Y=0|ZI((f=0|vg(0|(S=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|j,0|T)),0|o(),0|d,0|Y))^U,(oA=0|o())^S,16)),0|(U=0|o()),0|I,0|f))^d,(I=0|o())^Y,63),d=0|o(),D=0|ZI((s=0|vg(0|(H=0|ZI((EA=0|vg(0|(sA=0|vg(0|h,0|D,0|P,0|R)),0|o(),0|QA,0|EA))^u,(QA=0|o())^H,32)),0|(u=0|o()),0|F,0|s))^h,(F=0|o())^D,24),h=0|o(),h=0|ZI((F=0|vg(0|(u=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|q,0|V)),0|o(),0|D,0|h))^H,(EA=0|o())^u,16)),0|(H=0|o()),0|s,0|F))^D,(s=0|o())^h,63),D=0|o(),D=0|ZI((I=0|vg(0|(K=0|ZI((wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|c,0|cA)),0|o(),0|h,0|D))^X,(yA=0|o())^K,32)),0|(X=0|o()),0|f,0|I))^h,(f=0|o())^D,24),h=0|o(),h=0|ZI((f=0|vg(0|(X=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|j,0|T)),0|o(),0|D,0|h))^K,(wA=0|o())^X,16)),0|(K=0|o()),0|I,0|f))^D,(I=0|o())^h,63),D=0|o(),C[E+32>>2]=h,C[E+32+4>>2]=D,O=0|ZI((s=0|vg(0|(U=0|ZI(S^(nA=0|vg(0|(sA=0|vg(0|W,0|O,0|i,0|G)),0|o(),0|aA,0|nA)),U^(aA=0|o()),32)),0|(S=0|o()),0|F,0|s))^W,(F=0|o())^O,24),W=0|o(),W=0|ZI((F=0|vg(0|(S=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|M,0|v)),0|o(),0|O,0|W))^U,(nA=0|o())^S,16)),0|(U=0|o()),0|s,0|F))^O,(s=0|o())^W,63),O=0|o(),L=0|ZI((z=0|vg(0|(H=0|ZI(u^(oA=0|vg(0|(sA=0|vg(0|m,0|L,0|r,0|n)),0|o(),0|eA,0|oA)),H^(eA=0|o()),32)),0|(u=0|o()),0|Z,0|z))^m,(Z=0|o())^L,24),m=0|o(),m=0|ZI((Z=0|vg(0|(u=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|a,0|rA)),0|o(),0|L,0|m))^H,(oA=0|o())^u,16)),0|(H=0|o()),0|z,0|Z))^L,(z=0|o())^m,63),L=0|o(),d=0|ZI((N=0|vg(0|($=0|ZI((EA=0|vg(0|(sA=0|vg(0|Y,0|d,0|BA,0|CA)),0|o(),0|QA,0|EA))^AA,(QA=0|o())^$,32)),0|(AA=0|o()),0|x,0|N))^Y,(x=0|o())^d,24),Y=0|o(),Y=0|ZI((x=0|vg(0|(AA=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|P,0|R)),0|o(),0|d,0|Y))^$,(EA=0|o())^AA,16)),0|($=0|o()),0|N,0|x))^d,(N=0|o())^Y,63),d=0|o(),O=0|ZI((z=0|vg(0|($=0|ZI(AA^(wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|tA,0|fA)),0|o(),0|W,0|O)),$^(yA=0|o()),32)),0|(AA=0|o()),0|Z,0|z))^W,(Z=0|o())^O,24),W=0|o(),AA=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|IA,0|gA)),0|o(),0|O,0|W))^$,(wA=0|o())^AA,16),$=0|o(),C[E+120>>2]=AA,C[E+120+4>>2]=$,W=0|ZI((Z=0|vg(0|AA,0|$,0|z,0|Z))^O,(z=0|o())^W,63),O=0|o(),L=0|ZI((N=0|vg(0|(K=0|ZI((nA=0|vg(0|(nA=0|vg(0|aA,0|nA,0|b,0|J)),0|o(),0|m,0|L))^X,(aA=0|o())^K,32)),0|(X=0|o()),0|x,0|N))^m,(x=0|o())^L,24),m=0|o(),m=0|ZI((x=0|vg(0|(X=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|t,0|w)),0|o(),0|L,0|m))^K,(nA=0|o())^X,16)),0|(K=0|o()),0|N,0|x))^L,(N=0|o())^m,63),L=0|o(),d=0|ZI((I=0|vg(0|(U=0|ZI((oA=0|vg(0|(oA=0|vg(0|eA,0|oA,0|_,0|l)),0|o(),0|Y,0|d))^S,(eA=0|o())^U,32)),0|(S=0|o()),0|f,0|I))^Y,(f=0|o())^d,24),Y=0|o(),Y=0|ZI((f=0|vg(0|(S=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|q,0|V)),0|o(),0|d,0|Y))^U,(oA=0|o())^S,16)),0|(U=0|o()),0|I,0|f))^d,(I=0|o())^Y,63),d=0|o(),D=0|ZI((s=0|vg(0|(H=0|ZI((EA=0|vg(0|(sA=0|vg(0|h,0|D,0|p,0|k)),0|o(),0|QA,0|EA))^u,(QA=0|o())^H,32)),0|(u=0|o()),0|F,0|s))^h,(F=0|o())^D,24),h=0|o(),h=0|ZI((F=0|vg(0|(u=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|e,0|iA)),0|o(),0|D,0|h))^H,(EA=0|o())^u,16)),0|(H=0|o()),0|s,0|F))^D,(s=0|o())^h,63),D=0|o(),D=0|ZI((I=0|vg(0|(K=0|ZI((wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|r,0|n)),0|o(),0|h,0|D))^X,(yA=0|o())^K,32)),0|(X=0|o()),0|f,0|I))^h,(f=0|o())^D,24),h=0|o(),h=0|ZI((f=0|vg(0|(X=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|t,0|w)),0|o(),0|D,0|h))^K,(wA=0|o())^X,16)),0|(K=0|o()),0|I,0|f))^D,(I=0|o())^h,63),D=0|o(),C[E+32>>2]=h,C[E+32+4>>2]=D,O=0|ZI((s=0|vg(0|(U=0|ZI(S^(nA=0|vg(0|(sA=0|vg(0|W,0|O,0|_,0|l)),0|o(),0|aA,0|nA)),U^(aA=0|o()),32)),0|(S=0|o()),0|F,0|s))^W,(F=0|o())^O,24),W=0|o(),W=0|ZI((F=0|vg(0|(S=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|BA,0|CA)),0|o(),0|O,0|W))^U,(nA=0|o())^S,16)),0|(U=0|o()),0|s,0|F))^O,(s=0|o())^W,63),O=0|o(),L=0|ZI((z=0|vg(0|(H=0|ZI(u^(oA=0|vg(0|(sA=0|vg(0|m,0|L,0|j,0|T)),0|o(),0|eA,0|oA)),H^(eA=0|o()),32)),0|(u=0|o()),0|Z,0|z))^m,(Z=0|o())^L,24),m=0|o(),m=0|ZI((Z=0|vg(0|(u=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|b,0|J)),0|o(),0|L,0|m))^H,(oA=0|o())^u,16)),0|(H=0|o()),0|z,0|Z))^L,(z=0|o())^m,63),L=0|o(),d=0|ZI((N=0|vg(0|($=0|ZI((EA=0|vg(0|(sA=0|vg(0|Y,0|d,0|q,0|V)),0|o(),0|QA,0|EA))^AA,(QA=0|o())^$,32)),0|(AA=0|o()),0|x,0|N))^Y,(x=0|o())^d,24),Y=0|o(),Y=0|ZI((x=0|vg(0|(AA=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|p,0|k)),0|o(),0|d,0|Y))^$,(EA=0|o())^AA,16)),0|($=0|o()),0|N,0|x))^d,(N=0|o())^Y,63),d=0|o(),O=0|ZI((z=0|vg(0|($=0|ZI(AA^(wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|a,0|rA)),0|o(),0|W,0|O)),$^(yA=0|o()),32)),0|(AA=0|o()),0|Z,0|z))^W,(Z=0|o())^O,24),W=0|o(),AA=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|e,0|iA)),0|o(),0|O,0|W))^$,(wA=0|o())^AA,16),$=0|o(),C[E+120>>2]=AA,C[E+120+4>>2]=$,W=0|ZI((Z=0|vg(0|AA,0|$,0|z,0|Z))^O,(z=0|o())^W,63),O=0|o(),L=0|ZI((N=0|vg(0|(K=0|ZI((nA=0|vg(0|(nA=0|vg(0|aA,0|nA,0|M,0|v)),0|o(),0|m,0|L))^X,(aA=0|o())^K,32)),0|(X=0|o()),0|x,0|N))^m,(x=0|o())^L,24),m=0|o(),m=0|ZI((x=0|vg(0|(X=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|i,0|G)),0|o(),0|L,0|m))^K,(nA=0|o())^X,16)),0|(K=0|o()),0|N,0|x))^L,(N=0|o())^m,63),L=0|o(),d=0|ZI((I=0|vg(0|(U=0|ZI((oA=0|vg(0|(oA=0|vg(0|eA,0|oA,0|P,0|R)),0|o(),0|Y,0|d))^S,(eA=0|o())^U,32)),0|(S=0|o()),0|f,0|I))^Y,(f=0|o())^d,24),Y=0|o(),Y=0|ZI((f=0|vg(0|(S=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|tA,0|fA)),0|o(),0|d,0|Y))^U,(oA=0|o())^S,16)),0|(U=0|o()),0|I,0|f))^d,(I=0|o())^Y,63),d=0|o(),D=0|ZI((s=0|vg(0|(H=0|ZI((EA=0|vg(0|(sA=0|vg(0|h,0|D,0|IA,0|gA)),0|o(),0|QA,0|EA))^u,(QA=0|o())^H,32)),0|(u=0|o()),0|F,0|s))^h,(F=0|o())^D,24),h=0|o(),h=0|ZI((F=0|vg(0|(u=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|c,0|cA)),0|o(),0|D,0|h))^H,(EA=0|o())^u,16)),0|(H=0|o()),0|s,0|F))^D,(s=0|o())^h,63),D=0|o(),D=0|ZI((I=0|vg(0|(K=0|ZI((wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|t,0|w)),0|o(),0|h,0|D))^X,(yA=0|o())^K,32)),0|(X=0|o()),0|f,0|I))^h,(f=0|o())^D,24),h=0|o(),h=0|ZI((f=0|vg(0|(X=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|i,0|G)),0|o(),0|D,0|h))^K,(wA=0|o())^X,16)),0|(K=0|o()),0|I,0|f))^D,(I=0|o())^h,63),D=0|o(),C[E+32>>2]=h,C[E+32+4>>2]=D,O=0|ZI((s=0|vg(0|(U=0|ZI(S^(nA=0|vg(0|(sA=0|vg(0|W,0|O,0|IA,0|gA)),0|o(),0|aA,0|nA)),U^(aA=0|o()),32)),0|(S=0|o()),0|F,0|s))^W,(F=0|o())^O,24),W=0|o(),W=0|ZI((F=0|vg(0|(S=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|P,0|R)),0|o(),0|O,0|W))^U,(nA=0|o())^S,16)),0|(U=0|o()),0|s,0|F))^O,(s=0|o())^W,63),O=0|o(),L=0|ZI((z=0|vg(0|(H=0|ZI(u^(oA=0|vg(0|(sA=0|vg(0|m,0|L,0|tA,0|fA)),0|o(),0|eA,0|oA)),H^(eA=0|o()),32)),0|(u=0|o()),0|Z,0|z))^m,(Z=0|o())^L,24),m=0|o(),m=0|ZI((Z=0|vg(0|(u=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|e,0|iA)),0|o(),0|L,0|m))^H,(oA=0|o())^u,16)),0|(H=0|o()),0|z,0|Z))^L,(z=0|o())^m,63),L=0|o(),d=0|ZI((N=0|vg(0|($=0|ZI((EA=0|vg(0|(sA=0|vg(0|Y,0|d,0|a,0|rA)),0|o(),0|QA,0|EA))^AA,(QA=0|o())^$,32)),0|(AA=0|o()),0|x,0|N))^Y,(x=0|o())^d,24),Y=0|o(),Y=0|ZI((x=0|vg(0|(AA=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|BA,0|CA)),0|o(),0|d,0|Y))^$,(EA=0|o())^AA,16)),0|($=0|o()),0|N,0|x))^d,(N=0|o())^Y,63),d=0|o(),O=0|ZI((z=0|vg(0|($=0|ZI(AA^(wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|j,0|T)),0|o(),0|W,0|O)),$^(yA=0|o()),32)),0|(AA=0|o()),0|Z,0|z))^W,(Z=0|o())^O,24),W=0|o(),AA=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|M,0|v)),0|o(),0|O,0|W))^$,(wA=0|o())^AA,16),$=0|o(),C[E+120>>2]=AA,C[E+120+4>>2]=$,W=0|ZI((Z=0|vg(0|AA,0|$,0|z,0|Z))^O,(z=0|o())^W,63),O=0|o(),L=0|ZI((N=0|vg(0|(K=0|ZI((nA=0|vg(0|(nA=0|vg(0|aA,0|nA,0|_,0|l)),0|o(),0|m,0|L))^X,(aA=0|o())^K,32)),0|(X=0|o()),0|x,0|N))^m,(x=0|o())^L,24),m=0|o(),m=0|ZI((x=0|vg(0|(X=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|p,0|k)),0|o(),0|L,0|m))^K,(nA=0|o())^X,16)),0|(K=0|o()),0|N,0|x))^L,(N=0|o())^m,63),L=0|o(),d=0|ZI((I=0|vg(0|(U=0|ZI((oA=0|vg(0|(oA=0|vg(0|eA,0|oA,0|c,0|cA)),0|o(),0|Y,0|d))^S,(eA=0|o())^U,32)),0|(S=0|o()),0|f,0|I))^Y,(f=0|o())^d,24),Y=0|o(),Y=0|ZI((f=0|vg(0|(S=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|r,0|n)),0|o(),0|d,0|Y))^U,(oA=0|o())^S,16)),0|(U=0|o()),0|I,0|f))^d,(I=0|o())^Y,63),d=0|o(),D=0|ZI((s=0|vg(0|(H=0|ZI((EA=0|vg(0|(sA=0|vg(0|h,0|D,0|q,0|V)),0|o(),0|QA,0|EA))^u,(QA=0|o())^H,32)),0|(u=0|o()),0|F,0|s))^h,(F=0|o())^D,24),h=0|o(),h=0|ZI((F=0|vg(0|(u=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|b,0|J)),0|o(),0|D,0|h))^H,(EA=0|o())^u,16)),0|(H=0|o()),0|s,0|F))^D,(s=0|o())^h,63),D=0|o(),D=0|ZI((I=0|vg(0|(K=0|ZI((wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|e,0|iA)),0|o(),0|h,0|D))^X,(yA=0|o())^K,32)),0|(X=0|o()),0|f,0|I))^h,(f=0|o())^D,24),h=0|o(),h=0|ZI((f=0|vg(0|(X=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|b,0|J)),0|o(),0|D,0|h))^K,(wA=0|o())^X,16)),0|(K=0|o()),0|I,0|f))^D,(I=0|o())^h,63),D=0|o(),C[E+32>>2]=h,C[E+32+4>>2]=D,O=0|ZI((s=0|vg(0|(U=0|ZI(S^(nA=0|vg(0|(sA=0|vg(0|W,0|O,0|M,0|v)),0|o(),0|aA,0|nA)),U^(aA=0|o()),32)),0|(S=0|o()),0|F,0|s))^W,(F=0|o())^O,24),W=0|o(),W=0|ZI((F=0|vg(0|(S=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|tA,0|fA)),0|o(),0|O,0|W))^U,(nA=0|o())^S,16)),0|(U=0|o()),0|s,0|F))^O,(s=0|o())^W,63),O=0|o(),L=0|ZI((z=0|vg(0|(H=0|ZI(u^(oA=0|vg(0|(sA=0|vg(0|m,0|L,0|t,0|w)),0|o(),0|eA,0|oA)),H^(eA=0|o()),32)),0|(u=0|o()),0|Z,0|z))^m,(Z=0|o())^L,24),m=0|o(),m=0|ZI((Z=0|vg(0|(u=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|IA,0|gA)),0|o(),0|L,0|m))^H,(oA=0|o())^u,16)),0|(H=0|o()),0|z,0|Z))^L,(z=0|o())^m,63),L=0|o(),d=0|ZI((N=0|vg(0|($=0|ZI((EA=0|vg(0|(sA=0|vg(0|Y,0|d,0|p,0|k)),0|o(),0|QA,0|EA))^AA,(QA=0|o())^$,32)),0|(AA=0|o()),0|x,0|N))^Y,(x=0|o())^d,24),Y=0|o(),Y=0|ZI((x=0|vg(0|(AA=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|c,0|cA)),0|o(),0|d,0|Y))^$,(EA=0|o())^AA,16)),0|($=0|o()),0|N,0|x))^d,(N=0|o())^Y,63),d=0|o(),O=0|ZI((z=0|vg(0|($=0|ZI(AA^(wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|i,0|G)),0|o(),0|W,0|O)),$^(yA=0|o()),32)),0|(AA=0|o()),0|Z,0|z))^W,(Z=0|o())^O,24),W=0|o(),AA=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|j,0|T)),0|o(),0|O,0|W))^$,(wA=0|o())^AA,16),$=0|o(),C[E+120>>2]=AA,C[E+120+4>>2]=$,W=0|ZI((Z=0|vg(0|AA,0|$,0|z,0|Z))^O,(z=0|o())^W,63),O=0|o(),L=0|ZI((N=0|vg(0|(K=0|ZI((nA=0|vg(0|(nA=0|vg(0|aA,0|nA,0|P,0|R)),0|o(),0|m,0|L))^X,(aA=0|o())^K,32)),0|(X=0|o()),0|x,0|N))^m,(x=0|o())^L,24),m=0|o(),m=0|ZI((x=0|vg(0|(X=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|a,0|rA)),0|o(),0|L,0|m))^K,(nA=0|o())^X,16)),0|(K=0|o()),0|N,0|x))^L,(N=0|o())^m,63),L=0|o(),d=0|ZI((I=0|vg(0|(U=0|ZI((oA=0|vg(0|(oA=0|vg(0|eA,0|oA,0|q,0|V)),0|o(),0|Y,0|d))^S,(eA=0|o())^U,32)),0|(S=0|o()),0|f,0|I))^Y,(f=0|o())^d,24),Y=0|o(),Y=0|ZI((f=0|vg(0|(S=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|_,0|l)),0|o(),0|d,0|Y))^U,(oA=0|o())^S,16)),0|(U=0|o()),0|I,0|f))^d,(I=0|o())^Y,63),d=0|o(),D=0|ZI((s=0|vg(0|(H=0|ZI((EA=0|vg(0|(sA=0|vg(0|h,0|D,0|r,0|n)),0|o(),0|QA,0|EA))^u,(QA=0|o())^H,32)),0|(u=0|o()),0|F,0|s))^h,(F=0|o())^D,24),h=0|o(),h=0|ZI((F=0|vg(0|(u=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|BA,0|CA)),0|o(),0|D,0|h))^H,(EA=0|o())^u,16)),0|(H=0|o()),0|s,0|F))^D,(s=0|o())^h,63),D=0|o(),D=0|ZI((I=0|vg(0|(K=0|ZI((wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|_,0|l)),0|o(),0|h,0|D))^X,(yA=0|o())^K,32)),0|(X=0|o()),0|f,0|I))^h,(f=0|o())^D,24),h=0|o(),h=0|ZI((f=0|vg(0|(X=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|P,0|R)),0|o(),0|D,0|h))^K,(wA=0|o())^X,16)),0|(K=0|o()),0|I,0|f))^D,(I=0|o())^h,63),D=0|o(),C[E+32>>2]=h,C[E+32+4>>2]=D,O=0|ZI((s=0|vg(0|(U=0|ZI(S^(nA=0|vg(0|(sA=0|vg(0|W,0|O,0|tA,0|fA)),0|o(),0|aA,0|nA)),U^(aA=0|o()),32)),0|(S=0|o()),0|F,0|s))^W,(F=0|o())^O,24),W=0|o(),W=0|ZI((F=0|vg(0|(S=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|c,0|cA)),0|o(),0|O,0|W))^U,(nA=0|o())^S,16)),0|(U=0|o()),0|s,0|F))^O,(s=0|o())^W,63),O=0|o(),L=0|ZI((z=0|vg(0|(H=0|ZI(u^(oA=0|vg(0|(sA=0|vg(0|m,0|L,0|b,0|J)),0|o(),0|eA,0|oA)),H^(eA=0|o()),32)),0|(u=0|o()),0|Z,0|z))^m,(Z=0|o())^L,24),m=0|o(),m=0|ZI((Z=0|vg(0|(u=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|p,0|k)),0|o(),0|L,0|m))^H,(oA=0|o())^u,16)),0|(H=0|o()),0|z,0|Z))^L,(z=0|o())^m,63),L=0|o(),d=0|ZI((N=0|vg(0|($=0|ZI((EA=0|vg(0|(sA=0|vg(0|Y,0|d,0|j,0|T)),0|o(),0|QA,0|EA))^AA,(QA=0|o())^$,32)),0|(AA=0|o()),0|x,0|N))^Y,(x=0|o())^d,24),Y=0|o(),Y=0|ZI((x=0|vg(0|(AA=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|q,0|V)),0|o(),0|d,0|Y))^$,(EA=0|o())^AA,16)),0|($=0|o()),0|N,0|x))^d,(N=0|o())^Y,63),d=0|o(),O=0|ZI((z=0|vg(0|($=0|ZI(AA^(wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|t,0|w)),0|o(),0|W,0|O)),$^(yA=0|o()),32)),0|(AA=0|o()),0|Z,0|z))^W,(Z=0|o())^O,24),W=0|o(),AA=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|r,0|n)),0|o(),0|O,0|W))^$,(wA=0|o())^AA,16),$=0|o(),C[E+120>>2]=AA,C[E+120+4>>2]=$,W=0|ZI((Z=0|vg(0|AA,0|$,0|z,0|Z))^O,(z=0|o())^W,63),O=0|o(),L=0|ZI((N=0|vg(0|(K=0|ZI((nA=0|vg(0|(nA=0|vg(0|aA,0|nA,0|e,0|iA)),0|o(),0|m,0|L))^X,(aA=0|o())^K,32)),0|(X=0|o()),0|x,0|N))^m,(x=0|o())^L,24),m=0|o(),m=0|ZI((x=0|vg(0|(X=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|M,0|v)),0|o(),0|L,0|m))^K,(nA=0|o())^X,16)),0|(K=0|o()),0|N,0|x))^L,(N=0|o())^m,63),L=0|o(),d=0|ZI((I=0|vg(0|(U=0|ZI((oA=0|vg(0|(oA=0|vg(0|eA,0|oA,0|IA,0|gA)),0|o(),0|Y,0|d))^S,(eA=0|o())^U,32)),0|(S=0|o()),0|f,0|I))^Y,(f=0|o())^d,24),Y=0|o(),Y=0|ZI((f=0|vg(0|(S=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|a,0|rA)),0|o(),0|d,0|Y))^U,(oA=0|o())^S,16)),0|(U=0|o()),0|I,0|f))^d,(I=0|o())^Y,63),d=0|o(),D=0|ZI((s=0|vg(0|(H=0|ZI((EA=0|vg(0|(sA=0|vg(0|h,0|D,0|BA,0|CA)),0|o(),0|QA,0|EA))^u,(QA=0|o())^H,32)),0|(u=0|o()),0|F,0|s))^h,(F=0|o())^D,24),h=0|o(),h=0|ZI((F=0|vg(0|(u=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|i,0|G)),0|o(),0|D,0|h))^H,(EA=0|o())^u,16)),0|(H=0|o()),0|s,0|F))^D,(s=0|o())^h,63),D=0|o(),D=0|ZI((I=0|vg(0|(K=0|ZI((wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|BA,0|CA)),0|o(),0|h,0|D))^X,(yA=0|o())^K,32)),0|(X=0|o()),0|f,0|I))^h,(f=0|o())^D,24),h=0|o(),h=0|ZI((f=0|vg(0|(X=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|r,0|n)),0|o(),0|D,0|h))^K,(wA=0|o())^X,16)),0|(K=0|o()),0|I,0|f))^D,(I=0|o())^h,63),D=0|o(),C[E+32>>2]=h,C[E+32+4>>2]=D,O=0|ZI((s=0|vg(0|(U=0|ZI(S^(nA=0|vg(0|(sA=0|vg(0|W,0|O,0|q,0|V)),0|o(),0|aA,0|nA)),U^(aA=0|o()),32)),0|(S=0|o()),0|F,0|s))^W,(F=0|o())^O,24),W=0|o(),W=0|ZI((F=0|vg(0|(S=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|a,0|rA)),0|o(),0|O,0|W))^U,(nA=0|o())^S,16)),0|(U=0|o()),0|s,0|F))^O,(s=0|o())^W,63),O=0|o(),L=0|ZI((z=0|vg(0|(H=0|ZI(u^(oA=0|vg(0|(sA=0|vg(0|m,0|L,0|M,0|v)),0|o(),0|eA,0|oA)),H^(eA=0|o()),32)),0|(u=0|o()),0|Z,0|z))^m,(Z=0|o())^L,24),m=0|o(),m=0|ZI((Z=0|vg(0|(u=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|_,0|l)),0|o(),0|L,0|m))^H,(oA=0|o())^u,16)),0|(H=0|o()),0|z,0|Z))^L,(z=0|o())^m,63),L=0|o(),d=0|ZI((N=0|vg(0|($=0|ZI((EA=0|vg(0|(sA=0|vg(0|Y,0|d,0|IA,0|gA)),0|o(),0|QA,0|EA))^AA,(QA=0|o())^$,32)),0|(AA=0|o()),0|x,0|N))^Y,(x=0|o())^d,24),Y=0|o(),Y=0|ZI((x=0|vg(0|(AA=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|i,0|G)),0|o(),0|d,0|Y))^$,(EA=0|o())^AA,16)),0|($=0|o()),0|N,0|x))^d,(N=0|o())^Y,63),d=0|o(),O=0|ZI((z=0|vg(0|($=0|ZI(AA^(wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|P,0|R)),0|o(),0|W,0|O)),$^(yA=0|o()),32)),0|(AA=0|o()),0|Z,0|z))^W,(Z=0|o())^O,24),W=0|o(),AA=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|b,0|J)),0|o(),0|O,0|W))^$,(wA=0|o())^AA,16),$=0|o(),C[E+120>>2]=AA,C[E+120+4>>2]=$,W=0|ZI((Z=0|vg(0|AA,0|$,0|z,0|Z))^O,(z=0|o())^W,63),O=0|o(),L=0|ZI((N=0|vg(0|(K=0|ZI((nA=0|vg(0|(nA=0|vg(0|aA,0|nA,0|c,0|cA)),0|o(),0|m,0|L))^X,(aA=0|o())^K,32)),0|(X=0|o()),0|x,0|N))^m,(x=0|o())^L,24),m=0|o(),m=0|ZI((x=0|vg(0|(X=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|tA,0|fA)),0|o(),0|L,0|m))^K,(nA=0|o())^X,16)),0|(K=0|o()),0|N,0|x))^L,(N=0|o())^m,63),L=0|o(),d=0|ZI((I=0|vg(0|(U=0|ZI((oA=0|vg(0|(oA=0|vg(0|eA,0|oA,0|p,0|k)),0|o(),0|Y,0|d))^S,(eA=0|o())^U,32)),0|(S=0|o()),0|f,0|I))^Y,(f=0|o())^d,24),Y=0|o(),Y=0|ZI((f=0|vg(0|(S=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|t,0|w)),0|o(),0|d,0|Y))^U,(oA=0|o())^S,16)),0|(U=0|o()),0|I,0|f))^d,(I=0|o())^Y,63),d=0|o(),D=0|ZI((s=0|vg(0|(H=0|ZI((EA=0|vg(0|(sA=0|vg(0|h,0|D,0|e,0|iA)),0|o(),0|QA,0|EA))^u,(QA=0|o())^H,32)),0|(u=0|o()),0|F,0|s))^h,(F=0|o())^D,24),h=0|o(),h=0|ZI((F=0|vg(0|(u=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|j,0|T)),0|o(),0|D,0|h))^H,(EA=0|o())^u,16)),0|(H=0|o()),0|s,0|F))^D,(s=0|o())^h,63),D=0|o(),D=0|ZI((I=0|vg(0|(K=0|ZI((wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|j,0|T)),0|o(),0|h,0|D))^X,(yA=0|o())^K,32)),0|(X=0|o()),0|f,0|I))^h,(f=0|o())^D,24),h=0|o(),h=0|ZI((f=0|vg(0|(X=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|IA,0|gA)),0|o(),0|D,0|h))^K,(wA=0|o())^X,16)),0|(K=0|o()),0|I,0|f))^D,(I=0|o())^h,63),D=0|o(),C[E+32>>2]=h,C[E+32+4>>2]=D,O=0|ZI((s=0|vg(0|(U=0|ZI(S^(nA=0|vg(0|(sA=0|vg(0|W,0|O,0|r,0|n)),0|o(),0|aA,0|nA)),U^(aA=0|o()),32)),0|(S=0|o()),0|F,0|s))^W,(F=0|o())^O,24),W=0|o(),W=0|ZI((F=0|vg(0|(S=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|p,0|k)),0|o(),0|O,0|W))^U,(nA=0|o())^S,16)),0|(U=0|o()),0|s,0|F))^O,(s=0|o())^W,63),O=0|o(),L=0|ZI((z=0|vg(0|(H=0|ZI(u^(oA=0|vg(0|(sA=0|vg(0|m,0|L,0|a,0|rA)),0|o(),0|eA,0|oA)),H^(eA=0|o()),32)),0|(u=0|o()),0|Z,0|z))^m,(Z=0|o())^L,24),m=0|o(),m=0|ZI((Z=0|vg(0|(u=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|i,0|G)),0|o(),0|L,0|m))^H,(oA=0|o())^u,16)),0|(H=0|o()),0|z,0|Z))^L,(z=0|o())^m,63),L=0|o(),d=0|ZI((N=0|vg(0|($=0|ZI((EA=0|vg(0|(sA=0|vg(0|Y,0|d,0|_,0|l)),0|o(),0|QA,0|EA))^AA,(QA=0|o())^$,32)),0|(AA=0|o()),0|x,0|N))^Y,(x=0|o())^d,24),Y=0|o(),Y=0|ZI((x=0|vg(0|(AA=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|M,0|v)),0|o(),0|d,0|Y))^$,(EA=0|o())^AA,16)),0|($=0|o()),0|N,0|x))^d,(N=0|o())^Y,63),d=0|o(),O=0|ZI((z=0|vg(0|($=0|ZI(AA^(wA=0|vg(0|(wA=0|vg(0|yA,0|wA,0|q,0|V)),0|o(),0|W,0|O)),$^(yA=0|o()),32)),0|(AA=0|o()),0|Z,0|z))^W,(Z=0|o())^O,24),W=0|o(),AA=0|ZI((yA=0|vg(0|(yA=0|vg(0|wA,0|yA,0|c,0|cA)),0|o(),0|O,0|W))^$,(wA=0|o())^AA,16),$=0|o(),C[E+120>>2]=AA,C[E+120+4>>2]=$,W=0|ZI((Z=0|vg(0|AA,0|$,0|z,0|Z))^O,(z=0|o())^W,63),O=0|o(),L=0|ZI((N=0|vg(0|(K=0|ZI((nA=0|vg(0|(nA=0|vg(0|aA,0|nA,0|BA,0|CA)),0|o(),0|m,0|L))^X,(aA=0|o())^K,32)),0|(X=0|o()),0|x,0|N))^m,(x=0|o())^L,24),m=0|o(),m=0|ZI((x=0|vg(0|(X=0|ZI((aA=0|vg(0|(aA=0|vg(0|nA,0|aA,0|b,0|J)),0|o(),0|L,0|m))^K,(nA=0|o())^X,16)),0|(K=0|o()),0|N,0|x))^L,(N=0|o())^m,63),L=0|o(),d=0|ZI((I=0|vg(0|(U=0|ZI((oA=0|vg(0|(oA=0|vg(0|eA,0|oA,0|t,0|w)),0|o(),0|Y,0|d))^S,(eA=0|o())^U,32)),0|(S=0|o()),0|f,0|I))^Y,(f=0|o())^d,24),Y=0|o(),Y=0|ZI((f=0|vg(0|(S=0|ZI((eA=0|vg(0|(eA=0|vg(0|oA,0|eA,0|e,0|iA)),0|o(),0|d,0|Y))^U,(oA=0|o())^S,16)),0|(U=0|o()),0|I,0|f))^d,(I=0|o())^Y,63),d=0|o(),D=0|ZI((s=0|vg(0|(H=0|ZI((EA=0|vg(0|(sA=0|vg(0|h,0|D,0|tA,0|fA)),0|o(),0|QA,0|EA))^u,(QA=0|o())^H,32)),0|(u=0|o()),0|F,0|s))^h,(F=0|o())^D,24),h=0|o(),h=0|ZI((F=0|vg(0|(u=0|ZI((QA=0|vg(0|(QA=0|vg(0|EA,0|QA,0|P,0|R)),0|o(),0|D,0|h))^H,(EA=0|o())^u,16)),0|(H=0|o()),0|s,0|F))^D,(s=0|o())^h,63),D=0|o(),D=0|ZI((I=0|vg(0|(K=0|ZI((fA=0|vg(0|(fA=0|vg(0|yA,0|wA,0|tA,0|fA)),0|o(),0|h,0|D))^X,(tA=0|o())^K,32)),0|(X=0|o()),0|f,0|I))^h,(f=0|o())^D,24),h=0|o(),h=0|ZI((f=0|vg(0|(X=0|ZI((CA=0|vg(0|(CA=0|vg(0|fA,0|tA,0|BA,0|CA)),0|o(),0|D,0|h))^K,(BA=0|o())^X,16)),0|(K=0|o()),0|I,0|f))^D,(I=0|o())^h,63),D=0|o(),C[E+32>>2]=h,C[E+32+4>>2]=D,O=0|ZI((s=0|vg(0|(U=0|ZI(S^(nA=0|vg(0|(rA=0|vg(0|W,0|O,0|a,0|rA)),0|o(),0|aA,0|nA)),U^(aA=0|o()),32)),0|(S=0|o()),0|F,0|s))^W,(F=0|o())^O,24),W=0|o(),W=0|ZI((F=0|vg(0|(S=0|ZI((V=0|vg(0|(V=0|vg(0|nA,0|aA,0|q,0|V)),0|o(),0|O,0|W))^U,(q=0|o())^S,16)),0|(U=0|o()),0|s,0|F))^O,(s=0|o())^W,63),O=0|o(),L=0|ZI((z=0|vg(0|(H=0|ZI(u^(oA=0|vg(0|(cA=0|vg(0|m,0|L,0|c,0|cA)),0|o(),0|eA,0|oA)),H^(eA=0|o()),32)),0|(u=0|o()),0|Z,0|z))^m,(Z=0|o())^L,24),m=0|o(),m=0|ZI((Z=0|vg(0|(u=0|ZI((R=0|vg(0|(R=0|vg(0|oA,0|eA,0|P,0|R)),0|o(),0|L,0|m))^H,(P=0|o())^u,16)),0|(H=0|o()),0|z,0|Z))^L,(z=0|o())^m,63),L=0|o(),d=0|ZI((N=0|vg(0|($=0|ZI((EA=0|vg(0|(iA=0|vg(0|Y,0|d,0|e,0|iA)),0|o(),0|QA,0|EA))^AA,(QA=0|o())^$,32)),0|(AA=0|o()),0|x,0|N))^Y,(x=0|o())^d,24),Y=0|o(),Y=0|ZI((x=0|vg(0|(AA=0|ZI((l=0|vg(0|(l=0|vg(0|EA,0|QA,0|_,0|l)),0|o(),0|d,0|Y))^$,(_=0|o())^AA,16)),0|($=0|o()),0|N,0|x))^d,(N=0|o())^Y,63),d=0|o(),O=0|ZI((z=0|vg(0|($=0|ZI(AA^(gA=0|vg(0|(gA=0|vg(0|CA,0|BA,0|IA,0|gA)),0|o(),0|W,0|O)),$^(IA=0|o()),32)),0|(AA=0|o()),0|Z,0|z))^W,(Z=0|o())^O,24),W=0|o(),w=0|vg(0|(w=0|vg(0|gA,0|IA,0|t,0|w)),0|o(),0|O,0|W),t=0|o(),C[E>>2]=w,C[E+4>>2]=t,AA=0|ZI(w^$,t^AA,16),$=0|o(),C[E+120>>2]=AA,C[E+120+4>>2]=$,Z=0|vg(0|AA,0|$,0|z,0|Z),z=0|o(),C[E+80>>2]=Z,C[E+80+4>>2]=z,W=0|ZI(Z^O,z^W,63),z=0|o(),C[E+40>>2]=W,C[E+40+4>>2]=z,L=0|ZI((N=0|vg(0|(K=0|ZI((T=0|vg(0|(T=0|vg(0|V,0|q,0|j,0|T)),0|o(),0|m,0|L))^X,(j=0|o())^K,32)),0|(X=0|o()),0|x,0|N))^m,(x=0|o())^L,24),m=0|o(),n=0|vg(0|(n=0|vg(0|T,0|j,0|r,0|n)),0|o(),0|L,0|m),r=0|o(),C[E+8>>2]=n,C[E+8+4>>2]=r,X=0|ZI(n^K,r^X,16),K=0|o(),C[E+96>>2]=X,C[E+96+4>>2]=K,x=0|vg(0|X,0|K,0|N,0|x),N=0|o(),C[E+88>>2]=x,C[E+88+4>>2]=N,m=0|ZI(x^L,N^m,63),N=0|o(),C[E+48>>2]=m,C[E+48+4>>2]=N,d=0|ZI((I=0|vg(0|(U=0|ZI((J=0|vg(0|(J=0|vg(0|R,0|P,0|b,0|J)),0|o(),0|Y,0|d))^S,(b=0|o())^U,32)),0|(S=0|o()),0|f,0|I))^Y,(f=0|o())^d,24),Y=0|o(),v=0|vg(0|(v=0|vg(0|J,0|b,0|M,0|v)),0|o(),0|d,0|Y),M=0|o(),C[E+16>>2]=v,C[E+16+4>>2]=M,S=0|ZI(v^U,M^S,16),M=0|o(),C[E+104>>2]=S,C[E+104+4>>2]=M,f=0|vg(0|S,0|M,0|I,0|f),I=0|o(),C[E+64>>2]=f,C[E+64+4>>2]=I,Y=0|ZI(f^d,I^Y,63),d=0|o(),C[E+56>>2]=Y,C[E+56+4>>2]=d,D=0|ZI((s=0|vg(0|(H=0|ZI((_=0|vg(0|(G=0|vg(0|h,0|D,0|i,0|G)),0|o(),0|l,0|_))^u,(l=0|o())^H,32)),0|(u=0|o()),0|F,0|s))^h,(F=0|o())^D,24),h=0|o(),k=0|vg(0|(k=0|vg(0|_,0|l,0|p,0|k)),0|o(),0|D,0|h),p=0|o(),C[E+24>>2]=k,C[E+24+4>>2]=p,u=0|ZI(k^H,p^u,16),p=0|o(),C[E+112>>2]=u,C[E+112+4>>2]=p,F=0|vg(0|u,0|p,0|s,0|F),s=0|o(),C[E+72>>2]=F,C[E+72+4>>2]=s,h=0|ZI(F^D,s^h,63),s=0|o(),C[E+32>>2]=h,C[E+32+4>>2]=s,f=w^(Q[A>>0]|Q[A+1>>0]<<8|Q[A+2>>0]<<16|Q[A+3>>0]<<24)^f,I=t^(Q[A+4>>0]|Q[A+4+1>>0]<<8|Q[A+4+2>>0]<<16|Q[A+4+3>>0]<<24)^I,B[A>>0]=f,B[A+1>>0]=f>>8,B[A+2>>0]=f>>16,B[A+3>>0]=f>>24,B[A+4>>0]=I,B[A+4+1>>0]=I>>8,B[A+4+2>>0]=I>>16,B[A+4+3>>0]=I>>24,I=1;yA=E+(I+8<<3)|0,wA=n^(Q[(sA=A+(I<<3)|0)>>0]|Q[sA+1>>0]<<8|Q[sA+2>>0]<<16|Q[sA+3>>0]<<24)^C[yA>>2],yA=r^(Q[sA+4>>0]|Q[sA+4+1>>0]<<8|Q[sA+4+2>>0]<<16|Q[sA+4+3>>0]<<24)^C[yA+4>>2],B[sA>>0]=wA,B[sA+1>>0]=wA>>8,B[sA+2>>0]=wA>>16,B[sA+3>>0]=wA>>24,B[sA+4>>0]=yA,B[sA+4+1>>0]=yA>>8,B[sA+4+2>>0]=yA>>16,B[sA+4+3>>0]=yA>>24,8!=(0|(I=I+1|0));)n=0|C[E+(I<<3)>>2],r=0|C[E+(I<<3)+4>>2];y=g}function h(A,I,g,C){A|=0,g|=0,C|=0;var Q,E,i,e,c,a,n,r,t,f,w,y,s,h,D,F,p,u,H,k,l,_=0,G=0,d=0,Y=0,M=0,S=0,U=0,v=0,b=0,J=0,P=0,R=0,N=0,m=0,L=0,x=0,K=0,X=0,j=0,T=0,q=0,V=0,z=0,W=0,O=0,Z=0,$=0,AA=0,IA=0,gA=0,BA=0,CA=0,QA=0,EA=0,iA=0,eA=0,oA=0,cA=0,aA=0,nA=0,rA=0,tA=0,fA=0,wA=0,yA=0,sA=0,hA=0,DA=0,FA=0,pA=0,uA=0,HA=0,kA=0,lA=0,_A=0,GA=0,dA=0,YA=0,MA=0,SA=0,UA=0,vA=0,bA=0,JA=0,PA=0,RA=0,NA=0,mA=0,LA=0,xA=0,KA=0,XA=0,jA=0,TA=0,qA=0,VA=0,zA=0,WA=0,OA=0,ZA=0,$A=0,AI=0,II=0,gI=0,BI=0,CI=0,QI=0,EI=0,iI=0,eI=0,oI=0,cI=0,aI=0,nI=0,rI=0,tI=0,fI=0,wI=0,yI=0,sI=0,hI=0,DI=0,FI=0,pI=0,uI=0,HI=0,lI=0,_I=0,GI=0,dI=0,YI=0,MI=0,SI=0,UI=0,vI=0,bI=0,JI=0,PI=0,RI=0,NI=0,mI=0,LI=0,xI=0,KI=0,XI=0,jI=0,TI=0,qI=0,VI=0,zI=0,WI=0,OI=0,ZI=0,$I=0,Ag=0,Ig=0,gg=0,Cg=0,Eg=0,eg=0,og=0,cg=0,ag=0,ng=0,tg=0,fg=0,wg=0,sg=0,hg=0,Dg=0,Fg=0,pg=0,ug=0;wA=0|Bg(0|B[(I|=0)>>0],0|B[I+1>>0],0|B[I+2>>0]),o(),UI=0|yg(0|(UI=0|kI(I+2|0)),0|o(),5),o(),uI=0|yg(0|(uI=0|Bg(0|B[I+5>>0],0|B[I+6>>0],0|B[I+7>>0])),0|o(),2),o(),SI=0|yg(0|(SI=0|kI(I+7|0)),0|o(),7),o(),yI=0|yg(0|(yI=0|kI(I+10|0)),0|o(),4),o(),CA=0|yg(0|(CA=0|Bg(0|B[I+13>>0],0|B[I+14>>0],0|B[I+15>>0])),0|o(),1),o(),FA=0|yg(0|(FA=0|kI(I+15|0)),0|o(),6),o(),_=0|yg(0|(_=0|Bg(0|B[I+18>>0],0|B[I+19>>0],0|B[I+20>>0])),0|o(),3),o(),QA=0|Bg(0|B[I+21>>0],0|B[I+22>>0],0|B[I+23>>0]),o(),q=0|yg(0|(q=0|kI(I+23|0)),0|o(),5),o(),HA=0|yg(0|(HA=0|Bg(0|B[I+26>>0],0|B[I+27>>0],0|B[I+28>>0])),0|o(),2),o(),GA=0|yg(0|(GA=0|kI(I+28|0)),0|o(),7),dA=0|o(),XI=0|Bg(0|B[g>>0],0|B[g+1>>0],0|B[g+2>>0]),o(),hI=0|yg(0|(hI=0|kI(g+2|0)),0|o(),5),o(),gI=0|yg(0|(gI=0|Bg(0|B[g+5>>0],0|B[g+6>>0],0|B[g+7>>0])),0|o(),2),o(),G=0|yg(0|(G=0|kI(g+7|0)),0|o(),7),o(),d=0|yg(0|(d=0|kI(g+10|0)),0|o(),4),o(),x=0|yg(0|(x=0|Bg(0|B[g+13>>0],0|B[g+14>>0],0|B[g+15>>0])),0|o(),1),o(),zA=0|yg(0|(zA=0|kI(g+15|0)),0|o(),6),o(),sA=0|yg(0|(sA=0|Bg(0|B[g+18>>0],0|B[g+19>>0],0|B[g+20>>0])),0|o(),3),o(),RA=0|Bg(0|B[g+21>>0],0|B[g+22>>0],0|B[g+23>>0]),o(),IA=0|yg(0|(IA=0|kI(g+23|0)),0|o(),5),o(),NI=0|yg(0|(NI=0|Bg(0|B[g+26>>0],0|B[g+27>>0],0|B[g+28>>0])),0|o(),2),o(),rA=0|yg(0|(rA=0|kI(g+28|0)),0|o(),7),nA=0|o(),LA=0|Bg(0|B[C>>0],0|B[C+1>>0],0|B[C+2>>0]),o(),BA=0|yg(0|(BA=0|kI(C+2|0)),0|o(),5),o(),KA=0|yg(0|(KA=0|Bg(0|B[C+5>>0],0|B[C+6>>0],0|B[C+7>>0])),0|o(),2),o(),bA=0|yg(0|(bA=0|kI(C+7|0)),0|o(),7),o(),PA=0|yg(0|(PA=0|kI(C+10|0)),0|o(),4),o(),WA=0|yg(0|(WA=0|Bg(0|B[C+13>>0],0|B[C+14>>0],0|B[C+15>>0])),0|o(),1),o(),_I=0|yg(0|(_I=0|kI(C+15|0)),0|o(),6),o(),U=0|yg(0|(U=0|Bg(0|B[C+18>>0],0|B[C+19>>0],0|B[C+20>>0])),0|o(),3),o(),cI=0|Bg(0|B[C+21>>0],0|B[C+22>>0],0|B[C+23>>0]),o(),TA=0|yg(0|(TA=0|kI(C+23|0)),0|o(),5),o(),tA=0|yg(0|(tA=0|Bg(0|B[C+26>>0],0|B[C+27>>0],0|B[C+28>>0])),0|o(),2),o(),FI=0|yg(0|(FI=0|kI(C+28|0)),0|o(),7),GI=0|o(),mA=0|vg(2097151&LA|0,0,0|(mA=0|Qg(2097151&XI|0,0,2097151&wA|0,0)),0|o()),LA=0|o(),F=0|Qg(2097151&hI|0,0,2097151&wA|0,0),D=0|o(),h=0|Qg(2097151&XI|0,0,2097151&UI|0,0),$A=0|o(),Z=0|Qg(2097151&gI|0,0,2097151&wA|0,0),xA=0|o(),KA=0|vg(0|(xA=0|vg(0|(vA=0|vg(0|(O=0|Qg(2097151&hI|0,0,2097151&UI|0,0)),0|o(),0|(vA=0|Qg(2097151&XI|0,0,2097151&uI|0,0)),0|o())),0|o(),0|Z,0|xA)),0|o(),2097151&KA|0,0),xA=0|o(),Z=0|Qg(2097151&G|0,0,2097151&wA|0,0),vA=0|o(),l=0|Qg(2097151&gI|0,0,2097151&UI|0,0),O=0|o(),s=0|Qg(2097151&hI|0,0,2097151&uI|0,0),y=0|o(),w=0|Qg(2097151&XI|0,0,2097151&SI|0,0),ug=0|o(),aA=0|Qg(2097151&d|0,0,2097151&wA|0,0),JA=0|o(),sg=0|Qg(2097151&G|0,0,2097151&UI|0,0),OA=0|o(),Dg=0|Qg(2097151&gI|0,0,2097151&uI|0,0),P=0|o(),PA=0|vg(0|(JA=0|vg(0|(OA=0|vg(0|(P=0|vg(0|(hg=0|vg(0|(Fg=0|Qg(2097151&hI|0,0,2097151&SI|0,0)),0|o(),0|(hg=0|Qg(2097151&XI|0,0,2097151&yI|0,0)),0|o())),0|o(),0|Dg,0|P)),0|o(),0|sg,0|OA)),0|o(),0|aA,0|JA)),0|o(),2097151&PA|0,0),JA=0|o(),aA=0|Qg(2097151&x|0,0,2097151&wA|0,0),OA=0|o(),sg=0|Qg(2097151&d|0,0,2097151&UI|0,0),P=0|o(),Dg=0|Qg(2097151&G|0,0,2097151&uI|0,0),hg=0|o(),k=0|Qg(2097151&gI|0,0,2097151&SI|0,0),Fg=0|o(),f=0|Qg(2097151&hI|0,0,2097151&yI|0,0),t=0|o(),r=0|Qg(2097151&XI|0,0,2097151&CA|0,0),pg=0|o(),I=0|Qg(2097151&zA|0,0,2097151&wA|0,0),DI=0|o(),Eg=0|Qg(2097151&x|0,0,2097151&UI|0,0),Y=0|o(),og=0|Qg(2097151&d|0,0,2097151&uI|0,0),S=0|o(),ag=0|Qg(2097151&G|0,0,2097151&SI|0,0),eg=0|o(),tg=0|Qg(2097151&gI|0,0,2097151&yI|0,0),cg=0|o(),_I=0|vg(0|(DI=0|vg(0|(Y=0|vg(0|(S=0|vg(0|(eg=0|vg(0|(cg=0|vg(0|(ng=0|vg(0|(fg=0|Qg(2097151&hI|0,0,2097151&CA|0,0)),0|o(),0|(ng=0|Qg(2097151&XI|0,0,2097151&FA|0,0)),0|o())),0|o(),0|tg,0|cg)),0|o(),0|ag,0|eg)),0|o(),0|og,0|S)),0|o(),0|Eg,0|Y)),0|o(),0|I,0|DI)),0|o(),2097151&_I|0,0),DI=0|o(),I=0|Qg(2097151&sA|0,0,2097151&wA|0,0),Y=0|o(),Eg=0|Qg(2097151&zA|0,0,2097151&UI|0,0),S=0|o(),og=0|Qg(2097151&x|0,0,2097151&uI|0,0),eg=0|o(),ag=0|Qg(2097151&d|0,0,2097151&SI|0,0),cg=0|o(),tg=0|Qg(2097151&G|0,0,2097151&yI|0,0),ng=0|o(),H=0|Qg(2097151&gI|0,0,2097151&CA|0,0),fg=0|o(),n=0|Qg(2097151&hI|0,0,2097151&FA|0,0),a=0|o(),c=0|Qg(2097151&XI|0,0,2097151&_|0,0),wg=0|o(),qI=0|Qg(2097151&RA|0,0,2097151&wA|0,0),M=0|o(),T=0|Qg(2097151&sA|0,0,2097151&UI|0,0),aI=0|o(),jI=0|Qg(2097151&zA|0,0,2097151&uI|0,0),TI=0|o(),zI=0|Qg(2097151&x|0,0,2097151&SI|0,0),j=0|o(),OI=0|Qg(2097151&d|0,0,2097151&yI|0,0),VI=0|o(),$I=0|Qg(2097151&G|0,0,2097151&CA|0,0),WI=0|o(),Ig=0|Qg(2097151&gI|0,0,2097151&FA|0,0),ZI=0|o(),cI=0|vg(0|(aI=0|vg(0|(M=0|vg(0|(TI=0|vg(0|(j=0|vg(0|(VI=0|vg(0|(WI=0|vg(0|(ZI=0|vg(0|(Ag=0|vg(0|(gg=0|Qg(2097151&hI|0,0,2097151&_|0,0)),0|o(),0|(Ag=0|Qg(2097151&XI|0,0,2097151&QA|0,0)),0|o())),0|o(),0|Ig,0|ZI)),0|o(),0|$I,0|WI)),0|o(),0|OI,0|VI)),0|o(),0|zI,0|j)),0|o(),0|jI,0|TI)),0|o(),0|qI,0|M)),0|o(),0|T,0|aI)),0|o(),2097151&cI|0,0),aI=0|o(),T=0|Qg(2097151&IA|0,0,2097151&wA|0,0),M=0|o(),qI=0|Qg(2097151&RA|0,0,2097151&UI|0,0),TI=0|o(),jI=0|Qg(2097151&sA|0,0,2097151&uI|0,0),j=0|o(),zI=0|Qg(2097151&zA|0,0,2097151&SI|0,0),VI=0|o(),OI=0|Qg(2097151&x|0,0,2097151&yI|0,0),WI=0|o(),$I=0|Qg(2097151&d|0,0,2097151&CA|0,0),ZI=0|o(),Ig=0|Qg(2097151&G|0,0,2097151&FA|0,0),Ag=0|o(),u=0|Qg(2097151&gI|0,0,2097151&_|0,0),gg=0|o(),e=0|Qg(2097151&hI|0,0,2097151&QA|0,0),i=0|o(),E=0|Qg(2097151&XI|0,0,2097151&q|0,0),Cg=0|o(),yA=0|Qg(2097151&NI|0,0,2097151&wA|0,0),fA=0|o(),W=0|Qg(2097151&IA|0,0,2097151&UI|0,0),z=0|o(),iI=0|Qg(2097151&RA|0,0,2097151&uI|0,0),EI=0|o(),JI=0|Qg(2097151&sA|0,0,2097151&SI|0,0),bI=0|o(),EA=0|Qg(2097151&zA|0,0,2097151&yI|0,0),b=0|o(),lI=0|Qg(2097151&x|0,0,2097151&CA|0,0),HI=0|o(),II=0|Qg(2097151&d|0,0,2097151&FA|0,0),AI=0|o(),rI=0|Qg(2097151&G|0,0,2097151&_|0,0),nI=0|o(),V=0|Qg(2097151&gI|0,0,2097151&QA|0,0),C=0|o(),tA=0|vg(0|(fA=0|vg(0|(z=0|vg(0|(bI=0|vg(0|(EI=0|vg(0|(b=0|vg(0|(HI=0|vg(0|(AI=0|vg(0|(nI=0|vg(0|(C=0|vg(0|(xI=0|vg(0|Qg(2097151&hI|0,0,2097151&q|0,0),0|(LI=0|o()),0|(xI=0|Qg(2097151&XI|0,0,2097151&HA|0,0)),0|o())),0|o(),0|V,0|C)),0|o(),0|rI,0|nI)),0|o(),0|II,0|AI)),0|o(),0|lI,0|HI)),0|o(),0|EA,0|b)),0|o(),0|iI,0|EI)),0|o(),0|JI,0|bI)),0|o(),0|W,0|z)),0|o(),0|yA,0|fA)),0|o(),2097151&tA|0,0),fA=0|o(),wA=0|Qg(0|rA,0|nA,2097151&wA|0,0),yA=0|o(),z=0|Qg(2097151&NI|0,0,2097151&UI|0,0),W=0|o(),bI=0|Qg(2097151&IA|0,0,2097151&uI|0,0),JI=0|o(),EI=0|Qg(2097151&RA|0,0,2097151&SI|0,0),iI=0|o(),b=0|Qg(2097151&sA|0,0,2097151&yI|0,0),EA=0|o(),HI=0|Qg(2097151&zA|0,0,2097151&CA|0,0),lI=0|o(),AI=0|Qg(2097151&x|0,0,2097151&FA|0,0),II=0|o(),nI=0|Qg(2097151&d|0,0,2097151&_|0,0),rI=0|o(),C=0|Qg(2097151&G|0,0,2097151&QA|0,0),V=0|o(),xI=0|Qg(2097151&gI|0,0,2097151&q|0,0),LI=0|o(),p=0|Qg(2097151&hI|0,0,2097151&HA|0,0),Q=0|o(),XI=0|Qg(2097151&XI|0,0,0|GA,0|dA),KI=0|o(),UI=0|Qg(0|rA,0|nA,2097151&UI|0,0),vI=0|o(),hA=0|Qg(2097151&NI|0,0,2097151&uI|0,0),pI=0|o(),PI=0|Qg(2097151&IA|0,0,2097151&SI|0,0),N=0|o(),uA=0|Qg(2097151&RA|0,0,2097151&yI|0,0),cA=0|o(),oA=0|Qg(2097151&sA|0,0,2097151&CA|0,0),RI=0|o(),SA=0|Qg(2097151&zA|0,0,2097151&FA|0,0),L=0|o(),kA=0|Qg(2097151&x|0,0,2097151&_|0,0),UA=0|o(),fI=0|Qg(2097151&d|0,0,2097151&QA|0,0),YA=0|o(),sI=0|Qg(2097151&G|0,0,2097151&q|0,0),tI=0|o(),vI=0|vg(0|(pI=0|vg(0|(N=0|vg(0|(RI=0|vg(0|(cA=0|vg(0|(L=0|vg(0|(UA=0|vg(0|(YA=0|vg(0|(tI=0|vg(0|(hI=0|vg(0|(MI=0|Qg(2097151&gI|0,0,2097151&HA|0,0)),0|(BI=0|o()),0|(hI=0|Qg(2097151&hI|0,0,0|GA,0|dA)),0|o())),0|o(),0|sI,0|tI)),0|o(),0|fI,0|YA)),0|o(),0|kA,0|UA)),0|o(),0|SA,0|L)),0|o(),0|uA,0|cA)),0|o(),0|oA,0|RI)),0|o(),0|PI,0|N)),0|o(),0|hA,0|pI)),0|o(),0|UI,0|vI),UI=0|o(),uI=0|Qg(0|rA,0|nA,2097151&uI|0,0),pI=0|o(),hA=0|Qg(2097151&NI|0,0,2097151&SI|0,0),N=0|o(),PI=0|Qg(2097151&IA|0,0,2097151&yI|0,0),RI=0|o(),oA=0|Qg(2097151&RA|0,0,2097151&CA|0,0),cA=0|o(),uA=0|Qg(2097151&sA|0,0,2097151&FA|0,0),L=0|o(),SA=0|Qg(2097151&zA|0,0,2097151&_|0,0),UA=0|o(),kA=0|Qg(2097151&x|0,0,2097151&QA|0,0),YA=0|o(),fI=0|Qg(2097151&d|0,0,2097151&q|0,0),tI=0|o(),sI=0|Qg(2097151&G|0,0,2097151&HA|0,0),hI=0|o(),gI=0|Qg(2097151&gI|0,0,0|GA,0|dA),BI=0|o(),SI=0|Qg(0|rA,0|nA,2097151&SI|0,0),MI=0|o(),dI=0|Qg(2097151&NI|0,0,2097151&yI|0,0),wI=0|o(),K=0|Qg(2097151&IA|0,0,2097151&CA|0,0),YI=0|o(),qA=0|Qg(2097151&RA|0,0,2097151&FA|0,0),$=0|o(),J=0|Qg(2097151&sA|0,0,2097151&_|0,0),g=0|o(),v=0|Qg(2097151&zA|0,0,2097151&QA|0,0),ZA=0|o(),pA=0|Qg(2097151&x|0,0,2097151&q|0,0),DA=0|o(),MI=0|vg(0|(wI=0|vg(0|(YI=0|vg(0|(g=0|vg(0|($=0|vg(0|(ZA=0|vg(0|(DA=0|vg(0|(G=0|vg(0|(mI=0|Qg(2097151&d|0,0,2097151&HA|0,0)),0|(m=0|o()),0|(G=0|Qg(2097151&G|0,0,0|GA,0|dA)),0|o())),0|o(),0|pA,0|DA)),0|o(),0|v,0|ZA)),0|o(),0|qA,0|$)),0|o(),0|J,0|g)),0|o(),0|K,0|YI)),0|o(),0|dI,0|wI)),0|o(),0|SI,0|MI),SI=0|o(),yI=0|Qg(0|rA,0|nA,2097151&yI|0,0),wI=0|o(),dI=0|Qg(2097151&NI|0,0,2097151&CA|0,0),YI=0|o(),K=0|Qg(2097151&IA|0,0,2097151&FA|0,0),g=0|o(),J=0|Qg(2097151&RA|0,0,2097151&_|0,0),$=0|o(),qA=0|Qg(2097151&sA|0,0,2097151&QA|0,0),ZA=0|o(),v=0|Qg(2097151&zA|0,0,2097151&q|0,0),DA=0|o(),pA=0|Qg(2097151&x|0,0,2097151&HA|0,0),G=0|o(),d=0|Qg(2097151&d|0,0,0|GA,0|dA),m=0|o(),CA=0|Qg(0|rA,0|nA,2097151&CA|0,0),mI=0|o(),QI=0|Qg(2097151&NI|0,0,2097151&FA|0,0),gA=0|o(),_A=0|Qg(2097151&IA|0,0,2097151&_|0,0),CI=0|o(),X=0|Qg(2097151&RA|0,0,2097151&QA|0,0),iA=0|o(),eA=0|Qg(2097151&sA|0,0,2097151&q|0,0),lA=0|o(),mI=0|vg(0|(gA=0|vg(0|(CI=0|vg(0|(lA=0|vg(0|(iA=0|vg(0|(x=0|vg(0|(R=0|Qg(2097151&zA|0,0,2097151&HA|0,0)),0|(VA=0|o()),0|(x=0|Qg(2097151&x|0,0,0|GA,0|dA)),0|o())),0|o(),0|X,0|iA)),0|o(),0|eA,0|lA)),0|o(),0|_A,0|CI)),0|o(),0|QI,0|gA)),0|o(),0|CA,0|mI),CA=0|o(),FA=0|Qg(0|rA,0|nA,2097151&FA|0,0),gA=0|o(),QI=0|Qg(2097151&NI|0,0,2097151&_|0,0),CI=0|o(),_A=0|Qg(2097151&IA|0,0,2097151&QA|0,0),lA=0|o(),eA=0|Qg(2097151&RA|0,0,2097151&q|0,0),iA=0|o(),X=0|Qg(2097151&sA|0,0,2097151&HA|0,0),x=0|o(),zA=0|Qg(2097151&zA|0,0,0|GA,0|dA),VA=0|o(),_=0|Qg(0|rA,0|nA,2097151&_|0,0),R=0|o(),XA=0|Qg(2097151&NI|0,0,2097151&QA|0,0),AA=0|o(),oI=0|Qg(2097151&IA|0,0,2097151&q|0,0),jA=0|o(),NA=0|Qg(2097151&RA|0,0,2097151&HA|0,0),eI=0|o(),R=0|vg(0|(AA=0|vg(0|(jA=0|vg(0|(eI=0|vg(0|(sA=0|Qg(2097151&sA|0,0,0|GA,0|dA)),0|o(),0|NA,0|eI)),0|o(),0|oI,0|jA)),0|o(),0|XA,0|AA)),0|o(),0|_,0|R),_=0|o(),QA=0|Qg(0|rA,0|nA,2097151&QA|0,0),AA=0|o(),XA=0|Qg(2097151&NI|0,0,2097151&q|0,0),jA=0|o(),oI=0|Qg(2097151&IA|0,0,2097151&HA|0,0),eI=0|o(),RA=0|Qg(2097151&RA|0,0,0|GA,0|dA),NA=0|o(),q=0|Qg(0|rA,0|nA,2097151&q|0,0),sA=0|o(),sA=0|vg(0|(IA=0|vg(0|Qg(2097151&NI|0,0,2097151&HA|0,0),0|(MA=0|o()),0|(IA=0|Qg(2097151&IA|0,0,0|GA,0|dA)),0|o())),0|o(),0|q,0|sA),q=0|o(),NI=0|vg(0|(HA=0|Qg(0|rA,0|nA,2097151&HA|0,0)),0|(IA=0|o()),0|(NI=0|Qg(2097151&NI|0,0,0|GA,0|dA)),0|o()),IA=0|o(),dA=0|Qg(0|rA,0|nA,0|GA,0|dA),GA=0|o(),HA=0|yg(0|(nA=0|vg(0|mA,0|LA,1048576,0)),0|(rA=0|o()),21),MA=0|o(),MA=0|vg(0|(BA=0|vg(0|($A=0|vg(0|F,0|D,0|h,0|$A)),0|o(),2097151&BA|0,0)),0|o(),0|HA,0|MA),HA=0|o(),rA=0|Ug(0|mA,0|LA,-2097152&nA|0,4095&rA|0),nA=0|o(),BA=0|yg(0|(LA=0|vg(0|KA,0|xA,1048576,0)),0|(mA=0|o()),21),$A=0|o(),$A=0|vg(0|(bA=0|vg(0|(vA=0|vg(0|(O=0|vg(0|(ug=0|vg(0|s,0|y,0|w,0|ug)),0|o(),0|l,0|O)),0|o(),0|Z,0|vA)),0|o(),2097151&bA|0,0)),0|o(),0|BA,0|$A),BA=0|o(),Z=0|ig(0|(bA=0|vg(0|PA,0|JA,1048576,0)),0|(vA=0|o()),21),O=0|o(),O=0|vg(0|(WA=0|vg(0|(OA=0|vg(0|(P=0|vg(0|(hg=0|vg(0|(Fg=0|vg(0|(pg=0|vg(0|f,0|t,0|r,0|pg)),0|o(),0|k,0|Fg)),0|o(),0|Dg,0|hg)),0|o(),0|sg,0|P)),0|o(),0|aA,0|OA)),0|o(),2097151&WA|0,0)),0|o(),0|Z,0|O),Z=0|o(),aA=0|ig(0|(WA=0|vg(0|_I,0|DI,1048576,0)),0|(OA=0|o()),21),P=0|o(),P=0|vg(0|(U=0|vg(0|(Y=0|vg(0|(S=0|vg(0|(eg=0|vg(0|(cg=0|vg(0|(ng=0|vg(0|(fg=0|vg(0|(wg=0|vg(0|n,0|a,0|c,0|wg)),0|o(),0|H,0|fg)),0|o(),0|tg,0|ng)),0|o(),0|ag,0|cg)),0|o(),0|og,0|eg)),0|o(),0|Eg,0|S)),0|o(),0|I,0|Y)),0|o(),2097151&U|0,0)),0|o(),0|aA,0|P),aA=0|o(),I=0|ig(0|(U=0|vg(0|cI,0|aI,1048576,0)),0|(Y=0|o()),21),S=0|o(),S=0|vg(0|(TA=0|vg(0|(M=0|vg(0|(j=0|vg(0|(TI=0|vg(0|(VI=0|vg(0|(WI=0|vg(0|(ZI=0|vg(0|(Ag=0|vg(0|(gg=0|vg(0|(Cg=0|vg(0|e,0|i,0|E,0|Cg)),0|o(),0|u,0|gg)),0|o(),0|Ig,0|Ag)),0|o(),0|$I,0|ZI)),0|o(),0|OI,0|WI)),0|o(),0|zI,0|VI)),0|o(),0|qI,0|TI)),0|o(),0|jI,0|j)),0|o(),0|T,0|M)),0|o(),2097151&TA|0,0)),0|o(),0|I,0|S),I=0|o(),T=0|ig(0|(TA=0|vg(0|tA,0|fA,1048576,0)),0|(M=0|o()),21),j=0|o(),j=0|vg(0|(GI=0|vg(0|(W=0|vg(0|(yA=0|vg(0|(JI=0|vg(0|(EA=0|vg(0|(iI=0|vg(0|(lI=0|vg(0|(II=0|vg(0|(rI=0|vg(0|(V=0|vg(0|(LI=0|vg(0|(KI=0|vg(0|p,0|Q,0|XI,0|KI)),0|o(),0|xI,0|LI)),0|o(),0|C,0|V)),0|o(),0|nI,0|rI)),0|o(),0|AI,0|II)),0|o(),0|HI,0|lI)),0|o(),0|EI,0|iI)),0|o(),0|b,0|EA)),0|o(),0|bI,0|JI)),0|o(),0|wA,0|yA)),0|o(),0|z,0|W)),0|o(),0|FI,0|GI)),0|o(),0|T,0|j),T=0|o(),W=0|ig(0|(GI=0|vg(0|vI,0|UI,1048576,0)),0|(FI=0|o()),21),z=0|o(),z=0|vg(0|(pI=0|vg(0|(N=0|vg(0|(RI=0|vg(0|(L=0|vg(0|(cA=0|vg(0|(UA=0|vg(0|(YA=0|vg(0|(tI=0|vg(0|(BI=0|vg(0|sI,0|hI,0|gI,0|BI)),0|o(),0|fI,0|tI)),0|o(),0|kA,0|YA)),0|o(),0|SA,0|UA)),0|o(),0|oA,0|cA)),0|o(),0|uA,0|L)),0|o(),0|PI,0|RI)),0|o(),0|hA,0|N)),0|o(),0|uI,0|pI)),0|o(),0|W,0|z),W=0|o(),N=0|ig(0|(pI=0|vg(0|MI,0|SI,1048576,0)),0|(uI=0|o()),21),hA=0|o(),hA=0|vg(0|(wI=0|vg(0|(YI=0|vg(0|(g=0|vg(0|(ZA=0|vg(0|($=0|vg(0|(DA=0|vg(0|(m=0|vg(0|pA,0|G,0|d,0|m)),0|o(),0|v,0|DA)),0|o(),0|J,0|$)),0|o(),0|qA,0|ZA)),0|o(),0|K,0|g)),0|o(),0|dI,0|YI)),0|o(),0|yI,0|wI)),0|o(),0|N,0|hA),N=0|o(),YI=0|ig(0|(wI=0|vg(0|mI,0|CA,1048576,0)),0|(yI=0|o()),21),dI=0|o(),dI=0|vg(0|(gA=0|vg(0|(CI=0|vg(0|(lA=0|vg(0|(x=0|vg(0|(VA=0|vg(0|eA,0|iA,0|zA,0|VA)),0|o(),0|X,0|x)),0|o(),0|_A,0|lA)),0|o(),0|QI,0|CI)),0|o(),0|FA,0|gA)),0|o(),0|YI,0|dI),YI=0|o(),CI=0|ig(0|(gA=0|vg(0|R,0|_,1048576,0)),0|(FA=0|o()),21),QI=0|o(),QI=0|vg(0|(AA=0|vg(0|(jA=0|vg(0|(NA=0|vg(0|oI,0|eI,0|RA,0|NA)),0|o(),0|XA,0|jA)),0|o(),0|QA,0|AA)),0|o(),0|CI,0|QI),CI=0|o(),FA=0|Ug(0|R,0|_,-2097152&gA|0,0|FA),gA=0|o(),AA=0|vg(0|NI,0|IA,0|(AA=0|ig(0|(_=0|vg(0|sA,0|q,1048576,0)),0|(R=0|o()),21)),0|o()),IA=0|o(),R=0|Ug(0|sA,0|q,-2097152&_|0,0|R),_=0|o(),NI=0|ig(0|(q=0|vg(0|dA,0|GA,1048576,0)),0|(sA=0|o()),21),QA=0|o(),sA=0|Ug(0|dA,0|GA,-2097152&q|0,0|sA),q=0|o(),jA=0|yg(0|(GA=0|vg(0|MA,0|HA,1048576,0)),0|(dA=0|o()),21),XA=0|o(),dA=0|Ug(0|MA,0|HA,-2097152&GA|0,0|dA),GA=0|o(),NA=0|ig(0|(HA=0|vg(0|$A,0|BA,1048576,0)),0|(MA=0|o()),21),RA=0|o(),MA=0|Ug(0|$A,0|BA,-2097152&HA|0,0|MA),HA=0|o(),eI=0|ig(0|(BA=0|vg(0|O,0|Z,1048576,0)),0|($A=0|o()),21),oI=0|o(),$A=0|Ug(0|O,0|Z,-2097152&BA|0,0|$A),BA=0|o(),lA=0|ig(0|(Z=0|vg(0|P,0|aA,1048576,0)),0|(O=0|o()),21),_A=0|o(),VA=0|ig(0|(x=0|vg(0|S,0|I,1048576,0)),0|(X=0|o()),21),zA=0|o(),g=0|ig(0|(iA=0|vg(0|j,0|T,1048576,0)),0|(eA=0|o()),21),K=0|o(),$=0|ig(0|(ZA=0|vg(0|z,0|W,1048576,0)),0|(qA=0|o()),21),J=0|o(),m=0|ig(0|(DA=0|vg(0|hA,0|N,1048576,0)),0|(v=0|o()),21),d=0|o(),gA=0|vg(0|(RI=0|ig(0|(G=0|vg(0|dI,0|YI,1048576,0)),0|(pA=0|o()),21)),0|o(),0|FA,0|gA),FA=0|o(),pA=0|Ug(0|dI,0|YI,-2097152&G|0,0|pA),G=0|o(),_=0|vg(0|(RI=0|ig(0|(YI=0|vg(0|QI,0|CI,1048576,0)),0|(dI=0|o()),21)),0|o(),0|R,0|_),R=0|o(),dI=0|Ug(0|QI,0|CI,-2097152&YI|0,0|dI),YI=0|o(),q=0|vg(0|(RI=0|ig(0|(CI=0|vg(0|AA,0|IA,1048576,0)),0|(QI=0|o()),21)),0|o(),0|sA,0|q),sA=0|o(),QI=0|Ug(0|AA,0|IA,-2097152&CI|0,0|QI),CI=0|o(),IA=0|Qg(0|NI,0|QA,666643,0),AA=0|o(),RI=0|Qg(0|NI,0|QA,470296,0),PI=0|o(),L=0|Qg(0|NI,0|QA,654183,0),uA=0|o(),cA=0|Qg(0|NI,0|QA,-997805,-1),oA=0|o(),UA=0|Qg(0|NI,0|QA,136657,0),SA=0|o(),d=0|vg(0|(yI=0|Ug(0|(QA=0|vg(0|mI,0|CA,0|(QA=0|Qg(0|NI,0|QA,-683901,-1)),0|o())),0|o(),-2097152&wI|0,0|yI)),0|o(),0|m,0|d),m=0|o(),yI=0|Qg(0|q,0|sA,666643,0),wI=0|o(),QA=0|Qg(0|q,0|sA,470296,0),CA=0|o(),mI=0|Qg(0|q,0|sA,654183,0),NI=0|o(),YA=0|Qg(0|q,0|sA,-997805,-1),kA=0|o(),tI=0|Qg(0|q,0|sA,136657,0),fI=0|o(),sA=0|Qg(0|q,0|sA,-683901,-1),q=0|o(),BI=0|Qg(0|QI,0|CI,666643,0),gI=0|o(),hI=0|Qg(0|QI,0|CI,470296,0),sI=0|o(),yA=0|Qg(0|QI,0|CI,654183,0),wA=0|o(),JI=0|Qg(0|QI,0|CI,-997805,-1),bI=0|o(),EA=0|Qg(0|QI,0|CI,136657,0),b=0|o(),CI=0|Qg(0|QI,0|CI,-683901,-1),QI=0|o(),J=0|vg(0|(uI=0|Ug(0|(QI=0|vg(0|(fI=0|vg(0|(oA=0|vg(0|MI,0|SI,0|cA,0|oA)),0|o(),0|tI,0|fI)),0|o(),0|CI,0|QI)),0|o(),-2097152&pI|0,0|uI)),0|o(),0|$,0|J),$=0|o(),uI=0|Qg(0|_,0|R,666643,0),pI=0|o(),QI=0|Qg(0|_,0|R,470296,0),CI=0|o(),fI=0|Qg(0|_,0|R,654183,0),tI=0|o(),oA=0|Qg(0|_,0|R,-997805,-1),cA=0|o(),SI=0|Qg(0|_,0|R,136657,0),MI=0|o(),R=0|Qg(0|_,0|R,-683901,-1),_=0|o(),iI=0|Qg(0|dI,0|YI,666643,0),EI=0|o(),lI=0|Qg(0|dI,0|YI,470296,0),HI=0|o(),II=0|Qg(0|dI,0|YI,654183,0),AI=0|o(),rI=0|Qg(0|dI,0|YI,-997805,-1),nI=0|o(),V=0|Qg(0|dI,0|YI,136657,0),C=0|o(),YI=0|Qg(0|dI,0|YI,-683901,-1),dI=0|o(),K=0|vg(0|(FI=0|Ug(0|(dI=0|vg(0|(MI=0|vg(0|(UI=0|vg(0|(bI=0|vg(0|(PI=0|vg(0|mI,0|NI,0|RI,0|PI)),0|o(),0|JI,0|bI)),0|o(),0|vI,0|UI)),0|o(),0|SI,0|MI)),0|o(),0|YI,0|dI)),0|o(),-2097152&GI|0,0|FI)),0|o(),0|g,0|K),g=0|o(),OA=0|Ug(0|(oI=0|vg(0|(FI=0|vg(0|_I,0|DI,0|(FI=0|Qg(0|gA,0|FA,666643,0)),0|o())),0|o(),0|eI,0|oI)),0|o(),-2097152&WA|0,0|OA),WA=0|o(),oI=0|Qg(0|gA,0|FA,470296,0),eI=0|o(),FI=0|Qg(0|gA,0|FA,654183,0),DI=0|o(),_A=0|vg(0|(Y=0|Ug(0|(aI=0|vg(0|(DI=0|vg(0|(pI=0|vg(0|lI,0|HI,0|uI,0|pI)),0|o(),0|FI,0|DI)),0|o(),0|cI,0|aI)),0|o(),-2097152&U|0,0|Y)),0|o(),0|lA,0|_A),lA=0|o(),Y=0|Qg(0|gA,0|FA,-997805,-1),U=0|o(),aI=0|Qg(0|gA,0|FA,136657,0),cI=0|o(),M=0|Ug(0|(zA=0|vg(0|(fA=0|vg(0|(cI=0|vg(0|(nI=0|vg(0|(tI=0|vg(0|(wI=0|vg(0|hI,0|sI,0|yI,0|wI)),0|o(),0|fI,0|tI)),0|o(),0|rI,0|nI)),0|o(),0|aI,0|cI)),0|o(),0|tA,0|fA)),0|o(),0|VA,0|zA)),0|o(),-2097152&TA|0,0|M),TA=0|o(),FA=0|Qg(0|gA,0|FA,-683901,-1),gA=0|o(),fA=0|ig(0|(zA=0|vg(0|OA,0|WA,1048576,0)),0|(VA=0|o()),21),tA=0|o(),tA=0|vg(0|(O=0|Ug(0|(aA=0|vg(0|(EI=0|vg(0|oI,0|eI,0|iI,0|EI)),0|o(),0|P,0|aA)),0|o(),-2097152&Z|0,0|O)),0|o(),0|fA,0|tA),fA=0|o(),aA=0|ig(0|(O=0|vg(0|_A,0|lA,1048576,0)),0|(Z=0|o()),21),P=0|o(),P=0|vg(0|(X=0|Ug(0|(I=0|vg(0|(U=0|vg(0|(AI=0|vg(0|(gI=0|vg(0|QI,0|CI,0|BI,0|gI)),0|o(),0|II,0|AI)),0|o(),0|Y,0|U)),0|o(),0|S,0|I)),0|o(),-2097152&x|0,0|X)),0|o(),0|aA,0|P),aA=0|o(),I=0|ig(0|(X=0|vg(0|M,0|TA,1048576,0)),0|(x=0|o()),21),S=0|o(),S=0|vg(0|(eA=0|Ug(0|(T=0|vg(0|(gA=0|vg(0|(C=0|vg(0|(cA=0|vg(0|(wA=0|vg(0|(AA=0|vg(0|QA,0|CA,0|IA,0|AA)),0|o(),0|yA,0|wA)),0|o(),0|oA,0|cA)),0|o(),0|V,0|C)),0|o(),0|FA,0|gA)),0|o(),0|j,0|T)),0|o(),-2097152&iA|0,0|eA)),0|o(),0|I,0|S),I=0|o(),T=0|ig(0|(eA=0|vg(0|K,0|g,1048576,0)),0|(iA=0|o()),21),j=0|o(),j=0|vg(0|(qA=0|Ug(0|(W=0|vg(0|(_=0|vg(0|(b=0|vg(0|(uA=0|vg(0|YA,0|kA,0|L,0|uA)),0|o(),0|EA,0|b)),0|o(),0|R,0|_)),0|o(),0|z,0|W)),0|o(),-2097152&ZA|0,0|qA)),0|o(),0|T,0|j),T=0|o(),iA=0|Ug(0|K,0|g,-2097152&eA|0,0|iA),eA=0|o(),qA=0|ig(0|(g=0|vg(0|J,0|$,1048576,0)),0|(K=0|o()),21),ZA=0|o(),ZA=0|vg(0|(v=0|Ug(0|(N=0|vg(0|(SA=0|vg(0|sA,0|q,0|UA,0|SA)),0|o(),0|hA,0|N)),0|o(),-2097152&DA|0,0|v)),0|o(),0|qA,0|ZA),qA=0|o(),K=0|Ug(0|J,0|$,-2097152&g|0,0|K),g=0|o(),G=0|vg(0|(v=0|ig(0|($=0|vg(0|d,0|m,1048576,0)),0|(J=0|o()),21)),0|o(),0|pA,0|G),pA=0|o(),J=0|Ug(0|d,0|m,-2097152&$|0,0|J),$=0|o(),v=0|ig(0|(m=0|vg(0|tA,0|fA,1048576,0)),0|(d=0|o()),21),DA=0|o(),SA=0|ig(0|(N=0|vg(0|P,0|aA,1048576,0)),0|(hA=0|o()),21),UA=0|o(),eA=0|vg(0|(W=0|ig(0|(q=0|vg(0|S,0|I,1048576,0)),0|(sA=0|o()),21)),0|o(),0|iA,0|eA),iA=0|o(),sA=0|Ug(0|S,0|I,-2097152&q|0,0|sA),q=0|o(),g=0|vg(0|(W=0|ig(0|(I=0|vg(0|j,0|T,1048576,0)),0|(S=0|o()),21)),0|o(),0|K,0|g),K=0|o(),S=0|Ug(0|j,0|T,-2097152&I|0,0|S),I=0|o(),$=0|vg(0|(W=0|ig(0|(T=0|vg(0|ZA,0|qA,1048576,0)),0|(j=0|o()),21)),0|o(),0|J,0|$),J=0|o(),j=0|Ug(0|ZA,0|qA,-2097152&T|0,0|j),T=0|o(),qA=0|vg(0|$A,0|BA,0|(qA=0|Qg(0|G,0|pA,666643,0)),0|o()),BA=0|o(),$A=0|Qg(0|G,0|pA,470296,0),ZA=0|o(),W=0|Qg(0|G,0|pA,654183,0),z=0|o(),_=0|Qg(0|G,0|pA,-997805,-1),R=0|o(),b=0|Qg(0|G,0|pA,136657,0),EA=0|o(),x=0|Ug(0|(UA=0|vg(0|(pA=0|vg(0|M,0|TA,0|(pA=0|Qg(0|G,0|pA,-683901,-1)),0|o())),0|o(),0|SA,0|UA)),0|o(),-2097152&X|0,0|x),X=0|o(),UA=0|Qg(0|$,0|J,666643,0),SA=0|o(),pA=0|vg(0|qA,0|BA,0|(pA=0|Qg(0|$,0|J,470296,0)),0|o()),BA=0|o(),qA=0|Qg(0|$,0|J,654183,0),TA=0|o(),M=0|Qg(0|$,0|J,-997805,-1),G=0|o(),uA=0|Qg(0|$,0|J,136657,0),L=0|o(),J=0|Qg(0|$,0|J,-683901,-1),$=0|o(),kA=0|vg(0|MA,0|HA,0|(kA=0|Qg(0|j,0|T,666643,0)),0|o()),HA=0|o(),MA=0|Qg(0|j,0|T,470296,0),YA=0|o(),gA=0|vg(0|pA,0|BA,0|(gA=0|Qg(0|j,0|T,654183,0)),0|o()),BA=0|o(),pA=0|Qg(0|j,0|T,-997805,-1),FA=0|o(),C=0|Qg(0|j,0|T,136657,0),V=0|o(),T=0|Qg(0|j,0|T,-683901,-1),j=0|o(),j=0|vg(0|(L=0|vg(0|(Z=0|Ug(0|(DA=0|vg(0|(R=0|vg(0|_A,0|lA,0|_,0|R)),0|o(),0|v,0|DA)),0|o(),-2097152&O|0,0|Z)),0|o(),0|uA,0|L)),0|o(),0|T,0|j),T=0|o(),L=0|Qg(0|g,0|K,666643,0),uA=0|o(),Z=0|Qg(0|g,0|K,470296,0),O=0|o(),DA=0|Qg(0|g,0|K,654183,0),v=0|o(),R=0|Qg(0|g,0|K,-997805,-1),_=0|o(),lA=0|Qg(0|g,0|K,136657,0),_A=0|o(),K=0|Qg(0|g,0|K,-683901,-1),g=0|o(),cA=0|Qg(0|S,0|I,666643,0),oA=0|o(),wA=0|Qg(0|S,0|I,470296,0),yA=0|o(),AA=0|Qg(0|S,0|I,654183,0),IA=0|o(),CA=0|Qg(0|S,0|I,-997805,-1),QA=0|o(),U=0|Qg(0|S,0|I,136657,0),Y=0|o(),I=0|Qg(0|S,0|I,-683901,-1),S=0|o(),S=0|vg(0|(_A=0|vg(0|(FA=0|vg(0|(TA=0|vg(0|(VA=0|Ug(0|(WA=0|vg(0|$A,0|ZA,0|OA,0|WA)),0|o(),-2097152&zA|0,0|VA)),0|o(),0|qA,0|TA)),0|o(),0|pA,0|FA)),0|o(),0|lA,0|_A)),0|o(),0|I,0|S),I=0|o(),nA=0|vg(0|(_A=0|Qg(0|eA,0|iA,666643,0)),0|o(),0|rA,0|nA),rA=0|o(),_A=0|Qg(0|eA,0|iA,470296,0),lA=0|o(),FA=0|Qg(0|eA,0|iA,654183,0),pA=0|o(),yA=0|vg(0|(uA=0|vg(0|(pA=0|vg(0|(mA=0|Ug(0|(xA=0|vg(0|jA,0|XA,0|KA,0|xA)),0|o(),-2097152&LA|0,0|mA)),0|o(),0|FA,0|pA)),0|o(),0|L,0|uA)),0|o(),0|wA,0|yA),wA=0|o(),uA=0|Qg(0|eA,0|iA,-997805,-1),L=0|o(),pA=0|Qg(0|eA,0|iA,136657,0),FA=0|o(),QA=0|vg(0|(v=0|vg(0|(FA=0|vg(0|(YA=0|vg(0|(SA=0|vg(0|(vA=0|Ug(0|(JA=0|vg(0|NA,0|RA,0|PA,0|JA)),0|o(),-2097152&bA|0,0|vA)),0|o(),0|UA,0|SA)),0|o(),0|MA,0|YA)),0|o(),0|pA,0|FA)),0|o(),0|DA,0|v)),0|o(),0|CA,0|QA),CA=0|o(),iA=0|Qg(0|eA,0|iA,-683901,-1),eA=0|o(),FA=0|ig(0|(v=0|vg(0|nA,0|rA,1048576,0)),0|(DA=0|o()),21),pA=0|o(),pA=0|vg(0|(oA=0|vg(0|(lA=0|vg(0|dA,0|GA,0|_A,0|lA)),0|o(),0|cA,0|oA)),0|o(),0|FA,0|pA),FA=0|o(),DA=0|Ug(0|nA,0|rA,-2097152&v|0,0|DA),v=0|o(),oA=0|ig(0|(rA=0|vg(0|yA,0|wA,1048576,0)),0|(nA=0|o()),21),cA=0|o(),cA=0|vg(0|(IA=0|vg(0|(O=0|vg(0|(L=0|vg(0|kA,0|HA,0|uA,0|L)),0|o(),0|Z,0|O)),0|o(),0|AA,0|IA)),0|o(),0|oA,0|cA),oA=0|o(),O=0|ig(0|(IA=0|vg(0|QA,0|CA,1048576,0)),0|(AA=0|o()),21),Z=0|o(),Z=0|vg(0|(Y=0|vg(0|(_=0|vg(0|(eA=0|vg(0|gA,0|BA,0|iA,0|eA)),0|o(),0|R,0|_)),0|o(),0|U,0|Y)),0|o(),0|O,0|Z),O=0|o(),_=0|ig(0|(Y=0|vg(0|S,0|I,1048576,0)),0|(U=0|o()),21),R=0|o(),R=0|vg(0|(g=0|vg(0|(V=0|vg(0|(G=0|vg(0|(d=0|Ug(0|(z=0|vg(0|tA,0|fA,0|W,0|z)),0|o(),-2097152&m|0,0|d)),0|o(),0|M,0|G)),0|o(),0|C,0|V)),0|o(),0|K,0|g)),0|o(),0|_,0|R),_=0|o(),U=0|Ug(0|S,0|I,-2097152&Y|0,0|U),Y=0|o(),g=0|ig(0|(I=0|vg(0|j,0|T,1048576,0)),0|(S=0|o()),21),K=0|o(),K=0|vg(0|(hA=0|Ug(0|(aA=0|vg(0|(EA=0|vg(0|J,0|$,0|b,0|EA)),0|o(),0|P,0|aA)),0|o(),-2097152&N|0,0|hA)),0|o(),0|g,0|K),g=0|o(),S=0|Ug(0|j,0|T,-2097152&I|0,0|S),I=0|o(),hA=0|vg(0|sA,0|q,0|(hA=0|ig(0|(T=0|vg(0|x,0|X,1048576,0)),0|(j=0|o()),21)),0|o()),q=0|o(),aA=0|ig(0|(sA=0|vg(0|pA,0|FA,1048576,0)),0|(N=0|o()),21),P=0|o(),$=0|ig(0|(EA=0|vg(0|cA,0|oA,1048576,0)),0|(b=0|o()),21),J=0|o(),G=0|vg(0|U,0|Y,0|(G=0|ig(0|(V=0|vg(0|Z,0|O,1048576,0)),0|(C=0|o()),21)),0|o()),Y=0|o(),d=0|vg(0|S,0|I,0|(d=0|ig(0|(U=0|vg(0|R,0|_,1048576,0)),0|(M=0|o()),21)),0|o()),I=0|o(),M=0|Ug(0|R,0|_,-2097152&U|0,0|M),U=0|o(),S=0|ig(0|(_=0|vg(0|K,0|g,1048576,0)),0|(R=0|o()),21),m=0|o(),R=0|Ug(0|K,0|g,-2097152&_|0,0|R),_=0|o(),z=0|ig(0|(g=0|vg(0|hA,0|q,1048576,0)),0|(K=0|o()),21),W=0|o(),K=0|Ug(0|hA,0|q,-2097152&g|0,0|K),g=0|o(),q=0|vg(0|DA,0|v,0|(q=0|Qg(0|z,0|W,666643,0)),0|o()),v=0|o(),DA=0|Qg(0|z,0|W,470296,0),hA=0|o(),fA=0|Qg(0|z,0|W,654183,0),tA=0|o(),eA=0|Qg(0|z,0|W,-997805,-1),iA=0|o(),BA=0|Qg(0|z,0|W,136657,0),gA=0|o(),W=0|Qg(0|z,0|W,-683901,-1),z=0|o(),v=0|ig(0|q,0|v,21),L=0|o(),v=0|ig(0|(L=0|vg(0|(N=0|Ug(0|(hA=0|vg(0|pA,0|FA,0|DA,0|hA)),0|o(),-2097152&sA|0,0|N)),0|o(),0|v,0|L)),0|o(),21),N=0|o(),v=0|ig(0|(N=0|vg(0|(P=0|vg(0|(nA=0|Ug(0|(tA=0|vg(0|yA,0|wA,0|fA,0|tA)),0|o(),-2097152&rA|0,0|nA)),0|o(),0|aA,0|P)),0|o(),0|v,0|N)),0|o(),21),P=0|o(),v=0|ig(0|(P=0|vg(0|(b=0|Ug(0|(iA=0|vg(0|cA,0|oA,0|eA,0|iA)),0|o(),-2097152&EA|0,0|b)),0|o(),0|v,0|P)),0|o(),21),b=0|o(),v=0|ig(0|(b=0|vg(0|(J=0|vg(0|(AA=0|Ug(0|(gA=0|vg(0|QA,0|CA,0|BA,0|gA)),0|o(),-2097152&IA|0,0|AA)),0|o(),0|$,0|J)),0|o(),0|v,0|b)),0|o(),21),J=0|o(),R=0|ig(0|(_=0|vg(0|(I=0|ig(0|(M=0|vg(0|d,0|I,0|(M=0|ig(0|(U=0|vg(0|(Y=0|ig(0|(v=0|vg(0|G,0|Y,0|(v=0|ig(0|(J=0|vg(0|(C=0|Ug(0|(z=0|vg(0|Z,0|O,0|W,0|z)),0|o(),-2097152&V|0,0|C)),0|o(),0|v,0|J)),0|o(),21)),0|o())),0|o(),21)),0|o(),0|M,0|U)),0|o(),21)),0|o())),0|o(),21)),0|o(),0|R,0|_)),0|o(),21),I=0|o(),q=0|vg(0|(j=0|Qg(0|(K=0|ig(0|(g=0|vg(0|(R=0|ig(0|(I=0|vg(0|(j=0|Ug(0|(X=0|vg(0|S,0|m,0|x,0|X)),0|o(),-2097152&T|0,0|j)),0|o(),0|R,0|I)),0|o(),21)),0|o(),0|K,0|g)),0|o(),21)),0|(R=0|o()),666643,0)),0|o(),2097151&q|0,0),j=0|o(),L=0|vg(0|(T=0|Qg(0|K,0|R,470296,0)),0|o(),2097151&L|0,0),T=0|o(),N=0|vg(0|(X=0|Qg(0|K,0|R,654183,0)),0|o(),2097151&N|0,0),X=0|o(),P=0|vg(0|(x=0|Qg(0|K,0|R,-997805,-1)),0|o(),2097151&P|0,0),x=0|o(),b=0|vg(0|(m=0|Qg(0|K,0|R,136657,0)),0|o(),2097151&b|0,0),m=0|o(),g=0|vg(0|(C=0|ig(0|(I=0|vg(0|(G=0|ig(0|(_=0|vg(0|(Y=0|ig(0|(M=0|vg(0|(d=0|ig(0|(U=0|vg(0|(S=0|ig(0|(v=0|vg(0|(J=0|ig(0|(b=0|vg(0|(J=0|vg(0|(R=0|Qg(0|K,0|R,-683901,-1)),0|o(),2097151&J|0,0)),0|(R=0|o()),0|(b=0|ig(0|(P=0|vg(0|b,0|m,0|(P=0|ig(0|(N=0|vg(0|P,0|x,0|(N=0|ig(0|(L=0|vg(0|N,0|X,0|(L=0|ig(0|(K=0|vg(0|L,0|T,0|(K=0|ig(0|q,0|j,21)),0|o())),0|(T=0|o()),21)),0|o())),0|(X=0|o()),21)),0|o())),0|(x=0|o()),21)),0|o())),0|(m=0|o()),21)),0|o())),0|(R=0|o()),21)),0|o(),2097151&v|0,0)),0|(J=0|o()),21)),0|o(),2097151&U|0,0)),0|(S=0|o()),21)),0|o(),2097151&M|0,0)),0|(d=0|o()),21)),0|o(),2097151&_|0,0)),0|(Y=0|o()),21)),0|o(),2097151&I|0,0)),0|(G=0|o()),21)),0|o(),2097151&g|0,0),C=0|o(),B[A>>0]=q,V=0|yg(0|q,0|j,8),o(),B[A+1>>0]=V,j=0|yg(0|q,0|j,16),o(),q=0|rg(2097151&K|0,0,5),o(),B[A+2>>0]=q|31&j,j=0|yg(0|K,0|T,3),o(),B[A+3>>0]=j,T=0|yg(0|K,0|T,11),o(),B[A+4>>0]=T,K=0|yg(2097151&K|0,0,19),T=0|o(),j=0|rg(2097151&L|0,0,2),o(),B[A+5>>0]=j|K,X=0|yg(0|L,0|X,6),o(),B[A+6>>0]=X,L=0|yg(2097151&L|0,0,14),X=0|o(),K=0|rg(2097151&N|0,0,7),o(),B[A+7>>0]=K|L,L=0|yg(0|N,0|x,1),o(),B[A+8>>0]=L,x=0|yg(0|N,0|x,9),o(),B[A+9>>0]=x,N=0|yg(2097151&N|0,0,17),x=0|o(),L=0|rg(2097151&P|0,0,4),o(),B[A+10>>0]=L|N,N=0|yg(0|P,0|m,4),o(),B[A+11>>0]=N,m=0|yg(0|P,0|m,12),o(),B[A+12>>0]=m,P=0|yg(2097151&P|0,0,20),m=0|o(),N=0|rg(2097151&b|0,0,1),o(),B[A+13>>0]=N|P,R=0|yg(0|b,0|R,7),o(),B[A+14>>0]=R,b=0|yg(2097151&b|0,0,15),R=0|o(),P=0|rg(2097151&v|0,0,6),o(),B[A+15>>0]=P|b,b=0|yg(0|v,0|J,2),o(),B[A+16>>0]=b,J=0|yg(0|v,0|J,10),o(),B[A+17>>0]=J,v=0|yg(2097151&v|0,0,18),J=0|o(),b=0|rg(0|U,0|S,3),o(),B[A+18>>0]=b|v,v=0|yg(0|U,0|S,5),o(),B[A+19>>0]=v,S=0|yg(0|U,0|S,13),o(),B[A+20>>0]=S,B[A+21>>0]=M,S=0|yg(0|M,0|d,8),o(),B[A+22>>0]=S,d=0|yg(0|M,0|d,16),o(),M=0|rg(2097151&_|0,0,5),o(),B[A+23>>0]=M|31&d,d=0|yg(0|_,0|Y,3),o(),B[A+24>>0]=d,Y=0|yg(0|_,0|Y,11),o(),B[A+25>>0]=Y,_=0|yg(2097151&_|0,0,19),Y=0|o(),d=0|rg(2097151&I|0,0,2),o(),B[A+26>>0]=d|_,G=0|yg(0|I,0|G,6),o(),B[A+27>>0]=G,I=0|yg(2097151&I|0,0,14),G=0|o(),_=0|rg(0|g,0|C,7),o(),B[A+28>>0]=_|I,I=0|yg(0|g,0|C,1),o(),B[A+29>>0]=I,I=0|yg(0|g,0|C,9),o(),B[A+30>>0]=I,C=0|ig(0|g,0|C,17),o(),B[A+31>>0]=C}function D(A,I,g,B){A|=0,B|=0;var Q=0,E=0,i=0,e=0,c=0,a=0,n=0,r=0,t=0,f=0,w=0,y=0,s=0,h=0,D=0,F=0,p=0,u=0,H=0,k=0,l=0,_=0,G=0,d=0,Y=0,M=0,S=0,U=0,v=0,b=0,J=0,P=0,R=0,N=0,m=0,L=0,x=0,K=0,X=0;!function(A,I){A|=0,I|=0;var g=0,B=0,Q=0,E=0;g=0;do{E=0|jA(I+(g<<3)|0),Q=0|o(),C[(B=A+(g<<3)|0)>>2]=E,C[B+4>>2]=Q,g=g+1|0}while(16!=(0|g))}(g|=0,I|=0),Q=A,E=(I=B)+64|0;do{C[I>>2]=C[Q>>2],I=I+4|0,Q=Q+4|0}while((0|I)<(0|E));I=0|C[g>>2],Q=0|C[g+4>>2],D=0;do{if(y=0|ZI(H=0|C[B+32>>2],e=0|C[B+32+4>>2],14),r=0|o(),G=0|ZI(H,e,18),r=(0|o())^r,L=0|ZI(H,e,41),r^=0|o(),b=0|C[B+40>>2],i=0|C[B+40+4>>2],h=0|C[B+48>>2],E=0|C[B+48+4>>2],c=0|C[(P=32416+(D<<3)|0)>>2],P=0|C[P+4>>2],t=0|C[B+56>>2],u=0|C[B+56+4>>2],P=0|vg(0|(u=0|vg(0|(P=0|vg(0|(P=0|vg(0|(r=0|vg(0|I,0|Q,G^y^L|0,0|r)),0|o(),0|c,0|P)),0|o(),(h^b)&H^h|0,(E^i)&e^E|0)),0|o(),0|t,0|u)),0|(t=0|o()),0|C[B+24>>2],0|C[B+24+4>>2]),c=0|o(),C[B+24>>2]=P,C[B+24+4>>2]=c,y=0|ZI(r=0|C[B>>2],L=0|C[B+4>>2],28),I=0|o(),G=0|ZI(r,L,34),I=(0|o())^I,U=0|ZI(r,L,39),I^=0|o(),n=0|C[B+8>>2],m=0|C[B+8+4>>2],a=0|C[B+16>>2],N=0|C[B+16+4>>2],t=0|vg(0|(t=0|vg(G^y^U|0,0|I,0|u,0|t)),0|o(),(a|n)&r|a&n|0,(N|m)&L|N&m|0),u=0|o(),C[B+56>>2]=t,C[B+56+4>>2]=u,I=0|ZI(P,c,14),U=0|o(),y=0|ZI(P,c,18),U=(0|o())^U,G=0|ZI(P,c,41),U^=0|o(),f=0|C[g+((w=1|D)<<3)>>2],Q=0|C[g+(w<<3)+4>>2],s=0|C[32416+(w<<3)>>2],d=0|C[32416+(w<<3)+4>>2],N=0|vg(0|(d=0|vg(0|(Q=0|vg(0|(U=0|vg(0|(E=0|vg(P&(b^H)^b|0,c&(i^e)^i|0,0|h,0|E)),0|o(),y^I^G|0,0|U)),0|o(),0|f,0|Q)),0|o(),0|s,0|d)),0|(s=0|o()),0|a,0|N),a=0|o(),C[B+16>>2]=N,C[B+16+4>>2]=a,Q=0|ZI(t,u,28),f=0|o(),U=0|ZI(t,u,34),f=(0|o())^f,G=0|ZI(t,u,39),f^=0|o(),f=0|vg(0|(s=0|vg(0|d,0|s,t&(n|r)|n&r|0,u&(m|L)|m&L|0)),0|o(),U^Q^G|0,0|f),G=0|o(),C[B+48>>2]=f,C[B+48+4>>2]=G,Q=0|ZI(N,a,14),U=0|o(),s=0|ZI(N,a,18),U=(0|o())^U,d=0|ZI(N,a,41),U^=0|o(),y=0|C[g+((I=2|D)<<3)>>2],E=0|C[g+(I<<3)+4>>2],h=0|C[32416+(I<<3)>>2],Y=0|C[32416+(I<<3)+4>>2],m=0|vg(0|(Y=0|vg(0|(E=0|vg(0|(U=0|vg(0|(i=0|vg(N&(P^H)^H|0,a&(c^e)^e|0,0|b,0|i)),0|o(),s^Q^d|0,0|U)),0|o(),0|y,0|E)),0|o(),0|h,0|Y)),0|(h=0|o()),0|n,0|m),n=0|o(),C[B+8>>2]=m,C[B+8+4>>2]=n,E=0|ZI(f,G,28),y=0|o(),U=0|ZI(f,G,34),y=(0|o())^y,d=0|ZI(f,G,39),y^=0|o(),y=0|vg(0|(h=0|vg(0|Y,0|h,f&(t|r)|t&r|0,G&(u|L)|u&L|0)),0|o(),U^E^d|0,0|y),d=0|o(),C[B+40>>2]=y,C[B+40+4>>2]=d,E=0|ZI(m,n,14),U=0|o(),h=0|ZI(m,n,18),U=(0|o())^U,Y=0|ZI(m,n,41),U^=0|o(),s=0|C[g+((Q=3|D)<<3)>>2],i=0|C[g+(Q<<3)+4>>2],b=0|C[32416+(Q<<3)>>2],F=0|C[32416+(Q<<3)+4>>2],L=0|vg(0|(F=0|vg(0|(i=0|vg(0|(U=0|vg(0|(e=0|vg(m&(N^P)^P|0,n&(a^c)^c|0,0|H,0|e)),0|o(),h^E^Y|0,0|U)),0|o(),0|s,0|i)),0|o(),0|b,0|F)),0|(b=0|o()),0|r,0|L),r=0|o(),C[B>>2]=L,C[B+4>>2]=r,i=0|ZI(y,d,28),s=0|o(),U=0|ZI(y,d,34),s=(0|o())^s,Y=0|ZI(y,d,39),s^=0|o(),s=0|vg(0|(b=0|vg(0|F,0|b,y&(f|t)|f&t|0,d&(G|u)|G&u|0)),0|o(),U^i^Y|0,0|s),Y=0|o(),C[B+32>>2]=s,C[B+32+4>>2]=Y,i=0|ZI(L,r,14),U=0|o(),b=0|ZI(L,r,18),U=(0|o())^U,F=0|ZI(L,r,41),U^=0|o(),h=0|C[g+((E=4|D)<<3)>>2],e=0|C[g+(E<<3)+4>>2],H=0|C[32416+(E<<3)>>2],J=0|C[32416+(E<<3)+4>>2],u=0|vg(0|(J=0|vg(0|(e=0|vg(0|(U=0|vg(0|(c=0|vg(L&(m^N)^N|0,r&(n^a)^a|0,0|P,0|c)),0|o(),b^i^F|0,0|U)),0|o(),0|h,0|e)),0|o(),0|H,0|J)),0|(H=0|o()),0|t,0|u),t=0|o(),C[B+56>>2]=u,C[B+56+4>>2]=t,e=0|ZI(s,Y,28),h=0|o(),U=0|ZI(s,Y,34),h=(0|o())^h,F=0|ZI(s,Y,39),h^=0|o(),h=0|vg(0|(H=0|vg(0|J,0|H,s&(y|f)|y&f|0,Y&(d|G)|d&G|0)),0|o(),U^e^F|0,0|h),F=0|o(),C[B+24>>2]=h,C[B+24+4>>2]=F,e=0|ZI(u,t,14),U=0|o(),H=0|ZI(u,t,18),U=(0|o())^U,J=0|ZI(u,t,41),U^=0|o(),b=0|C[g+((i=5|D)<<3)>>2],c=0|C[g+(i<<3)+4>>2],P=0|C[32416+(i<<3)>>2],M=0|C[32416+(i<<3)+4>>2],G=0|vg(0|(M=0|vg(0|(c=0|vg(0|(U=0|vg(0|(a=0|vg(u&(L^m)^m|0,t&(r^n)^n|0,0|N,0|a)),0|o(),H^e^J|0,0|U)),0|o(),0|b,0|c)),0|o(),0|P,0|M)),0|(P=0|o()),0|f,0|G),f=0|o(),C[B+48>>2]=G,C[B+48+4>>2]=f,c=0|ZI(h,F,28),b=0|o(),U=0|ZI(h,F,34),b=(0|o())^b,J=0|ZI(h,F,39),b^=0|o(),b=0|vg(0|(P=0|vg(0|M,0|P,h&(s|y)|s&y|0,F&(Y|d)|Y&d|0)),0|o(),U^c^J|0,0|b),J=0|o(),C[B+16>>2]=b,C[B+16+4>>2]=J,c=0|ZI(G,f,14),U=0|o(),P=0|ZI(G,f,18),U=(0|o())^U,M=0|ZI(G,f,41),U^=0|o(),H=0|C[g+((e=6|D)<<3)>>2],a=0|C[g+(e<<3)+4>>2],N=0|C[32416+(e<<3)>>2],R=0|C[32416+(e<<3)+4>>2],d=0|vg(0|(R=0|vg(0|(a=0|vg(0|(U=0|vg(0|(n=0|vg(G&(u^L)^L|0,f&(t^r)^r|0,0|m,0|n)),0|o(),P^c^M|0,0|U)),0|o(),0|H,0|a)),0|o(),0|N,0|R)),0|(N=0|o()),0|y,0|d),y=0|o(),C[B+40>>2]=d,C[B+40+4>>2]=y,a=0|ZI(b,J,28),H=0|o(),U=0|ZI(b,J,34),H=(0|o())^H,M=0|ZI(b,J,39),H^=0|o(),H=0|vg(0|(N=0|vg(0|R,0|N,b&(h|s)|h&s|0,J&(F|Y)|F&Y|0)),0|o(),U^a^M|0,0|H),M=0|o(),C[B+8>>2]=H,C[B+8+4>>2]=M,a=0|ZI(d,y,14),U=0|o(),N=0|ZI(d,y,18),U=(0|o())^U,R=0|ZI(d,y,41),U^=0|o(),P=0|C[g+((c=7|D)<<3)>>2],n=0|C[g+(c<<3)+4>>2],m=0|C[32416+(c<<3)>>2],x=0|C[32416+(c<<3)+4>>2],Y=0|vg(0|(x=0|vg(0|(n=0|vg(0|(U=0|vg(0|(r=0|vg(d&(G^u)^u|0,y&(f^t)^t|0,0|L,0|r)),0|o(),N^a^R|0,0|U)),0|o(),0|P,0|n)),0|o(),0|m,0|x)),0|(m=0|o()),0|s,0|Y),s=0|o(),C[B+32>>2]=Y,C[B+32+4>>2]=s,n=0|ZI(H,M,28),P=0|o(),U=0|ZI(H,M,34),P=(0|o())^P,R=0|ZI(H,M,39),P^=0|o(),P=0|vg(0|(m=0|vg(0|x,0|m,H&(b|h)|b&h|0,M&(J|F)|J&F|0)),0|o(),U^n^R|0,0|P),R=0|o(),C[B>>2]=P,C[B+4>>2]=R,n=0|ZI(Y,s,14),U=0|o(),m=0|ZI(Y,s,18),U=(0|o())^U,x=0|ZI(Y,s,41),U^=0|o(),N=0|C[g+((a=8|D)<<3)>>2],r=0|C[g+(a<<3)+4>>2],L=0|C[32416+(a<<3)>>2],K=0|C[32416+(a<<3)+4>>2],F=0|vg(0|(K=0|vg(0|(r=0|vg(0|(U=0|vg(0|(t=0|vg(Y&(d^G)^G|0,s&(y^f)^f|0,0|u,0|t)),0|o(),m^n^x|0,0|U)),0|o(),0|N,0|r)),0|o(),0|L,0|K)),0|(L=0|o()),0|h,0|F),h=0|o(),C[B+24>>2]=F,C[B+24+4>>2]=h,r=0|ZI(P,R,28),N=0|o(),U=0|ZI(P,R,34),N=(0|o())^N,x=0|ZI(P,R,39),N^=0|o(),N=0|vg(0|(L=0|vg(0|K,0|L,P&(H|b)|H&b|0,R&(M|J)|M&J|0)),0|o(),U^r^x|0,0|N),x=0|o(),C[B+56>>2]=N,C[B+56+4>>2]=x,r=0|ZI(F,h,14),U=0|o(),L=0|ZI(F,h,18),U=(0|o())^U,K=0|ZI(F,h,41),U^=0|o(),m=0|C[g+((n=9|D)<<3)>>2],t=0|C[g+(n<<3)+4>>2],u=0|C[32416+(n<<3)>>2],X=0|C[32416+(n<<3)+4>>2],J=0|vg(0|(X=0|vg(0|(t=0|vg(0|(U=0|vg(0|(f=0|vg(F&(Y^d)^d|0,h&(s^y)^y|0,0|G,0|f)),0|o(),L^r^K|0,0|U)),0|o(),0|m,0|t)),0|o(),0|u,0|X)),0|(u=0|o()),0|b,0|J),b=0|o(),C[B+16>>2]=J,C[B+16+4>>2]=b,t=0|ZI(N,x,28),m=0|o(),U=0|ZI(N,x,34),m=(0|o())^m,K=0|ZI(N,x,39),m^=0|o(),m=0|vg(0|(u=0|vg(0|X,0|u,N&(P|H)|P&H|0,x&(R|M)|R&M|0)),0|o(),U^t^K|0,0|m),K=0|o(),C[B+48>>2]=m,C[B+48+4>>2]=K,t=0|ZI(J,b,14),U=0|o(),u=0|ZI(J,b,18),U=(0|o())^U,X=0|ZI(J,b,41),U^=0|o(),L=0|C[g+((r=10|D)<<3)>>2],f=0|C[g+(r<<3)+4>>2],G=0|C[32416+(r<<3)>>2],p=0|C[32416+(r<<3)+4>>2],M=0|vg(0|(p=0|vg(0|(f=0|vg(0|(U=0|vg(0|(y=0|vg(J&(F^Y)^Y|0,b&(h^s)^s|0,0|d,0|y)),0|o(),u^t^X|0,0|U)),0|o(),0|L,0|f)),0|o(),0|G,0|p)),0|(G=0|o()),0|H,0|M),H=0|o(),C[B+8>>2]=M,C[B+8+4>>2]=H,f=0|ZI(m,K,28),L=0|o(),U=0|ZI(m,K,34),L=(0|o())^L,X=0|ZI(m,K,39),L^=0|o(),L=0|vg(0|(G=0|vg(0|p,0|G,m&(N|P)|N&P|0,K&(x|R)|x&R|0)),0|o(),U^f^X|0,0|L),X=0|o(),C[B+40>>2]=L,C[B+40+4>>2]=X,f=0|ZI(M,H,14),U=0|o(),G=0|ZI(M,H,18),U=(0|o())^U,p=0|ZI(M,H,41),U^=0|o(),u=0|C[g+((t=11|D)<<3)>>2],y=0|C[g+(t<<3)+4>>2],d=0|C[32416+(t<<3)>>2],k=0|C[32416+(t<<3)+4>>2],R=0|vg(0|(k=0|vg(0|(y=0|vg(0|(U=0|vg(0|(s=0|vg(M&(J^F)^F|0,H&(b^h)^h|0,0|Y,0|s)),0|o(),G^f^p|0,0|U)),0|o(),0|u,0|y)),0|o(),0|d,0|k)),0|(d=0|o()),0|P,0|R),P=0|o(),C[B>>2]=R,C[B+4>>2]=P,y=0|ZI(L,X,28),u=0|o(),U=0|ZI(L,X,34),u=(0|o())^u,p=0|ZI(L,X,39),u^=0|o(),u=0|vg(0|(d=0|vg(0|k,0|d,L&(m|N)|m&N|0,X&(K|x)|K&x|0)),0|o(),U^y^p|0,0|u),p=0|o(),C[B+32>>2]=u,C[B+32+4>>2]=p,y=0|ZI(R,P,14),U=0|o(),d=0|ZI(R,P,18),U=(0|o())^U,k=0|ZI(R,P,41),U^=0|o(),G=0|C[g+((f=12|D)<<3)>>2],s=0|C[g+(f<<3)+4>>2],Y=0|C[32416+(f<<3)>>2],l=0|C[32416+(f<<3)+4>>2],x=0|vg(0|(l=0|vg(0|(s=0|vg(0|(U=0|vg(0|(h=0|vg(R&(M^J)^J|0,P&(H^b)^b|0,0|F,0|h)),0|o(),d^y^k|0,0|U)),0|o(),0|G,0|s)),0|o(),0|Y,0|l)),0|(Y=0|o()),0|N,0|x),N=0|o(),C[B+56>>2]=x,C[B+56+4>>2]=N,s=0|ZI(u,p,28),G=0|o(),U=0|ZI(u,p,34),G=(0|o())^G,k=0|ZI(u,p,39),G^=0|o(),G=0|vg(0|(Y=0|vg(0|l,0|Y,u&(L|m)|L&m|0,p&(X|K)|X&K|0)),0|o(),U^s^k|0,0|G),k=0|o(),C[B+24>>2]=G,C[B+24+4>>2]=k,s=0|ZI(x,N,14),U=0|o(),Y=0|ZI(x,N,18),U=(0|o())^U,l=0|ZI(x,N,41),U^=0|o(),d=0|C[g+((y=13|D)<<3)>>2],h=0|C[g+(y<<3)+4>>2],F=0|C[32416+(y<<3)>>2],_=0|C[32416+(y<<3)+4>>2],K=0|vg(0|(_=0|vg(0|(h=0|vg(0|(U=0|vg(0|(b=0|vg(x&(R^M)^M|0,N&(P^H)^H|0,0|J,0|b)),0|o(),Y^s^l|0,0|U)),0|o(),0|d,0|h)),0|o(),0|F,0|_)),0|(F=0|o()),0|m,0|K),m=0|o(),C[B+48>>2]=K,C[B+48+4>>2]=m,h=0|ZI(G,k,28),d=0|o(),U=0|ZI(G,k,34),d=(0|o())^d,l=0|ZI(G,k,39),d^=0|o(),d=0|vg(0|(F=0|vg(0|_,0|F,G&(u|L)|u&L|0,k&(p|X)|p&X|0)),0|o(),U^h^l|0,0|d),l=0|o(),C[B+16>>2]=d,C[B+16+4>>2]=l,h=0|ZI(K,m,14),U=0|o(),F=0|ZI(K,m,18),U=(0|o())^U,_=0|ZI(K,m,41),U^=0|o(),Y=0|C[g+((s=14|D)<<3)>>2],b=0|C[g+(s<<3)+4>>2],J=0|C[32416+(s<<3)>>2],v=0|C[32416+(s<<3)+4>>2],X=0|vg(0|(v=0|vg(0|(b=0|vg(0|(U=0|vg(0|(H=0|vg(K&(x^R)^R|0,m&(N^P)^P|0,0|M,0|H)),0|o(),F^h^_|0,0|U)),0|o(),0|Y,0|b)),0|o(),0|J,0|v)),0|(J=0|o()),0|L,0|X),L=0|o(),C[B+40>>2]=X,C[B+40+4>>2]=L,b=0|ZI(d,l,28),Y=0|o(),U=0|ZI(d,l,34),Y=(0|o())^Y,_=0|ZI(d,l,39),Y^=0|o(),Y=0|vg(0|(J=0|vg(0|v,0|J,d&(G|u)|G&u|0,l&(k|p)|k&p|0)),0|o(),U^b^_|0,0|Y),_=0|o(),C[B+8>>2]=Y,C[B+8+4>>2]=_,b=0|ZI(X,L,14),U=0|o(),J=0|ZI(X,L,18),U=(0|o())^U,v=0|ZI(X,L,41),U^=0|o(),F=0|C[g+((h=15|D)<<3)>>2],H=0|C[g+(h<<3)+4>>2],M=0|C[32416+(h<<3)>>2],S=0|C[32416+(h<<3)+4>>2],p=0|vg(0|(S=0|vg(0|(H=0|vg(0|(U=0|vg(0|(P=0|vg(X&(K^x)^x|0,L&(m^N)^N|0,0|R,0|P)),0|o(),J^b^v|0,0|U)),0|o(),0|F,0|H)),0|o(),0|M,0|S)),0|(M=0|o()),0|u,0|p),u=0|o(),C[B+32>>2]=p,C[B+32+4>>2]=u,u=0|ZI(Y,_,28),p=0|o(),H=0|ZI(Y,_,34),p=(0|o())^p,F=0|ZI(Y,_,39),p^=0|o(),p=0|vg(0|(k=0|vg(0|S,0|M,Y&(d|G)|d&G|0,_&(l|k)|l&k|0)),0|o(),H^u^F|0,0|p),F=0|o(),C[B>>2]=p,C[B+4>>2]=F,64==(0|D))break;d=0|ZI(K=0|C[g+(s<<3)>>2],X=0|C[g+(s<<3)+4>>2],19),N=0|o(),H=0|ZI(K,X,61),k=0|o(),k=0|vg((R=0|yg(0|K,0|X,6))^d^H|0,0|(k=(0|o())^N^k),0|(N=0|C[g+(n<<3)>>2]),0|(Y=0|C[g+(n<<3)+4>>2])),H=0|o(),b=0|ZI(d=0|C[g+(w<<3)>>2],R=0|C[g+(w<<3)+4>>2],1),p=0|o(),m=0|ZI(d,R,8),P=0|o(),J=0|yg(0|d,0|R,7),P=(0|o())^p^P,P=0|vg(0|(p=0|vg(0|k,0|H,0|C[(p=g+(D<<3)|0)>>2],0|C[p+4>>2])),0|o(),J^b^m|0,0|P),m=0|o(),C[(b=g+((D=D+16|0)<<3)|0)>>2]=P,C[b+4>>2]=m,p=0|ZI(b=0|C[g+(h<<3)>>2],J=0|C[g+(h<<3)+4>>2],19),H=0|o(),k=0|ZI(b,J,61),l=0|o(),F=0|yg(0|b,0|J,6),l=(0|o())^H^l,H=0|C[g+(w+9<<3)>>2],L=0|C[g+(w+9<<3)+4>>2],u=0|ZI(_=0|C[g+(w+1<<3)>>2],M=0|C[g+(w+1<<3)+4>>2],1),U=0|o(),G=0|ZI(_,M,8),S=0|o(),v=0|yg(0|_,0|M,7),S=(0|o())^U^S,S=0|vg(0|(l=0|vg(0|(R=0|vg(0|H,0|L,0|d,0|R)),0|o(),F^p^k|0,0|l)),0|o(),v^u^G|0,0|S),G=0|o(),C[g+(w+16<<3)>>2]=S,C[g+(w+16<<3)+4>>2]=G,u=0|ZI(P,m,19),v=0|o(),l=0|ZI(P,m,61),w=0|o(),w=0|vg((m=0|yg(0|P,0|m,6))^u^l|0,0|(w=(0|o())^v^w),0|(v=0|C[g+(t<<3)>>2]),0|(P=0|C[g+(t<<3)+4>>2])),l=0|o(),k=0|ZI(u=0|C[g+(Q<<3)>>2],m=0|C[g+(Q<<3)+4>>2],1),p=0|o(),F=0|ZI(u,m,8),R=0|o(),d=0|yg(0|u,0|m,7),R=(0|o())^p^R,R=0|vg(0|(M=0|vg(0|w,0|l,0|_,0|M)),0|o(),d^k^F|0,0|R),F=0|o(),C[g+(I+16<<3)>>2]=R,C[g+(I+16<<3)+4>>2]=F,k=0|ZI(S,G,19),d=0|o(),M=0|ZI(S,G,61),_=0|o(),G=0|yg(0|S,0|G,6),_=(0|o())^d^_,d=0|C[g+(Q+9<<3)>>2],S=0|C[g+(Q+9<<3)+4>>2],w=0|ZI(l=0|C[g+(Q+1<<3)>>2],I=0|C[g+(Q+1<<3)+4>>2],1),p=0|o(),L=0|ZI(l,I,8),H=0|o(),U=0|yg(0|l,0|I,7),H=(0|o())^p^H,H=0|vg(0|(_=0|vg(0|(m=0|vg(0|d,0|S,0|u,0|m)),0|o(),G^k^M|0,0|_)),0|o(),U^w^L|0,0|H),L=0|o(),C[g+(Q+16<<3)>>2]=H,C[g+(Q+16<<3)+4>>2]=L,w=0|ZI(R,F,19),U=0|o(),_=0|ZI(R,F,61),M=0|o(),M=0|vg((F=0|yg(0|R,0|F,6))^w^_|0,0|(M=(0|o())^U^M),0|(U=0|C[g+(y<<3)>>2]),0|(R=0|C[g+(y<<3)+4>>2])),_=0|o(),k=0|ZI(w=0|C[g+(i<<3)>>2],F=0|C[g+(i<<3)+4>>2],1),G=0|o(),m=0|ZI(w,F,8),u=0|o(),S=0|yg(0|w,0|F,7),u=(0|o())^G^u,u=0|vg(0|(I=0|vg(0|M,0|_,0|l,0|I)),0|o(),S^k^m|0,0|u),m=0|o(),C[g+(E+16<<3)>>2]=u,C[g+(E+16<<3)+4>>2]=m,k=0|ZI(H,L,19),S=0|o(),I=0|ZI(H,L,61),l=0|o(),L=0|yg(0|H,0|L,6),l=(0|o())^S^l,S=0|C[g+(i+9<<3)>>2],H=0|C[g+(i+9<<3)+4>>2],G=0|ZI(_=0|C[g+(i+1<<3)>>2],M=0|C[g+(i+1<<3)+4>>2],1),d=0|o(),p=0|ZI(_,M,8),x=0|o(),Q=0|yg(0|_,0|M,7),x=(0|o())^d^x,x=0|vg(0|(l=0|vg(0|(F=0|vg(0|S,0|H,0|w,0|F)),0|o(),L^k^I|0,0|l)),0|o(),Q^G^p|0,0|x),p=0|o(),C[g+(i+16<<3)>>2]=x,C[g+(i+16<<3)+4>>2]=p,G=0|ZI(u,m,19),Q=0|o(),l=0|ZI(u,m,61),I=0|o(),I=0|vg((m=0|yg(0|u,0|m,6))^G^l|0,(0|o())^Q^I|0,0|b,0|J),Q=0|o(),m=0|ZI(l=0|C[g+(c<<3)>>2],G=0|C[g+(c<<3)+4>>2],1),u=0|o(),k=0|ZI(l,G,8),L=0|o(),F=0|yg(0|l,0|G,7),L=(0|o())^u^L,L=0|vg(0|(M=0|vg(0|I,0|Q,0|_,0|M)),0|o(),F^m^k|0,0|L),k=0|o(),C[g+(e+16<<3)>>2]=L,C[g+(e+16<<3)+4>>2]=k,m=0|ZI(x,p,19),F=0|o(),M=0|ZI(x,p,61),_=0|o(),p=0|yg(0|x,0|p,6),_=(0|o())^F^_,F=0|C[g+(c+9<<3)>>2],x=0|C[g+(c+9<<3)+4>>2],u=0|ZI(Q=0|C[g+(c+1<<3)>>2],I=0|C[g+(c+1<<3)+4>>2],1),w=0|o(),H=0|ZI(Q,I,8),S=0|o(),d=0|yg(0|Q,0|I,7),S=(0|o())^w^S,S=0|vg(0|(_=0|vg(0|(G=0|vg(0|F,0|x,0|l,0|G)),0|o(),p^m^M|0,0|_)),0|o(),d^u^H|0,0|S),H=0|o(),C[g+(c+16<<3)>>2]=S,C[g+(c+16<<3)+4>>2]=H,u=0|ZI(L,k,19),d=0|o(),_=0|ZI(L,k,61),M=0|o(),M=0|vg((k=0|yg(0|L,0|k,6))^u^_|0,0|(M=(0|o())^d^M),0|C[g+(a+9<<3)>>2],0|C[g+(a+9<<3)+4>>2]),_=0|o(),u=0|ZI(N,Y,1),k=0|o(),d=0|ZI(N,Y,8),L=0|o(),m=0|yg(0|N,0|Y,7),L=k^(0|o())^L,L=0|vg(0|(I=0|vg(0|M,0|_,0|Q,0|I)),0|o(),u^m^d|0,0|L),d=0|o(),C[g+(a+16<<3)>>2]=L,C[g+(a+16<<3)+4>>2]=d,m=0|ZI(S,H,19),u=0|o(),I=0|ZI(S,H,61),Q=0|o(),H=0|yg(0|S,0|H,6),Q=(0|o())^u^Q,u=0|C[g+(n+9<<3)>>2],S=0|C[g+(n+9<<3)+4>>2],k=0|ZI(_=0|C[g+(n+1<<3)>>2],M=0|C[g+(n+1<<3)+4>>2],1),p=0|o(),G=0|ZI(_,M,8),l=0|o(),x=0|yg(0|_,0|M,7),l=(0|o())^p^l,l=0|vg(0|(Q=0|vg(0|(Y=0|vg(0|u,0|S,0|N,0|Y)),0|o(),H^m^I|0,0|Q)),0|o(),x^k^G|0,0|l),G=0|o(),C[g+(n+16<<3)>>2]=l,C[g+(n+16<<3)+4>>2]=G,k=0|ZI(L,d,19),x=0|o(),Q=0|ZI(L,d,61),I=0|o(),I=0|vg((d=0|yg(0|L,0|d,6))^k^Q|0,0|(I=(0|o())^x^I),0|C[g+(r+9<<3)>>2],0|C[g+(r+9<<3)+4>>2]),Q=0|o(),k=0|ZI(v,P,1),d=0|o(),x=0|ZI(v,P,8),L=0|o(),m=0|yg(0|v,0|P,7),L=d^(0|o())^L,L=0|vg(0|(M=0|vg(0|I,0|Q,0|_,0|M)),0|o(),k^m^x|0,0|L),x=0|o(),C[g+(r+16<<3)>>2]=L,C[g+(r+16<<3)+4>>2]=x,m=0|ZI(l,G,19),k=0|o(),M=0|ZI(l,G,61),_=0|o(),G=0|yg(0|l,0|G,6),_=(0|o())^k^_,k=0|C[g+(t+9<<3)>>2],l=0|C[g+(t+9<<3)+4>>2],d=0|ZI(Q=0|C[g+(t+1<<3)>>2],I=0|C[g+(t+1<<3)+4>>2],1),H=0|o(),Y=0|ZI(Q,I,8),N=0|o(),S=0|yg(0|Q,0|I,7),N=(0|o())^H^N,N=0|vg(0|(_=0|vg(0|(P=0|vg(0|k,0|l,0|v,0|P)),0|o(),G^m^M|0,0|_)),0|o(),S^d^Y|0,0|N),Y=0|o(),C[g+(t+16<<3)>>2]=N,C[g+(t+16<<3)+4>>2]=Y,d=0|ZI(L,x,19),S=0|o(),_=0|ZI(L,x,61),M=0|o(),M=0|vg((x=0|yg(0|L,0|x,6))^d^_|0,0|(M=(0|o())^S^M),0|C[g+(f+9<<3)>>2],0|C[g+(f+9<<3)+4>>2]),_=0|o(),d=0|ZI(U,R,1),x=0|o(),S=0|ZI(U,R,8),L=0|o(),m=0|yg(0|U,0|R,7),L=x^(0|o())^L,L=0|vg(0|(I=0|vg(0|M,0|_,0|Q,0|I)),0|o(),d^m^S|0,0|L),S=0|o(),C[g+(f+16<<3)>>2]=L,C[g+(f+16<<3)+4>>2]=S,m=0|ZI(N,Y,19),d=0|o(),I=0|ZI(N,Y,61),Q=0|o(),Y=0|yg(0|N,0|Y,6),Q=(0|o())^d^Q,d=0|C[g+(y+9<<3)>>2],N=0|C[g+(y+9<<3)+4>>2],x=0|ZI(_=0|C[g+(y+1<<3)>>2],M=0|C[g+(y+1<<3)+4>>2],1),G=0|o(),P=0|ZI(_,M,8),v=0|o(),M=0|yg(0|_,0|M,7),v=(0|o())^G^v,v=0|vg(0|(Q=0|vg(0|(R=0|vg(0|d,0|N,0|U,0|R)),0|o(),Y^m^I|0,0|Q)),0|o(),M^x^P|0,0|v),P=0|o(),C[g+(y+16<<3)>>2]=v,C[g+(y+16<<3)+4>>2]=P,x=0|ZI(L,S,19),M=0|o(),Q=0|ZI(L,S,61),I=0|o(),S=0|yg(0|L,0|S,6),I=(0|o())^M^I,M=0|C[g+(s+9<<3)>>2],L=0|C[g+(s+9<<3)+4>>2],m=0|ZI(b,J,1),Y=0|o(),R=0|ZI(b,J,8),U=0|o(),N=0|yg(0|b,0|J,7),U=Y^(0|o())^U,U=0|vg(0|(I=0|vg(0|(X=0|vg(0|M,0|L,0|K,0|X)),0|o(),S^x^Q|0,0|I)),0|o(),m^N^R|0,0|U),R=0|o(),C[g+(s+16<<3)>>2]=U,C[g+(s+16<<3)+4>>2]=R,R=0|ZI(v,P,19),U=0|o(),N=0|ZI(v,P,61),m=0|o(),P=0|yg(0|v,0|P,6),m=(0|o())^U^m,U=0|C[g+(h+9<<3)>>2],v=0|C[g+(h+9<<3)+4>>2],x=0|ZI(I=0|C[g+(h+1<<3)>>2],Q=0|C[g+(h+1<<3)+4>>2],1),S=0|o(),X=0|ZI(I,Q,8),K=0|o(),L=0|yg(0|I,0|Q,7),K=(0|o())^S^K,K=0|vg(0|(m=0|vg(0|(J=0|vg(0|U,0|v,0|b,0|J)),0|o(),P^R^N|0,0|m)),0|o(),L^x^X|0,0|K),X=0|o(),C[g+(h+16<<3)>>2]=K,C[g+(h+16<<3)+4>>2]=X}while(D>>>0<80);I=0;do{x=B+(I<<3)|0,x=0|vg(0|C[(X=A+(I<<3)|0)>>2],0|C[X+4>>2],0|C[x>>2],0|C[x+4>>2]),K=0|o(),C[X>>2]=x,C[X+4>>2]=K,I=I+1|0}while(8!=(0|I))}function F(A){A|=0;var I,g=0,B=0,Q=0,E=0,i=0,e=0,o=0,c=0,a=0,n=0,r=0,t=0,f=0,w=0,s=0,h=0,D=0,F=0,p=0,u=0;I=y,f=y=y+63&-64,y=y+16|0;do{if(A>>>0<245){if(t=A>>>0<11?16:A+11&-8,(n=0|C[8679])>>>(t>>>3)&3|0)return A=0|C[8+(B=34756+((n>>>(t>>>3)&1^1)+(t>>>3)<<1<<2)|0)>>2],(0|(g=0|C[A+8>>2]))==(0|B)?C[8679]=n&~(1<<(n>>>(t>>>3)&1^1)+(t>>>3)):(C[g+12>>2]=B,C[B+8>>2]=g),u=(n>>>(t>>>3)&1^1)+(t>>>3)<<3,C[A+4>>2]=3|u,C[A+u+4>>2]=1|C[A+u+4>>2],y=I,0|A+8;if(t>>>0>(r=0|C[8681])>>>0){if(n>>>(t>>>3)|0)return Q=0|C[34756+((E=((Q=(((A=n>>>(t>>>3)<<(t>>>3)&(2<<(t>>>3)|0-(2<<(t>>>3))))&0-A)-1|0)>>>(((A&0-A)-1|0)>>>12&16))>>>5&8|((A&0-A)-1|0)>>>12&16|Q>>>(Q>>>5&8)>>>2&4|(E=Q>>>(Q>>>5&8)>>>(Q>>>(Q>>>5&8)>>>2&4))>>>1&2|E>>>(E>>>1&2)>>>1&1)+(E>>>(E>>>1&2)>>>(E>>>(E>>>1&2)>>>1&1))|0)<<1<<2)+8>>2],(0|(A=0|C[Q+8>>2]))==(34756+(E<<1<<2)|0)?(C[8679]=n&~(1<<E),A=n&~(1<<E)):(C[A+12>>2]=34756+(E<<1<<2),C[34756+(E<<1<<2)+8>>2]=A,A=n),C[Q+4>>2]=3|t,C[Q+t+4>>2]=(E<<3)-t|1,C[Q+(E<<3)>>2]=(E<<3)-t,0|r&&(B=0|C[8684],A&1<<(r>>>3)?(A=34756+(r>>>3<<1<<2)+8|0,g=0|C[34756+(r>>>3<<1<<2)+8>>2]):(C[8679]=A|1<<(r>>>3),A=34756+(r>>>3<<1<<2)+8|0,g=34756+(r>>>3<<1<<2)|0),C[A>>2]=B,C[g+12>>2]=B,C[B+8>>2]=g,C[B+12>>2]=34756+(r>>>3<<1<<2)),C[8681]=(E<<3)-t,C[8684]=Q+t,y=I,0|Q+8;if(e=0|C[8680]){for(a=0|C[35020+(((c=((e&0-e)-1|0)>>>(((e&0-e)-1|0)>>>12&16))>>>5&8|((e&0-e)-1|0)>>>12&16|c>>>(c>>>5&8)>>>2&4|(a=c>>>(c>>>5&8)>>>(c>>>(c>>>5&8)>>>2&4))>>>1&2|a>>>(a>>>1&2)>>>1&1)+(a>>>(a>>>1&2)>>>(a>>>(a>>>1&2)>>>1&1))<<2)>>2],c=(-8&C[a+4>>2])-t|0,g=a;(A=0|C[g+16>>2])||(A=0|C[g+20>>2]);)c=(o=(g=(-8&C[A+4>>2])-t|0)>>>0<c>>>0)?g:c,g=A,a=o?A:a;if((o=a+t|0)>>>0>a>>>0){E=0|C[a+24>>2],A=0|C[a+12>>2];do{if((0|A)==(0|a)){if(!(A=0|C[(g=a+20|0)>>2])&&!(A=0|C[(g=a+16|0)>>2])){g=0;break}for(;;)if(B=0|C[(Q=A+20|0)>>2])A=B,g=Q;else{if(!(B=0|C[(Q=A+16|0)>>2]))break;A=B,g=Q}C[g>>2]=0,g=A}else g=0|C[a+8>>2],C[g+12>>2]=A,C[A+8>>2]=g,g=A}while(0);do{if(0|E){if(A=0|C[a+28>>2],(0|a)==(0|C[35020+(A<<2)>>2])){if(C[35020+(A<<2)>>2]=g,!g){C[8680]=e&~(1<<A);break}}else if(C[((0|C[E+16>>2])==(0|a)?E+16|0:E+20|0)>>2]=g,!g)break;C[g+24>>2]=E,0|(A=0|C[a+16>>2])&&(C[g+16>>2]=A,C[A+24>>2]=g),0|(A=0|C[a+20>>2])&&(C[g+20>>2]=A,C[A+24>>2]=g)}}while(0);return c>>>0<16?(u=c+t|0,C[a+4>>2]=3|u,C[(u=a+u+4|0)>>2]=1|C[u>>2]):(C[a+4>>2]=3|t,C[o+4>>2]=1|c,C[o+c>>2]=c,0|r&&(B=0|C[8684],1<<(r>>>3)&n?(A=34756+(r>>>3<<1<<2)+8|0,g=0|C[34756+(r>>>3<<1<<2)+8>>2]):(C[8679]=1<<(r>>>3)|n,A=34756+(r>>>3<<1<<2)+8|0,g=34756+(r>>>3<<1<<2)|0),C[A>>2]=B,C[g+12>>2]=B,C[B+8>>2]=g,C[B+12>>2]=34756+(r>>>3<<1<<2)),C[8681]=c,C[8684]=o),y=I,0|a+8}}}}else if(A>>>0<=4294967231){if(t=A+11&-8,Q=0|C[8680]){c=(A+11|0)>>>8?t>>>0>16777215?31:t>>>(7+(c=14-((520192+(c=(A+11|0)>>>8<<((1048320+((A+11|0)>>>8)|0)>>>16&8))|0)>>>16&4|(1048320+((A+11|0)>>>8)|0)>>>16&8|(245760+(c<<((c+520192|0)>>>16&4))|0)>>>16&2)+(c<<((c+520192|0)>>>16&4)<<((245760+(c<<((c+520192|0)>>>16&4))|0)>>>16&2)>>>15)|0)|0)&1|c<<1:0,A=0|C[35020+(c<<2)>>2];A:do{if(A)for(B=0-t|0,g=0,o=t<<(31==(0|c)?0:25-(c>>>1)|0),e=0;;){if((E=(-8&C[A+4>>2])-t|0)>>>0<B>>>0){if(!E){B=0,g=A,h=65;break A}B=E,e=A}if(g=0==(0|(h=0|C[A+20>>2]))|(0|h)==(0|(A=0|C[A+16+(o>>>31<<2)>>2]))?g:h,!A){A=e,h=61;break}o<<=1}else B=0-t|0,g=0,A=0,h=61}while(0);if(61==(0|h)){if(0==(0|g)&0==(0|A)){if(!(((A=2<<c)|0-A)&Q))break;g=0|C[35020+(((r=((A|0-A)&Q&0-((A|0-A)&Q))-1|0)>>>(r>>>12&16)>>>5&8|r>>>12&16|(A=r>>>(r>>>12&16)>>>(r>>>(r>>>12&16)>>>5&8))>>>2&4|A>>>(A>>>2&4)>>>1&2|(g=A>>>(A>>>2&4)>>>(A>>>(A>>>2&4)>>>1&2))>>>1&1)+(g>>>(g>>>1&1))<<2)>>2],A=0}g?h=65:(e=B,o=A)}if(65==(0|h))for(;;){if(B=(E=(r=(-8&C[g+4>>2])-t|0)>>>0<B>>>0)?r:B,E=E?g:A,(A=0|C[g+16>>2])||(A=0|C[g+20>>2]),!A){e=B,o=E;break}g=A,A=E}if(0!=(0|o)&&e>>>0<((0|C[8681])-t|0)>>>0&&(a=o+t|0)>>>0>o>>>0){i=0|C[o+24>>2],A=0|C[o+12>>2];do{if((0|A)==(0|o)){if(!(A=0|C[(g=o+20|0)>>2])&&!(A=0|C[(g=o+16|0)>>2])){A=0;break}for(;;)if(B=0|C[(E=A+20|0)>>2])A=B,g=E;else{if(!(B=0|C[(E=A+16|0)>>2]))break;A=B,g=E}C[g>>2]=0}else u=0|C[o+8>>2],C[u+12>>2]=A,C[A+8>>2]=u}while(0);do{if(i){if(g=0|C[o+28>>2],(0|o)==(0|C[35020+(g<<2)>>2])){if(C[35020+(g<<2)>>2]=A,!A){C[8680]=Q&~(1<<g),Q&=~(1<<g);break}}else if(C[((0|C[i+16>>2])==(0|o)?i+16|0:i+20|0)>>2]=A,!A)break;C[A+24>>2]=i,0|(g=0|C[o+16>>2])&&(C[A+16>>2]=g,C[g+24>>2]=A),(g=0|C[o+20>>2])&&(C[A+20>>2]=g,C[g+24>>2]=A)}}while(0);A:do{if(e>>>0<16)u=e+t|0,C[o+4>>2]=3|u,C[(u=o+u+4|0)>>2]=1|C[u>>2];else{if(C[o+4>>2]=3|t,C[a+4>>2]=1|e,C[a+e>>2]=e,B=e>>>3,e>>>0<256){(A=0|C[8679])&1<<B?(A=34756+(B<<1<<2)+8|0,g=0|C[34756+(B<<1<<2)+8>>2]):(C[8679]=A|1<<B,A=34756+(B<<1<<2)+8|0,g=34756+(B<<1<<2)|0),C[A>>2]=a,C[g+12>>2]=a,C[a+8>>2]=g,C[a+12>>2]=34756+(B<<1<<2);break}if(A=35020+((B=(A=e>>>8)?e>>>0>16777215?31:e>>>(7+(B=14-((520192+(A<<((A+1048320|0)>>>16&8))|0)>>>16&4|(A+1048320|0)>>>16&8|(245760+(B=A<<((A+1048320|0)>>>16&8)<<((520192+(A<<((A+1048320|0)>>>16&8))|0)>>>16&4))|0)>>>16&2)+(B<<((B+245760|0)>>>16&2)>>>15)|0)|0)&1|B<<1:0)<<2)|0,C[a+28>>2]=B,C[a+16+4>>2]=0,C[a+16>>2]=0,!(Q&(g=1<<B))){C[8680]=Q|g,C[A>>2]=a,C[a+24>>2]=A,C[a+12>>2]=a,C[a+8>>2]=a;break}A=0|C[A>>2];I:do{if((-8&C[A+4>>2]|0)!=(0|e)){for(Q=e<<(31==(0|B)?0:25-(B>>>1)|0);g=0|C[(B=A+16+(Q>>>31<<2)|0)>>2];){if((-8&C[g+4>>2]|0)==(0|e)){A=g;break I}Q<<=1,A=g}C[B>>2]=a,C[a+24>>2]=A,C[a+12>>2]=a,C[a+8>>2]=a;break A}}while(0);u=0|C[(p=A+8|0)>>2],C[u+12>>2]=a,C[p>>2]=a,C[a+8>>2]=u,C[a+12>>2]=A,C[a+24>>2]=0}}while(0);return y=I,0|o+8}}}else t=-1}while(0);if((B=0|C[8681])>>>0>=t>>>0)return g=B-t|0,A=0|C[8684],g>>>0>15?(u=A+t|0,C[8684]=u,C[8681]=g,C[u+4>>2]=1|g,C[A+B>>2]=g,C[A+4>>2]=3|t):(C[8681]=0,C[8684]=0,C[A+4>>2]=3|B,C[A+B+4>>2]=1|C[A+B+4>>2]),y=I,0|A+8;if((E=0|C[8682])>>>0>t>>>0)return F=E-t|0,C[8682]=F,p=(u=0|C[8685])+t|0,C[8685]=p,C[p+4>>2]=1|F,C[u+4>>2]=3|t,y=I,0|u+8;if(0|C[8797]?A=0|C[8799]:(C[8799]=4096,C[8798]=4096,C[8800]=-1,C[8801]=-1,C[8802]=0,C[8790]=0,C[8797]=-16&f^1431655768,A=4096),e=t+48|0,((a=A+(o=t+47|0)|0)&(c=0-A|0))>>>0<=t>>>0)return y=I,0;if(0|(A=0|C[8789])&&(((f=0|C[8787])+(a&c)|0)>>>0<=f>>>0||(f+(a&c)|0)>>>0>A>>>0))return y=I,0;A:do{if(4&C[8790])A=0,h=143;else{g=0|C[8685];I:do{if(g){for(B=35164;!((A=0|C[B>>2])>>>0<=g>>>0&&(A+(0|C[(s=B+4|0)>>2])|0)>>>0>g>>>0);){if(!(A=0|C[B+8>>2])){h=128;break I}B=A}if((a-E&c)>>>0<2147483647)if((0|(A=0|bI(a-E&c)))==((0|C[B>>2])+(0|C[s>>2])|0)){if(-1!=(0|A)){e=A,i=a-E&c,h=145;break A}A=a-E&c}else Q=A,B=a-E&c,h=136;else A=0}else h=128}while(0);do{if(128==(0|h))if(-1!=(0|(g=0|bI(0)))&&(i=(0==((i=0|C[8798])-1&g|0)?0:(i+-1+g&0-i)-g|0)+(a&c)|0,w=0|C[8787],i>>>0>t>>>0&i>>>0<2147483647)){if(0|(s=0|C[8789])&&(i+w|0)>>>0<=w>>>0|(i+w|0)>>>0>s>>>0){A=0;break}if((0|(A=0|bI(i)))==(0|g)){e=g,h=145;break A}Q=A,B=i,h=136}else A=0}while(0);do{if(136==(0|h)){if(g=0-B|0,!(e>>>0>B>>>0&B>>>0<2147483647&-1!=(0|Q))){if(-1==(0|Q)){A=0;break}e=Q,i=B,h=145;break A}if((A=o-B+(A=0|C[8799])&0-A)>>>0>=2147483647){e=Q,i=B,h=145;break A}if(-1==(0|bI(A))){bI(g),A=0;break}e=Q,i=A+B|0,h=145;break A}}while(0);C[8790]=4|C[8790],h=143}}while(0);if(143==(0|h)&&(a&c)>>>0<2147483647&&!(-1==(0|(D=0|bI(a&c)))|1^(p=((F=0|bI(0))-D|0)>>>0>(t+40|0)>>>0)|D>>>0<F>>>0&-1!=(0|D)&-1!=(0|F)^1)&&(e=D,i=p?F-D|0:A,h=145),145==(0|h)){A=(0|C[8787])+i|0,C[8787]=A,A>>>0>(0|C[8788])>>>0&&(C[8788]=A),c=0|C[8685];A:do{if(c){for(E=35164;;){if((0|e)==((A=0|C[E>>2])+(g=0|C[(Q=E+4|0)>>2])|0)){h=154;break}if(!(B=0|C[E+8>>2]))break;E=B}if(154==(0|h)&&0==(8&C[E+12>>2]|0)&&e>>>0>c>>>0&A>>>0<=c>>>0){C[Q>>2]=g+i,u=(0|C[8682])+i|0,p=0==(c+8&7|0)?0:0-(c+8)&7,C[8685]=c+p,C[8682]=u-p,C[c+p+4>>2]=u-p|1,C[c+u+4>>2]=40,C[8686]=C[8801];break}for(e>>>0<(0|C[8683])>>>0&&(C[8683]=e),B=e+i|0,g=35164;;){if((0|C[g>>2])==(0|B)){h=162;break}if(!(A=0|C[g+8>>2]))break;g=A}if(162==(0|h)&&0==(8&C[g+12>>2]|0)){C[g>>2]=e,C[(n=g+4|0)>>2]=(0|C[n>>2])+i,a=(n=e+(0==(7&(n=e+8|0)|0)?0:0-n&7)|0)+t|0,o=(A=B+(0==(B+8&7|0)?0:0-(B+8)&7)|0)-n-t|0,C[n+4>>2]=3|t;I:do{if((0|c)==(0|A))u=(0|C[8682])+o|0,C[8682]=u,C[8685]=a,C[a+4>>2]=1|u;else{if((0|C[8684])==(0|A)){u=(0|C[8681])+o|0,C[8681]=u,C[8684]=a,C[a+4>>2]=1|u,C[a+u>>2]=u;break}if(1==(3&(e=0|C[A+4>>2])|0)){g:do{if(e>>>0<256){if(g=0|C[A+8>>2],(0|(B=0|C[A+12>>2]))==(0|g)){C[8679]=C[8679]&~(1<<(e>>>3));break}C[g+12>>2]=B,C[B+8>>2]=g;break}i=0|C[A+24>>2],g=0|C[A+12>>2];do{if((0|g)==(0|A)){if(g=0|C[A+16+4>>2])B=A+16+4|0;else{if(!(g=0|C[A+16>>2])){g=0;break}B=A+16|0}for(;;)if(Q=0|C[(E=g+20|0)>>2])g=Q,B=E;else{if(!(Q=0|C[(E=g+16|0)>>2]))break;g=Q,B=E}C[B>>2]=0}else u=0|C[A+8>>2],C[u+12>>2]=g,C[g+8>>2]=u}while(0);if(!i)break;B=0|C[A+28>>2];do{if((0|C[35020+(B<<2)>>2])==(0|A)){if(C[35020+(B<<2)>>2]=g,0|g)break;C[8680]=C[8680]&~(1<<B);break g}if(C[((0|C[i+16>>2])==(0|A)?i+16|0:i+20|0)>>2]=g,!g)break g}while(0);if(C[g+24>>2]=i,0|(B=0|C[A+16>>2])&&(C[g+16>>2]=B,C[B+24>>2]=g),!(B=0|C[A+16+4>>2]))break;C[g+20>>2]=B,C[B+24>>2]=g}while(0);A=A+(-8&e)|0,E=(-8&e)+o|0}else E=o;if(C[(B=A+4|0)>>2]=-2&C[B>>2],C[a+4>>2]=1|E,C[a+E>>2]=E,B=E>>>3,E>>>0<256){(A=0|C[8679])&1<<B?(A=34756+(B<<1<<2)+8|0,g=0|C[34756+(B<<1<<2)+8>>2]):(C[8679]=A|1<<B,A=34756+(B<<1<<2)+8|0,g=34756+(B<<1<<2)|0),C[A>>2]=a,C[g+12>>2]=a,C[a+8>>2]=g,C[a+12>>2]=34756+(B<<1<<2);break}A=E>>>8;do{if(A){if(E>>>0>16777215){Q=31;break}Q=E>>>(7+(Q=14-((520192+(A<<((A+1048320|0)>>>16&8))|0)>>>16&4|(A+1048320|0)>>>16&8|(245760+(Q=A<<((A+1048320|0)>>>16&8)<<((520192+(A<<((A+1048320|0)>>>16&8))|0)>>>16&4))|0)>>>16&2)+(Q<<((Q+245760|0)>>>16&2)>>>15)|0)|0)&1|Q<<1}else Q=0}while(0);if(g=35020+(Q<<2)|0,C[a+28>>2]=Q,C[a+16+4>>2]=0,C[a+16>>2]=0,!((A=0|C[8680])&(B=1<<Q))){C[8680]=A|B,C[g>>2]=a,C[a+24>>2]=g,C[a+12>>2]=a,C[a+8>>2]=a;break}A=0|C[g>>2];g:do{if((-8&C[A+4>>2]|0)!=(0|E)){for(Q=E<<(31==(0|Q)?0:25-(Q>>>1)|0);g=0|C[(B=A+16+(Q>>>31<<2)|0)>>2];){if((-8&C[g+4>>2]|0)==(0|E)){A=g;break g}Q<<=1,A=g}C[B>>2]=a,C[a+24>>2]=A,C[a+12>>2]=a,C[a+8>>2]=a;break I}}while(0);u=0|C[(p=A+8|0)>>2],C[u+12>>2]=a,C[p>>2]=a,C[a+8>>2]=u,C[a+12>>2]=A,C[a+24>>2]=0}}while(0);return y=I,0|n+8}for(g=35164;!((A=0|C[g>>2])>>>0<=c>>>0&&(u=A+(0|C[g+4>>2])|0)>>>0>c>>>0);)g=0|C[g+8>>2];E=(E=u+-47+(0==(u+-47+8&7|0)?0:0-(u+-47+8)&7)|0)>>>0<(c+16|0)>>>0?c:E,A=i+-40|0,p=e+(F=0==(7&(F=e+8|0)|0)?0:0-F&7)|0,C[8685]=p,C[8682]=A-F,C[p+4>>2]=A-F|1,C[e+A+4>>2]=40,C[8686]=C[8801],C[E+4>>2]=27,C[E+8>>2]=C[8791],C[E+8+4>>2]=C[8792],C[E+8+8>>2]=C[8793],C[E+8+12>>2]=C[8794],C[8791]=e,C[8792]=i,C[8794]=0,C[8793]=E+8,A=E+24|0;do{p=A,C[(A=A+4|0)>>2]=7}while((p+8|0)>>>0<u>>>0);if((0|E)!=(0|c)){if(C[E+4>>2]=-2&C[E+4>>2],C[c+4>>2]=E-c|1,C[E>>2]=E-c,(E-c|0)>>>0<256){B=34756+((E-c|0)>>>3<<1<<2)|0,(A=0|C[8679])&1<<((E-c|0)>>>3)?(A=B+8|0,g=0|C[B+8>>2]):(C[8679]=A|1<<((E-c|0)>>>3),A=B+8|0,g=B),C[A>>2]=c,C[g+12>>2]=c,C[c+8>>2]=g,C[c+12>>2]=B;break}if(g=35020+((Q=(E-c|0)>>>8?(E-c|0)>>>0>16777215?31:(E-c|0)>>>(7+(Q=14-((520192+(Q=(E-c|0)>>>8<<((1048320+((E-c|0)>>>8)|0)>>>16&8))|0)>>>16&4|(1048320+((E-c|0)>>>8)|0)>>>16&8|(245760+(Q<<((Q+520192|0)>>>16&4))|0)>>>16&2)+(Q<<((Q+520192|0)>>>16&4)<<((245760+(Q<<((Q+520192|0)>>>16&4))|0)>>>16&2)>>>15)|0)|0)&1|Q<<1:0)<<2)|0,C[c+28>>2]=Q,C[c+20>>2]=0,C[c+16>>2]=0,!((A=0|C[8680])&(B=1<<Q))){C[8680]=A|B,C[g>>2]=c,C[c+24>>2]=g,C[c+12>>2]=c,C[c+8>>2]=c;break}A=0|C[g>>2];I:do{if((-8&C[A+4>>2]|0)!=(E-c|0)){for(Q=E-c<<(31==(0|Q)?0:25-(Q>>>1)|0);g=0|C[(B=A+16+(Q>>>31<<2)|0)>>2];){if((-8&C[g+4>>2]|0)==(E-c|0)){A=g;break I}Q<<=1,A=g}C[B>>2]=c,C[c+24>>2]=A,C[c+12>>2]=c,C[c+8>>2]=c;break A}}while(0);u=0|C[(p=A+8|0)>>2],C[u+12>>2]=c,C[p>>2]=c,C[c+8>>2]=u,C[c+12>>2]=A,C[c+24>>2]=0}}else 0==(0|(u=0|C[8683]))|e>>>0<u>>>0&&(C[8683]=e),C[8791]=e,C[8792]=i,C[8794]=0,C[8688]=C[8797],C[8687]=-1,C[8692]=34756,C[8691]=34756,C[8694]=34764,C[8693]=34764,C[8696]=34772,C[8695]=34772,C[8698]=34780,C[8697]=34780,C[8700]=34788,C[8699]=34788,C[8702]=34796,C[8701]=34796,C[8704]=34804,C[8703]=34804,C[8706]=34812,C[8705]=34812,C[8708]=34820,C[8707]=34820,C[8710]=34828,C[8709]=34828,C[8712]=34836,C[8711]=34836,C[8714]=34844,C[8713]=34844,C[8716]=34852,C[8715]=34852,C[8718]=34860,C[8717]=34860,C[8720]=34868,C[8719]=34868,C[8722]=34876,C[8721]=34876,C[8724]=34884,C[8723]=34884,C[8726]=34892,C[8725]=34892,C[8728]=34900,C[8727]=34900,C[8730]=34908,C[8729]=34908,C[8732]=34916,C[8731]=34916,C[8734]=34924,C[8733]=34924,C[8736]=34932,C[8735]=34932,C[8738]=34940,C[8737]=34940,C[8740]=34948,C[8739]=34948,C[8742]=34956,C[8741]=34956,C[8744]=34964,C[8743]=34964,C[8746]=34972,C[8745]=34972,C[8748]=34980,C[8747]=34980,C[8750]=34988,C[8749]=34988,C[8752]=34996,C[8751]=34996,C[8754]=35004,C[8753]=35004,u=i+-40|0,p=e+(F=0==(7&(F=e+8|0)|0)?0:0-F&7)|0,C[8685]=p,C[8682]=u-F,C[p+4>>2]=u-F|1,C[e+u+4>>2]=40,C[8686]=C[8801]}while(0);if((A=0|C[8682])>>>0>t>>>0)return F=A-t|0,C[8682]=F,p=(u=0|C[8685])+t|0,C[8685]=p,C[p+4>>2]=1|F,C[u+4>>2]=3|t,y=I,0|u+8}return C[8678]=48,y=I,0}function p(A){var I,g,C,Q,E=0,i=0,e=0,c=0,a=0,n=0,r=0,t=0,f=0,w=0,y=0,s=0,h=0,D=0,F=0,p=0,u=0,H=0,k=0,l=0,_=0,G=0,d=0,Y=0,M=0,S=0,U=0,v=0,b=0,J=0,P=0,R=0,N=0,m=0,L=0,x=0,K=0,X=0,j=0,T=0,q=0,V=0,z=0,W=0,O=0,Z=0,$=0,AA=0,IA=0,gA=0,BA=0,CA=0,QA=0,EA=0,iA=0,eA=0,oA=0,cA=0,aA=0,nA=0,rA=0,tA=0,fA=0,wA=0,yA=0;j=0|Bg(0|B[(A|=0)>>0],0|B[A+1>>0],0|B[A+2>>0]),o(),V=0|yg(0|(V=0|kI(A+2|0)),0|o(),5),o(),J=0|yg(0|(J=0|Bg(0|B[A+5>>0],0|B[A+6>>0],0|B[A+7>>0])),0|o(),2),o(),y=0|yg(0|(y=0|kI(A+7|0)),0|o(),7),o(),T=0|yg(0|(T=0|kI(A+10|0)),0|o(),4),o(),Z=0|yg(0|(Z=0|Bg(0|B[A+13>>0],0|B[A+14>>0],0|B[A+15>>0])),0|o(),1),o(),l=0|yg(0|(l=0|kI(A+15|0)),0|o(),6),o(),oA=0|yg(0|(oA=0|Bg(0|B[A+18>>0],0|B[A+19>>0],0|B[A+20>>0])),0|o(),3),o(),rA=0|Bg(0|B[A+21>>0],0|B[A+22>>0],0|B[A+23>>0]),o(),EA=0|yg(0|(EA=0|kI(A+23|0)),0|o(),5),o(),nA=0|yg(0|(nA=0|Bg(0|B[A+26>>0],0|B[A+27>>0],0|B[A+28>>0])),0|o(),2),o(),gA=0|yg(0|(gA=0|kI(A+28|0)),0|o(),7),o(),wA=0|yg(0|(wA=0|kI(A+31|0)),0|o(),4),o(),Y=0|yg(0|(Y=0|Bg(0|B[A+34>>0],0|B[A+35>>0],0|B[A+36>>0])),0|o(),1),o(),K=0|yg(0|(K=0|kI(A+36|0)),0|o(),6),o(),p=0|yg(0|(p=0|Bg(0|B[A+39>>0],0|B[A+40>>0],0|B[A+41>>0])),0|o(),3),o(),e=0|Bg(0|B[A+42>>0],0|B[A+43>>0],0|B[A+44>>0]),o(),L=0|yg(0|(L=0|kI(A+44|0)),0|o(),5),o(),CA=0|yg(0|(CA=0|Bg(0|B[A+47>>0],0|B[A+48>>0],0|B[A+49>>0])),0|o(),2),o(),yA=0|yg(0|(yA=0|kI(A+49|0)),0|o(),7),o(),f=0|yg(0|(f=0|kI(A+52|0)),0|o(),4),o(),G=0|yg(0|(G=0|Bg(0|B[A+55>>0],0|B[A+56>>0],0|B[A+57>>0])),0|o(),1),o(),U=0|yg(0|(U=0|kI(A+57|0)),0|o(),6),o(),r=0|Qg(0|(q=0|yg(0|(q=0|kI(A+60|0)),0|o(),3)),0|(c=0|o()),666643,0),F=0|o(),aA=0|Qg(0|q,0|c,470296,0),u=0|o(),M=0|Qg(0|q,0|c,654183,0),a=0|o(),_=0|Qg(0|q,0|c,-997805,-1),t=0|o(),p=0|vg(0|(E=0|Qg(0|q,0|c,136657,0)),0|o(),2097151&p|0,0),E=0|o(),e=0|vg(0|(c=0|Qg(0|q,0|c,-683901,-1)),0|o(),2097151&e|0,0),c=0|o(),q=0|Qg(2097151&U|0,0,666643,0),x=0|o(),k=0|Qg(2097151&U|0,0,470296,0),IA=0|o(),v=0|Qg(2097151&U|0,0,654183,0),i=0|o(),W=0|Qg(2097151&U|0,0,-997805,-1),z=0|o(),X=0|Qg(2097151&U|0,0,136657,0),D=0|o(),U=0|vg(0|p,0|E,0|(U=0|Qg(2097151&U|0,0,-683901,-1)),0|o()),E=0|o(),p=0|Qg(2097151&G|0,0,666643,0),O=0|o(),d=0|Qg(2097151&G|0,0,470296,0),BA=0|o(),m=0|Qg(2097151&G|0,0,654183,0),n=0|o(),tA=0|Qg(2097151&G|0,0,-997805,-1),cA=0|o(),AA=0|Qg(2097151&G|0,0,136657,0),b=0|o(),D=0|vg(0|(t=0|vg(0|(K=0|vg(0|(G=0|Qg(2097151&G|0,0,-683901,-1)),0|o(),2097151&K|0,0)),0|o(),0|_,0|t)),0|o(),0|X,0|D),X=0|o(),t=0|Qg(2097151&f|0,0,666643,0),_=0|o(),K=0|Qg(2097151&f|0,0,470296,0),G=0|o(),s=0|Qg(2097151&f|0,0,654183,0),$=0|o(),P=0|Qg(2097151&f|0,0,-997805,-1),R=0|o(),Q=0|Qg(2097151&f|0,0,136657,0),fA=0|o(),f=0|Qg(2097151&f|0,0,-683901,-1),w=0|o(),h=0|Qg(2097151&yA|0,0,666643,0),S=0|o(),iA=0|Qg(2097151&yA|0,0,470296,0),eA=0|o(),g=0|Qg(2097151&yA|0,0,654183,0),QA=0|o(),C=0|Qg(2097151&yA|0,0,-997805,-1),N=0|o(),I=0|Qg(2097151&yA|0,0,136657,0),H=0|o(),i=0|vg(0|(u=0|vg(0|(cA=0|vg(0|(fA=0|vg(0|(wA=0|vg(0|(yA=0|Qg(2097151&yA|0,0,-683901,-1)),0|o(),2097151&wA|0,0)),0|o(),0|Q,0|fA)),0|o(),0|tA,0|cA)),0|o(),0|aA,0|u)),0|o(),0|v,0|i),v=0|o(),l=0|vg(0|(u=0|Qg(2097151&CA|0,0,666643,0)),0|o(),2097151&l|0,0),u=0|o(),aA=0|Qg(2097151&CA|0,0,470296,0),cA=0|o(),_=0|vg(0|(eA=0|vg(0|(rA=0|vg(0|(tA=0|Qg(2097151&CA|0,0,654183,0)),0|o(),2097151&rA|0,0)),0|o(),0|iA,0|eA)),0|o(),0|t,0|_),t=0|o(),eA=0|Qg(2097151&CA|0,0,-997805,-1),iA=0|o(),x=0|vg(0|(BA=0|vg(0|($=0|vg(0|(N=0|vg(0|(nA=0|vg(0|(rA=0|Qg(2097151&CA|0,0,136657,0)),0|o(),2097151&nA|0,0)),0|o(),0|C,0|N)),0|o(),0|s,0|$)),0|o(),0|d,0|BA)),0|o(),0|q,0|x),q=0|o(),CA=0|Qg(2097151&CA|0,0,-683901,-1),BA=0|o(),s=0|yg(0|(d=0|vg(0|l,0|u,1048576,0)),0|($=0|o()),21),N=0|o(),N=0|vg(0|(S=0|vg(0|(oA=0|vg(0|aA,0|cA,2097151&oA|0,0)),0|o(),0|h,0|S)),0|o(),0|s,0|N),s=0|o(),$=0|Ug(0|l,0|u,-2097152&d|0,2047&$|0),d=0|o(),S=0|yg(0|(u=0|vg(0|_,0|t,1048576,0)),0|(l=0|o()),21),h=0|o(),h=0|vg(0|(O=0|vg(0|(G=0|vg(0|(QA=0|vg(0|(EA=0|vg(0|eA,0|iA,2097151&EA|0,0)),0|o(),0|g,0|QA)),0|o(),0|K,0|G)),0|o(),0|p,0|O)),0|o(),0|S,0|h),S=0|o(),G=0|ig(0|(O=0|vg(0|x,0|q,1048576,0)),0|(p=0|o()),21),K=0|o(),K=0|vg(0|(IA=0|vg(0|(F=0|vg(0|(n=0|vg(0|(R=0|vg(0|(H=0|vg(0|(gA=0|vg(0|CA,0|BA,2097151&gA|0,0)),0|o(),0|I,0|H)),0|o(),0|P,0|R)),0|o(),0|m,0|n)),0|o(),0|r,0|F)),0|o(),0|k,0|IA)),0|o(),0|G,0|K),G=0|o(),F=0|ig(0|(IA=0|vg(0|i,0|v,1048576,0)),0|(k=0|o()),21),r=0|o(),r=0|vg(0|(z=0|vg(0|(a=0|vg(0|(b=0|vg(0|(Y=0|vg(0|f,0|w,2097151&Y|0,0)),0|o(),0|AA,0|b)),0|o(),0|M,0|a)),0|o(),0|W,0|z)),0|o(),0|F,0|r),F=0|o(),k=0|Ug(0|i,0|v,-2097152&IA|0,0|k),IA=0|o(),z=0|vg(0|U,0|E,0|(z=0|ig(0|(v=0|vg(0|D,0|X,1048576,0)),0|(i=0|o()),21)),0|o()),E=0|o(),i=0|Ug(0|D,0|X,-2097152&v|0,0|i),v=0|o(),L=0|vg(0|(U=0|ig(0|(X=0|vg(0|e,0|c,1048576,0)),0|(D=0|o()),21)),0|o(),2097151&L|0,0),U=0|o(),D=0|Ug(0|e,0|c,-2097152&X|0,0|D),X=0|o(),W=0|yg(0|(c=0|vg(0|N,0|s,1048576,0)),0|(e=0|o()),21),a=0|o(),e=0|Ug(0|N,0|s,-2097152&c|0,0|e),c=0|o(),M=0|ig(0|(s=0|vg(0|h,0|S,1048576,0)),0|(N=0|o()),21),b=0|o(),IA=0|vg(0|(w=0|ig(0|(AA=0|vg(0|K,0|G,1048576,0)),0|(Y=0|o()),21)),0|o(),0|k,0|IA),k=0|o(),Y=0|Ug(0|K,0|G,-2097152&AA|0,0|Y),AA=0|o(),v=0|vg(0|(w=0|ig(0|(G=0|vg(0|r,0|F,1048576,0)),0|(K=0|o()),21)),0|o(),0|i,0|v),i=0|o(),K=0|Ug(0|r,0|F,-2097152&G|0,0|K),G=0|o(),X=0|vg(0|(w=0|ig(0|(F=0|vg(0|z,0|E,1048576,0)),0|(r=0|o()),21)),0|o(),0|D,0|X),D=0|o(),r=0|Ug(0|z,0|E,-2097152&F|0,0|r),F=0|o(),Z=0|vg(0|(E=0|Qg(0|L,0|U,666643,0)),0|o(),2097151&Z|0,0),E=0|o(),z=0|vg(0|$,0|d,0|(z=0|Qg(0|L,0|U,470296,0)),0|o()),d=0|o(),$=0|vg(0|e,0|c,0|($=0|Qg(0|L,0|U,654183,0)),0|o()),c=0|o(),e=0|Qg(0|L,0|U,-997805,-1),w=0|o(),f=0|Qg(0|L,0|U,136657,0),n=0|o(),p=0|Ug(0|(b=0|vg(0|(q=0|vg(0|(U=0|Qg(0|L,0|U,-683901,-1)),0|o(),0|x,0|q)),0|o(),0|M,0|b)),0|o(),-2097152&O|0,0|p),O=0|o(),T=0|vg(0|(b=0|Qg(0|X,0|D,666643,0)),0|o(),2097151&T|0,0),b=0|o(),M=0|vg(0|Z,0|E,0|(M=0|Qg(0|X,0|D,470296,0)),0|o()),E=0|o(),Z=0|vg(0|z,0|d,0|(Z=0|Qg(0|X,0|D,654183,0)),0|o()),d=0|o(),z=0|vg(0|$,0|c,0|(z=0|Qg(0|X,0|D,-997805,-1)),0|o()),c=0|o(),$=0|Qg(0|X,0|D,136657,0),q=0|o(),D=0|Qg(0|X,0|D,-683901,-1),X=0|o(),y=0|vg(0|(x=0|Qg(0|r,0|F,666643,0)),0|o(),2097151&y|0,0),x=0|o(),U=0|vg(0|T,0|b,0|(U=0|Qg(0|r,0|F,470296,0)),0|o()),b=0|o(),T=0|vg(0|M,0|E,0|(T=0|Qg(0|r,0|F,654183,0)),0|o()),E=0|o(),M=0|vg(0|Z,0|d,0|(M=0|Qg(0|r,0|F,-997805,-1)),0|o()),d=0|o(),Z=0|vg(0|z,0|c,0|(Z=0|Qg(0|r,0|F,136657,0)),0|o()),c=0|o(),F=0|Qg(0|r,0|F,-683901,-1),r=0|o(),r=0|vg(0|(q=0|vg(0|(w=0|vg(0|(l=0|Ug(0|(t=0|vg(0|W,0|a,0|_,0|t)),0|o(),-2097152&u|0,0|l)),0|o(),0|e,0|w)),0|o(),0|$,0|q)),0|o(),0|F,0|r),F=0|o(),J=0|vg(0|(q=0|Qg(0|v,0|i,666643,0)),0|o(),2097151&J|0,0),q=0|o(),$=0|vg(0|y,0|x,0|($=0|Qg(0|v,0|i,470296,0)),0|o()),x=0|o(),y=0|vg(0|U,0|b,0|(y=0|Qg(0|v,0|i,654183,0)),0|o()),b=0|o(),U=0|vg(0|T,0|E,0|(U=0|Qg(0|v,0|i,-997805,-1)),0|o()),E=0|o(),T=0|vg(0|M,0|d,0|(T=0|Qg(0|v,0|i,136657,0)),0|o()),d=0|o(),i=0|vg(0|Z,0|c,0|(i=0|Qg(0|v,0|i,-683901,-1)),0|o()),c=0|o(),V=0|vg(0|(Z=0|Qg(0|K,0|G,666643,0)),0|o(),2097151&V|0,0),Z=0|o(),v=0|vg(0|J,0|q,0|(v=0|Qg(0|K,0|G,470296,0)),0|o()),q=0|o(),J=0|vg(0|$,0|x,0|(J=0|Qg(0|K,0|G,654183,0)),0|o()),x=0|o(),$=0|vg(0|y,0|b,0|($=0|Qg(0|K,0|G,-997805,-1)),0|o()),b=0|o(),y=0|vg(0|U,0|E,0|(y=0|Qg(0|K,0|G,136657,0)),0|o()),E=0|o(),G=0|vg(0|T,0|d,0|(G=0|Qg(0|K,0|G,-683901,-1)),0|o()),d=0|o(),j=0|vg(0|(T=0|Qg(0|IA,0|k,666643,0)),0|o(),2097151&j|0,0),T=0|o(),K=0|vg(0|V,0|Z,0|(K=0|Qg(0|IA,0|k,470296,0)),0|o()),Z=0|o(),V=0|vg(0|v,0|q,0|(V=0|Qg(0|IA,0|k,654183,0)),0|o()),q=0|o(),v=0|vg(0|J,0|x,0|(v=0|Qg(0|IA,0|k,-997805,-1)),0|o()),x=0|o(),J=0|vg(0|$,0|b,0|(J=0|Qg(0|IA,0|k,136657,0)),0|o()),b=0|o(),k=0|vg(0|y,0|E,0|(k=0|Qg(0|IA,0|k,-683901,-1)),0|o()),E=0|o(),$=0|vg(0|K,0|Z,0|($=0|ig(0|(y=0|vg(0|j,0|T,1048576,0)),0|(IA=0|o()),21)),0|o()),Z=0|o(),IA=0|Ug(0|j,0|T,-2097152&y|0,0|IA),y=0|o(),K=0|vg(0|v,0|x,0|(K=0|ig(0|(T=0|vg(0|V,0|q,1048576,0)),0|(j=0|o()),21)),0|o()),x=0|o(),M=0|vg(0|k,0|E,0|(M=0|ig(0|(v=0|vg(0|J,0|b,1048576,0)),0|(U=0|o()),21)),0|o()),E=0|o(),e=0|vg(0|i,0|c,0|(e=0|ig(0|(k=0|vg(0|G,0|d,1048576,0)),0|(w=0|o()),21)),0|o()),c=0|o(),w=0|Ug(0|G,0|d,-2097152&k|0,0|w),k=0|o(),i=0|ig(0|(d=0|vg(0|r,0|F,1048576,0)),0|(G=0|o()),21),l=0|o(),l=0|vg(0|(X=0|vg(0|(N=0|Ug(0|(S=0|vg(0|f,0|n,0|h,0|S)),0|o(),-2097152&s|0,0|N)),0|o(),0|D,0|X)),0|o(),0|i,0|l),i=0|o(),G=0|Ug(0|r,0|F,-2097152&d|0,0|G),d=0|o(),AA=0|vg(0|(X=0|ig(0|(F=0|vg(0|p,0|O,1048576,0)),0|(r=0|o()),21)),0|o(),0|Y,0|AA),Y=0|o(),r=0|Ug(0|p,0|O,-2097152&F|0,0|r),F=0|o(),X=0|ig(0|(O=0|vg(0|$,0|Z,1048576,0)),0|(p=0|o()),21),D=0|o(),S=0|ig(0|(N=0|vg(0|K,0|x,1048576,0)),0|(s=0|o()),21),h=0|o(),u=0|vg(0|w,0|k,0|(u=0|ig(0|(n=0|vg(0|M,0|E,1048576,0)),0|(f=0|o()),21)),0|o()),k=0|o(),_=0|vg(0|G,0|d,0|(_=0|ig(0|(w=0|vg(0|e,0|c,1048576,0)),0|(t=0|o()),21)),0|o()),d=0|o(),t=0|Ug(0|e,0|c,-2097152&w|0,0|t),w=0|o(),G=0|vg(0|r,0|F,0|(G=0|ig(0|(c=0|vg(0|l,0|i,1048576,0)),0|(e=0|o()),21)),0|o()),F=0|o(),e=0|Ug(0|l,0|i,-2097152&c|0,0|e),c=0|o(),r=0|ig(0|(i=0|vg(0|AA,0|Y,1048576,0)),0|(l=0|o()),21),a=0|o(),l=0|Ug(0|AA,0|Y,-2097152&i|0,0|l),i=0|o(),Y=0|vg(0|IA,0|y,0|(Y=0|Qg(0|r,0|a,666643,0)),0|o()),y=0|o(),IA=0|Qg(0|r,0|a,470296,0),AA=0|o(),W=0|Qg(0|r,0|a,654183,0),z=0|o(),L=0|Qg(0|r,0|a,-997805,-1),m=0|o(),R=0|Qg(0|r,0|a,136657,0),P=0|o(),a=0|Qg(0|r,0|a,-683901,-1),r=0|o(),y=0|ig(0|Y,0|y,21),H=0|o(),y=0|ig(0|(H=0|vg(0|(p=0|Ug(0|(Z=0|vg(0|IA,0|AA,0|$,0|Z)),0|o(),-2097152&O|0,0|p)),0|o(),0|y,0|H)),0|o(),21),p=0|o(),y=0|ig(0|(p=0|vg(0|(D=0|vg(0|(j=0|Ug(0|(q=0|vg(0|W,0|z,0|V,0|q)),0|o(),-2097152&T|0,0|j)),0|o(),0|X,0|D)),0|o(),0|y,0|p)),0|o(),21),D=0|o(),y=0|ig(0|(D=0|vg(0|(s=0|Ug(0|(m=0|vg(0|K,0|x,0|L,0|m)),0|o(),-2097152&N|0,0|s)),0|o(),0|y,0|D)),0|o(),21),s=0|o(),y=0|ig(0|(s=0|vg(0|(h=0|vg(0|(U=0|Ug(0|(b=0|vg(0|R,0|P,0|J,0|b)),0|o(),-2097152&v|0,0|U)),0|o(),0|S,0|h)),0|o(),0|y,0|s)),0|o(),21),h=0|o(),Y=0|vg(0|(G=0|Qg(0|(l=0|ig(0|(i=0|vg(0|(F=0|ig(0|(e=0|vg(0|G,0|F,0|(e=0|ig(0|(c=0|vg(0|(d=0|ig(0|(t=0|vg(0|_,0|d,0|(t=0|ig(0|(w=0|vg(0|(k=0|ig(0|(y=0|vg(0|u,0|k,0|(y=0|ig(0|(h=0|vg(0|(f=0|Ug(0|(r=0|vg(0|M,0|E,0|a,0|r)),0|o(),-2097152&n|0,0|f)),0|o(),0|y,0|h)),0|o(),21)),0|o())),0|o(),21)),0|o(),0|t,0|w)),0|o(),21)),0|o())),0|o(),21)),0|o(),0|e,0|c)),0|o(),21)),0|o())),0|o(),21)),0|o(),0|l,0|i)),0|o(),21)),0|(F=0|o()),666643,0)),0|o(),2097151&Y|0,0),G=0|o(),H=0|vg(0|(d=0|Qg(0|l,0|F,470296,0)),0|o(),2097151&H|0,0),d=0|o(),p=0|vg(0|(_=0|Qg(0|l,0|F,654183,0)),0|o(),2097151&p|0,0),_=0|o(),D=0|vg(0|(k=0|Qg(0|l,0|F,-997805,-1)),0|o(),2097151&D|0,0),k=0|o(),s=0|vg(0|(u=0|Qg(0|l,0|F,136657,0)),0|o(),2097151&s|0,0),u=0|o(),i=0|vg(0|(E=0|ig(0|(e=0|vg(0|(a=0|ig(0|(c=0|vg(0|(r=0|ig(0|(t=0|vg(0|(n=0|ig(0|(w=0|vg(0|(f=0|ig(0|(y=0|vg(0|(h=0|ig(0|(s=0|vg(0|(h=0|vg(0|(F=0|Qg(0|l,0|F,-683901,-1)),0|o(),2097151&h|0,0)),0|(F=0|o()),0|(s=0|ig(0|(D=0|vg(0|s,0|u,0|(D=0|ig(0|(p=0|vg(0|D,0|k,0|(p=0|ig(0|(H=0|vg(0|p,0|_,0|(H=0|ig(0|(l=0|vg(0|H,0|d,0|(l=0|ig(0|Y,0|G,21)),0|o())),0|(d=0|o()),21)),0|o())),0|(_=0|o()),21)),0|o())),0|(k=0|o()),21)),0|o())),0|(u=0|o()),21)),0|o())),0|(F=0|o()),21)),0|o(),2097151&y|0,0)),0|(h=0|o()),21)),0|o(),2097151&w|0,0)),0|(f=0|o()),21)),0|o(),2097151&t|0,0)),0|(n=0|o()),21)),0|o(),2097151&c|0,0)),0|(r=0|o()),21)),0|o(),2097151&e|0,0)),0|(a=0|o()),21)),0|o(),2097151&i|0,0),E=0|o(),B[A>>0]=Y,M=0|yg(0|Y,0|G,8),o(),B[A+1>>0]=M,G=0|yg(0|Y,0|G,16),o(),Y=0|rg(2097151&l|0,0,5),o(),B[A+2>>0]=Y|31&G,G=0|yg(0|l,0|d,3),o(),B[A+3>>0]=G,d=0|yg(0|l,0|d,11),o(),B[A+4>>0]=d,l=0|yg(2097151&l|0,0,19),d=0|o(),G=0|rg(2097151&H|0,0,2),o(),B[A+5>>0]=G|l,_=0|yg(0|H,0|_,6),o(),B[A+6>>0]=_,H=0|yg(2097151&H|0,0,14),_=0|o(),l=0|rg(2097151&p|0,0,7),o(),B[A+7>>0]=l|H,H=0|yg(0|p,0|k,1),o(),B[A+8>>0]=H,k=0|yg(0|p,0|k,9),o(),B[A+9>>0]=k,p=0|yg(2097151&p|0,0,17),k=0|o(),H=0|rg(2097151&D|0,0,4),o(),B[A+10>>0]=H|p,p=0|yg(0|D,0|u,4),o(),B[A+11>>0]=p,u=0|yg(0|D,0|u,12),o(),B[A+12>>0]=u,D=0|yg(2097151&D|0,0,20),u=0|o(),p=0|rg(2097151&s|0,0,1),o(),B[A+13>>0]=p|D,F=0|yg(0|s,0|F,7),o(),B[A+14>>0]=F,s=0|yg(2097151&s|0,0,15),F=0|o(),D=0|rg(2097151&y|0,0,6),o(),B[A+15>>0]=D|s,s=0|yg(0|y,0|h,2),o(),B[A+16>>0]=s,h=0|yg(0|y,0|h,10),o(),B[A+17>>0]=h,y=0|yg(2097151&y|0,0,18),h=0|o(),s=0|rg(0|w,0|f,3),o(),B[A+18>>0]=s|y,y=0|yg(0|w,0|f,5),o(),B[A+19>>0]=y,f=0|yg(0|w,0|f,13),o(),B[A+20>>0]=f,B[A+21>>0]=t,f=0|yg(0|t,0|n,8),o(),B[A+22>>0]=f,n=0|yg(0|t,0|n,16),o(),t=0|rg(2097151&c|0,0,5),o(),B[A+23>>0]=t|31&n,n=0|yg(0|c,0|r,3),o(),B[A+24>>0]=n,r=0|yg(0|c,0|r,11),o(),B[A+25>>0]=r,c=0|yg(2097151&c|0,0,19),r=0|o(),n=0|rg(2097151&e|0,0,2),o(),B[A+26>>0]=n|c,a=0|yg(0|e,0|a,6),o(),B[A+27>>0]=a,e=0|yg(2097151&e|0,0,14),a=0|o(),c=0|rg(0|i,0|E,7),o(),B[A+28>>0]=c|e,e=0|yg(0|i,0|E,1),o(),B[A+29>>0]=e,e=0|yg(0|i,0|E,9),o(),B[A+30>>0]=e,E=0|ig(0|i,0|E,17),o(),B[A+31>>0]=E}function u(A,I,g){A|=0,g|=0;var B,Q,E,i,e,c,a,n,r,t,f,w,y,s,h,D,F,p,u,H,k,l,_,G,d,Y,M,S,U,v,b,J,P,R,N,m,L,x,K,X,j,T,q,V,z,W,O,Z,$,AA,IA,gA,BA,CA,QA,EA,iA,eA,oA,cA,aA,nA,rA,tA,fA,wA,yA,sA,hA,DA,FA,pA,uA,HA,kA,lA,_A,GA,dA,YA,MA,SA,UA,vA,bA,JA,PA,RA,NA,mA=0,LA=0,xA=0,KA=0,XA=0,jA=0,TA=0,qA=0,VA=0,zA=0,WA=0,OA=0,ZA=0,$A=0,AI=0,II=0,gI=0,BI=0,CI=0,QI=0,EI=0,iI=0,eI=0,oI=0,cI=0,aI=0,nI=0,rI=0,tI=0,fI=0,wI=0,yI=0,sI=0,hI=0,DI=0,FI=0,pI=0,uI=0,HI=0,kI=0,lI=0,_I=0,GI=0,dI=0,YI=0,MI=0,SI=0,UI=0,vI=0,bI=0,JI=0,PI=0,RI=0,NI=0,mI=0,LI=0,xI=0,KI=0,XI=0,jI=0,TI=0,qI=0,VI=0,zI=0,WI=0,OI=0,ZI=0,$I=0,Ag=0,Ig=0,gg=0,Bg=0,Cg=0,Eg=0,eg=0,og=0,cg=0,ag=0,ng=0,rg=0,tg=0,fg=0,wg=0,sg=0,hg=0,Dg=0,Fg=0,pg=0,ug=0,Hg=0,kg=0,lg=0,_g=0,Gg=0,dg=0,Yg=0,Mg=0,Sg=0,bg=0,Jg=0,Pg=0,Rg=0,Ng=0,mg=0,Lg=0,xg=0,Kg=0,Xg=0,jg=0,Tg=0;AI=0|C[(I|=0)>>2],qA=0|C[I+4>>2],jA=0|C[I+8>>2],ZA=0|C[I+12>>2],SI=0|C[I+16>>2],OA=0|C[I+20>>2],eg=0|C[I+24>>2],mA=0|C[I+28>>2],pI=0|C[I+32>>2],nI=0|C[I+36>>2],oI=0|C[g>>2],Tg=0|C[g+4>>2],lg=0|C[g+8>>2],Bg=0|C[g+12>>2],RI=0|C[g+16>>2],Yg=0|C[g+20>>2],ag=0|C[g+24>>2],KI=0|C[g+28>>2],uI=0|C[g+32>>2],NA=0|C[g+36>>2],PA=0|Qg(0|oI,((0|oI)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),jg=0|o(),dA=0|Qg(0|Tg,((0|Tg)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),GA=0|o(),gA=0|Qg(0|lg,((0|lg)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),Cg=0|o(),P=0|Qg(0|Bg,((0|Bg)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),NI=0|o(),pA=0|Qg(0|RI,((0|RI)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),Sg=0|o(),eA=0|Qg(0|Yg,((0|Yg)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),rg=0|o(),K=0|Qg(0|ag,((0|ag)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),jI=0|o(),H=0|Qg(0|KI,((0|KI)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),kI=0|o(),t=0|Qg(0|uI,((0|uI)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),rI=0|o(),AI=0|Qg(0|NA,((0|NA)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),$A=0|o(),_g=0|Qg(0|oI,((0|oI)<0)<<31>>31|0,0|qA,((0|qA)<0)<<31>>31|0),Gg=0|o(),QA=0|Qg(0|Tg,((0|Tg)<0)<<31>>31|0,qA<<1|0,((qA<<1|0)<0)<<31>>31|0),CA=0|o(),R=0|Qg(0|lg,((0|lg)<0)<<31>>31|0,0|qA,((0|qA)<0)<<31>>31|0),mI=0|o(),uA=0|Qg(0|Bg,((0|Bg)<0)<<31>>31|0,qA<<1|0,((qA<<1|0)<0)<<31>>31|0),bg=0|o(),oA=0|Qg(0|RI,((0|RI)<0)<<31>>31|0,0|qA,((0|qA)<0)<<31>>31|0),tg=0|o(),X=0|Qg(0|Yg,((0|Yg)<0)<<31>>31|0,qA<<1|0,((qA<<1|0)<0)<<31>>31|0),TI=0|o(),k=0|Qg(0|ag,((0|ag)<0)<<31>>31|0,0|qA,((0|qA)<0)<<31>>31|0),lI=0|o(),f=0|Qg(0|KI,((0|KI)<0)<<31>>31|0,qA<<1|0,((qA<<1|0)<0)<<31>>31|0),tI=0|o(),B=0|Qg(0|uI,((0|uI)<0)<<31>>31|0,0|qA,((0|qA)<0)<<31>>31|0),II=0|o(),qA=0|Qg(19*NA|0,0|(aI=((19*NA|0)<0)<<31>>31),qA<<1|0,((qA<<1|0)<0)<<31>>31|0),I=0|o(),BA=0|Qg(0|oI,((0|oI)<0)<<31>>31|0,0|jA,((0|jA)<0)<<31>>31|0),Eg=0|o(),L=0|Qg(0|Tg,((0|Tg)<0)<<31>>31|0,0|jA,((0|jA)<0)<<31>>31|0),m=0|o(),HA=0|Qg(0|lg,((0|lg)<0)<<31>>31|0,0|jA,((0|jA)<0)<<31>>31|0),Jg=0|o(),cA=0|Qg(0|Bg,((0|Bg)<0)<<31>>31|0,0|jA,((0|jA)<0)<<31>>31|0),fg=0|o(),j=0|Qg(0|RI,((0|RI)<0)<<31>>31|0,0|jA,((0|jA)<0)<<31>>31|0),qI=0|o(),l=0|Qg(0|Yg,((0|Yg)<0)<<31>>31|0,0|jA,((0|jA)<0)<<31>>31|0),_I=0|o(),w=0|Qg(0|ag,((0|ag)<0)<<31>>31|0,0|jA,((0|jA)<0)<<31>>31|0),fI=0|o(),Q=0|Qg(0|KI,((0|KI)<0)<<31>>31|0,0|jA,((0|jA)<0)<<31>>31|0),gI=0|o(),YA=0|Qg(19*uI|0,0|(HI=((19*uI|0)<0)<<31>>31),0|jA,((0|jA)<0)<<31>>31|0),Rg=0|o(),jA=0|Qg(19*NA|0,0|aI,0|jA,((0|jA)<0)<<31>>31|0),TA=0|o(),N=0|Qg(0|oI,((0|oI)<0)<<31>>31|0,0|ZA,((0|ZA)<0)<<31>>31|0),LI=0|o(),_A=0|Qg(0|Tg,((0|Tg)<0)<<31>>31|0,ZA<<1|0,((ZA<<1|0)<0)<<31>>31|0),lA=0|o(),aA=0|Qg(0|lg,((0|lg)<0)<<31>>31|0,0|ZA,((0|ZA)<0)<<31>>31|0),wg=0|o(),T=0|Qg(0|Bg,((0|Bg)<0)<<31>>31|0,ZA<<1|0,((ZA<<1|0)<0)<<31>>31|0),VI=0|o(),_=0|Qg(0|RI,((0|RI)<0)<<31>>31|0,0|ZA,((0|ZA)<0)<<31>>31|0),GI=0|o(),y=0|Qg(0|Yg,((0|Yg)<0)<<31>>31|0,ZA<<1|0,((ZA<<1|0)<0)<<31>>31|0),wI=0|o(),E=0|Qg(0|ag,((0|ag)<0)<<31>>31|0,0|ZA,((0|ZA)<0)<<31>>31|0),BI=0|o(),MA=0|Qg(19*KI|0,0|(XI=((19*KI|0)<0)<<31>>31),ZA<<1|0,((ZA<<1|0)<0)<<31>>31|0),Ng=0|o(),fA=0|Qg(19*uI|0,0|HI,0|ZA,((0|ZA)<0)<<31>>31|0),hg=0|o(),ZA=0|Qg(19*NA|0,0|aI,ZA<<1|0,((ZA<<1|0)<0)<<31>>31|0),XA=0|o(),kA=0|Qg(0|oI,((0|oI)<0)<<31>>31|0,0|SI,((0|SI)<0)<<31>>31|0),Pg=0|o(),tA=0|Qg(0|Tg,((0|Tg)<0)<<31>>31|0,0|SI,((0|SI)<0)<<31>>31|0),rA=0|o(),q=0|Qg(0|lg,((0|lg)<0)<<31>>31|0,0|SI,((0|SI)<0)<<31>>31|0),zI=0|o(),G=0|Qg(0|Bg,((0|Bg)<0)<<31>>31|0,0|SI,((0|SI)<0)<<31>>31|0),dI=0|o(),s=0|Qg(0|RI,((0|RI)<0)<<31>>31|0,0|SI,((0|SI)<0)<<31>>31|0),yI=0|o(),i=0|Qg(0|Yg,((0|Yg)<0)<<31>>31|0,0|SI,((0|SI)<0)<<31>>31|0),CI=0|o(),SA=0|Qg(19*ag|0,0|(ng=((19*ag|0)<0)<<31>>31),0|SI,((0|SI)<0)<<31>>31|0),mg=0|o(),wA=0|Qg(19*KI|0,0|XI,0|SI,((0|SI)<0)<<31>>31|0),Dg=0|o(),O=0|Qg(19*uI|0,0|HI,0|SI,((0|SI)<0)<<31>>31|0),OI=0|o(),SI=0|Qg(19*NA|0,0|aI,0|SI,((0|SI)<0)<<31>>31|0),xA=0|o(),nA=0|Qg(0|oI,((0|oI)<0)<<31>>31|0,0|OA,((0|OA)<0)<<31>>31|0),sg=0|o(),W=0|Qg(0|Tg,((0|Tg)<0)<<31>>31|0,OA<<1|0,((OA<<1|0)<0)<<31>>31|0),z=0|o(),d=0|Qg(0|lg,((0|lg)<0)<<31>>31|0,0|OA,((0|OA)<0)<<31>>31|0),YI=0|o(),h=0|Qg(0|Bg,((0|Bg)<0)<<31>>31|0,OA<<1|0,((OA<<1|0)<0)<<31>>31|0),sI=0|o(),e=0|Qg(0|RI,((0|RI)<0)<<31>>31|0,0|OA,((0|OA)<0)<<31>>31|0),QI=0|o(),UA=0|Qg(19*Yg|0,0|(Mg=((19*Yg|0)<0)<<31>>31),OA<<1|0,((OA<<1|0)<0)<<31>>31|0),Lg=0|o(),yA=0|Qg(19*ag|0,0|ng,0|OA,((0|OA)<0)<<31>>31|0),Fg=0|o(),Z=0|Qg(19*KI|0,0|XI,OA<<1|0,((OA<<1|0)<0)<<31>>31|0),ZI=0|o(),U=0|Qg(19*uI|0,0|HI,0|OA,((0|OA)<0)<<31>>31|0),UI=0|o(),OA=0|Qg(19*NA|0,0|aI,OA<<1|0,((OA<<1|0)<0)<<31>>31|0),LA=0|o(),V=0|Qg(0|oI,((0|oI)<0)<<31>>31|0,0|eg,((0|eg)<0)<<31>>31|0),WI=0|o(),S=0|Qg(0|Tg,((0|Tg)<0)<<31>>31|0,0|eg,((0|eg)<0)<<31>>31|0),M=0|o(),D=0|Qg(0|lg,((0|lg)<0)<<31>>31|0,0|eg,((0|eg)<0)<<31>>31|0),hI=0|o(),c=0|Qg(0|Bg,((0|Bg)<0)<<31>>31|0,0|eg,((0|eg)<0)<<31>>31|0),EI=0|o(),vA=0|Qg(19*RI|0,((19*RI|0)<0)<<31>>31|0,0|eg,((0|eg)<0)<<31>>31|0),xg=0|o(),sA=0|Qg(19*Yg|0,0|Mg,0|eg,((0|eg)<0)<<31>>31|0),pg=0|o(),$=0|Qg(19*ag|0,0|ng,0|eg,((0|eg)<0)<<31>>31|0),$I=0|o(),v=0|Qg(19*KI|0,0|XI,0|eg,((0|eg)<0)<<31>>31|0),vI=0|o(),VA=0|Qg(19*uI|0,0|HI,0|eg,((0|eg)<0)<<31>>31|0),zA=0|o(),eg=0|Qg(19*NA|0,0|aI,0|eg,((0|eg)<0)<<31>>31|0),KA=0|o(),Y=0|Qg(0|oI,((0|oI)<0)<<31>>31|0,0|mA,((0|mA)<0)<<31>>31|0),MI=0|o(),u=0|Qg(0|Tg,((0|Tg)<0)<<31>>31|0,mA<<1|0,((mA<<1|0)<0)<<31>>31|0),p=0|o(),a=0|Qg(0|lg,((0|lg)<0)<<31>>31|0,0|mA,((0|mA)<0)<<31>>31|0),iI=0|o(),bA=0|Qg(19*Bg|0,((19*Bg|0)<0)<<31>>31|0,mA<<1|0,((mA<<1|0)<0)<<31>>31|0),Kg=0|o(),hA=0|Qg(19*RI|0,((19*RI|0)<0)<<31>>31|0,0|mA,((0|mA)<0)<<31>>31|0),ug=0|o(),AA=0|Qg(19*Yg|0,0|Mg,mA<<1|0,((mA<<1|0)<0)<<31>>31|0),Ag=0|o(),b=0|Qg(19*ag|0,0|ng,0|mA,((0|mA)<0)<<31>>31|0),bI=0|o(),cI=0|Qg(19*KI|0,0|XI,mA<<1|0,((mA<<1|0)<0)<<31>>31|0),WA=0|o(),EA=0|Qg(19*uI|0,0|HI,0|mA,((0|mA)<0)<<31>>31|0),og=0|o(),g=0|Qg(19*NA|0,0|aI,mA<<1|0,((mA<<1|0)<0)<<31>>31|0),mA=0|o(),F=0|Qg(0|oI,((0|oI)<0)<<31>>31|0,0|pI,((0|pI)<0)<<31>>31|0),DI=0|o(),r=0|Qg(0|Tg,((0|Tg)<0)<<31>>31|0,0|pI,((0|pI)<0)<<31>>31|0),n=0|o(),JA=0|Qg(19*lg|0,((19*lg|0)<0)<<31>>31|0,0|pI,((0|pI)<0)<<31>>31|0),Xg=0|o(),DA=0|Qg(19*Bg|0,((19*Bg|0)<0)<<31>>31|0,0|pI,((0|pI)<0)<<31>>31|0),Hg=0|o(),IA=0|Qg(19*RI|0,((19*RI|0)<0)<<31>>31|0,0|pI,((0|pI)<0)<<31>>31|0),Ig=0|o(),J=0|Qg(19*Yg|0,0|Mg,0|pI,((0|pI)<0)<<31>>31|0),JI=0|o(),FA=0|Qg(19*ag|0,0|ng,0|pI,((0|pI)<0)<<31>>31|0),dg=0|o(),iA=0|Qg(19*KI|0,0|XI,0|pI,((0|pI)<0)<<31>>31|0),cg=0|o(),x=0|Qg(19*uI|0,0|HI,0|pI,((0|pI)<0)<<31>>31|0),xI=0|o(),pI=0|Qg(19*NA|0,0|aI,0|pI,((0|pI)<0)<<31>>31|0),FI=0|o(),oI=0|Qg(0|oI,((0|oI)<0)<<31>>31|0,0|nI,((0|nI)<0)<<31>>31|0),eI=0|o(),Tg=0|Qg(19*Tg|0,((19*Tg|0)<0)<<31>>31|0,nI<<1|0,((nI<<1|0)<0)<<31>>31|0),RA=0|o(),lg=0|Qg(19*lg|0,((19*lg|0)<0)<<31>>31|0,0|nI,((0|nI)<0)<<31>>31|0),kg=0|o(),Bg=0|Qg(19*Bg|0,((19*Bg|0)<0)<<31>>31|0,nI<<1|0,((nI<<1|0)<0)<<31>>31|0),gg=0|o(),RI=0|Qg(19*RI|0,((19*RI|0)<0)<<31>>31|0,0|nI,((0|nI)<0)<<31>>31|0),PI=0|o(),Mg=0|Qg(19*Yg|0,0|Mg,nI<<1|0,((nI<<1|0)<0)<<31>>31|0),Yg=0|o(),ng=0|Qg(19*ag|0,0|ng,0|nI,((0|nI)<0)<<31>>31|0),ag=0|o(),XI=0|Qg(19*KI|0,0|XI,nI<<1|0,((nI<<1|0)<0)<<31>>31|0),KI=0|o(),HI=0|Qg(19*uI|0,0|HI,0|nI,((0|nI)<0)<<31>>31|0),uI=0|o(),nI=0|Qg(19*NA|0,0|aI,nI<<1|0,((nI<<1|0)<0)<<31>>31|0),aI=0|o(),I=0|vg(0|(Rg=0|vg(0|(Ng=0|vg(0|(mg=0|vg(0|(Lg=0|vg(0|(xg=0|vg(0|(Kg=0|vg(0|(Xg=0|vg(0|(jg=0|vg(0|Tg,0|RA,0|PA,0|jg)),0|o(),0|JA,0|Xg)),0|o(),0|bA,0|Kg)),0|o(),0|vA,0|xg)),0|o(),0|UA,0|Lg)),0|o(),0|SA,0|mg)),0|o(),0|MA,0|Ng)),0|o(),0|YA,0|Rg)),0|o(),0|qA,0|I),qA=0|o(),Gg=0|vg(0|dA,0|GA,0|_g,0|Gg),_g=0|o(),LA=0|vg(0|(zA=0|vg(0|(WA=0|vg(0|(dg=0|vg(0|(Yg=0|vg(0|(Sg=0|vg(0|(bg=0|vg(0|(Jg=0|vg(0|(Pg=0|vg(0|_A,0|lA,0|kA,0|Pg)),0|o(),0|HA,0|Jg)),0|o(),0|uA,0|bg)),0|o(),0|pA,0|Sg)),0|o(),0|Mg,0|Yg)),0|o(),0|FA,0|dg)),0|o(),0|cI,0|WA)),0|o(),0|VA,0|zA)),0|o(),0|OA,0|LA),OA=0|o(),WA=0|ig(0|(zA=0|vg(0|I,0|qA,33554432,0)),0|(VA=0|o()),26),cI=0|o(),cI=0|vg(0|(TA=0|vg(0|(hg=0|vg(0|(Dg=0|vg(0|(Fg=0|vg(0|(pg=0|vg(0|(ug=0|vg(0|(Hg=0|vg(0|(kg=0|vg(0|Gg,0|_g,0|lg,0|kg)),0|o(),0|DA,0|Hg)),0|o(),0|hA,0|ug)),0|o(),0|sA,0|pg)),0|o(),0|yA,0|Fg)),0|o(),0|wA,0|Dg)),0|o(),0|fA,0|hg)),0|o(),0|jA,0|TA)),0|o(),0|WA,0|cI),WA=0|o(),VA=0|Ug(0|I,0|qA,-67108864&zA|0,0|VA),zA=0|o(),TA=0|ig(0|(qA=0|vg(0|LA,0|OA,33554432,0)),0|(I=0|o()),26),jA=0|o(),jA=0|vg(0|(KA=0|vg(0|(og=0|vg(0|(cg=0|vg(0|(ag=0|vg(0|(rg=0|vg(0|(tg=0|vg(0|(fg=0|vg(0|(wg=0|vg(0|(sg=0|vg(0|tA,0|rA,0|nA,0|sg)),0|o(),0|aA,0|wg)),0|o(),0|cA,0|fg)),0|o(),0|oA,0|tg)),0|o(),0|eA,0|rg)),0|o(),0|ng,0|ag)),0|o(),0|iA,0|cg)),0|o(),0|EA,0|og)),0|o(),0|eg,0|KA)),0|o(),0|TA,0|jA),TA=0|o(),I=0|Ug(0|LA,0|OA,-67108864&qA|0,0|I),qA=0|o(),LA=0|ig(0|(OA=0|vg(0|cI,0|WA,16777216,0)),0|o(),25),KA=0|o(),KA=0|vg(0|(XA=0|vg(0|(OI=0|vg(0|(ZI=0|vg(0|($I=0|vg(0|(Ag=0|vg(0|(Ig=0|vg(0|(gg=0|vg(0|(Cg=0|vg(0|(Eg=0|vg(0|QA,0|CA,0|BA,0|Eg)),0|o(),0|gA,0|Cg)),0|o(),0|Bg,0|gg)),0|o(),0|IA,0|Ig)),0|o(),0|AA,0|Ag)),0|o(),0|$,0|$I)),0|o(),0|Z,0|ZI)),0|o(),0|O,0|OI)),0|o(),0|ZA,0|XA)),0|o(),0|LA,0|KA),LA=0|o(),OA=0|Ug(0|cI,0|WA,-33554432&OA|0,0),WA=0|o(),XA=0|ig(0|(cI=0|vg(0|jA,0|TA,16777216,0)),0|o(),25),ZA=0|o(),ZA=0|vg(0|(mA=0|vg(0|(xI=0|vg(0|(KI=0|vg(0|(jI=0|vg(0|(TI=0|vg(0|(qI=0|vg(0|(VI=0|vg(0|(zI=0|vg(0|(WI=0|vg(0|W,0|z,0|V,0|WI)),0|o(),0|q,0|zI)),0|o(),0|T,0|VI)),0|o(),0|j,0|qI)),0|o(),0|X,0|TI)),0|o(),0|K,0|jI)),0|o(),0|XI,0|KI)),0|o(),0|x,0|xI)),0|o(),0|g,0|mA)),0|o(),0|XA,0|ZA),XA=0|o(),cI=0|Ug(0|jA,0|TA,-33554432&cI|0,0),TA=0|o(),mA=0|ig(0|(jA=0|vg(0|KA,0|LA,33554432,0)),0|o(),26),g=0|o(),g=0|vg(0|(xA=0|vg(0|(UI=0|vg(0|(vI=0|vg(0|(bI=0|vg(0|(JI=0|vg(0|(PI=0|vg(0|(NI=0|vg(0|(mI=0|vg(0|(LI=0|vg(0|L,0|m,0|N,0|LI)),0|o(),0|R,0|mI)),0|o(),0|P,0|NI)),0|o(),0|RI,0|PI)),0|o(),0|J,0|JI)),0|o(),0|b,0|bI)),0|o(),0|v,0|vI)),0|o(),0|U,0|UI)),0|o(),0|SI,0|xA)),0|o(),0|mA,0|g),mA=0|o(),jA=0|Ug(0|KA,0|LA,-67108864&jA|0,0),o(),KA=0|ig(0|(LA=0|vg(0|ZA,0|XA,33554432,0)),0|o(),26),xA=0|o(),xA=0|vg(0|(FI=0|vg(0|(uI=0|vg(0|(kI=0|vg(0|(lI=0|vg(0|(_I=0|vg(0|(GI=0|vg(0|(dI=0|vg(0|(YI=0|vg(0|(MI=0|vg(0|S,0|M,0|Y,0|MI)),0|o(),0|d,0|YI)),0|o(),0|G,0|dI)),0|o(),0|_,0|GI)),0|o(),0|l,0|_I)),0|o(),0|k,0|lI)),0|o(),0|H,0|kI)),0|o(),0|HI,0|uI)),0|o(),0|pI,0|FI)),0|o(),0|KA,0|xA),KA=0|o(),LA=0|Ug(0|ZA,0|XA,-67108864&LA|0,0),o(),qA=0|vg(0|(ZA=0|ig(0|(XA=0|vg(0|g,0|mA,16777216,0)),0|o(),25)),0|o(),0|I,0|qA),I=0|o(),XA=0|Ug(0|g,0|mA,-33554432&XA|0,0),o(),g=0|ig(0|(mA=0|vg(0|xA,0|KA,16777216,0)),0|o(),25),ZA=0|o(),ZA=0|vg(0|(aI=0|vg(0|(rI=0|vg(0|(tI=0|vg(0|(fI=0|vg(0|(wI=0|vg(0|(yI=0|vg(0|(sI=0|vg(0|(hI=0|vg(0|(DI=0|vg(0|u,0|p,0|F,0|DI)),0|o(),0|D,0|hI)),0|o(),0|h,0|sI)),0|o(),0|s,0|yI)),0|o(),0|y,0|wI)),0|o(),0|w,0|fI)),0|o(),0|f,0|tI)),0|o(),0|t,0|rI)),0|o(),0|nI,0|aI)),0|o(),0|g,0|ZA),g=0|o(),mA=0|Ug(0|xA,0|KA,-33554432&mA|0,0),o(),xA=0|vg(0|cI,0|TA,0|(xA=0|yg(0|(KA=0|vg(0|qA,0|I,33554432,0)),0|o(),26)),0|o()),o(),KA=0|Ug(0|qA,0|I,-67108864&KA|0,0),o(),qA=0|ig(0|(I=0|vg(0|ZA,0|g,33554432,0)),0|o(),26),TA=0|o(),TA=0|vg(0|($A=0|vg(0|(II=0|vg(0|(gI=0|vg(0|(BI=0|vg(0|(CI=0|vg(0|(QI=0|vg(0|(EI=0|vg(0|(iI=0|vg(0|(eI=0|vg(0|r,0|n,0|oI,0|eI)),0|o(),0|a,0|iI)),0|o(),0|c,0|EI)),0|o(),0|e,0|QI)),0|o(),0|i,0|CI)),0|o(),0|E,0|BI)),0|o(),0|Q,0|gI)),0|o(),0|B,0|II)),0|o(),0|AI,0|$A)),0|o(),0|qA,0|TA),qA=0|o(),I=0|Ug(0|ZA,0|g,-67108864&I|0,0),o(),zA=0|vg(0|(ZA=0|Qg(0|(ZA=0|ig(0|(g=0|vg(0|TA,0|qA,16777216,0)),0|o(),25)),0|o(),19,0)),0|o(),0|VA,0|zA),VA=0|o(),g=0|Ug(0|TA,0|qA,-33554432&g|0,0),o(),TA=0|vg(0|OA,0|WA,0|(TA=0|yg(0|(qA=0|vg(0|zA,0|VA,33554432,0)),0|o(),26)),0|o()),o(),qA=0|Ug(0|zA,0|VA,-67108864&qA|0,0),o(),C[A>>2]=qA,C[A+4>>2]=TA,C[A+8>>2]=jA,C[A+12>>2]=XA,C[A+16>>2]=KA,C[A+20>>2]=xA,C[A+24>>2]=LA,C[A+28>>2]=mA,C[A+32>>2]=I,C[A+36>>2]=g}function H(A,I,g){A|=0,g|=0;var B,Q,E=0,i=0,e=0,c=0,a=0,n=0,r=0,t=0,f=0,w=0,s=0,h=0,D=0,F=0,p=0,u=0,H=0,k=0,l=0,_=0,G=0,d=0,Y=0,M=0,S=0,U=0,v=0,b=0,J=0,P=0,R=0,N=0;B=y,Q=y=y+63&-64,y=y+2048|0,fB(Q+1024|0,I|=0),SI(Q+1024|0,A),fB(Q,Q+1024|0),SI(Q,g),A=0;do{i=0|C[Q+1024+((4|(I=A<<4))<<3)>>2],e=0|C[Q+1024+((4|I)<<3)+4>>2],b=0|uI(0|C[Q+1024+(I<<3)>>2],0|C[Q+1024+(I<<3)+4>>2],i,e),N=0|o(),Y=0|ZI(C[Q+1024+((12|I)<<3)>>2]^b,C[Q+1024+((12|I)<<3)+4>>2]^N,32),H=0|o(),H=0|ZI((N=0|uI(b,N,e=0|ZI((F=0|uI(0|C[Q+1024+((8|I)<<3)>>2],0|C[Q+1024+((8|I)<<3)+4>>2],Y,H))^i,(D=0|o())^e,24),i=0|o()))^Y,(b=0|o())^H,16),Y=0|o(),C[Q+1024+((12|I)<<3)>>2]=H,C[Q+1024+((12|I)<<3)+4>>2]=Y,D=0|uI(F,D,H,Y),F=0|o(),C[Q+1024+((8|I)<<3)>>2]=D,C[Q+1024+((8|I)<<3)+4>>2]=F,i=0|ZI(D^e,F^i,63),e=0|o(),C[Q+1024+((4|I)<<3)>>2]=i,C[Q+1024+((4|I)<<3)+4>>2]=e,U=0|C[Q+1024+((5|I)<<3)>>2],v=0|C[Q+1024+((5|I)<<3)+4>>2],_=0|uI(0|C[Q+1024+((1|I)<<3)>>2],0|C[Q+1024+((1|I)<<3)+4>>2],U,v),M=0|o(),p=0|ZI(C[Q+1024+((13|I)<<3)>>2]^_,C[Q+1024+((13|I)<<3)+4>>2]^M,32),f=0|o(),a=0|uI(n=0|uI(0|C[Q+1024+((9|I)<<3)>>2],0|C[Q+1024+((9|I)<<3)+4>>2],p,f),a=0|o(),f=0|ZI((M=0|uI(_,M,v=0|ZI(n^U,a^v,24),U=0|o()))^p,(_=0|o())^f,16),p=0|o()),n=0|o(),C[Q+1024+((9|I)<<3)>>2]=a,C[Q+1024+((9|I)<<3)+4>>2]=n,U=0|ZI(a^v,n^U,63),v=0|o(),k=0|C[Q+1024+((6|I)<<3)>>2],l=0|C[Q+1024+((6|I)<<3)+4>>2],h=0|uI(0|C[Q+1024+((2|I)<<3)>>2],0|C[Q+1024+((2|I)<<3)+4>>2],k,l),u=0|o(),r=0|ZI(C[Q+1024+((14|I)<<3)>>2]^h,C[Q+1024+((14|I)<<3)+4>>2]^u,32),E=0|o(),k=0|ZI((J=0|uI(P=0|uI(0|C[Q+1024+((10|I)<<3)>>2],0|C[Q+1024+((10|I)<<3)+4>>2],r,E),J=0|o(),E=0|ZI((u=0|uI(h,u,l=0|ZI(P^k,J^l,24),k=0|o()))^r,(h=0|o())^E,16),r=0|o()))^l,(P=0|o())^k,63),l=0|o(),w=0|C[Q+1024+((7|I)<<3)>>2],s=0|C[Q+1024+((7|I)<<3)+4>>2],c=0|uI(0|C[Q+1024+((3|I)<<3)>>2],0|C[Q+1024+((3|I)<<3)+4>>2],w,s),t=0|o(),R=0|ZI(C[Q+1024+((15|I)<<3)>>2]^c,C[Q+1024+((15|I)<<3)+4>>2]^t,32),S=0|o(),w=0|ZI((G=0|uI(d=0|uI(0|C[Q+1024+((11|I)<<3)>>2],0|C[Q+1024+((11|I)<<3)+4>>2],R,S),G=0|o(),S=0|ZI((t=0|uI(c,t,s=0|ZI(d^w,G^s,24),w=0|o()))^R,(c=0|o())^S,16),R=0|o()))^s,(d=0|o())^w,63),s=0|o(),N=0|uI(b=0|uI(N,b,U,v),N=0|o(),v=0|ZI((P=0|uI(J,P,R=0|ZI(b^S,N^R,32),S=0|o()))^U,(J=0|o())^v,24),U=0|o()),b=0|o(),C[Q+1024+(I<<3)>>2]=N,C[Q+1024+(I<<3)+4>>2]=b,S=0|ZI(N^R,b^S,16),b=0|o(),C[Q+1024+((15|I)<<3)>>2]=S,C[Q+1024+((15|I)<<3)+4>>2]=b,b=0|uI(P,J,S,b),S=0|o(),C[Q+1024+((10|I)<<3)>>2]=b,C[Q+1024+((10|I)<<3)+4>>2]=S,U=0|ZI(b^v,S^U,63),S=0|o(),C[Q+1024+((5|I)<<3)>>2]=U,C[Q+1024+((5|I)<<3)+4>>2]=S,M=0|uI(_=0|uI(M,_,k,l),M=0|o(),l=0|ZI((d=0|uI(G,d,Y=0|ZI(_^H,M^Y,32),H=0|o()))^k,(G=0|o())^l,24),k=0|o()),_=0|o(),C[Q+1024+((1|I)<<3)>>2]=M,C[Q+1024+((1|I)<<3)+4>>2]=_,H=0|ZI(M^Y,_^H,16),_=0|o(),C[Q+1024+((12|I)<<3)>>2]=H,C[Q+1024+((12|I)<<3)+4>>2]=_,_=0|uI(d,G,H,_),H=0|o(),C[Q+1024+((11|I)<<3)>>2]=_,C[Q+1024+((11|I)<<3)+4>>2]=H,k=0|ZI(_^l,H^k,63),H=0|o(),C[Q+1024+((6|I)<<3)>>2]=k,C[Q+1024+((6|I)<<3)+4>>2]=H,u=0|uI(h=0|uI(u,h,w,s),u=0|o(),s=0|ZI((F=0|uI(D,F,p=0|ZI(h^f,u^p,32),f=0|o()))^w,(D=0|o())^s,24),w=0|o()),h=0|o(),C[Q+1024+((2|I)<<3)>>2]=u,C[Q+1024+((2|I)<<3)+4>>2]=h,f=0|ZI(u^p,h^f,16),h=0|o(),C[Q+1024+((13|I)<<3)>>2]=f,C[Q+1024+((13|I)<<3)+4>>2]=h,h=0|uI(F,D,f,h),f=0|o(),C[Q+1024+((8|I)<<3)>>2]=h,C[Q+1024+((8|I)<<3)+4>>2]=f,w=0|ZI(h^s,f^w,63),f=0|o(),C[Q+1024+((7|I)<<3)>>2]=w,C[Q+1024+((7|I)<<3)+4>>2]=f,t=0|uI(c=0|uI(t,c,i,e),t=0|o(),e=0|ZI((n=0|uI(a,n,r=0|ZI(c^E,t^r,32),E=0|o()))^i,(a=0|o())^e,24),i=0|o()),c=0|o(),C[Q+1024+((3|I)<<3)>>2]=t,C[Q+1024+((3|I)<<3)+4>>2]=c,E=0|ZI(t^r,c^E,16),c=0|o(),C[Q+1024+((14|I)<<3)>>2]=E,C[Q+1024+((14|I)<<3)+4>>2]=c,c=0|uI(n,a,E,c),E=0|o(),C[Q+1024+((9|I)<<3)>>2]=c,C[Q+1024+((9|I)<<3)+4>>2]=E,i=0|ZI(c^e,E^i,63),E=0|o(),C[Q+1024+((4|I)<<3)>>2]=i,C[Q+1024+((4|I)<<3)+4>>2]=E,A=A+1|0}while(8!=(0|A));A=0;do{P=0|C[(J=Q+1024+(32+(N=A<<1)<<3)|0)>>2],J=0|C[J+4>>2],c=0|uI(0|C[Q+1024+(N<<3)>>2],0|C[Q+1024+(N<<3)+4>>2],P,J),I=0|o(),f=0|ZI(C[(f=Q+1024+(N+96<<3)|0)>>2]^c,C[f+4>>2]^I,32),F=0|o(),F=0|ZI((I=0|uI(c,I,J=0|ZI((k=0|uI(0|C[(k=Q+1024+(N+64<<3)|0)>>2],0|C[k+4>>2],f,F))^P,(l=0|o())^J,24),P=0|o()))^f,(c=0|o())^F,16),f=0|o(),C[(r=Q+1024+(N+96<<3)|0)>>2]=F,C[r+4>>2]=f,l=0|uI(k,l,F,f),k=0|o(),C[(r=Q+1024+(N+64<<3)|0)>>2]=l,C[r+4>>2]=k,P=0|ZI(l^J,k^P,63),J=0|o(),C[(r=Q+1024+(N+32<<3)|0)>>2]=P,C[r+4>>2]=J,a=0|C[(r=Q+1024+(N+33<<3)|0)>>2],r=0|C[r+4>>2],h=0|uI(0|C[Q+1024+((1|N)<<3)>>2],0|C[Q+1024+((1|N)<<3)+4>>2],a,r),t=0|o(),H=0|ZI(C[(H=Q+1024+(N+97<<3)|0)>>2]^h,C[H+4>>2]^t,32),d=0|o(),v=0|uI(U=0|uI(0|C[(U=Q+1024+(N+65<<3)|0)>>2],0|C[U+4>>2],H,d),v=0|o(),d=0|ZI((t=0|uI(h,t,r=0|ZI(U^a,v^r,24),a=0|o()))^H,(h=0|o())^d,16),H=0|o()),U=0|o(),C[(_=Q+1024+(N+65<<3)|0)>>2]=v,C[_+4>>2]=U,a=0|ZI(v^r,U^a,63),r=0|o(),_=Q+1024+(N+16<<3)|0,D=0|C[(p=Q+1024+(N+48<<3)|0)>>2],p=0|C[p+4>>2],_=0|uI(0|C[_>>2],0|C[_+4>>2],D,p),u=0|o(),S=0|ZI(C[(S=Q+1024+(N+112<<3)|0)>>2]^_,C[S+4>>2]^u,32),R=0|o(),D=0|ZI((e=0|uI(i=0|uI(0|C[(i=Q+1024+(N+80<<3)|0)>>2],0|C[i+4>>2],S,R),e=0|o(),R=0|ZI((u=0|uI(_,u,p=0|ZI(i^D,e^p,24),D=0|o()))^S,(_=0|o())^R,16),S=0|o()))^p,(i=0|o())^D,63),p=0|o(),b=Q+1024+(N+17<<3)|0,G=0|C[(Y=Q+1024+(N+49<<3)|0)>>2],Y=0|C[Y+4>>2],b=0|uI(0|C[b>>2],0|C[b+4>>2],G,Y),M=0|o(),E=0|ZI(C[(E=Q+1024+(N+113<<3)|0)>>2]^b,C[E+4>>2]^M,32),n=0|o(),G=0|ZI((s=0|uI(w=0|uI(0|C[(w=Q+1024+(N+81<<3)|0)>>2],0|C[w+4>>2],E,n),s=0|o(),n=0|ZI((M=0|uI(b,M,Y=0|ZI(w^G,s^Y,24),G=0|o()))^E,(b=0|o())^n,16),E=0|o()))^Y,(w=0|o())^G,63),Y=0|o(),I=0|uI(c=0|uI(I,c,a,r),I=0|o(),r=0|ZI((i=0|uI(e,i,E=0|ZI(c^n,I^E,32),n=0|o()))^a,(e=0|o())^r,24),a=0|o()),c=0|o(),C[Q+1024+(N<<3)>>2]=I,C[Q+1024+(N<<3)+4>>2]=c,n=0|ZI(I^E,c^n,16),c=0|o(),C[(E=Q+1024+(N+113<<3)|0)>>2]=n,C[E+4>>2]=c,c=0|uI(i,e,n,c),n=0|o(),C[(e=Q+1024+(N+80<<3)|0)>>2]=c,C[e+4>>2]=n,a=0|ZI(c^r,n^a,63),n=0|o(),C[(r=Q+1024+(N+33<<3)|0)>>2]=a,C[r+4>>2]=n,t=0|uI(h=0|uI(t,h,D,p),t=0|o(),p=0|ZI((w=0|uI(s,w,f=0|ZI(h^F,t^f,32),F=0|o()))^D,(s=0|o())^p,24),D=0|o()),h=0|o(),C[Q+1024+((1|N)<<3)>>2]=t,C[Q+1024+((1|N)<<3)+4>>2]=h,F=0|ZI(t^f,h^F,16),h=0|o(),C[(f=Q+1024+(N+96<<3)|0)>>2]=F,C[f+4>>2]=h,h=0|uI(w,s,F,h),F=0|o(),C[(s=Q+1024+(N+81<<3)|0)>>2]=h,C[s+4>>2]=F,D=0|ZI(h^p,F^D,63),F=0|o(),C[(p=Q+1024+(N+48<<3)|0)>>2]=D,C[p+4>>2]=F,u=0|uI(_=0|uI(u,_,G,Y),u=0|o(),Y=0|ZI((k=0|uI(l,k,H=0|ZI(_^d,u^H,32),d=0|o()))^G,(l=0|o())^Y,24),G=0|o()),_=0|o(),C[(p=Q+1024+(N+16<<3)|0)>>2]=u,C[p+4>>2]=_,d=0|ZI(u^H,_^d,16),_=0|o(),C[(H=Q+1024+(N+97<<3)|0)>>2]=d,C[H+4>>2]=_,_=0|uI(k,l,d,_),d=0|o(),C[(l=Q+1024+(N+64<<3)|0)>>2]=_,C[l+4>>2]=d,G=0|ZI(_^Y,d^G,63),d=0|o(),C[(Y=Q+1024+(N+49<<3)|0)>>2]=G,C[Y+4>>2]=d,M=0|uI(b=0|uI(M,b,P,J),M=0|o(),J=0|ZI((U=0|uI(v,U,S=0|ZI(b^R,M^S,32),R=0|o()))^P,(v=0|o())^J,24),P=0|o()),b=0|o(),C[(Y=Q+1024+(N+17<<3)|0)>>2]=M,C[Y+4>>2]=b,R=0|ZI(M^S,b^R,16),b=0|o(),C[(S=Q+1024+(N+112<<3)|0)>>2]=R,C[S+4>>2]=b,b=0|uI(U,v,R,b),R=0|o(),C[(v=Q+1024+(N+65<<3)|0)>>2]=b,C[v+4>>2]=R,P=0|ZI(b^J,R^P,63),R=0|o(),C[(N=Q+1024+(N+32<<3)|0)>>2]=P,C[N+4>>2]=R,A=A+1|0}while(8!=(0|A));fB(g,Q),SI(g,Q+1024|0),y=B}function k(A,I,g){A|=0,g|=0;var B,Q,E=0,i=0,e=0,c=0,a=0,n=0,r=0,t=0,f=0,w=0,s=0,h=0,D=0,F=0,p=0,u=0,H=0,k=0,l=0,_=0,G=0,d=0,Y=0,M=0,S=0,U=0,v=0,b=0,J=0,P=0,R=0,N=0;B=y,Q=y=y+63&-64,y=y+2048|0,fB(Q+1024|0,I|=0),SI(Q+1024|0,A),fB(Q,Q+1024|0),A=0;do{i=0|C[Q+1024+((4|(I=A<<4))<<3)>>2],e=0|C[Q+1024+((4|I)<<3)+4>>2],b=0|uI(0|C[Q+1024+(I<<3)>>2],0|C[Q+1024+(I<<3)+4>>2],i,e),N=0|o(),Y=0|ZI(C[Q+1024+((12|I)<<3)>>2]^b,C[Q+1024+((12|I)<<3)+4>>2]^N,32),H=0|o(),H=0|ZI((N=0|uI(b,N,e=0|ZI((F=0|uI(0|C[Q+1024+((8|I)<<3)>>2],0|C[Q+1024+((8|I)<<3)+4>>2],Y,H))^i,(D=0|o())^e,24),i=0|o()))^Y,(b=0|o())^H,16),Y=0|o(),C[Q+1024+((12|I)<<3)>>2]=H,C[Q+1024+((12|I)<<3)+4>>2]=Y,D=0|uI(F,D,H,Y),F=0|o(),C[Q+1024+((8|I)<<3)>>2]=D,C[Q+1024+((8|I)<<3)+4>>2]=F,i=0|ZI(D^e,F^i,63),e=0|o(),C[Q+1024+((4|I)<<3)>>2]=i,C[Q+1024+((4|I)<<3)+4>>2]=e,U=0|C[Q+1024+((5|I)<<3)>>2],v=0|C[Q+1024+((5|I)<<3)+4>>2],_=0|uI(0|C[Q+1024+((1|I)<<3)>>2],0|C[Q+1024+((1|I)<<3)+4>>2],U,v),M=0|o(),p=0|ZI(C[Q+1024+((13|I)<<3)>>2]^_,C[Q+1024+((13|I)<<3)+4>>2]^M,32),f=0|o(),a=0|uI(n=0|uI(0|C[Q+1024+((9|I)<<3)>>2],0|C[Q+1024+((9|I)<<3)+4>>2],p,f),a=0|o(),f=0|ZI((M=0|uI(_,M,v=0|ZI(n^U,a^v,24),U=0|o()))^p,(_=0|o())^f,16),p=0|o()),n=0|o(),C[Q+1024+((9|I)<<3)>>2]=a,C[Q+1024+((9|I)<<3)+4>>2]=n,U=0|ZI(a^v,n^U,63),v=0|o(),k=0|C[Q+1024+((6|I)<<3)>>2],l=0|C[Q+1024+((6|I)<<3)+4>>2],h=0|uI(0|C[Q+1024+((2|I)<<3)>>2],0|C[Q+1024+((2|I)<<3)+4>>2],k,l),u=0|o(),r=0|ZI(C[Q+1024+((14|I)<<3)>>2]^h,C[Q+1024+((14|I)<<3)+4>>2]^u,32),E=0|o(),k=0|ZI((J=0|uI(P=0|uI(0|C[Q+1024+((10|I)<<3)>>2],0|C[Q+1024+((10|I)<<3)+4>>2],r,E),J=0|o(),E=0|ZI((u=0|uI(h,u,l=0|ZI(P^k,J^l,24),k=0|o()))^r,(h=0|o())^E,16),r=0|o()))^l,(P=0|o())^k,63),l=0|o(),w=0|C[Q+1024+((7|I)<<3)>>2],s=0|C[Q+1024+((7|I)<<3)+4>>2],c=0|uI(0|C[Q+1024+((3|I)<<3)>>2],0|C[Q+1024+((3|I)<<3)+4>>2],w,s),t=0|o(),R=0|ZI(C[Q+1024+((15|I)<<3)>>2]^c,C[Q+1024+((15|I)<<3)+4>>2]^t,32),S=0|o(),w=0|ZI((G=0|uI(d=0|uI(0|C[Q+1024+((11|I)<<3)>>2],0|C[Q+1024+((11|I)<<3)+4>>2],R,S),G=0|o(),S=0|ZI((t=0|uI(c,t,s=0|ZI(d^w,G^s,24),w=0|o()))^R,(c=0|o())^S,16),R=0|o()))^s,(d=0|o())^w,63),s=0|o(),N=0|uI(b=0|uI(N,b,U,v),N=0|o(),v=0|ZI((P=0|uI(J,P,R=0|ZI(b^S,N^R,32),S=0|o()))^U,(J=0|o())^v,24),U=0|o()),b=0|o(),C[Q+1024+(I<<3)>>2]=N,C[Q+1024+(I<<3)+4>>2]=b,S=0|ZI(N^R,b^S,16),b=0|o(),C[Q+1024+((15|I)<<3)>>2]=S,C[Q+1024+((15|I)<<3)+4>>2]=b,b=0|uI(P,J,S,b),S=0|o(),C[Q+1024+((10|I)<<3)>>2]=b,C[Q+1024+((10|I)<<3)+4>>2]=S,U=0|ZI(b^v,S^U,63),S=0|o(),C[Q+1024+((5|I)<<3)>>2]=U,C[Q+1024+((5|I)<<3)+4>>2]=S,M=0|uI(_=0|uI(M,_,k,l),M=0|o(),l=0|ZI((d=0|uI(G,d,Y=0|ZI(_^H,M^Y,32),H=0|o()))^k,(G=0|o())^l,24),k=0|o()),_=0|o(),C[Q+1024+((1|I)<<3)>>2]=M,C[Q+1024+((1|I)<<3)+4>>2]=_,H=0|ZI(M^Y,_^H,16),_=0|o(),C[Q+1024+((12|I)<<3)>>2]=H,C[Q+1024+((12|I)<<3)+4>>2]=_,_=0|uI(d,G,H,_),H=0|o(),C[Q+1024+((11|I)<<3)>>2]=_,C[Q+1024+((11|I)<<3)+4>>2]=H,k=0|ZI(_^l,H^k,63),H=0|o(),C[Q+1024+((6|I)<<3)>>2]=k,C[Q+1024+((6|I)<<3)+4>>2]=H,u=0|uI(h=0|uI(u,h,w,s),u=0|o(),s=0|ZI((F=0|uI(D,F,p=0|ZI(h^f,u^p,32),f=0|o()))^w,(D=0|o())^s,24),w=0|o()),h=0|o(),C[Q+1024+((2|I)<<3)>>2]=u,C[Q+1024+((2|I)<<3)+4>>2]=h,f=0|ZI(u^p,h^f,16),h=0|o(),C[Q+1024+((13|I)<<3)>>2]=f,C[Q+1024+((13|I)<<3)+4>>2]=h,h=0|uI(F,D,f,h),f=0|o(),C[Q+1024+((8|I)<<3)>>2]=h,C[Q+1024+((8|I)<<3)+4>>2]=f,w=0|ZI(h^s,f^w,63),f=0|o(),C[Q+1024+((7|I)<<3)>>2]=w,C[Q+1024+((7|I)<<3)+4>>2]=f,t=0|uI(c=0|uI(t,c,i,e),t=0|o(),e=0|ZI((n=0|uI(a,n,r=0|ZI(c^E,t^r,32),E=0|o()))^i,(a=0|o())^e,24),i=0|o()),c=0|o(),C[Q+1024+((3|I)<<3)>>2]=t,C[Q+1024+((3|I)<<3)+4>>2]=c,E=0|ZI(t^r,c^E,16),c=0|o(),C[Q+1024+((14|I)<<3)>>2]=E,C[Q+1024+((14|I)<<3)+4>>2]=c,c=0|uI(n,a,E,c),E=0|o(),C[Q+1024+((9|I)<<3)>>2]=c,C[Q+1024+((9|I)<<3)+4>>2]=E,i=0|ZI(c^e,E^i,63),E=0|o(),C[Q+1024+((4|I)<<3)>>2]=i,C[Q+1024+((4|I)<<3)+4>>2]=E,A=A+1|0}while(8!=(0|A));A=0;do{P=0|C[(J=Q+1024+(32+(N=A<<1)<<3)|0)>>2],J=0|C[J+4>>2],c=0|uI(0|C[Q+1024+(N<<3)>>2],0|C[Q+1024+(N<<3)+4>>2],P,J),I=0|o(),f=0|ZI(C[(f=Q+1024+(N+96<<3)|0)>>2]^c,C[f+4>>2]^I,32),F=0|o(),F=0|ZI((I=0|uI(c,I,J=0|ZI((k=0|uI(0|C[(k=Q+1024+(N+64<<3)|0)>>2],0|C[k+4>>2],f,F))^P,(l=0|o())^J,24),P=0|o()))^f,(c=0|o())^F,16),f=0|o(),C[(r=Q+1024+(N+96<<3)|0)>>2]=F,C[r+4>>2]=f,l=0|uI(k,l,F,f),k=0|o(),C[(r=Q+1024+(N+64<<3)|0)>>2]=l,C[r+4>>2]=k,P=0|ZI(l^J,k^P,63),J=0|o(),C[(r=Q+1024+(N+32<<3)|0)>>2]=P,C[r+4>>2]=J,a=0|C[(r=Q+1024+(N+33<<3)|0)>>2],r=0|C[r+4>>2],h=0|uI(0|C[Q+1024+((1|N)<<3)>>2],0|C[Q+1024+((1|N)<<3)+4>>2],a,r),t=0|o(),H=0|ZI(C[(H=Q+1024+(N+97<<3)|0)>>2]^h,C[H+4>>2]^t,32),d=0|o(),v=0|uI(U=0|uI(0|C[(U=Q+1024+(N+65<<3)|0)>>2],0|C[U+4>>2],H,d),v=0|o(),d=0|ZI((t=0|uI(h,t,r=0|ZI(U^a,v^r,24),a=0|o()))^H,(h=0|o())^d,16),H=0|o()),U=0|o(),C[(_=Q+1024+(N+65<<3)|0)>>2]=v,C[_+4>>2]=U,a=0|ZI(v^r,U^a,63),r=0|o(),_=Q+1024+(N+16<<3)|0,D=0|C[(p=Q+1024+(N+48<<3)|0)>>2],p=0|C[p+4>>2],_=0|uI(0|C[_>>2],0|C[_+4>>2],D,p),u=0|o(),S=0|ZI(C[(S=Q+1024+(N+112<<3)|0)>>2]^_,C[S+4>>2]^u,32),R=0|o(),D=0|ZI((e=0|uI(i=0|uI(0|C[(i=Q+1024+(N+80<<3)|0)>>2],0|C[i+4>>2],S,R),e=0|o(),R=0|ZI((u=0|uI(_,u,p=0|ZI(i^D,e^p,24),D=0|o()))^S,(_=0|o())^R,16),S=0|o()))^p,(i=0|o())^D,63),p=0|o(),b=Q+1024+(N+17<<3)|0,G=0|C[(Y=Q+1024+(N+49<<3)|0)>>2],Y=0|C[Y+4>>2],b=0|uI(0|C[b>>2],0|C[b+4>>2],G,Y),M=0|o(),E=0|ZI(C[(E=Q+1024+(N+113<<3)|0)>>2]^b,C[E+4>>2]^M,32),n=0|o(),G=0|ZI((s=0|uI(w=0|uI(0|C[(w=Q+1024+(N+81<<3)|0)>>2],0|C[w+4>>2],E,n),s=0|o(),n=0|ZI((M=0|uI(b,M,Y=0|ZI(w^G,s^Y,24),G=0|o()))^E,(b=0|o())^n,16),E=0|o()))^Y,(w=0|o())^G,63),Y=0|o(),I=0|uI(c=0|uI(I,c,a,r),I=0|o(),r=0|ZI((i=0|uI(e,i,E=0|ZI(c^n,I^E,32),n=0|o()))^a,(e=0|o())^r,24),a=0|o()),c=0|o(),C[Q+1024+(N<<3)>>2]=I,C[Q+1024+(N<<3)+4>>2]=c,n=0|ZI(I^E,c^n,16),c=0|o(),C[(E=Q+1024+(N+113<<3)|0)>>2]=n,C[E+4>>2]=c,c=0|uI(i,e,n,c),n=0|o(),C[(e=Q+1024+(N+80<<3)|0)>>2]=c,C[e+4>>2]=n,a=0|ZI(c^r,n^a,63),n=0|o(),C[(r=Q+1024+(N+33<<3)|0)>>2]=a,C[r+4>>2]=n,t=0|uI(h=0|uI(t,h,D,p),t=0|o(),p=0|ZI((w=0|uI(s,w,f=0|ZI(h^F,t^f,32),F=0|o()))^D,(s=0|o())^p,24),D=0|o()),h=0|o(),C[Q+1024+((1|N)<<3)>>2]=t,C[Q+1024+((1|N)<<3)+4>>2]=h,F=0|ZI(t^f,h^F,16),h=0|o(),C[(f=Q+1024+(N+96<<3)|0)>>2]=F,C[f+4>>2]=h,h=0|uI(w,s,F,h),F=0|o(),C[(s=Q+1024+(N+81<<3)|0)>>2]=h,C[s+4>>2]=F,D=0|ZI(h^p,F^D,63),F=0|o(),C[(p=Q+1024+(N+48<<3)|0)>>2]=D,C[p+4>>2]=F,u=0|uI(_=0|uI(u,_,G,Y),u=0|o(),Y=0|ZI((k=0|uI(l,k,H=0|ZI(_^d,u^H,32),d=0|o()))^G,(l=0|o())^Y,24),G=0|o()),_=0|o(),C[(p=Q+1024+(N+16<<3)|0)>>2]=u,C[p+4>>2]=_,d=0|ZI(u^H,_^d,16),_=0|o(),C[(H=Q+1024+(N+97<<3)|0)>>2]=d,C[H+4>>2]=_,_=0|uI(k,l,d,_),d=0|o(),C[(l=Q+1024+(N+64<<3)|0)>>2]=_,C[l+4>>2]=d,G=0|ZI(_^Y,d^G,63),d=0|o(),C[(Y=Q+1024+(N+49<<3)|0)>>2]=G,C[Y+4>>2]=d,M=0|uI(b=0|uI(M,b,P,J),M=0|o(),J=0|ZI((U=0|uI(v,U,S=0|ZI(b^R,M^S,32),R=0|o()))^P,(v=0|o())^J,24),P=0|o()),b=0|o(),C[(Y=Q+1024+(N+17<<3)|0)>>2]=M,C[Y+4>>2]=b,R=0|ZI(M^S,b^R,16),b=0|o(),C[(S=Q+1024+(N+112<<3)|0)>>2]=R,C[S+4>>2]=b,b=0|uI(U,v,R,b),R=0|o(),C[(v=Q+1024+(N+65<<3)|0)>>2]=b,C[v+4>>2]=R,P=0|ZI(b^J,R^P,63),R=0|o(),C[(N=Q+1024+(N+32<<3)|0)>>2]=P,C[N+4>>2]=R,A=A+1|0}while(8!=(0|A));fB(g,Q),SI(g,Q+1024|0),y=B}function l(A,I){A|=0;var g,B,Q,E,i,e,c,a,n,r,t,f,w,y,s,h,D,F,p,u,H,k,l,_,G,d,Y,M,S,U,v,b,J,P,R,N,m,L,x,K,X,j,T,q,V,z,W,O,Z,$,AA,IA,gA=0,BA=0,CA=0,QA=0,EA=0,iA=0,eA=0,oA=0,cA=0,aA=0,nA=0,rA=0,tA=0,fA=0,wA=0,yA=0,sA=0,hA=0,DA=0,FA=0,pA=0,uA=0,HA=0,kA=0,lA=0,_A=0,GA=0,dA=0,YA=0,MA=0,SA=0,UA=0,vA=0,bA=0,JA=0,PA=0,RA=0,NA=0,mA=0,LA=0,xA=0,KA=0,XA=0,jA=0,TA=0,qA=0,VA=0,zA=0,WA=0,OA=0,ZA=0,$A=0,AI=0,II=0,gI=0,BI=0,CI=0;oA=0|C[(I|=0)>>2],wA=0|C[I+4>>2],rA=0|C[I+8>>2],FA=0|C[I+12>>2],BA=0|C[I+16>>2],pA=0|C[I+20>>2],yA=0|C[I+24>>2],iA=0|C[I+28>>2],EA=0|C[I+32>>2],I=0|C[I+36>>2],$=0|Qg(0|oA,((0|oA)<0)<<31>>31|0,0|oA,((0|oA)<0)<<31>>31|0),CI=0|o(),q=0|Qg(oA<<1|0,0|(cA=((oA<<1|0)<0)<<31>>31),0|wA,((0|wA)<0)<<31>>31|0),AI=0|o(),X=0|Qg(0|rA,((0|rA)<0)<<31>>31|0,oA<<1|0,0|cA),K=0|o(),R=0|Qg(0|FA,((0|FA)<0)<<31>>31|0,oA<<1|0,0|cA),P=0|o(),Y=0|Qg(0|BA,((0|BA)<0)<<31>>31|0,oA<<1|0,0|cA),KA=0|o(),k=0|Qg(0|pA,((0|pA)<0)<<31>>31|0,oA<<1|0,0|cA),RA=0|o(),h=0|Qg(0|yA,((0|yA)<0)<<31>>31|0,oA<<1|0,0|cA),vA=0|o(),t=0|Qg(0|iA,((0|iA)<0)<<31>>31|0,oA<<1|0,0|cA),dA=0|o(),i=0|Qg(0|EA,((0|EA)<0)<<31>>31|0,oA<<1|0,0|cA),kA=0|o(),cA=0|Qg(0|I,((0|I)<0)<<31>>31|0,oA<<1|0,0|cA),oA=0|o(),x=0|Qg(wA<<1|0,0|(gA=((wA<<1|0)<0)<<31>>31),0|wA,((0|wA)<0)<<31>>31|0),OA=0|o(),J=0|Qg(wA<<1|0,0|gA,0|rA,((0|rA)<0)<<31>>31|0),qA=0|o(),U=0|Qg(FA<<1|0,0|(CA=((FA<<1|0)<0)<<31>>31),wA<<1|0,0|gA),S=0|o(),G=0|Qg(0|BA,((0|BA)<0)<<31>>31|0,wA<<1|0,0|gA),_=0|o(),D=0|Qg(pA<<1|0,((pA<<1|0)<0)<<31>>31|0,wA<<1|0,0|gA),bA=0|o(),f=0|Qg(0|yA,((0|yA)<0)<<31>>31|0,wA<<1|0,0|gA),YA=0|o(),e=0|Qg(iA<<1|0,((iA<<1|0)<0)<<31>>31|0,wA<<1|0,0|gA),lA=0|o(),aA=0|Qg(0|EA,((0|EA)<0)<<31>>31|0,wA<<1|0,0|gA),nA=0|o(),gA=0|Qg(38*I|0,0|(fA=((38*I|0)<0)<<31>>31),wA<<1|0,0|gA),wA=0|o(),M=0|Qg(0|rA,((0|rA)<0)<<31>>31|0,0|rA,((0|rA)<0)<<31>>31|0),XA=0|o(),l=0|Qg(rA<<1|0,((rA<<1|0)<0)<<31>>31|0,0|FA,((0|FA)<0)<<31>>31|0),NA=0|o(),F=0|Qg(0|BA,((0|BA)<0)<<31>>31|0,rA<<1|0,((rA<<1|0)<0)<<31>>31|0),JA=0|o(),s=0|Qg(0|pA,((0|pA)<0)<<31>>31|0,rA<<1|0,((rA<<1|0)<0)<<31>>31|0),y=0|o(),r=0|Qg(0|yA,((0|yA)<0)<<31>>31|0,rA<<1|0,((rA<<1|0)<0)<<31>>31|0),n=0|o(),g=0|Qg(0|iA,((0|iA)<0)<<31>>31|0,rA<<1|0,((rA<<1|0)<0)<<31>>31|0),uA=0|o(),W=0|Qg(19*EA|0,0|(UA=((19*EA|0)<0)<<31>>31),rA<<1|0,((rA<<1|0)<0)<<31>>31|0),II=0|o(),rA=0|Qg(38*I|0,0|fA,0|rA,((0|rA)<0)<<31>>31|0),sA=0|o(),u=0|Qg(FA<<1|0,0|CA,0|FA,((0|FA)<0)<<31>>31|0),p=0|o(),w=0|Qg(FA<<1|0,0|CA,0|BA,((0|BA)<0)<<31>>31|0),MA=0|o(),c=0|Qg(pA<<1|0,((pA<<1|0)<0)<<31>>31|0,FA<<1|0,0|CA),_A=0|o(),E=0|Qg(0|yA,((0|yA)<0)<<31>>31|0,FA<<1|0,0|CA),Q=0|o(),O=0|Qg(38*iA|0,0|(xA=((38*iA|0)<0)<<31>>31),FA<<1|0,0|CA),gI=0|o(),j=0|Qg(19*EA|0,0|UA,FA<<1|0,0|CA),ZA=0|o(),CA=0|Qg(38*I|0,0|fA,FA<<1|0,0|CA),FA=0|o(),a=0|Qg(0|BA,((0|BA)<0)<<31>>31|0,0|BA,((0|BA)<0)<<31>>31|0),GA=0|o(),B=0|Qg(BA<<1|0,((BA<<1|0)<0)<<31>>31|0,0|pA,((0|pA)<0)<<31>>31|0),HA=0|o(),Z=0|Qg(19*yA|0,((19*yA|0)<0)<<31>>31|0,BA<<1|0,((BA<<1|0)<0)<<31>>31|0),BI=0|o(),T=0|Qg(38*iA|0,0|xA,0|BA,((0|BA)<0)<<31>>31|0),$A=0|o(),N=0|Qg(19*EA|0,0|UA,BA<<1|0,((BA<<1|0)<0)<<31>>31|0),VA=0|o(),BA=0|Qg(38*I|0,0|fA,0|BA,((0|BA)<0)<<31>>31|0),hA=0|o(),IA=0|Qg(38*pA|0,((38*pA|0)<0)<<31>>31|0,0|pA,((0|pA)<0)<<31>>31|0),AA=0|o(),z=0|Qg(19*yA|0,((19*yA|0)<0)<<31>>31|0,pA<<1|0,((pA<<1|0)<0)<<31>>31|0),V=0|o(),m=0|Qg(38*iA|0,0|xA,pA<<1|0,((pA<<1|0)<0)<<31>>31|0),zA=0|o(),v=0|Qg(19*EA|0,0|UA,pA<<1|0,((pA<<1|0)<0)<<31>>31|0),jA=0|o(),pA=0|Qg(38*I|0,0|fA,pA<<1|0,((pA<<1|0)<0)<<31>>31|0),tA=0|o(),L=0|Qg(19*yA|0,((19*yA|0)<0)<<31>>31|0,0|yA,((0|yA)<0)<<31>>31|0),WA=0|o(),b=0|Qg(38*iA|0,0|xA,0|yA,((0|yA)<0)<<31>>31|0),TA=0|o(),d=0|Qg(19*EA|0,0|UA,yA<<1|0,((yA<<1|0)<0)<<31>>31|0),mA=0|o(),yA=0|Qg(38*I|0,0|fA,0|yA,((0|yA)<0)<<31>>31|0),eA=0|o(),xA=0|Qg(38*iA|0,0|xA,0|iA,((0|iA)<0)<<31>>31|0),LA=0|o(),H=0|Qg(19*EA|0,0|UA,iA<<1|0,((iA<<1|0)<0)<<31>>31|0),PA=0|o(),iA=0|Qg(38*I|0,0|fA,iA<<1|0,((iA<<1|0)<0)<<31>>31|0),DA=0|o(),UA=0|Qg(19*EA|0,0|UA,0|EA,((0|EA)<0)<<31>>31|0),SA=0|o(),EA=0|Qg(38*I|0,0|fA,0|EA,((0|EA)<0)<<31>>31|0),QA=0|o(),I=0|Qg(38*I|0,0|fA,0|I,((0|I)<0)<<31>>31|0),fA=0|o(),wA=0|vg(0|(II=0|vg(0|(gI=0|vg(0|(BI=0|vg(0|(CI=0|vg(0|IA,0|AA,0|$,0|CI)),0|o(),0|Z,0|BI)),0|o(),0|O,0|gI)),0|o(),0|W,0|II)),0|o(),0|gA,0|wA),gA=0|o(),sA=0|vg(0|(ZA=0|vg(0|($A=0|vg(0|(AI=0|vg(0|z,0|V,0|q,0|AI)),0|o(),0|T,0|$A)),0|o(),0|j,0|ZA)),0|o(),0|rA,0|sA),rA=0|o(),FA=0|vg(0|(VA=0|vg(0|(zA=0|vg(0|(WA=0|vg(0|(OA=0|vg(0|X,0|K,0|x,0|OA)),0|o(),0|L,0|WA)),0|o(),0|m,0|zA)),0|o(),0|N,0|VA)),0|o(),0|CA,0|FA),CA=0|o(),hA=0|vg(0|(jA=0|vg(0|(TA=0|vg(0|(qA=0|vg(0|R,0|P,0|J,0|qA)),0|o(),0|b,0|TA)),0|o(),0|v,0|jA)),0|o(),0|BA,0|hA),BA=0|o(),tA=0|vg(0|(mA=0|vg(0|(LA=0|vg(0|(KA=0|vg(0|(XA=0|vg(0|U,0|S,0|M,0|XA)),0|o(),0|Y,0|KA)),0|o(),0|xA,0|LA)),0|o(),0|d,0|mA)),0|o(),0|pA,0|tA),pA=0|o(),eA=0|vg(0|(PA=0|vg(0|(RA=0|vg(0|(NA=0|vg(0|G,0|_,0|l,0|NA)),0|o(),0|k,0|RA)),0|o(),0|H,0|PA)),0|o(),0|yA,0|eA),yA=0|o(),DA=0|vg(0|(SA=0|vg(0|(vA=0|vg(0|(bA=0|vg(0|(JA=0|vg(0|u,0|p,0|F,0|JA)),0|o(),0|D,0|bA)),0|o(),0|h,0|vA)),0|o(),0|UA,0|SA)),0|o(),0|iA,0|DA),iA=0|o(),QA=0|vg(0|(dA=0|vg(0|(YA=0|vg(0|(MA=0|vg(0|s,0|y,0|w,0|MA)),0|o(),0|f,0|YA)),0|o(),0|t,0|dA)),0|o(),0|EA,0|QA),EA=0|o(),fA=0|vg(0|(kA=0|vg(0|(lA=0|vg(0|(_A=0|vg(0|(GA=0|vg(0|r,0|n,0|a,0|GA)),0|o(),0|c,0|_A)),0|o(),0|e,0|lA)),0|o(),0|i,0|kA)),0|o(),0|I,0|fA),I=0|o(),oA=0|vg(0|(nA=0|vg(0|(uA=0|vg(0|(HA=0|vg(0|E,0|Q,0|B,0|HA)),0|o(),0|g,0|uA)),0|o(),0|aA,0|nA)),0|o(),0|cA,0|oA),cA=0|o(),gA=0|rg(0|wA,0|gA,1),wA=0|o(),rA=0|rg(0|sA,0|rA,1),sA=0|o(),CA=0|rg(0|FA,0|CA,1),FA=0|o(),BA=0|rg(0|hA,0|BA,1),hA=0|o(),pA=0|rg(0|tA,0|pA,1),tA=0|o(),yA=0|rg(0|eA,0|yA,1),eA=0|o(),iA=0|rg(0|DA,0|iA,1),DA=0|o(),EA=0|rg(0|QA,0|EA,1),QA=0|o(),I=0|rg(0|fA,0|I,1),fA=0|o(),cA=0|rg(0|oA,0|cA,1),oA=0|o(),sA=0|vg(0|(uA=0|ig(0|(nA=0|vg(0|gA,0|wA,33554432,0)),0|(aA=0|o()),26)),0|o(),0|rA,0|sA),rA=0|o(),aA=0|Ug(0|gA,0|wA,-67108864&nA|0,0|aA),nA=0|o(),eA=0|vg(0|(uA=0|ig(0|(wA=0|vg(0|pA,0|tA,33554432,0)),0|(gA=0|o()),26)),0|o(),0|yA,0|eA),yA=0|o(),gA=0|Ug(0|pA,0|tA,-67108864&wA|0,0|gA),wA=0|o(),FA=0|vg(0|(pA=0|ig(0|(tA=0|vg(0|sA,0|rA,16777216,0)),0|o(),25)),0|o(),0|CA,0|FA),CA=0|o(),tA=0|Ug(0|sA,0|rA,-33554432&tA|0,0),rA=0|o(),DA=0|vg(0|(pA=0|ig(0|(sA=0|vg(0|eA,0|yA,16777216,0)),0|o(),25)),0|o(),0|iA,0|DA),iA=0|o(),sA=0|Ug(0|eA,0|yA,-33554432&sA|0,0),yA=0|o(),hA=0|vg(0|(pA=0|ig(0|(eA=0|vg(0|FA,0|CA,33554432,0)),0|o(),26)),0|o(),0|BA,0|hA),BA=0|o(),eA=0|Ug(0|FA,0|CA,-67108864&eA|0,0),o(),QA=0|vg(0|(FA=0|ig(0|(CA=0|vg(0|DA,0|iA,33554432,0)),0|o(),26)),0|o(),0|EA,0|QA),EA=0|o(),CA=0|Ug(0|DA,0|iA,-67108864&CA|0,0),o(),wA=0|vg(0|(DA=0|ig(0|(iA=0|vg(0|hA,0|BA,16777216,0)),0|o(),25)),0|o(),0|gA,0|wA),gA=0|o(),iA=0|Ug(0|hA,0|BA,-33554432&iA|0,0),o(),fA=0|vg(0|(hA=0|ig(0|(BA=0|vg(0|QA,0|EA,16777216,0)),0|o(),25)),0|o(),0|I,0|fA),I=0|o(),BA=0|Ug(0|QA,0|EA,-33554432&BA|0,0),o(),QA=0|vg(0|sA,0|yA,0|(QA=0|yg(0|(EA=0|vg(0|wA,0|gA,33554432,0)),0|o(),26)),0|o()),o(),EA=0|Ug(0|wA,0|gA,-67108864&EA|0,0),o(),oA=0|vg(0|(wA=0|ig(0|(gA=0|vg(0|fA,0|I,33554432,0)),0|o(),26)),0|o(),0|cA,0|oA),cA=0|o(),gA=0|Ug(0|fA,0|I,-67108864&gA|0,0),o(),nA=0|vg(0|(fA=0|Qg(0|(fA=0|ig(0|(I=0|vg(0|oA,0|cA,16777216,0)),0|o(),25)),0|o(),19,0)),0|o(),0|aA,0|nA),aA=0|o(),I=0|Ug(0|oA,0|cA,-33554432&I|0,0),o(),oA=0|vg(0|tA,0|rA,0|(oA=0|yg(0|(cA=0|vg(0|nA,0|aA,33554432,0)),0|o(),26)),0|o()),o(),cA=0|Ug(0|nA,0|aA,-67108864&cA|0,0),o(),C[A>>2]=cA,C[A+4>>2]=oA,C[A+8>>2]=eA,C[A+12>>2]=iA,C[A+16>>2]=EA,C[A+20>>2]=QA,C[A+24>>2]=CA,C[A+28>>2]=BA,C[A+32>>2]=gA,C[A+36>>2]=I}function _(A,I){A|=0;var g,B,Q,E,i,e,c,a,n,r,t,f,w,y,s,h,D,F,p,u,H,k,l,_,G,d,Y,M,S,U,v,b,J,P,R,N,m,L,x,K,X,j,T,q,V,z,W,O,Z,$,AA=0,IA=0,gA=0,BA=0,CA=0,QA=0,EA=0,iA=0,eA=0,oA=0,cA=0,aA=0,nA=0,rA=0,tA=0,fA=0,wA=0,yA=0,sA=0,hA=0,DA=0,FA=0,pA=0,uA=0,HA=0,kA=0,lA=0,_A=0,GA=0,dA=0,YA=0,MA=0,SA=0,UA=0,vA=0,bA=0,JA=0,PA=0,RA=0,NA=0,mA=0,LA=0,xA=0,KA=0,XA=0,jA=0,TA=0,qA=0,VA=0,zA=0,WA=0,OA=0,ZA=0,$A=0,AI=0,II=0,gI=0,BI=0,CI=0;tA=0|C[(I|=0)>>2],AA=0|C[I+4>>2],EA=0|C[I+8>>2],QA=0|C[I+12>>2],MA=0|C[I+16>>2],nA=0|C[I+20>>2],TA=0|C[I+24>>2],IA=0|C[I+28>>2],_A=0|C[I+32>>2],FA=0|C[I+36>>2],O=0|Qg(0|tA,((0|tA)<0)<<31>>31|0,0|tA,((0|tA)<0)<<31>>31|0),CI=0|o(),P=0|Qg(tA<<1|0,0|(fA=((tA<<1|0)<0)<<31>>31),0|AA,((0|AA)<0)<<31>>31|0),ZA=0|o(),q=0|Qg(0|EA,((0|EA)<0)<<31>>31|0,tA<<1|0,0|fA),T=0|o(),j=0|Qg(0|QA,((0|QA)<0)<<31>>31|0,tA<<1|0,0|fA),X=0|o(),m=0|Qg(0|MA,((0|MA)<0)<<31>>31|0,tA<<1|0,0|fA),$A=0|o(),M=0|Qg(0|nA,((0|nA)<0)<<31>>31|0,tA<<1|0,0|fA),VA=0|o(),p=0|Qg(0|TA,((0|TA)<0)<<31>>31|0,tA<<1|0,0|fA),RA=0|o(),f=0|Qg(0|IA,((0|IA)<0)<<31>>31|0,tA<<1|0,0|fA),GA=0|o(),e=0|Qg(0|_A,((0|_A)<0)<<31>>31|0,tA<<1|0,0|fA),pA=0|o(),fA=0|Qg(0|FA,((0|FA)<0)<<31>>31|0,tA<<1|0,0|fA),tA=0|o(),XA=0|Qg(AA<<1|0,0|(eA=((AA<<1|0)<0)<<31>>31),0|AA,((0|AA)<0)<<31>>31|0),jA=0|o(),vA=0|Qg(AA<<1|0,0|eA,0|EA,((0|EA)<0)<<31>>31|0),bA=0|o(),K=0|Qg(QA<<1|0,0|(rA=((QA<<1|0)<0)<<31>>31),AA<<1|0,0|eA),x=0|o(),v=0|Qg(0|MA,((0|MA)<0)<<31>>31|0,AA<<1|0,0|eA),U=0|o(),u=0|Qg(nA<<1|0,((nA<<1|0)<0)<<31>>31|0,AA<<1|0,0|eA),NA=0|o(),w=0|Qg(0|TA,((0|TA)<0)<<31>>31|0,AA<<1|0,0|eA),dA=0|o(),c=0|Qg(IA<<1|0,((IA<<1|0)<0)<<31>>31|0,AA<<1|0,0|eA),uA=0|o(),g=0|Qg(0|_A,((0|_A)<0)<<31>>31|0,AA<<1|0,0|eA),wA=0|o(),eA=0|Qg(38*FA|0,0|(DA=((38*FA|0)<0)<<31>>31),AA<<1|0,0|eA),AA=0|o(),L=0|Qg(0|EA,((0|EA)<0)<<31>>31|0,0|EA,((0|EA)<0)<<31>>31|0),AI=0|o(),S=0|Qg(EA<<1|0,((EA<<1|0)<0)<<31>>31|0,0|QA,((0|QA)<0)<<31>>31|0),zA=0|o(),H=0|Qg(0|MA,((0|MA)<0)<<31>>31|0,EA<<1|0,((EA<<1|0)<0)<<31>>31|0),mA=0|o(),h=0|Qg(0|nA,((0|nA)<0)<<31>>31|0,EA<<1|0,((EA<<1|0)<0)<<31>>31|0),s=0|o(),t=0|Qg(0|TA,((0|TA)<0)<<31>>31|0,EA<<1|0,((EA<<1|0)<0)<<31>>31|0),r=0|o(),B=0|Qg(0|IA,((0|IA)<0)<<31>>31|0,EA<<1|0,((EA<<1|0)<0)<<31>>31|0),yA=0|o(),V=0|Qg(19*_A|0,0|(PA=((19*_A|0)<0)<<31>>31),EA<<1|0,((EA<<1|0)<0)<<31>>31|0),II=0|o(),EA=0|Qg(38*FA|0,0|DA,0|EA,((0|EA)<0)<<31>>31|0),iA=0|o(),l=0|Qg(QA<<1|0,0|rA,0|QA,((0|QA)<0)<<31>>31|0),k=0|o(),y=0|Qg(QA<<1|0,0|rA,0|MA,((0|MA)<0)<<31>>31|0),YA=0|o(),a=0|Qg(nA<<1|0,((nA<<1|0)<0)<<31>>31|0,QA<<1|0,0|rA),HA=0|o(),i=0|Qg(0|TA,((0|TA)<0)<<31>>31|0,QA<<1|0,0|rA),E=0|o(),z=0|Qg(38*IA|0,0|(hA=((38*IA|0)<0)<<31>>31),QA<<1|0,0|rA),gI=0|o(),b=0|Qg(19*_A|0,0|PA,QA<<1|0,0|rA),WA=0|o(),rA=0|Qg(38*FA|0,0|DA,QA<<1|0,0|rA),QA=0|o(),n=0|Qg(0|MA,((0|MA)<0)<<31>>31|0,0|MA,((0|MA)<0)<<31>>31|0),kA=0|o(),Q=0|Qg(MA<<1|0,((MA<<1|0)<0)<<31>>31|0,0|nA,((0|nA)<0)<<31>>31|0),sA=0|o(),W=0|Qg(19*TA|0,((19*TA|0)<0)<<31>>31|0,MA<<1|0,((MA<<1|0)<0)<<31>>31|0),BI=0|o(),J=0|Qg(38*IA|0,0|hA,0|MA,((0|MA)<0)<<31>>31|0),OA=0|o(),_=0|Qg(19*_A|0,0|PA,MA<<1|0,((MA<<1|0)<0)<<31>>31|0),LA=0|o(),MA=0|Qg(38*FA|0,0|DA,0|MA,((0|MA)<0)<<31>>31|0),BA=0|o(),$=0|Qg(38*nA|0,((38*nA|0)<0)<<31>>31|0,0|nA,((0|nA)<0)<<31>>31|0),Z=0|o(),N=0|Qg(19*TA|0,((19*TA|0)<0)<<31>>31|0,nA<<1|0,((nA<<1|0)<0)<<31>>31|0),R=0|o(),G=0|Qg(38*IA|0,0|hA,nA<<1|0,((nA<<1|0)<0)<<31>>31|0),xA=0|o(),D=0|Qg(19*_A|0,0|PA,nA<<1|0,((nA<<1|0)<0)<<31>>31|0),SA=0|o(),nA=0|Qg(38*FA|0,0|DA,nA<<1|0,((nA<<1|0)<0)<<31>>31|0),gA=0|o(),d=0|Qg(19*TA|0,((19*TA|0)<0)<<31>>31|0,0|TA,((0|TA)<0)<<31>>31|0),KA=0|o(),F=0|Qg(38*IA|0,0|hA,0|TA,((0|TA)<0)<<31>>31|0),UA=0|o(),oA=0|Qg(19*_A|0,0|PA,TA<<1|0,((TA<<1|0)<0)<<31>>31|0),cA=0|o(),TA=0|Qg(38*FA|0,0|DA,0|TA,((0|TA)<0)<<31>>31|0),CA=0|o(),hA=0|Qg(38*IA|0,0|hA,0|IA,((0|IA)<0)<<31>>31|0),aA=0|o(),Y=0|Qg(19*_A|0,0|PA,IA<<1|0,((IA<<1|0)<0)<<31>>31|0),qA=0|o(),I=0|Qg(38*FA|0,0|DA,IA<<1|0,((IA<<1|0)<0)<<31>>31|0),IA=0|o(),PA=0|Qg(19*_A|0,0|PA,0|_A,((0|_A)<0)<<31>>31|0),JA=0|o(),_A=0|Qg(38*FA|0,0|DA,0|_A,((0|_A)<0)<<31>>31|0),lA=0|o(),FA=0|Qg(38*FA|0,0|DA,0|FA,((0|FA)<0)<<31>>31|0),DA=0|o(),AA=0|vg(0|(II=0|vg(0|(gI=0|vg(0|(BI=0|vg(0|(CI=0|vg(0|$,0|Z,0|O,0|CI)),0|o(),0|W,0|BI)),0|o(),0|z,0|gI)),0|o(),0|V,0|II)),0|o(),0|eA,0|AA),eA=0|o(),jA=0|vg(0|q,0|T,0|XA,0|jA),XA=0|o(),bA=0|vg(0|j,0|X,0|vA,0|bA),vA=0|o(),gA=0|vg(0|(cA=0|vg(0|(aA=0|vg(0|($A=0|vg(0|(AI=0|vg(0|K,0|x,0|L,0|AI)),0|o(),0|m,0|$A)),0|o(),0|hA,0|aA)),0|o(),0|oA,0|cA)),0|o(),0|nA,0|gA),nA=0|o(),aA=0|ig(0|(cA=0|vg(0|AA,0|eA,33554432,0)),0|(oA=0|o()),26),hA=0|o(),hA=0|vg(0|(iA=0|vg(0|(WA=0|vg(0|(OA=0|vg(0|(ZA=0|vg(0|N,0|R,0|P,0|ZA)),0|o(),0|J,0|OA)),0|o(),0|b,0|WA)),0|o(),0|EA,0|iA)),0|o(),0|aA,0|hA),aA=0|o(),oA=0|Ug(0|AA,0|eA,-67108864&cA|0,0|oA),cA=0|o(),iA=0|ig(0|(eA=0|vg(0|gA,0|nA,33554432,0)),0|(AA=0|o()),26),EA=0|o(),EA=0|vg(0|(CA=0|vg(0|(qA=0|vg(0|(VA=0|vg(0|(zA=0|vg(0|v,0|U,0|S,0|zA)),0|o(),0|M,0|VA)),0|o(),0|Y,0|qA)),0|o(),0|TA,0|CA)),0|o(),0|iA,0|EA),iA=0|o(),AA=0|Ug(0|gA,0|nA,-67108864&eA|0,0|AA),eA=0|o(),gA=0|ig(0|(nA=0|vg(0|hA,0|aA,16777216,0)),0|o(),25),CA=0|o(),CA=0|vg(0|(QA=0|vg(0|(LA=0|vg(0|(xA=0|vg(0|(KA=0|vg(0|jA,0|XA,0|d,0|KA)),0|o(),0|G,0|xA)),0|o(),0|_,0|LA)),0|o(),0|rA,0|QA)),0|o(),0|gA,0|CA),gA=0|o(),nA=0|Ug(0|hA,0|aA,-33554432&nA|0,0),aA=0|o(),QA=0|ig(0|(hA=0|vg(0|EA,0|iA,16777216,0)),0|o(),25),rA=0|o(),rA=0|vg(0|(IA=0|vg(0|(JA=0|vg(0|(RA=0|vg(0|(NA=0|vg(0|(mA=0|vg(0|l,0|k,0|H,0|mA)),0|o(),0|u,0|NA)),0|o(),0|p,0|RA)),0|o(),0|PA,0|JA)),0|o(),0|I,0|IA)),0|o(),0|QA,0|rA),QA=0|o(),hA=0|Ug(0|EA,0|iA,-33554432&hA|0,0),iA=0|o(),IA=0|ig(0|(EA=0|vg(0|CA,0|gA,33554432,0)),0|o(),26),I=0|o(),I=0|vg(0|(BA=0|vg(0|(SA=0|vg(0|(UA=0|vg(0|bA,0|vA,0|F,0|UA)),0|o(),0|D,0|SA)),0|o(),0|MA,0|BA)),0|o(),0|IA,0|I),IA=0|o(),EA=0|Ug(0|CA,0|gA,-67108864&EA|0,0),o(),CA=0|ig(0|(gA=0|vg(0|rA,0|QA,33554432,0)),0|o(),26),BA=0|o(),BA=0|vg(0|(lA=0|vg(0|(GA=0|vg(0|(dA=0|vg(0|(YA=0|vg(0|h,0|s,0|y,0|YA)),0|o(),0|w,0|dA)),0|o(),0|f,0|GA)),0|o(),0|_A,0|lA)),0|o(),0|CA,0|BA),CA=0|o(),gA=0|Ug(0|rA,0|QA,-67108864&gA|0,0),o(),eA=0|vg(0|(rA=0|ig(0|(QA=0|vg(0|I,0|IA,16777216,0)),0|o(),25)),0|o(),0|AA,0|eA),AA=0|o(),QA=0|Ug(0|I,0|IA,-33554432&QA|0,0),o(),I=0|ig(0|(IA=0|vg(0|BA,0|CA,16777216,0)),0|o(),25),rA=0|o(),rA=0|vg(0|(DA=0|vg(0|(pA=0|vg(0|(uA=0|vg(0|(HA=0|vg(0|(kA=0|vg(0|t,0|r,0|n,0|kA)),0|o(),0|a,0|HA)),0|o(),0|c,0|uA)),0|o(),0|e,0|pA)),0|o(),0|FA,0|DA)),0|o(),0|I,0|rA),I=0|o(),IA=0|Ug(0|BA,0|CA,-33554432&IA|0,0),o(),BA=0|vg(0|hA,0|iA,0|(BA=0|yg(0|(CA=0|vg(0|eA,0|AA,33554432,0)),0|o(),26)),0|o()),o(),CA=0|Ug(0|eA,0|AA,-67108864&CA|0,0),o(),eA=0|ig(0|(AA=0|vg(0|rA,0|I,33554432,0)),0|o(),26),iA=0|o(),iA=0|vg(0|(tA=0|vg(0|(wA=0|vg(0|(yA=0|vg(0|(sA=0|vg(0|i,0|E,0|Q,0|sA)),0|o(),0|B,0|yA)),0|o(),0|g,0|wA)),0|o(),0|fA,0|tA)),0|o(),0|eA,0|iA),eA=0|o(),AA=0|Ug(0|rA,0|I,-67108864&AA|0,0),o(),cA=0|vg(0|(rA=0|Qg(0|(rA=0|ig(0|(I=0|vg(0|iA,0|eA,16777216,0)),0|o(),25)),0|o(),19,0)),0|o(),0|oA,0|cA),oA=0|o(),I=0|Ug(0|iA,0|eA,-33554432&I|0,0),o(),iA=0|vg(0|nA,0|aA,0|(iA=0|yg(0|(eA=0|vg(0|cA,0|oA,33554432,0)),0|o(),26)),0|o()),o(),eA=0|Ug(0|cA,0|oA,-67108864&eA|0,0),o(),C[A>>2]=eA,C[A+4>>2]=iA,C[A+8>>2]=EA,C[A+12>>2]=QA,C[A+16>>2]=CA,C[A+20>>2]=BA,C[A+24>>2]=gA,C[A+28>>2]=IA,C[A+32>>2]=AA,C[A+36>>2]=I}function G(A,I,g,B,C){A|=0,I|=0,g|=0,B|=0;var E=0,i=0,e=0,c=0,a=0,n=0,r=0,t=0,f=0,w=0,y=0,s=0,h=0,D=0,F=0,p=0,u=0;if(n=0|qI(C|=0),t=0|o(),E=0|qI(C+8|0),i=0|o(),B=0|rg(0|g,0|B,56),C=0|o(),(I+g+(0-(7&g))|0)==(0|I))y=2037671283^E,e=1952801890^i,w=1886610805^n,r=1936682341^t,a=1852075885^E,c=1685025377^i,F=1852142177^n,E=1819895653^t,i=I;else for(D=2037671283^E,e=1952801890^i,y=1886610805^n,r=1936682341^t,a=1852075885^E,c=1685025377^i,i=1852142177^n,E=1819895653^t,w=I;;){if(u=(s=0|qI(w))^D,e^=h=0|o(),F=0|vg(0|y,0|r,0|a,0|c),D=0|o(),n=0|$I(a,c,13),a=(0|o())^D,c=0|$I(F,D,32),D=0|o(),t=0|vg(0|u,0|e,0|i,0|E),f=0|o(),D=0|vg((e=0|$I(u,e,16))^t|0,0|(i=(0|o())^f),0|c,0|D),c=0|o(),i=0|$I(e^t,i,21),e=c^(0|o()),f=0|vg(0|t,0|f,n^F|0,0|a),t=0|o(),a=0|$I(n^F,a,17),E=(0|o())^t,t=0|$I(f,t,32),F=0|o(),c=0|vg(a^f|0,0|E,0|D,0|c),n=0|o(),E=0|$I(a^f,E,13),f=(0|o())^n,n=0|$I(c,n,32),a=0|o(),F=0|vg(0|t,0|F,D^i|0,0|e),t=0|o(),a=0|vg((e=0|$I(D^i,e,16))^F|0,0|(i=(0|o())^t),0|n,0|a),n=0|o(),i=0|$I(e^F,i,21),e=n^(0|o()),t=0|vg(E^c|0,0|f,0|F,0|t),F=0|o(),f=0|$I(E^c,f,17),c=(0|o())^F,F=0|$I(t,F,32),E=0|o(),(0|(w=w+8|0))==(I+g+(0-(7&g))|0)){y=a^i,w=a^s,r=n^h,a=f^t,i=I+g+(0-(7&g))|0;break}D=a^i,y=a^s,r=n^h,a=f^t,i=F}switch(7&g){case 7:p=0|rg(0|Q[i+6>>0],0,48),C=0|o()|C,B|=p,p=6;break;case 6:p=6;break;case 5:p=7;break;case 4:p=8;break;case 3:p=9;break;case 2:p=10;break;case 1:p=11}6==(0|p)&&(u=0|rg(0|Q[i+5>>0],0,40),C=0|o()|C,B|=u,p=7),7==(0|p)&&(C=0|Q[i+4>>0]|C,p=8),8==(0|p)&&(B|=u=0|rg(0|Q[i+3>>0],0,24),C=0|o()|C,p=9),9==(0|p)&&(B|=u=0|rg(0|Q[i+2>>0],0,16),C=0|o()|C,p=10),10==(0|p)&&(B|=u=0|rg(0|Q[i+1>>0],0,8),C=0|o()|C,p=11),11==(0|p)&&(B=0|B|Q[i>>0]),g=B^y,h=C^e,w=0|vg(0|w,0|r,0|a,0|c),y=0|o(),s=0|$I(a,c,13),I=(0|o())^y,y=0|$I(w,y,32),p=0|o(),F=0|vg(0|g,0|h,0|F,0|E),u=0|o(),p=0|vg((h=0|$I(g,h,16))^F|0,0|(g=(0|o())^u),0|y,0|p),y=0|o(),g=0|$I(h^F,g,21),h=y^(0|o()),u=0|vg(0|F,0|u,s^w|0,0|I),F=0|o(),I=0|$I(s^w,I,17),w=(0|o())^F,F=0|$I(u,F,32),s=0|o(),y=0|vg(I^u|0,0|w,0|p,0|y),D=0|o(),w=0|$I(I^u,w,13),u=(0|o())^D,D=0|$I(y,D,32),I=0|o(),s=0|vg(0|F,0|s,p^g|0,0|h),F=0|o(),I=0|vg((h=0|$I(p^g,h,16))^s|0,0|(g=(0|o())^F),0|D,0|I),D=0|o(),g=0|$I(h^s,g,21),h=D^(0|o()),F=0|vg(w^y|0,0|u,0|s,0|F),s=0|o(),u=0|$I(w^y,u,17),y=(0|o())^s,s=0|$I(F,s,32),w=0|o(),D=0|vg(I^B|0,D^C|0,u^F|0,0|y),p=0|o(),y=0|$I(u^F,y,13),F=(0|o())^p,p=0|$I(D,p,32),u=0|o(),w=0|vg(255^s|0,0|w,I^g|0,0|h),s=0|o(),u=0|vg((h=0|$I(I^g,h,16))^w|0,0|(g=(0|o())^s),0|p,0|u),p=0|o(),g=0|$I(h^w,g,21),h=p^(0|o()),s=0|vg(0|w,0|s,y^D|0,0|F),w=0|o(),F=0|$I(y^D,F,17),D=(0|o())^w,w=0|$I(s,w,32),y=0|o(),p=0|vg(F^s|0,0|D,0|u,0|p),I=0|o(),D=0|$I(F^s,D,13),s=(0|o())^I,I=0|$I(p,I,32),F=0|o(),y=0|vg(0|w,0|y,u^g|0,0|h),w=0|o(),F=0|vg((h=0|$I(u^g,h,16))^y|0,0|(g=(0|o())^w),0|I,0|F),I=0|o(),g=0|$I(h^y,g,21),h=I^(0|o()),w=0|vg(D^p|0,0|s,0|y,0|w),y=0|o(),s=0|$I(D^p,s,17),p=(0|o())^y,y=0|$I(w,y,32),D=0|o(),I=0|vg(s^w|0,0|p,0|F,0|I),u=0|o(),p=0|$I(s^w,p,13),w=(0|o())^u,u=0|$I(I,u,32),s=0|o(),D=0|vg(0|y,0|D,F^g|0,0|h),y=0|o(),s=0|vg((h=0|$I(F^g,h,16))^D|0,0|(g=(0|o())^y),0|u,0|s),u=0|o(),g=0|$I(h^D,g,21),h=u^(0|o()),y=0|vg(p^I|0,0|w,0|D,0|y),D=0|o(),w=0|$I(p^I,w,17),I=(0|o())^D,D=0|$I(y,D,32),p=0|o(),u=0|vg(w^y|0,0|I,0|s,0|u),F=0|o(),I=0|$I(w^y,I,13),F=(0|o())^F,p=0|vg(0|D,0|p,s^g|0,0|h),D=0|o(),h=0|$I((h=0|$I(s^g,h,16))^p,(0|o())^D,21),g=0|o(),D=0|vg(I^u|0,0|F,0|p,0|D),p=0|o(),F=0|$I(I^u,F,17),u=0|o(),LI(A,h^D^F^(I=0|$I(D,p,32)),g^p^u^(0|o()))}function d(A){var I=0,g=0,B=0,Q=0,E=0,i=0,e=0,o=0,c=0;if(A|=0){I=0|C[8683],c=A+-8+(-8&(g=0|C[A+-4>>2]))|0;do{if(1&g)e=A+-8|0,o=A+-8|0,A=-8&g;else{if(B=0|C[A+-8>>2],!(3&g))return;if(i=B+(-8&g)|0,(E=A+-8+(0-B)|0)>>>0<I>>>0)return;if((0|C[8684])==(0|E)){if(3!=(3&(A=0|C[c+4>>2])|0)){e=E,o=E,A=i;break}return C[8681]=i,C[c+4>>2]=-2&A,C[E+4>>2]=1|i,void(C[E+i>>2]=i)}if(B>>>0<256){if(A=0|C[E+8>>2],(0|(I=0|C[E+12>>2]))==(0|A)){C[8679]=C[8679]&~(1<<(B>>>3)),e=E,o=E,A=i;break}C[A+12>>2]=I,C[I+8>>2]=A,e=E,o=E,A=i;break}Q=0|C[E+24>>2],A=0|C[E+12>>2];do{if((0|A)==(0|E)){if(A=0|C[E+16+4>>2])I=E+16+4|0;else{if(!(A=0|C[E+16>>2])){A=0;break}I=E+16|0}for(;;)if(g=0|C[(B=A+20|0)>>2])A=g,I=B;else{if(!(g=0|C[(B=A+16|0)>>2]))break;A=g,I=B}C[I>>2]=0}else o=0|C[E+8>>2],C[o+12>>2]=A,C[A+8>>2]=o}while(0);if(Q){if(I=0|C[E+28>>2],(0|C[35020+(I<<2)>>2])==(0|E)){if(C[35020+(I<<2)>>2]=A,!A){C[8680]=C[8680]&~(1<<I),e=E,o=E,A=i;break}}else if(C[((0|C[Q+16>>2])==(0|E)?Q+16|0:Q+20|0)>>2]=A,!A){e=E,o=E,A=i;break}C[A+24>>2]=Q,0|(I=0|C[E+16>>2])&&(C[A+16>>2]=I,C[I+24>>2]=A),(I=0|C[E+16+4>>2])?(C[A+20>>2]=I,C[I+24>>2]=A,e=E,o=E,A=i):(e=E,o=E,A=i)}else e=E,o=E,A=i}}while(0);if(!(e>>>0>=c>>>0)&&1&(g=0|C[c+4>>2])){if(2&g)C[c+4>>2]=-2&g,C[o+4>>2]=1|A,C[e+A>>2]=A,Q=A;else{if((0|C[8685])==(0|c)){if(c=(0|C[8682])+A|0,C[8682]=c,C[8685]=o,C[o+4>>2]=1|c,(0|o)!=(0|C[8684]))return;return C[8684]=0,void(C[8681]=0)}if((0|C[8684])==(0|c))return c=(0|C[8681])+A|0,C[8681]=c,C[8684]=e,C[o+4>>2]=1|c,void(C[e+c>>2]=c);Q=(-8&g)+A|0;do{if(g>>>0<256){if(I=0|C[c+8>>2],(0|(A=0|C[c+12>>2]))==(0|I)){C[8679]=C[8679]&~(1<<(g>>>3));break}C[I+12>>2]=A,C[A+8>>2]=I;break}E=0|C[c+24>>2],A=0|C[c+12>>2];do{if((0|A)==(0|c)){if(A=0|C[c+16+4>>2])I=c+16+4|0;else{if(!(A=0|C[c+16>>2])){I=0;break}I=c+16|0}for(;;)if(g=0|C[(B=A+20|0)>>2])A=g,I=B;else{if(!(g=0|C[(B=A+16|0)>>2]))break;A=g,I=B}C[I>>2]=0,I=A}else I=0|C[c+8>>2],C[I+12>>2]=A,C[A+8>>2]=I,I=A}while(0);if(0|E){if(A=0|C[c+28>>2],(0|C[35020+(A<<2)>>2])==(0|c)){if(C[35020+(A<<2)>>2]=I,!I){C[8680]=C[8680]&~(1<<A);break}}else if(C[((0|C[E+16>>2])==(0|c)?E+16|0:E+20|0)>>2]=I,!I)break;C[I+24>>2]=E,0|(A=0|C[c+16>>2])&&(C[I+16>>2]=A,C[A+24>>2]=I),0|(A=0|C[c+16+4>>2])&&(C[I+20>>2]=A,C[A+24>>2]=I)}}while(0);if(C[o+4>>2]=1|Q,C[e+Q>>2]=Q,(0|o)==(0|C[8684]))return void(C[8681]=Q)}if(g=Q>>>3,Q>>>0<256)return(A=0|C[8679])&1<<g?(A=34756+(g<<1<<2)+8|0,I=0|C[34756+(g<<1<<2)+8>>2]):(C[8679]=A|1<<g,A=34756+(g<<1<<2)+8|0,I=34756+(g<<1<<2)|0),C[A>>2]=o,C[I+12>>2]=o,C[o+8>>2]=I,void(C[o+12>>2]=34756+(g<<1<<2));I=35020+((B=(A=Q>>>8)?Q>>>0>16777215?31:Q>>>(7+(B=14-((520192+(A<<((A+1048320|0)>>>16&8))|0)>>>16&4|(A+1048320|0)>>>16&8|(245760+(B=A<<((A+1048320|0)>>>16&8)<<((520192+(A<<((A+1048320|0)>>>16&8))|0)>>>16&4))|0)>>>16&2)+(B<<((B+245760|0)>>>16&2)>>>15)|0)|0)&1|B<<1:0)<<2)|0,C[o+28>>2]=B,C[o+20>>2]=0,C[o+16>>2]=0,A=0|C[8680],g=1<<B;A:do{if(A&g){A=0|C[I>>2];I:do{if((-8&C[A+4>>2]|0)!=(0|Q)){for(B=Q<<(31==(0|B)?0:25-(B>>>1)|0);I=0|C[(g=A+16+(B>>>31<<2)|0)>>2];){if((-8&C[I+4>>2]|0)==(0|Q)){A=I;break I}B<<=1,A=I}C[g>>2]=o,C[o+24>>2]=A,C[o+12>>2]=o,C[o+8>>2]=o;break A}}while(0);c=0|C[(e=A+8|0)>>2],C[c+12>>2]=o,C[e>>2]=o,C[o+8>>2]=c,C[o+12>>2]=A,C[o+24>>2]=0}else C[8680]=A|g,C[I>>2]=o,C[o+24>>2]=I,C[o+12>>2]=o,C[o+8>>2]=o}while(0);if(c=(0|C[8687])-1|0,C[8687]=c,!(0|c)){for(A=35172;A=0|C[A>>2];)A=A+8|0;C[8687]=-1}}}}function Y(A,I){I|=0;var g=0,B=0,Q=0,E=0,i=0,e=0,o=0;g=0|C[4+(A|=0)>>2];do{if(1&g)o=A,g=I;else{if(e=0|C[A>>2],!(3&g))return;if((0|C[8684])==(A+(0-e)|0)){if(3!=(3&(g=0|C[A+I+4>>2])|0)){o=A+(0-e)|0,g=e+I|0;break}return C[8681]=e+I,C[A+I+4>>2]=-2&g,C[A+(0-e)+4>>2]=e+I|1,void(C[A+I>>2]=e+I)}if(e>>>0<256){if(g=0|C[A+(0-e)+8>>2],(0|(B=0|C[A+(0-e)+12>>2]))==(0|g)){C[8679]=C[8679]&~(1<<(e>>>3)),o=A+(0-e)|0,g=e+I|0;break}C[g+12>>2]=B,C[B+8>>2]=g,o=A+(0-e)|0,g=e+I|0;break}i=0|C[A+(0-e)+24>>2],g=0|C[A+(0-e)+12>>2];do{if((0|g)==(A+(0-e)|0)){if(g=0|C[4+(B=A+(0-e)+16|0)>>2])B=B+4|0;else if(!(g=0|C[B>>2])){B=0;break}for(;;)if(Q=0|C[(E=g+20|0)>>2])g=Q,B=E;else{if(!(Q=0|C[(E=g+16|0)>>2]))break;g=Q,B=E}C[B>>2]=0,B=g}else B=0|C[A+(0-e)+8>>2],C[B+12>>2]=g,C[g+8>>2]=B,B=g}while(0);if(i){if(g=0|C[A+(0-e)+28>>2],(0|C[35020+(g<<2)>>2])==(A+(0-e)|0)){if(C[35020+(g<<2)>>2]=B,!B){C[8680]=C[8680]&~(1<<g),o=A+(0-e)|0,g=e+I|0;break}}else if(C[((0|C[i+16>>2])==(A+(0-e)|0)?i+16|0:i+20|0)>>2]=B,!B){o=A+(0-e)|0,g=e+I|0;break}C[B+24>>2]=i,0|(g=0|C[A+(0-e)+16>>2])&&(C[B+16>>2]=g,C[g+24>>2]=B),(g=0|C[A+(0-e)+16+4>>2])?(C[B+20>>2]=g,C[g+24>>2]=B,o=A+(0-e)|0,g=e+I|0):(o=A+(0-e)|0,g=e+I|0)}else o=A+(0-e)|0,g=e+I|0}}while(0);if(2&(Q=0|C[A+I+4>>2]))C[A+I+4>>2]=-2&Q,C[o+4>>2]=1|g,C[o+g>>2]=g,i=g;else{if((0|C[8685])==(A+I|0)){if(I=(0|C[8682])+g|0,C[8682]=I,C[8685]=o,C[o+4>>2]=1|I,(0|o)!=(0|C[8684]))return;return C[8684]=0,void(C[8681]=0)}if((0|C[8684])==(A+I|0))return I=(0|C[8681])+g|0,C[8681]=I,C[8684]=o,C[o+4>>2]=1|I,void(C[o+I>>2]=I);i=(-8&Q)+g|0;do{if(Q>>>0<256){if(B=0|C[A+I+8>>2],(0|(g=0|C[A+I+12>>2]))==(0|B)){C[8679]=C[8679]&~(1<<(Q>>>3));break}C[B+12>>2]=g,C[g+8>>2]=B;break}e=0|C[A+I+24>>2],g=0|C[A+I+12>>2];do{if((0|g)==(A+I|0)){if(g=0|C[A+I+16+4>>2])B=A+I+16+4|0;else{if(!(g=0|C[A+I+16>>2])){B=0;break}B=A+I+16|0}for(;;)if(Q=0|C[(E=g+20|0)>>2])g=Q,B=E;else{if(!(Q=0|C[(E=g+16|0)>>2]))break;g=Q,B=E}C[B>>2]=0,B=g}else B=0|C[A+I+8>>2],C[B+12>>2]=g,C[g+8>>2]=B,B=g}while(0);if(0|e){if(g=0|C[A+I+28>>2],(0|C[35020+(g<<2)>>2])==(A+I|0)){if(C[35020+(g<<2)>>2]=B,!B){C[8680]=C[8680]&~(1<<g);break}}else if(C[((0|C[e+16>>2])==(A+I|0)?e+16|0:e+20|0)>>2]=B,!B)break;C[B+24>>2]=e,0|(g=0|C[A+I+16>>2])&&(C[B+16>>2]=g,C[g+24>>2]=B),0|(g=0|C[A+I+16+4>>2])&&(C[B+20>>2]=g,C[g+24>>2]=B)}}while(0);if(C[o+4>>2]=1|i,C[o+i>>2]=i,(0|o)==(0|C[8684]))return void(C[8681]=i)}if(Q=i>>>3,i>>>0<256)return(g=0|C[8679])&1<<Q?(g=34756+(Q<<1<<2)+8|0,B=0|C[34756+(Q<<1<<2)+8>>2]):(C[8679]=g|1<<Q,g=34756+(Q<<1<<2)+8|0,B=34756+(Q<<1<<2)|0),C[g>>2]=o,C[B+12>>2]=o,C[o+8>>2]=B,void(C[o+12>>2]=34756+(Q<<1<<2));if(B=35020+((E=(g=i>>>8)?i>>>0>16777215?31:i>>>(7+(E=14-((520192+(g<<((g+1048320|0)>>>16&8))|0)>>>16&4|(g+1048320|0)>>>16&8|(245760+(E=g<<((g+1048320|0)>>>16&8)<<((520192+(g<<((g+1048320|0)>>>16&8))|0)>>>16&4))|0)>>>16&2)+(E<<((E+245760|0)>>>16&2)>>>15)|0)|0)&1|E<<1:0)<<2)|0,C[o+28>>2]=E,C[o+20>>2]=0,C[o+16>>2]=0,!((g=0|C[8680])&(Q=1<<E)))return C[8680]=g|Q,C[B>>2]=o,C[o+24>>2]=B,C[o+12>>2]=o,void(C[o+8>>2]=o);g=0|C[B>>2];A:do{if((-8&C[g+4>>2]|0)!=(0|i)){for(E=i<<(31==(0|E)?0:25-(E>>>1)|0);B=0|C[(Q=g+16+(E>>>31<<2)|0)>>2];){if((-8&C[B+4>>2]|0)==(0|i)){g=B;break A}E<<=1,g=B}return C[Q>>2]=o,C[o+24>>2]=g,C[o+12>>2]=o,void(C[o+8>>2]=o)}}while(0);I=0|C[(A=g+8|0)>>2],C[I+12>>2]=o,C[A>>2]=o,C[o+8>>2]=I,C[o+12>>2]=g,C[o+24>>2]=0}function M(A,I,g,Q,E){A|=0,I|=0,g|=0;var i,e,c=0,a=0,n=0,r=0,t=0,f=0,w=0,s=0,h=0,D=0,F=0,p=0,u=0,H=0,k=0,l=0,_=0,G=0,d=0,Y=0,M=0,S=0,U=0,v=0,b=0,J=0,P=0,R=0,N=0,m=0,L=0,x=0,K=0,X=0,j=0,T=0,q=0,V=0,z=0,W=0,O=0,Z=0,$=0,AA=0,IA=0,gA=0,BA=0,CA=0,QA=0,EA=0,iA=0,eA=0,oA=0,cA=0,aA=0,nA=0,rA=0;if(e=y,i=y=y+63&-64,y=y+64|0,!(0==(0|(Q|=0))&0==(0|(E|=0)))){for(L=0|C[A>>2],x=0|C[A+4>>2],K=0|C[A+8>>2],X=0|C[A+12>>2],j=0|C[A+16>>2],S=0|C[A+20>>2],U=0|C[A+24>>2],v=0|C[A+28>>2],b=0|C[A+32>>2],J=0|C[A+36>>2],P=0|C[A+40>>2],R=0|C[A+44>>2],N=0|C[A+56>>2],m=0|C[A+60>>2],a=0,Y=0|C[A+48>>2],M=0|C[A+52>>2],n=I;;){if(d=E>>>0<0|0==(0|E)&Q>>>0<64){c=(I=i)+64|0;do{C[I>>2]=0,I=I+4|0}while((0|I)<(0|c));I=0;do{B[i+I>>0]=0|B[n+I>>0],I=I+1|0}while(E>>>0>0|0==(0|E)&Q>>>0>I>>>0);G=i,a=g,n=i}else G=g;g=20,I=L,c=x,r=P,t=R,f=Y,w=M,s=N,h=m,D=K,F=X,p=j,u=S,H=U,k=v,l=b,_=J;do{W=0|wB((AA=0|wB((nA=0|wB(($=(AA=0|wB((aA=I+p|0)^f,16))+l|0)^p,12))+aA^AA,8))+$^nA,7),rA=0|wB((V=0|wB((eA=0|wB((q=(V=0|wB((iA=c+u|0)^w,16))+_|0)^u,12))+iA^V,8))+q^eA,7),oA=0|wB((z=0|wB((BA=0|wB((IA=(z=0|wB((gA=D+H|0)^s,16))+r|0)^H,12))+gA^z,8))+IA^BA,7),CA=0|wB((QA=0|wB((Z=0|wB((T=(QA=0|wB((O=F+k|0)^h,16))+t|0)^k,12))+O^QA,8))+T^Z,7),u=0|wB((r=(h=0|wB((I=(EA=0|wB((cA=0|wB(QA^rA+(nA+aA),16))+(z+IA)^rA,12))+(rA+(nA+aA))|0)^cA,8))+(cA+(z+IA))|0)^EA,7),H=0|wB((t=(f=0|wB((c=(IA=0|wB((EA=0|wB(oA+(eA+iA)^AA,16))+(QA+T)^oA,12))+(oA+(eA+iA))|0)^EA,8))+(EA+(QA+T))|0)^IA,7),k=0|wB((l=(w=0|wB((D=(T=0|wB((IA=0|wB(CA+(BA+gA)^V,16))+(AA+$)^CA,12))+(CA+(BA+gA))|0)^IA,8))+(IA+(AA+$))|0)^T,7),p=0|wB((_=(s=0|wB((F=(T=0|wB((z=0|wB(Z+O+W^z,16))+(V+q)^W,12))+(Z+O+W)|0)^z,8))+(z+(V+q))|0)^T,7),g=g+-2|0}while(0!=(0|g));if(Z=(0|Vg(n))^I+L,$=(0|Vg(n+4|0))^c+x,AA=(0|Vg(n+8|0))^D+K,IA=(0|Vg(n+12|0))^F+X,gA=(0|Vg(n+16|0))^p+j,BA=(0|Vg(n+20|0))^u+S,CA=(0|Vg(n+24|0))^H+U,QA=(0|Vg(n+28|0))^k+v,EA=(0|Vg(n+32|0))^l+b,iA=(0|Vg(n+36|0))^_+J,eA=(0|Vg(n+40|0))^r+P,oA=(0|Vg(n+44|0))^t+R,cA=(0|Vg(n+48|0))^f+Y,aA=(0|Vg(n+52|0))^w+M,nA=(0|Vg(n+56|0))^s+N,rA=(0|Vg(n+60|0))^h+m,c=M+(0==(0|(I=Y+1|0))&1)|0,Pg(G,Z),Pg(G+4|0,$),Pg(G+8|0,AA),Pg(G+12|0,IA),Pg(G+16|0,gA),Pg(G+20|0,BA),Pg(G+24|0,CA),Pg(G+28|0,QA),Pg(G+32|0,EA),Pg(G+36|0,iA),Pg(G+40|0,eA),Pg(G+44|0,oA),Pg(G+48|0,cA),Pg(G+52|0,aA),Pg(G+56|0,nA),Pg(G+60|0,rA),E>>>0<0|0==(0|E)&Q>>>0<65)break;g=0|vg(0|Q,0|E,-64,-1),E=0|o(),Q=g,g=G+64|0,Y=I,M=c,n=n+64|0}if(d&&0|Q){E=0;do{B[a+E>>0]=0|B[G+E>>0],E=E+1|0}while((0|E)!=(0|Q))}C[A+48>>2]=I,C[A+52>>2]=c}y=e}function S(A,I,g,Q){I|=0,g|=0,Q|=0;var E,i,e,c,a,n=0,r=0,t=0,f=0,w=0,y=0,s=0,h=0,D=0,F=0,p=0,u=0,H=0,k=0,l=0;if(a=0==(0|B[80+(A|=0)>>0])?16777216:0,E=0|C[A+4>>2],i=0|C[A+8>>2],e=0|C[A+12>>2],c=0|C[A+16>>2],w=0|C[A+20>>2],f=0|C[A+24>>2],t=0|C[A+28>>2],r=0|C[A+32>>2],n=0|C[A+36>>2],Q>>>0>0|0==(0|Q)&g>>>0>15)for(D=0|C[A>>2];;){if(k=(67108863&(0|Vg(I)))+w|0,l=((0|Vg(I+3|0))>>>2&67108863)+f|0,H=((0|Vg(I+6|0))>>>4&67108863)+t|0,u=((0|Vg(I+9|0))>>>6)+r|0,w=((0|Vg(I+12|0))>>>8|a)+n|0,n=0|Qg(0|k,0,0|D,0),y=0|o(),t=0|vg(0|(y=0|vg(0|(t=0|vg(0|(y=0|vg(0|(t=0|Qg(0|l,0,5*c|0,0)),0|o(),0|n,0|y)),0|(n=0|o()),0|(t=0|Qg(0|H,0,5*e|0,0)),0|o())),0|(n=0|o()),0|(y=0|Qg(0|u,0,5*i|0,0)),0|o())),0|(n=0|o()),0|(t=0|Qg(0|w,0,5*E|0,0)),0|o()),n=0|o(),y=0|Qg(0|k,0,0|E,0),s=0|o(),p=0|vg(0|(s=0|vg(0|(p=0|vg(0|(s=0|vg(0|(p=0|Qg(0|l,0,0|D,0)),0|o(),0|y,0|s)),0|(y=0|o()),0|(p=0|Qg(0|H,0,5*c|0,0)),0|o())),0|(y=0|o()),0|(s=0|Qg(0|u,0,5*e|0,0)),0|o())),0|(y=0|o()),0|(p=0|Qg(0|w,0,5*i|0,0)),0|o()),y=0|o(),s=0|Qg(0|k,0,0|i,0),h=0|o(),F=0|vg(0|(h=0|vg(0|(F=0|vg(0|(h=0|vg(0|(F=0|Qg(0|l,0,0|E,0)),0|o(),0|s,0|h)),0|(s=0|o()),0|(F=0|Qg(0|H,0,0|D,0)),0|o())),0|(s=0|o()),0|(h=0|Qg(0|u,0,5*c|0,0)),0|o())),0|(s=0|o()),0|(F=0|Qg(0|w,0,5*e|0,0)),0|o()),s=0|o(),h=0|Qg(0|k,0,0|e,0),r=0|o(),f=0|vg(0|(r=0|vg(0|(f=0|vg(0|(r=0|vg(0|(f=0|Qg(0|l,0,0|i,0)),0|o(),0|h,0|r)),0|(h=0|o()),0|(f=0|Qg(0|H,0,0|E,0)),0|o())),0|(h=0|o()),0|(r=0|Qg(0|u,0,0|D,0)),0|o())),0|(h=0|o()),0|(f=0|Qg(0|w,0,5*c|0,0)),0|o()),h=0|o(),r=0|Qg(0|k,0,0|c,0),k=0|o(),w=0|vg(0|(u=0|vg(0|(H=0|vg(0|(k=0|vg(0|(l=0|Qg(0|l,0,0|e,0)),0|o(),0|r,0|k)),0|(r=0|o()),0|(H=0|Qg(0|H,0,0|i,0)),0|o())),0|(r=0|o()),0|(u=0|Qg(0|u,0,0|E,0)),0|o())),0|(r=0|o()),0|(w=0|Qg(0|w,0,0|D,0)),0|o()),r=0|o(),n=0|yg(0|t,0|n,26),o(),y=0|yg(0|(n=0|vg(0|p,0|y,0|n,0)),0|o(),26),o(),s=0|yg(0|(y=0|vg(0|F,0|s,0|y,0)),0|o(),26),o(),h=0|yg(0|(s=0|vg(0|f,0|h,0|s,0)),0|o(),26),o(),r=0|yg(0|(h=0|vg(0|w,0|r,0|h,0)),0|o(),26),o(),g=0|vg(0|g,0|Q,-16,-1),!((Q=0|o())>>>0>0|0==(0|Q)&g>>>0>15)){g=(5*r|0)+(67108863&t)&67108863,f=(((5*r|0)+(67108863&t)|0)>>>26)+(67108863&n)|0,t=67108863&y,r=67108863&s,n=67108863&h;break}w=(5*r|0)+(67108863&t)&67108863,f=(((5*r|0)+(67108863&t)|0)>>>26)+(67108863&n)|0,t=67108863&y,r=67108863&s,n=67108863&h,I=I+16|0}else g=w;C[A+20>>2]=g,C[A+24>>2]=f,C[A+28>>2]=t,C[A+32>>2]=r,C[A+36>>2]=n}function U(A,I){A|=0;var g=0,Q=0,E=0,i=0,e=0,c=0,a=0,n=0,r=0,t=0,f=0,w=0,y=0,s=0,h=0,D=0,F=0,p=0,u=0,H=0,k=0;a=0|kI(I|=0),c=0|o(),u=0|rg(0|(u=0|Bg(0|B[I+4>>0],0|B[I+5>>0],0|B[I+6>>0])),0|o(),6),H=0|o(),e=0|rg(0|(e=0|Bg(0|B[I+7>>0],0|B[I+8>>0],0|B[I+9>>0])),0|o(),5),i=0|o(),F=0|rg(0|(F=0|Bg(0|B[I+10>>0],0|B[I+11>>0],0|B[I+12>>0])),0|o(),3),p=0|o(),E=0|rg(0|(E=0|Bg(0|B[I+13>>0],0|B[I+14>>0],0|B[I+15>>0])),0|o(),2),Q=0|o(),h=0|kI(I+16|0),D=0|o(),n=0|rg(0|(n=0|Bg(0|B[I+20>>0],0|B[I+21>>0],0|B[I+22>>0])),0|o(),7),g=0|o(),r=0|rg(0|(r=0|Bg(0|B[I+23>>0],0|B[I+24>>0],0|B[I+25>>0])),0|o(),5),s=0|o(),t=0|rg(0|(t=0|Bg(0|B[I+26>>0],0|B[I+27>>0],0|B[I+28>>0])),0|o(),4),f=0|o(),w=0|rg(0|(w=0|Bg(0|B[I+29>>0],0|B[I+30>>0],0|B[I+31>>0])),0|o(),2),o(),k=0|Ug(0,0,0|(k=0|yg(0|(y=0|vg(33554428&w|0,0,16777216,0)),0|o(),25)),0|o()),o(),c=0|vg(19&k|0,0,0|a,0|c),a=0|o(),y=0|Ug(33554428&w|0,0,33554432&y|0,0),w=0|o(),i=0|vg(0|(I=0|ig(0|(k=0|vg(0|u,0|H,16777216,0)),0|o(),25)),0|o(),0|e,0|i),e=0|o(),k=0|Ug(0|u,0|H,-33554432&k|0,0),H=0|o(),Q=0|vg(0|(I=0|ig(0|(u=0|vg(0|F,0|p,16777216,0)),0|o(),25)),0|o(),0|E,0|Q),E=0|o(),u=0|Ug(0|F,0|p,-33554432&u|0,0),p=0|o(),I=0|vg(0|n,0|g,0|(I=0|ig(0|(F=0|vg(0|h,0|D,16777216,0)),0|o(),25)),0|o()),g=0|o(),F=0|Ug(0|h,0|D,-33554432&F|0,0),D=0|o(),f=0|vg(0|(n=0|ig(0|(h=0|vg(0|r,0|s,16777216,0)),0|o(),25)),0|o(),0|t,0|f),t=0|o(),h=0|Ug(0|r,0|s,-33554432&h|0,0),s=0|o(),n=0|vg(0|k,0|H,0|(n=0|yg(0|(r=0|vg(0|c,0|a,33554432,0)),0|o(),26)),0|o()),o(),r=0|Ug(0|c,0|a,-67108864&r|0,0),o(),c=0|vg(0|u,0|p,0|(c=0|yg(0|(a=0|vg(0|i,0|e,33554432,0)),0|o(),26)),0|o()),o(),a=0|Ug(0|i,0|e,-67108864&a|0,0),o(),i=0|vg(0|F,0|D,0|(i=0|yg(0|(e=0|vg(0|Q,0|E,33554432,0)),0|o(),26)),0|o()),o(),e=0|Ug(0|Q,0|E,-67108864&e|0,0),o(),Q=0|vg(0|h,0|s,0|(Q=0|yg(0|(E=0|vg(0|I,0|g,33554432,0)),0|o(),26)),0|o()),o(),E=0|Ug(0|I,0|g,-67108864&E|0,0),o(),I=0|vg(0|y,0|w,0|(I=0|yg(0|(g=0|vg(0|f,0|t,33554432,0)),0|o(),26)),0|o()),o(),g=0|Ug(0|f,0|t,-67108864&g|0,0),o(),C[A>>2]=r,C[A+4>>2]=n,C[A+8>>2]=a,C[A+12>>2]=c,C[A+16>>2]=e,C[A+20>>2]=i,C[A+24>>2]=E,C[A+28>>2]=Q,C[A+32>>2]=g,C[A+36>>2]=I}function v(A,I){A|=0;var g=0,B=0,Q=0,E=0,i=0,e=0,c=0,a=0,n=0,r=0,t=0,f=0,w=0,y=0,s=0,h=0,D=0,F=0,p=0,u=0,H=0;c=0|C[(I|=0)>>2],p=0|C[I+4>>2],i=0|C[I+8>>2],D=0|C[I+12>>2],Q=0|C[I+16>>2],s=0|C[I+20>>2],g=0|C[I+24>>2],n=0|C[I+28>>2],r=0|C[I+32>>2],H=0|C[I+36>>2],c=0|Qg(0|c,((0|c)<0)<<31>>31|0,121666,0),e=0|o(),p=0|Qg(0|p,((0|p)<0)<<31>>31|0,121666,0),u=0|o(),i=0|Qg(0|i,((0|i)<0)<<31>>31|0,121666,0),E=0|o(),D=0|Qg(0|D,((0|D)<0)<<31>>31|0,121666,0),F=0|o(),Q=0|Qg(0|Q,((0|Q)<0)<<31>>31|0,121666,0),B=0|o(),s=0|Qg(0|s,((0|s)<0)<<31>>31|0,121666,0),h=0|o(),g=0|Qg(0|g,((0|g)<0)<<31>>31|0,121666,0),I=0|o(),n=0|Qg(0|n,((0|n)<0)<<31>>31|0,121666,0),y=0|o(),r=0|Qg(0|r,((0|r)<0)<<31>>31|0,121666,0),t=0|o(),e=0|vg(0|(a=0|Qg(0|(a=0|ig(0|(w=0|vg(0|(H=0|Qg(0|H,((0|H)<0)<<31>>31|0,121666,0)),0|(f=0|o()),16777216,0)),0|o(),25)),0|o(),19,0)),0|o(),0|c,0|e),c=0|o(),w=0|Ug(0|H,0|f,-33554432&w|0,0),f=0|o(),E=0|vg(0|(a=0|ig(0|(H=0|vg(0|p,0|u,16777216,0)),0|o(),25)),0|o(),0|i,0|E),i=0|o(),H=0|Ug(0|p,0|u,-33554432&H|0,0),u=0|o(),B=0|vg(0|(a=0|ig(0|(p=0|vg(0|D,0|F,16777216,0)),0|o(),25)),0|o(),0|Q,0|B),Q=0|o(),p=0|Ug(0|D,0|F,-33554432&p|0,0),F=0|o(),I=0|vg(0|(a=0|ig(0|(D=0|vg(0|s,0|h,16777216,0)),0|o(),25)),0|o(),0|g,0|I),g=0|o(),D=0|Ug(0|s,0|h,-33554432&D|0,0),h=0|o(),t=0|vg(0|(a=0|ig(0|(s=0|vg(0|n,0|y,16777216,0)),0|o(),25)),0|o(),0|r,0|t),r=0|o(),s=0|Ug(0|n,0|y,-33554432&s|0,0),y=0|o(),a=0|vg(0|H,0|u,0|(a=0|yg(0|(n=0|vg(0|e,0|c,33554432,0)),0|o(),26)),0|o()),o(),n=0|Ug(0|e,0|c,-67108864&n|0,0),o(),e=0|vg(0|p,0|F,0|(e=0|yg(0|(c=0|vg(0|E,0|i,33554432,0)),0|o(),26)),0|o()),o(),c=0|Ug(0|E,0|i,-67108864&c|0,0),o(),E=0|vg(0|D,0|h,0|(E=0|yg(0|(i=0|vg(0|B,0|Q,33554432,0)),0|o(),26)),0|o()),o(),i=0|Ug(0|B,0|Q,-67108864&i|0,0),o(),B=0|vg(0|s,0|y,0|(B=0|yg(0|(Q=0|vg(0|I,0|g,33554432,0)),0|o(),26)),0|o()),o(),Q=0|Ug(0|I,0|g,-67108864&Q|0,0),o(),I=0|vg(0|w,0|f,0|(I=0|yg(0|(g=0|vg(0|t,0|r,33554432,0)),0|o(),26)),0|o()),o(),g=0|Ug(0|t,0|r,-67108864&g|0,0),o(),C[A>>2]=n,C[A+4>>2]=a,C[A+8>>2]=c,C[A+12>>2]=e,C[A+16>>2]=i,C[A+20>>2]=E,C[A+24>>2]=Q,C[A+28>>2]=B,C[A+32>>2]=g,C[A+36>>2]=I}function b(A,I,g){A|=0,I|=0;var C,E,i=0,e=0,o=0;if(E=y,C=y=y+63&-64,y=y+64|0,(g|=0)<<24>>24&&(255&g)<=64){if(0|function(A,I){return 1&(0!=(0|(A|=0))|0!=(0|(I|=0)))|0}(Q[A+80>>0]|Q[A+80+1>>0]<<8|Q[A+80+2>>0]<<16|Q[A+80+3>>0]<<24,Q[A+80+4>>0]|Q[A+80+4+1>>0]<<8|Q[A+80+4+2>>0]<<16|Q[A+80+4+3>>0]<<24))i=-1;else{i=Q[A+352>>0]|Q[A+352+1>>0]<<8|Q[A+352+2>>0]<<16|Q[A+352+3>>0]<<24;do{if(i>>>0>128){if(aA(A,128,0),s(A,A+96|0),i=(Q[A+352>>0]|Q[A+352+1>>0]<<8|Q[A+352+2>>0]<<16|Q[A+352+3>>0]<<24)-128|0,B[A+352>>0]=i,B[A+352+1>>0]=i>>8,B[A+352+2>>0]=i>>16,B[A+352+3>>0]=i>>24,i>>>0<129){BA(A+96|0,A+224|0,0|i),e=Q[A+352>>0]|Q[A+352+1>>0]<<8|Q[A+352+2>>0]<<16|Q[A+352+3>>0]<<24,o=A+96|0;break}c(33456,33488,306,33533)}else e=i,o=A+96|0}while(0);aA(A,e,0),function(A){0|B[356+(A|=0)>>0]&&function(A){B[88+(A|=0)>>0]=-1,B[A+88+1>>0]=-1,B[A+88+2>>0]=-1,B[A+88+3>>0]=-1,B[A+88+4>>0]=-1,B[A+88+4+1>>0]=-1,B[A+88+4+2>>0]=-1,B[A+88+4+3>>0]=-1}(A),B[A+80>>0]=-1,B[A+80+1>>0]=-1,B[A+80+2>>0]=-1,B[A+80+3>>0]=-1,B[A+80+4>>0]=-1,B[A+80+4+1>>0]=-1,B[A+80+4+2>>0]=-1,B[A+80+4+3>>0]=-1}(A),YA(A+96+(i=Q[A+352>>0]|Q[A+352+1>>0]<<8|Q[A+352+2>>0]<<16|Q[A+352+3>>0]<<24)|0,0,256-i|0),s(A,o),LI(C,Q[A>>0]|Q[A+1>>0]<<8|Q[A+2>>0]<<16|Q[A+3>>0]<<24,Q[A+4>>0]|Q[A+4+1>>0]<<8|Q[A+4+2>>0]<<16|Q[A+4+3>>0]<<24),LI(C+8|0,Q[A+8>>0]|Q[A+8+1>>0]<<8|Q[A+8+2>>0]<<16|Q[A+8+3>>0]<<24,Q[A+8+4>>0]|Q[A+8+4+1>>0]<<8|Q[A+8+4+2>>0]<<16|Q[A+8+4+3>>0]<<24),LI(C+16|0,Q[A+16>>0]|Q[A+16+1>>0]<<8|Q[A+16+2>>0]<<16|Q[A+16+3>>0]<<24,Q[A+16+4>>0]|Q[A+16+4+1>>0]<<8|Q[A+16+4+2>>0]<<16|Q[A+16+4+3>>0]<<24),LI(C+24|0,Q[A+24>>0]|Q[A+24+1>>0]<<8|Q[A+24+2>>0]<<16|Q[A+24+3>>0]<<24,Q[A+24+4>>0]|Q[A+24+4+1>>0]<<8|Q[A+24+4+2>>0]<<16|Q[A+24+4+3>>0]<<24),LI(C+32|0,Q[A+32>>0]|Q[A+32+1>>0]<<8|Q[A+32+2>>0]<<16|Q[A+32+3>>0]<<24,Q[A+32+4>>0]|Q[A+32+4+1>>0]<<8|Q[A+32+4+2>>0]<<16|Q[A+32+4+3>>0]<<24),LI(C+40|0,Q[A+40>>0]|Q[A+40+1>>0]<<8|Q[A+40+2>>0]<<16|Q[A+40+3>>0]<<24,Q[A+40+4>>0]|Q[A+40+4+1>>0]<<8|Q[A+40+4+2>>0]<<16|Q[A+40+4+3>>0]<<24),LI(C+48|0,Q[A+48>>0]|Q[A+48+1>>0]<<8|Q[A+48+2>>0]<<16|Q[A+48+3>>0]<<24,Q[A+48+4>>0]|Q[A+48+4+1>>0]<<8|Q[A+48+4+2>>0]<<16|Q[A+48+4+3>>0]<<24),LI(C+56|0,Q[A+56>>0]|Q[A+56+1>>0]<<8|Q[A+56+2>>0]<<16|Q[A+56+3>>0]<<24,Q[A+56+4>>0]|Q[A+56+4+1>>0]<<8|Q[A+56+4+2>>0]<<16|Q[A+56+4+3>>0]<<24),BA(0|I,0|C,255&g|0),MI(A,64),MI(o,256),i=0}return y=E,0|i}return SB(),0}function J(A,I,g,Q){A|=0,I|=0,g|=0;var E,i,e=0,o=0,c=0,a=0,n=0,r=0;switch(i=y,E=y=y+63&-64,y=y+16|0,0|(Q|=0)){case 2:if(I>>>0<13)Q=-31;else{e=33688,o=(Q=A)+13|0;do{B[Q>>0]=0|B[e>>0],Q=Q+1|0,e=e+1|0}while((0|Q)<(0|o));A=A+12|0,o=I+-12|0,e=6}break;case 1:if(I>>>0<12)Q=-31;else{e=33701,o=(Q=A)+12|0;do{B[Q>>0]=0|B[e>>0],Q=Q+1|0,e=e+1|0}while((0|Q)<(0|o));A=A+11|0,o=I+-11|0,e=6}break;default:Q=-31}do{if(6==(0|e)&&!(Q=0|oA(g))){if(cI(E,19),e=A+(Q=0|ZA(E))|0,a=o-Q|0,o>>>0<=Q>>>0){Q=-31;break}if(BA(0|A,0|E,Q+1|0),a>>>0>=4){if(B[e>>0]=36,B[e+1>>0]=109,B[e+2>>0]=61,B[e+3>>0]=0,cI(E,0|C[g+44>>2]),o=e+3+(A=0|ZA(E))|0,(a+-3|0)>>>0<=A>>>0){Q=-31;break}if(BA(e+3|0,0|E,A+1|0),(a+-3-A|0)>>>0>=4){if(B[o>>0]=44,B[o+1>>0]=116,B[o+2>>0]=61,B[o+3>>0]=0,cI(E,0|C[g+40>>2]),I=o+3+(Q=0|ZA(E))|0,c=a+-3-A-3-Q|0,(a+-3-A-3|0)>>>0<=Q>>>0){Q=-31;break}if(BA(o+3|0,0|E,Q+1|0),c>>>0>=4){if(B[I>>0]=44,B[I+1>>0]=112,B[I+2>>0]=61,B[I+3>>0]=0,cI(E,0|C[g+48>>2]),(c+-3|0)>>>0<=(e=0|ZA(E))>>>0){Q=-31;break}if(BA(I+3|0,0|E,e+1|0),Q=I+3+e+1|0,(c+-3-e|0)>>>0>=2&&(B[I+3+e>>0]=36,B[I+3+e+1>>0]=0,q(Q,c+-3-e-1|0,0|C[g+16>>2],0|C[g+20>>2],3),(r=c+-3-e-1-(n=0|ZA(Q))|0)>>>0>=2))return B[Q+n>>0]=36,B[Q+n+1>>0]=0,q(Q+n+1|0,r+-1|0,0|C[g>>2],0|C[g+4>>2],3),y=i,0;Q=-31}else Q=-31}else Q=-31}else Q=-31}}while(0);return y=i,0|Q}function P(A,I,g,Q){A|=0,I|=0,g|=0,Q|=0;var E,i,e=0,c=0,a=0,n=0,r=0,t=0,f=0,w=0,s=0;i=y,E=y=y+63&-64,y=y+704|0;A:do{if(!(0==(0|g)&0==(0|Q))){if(r=0|yg(0|(s=0|C[A+72>>2]),0|(f=0|C[A+72+4>>2]),3),o(),t=0|rg(0|g,0|Q,3),w=0|o(),a=0|yg(0|g,0|Q,61),n=0|o(),f=0|vg(0|s,0|f,0|t,0|w),s=0|o(),C[A+72>>2]=f,C[A+72+4>>2]=s,e=0|C[A+64>>2],c=0|C[A+64+4>>2],s>>>0<w>>>0|(0|s)==(0|w)&f>>>0<t>>>0&&(e=0|vg(0|e,0|c,1,0),c=0|o(),C[A+64>>2]=e,C[A+64+4>>2]=c),e=0|vg(0|e,0|c,0|a,0|n),n=0|o(),C[A+64>>2]=e,C[A+64+4>>2]=n,n=0|Ug(128,0,127&r|0,0),(e=0|o())>>>0>Q>>>0|(0|e)==(0|Q)&n>>>0>g>>>0)for(e=0,c=0;;)if(w=0|B[I+e>>0],s=0|vg(0|e,0|c,127&r|0,0),o(),B[A+80+s>>0]=w,e=0|vg(0|e,0|c,1,0),!((c=0|o())>>>0<Q>>>0|(0|c)==(0|Q)&e>>>0<g>>>0))break A;if(!(0==(0|n)&0==(0|e))){c=0,a=0;do{w=0|B[I+c>>0],s=0|vg(0|c,0|a,127&r|0,0),o(),B[A+80+s>>0]=w,c=0|vg(0|c,0|a,1,0),a=0|o()}while(a>>>0<e>>>0|(0|a)==(0|e)&c>>>0<n>>>0)}if(D(A,A+80|0,E,E+640|0),e=0|Ug(0|g,0|Q,0|n,0|e),(a=0|o())>>>0>0|0==(0|a)&e>>>0>127){c=I+n|0;do{D(A,c,E,E+640|0),c=c+128|0,e=0|vg(0|e,0|a,-128,-1),a=0|o()}while(a>>>0>0|0==(0|a)&e>>>0>127)}else c=I+n|0;if(!(0==(0|(n=127&e))&!0)){e=0,a=0;do{B[A+80+e>>0]=0|B[c+e>>0],e=0|vg(0|e,0|a,1,0),a=0|o()}while(a>>>0<0|0==(0|a)&e>>>0<n>>>0)}MI(E,704)}}while(0);y=i}function R(A,I,g){A|=0,I|=0;var B=0,C=0,Q=0,E=0,i=0,e=0,o=0,c=0,a=0,n=0,r=0,t=0,f=0,w=0,y=0,s=0,h=0,D=0,F=0,p=0,u=0,H=0,k=0,l=0,_=0,G=0,d=0,Y=0,M=0,S=0,U=0,v=0,b=0,J=0,P=0,R=0,N=0;C=0|Vg(g|=0),Q=0|Vg(g+4|0),E=0|Vg(g+8|0),i=0|Vg(g+12|0),e=0|Vg(g+16|0),o=0|Vg(g+20|0),r=0|Vg(g+24|0),t=0|Vg(g+28|0),f=0|Vg(I),w=0|Vg(I+4|0),y=0|Vg(I+8|0),c=0,a=1634760805,n=857760878,g=0|Vg(I+12|0),I=2036477234,B=1797285236;do{p=0|wB((l=0|wB((R=0|wB((k=(l=0|wB(f^(P=C+a|0),16))+e|0)^C,12))+P^l,8))+k^R,7),N=0|wB((D=0|wB((v=0|wB((h=(D=0|wB(w^(U=Q+n|0),16))+o|0)^Q,12))+U^D,8))+h^v,7),b=0|wB((F=0|wB((d=0|wB((_=(F=0|wB(y^(G=E+I|0),16))+r|0)^E,12))+G^F,8))+_^d,7),Y=0|wB((M=0|wB((H=0|wB((s=(M=0|wB(g^(u=i+B|0),16))+t|0)^i,12))+u^M,8))+s^H,7),Q=0|wB((r=(g=0|wB((a=(S=0|wB((J=0|wB(M^N+(R+P),16))+(F+_)^N,12))+(N+(R+P))|0)^J,8))+(J+(F+_))|0)^S,7),E=0|wB((t=(f=0|wB((n=(_=0|wB((S=0|wB(b+(v+U)^l,16))+(M+s)^b,12))+(b+(v+U))|0)^S,8))+(S+(M+s))|0)^_,7),i=0|wB((e=(w=0|wB((I=(s=0|wB((_=0|wB(Y+(d+G)^D,16))+(l+k)^Y,12))+(Y+(d+G))|0)^_,8))+(_+(l+k))|0)^s,7),C=0|wB((o=(y=0|wB((B=(s=0|wB((F=0|wB(H+u+p^F,16))+(D+h)^p,12))+(H+u+p)|0)^F,8))+(F+(D+h))|0)^s,7),c=c+1|0}while(10!=(0|c));Pg(A,a),Pg(A+4|0,n),Pg(A+8|0,I),Pg(A+12|0,B),Pg(A+16|0,f),Pg(A+20|0,w),Pg(A+24|0,y),Pg(A+28|0,g)}function N(A,I,g,C){A|=0,g|=0,C|=0;var Q,E,i=0,e=0;for(Q=y,E=y=y+63&-64,y=y+2272|0,yA(E+1536|0,I|=0),yA(E+1280|0,C),eg(E,g),og(E+2112|0,g),Eg(E+1792|0,E+2112|0),gI(E+2112|0,E+1792|0,E),Eg(E+1952|0,E+2112|0),eg(E+160|0,E+1952|0),gI(E+2112|0,E+1792|0,E+160|0),Eg(E+1952|0,E+2112|0),eg(E+320|0,E+1952|0),gI(E+2112|0,E+1792|0,E+320|0),Eg(E+1952|0,E+2112|0),eg(E+480|0,E+1952|0),gI(E+2112|0,E+1792|0,E+480|0),Eg(E+1952|0,E+2112|0),eg(E+640|0,E+1952|0),gI(E+2112|0,E+1792|0,E+640|0),Eg(E+1952|0,E+2112|0),eg(E+800|0,E+1952|0),gI(E+2112|0,E+1792|0,E+800|0),Eg(E+1952|0,E+2112|0),eg(E+960|0,E+1952|0),gI(E+2112|0,E+1792|0,E+960|0),Eg(E+1952|0,E+2112|0),eg(E+1120|0,E+1952|0),function(A){Kg(A|=0),Sg(A+40|0),Sg(A+80|0)}(A),g=255;;){if(0|B[E+1536+g>>0]){i=g,e=5;break}if(0|B[E+1280+g>>0]){i=g,e=5;break}if(!g)break;g=g+-1|0}if(5==(0|e)&&(0|i)>-1)for(;aI(E+2112|0,A),(g=0|B[E+1536+i>>0])<<24>>24<=0?g<<24>>24<0&&(Eg(E+1952|0,E+2112|0),II(E+2112|0,E+1952|0,E+(160*(((g<<24>>24)/-2|0)<<24>>24)|0)|0)):(Eg(E+1952|0,E+2112|0),gI(E+2112|0,E+1952|0,E+(160*((255&g)>>>1&255)|0)|0)),(g=0|B[E+1280+i>>0])<<24>>24<=0?g<<24>>24<0&&(Eg(E+1952|0,E+2112|0),BI(E+2112|0,E+1952|0,160+(120*(((g<<24>>24)/-2|0)<<24>>24)|0)|0)):(Eg(E+1952|0,E+2112|0),CI(E+2112|0,E+1952|0,160+(120*((255&g)>>>1&255)|0)|0)),Hg(A,E+2112|0),(0|i)>0;)i=i+-1|0;y=Q}function m(A,I,g,Q,E,i,e,o){A|=0,I|=0,g|=0,Q|=0,E|=0,i|=0,e|=0,o|=0;var c,a,n=0,r=0,t=0,f=0,w=0,s=0,h=0;if(a=y,c=y=y+63&-64,y=y+16|0,C[c>>2]=0,EB(o),Q){f=0,r=0,t=0,n=0;A:for(;;){for(s=n;n=0|B[g+s>>0],255==(0|(w=4&o?0|VA(n):0|zA(n)));){if(!E){w=18;break A}if(!(0|qg(E,n))){w=19;break A}if(!((n=s+1|0)>>>0<Q>>>0)){w=17;break A}s=n}if(f=w+(f<<6)|0,(n=r+6|0)>>>0>7){if(r=r+-2|0,t>>>0>=I>>>0){w=13;break}B[A+t>>0]=f>>>r,t=t+1|0}else r=n;if((n=s+1|0)>>>0>=Q>>>0){w=16;break}}13==(0|w)?(C[c>>2]=s,C[8678]=68,n=-1):16==(0|w)?(C[c>>2]=n,n=0):17==(0|w)?(C[c>>2]=n,n=0):18==(0|w)?(C[c>>2]=s,n=0):19==(0|w)&&(C[c>>2]=s,n=0),r>>>0>4?(t=0,n=-1):w=21}else f=0,r=0,t=0,n=0,w=21;do{if(21==(0|w))if((1<<r)-1&f)t=0,n=-1;else if(n|2&o||(n=0|mA(g,Q,c,E,r>>>1)),n)t=0;else if(0!=(0|E)&&(h=0|C[c>>2])>>>0<Q>>>0){for(n=h;;){if(!(0|qg(E,0|B[g+n>>0]))){w=31;break}if((n=n+1|0)>>>0>=Q>>>0){w=30;break}}if(30==(0|w)){C[c>>2]=n,n=0;break}if(31==(0|w)){C[c>>2]=n,n=0;break}}else n=0}while(0);return r=0|C[c>>2],e?C[e>>2]=g+r:(0|r)!=(0|Q)&&(C[8678]=28,n=-1),0|i&&(C[i>>2]=t),y=a,0|n}function L(A,I,g){I|=0,g|=0;var Q,E,i,e=0,o=0,c=0;switch(i=y,E=y=y+63&-64,y=y+16|0,c=0|C[20+(A|=0)>>2],Q=0|C[A+4>>2],C[A+20>>2]=0,C[A+4>>2]=0,0|g){case 2:0|oI(I,33653,9)?I=-32:(I=I+9|0,o=4);break;case 1:0|oI(I,33663,8)?I=-32:(I=I+8|0,o=4);break;default:I=-26}do{if(4==(0|o))if(0==(0|oI(I,33672,3))&&0!=(0|(e=0|qA(I+3|0,E+4|0))))if(19==(0|C[E+4>>2]))if(0|oI(e,33676,3))I=-32;else{if(!(I=0|qA(e+3|0,E+4|0))){I=-32;break}if(C[A+44>>2]=C[E+4>>2],0|oI(I,33680,3))I=-32;else{if(!(I=0|qA(I+3|0,E+4|0))){I=-32;break}if(C[A+40>>2]=C[E+4>>2],0|oI(I,33684,3))I=-32;else{if(!(I=0|qA(I+3|0,E+4|0))){I=-32;break}if(o=0|C[E+4>>2],C[A+48>>2]=o,C[A+52>>2]=o,I=(o=36==(0|B[I>>0]))?I+1|0:I,o){if(C[E+4>>2]=c,0|m(o=0|C[A+16>>2],c,I,0|ZA(I),0,E+4|0,E,3)){I=-32;break}if(C[A+20>>2]=C[E+4>>2],I=0|C[E>>2],I=(c=36==(0|B[I>>0]))?I+1|0:I,c){if(C[E+4>>2]=Q,0|m(c=0|C[A>>2],Q,I,0|ZA(I),0,E+4|0,E,3)){I=-32;break}C[A+4>>2]=C[E+4>>2],g=0|C[E>>2],(I=0|oA(A))||(I=0==(0|B[g>>0])?0:-32)}else I=-32}else I=-32}}}else I=-26;else I=-32}while(0);return y=i,0|I}function x(A,I,g){A|=0,I|=0;var B=0,C=0,Q=0,E=0,i=0,e=0,o=0,c=0,a=0,n=0,r=0,t=0,f=0,w=0,y=0,s=0,h=0,D=0,F=0,p=0,u=0,H=0,k=0,l=0,_=0,G=0,d=0,Y=0,M=0,S=0,U=0;Q=0|Vg(g|=0),n=0|Vg(g+4|0),r=0|Vg(g+8|0),t=0|Vg(g+12|0),i=0|Vg(g+16|0),e=0|Vg(g+20|0),o=0|Vg(g+24|0),c=0|Vg(g+28|0),w=0|Vg(I),y=0|Vg(I+4|0),s=0|Vg(I+8|0),B=20,C=1634760805,E=2036477234,a=1797285236,f=857760878,g=0|Vg(I+12|0);do{Y=(0|wB((F=(0|wB((H=(0|wB((_=(0|wB(e+C|0,7))^t)+C|0,9))^s)+_|0,13))^e)+H|0,18))^C,l=(0|wB((U=(0|wB((D=(0|wB((u=(0|wB(f+Q|0,7))^g)+f|0,9))^o)+u|0,13))^Q)+D|0,18))^f,p=(0|wB((d=(0|wB((S=(0|wB((h=(0|wB(E+w|0,7))^c)+E|0,9))^n)+h|0,13))^w)+S|0,18))^E,I=(0|wB((k=(0|wB((G=(0|wB((M=(0|wB(a+i|0,7))^r)+a|0,9))^y)+M|0,13))^i)+G|0,18))^a,C=(0|wB((r=(0|wB((n=(0|wB((Q=(0|wB(M+Y|0,7))^U)+Y|0,9))^S)+Q|0,13))^M)+n|0,18))^Y,f=(0|wB((t=(0|wB((y=(0|wB((w=(0|wB(l+_|0,7))^d)+l|0,9))^G)+w|0,13))^_)+y|0,18))^l,E=(0|wB((g=(0|wB((s=(0|wB((i=(0|wB(p+u|0,7))^k)+p|0,9))^H)+i|0,13))^u)+s|0,18))^p,a=(0|wB((c=(0|wB((o=(0|wB((e=(0|wB(I+h|0,7))^F)+I|0,9))^D)+e|0,13))^h)+o|0,18))^I,B=B+-2|0}while(0!=(0|B));Pg(A,C),Pg(A+4|0,f),Pg(A+8|0,E),Pg(A+12|0,a),Pg(A+16|0,w),Pg(A+20|0,y),Pg(A+24|0,s),Pg(A+28|0,g)}function K(A,I,g,Q){I|=0,g|=0,Q|=0;var E=0,i=0,e=0,c=0,a=0,n=0,r=0,t=0;if(0==(0|(i=0|C[56+(A|=0)>>2]))&0==(0|(E=0|C[A+56+4>>2])))r=7;else{if(c=0|Ug(16,0,0|i,0|E),!(0==(0|(n=(a=0|o())>>>0>Q>>>0|(0|a)==(0|Q)&c>>>0>g>>>0?g:c))&0==(0|(a=a>>>0>Q>>>0|(0|a)==(0|Q)&c>>>0>g>>>0?Q:a)))){c=0,e=0;do{t=0|B[I+c>>0],i=0|vg(0|i,0|E,0|c,0|e),o(),B[A+64+i>>0]=t,c=0|vg(0|c,0|e,1,0),e=0|o(),i=0|C[A+56>>2],E=0|C[A+56+4>>2]}while(e>>>0<a>>>0|(0|e)==(0|a)&c>>>0<n>>>0)}t=0|vg(0|i,0|E,0|n,0|a),c=0|o(),C[A+56>>2]=t,C[A+56+4>>2]=c,c>>>0<0|0==(0|c)&t>>>0<16||(g=0|Ug(0|g,0|Q,0|n,0|a),Q=0|o(),S(A,A+64|0,16,0),C[A+56>>2]=0,C[A+56+4>>2]=0,I=I+n|0,r=7)}if(7==(0|r)&&(E=-16&g,Q>>>0>0|0==(0|Q)&g>>>0>15?(i=0|Ug(0|g,0|Q,0|E,0|Q),t=0|o(),S(A,I,E,Q),Q=t,I=I+E|0):i=g,!(0==(0|i)&0==(0|Q)))){E=0,g=0;do{r=0|B[I+E>>0],t=0|vg(0|C[A+56>>2],0|C[A+56+4>>2],0|E,0|g),o(),B[A+64+t>>0]=r,E=0|vg(0|E,0|g,1,0),g=0|o()}while(g>>>0<Q>>>0|(0|g)==(0|Q)&E>>>0<i>>>0);r=0|vg(0|C[A+56>>2],0|C[A+56+4>>2],0|i,0|Q),t=0|o(),C[A+56>>2]=r,C[A+56+4>>2]=t}}function X(A,I){A|=0,I|=0;var g=0,i=0,e=0,c=0,a=0,n=0,r=0,t=0,f=0,w=0,y=0;A:do{if(0|A){do{if(2==(0|C[A+36>>2])){if(0==(0|(g=0|C[I>>2]))&&(0|Q[I+8>>0])<=1){i=6;break}t=0|C[A+4>>2],r=0}else i=6}while(0);if(6==(0|i)&&(QA(A,I,t=0|C[A+4>>2]),g=0|C[I>>2],r=1),g=0==(0|g)&(e=0|B[I+8>>0])<<24>>24==0?2:0,i=0|C[A+24>>2],a=0|E(i,0|C[I+4>>2]),n=0|C[A+20>>2],e=a+g+(0|E(n,255&e))|0,g>>>0<n>>>0)for(c=i,n=e,i=(0==(0|(e>>>0)%(i>>>0))?i+-1|0:-1)+e|0;;){if(a=1==(0|(n>>>0)%(c>>>0))?n+-1|0:i,i=r?t+(g<<3)|0:(0|C[4+(0|C[A>>2])>>2])+(a<<10)|0,y=0|C[(c=i)>>2],c=0|Ag(0|C[c+4>>2],0,0|C[A+28>>2],0),e=0|o(),f=0|C[I>>2],i=0|B[I+8>>0],w=0|C[I+4>>2],c=0==(0|f)&i<<24>>24==0?w:c,C[I+12>>2]=g,e=0|DA(A,f,i,g,y,1&((0|c)==(0|w)?0==(0|(0==(0|f)&i<<24>>24==0?0:e)):0)),e=(i=0|C[4+(0|C[A>>2])>>2])+((0|E(0|C[A+24>>2],c))<<10)+(e<<10)|0,c=i+(n<<10)|0,f?H(i+(a<<10)|0,e,c):k(i+(a<<10)|0,e,c),(g=g+1|0)>>>0>=(0|C[A+20>>2])>>>0)break A;c=0|C[A+24>>2],n=n+1|0,i=a+1|0}}}while(0)}function j(A,I,g){var B,Q;g|=0,B=y,Q=y=y+63&-64,y=y+400|0,0==(0|(A|=0))|0==(0|(I|=0))||(HI(Q,0,0,64),Pg(Q+384|0,0|C[I+48>>2]),Xg(Q,Q+384|0,4,0),Pg(Q+384|0,0|C[I+4>>2]),Xg(Q,Q+384|0,4,0),Pg(Q+384|0,0|C[I+44>>2]),Xg(Q,Q+384|0,4,0),Pg(Q+384|0,0|C[I+40>>2]),Xg(Q,Q+384|0,4,0),Pg(Q+384|0,19),Xg(Q,Q+384|0,4,0),Pg(Q+384|0,g),Xg(Q,Q+384|0,4,0),Pg(Q+384|0,0|C[I+12>>2]),Xg(Q,Q+384|0,4,0),0|(g=0|C[I+8>>2])&&(Xg(Q,g,0|C[I+12>>2],0),1&C[I+56>>2]|0)&&(MI(0|C[I+8>>2],0|C[I+12>>2]),C[I+12>>2]=0),Pg(Q+384|0,0|C[I+20>>2]),Xg(Q,Q+384|0,4,0),0|(g=0|C[I+16>>2])&&Xg(Q,g,0|C[I+20>>2],0),Pg(Q+384|0,0|C[I+28>>2]),Xg(Q,Q+384|0,4,0),0|(g=0|C[I+24>>2])&&(Xg(Q,g,0|C[I+28>>2],0),2&C[I+56>>2]|0)&&(MI(0|C[I+24>>2],0|C[I+28>>2]),C[I+28>>2]=0),Pg(Q+384|0,0|C[I+36>>2]),Xg(Q,Q+384|0,4,0),0|(g=0|C[I+32>>2])&&Xg(Q,g,0|C[I+36>>2],0),fg(Q,A,64)),y=B}function T(A,I,g,Q){A|=0,I|=0,g|=0,Q|=0;var E,i,e=0,o=0,c=0;if(E=y,i=y=y+63&-64,y=y+528|0,C[i+512>>2]=0,Pg(i+512|0,I),I>>>0<65)(0|HI(i,0,0,I))>=0&&(Xg(i,i+512|0,4,0),Xg(i,g,Q,0),fg(i,A,I));else A:do{if((0|HI(i,0,0,64))>=0&&(Xg(i,i+512|0,4,0),Xg(i,g,Q,0),(0|fg(i,i+448|0,64))>=0)){o=i+448|0,c=(e=A)+32|0;do{B[e>>0]=0|B[o>>0],e=e+1|0,o=o+1|0}while((0|e)<(0|c));o=i+448|0,c=64+(e=i+384|0)|0;do{C[e>>2]=C[o>>2],e=e+4|0,o=o+4|0}while((0|e)<(0|c));if((I+-32|0)>>>0>64){Q=A+32|0,g=I+-32|0;do{if((0|TI(i+448|0,64,i+384|0,64,0,0,0))<0)break A;o=i+448|0,c=(e=Q)+32|0;do{B[e>>0]=0|B[o>>0],e=e+1|0,o=o+1|0}while((0|e)<(0|c));g=g+-32|0,Q=Q+32|0,o=i+448|0,c=64+(e=i+384|0)|0;do{C[e>>2]=C[o>>2],e=e+4|0,o=o+4|0}while((0|e)<(0|c))}while(g>>>0>64)}else Q=A+32|0,g=I+-32|0;(0|TI(i+448|0,g,i+384|0,64,0,0,0))>=0&&BA(0|Q,i+448|0,0|g)}}while(0);MI(i,384),y=E}function q(A,I,g,C,i){A|=0,I|=0,g|=0,C|=0;var e=0,o=0,a=0,n=0,r=0,t=0;EB(i|=0),o=(0|E((C>>>0)/3|0,-3))+C|0,e=((C>>>0)/3|0)<<2;do{if(o){if(2&i){e=(2|e)+(o>>>1)|0;break}e=e+4|0;break}}while(0);if(e>>>0>=I>>>0&&SB(),4&i)if(0|C){n=0,i=0,o=0,r=0;do{if(t=r,r=r+1|0,n=n<<8|0|Q[g+t>>0],(i=i+8|0)>>>0>5)for(;;){if(t=255&(0|XI(n>>>(i=i+-6|0)&63)),a=o+1|0,B[A+o>>0]=t,!(i>>>0>5)){o=a;break}o=a}}while((0|r)!=(0|C));i&&(t=255&(0|XI(n<<6-i&63)),B[A+o>>0]=t,o=o+1|0)}else o=0;else if(0|C){n=0,i=0,o=0,r=0;do{if(a=r,r=r+1|0,n=n<<8|0|Q[g+a>>0],(i=i+8|0)>>>0>5)for(;;){if(t=255&(0|jI(n>>>(i=i+-6|0)&63)),a=o+1|0,B[A+o>>0]=t,!(i>>>0>5)){o=a;break}o=a}}while((0|r)!=(0|C));i&&(t=255&(0|jI(n<<6-i&63)),B[A+o>>0]=t,o=o+1|0)}else o=0;return e>>>0<o>>>0&&c(34564,34583,230,34599),e>>>0>o>>>0?YA(A+o|0,61,e-o|0):e=o,YA(A+e|0,0,((t=e+1|0)>>>0<I>>>0?I:t)-e|0),0|A}function V(A,I,g,E,i,e,c,a){A|=0,I|=0,i|=0,e|=0,c|=0,a|=0;var n,r,t=0,f=0;if(n=y,r=y=y+63&-64,y=y+112|0,!(0==(0|(g|=0))&0==(0|(E|=0)))){t=(f=r)+32|0;do{B[f>>0]=0|B[a>>0],f=f+1|0,a=a+1|0}while((0|f)<(0|t));a=Q[i+4>>0]|Q[i+4+1>>0]<<8|Q[i+4+2>>0]<<16|Q[i+4+3>>0]<<24,C[r+96>>2]=Q[i>>0]|Q[i+1>>0]<<8|Q[i+2>>0]<<16|Q[i+3>>0]<<24,C[r+96+4>>2]=a,a=8;do{B[r+96+a>>0]=e,e=0|yg(0|e,0|c,8),c=0|o(),a=a+1|0}while(16!=(0|a));if(E>>>0>0|0==(0|E)&g>>>0>63)for(e=E;;){iB(r+32|0,r+96|0,r),c=0;do{B[A+c>>0]=B[r+32+c>>0]^B[I+c>>0],c=c+1|0}while(64!=(0|c));for(a=8,c=1;c=c+(0|Q[(E=r+96+a|0)>>0])|0,B[E>>0]=c,16!=(0|(a=a+1|0));)c>>>=8;if(c=0|vg(0|g,0|e,-64,-1),A=A+64|0,I=I+64|0,!((a=0|o())>>>0>0|0==(0|a)&c>>>0>63)){e=c;break}g=c,e=a}else e=g,a=E;if(!(0==(0|e)&0==(0|a))&&(iB(r+32|0,r+96|0,r),0|e)){c=0;do{B[A+c>>0]=B[r+32+c>>0]^B[I+c>>0],c=c+1|0}while((0|c)!=(0|e))}MI(r+32|0,64),MI(r,32)}y=n}function z(A,I){I|=0;var g,Q,E,i,e,c,a=0,n=0,r=0,t=0;0==(0|(n=0|C[56+(A|=0)>>2]))&0==(0|(a=0|C[A+56+4>>2]))||(B[A+64+n>>0]=1,a=0|vg(0|n,0|a,1,0),(r=0|o())>>>0<0|0==(0|r)&a>>>0<16&&YA(A+64+a|0,0,14-n+1|0),B[A+80>>0]=1,S(A,A+64|0,16,0)),n=0|C[A+24>>2],t=(E=(-67108864|(Q=((t=((r=(0|C[A+28>>2])+(n>>>26)|0)>>>26)+(0|C[A+32>>2])|0)>>>26)+(0|C[A+36>>2])|0))+((((((i=((c=(5*(Q>>>26)|0)+(0|C[A+20>>2])|0)>>>26)+(67108863&n)+((5+(67108863&c)|0)>>>26)|0)>>>26)+(67108863&r)|0)>>>26)+(67108863&t)|0)>>>26)|0)>>31&67108863&t|(e=(E>>>31)-1&67108863)&(((i>>>26)+(67108863&r)|0)>>>26)+(67108863&t),g=0|vg(E>>31&67108863&c|e&5+(67108863&c)|(E>>31&(c>>>26)+(67108863&n)|e&i)<<26|0,0,0|C[A+40>>2],0),a=0|o(),a=0|vg(0|(n=0|vg((E>>31&(c>>>26)+(67108863&n)|e&i)>>>6|(E>>31&67108863&r|e&(i>>>26)+(67108863&r))<<20|0,0,0|C[A+44>>2],0)),0|o(),0|a,0),n=0|o(),n=0|vg(0|(r=0|vg((E>>31&67108863&r|e&(i>>>26)+(67108863&r))>>>12|t<<14|0,0,0|C[A+48>>2],0)),0|o(),0|n,0),r=0|o(),r=0|vg(0|(t=0|vg(((E>>>31)-1&E|E>>31&Q)<<8|t>>>18|0,0,0|C[A+52>>2],0)),0|o(),0|r,0),o(),Pg(I,g),Pg(I+4|0,a),Pg(I+8|0,n),Pg(I+12|0,r),MI(A,88)}function W(A,I){var g,B;A|=0,g=y,B=y=y+63&-64,y=y+192|0,_(B+144|0,I|=0),_(B+96|0,B+144|0),_(B+96|0,B+96|0),u(B+96|0,I,B+96|0),u(B+144|0,B+144|0,B+96|0),_(B+48|0,B+144|0),u(B+96|0,B+96|0,B+48|0),_(B+48|0,B+96|0),I=1;do{_(B+48|0,B+48|0),I=I+1|0}while(5!=(0|I));u(B+96|0,B+48|0,B+96|0),_(B+48|0,B+96|0),I=1;do{_(B+48|0,B+48|0),I=I+1|0}while(10!=(0|I));u(B+48|0,B+48|0,B+96|0),_(B,B+48|0),I=1;do{_(B,B),I=I+1|0}while(20!=(0|I));u(B+48|0,B,B+48|0),_(B+48|0,B+48|0),I=1;do{_(B+48|0,B+48|0),I=I+1|0}while(10!=(0|I));u(B+96|0,B+48|0,B+96|0),_(B+48|0,B+96|0),I=1;do{_(B+48|0,B+48|0),I=I+1|0}while(50!=(0|I));u(B+48|0,B+48|0,B+96|0),_(B,B+48|0),I=1;do{_(B,B),I=I+1|0}while(100!=(0|I));u(B+48|0,B,B+48|0),_(B+48|0,B+48|0),I=1;do{_(B+48|0,B+48|0),I=I+1|0}while(50!=(0|I));u(B+96|0,B+48|0,B+96|0),_(B+96|0,B+96|0),I=1;do{_(B+96|0,B+96|0),I=I+1|0}while(5!=(0|I));u(A,B+96|0,B+144|0),y=g}function O(A,I){A|=0;var g,C,Q=0;for(g=y,C=y=y+63&-64,y=y+1760|0,eg(C,I|=0),og(C+1600|0,I),Eg(C+1280|0,C+1600|0),gI(C+1600|0,C+1280|0,C),Eg(C+1440|0,C+1600|0),eg(C+160|0,C+1440|0),gI(C+1600|0,C+1280|0,C+160|0),Eg(C+1440|0,C+1600|0),eg(C+320|0,C+1440|0),gI(C+1600|0,C+1280|0,C+320|0),Eg(C+1440|0,C+1600|0),eg(C+480|0,C+1440|0),gI(C+1600|0,C+1280|0,C+480|0),Eg(C+1440|0,C+1600|0),eg(C+640|0,C+1440|0),gI(C+1600|0,C+1280|0,C+640|0),Eg(C+1440|0,C+1600|0),eg(C+800|0,C+1440|0),gI(C+1600|0,C+1280|0,C+800|0),Eg(C+1440|0,C+1600|0),eg(C+960|0,C+1440|0),gI(C+1600|0,C+1280|0,C+960|0),Eg(C+1440|0,C+1600|0),eg(C+1120|0,C+1440|0),Og(A),Q=252;og(C+1600|0,A),(I=0|B[31840+Q>>0])<<24>>24<=0?I<<24>>24<0&&(Eg(C+1440|0,C+1600|0),II(C+1600|0,C+1440|0,C+(160*(((I<<24>>24)/-2|0)<<24>>24)|0)|0)):(Eg(C+1440|0,C+1600|0),gI(C+1600|0,C+1440|0,C+(160*((255&I)>>>1&255)|0)|0)),Eg(A,C+1600|0),Q;)Q=Q+-1|0;y=g}function Z(A,I,g,B,Q,E,i){A|=0,I|=0,g|=0,B|=0,Q|=0;var e,c,a=0,n=0;return e=y,c=y=y+63&-64,y=y+352|0,x(c,E|=0,i|=0),A>>>0>g>>>0&&0<Q>>>0|0==(0|Q)&(A-g|0)>>>0<B>>>0?n=5:g>>>0>A>>>0&&0<Q>>>0|0==(0|Q)&(g-A|0)>>>0<B>>>0?n=5:a=g,5==(0|n)&&(YI(0|A,0|g,0|B),a=A),C[c+32>>2]=0,C[c+32+4>>2]=0,C[c+32+8>>2]=0,C[c+32+12>>2]=0,C[c+32+16>>2]=0,C[c+32+20>>2]=0,C[c+32+24>>2]=0,C[c+32+28>>2]=0,0==(0|(i=Q>>>0>0|0==(0|Q)&B>>>0>32?32:B))&0==(0|(g=Q>>>0>0|0==(0|Q)&B>>>0>32?0:Q))||BA(c+32+32|0,0|a,-2-(n=~Q>>>0>4294967295|-1==(0|~Q)&~B>>>0>4294967263?~B:-33)+1|0),Yg(c+32|0,c+32|0,n=0|vg(0|i,0|g,32,0),0|o(),E+16|0,c),gB(c+96|0,c+32|0),0==(0|i)&0==(0|g)||BA(0|A,c+32+32|0,-2-(n=~Q>>>0>4294967295|-1==(0|~Q)&~B>>>0>4294967263?~B:-33)+1|0),MI(c+32|0,64),Q>>>0>0|0==(0|Q)&B>>>0>32&&_g(A+i|0,a+i|0,n=0|Ug(0|B,0|Q,0|i,0|g),0|o(),E+16|0,c),MI(c,32),bg(c+96|0,A,B,Q),IB(c+96|0,I),MI(c+96|0,256),y=e,0}function $(A,I,g,C){A|=0,I|=0,g|=0,C|=0;var E=0,i=0,e=0,c=0;A:do{if(!(0==(0|g)&0==(0|C))){for(E=Q[A+352>>0]|Q[A+352+1>>0]<<8|Q[A+352+2>>0]<<16|Q[A+352+3>>0]<<24,e=I;I=A+96+E|0,C>>>0>0|0==(0|C)&g>>>0>(c=256-E|0)>>>0;){BA(0|I,0|e,0|c),I=(Q[A+352>>0]|Q[A+352+1>>0]<<8|Q[A+352+2>>0]<<16|Q[A+352+3>>0]<<24)+c|0,B[A+352>>0]=I,B[A+352+1>>0]=I>>8,B[A+352+2>>0]=I>>16,B[A+352+3>>0]=I>>24,aA(A,128,0),s(A,A+96|0),E=A+224|0,i=128+(I=A+96|0)|0;do{B[I>>0]=0|B[E>>0],I=I+1|0,E=E+1|0}while((0|I)<(0|i));if(E=(Q[A+352>>0]|Q[A+352+1>>0]<<8|Q[A+352+2>>0]<<16|Q[A+352+3>>0]<<24)-128|0,B[A+352>>0]=E,B[A+352+1>>0]=E>>8,B[A+352+2>>0]=E>>16,B[A+352+3>>0]=E>>24,0==(0|(g=0|Ug(0|g,0|C,0|c,0)))&0==(0|(C=0|o())))break A;e=e+c|0}BA(0|I,0|e,0|g),c=(Q[A+352>>0]|Q[A+352+1>>0]<<8|Q[A+352+2>>0]<<16|Q[A+352+3>>0]<<24)+g|0,B[A+352>>0]=c,B[A+352+1>>0]=c>>8,B[A+352+2>>0]=c>>16,B[A+352+3>>0]=c>>24}}while(0)}function AA(A,I,g){var B,Q,E,i,e,o,c,a,n,r,t,f,w,y,s,h,D,F,p,u;I|=0,g|=0,u=0|C[(A|=0)>>2],F=0|C[A+4>>2],h=0|C[A+8>>2],y=0|C[A+12>>2],f=0|C[A+16>>2],r=0|C[A+20>>2],a=0|C[A+24>>2],o=0|C[A+28>>2],i=0|C[A+32>>2],Q=0|C[A+36>>2],p=0|C[I>>2],D=0|C[I+4>>2],s=0|C[I+8>>2],w=0|C[I+12>>2],t=0|C[I+16>>2],n=0|C[I+20>>2],c=0|C[I+24>>2],e=0|C[I+28>>2],E=0|C[I+32>>2],B=0|C[I+36>>2],C[A>>2]=(p^u)&0-g^u,C[A+4>>2]=(D^F)&0-g^F,C[A+8>>2]=(s^h)&0-g^h,C[A+12>>2]=(w^y)&0-g^y,C[A+16>>2]=(t^f)&0-g^f,C[A+20>>2]=(n^r)&0-g^r,C[A+24>>2]=(c^a)&0-g^a,C[A+28>>2]=(e^o)&0-g^o,C[A+32>>2]=(E^i)&0-g^i,C[A+36>>2]=(B^Q)&0-g^Q,C[I>>2]=(p^u)&0-g^p,C[I+4>>2]=(D^F)&0-g^D,C[I+8>>2]=(s^h)&0-g^s,C[I+12>>2]=(w^y)&0-g^w,C[I+16>>2]=(t^f)&0-g^t,C[I+20>>2]=(n^r)&0-g^n,C[I+24>>2]=(c^a)&0-g^c,C[I+28>>2]=(e^o)&0-g^e,C[I+32>>2]=(E^i)&0-g^E,C[I+36>>2]=(B^Q)&0-g^B}function IA(A,I,g,E,i){A|=0,E|=0,i|=0;var e,c,a=0,n=0,r=0,t=0,f=0;if(e=y,c=y=y+63&-64,y=y+112|0,!(0==(0|(I|=0))&0==(0|(g|=0)))){a=(n=c)+32|0;do{B[n>>0]=0|B[i>>0],n=n+1|0,i=i+1|0}while((0|n)<(0|a));if(n=Q[E+4>>0]|Q[E+4+1>>0]<<8|Q[E+4+2>>0]<<16|Q[E+4+3>>0]<<24,C[c+96>>2]=Q[E>>0]|Q[E+1>>0]<<8|Q[E+2>>0]<<16|Q[E+3>>0]<<24,C[c+96+4>>2]=n,C[c+96+8>>2]=0,C[c+96+8+4>>2]=0,g>>>0>0|0==(0|g)&I>>>0>63){do{for(iB(A,c+96|0,c),a=8,i=1;i=i+(0|Q[(n=c+96+a|0)>>0])|0,B[n>>0]=i,16!=(0|(a=a+1|0));)i>>>=8;I=0|vg(0|I,0|g,-64,-1),g=0|o(),A=A+64|0}while(g>>>0>0|0==(0|g)&I>>>0>63);0==(0|I)&0==(0|g)||(t=A,f=I,r=8)}else t=A,f=I,r=8;if(8==(0|r)&&(iB(c+32|0,c+96|0,c),0|f)){i=0;do{B[t+i>>0]=0|B[c+32+i>>0],i=i+1|0}while((0|i)!=(0|f))}MI(c+32|0,64),MI(c,32)}y=e}function gA(A,I,g,B,C,Q,E){A|=0,I|=0,g|=0,B|=0,C|=0;var i,e,c=0;return e=y,i=y=y+63&-64,y=y+96|0,x(i,Q|=0,E|=0),function(A,I,g){IA(A|=0,32,0,I|=0,g|=0)}(i+32|0,Q+16|0,i),0|function(A,I,g,B,C){return 0|function(A,I,g,B,C){var Q,E;return A|=0,Q=y,E=y=y+63&-64,y=y+16|0,function(A,I,g,B,C){var Q,E;A|=0,I|=0,g|=0,B|=0,Q=y,E=y=y+63&-64,y=y+96|0,MA(E,C|=0),K(E,I,g,B),z(E,A),y=Q}(E,I|=0,g|=0,B|=0,C|=0),C=0|tB(A,E),y=Q,0|C}(A|=0,I|=0,g|=0,B|=0,C|=0)}(g,I,B,C,i+32|0)?(MI(i,32),I=-1):A?(I>>>0>=A>>>0&&0<C>>>0|0==(0|C)&(I-A|0)>>>0<B>>>0?c=8:A>>>0>=I>>>0&&0<C>>>0|0==(0|C)&(A-I|0)>>>0<B>>>0?c=8:g=I,8==(0|c)&&(YI(0|A,0|I,0|B),g=A),0==(0|(I=C>>>0>0|0==(0|C)&B>>>0>32?32:B))&0==(0|(E=C>>>0>0|0==(0|C)&B>>>0>32?0:C))?Yg(i+32|0,i+32|0,32,0,Q+16|0,i):(BA(i+32+32|0,0|g,-2-(c=~C>>>0>4294967295|-1==(0|~C)&~B>>>0>4294967263?~B:-33)+1|0),Yg(i+32|0,i+32|0,0|vg(0|I,0|E,32,0),0|o(),Q+16|0,i),BA(0|A,i+32+32|0,-2-c+1|0)),C>>>0>0|0==(0|C)&B>>>0>32&&_g(A+I|0,g+I|0,0|Ug(0|B,0|C,0|I,0|E),0|o(),Q+16|0,i),MI(i,32),I=0):I=0,y=e,0|I}function BA(A,I,g){A|=0,I|=0;var Q,E,i=0;if((0|(g|=0))>=8192)return t(0|A,0|I,0|g),0|A;if(E=0|A,Q=A+g|0,(3&A)==(3&I)){for(;3&A;){if(!g)return 0|E;B[A>>0]=0|B[I>>0],A=A+1|0,I=I+1|0,g=g-1|0}for(i=(g=-4&Q|0)-64|0;(0|A)<=(0|i);)C[A>>2]=C[I>>2],C[A+4>>2]=C[I+4>>2],C[A+8>>2]=C[I+8>>2],C[A+12>>2]=C[I+12>>2],C[A+16>>2]=C[I+16>>2],C[A+20>>2]=C[I+20>>2],C[A+24>>2]=C[I+24>>2],C[A+28>>2]=C[I+28>>2],C[A+32>>2]=C[I+32>>2],C[A+36>>2]=C[I+36>>2],C[A+40>>2]=C[I+40>>2],C[A+44>>2]=C[I+44>>2],C[A+48>>2]=C[I+48>>2],C[A+52>>2]=C[I+52>>2],C[A+56>>2]=C[I+56>>2],C[A+60>>2]=C[I+60>>2],A=A+64|0,I=I+64|0;for(;(0|A)<(0|g);)C[A>>2]=C[I>>2],A=A+4|0,I=I+4|0}else for(g=Q-4|0;(0|A)<(0|g);)B[A>>0]=0|B[I>>0],B[A+1>>0]=0|B[I+1>>0],B[A+2>>0]=0|B[I+2>>0],B[A+3>>0]=0|B[I+3>>0],A=A+4|0,I=I+4|0;for(;(0|A)<(0|Q);)B[A>>0]=0|B[I>>0],A=A+1|0,I=I+1|0;return 0|E}function CA(A,I){A|=0;var g,Q,E=0;g=y,Q=y=y+63&-64,y=y+48|0,function(A,I){var g,B,Q,E,i,e,o,c,a,n,r;A|=0,a=0|C[(I|=0)>>2],r=0|C[I+4>>2],o=0|C[I+8>>2],e=0|C[I+12>>2],i=0|C[I+16>>2],n=0|C[I+20>>2],Q=0|C[I+24>>2],B=0|C[I+28>>2],g=0|C[I+32>>2],E=(((((c=((19*((((((((((((16777216+(19*(I=0|C[I+36>>2])|0)|0)>>>25)+a>>26)+r>>25)+o>>26)+e>>25)+i>>26)+n>>25)+Q>>26)+B>>25)+g>>26)+I>>25)|0)+a>>26)+r|0)>>25)+o>>26)+e>>25)+i>>26)+n|0,C[A>>2]=(19*((((((((((((16777216+(19*I|0)|0)>>>25)+a>>26)+r>>25)+o>>26)+e>>25)+i>>26)+n>>25)+Q>>26)+B>>25)+g>>26)+I>>25)|0)+a&67108863,C[A+4>>2]=33554431&c,C[A+8>>2]=(c>>25)+o&67108863,C[A+12>>2]=((c>>25)+o>>26)+e&33554431,C[A+16>>2]=(((c>>25)+o>>26)+e>>25)+i&67108863,C[A+20>>2]=33554431&E,C[A+24>>2]=(E>>25)+Q&67108863,C[A+28>>2]=((E>>25)+Q>>26)+B&33554431,C[A+32>>2]=(((E>>25)+Q>>26)+B>>25)+g&67108863,C[A+36>>2]=((((E>>25)+Q>>26)+B>>25)+g>>26)+I&33554431}(Q,I|=0),I=0|C[Q>>2],B[A>>0]=I,B[A+1>>0]=I>>>8,B[A+2>>0]=I>>>16,E=0|C[Q+4>>2],B[A+3>>0]=E<<2|I>>>24,B[A+4>>0]=E>>>6,B[A+5>>0]=E>>>14,I=0|C[Q+8>>2],B[A+6>>0]=I<<3|E>>>22,B[A+7>>0]=I>>>5,B[A+8>>0]=I>>>13,E=0|C[Q+12>>2],B[A+9>>0]=E<<5|I>>>21,B[A+10>>0]=E>>>3,B[A+11>>0]=E>>>11,I=0|C[Q+16>>2],B[A+12>>0]=I<<6|E>>>19,B[A+13>>0]=I>>>2,B[A+14>>0]=I>>>10,B[A+15>>0]=I>>>18,I=0|C[Q+20>>2],B[A+16>>0]=I,B[A+17>>0]=I>>>8,B[A+18>>0]=I>>>16,E=0|C[Q+24>>2],B[A+19>>0]=E<<1|I>>>24,B[A+20>>0]=E>>>7,B[A+21>>0]=E>>>15,I=0|C[Q+28>>2],B[A+22>>0]=I<<3|E>>>23,B[A+23>>0]=I>>>5,B[A+24>>0]=I>>>13,E=0|C[Q+32>>2],B[A+25>>0]=E<<4|I>>>21,B[A+26>>0]=E>>>4,B[A+27>>0]=E>>>12,I=0|C[Q+36>>2],B[A+28>>0]=I<<6|E>>>20,B[A+29>>0]=I>>>2,B[A+30>>0]=I>>>10,B[A+31>>0]=I>>>18,y=g}function QA(A,I,g){A|=0,I|=0,g|=0;var B,E,i=0,e=0,c=0;if(B=y,E=y=y+63&-64,y=y+4096|0,yB(E+3072|0),yB(E+2048|0),0!=(0|A)&0!=(0|I)&&(C[E+2048>>2]=C[I>>2],C[E+2048+4>>2]=0,C[E+2048+8>>2]=C[I+4>>2],C[E+2048+8+4>>2]=0,C[E+2048+16>>2]=Q[I+8>>0],C[E+2048+16+4>>2]=0,C[E+2048+24>>2]=C[A+16>>2],C[E+2048+24+4>>2]=0,C[E+2048+32>>2]=C[A+8>>2],C[E+2048+32+4>>2]=0,C[E+2048+40>>2]=C[A+36>>2],C[E+2048+40+4>>2]=0,0|C[A+20>>2])){I=0;do{(i=127&I)||(c=0|vg(0|C[E+2048+48>>2],0|C[E+2048+48+4>>2],1,0),e=0|o(),C[E+2048+48>>2]=c,C[E+2048+48+4>>2]=e,yB(E),yB(E+1024|0),H(E+3072|0,E+2048|0,E),H(E+3072|0,E,E+1024|0)),e=0|C[E+1024+(i<<3)+4>>2],C[(c=g+(I<<3)|0)>>2]=C[E+1024+(i<<3)>>2],C[c+4>>2]=e,I=I+1|0}while(I>>>0<(0|C[A+20>>2])>>>0)}y=B}function EA(A,I,g,B){A|=0,I|=0,g|=0,B|=0;var Q,E,i,e,o=0,c=0,a=0;e=y,i=y=y+63&-64,y=y+64|0,c=52+(o=i+8|0)|0;do{C[o>>2]=0,o=o+4|0}while((0|o)<(0|c));o=0|ZA(A),C[i+36>>2]=o,C[i+20>>2]=o,C[i+4>>2]=o,c=0|F(o),C[i+32>>2]=c,Q=0|F(o),C[i+16>>2]=Q,E=0|F(o),C[i>>2]=E;do{if(0==(0|c)|0==(0|Q)|0==(0|E))d(c),d(Q),d(E),o=-22;else{if(!(a=0|F(o))){d(c),d(Q),d(E),o=-22;break}if(0|(o=0|L(i,A,B))){d(0|C[i+32>>2]),d(0|C[i+16>>2]),d(0|C[i>>2]),d(a);break}B=0|nA(0|C[i+40>>2],0|C[i+44>>2],0|C[i+52>>2],I,g,0|C[i+16>>2],0|C[i+20>>2],a,0|C[i+4>>2],0,0,B),d(0|C[i+32>>2]),d(0|C[i+16>>2]),o=0==(0|B)&&0==(0|EI(a,0|C[i>>2],0|C[i+4>>2]))?0:-35,d(a),d(0|C[i>>2])}}while(0);return y=e,0|o}function iA(A,I){A|=0,I|=0;var g,C,E=0,i=0,e=0;g=y,C=y=y+63&-64,y=y+464|0,E=0;do{e=0|B[I+E>>0],B[C+(i=E<<1)>>0]=15&e,B[C+(1|i)>>0]=(255&e)>>>4,E=E+1|0}while(32!=(0|E));I=0,E=0;do{I=134217728+((i=I+(0|Q[(e=C+E|0)>>0])|0)<<24)>>28,B[e>>0]=i-(I<<4),E=E+1|0}while(63!=(0|E));B[C+63>>0]=I+(0|Q[C+63>>0]),Og(A),I=1;do{$g(C+64|0,I>>>1,0|B[C+I>>0]),CI(C+304|0,A,C+64|0),Eg(A,C+304|0),I=I+2|0}while(I>>>0<64);og(C+304|0,A),Hg(C+184|0,C+304|0),aI(C+304|0,C+184|0),Hg(C+184|0,C+304|0),aI(C+304|0,C+184|0),Hg(C+184|0,C+304|0),aI(C+304|0,C+184|0),Eg(A,C+304|0),I=0;do{$g(C+64|0,I>>>1,0|B[C+I>>0]),CI(C+304|0,A,C+64|0),Eg(A,C+304|0),I=I+2|0}while(I>>>0<64);y=g}function eA(A,I,g,B,C,Q,E,i,e,c,a){var n;A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,e|=0,n=y,y=y+352|0,OI(n+16|0,64,0,c|=0,a|=0),gB(n+80|0,n+16|0),MI(n+16|0,64),bg(n+80|0,E,i,e),I=0|Ug(0,0,0|i,0|e),o(),bg(n+80|0,34624,15&I,0),bg(n+80|0,g,B,C),I=0|Ug(0,0,0|B,0|C),o(),bg(n+80|0,34624,15&I,0),LI(n+336|0,i,e),bg(n+80|0,n+336|0,8,0),LI(n+336|0,B,C),bg(n+80|0,n+336|0,8,0),IB(n+80|0,n),MI(n+80|0,256),I=0|tB(n,Q),MI(n,16);do{if(A){if(I){YA(0|A,0,0|B),I=-1;break}rI(A,g,B,C,c,1,a),I=0;break}}while(0);return y=n,0|I}function oA(A){A|=0;var I=0,g=0;do{if(A)if(0|C[A>>2])if((0|C[A+4>>2])>>>0>=16){if(0==(0|C[A+8>>2])&&0|C[A+12>>2]){I=-18;break}if(I=0|C[A+20>>2],!(0|C[A+16>>2]))return 0|(0==(0|I)?-6:-19);if(I>>>0>=8){if(0==(0|C[A+24>>2])&&0|C[A+28>>2]){I=-20;break}if(0==(0|C[A+32>>2])&&0|C[A+36>>2]){I=-21;break}if((I=0|C[A+44>>2])>>>0>=8)if(I>>>0<=2097152)if(I>>>0>=(g=0|C[A+48>>2])<<3>>>0)if(0|C[A+40>>2])if(g){if(!(g>>>0>16777215))return 0|(0==(0|(A=0|C[A+52>>2]))?-28:A>>>0>16777215?-29:0);I=-17}else I=-16;else I=-12;else I=-14;else I=-15;else I=-14}else I=-6}else I=-2;else I=-1;else I=-25}while(0);return 0|I}function cA(A,I,g,Q,E){var i,e;A|=0,g|=0,Q|=0,E|=0,i=y,e=y=y+63&-64,y=y+192|0,((I|=0)-1&255)>63&&SB(),g||SB(),B[e+128>>0]=I,B[e+128+1>>0]=32,B[e+128+2>>0]=1,B[e+128+3>>0]=1,Wg(e+128+4|0),LI(e+128+8|0,0,0),C[e+128+16>>2]=0,C[e+128+16+4>>2]=0,C[e+128+16+8>>2]=0,C[e+128+16+12>>2]=0,Q?function(A,I){I|=0;var g=0;A=16+(g=32+(A|=0)|0)|0;do{B[g>>0]=0|B[I>>0],g=g+1|0,I=I+1|0}while((0|g)<(0|A))}(e+128|0,Q):(C[e+128+32>>2]=0,C[e+128+32+4>>2]=0,C[e+128+32+8>>2]=0,C[e+128+32+12>>2]=0),E?function(A,I){I|=0;var g=0;A=16+(g=48+(A|=0)|0)|0;do{B[g>>0]=0|B[I>>0],g=g+1|0,I=I+1|0}while((0|g)<(0|A))}(e+128|0,E):(C[e+128+48>>2]=0,C[e+128+48+4>>2]=0,C[e+128+48+8>>2]=0,C[e+128+48+12>>2]=0),XA(A,e+128|0),E=96+(I=e+32|0)|0;do{C[I>>2]=0,I=I+4|0}while((0|I)<(0|E));E=(I=e)+32|0;do{B[I>>0]=0|B[g>>0],I=I+1|0,g=g+1|0}while((0|I)<(0|E));$(A,e,128,0),MI(e,128),y=i}function aA(A,I,g){var C,E;I|=0,g|=0,C=0|vg(Q[64+(A|=0)>>0]|Q[A+64+1>>0]<<8|Q[A+64+2>>0]<<16|Q[A+64+3>>0]<<24|0,Q[A+64+4>>0]|Q[A+64+4+1>>0]<<8|Q[A+64+4+2>>0]<<16|Q[A+64+4+3>>0]<<24|0,0|I,0|g),E=0|o(),B[A+64>>0]=C,B[A+64+1>>0]=C>>8,B[A+64+2>>0]=C>>16,B[A+64+3>>0]=C>>24,B[A+64+4>>0]=E,B[A+64+4+1>>0]=E>>8,B[A+64+4+2>>0]=E>>16,B[A+64+4+3>>0]=E>>24,I=0|vg(Q[A+72>>0]|Q[A+72+1>>0]<<8|Q[A+72+2>>0]<<16|Q[A+72+3>>0]<<24|0,Q[A+72+4>>0]|Q[A+72+4+1>>0]<<8|Q[A+72+4+2>>0]<<16|Q[A+72+4+3>>0]<<24|0,1&(E>>>0<g>>>0|(0|E)==(0|g)&C>>>0<I>>>0)|0,0),g=0|o(),B[A+72>>0]=I,B[A+72+1>>0]=I>>8,B[A+72+2>>0]=I>>16,B[A+72+3>>0]=I>>24,B[A+72+4>>0]=g,B[A+72+4+1>>0]=g>>8,B[A+72+4+2>>0]=g>>16,B[A+72+4+3>>0]=g>>24}function nA(A,I,g,B,Q,E,i,e,o,c,a,n){var r,t,f;A|=0,I|=0,g|=0,B|=0,Q|=0,E|=0,i|=0,e|=0,c|=0,a|=0,n|=0,f=y,t=y=y+63&-64,y=y+64|0,r=0|F(o|=0);do{if(r){if(C[t>>2]=r,C[t+4>>2]=o,C[t+8>>2]=B,C[t+12>>2]=Q,C[t+16>>2]=E,C[t+20>>2]=i,C[t+24>>2]=0,C[t+24+4>>2]=0,C[t+24+8>>2]=0,C[t+24+12>>2]=0,C[t+40>>2]=A,C[t+44>>2]=I,C[t+48>>2]=g,C[t+52>>2]=g,C[t+56>>2]=0,0|(I=0|pA(t,n))){MI(r,o),d(r);break}if(0|e&&BA(0|e,0|r,0|o),0!=(0|c)&0!=(0|a)&&0|J(c,a,t,n)){MI(r,o),MI(c,a),d(r),I=-31;break}MI(r,o),d(r),I=0}else I=-22}while(0);return y=f,0|I}function rA(A,I){var g,B,C=0;return B=y,g=y=y+63&-64,y=y+288|0,U(40+(A|=0)|0,I|=0),Sg(A+80|0),_(g+240|0,A+40|0),u(g+192|0,g+240|0,16),lA(g+240|0,g+240|0,A+80|0),_A(g+192|0,g+192|0,A+80|0),_(g+144|0,g+192|0),u(g+144|0,g+144|0,g+192|0),_(A,g+144|0),u(A,A,g+192|0),u(A,A,g+240|0),function(A,I){A|=0;var g,B,C=0;g=y,B=y=y+63&-64,y=y+144|0,_(B+96|0,I|=0),_(B+48|0,B+96|0),_(B+48|0,B+48|0),u(B+48|0,I,B+48|0),u(B+96|0,B+96|0,B+48|0),_(B+96|0,B+96|0),u(B+96|0,B+48|0,B+96|0),_(B+48|0,B+96|0),C=1;do{_(B+48|0,B+48|0),C=C+1|0}while(5!=(0|C));u(B+96|0,B+48|0,B+96|0),_(B+48|0,B+96|0),C=1;do{_(B+48|0,B+48|0),C=C+1|0}while(10!=(0|C));u(B+48|0,B+48|0,B+96|0),_(B,B+48|0),C=1;do{_(B,B),C=C+1|0}while(20!=(0|C));u(B+48|0,B,B+48|0),_(B+48|0,B+48|0),C=1;do{_(B+48|0,B+48|0),C=C+1|0}while(10!=(0|C));u(B+96|0,B+48|0,B+96|0),_(B+48|0,B+96|0),C=1;do{_(B+48|0,B+48|0),C=C+1|0}while(50!=(0|C));u(B+48|0,B+48|0,B+96|0),_(B,B+48|0),C=1;do{_(B,B),C=C+1|0}while(100!=(0|C));u(B+48|0,B,B+48|0),_(B+48|0,B+48|0),C=1;do{_(B+48|0,B+48|0),C=C+1|0}while(50!=(0|C));u(B+96|0,B+48|0,B+96|0),_(B+96|0,B+96|0),_(B+96|0,B+96|0),u(A,B+96|0,I),y=g}(A,A),u(A,A,g+144|0),u(A,A,g+240|0),_(g+96|0,A),u(g+96|0,g+96|0,g+192|0),lA(g+48|0,g+96|0,g+240|0),0|cg(g+48|0)?C=4:(_A(g,g+96|0,g+240|0),0|cg(g)?(u(A,A,64),C=4):A=-1),4==(0|C)&&((0|(C=0|sg(A)))==((0|Q[I+31>>0])>>>7|0)&&xA(A,A),u(A+120|0,A,A+40|0),A=0),y=B,0|A}function tA(A,I,g){var B,Q,E,i,e,o,c,a,n,r,t,f,w,y,s,h,D,F,p;I|=0,g|=0,p=0|C[(A|=0)>>2],D=0|C[A+4>>2],s=0|C[A+8>>2],w=0|C[A+12>>2],t=0|C[A+16>>2],n=0|C[A+20>>2],c=0|C[A+24>>2],e=0|C[A+28>>2],E=0|C[A+32>>2],B=0|C[A+36>>2],F=(C[I+4>>2]^D)&0-g,h=(C[I+8>>2]^s)&0-g,y=(C[I+12>>2]^w)&0-g,f=(C[I+16>>2]^t)&0-g,r=(C[I+20>>2]^n)&0-g,a=(C[I+24>>2]^c)&0-g,o=(C[I+28>>2]^e)&0-g,i=(C[I+32>>2]^E)&0-g,Q=(C[I+36>>2]^B)&0-g,C[A>>2]=(C[I>>2]^p)&0-g^p,C[A+4>>2]=F^D,C[A+8>>2]=h^s,C[A+12>>2]=y^w,C[A+16>>2]=f^t,C[A+20>>2]=r^n,C[A+24>>2]=a^c,C[A+28>>2]=o^e,C[A+32>>2]=i^E,C[A+36>>2]=Q^B}function fA(A,I,g,B,Q,E,i,e,c,a,n,r){return A|=0,I|=0,g|=0,B|=0,Q|=0,E|=0,i|=0,e|=0,c|=0,a|=0,a=y,y=y+336|0,OI(a,64,0,n|=0,r|=0),gB(a+64|0,a),MI(a,64),bg(a+64|0,i,e,c),i=0|Ug(0,0,0|e,0|c),o(),bg(a+64|0,34624,15&i,0),rI(A,B,Q,E,n,1,r),bg(a+64|0,A,Q,E),n=0|Ug(0,0,0|Q,0|E),o(),bg(a+64|0,34624,15&n,0),LI(a+320|0,e,c),bg(a+64|0,a+320|0,8,0),LI(a+320|0,Q,E),bg(a+64|0,a+320|0,8,0),IB(a+64|0,I),MI(a+64|0,256),0|g&&(C[g>>2]=16,C[g+4>>2]=0),y=a,0}function wA(A){var I,g,E=0,i=0,e=0;I=y,g=y=y+63&-64,y=y+48|0,i=A|=0,e=(E=g)+32|0;do{B[E>>0]=0|B[i>>0],E=E+1|0,i=i+1|0}while((0|E)<(0|e));E=Q[A+36+4>>0]|Q[A+36+4+1>>0]<<8|Q[A+36+4+2>>0]<<16|Q[A+36+4+3>>0]<<24,C[g+32>>2]=Q[A+36>>0]|Q[A+36+1>>0]<<8|Q[A+36+2>>0]<<16|Q[A+36+3>>0]<<24,C[g+32+4>>2]=E,function(A,I,g,B){!function(A,I,g,B){fI(A|=0,I|=0,40,0,g|=0,0,B|=0)}(A|=0,I|=0,g|=0,B|=0)}(g,g,A+32|0,A),i=g,e=(E=A)+32|0;do{B[E>>0]=0|B[i>>0],E=E+1|0,i=i+1|0}while((0|E)<(0|e));i=0|C[g+32>>2],e=0|C[g+32+4>>2],B[A+36>>0]=i,B[A+36+1>>0]=i>>8,B[A+36+2>>0]=i>>16,B[A+36+3>>0]=i>>24,B[A+36+4>>0]=e,B[A+36+4+1>>0]=e>>8,B[A+36+4+2>>0]=e>>16,B[A+36+4+3>>0]=e>>24,Mg(A),y=I}function yA(A,I){A|=0,I|=0;var g=0,C=0,E=0,i=0,e=0;g=0;do{B[A+g>>0]=(0|Q[I+(g>>>3)>>0])>>>(7&g)&1,g=g+1|0}while(256!=(0|g));e=0;do{E=A+e|0;A:do{if(0|B[E>>0]){i=1;do{if((g=i+e|0)>>>0>=256)break A;I=0|B[A+g>>0];I:do{if(I<<24>>24){if(((C=I<<24>>24<<i)+(I=0|B[E>>0])|0)<16){B[E>>0]=C+I,B[A+g>>0]=0;break}if((I-C|0)<-15)break A;for(B[E>>0]=I-C;0|B[(I=A+g|0)>>0];)if(B[I>>0]=0,(g=g+1|0)>>>0>=256)break I;B[I>>0]=1}}while(0);i=i+1|0}while(i>>>0<7)}}while(0);e=e+1|0}while(256!=(0|e))}function sA(A,I,g,B,C,Q,E,i,e,o,c){var a;A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,e|=0,a=y,y=y+352|0,QB(a+16|0,o|=0,c|=0),gB(a+80|0,a+16|0),MI(a+16|0,64),bg(a+80|0,E,i,e),LI(a+336|0,i,e),bg(a+80|0,a+336|0,8,0),bg(a+80|0,g,B,C),LI(a+336|0,B,C),bg(a+80|0,a+336|0,8,0),IB(a+80|0,a),MI(a+80|0,256),I=0|tB(a,Q),MI(a,16);do{if(A){if(I){YA(0|A,0,0|B),I=-1;break}zI(A,g,B,C,o,c),I=0;break}}while(0);return y=a,0|I}function hA(A,I,g,B,Q,E,i){var e,o;A|=0,I|=0,g|=0,B|=0,Q|=0,E|=0,e=y,o=y=y+63&-64,y=y+560|0,Jg(o+192|0,i|=0),RI(o+128|0,E,32,0),P(o+192|0,o+128+32|0,32,0),P(o+192|0,g,B,Q),VI(o+192|0,o+64|0),YI(A+32|0,E+32|0,32),p(o+64|0),iA(o+400|0,o+64|0),sI(A,o+400|0),Jg(o+192|0,i),P(o+192|0,A,64,0),P(o+192|0,g,B,Q),VI(o+192|0,o),p(o),Tg(o+128|0),h(A+32|0,o,o+128|0,o+64|0),MI(o+128|0,64),MI(o+64|0,64),0|I&&(C[I>>2]=64,C[I+4>>2]=0),y=e}function DA(A,I,g,B,Q,i){A|=0,I|=0,g|=0,B|=0,Q|=0,i|=0;var e=0;do{if(I){if(e=(0|C[A+24>>2])-(0|C[A+20>>2])|0,i){e=B+-1+e|0;break}e=e+((0==(0|B))<<31>>31)|0;break}if(!(g<<24>>24)){e=B+-1|0;break}if(e=0|E(0|C[A+20>>2],255&g),i){e=B+-1+e|0;break}e=e+((0==(0|B))<<31>>31)|0;break}while(0);return Qg(0|Q,0,0|Q,0),Qg(0|o(),0,0|e,0),i=0|Ug(e+-1|0,0,0|o(),0),Q=0|o(),0==(0|I)|g<<24>>24==3?(e=0,B=0):(e=0|E(0|C[A+20>>2],1+(255&g)|0),B=0),A=0|Ag(0|(I=0|vg(0|i,0|Q,0|e,0|B)),0|(g=0|o()),0|C[A+24>>2],0),o(),0|A}function FA(A,I,g,B,Q){B|=0,Q|=0;var E,i,e,o=0;if(e=y,i=y=y+63&-64,y=y+64|0,(g|=0)>>>0>0|0==(0|g)&(I|=0)>>>0>4294967295|(E=0|ZA(A|=0))>>>0>127)C[8678]=28,g=-1;else{o=(g=i)+60|0;do{C[g>>2]=0,g=g+4|0}while((0|g)<(0|o));(o=0|function(A){var I;return(I=0|F(A|=0))&&3&C[I+-4>>2]?(YA(0|I,0,0|A),0|I):0|I}(E))?(C[i+16>>2]=o,C[i+8>>2]=o,C[i>>2]=o,C[i+20>>2]=E,C[i+12>>2]=E,C[i+4>>2]=E,C[i+24>>2]=0,C[i+24+4>>2]=0,C[i+24+8>>2]=0,C[i+24+12>>2]=0,0|L(i,A,Q)?(C[8678]=28,g=-1):g=(0|C[i+40>>2])==(0|I)?(0|C[i+44>>2])!=(B>>>10|0)&1:1,d(o)):g=-1}return y=e,0|g}function pA(A,I){I|=0;var g,B,Q=0,i=0,e=0;if(B=y,g=y=y+63&-64,y=y+48|0,!(Q=0|oA(A|=0)))if((I+-1|0)>>>0<=1){if(i=0|C[A+44>>2],Q=0|C[A+48>>2],e=0|E(i=((i>>>0<Q<<3>>>0?Q<<3:i)>>>0)/(Q<<2>>>0)|0,Q<<2),C[g>>2]=0,C[g+8>>2]=C[A+40>>2],C[g+12>>2]=-1,C[g+16>>2]=e,C[g+20>>2]=i,C[g+24>>2]=i<<2,C[g+28>>2]=Q,C[g+32>>2]=C[A+52>>2],C[g+36>>2]=I,!(Q=0|function(A,I){A|=0,I|=0;var g,B,Q=0;B=y,g=y=y+63&-64,y=y+80|0;do{if(0==(0|A)|0==(0|I))Q=-25;else{if(Q=0|F(C[A+20>>2]<<3),C[A+4>>2]=Q,Q){if(Q=0|bA(A,0|C[A+16>>2])){ug(A,0|C[I+56>>2]);break}j(g,I,0|C[A+36>>2]),MI(g+64|0,8),KA(g,A),MI(g,72),Q=0;break}Q=-22}}while(0);return y=B,0|Q}(g,A))){if(0|C[g+8>>2]){Q=0;do{UA(g,Q),Q=Q+1|0}while(Q>>>0<(0|C[g+8>>2])>>>0)}!function(A,I){var g,B,Q=0,i=0;if(g=y,B=y=y+63&-64,y=y+2048|0,0!=(0|(A|=0))&0!=(0|(I|=0))){if(fB(B+1024|0,(0|C[4+(0|C[I>>2])>>2])+(C[I+24>>2]<<10)-1024|0),(0|C[I+28>>2])>>>0>1){Q=1;do{i=(i=0|C[I+24>>2])-1+(0|E(i,Q))|0,SI(B+1024|0,(0|C[4+(0|C[I>>2])>>2])+(i<<10)|0),Q=Q+1|0}while(Q>>>0<(0|C[I+28>>2])>>>0)}!function(A,I){A|=0,I|=0;var g=0,B=0;g=0;do{LI(A+(g<<3)|0,0|C[(B=I+(g<<3)|0)>>2],0|C[B+4>>2]),g=g+1|0}while(128!=(0|g))}(B,B+1024|0),T(0|C[A>>2],0|C[A+4>>2],B,1024),MI(B+1024|0,1024),MI(B,1024),ug(I,0|C[A+56>>2])}y=g}(A,g),Q=0}}else Q=-26;return y=B,0|Q}function uA(A,I,g,B,C,Q){var E,i;return I|=0,g|=0,B|=0,C|=0,Q|=0,i=y,E=y=y+63&-64,y=y+592|0,0!=(0|pI(32+(A|=0)|0))&&0==(0|GA(A))&&0!=(0|WI(C))&&0==(0|GA(C))&&0==(0|rA(E+424|0,C))?(Jg(E+96|0,Q),P(E+96|0,A,32,0),P(E+96|0,C,32,0),P(E+96|0,I,g,B),VI(E+96|0,E+32|0),p(E+32|0),N(E+304|0,E+32|0,E+424|0,A+32|0),sI(E,E+304|0),g=0|rB(E,A),g=0|((0|E)==(0|A)?-1:g)|EI(A,E,32)):g=-1,y=i,0|g}function HA(A,I){A|=0,I|=0;var g=0,Q=0;A:do{if(255&I){if(3&A)do{if((Q=0|B[A>>0])<<24>>24==0||Q<<24>>24==(255&I)<<24>>24)break A;A=A+1|0}while(0!=(3&A|0));Q=0|E(255&I,16843009),g=0|C[A>>2];I:do{if(!((-2139062144&g^-2139062144)&g+-16843009))do{if((-2139062144&(g^=Q)^-2139062144)&g+-16843009|0)break I;g=0|C[(A=A+4|0)>>2]}while(!((-2139062144&g^-2139062144)&g+-16843009|0))}while(0);for(;(Q=0|B[A>>0])<<24>>24!=0&&Q<<24>>24!=(255&I)<<24>>24;)A=A+1|0}else A=A+(0|ZA(A))|0}while(0);return 0|A}function kA(A,I){I|=0;var g,Q=0,E=0;g=y,y=y+192|0,PI(A|=0),E=128+(Q=g+64|0)|0;do{C[Q>>2]=909522486,Q=Q+4|0}while((0|Q)<(0|E));B[g+64>>0]=54^B[I>>0],Q=1;do{B[(E=g+64+Q|0)>>0]=B[E>>0]^B[I+Q>>0],Q=Q+1|0}while(32!=(0|Q));P(A,g+64|0,128,0),PI(A+208|0),E=128+(Q=g+64|0)|0;do{C[Q>>2]=1549556828,Q=Q+4|0}while((0|Q)<(0|E));B[g+64>>0]=92^B[I>>0],Q=1;do{B[(E=g+64+Q|0)>>0]=B[E>>0]^B[I+Q>>0],Q=Q+1|0}while(32!=(0|Q));P(A+208|0,g+64|0,128,0),MI(g+64|0,128),MI(g,64),y=g}function lA(A,I,g){var B,Q,E,i,e,o,c,a,n;A|=0,g|=0,n=(0|C[4+(I|=0)>>2])-(0|C[g+4>>2])|0,a=(0|C[I+8>>2])-(0|C[g+8>>2])|0,c=(0|C[I+12>>2])-(0|C[g+12>>2])|0,o=(0|C[I+16>>2])-(0|C[g+16>>2])|0,e=(0|C[I+20>>2])-(0|C[g+20>>2])|0,i=(0|C[I+24>>2])-(0|C[g+24>>2])|0,E=(0|C[I+28>>2])-(0|C[g+28>>2])|0,Q=(0|C[I+32>>2])-(0|C[g+32>>2])|0,B=(0|C[I+36>>2])-(0|C[g+36>>2])|0,C[A>>2]=(0|C[I>>2])-(0|C[g>>2]),C[A+4>>2]=n,C[A+8>>2]=a,C[A+12>>2]=c,C[A+16>>2]=o,C[A+20>>2]=e,C[A+24>>2]=i,C[A+28>>2]=E,C[A+32>>2]=Q,C[A+36>>2]=B}function _A(A,I,g){var B,Q,E,i,e,o,c,a,n;A|=0,I|=0,n=(0|C[4+(g|=0)>>2])+(0|C[I+4>>2])|0,a=(0|C[g+8>>2])+(0|C[I+8>>2])|0,c=(0|C[g+12>>2])+(0|C[I+12>>2])|0,o=(0|C[g+16>>2])+(0|C[I+16>>2])|0,e=(0|C[g+20>>2])+(0|C[I+20>>2])|0,i=(0|C[g+24>>2])+(0|C[I+24>>2])|0,E=(0|C[g+28>>2])+(0|C[I+28>>2])|0,Q=(0|C[g+32>>2])+(0|C[I+32>>2])|0,B=(0|C[g+36>>2])+(0|C[I+36>>2])|0,C[A>>2]=(0|C[g>>2])+(0|C[I>>2]),C[A+4>>2]=n,C[A+8>>2]=a,C[A+12>>2]=c,C[A+16>>2]=o,C[A+20>>2]=e,C[A+24>>2]=i,C[A+28>>2]=E,C[A+32>>2]=Q,C[A+36>>2]=B}function GA(A){A|=0;var I,g,C=0,E=0,i=0,e=0;I=y,g=y=y+63&-64,y=y+16|0,B[g>>0]=0,B[g+1>>0]=0,B[g+2>>0]=0,B[g+3>>0]=0,B[g+4>>0]=0,B[g+5>>0]=0,B[g+6>>0]=0,i=0;do{C=0|B[A+i>>0],E=0;do{B[(e=g+E|0)>>0]=B[e>>0]|B[32096+(E<<5)+i>>0]^C,E=E+1|0}while(7!=(0|E));i=i+1|0}while(31!=(0|i));C=127&B[A+31>>0],E=0;do{B[(e=g+E|0)>>0]=B[e>>0]|C^B[32096+(E<<5)+31>>0],E=E+1|0}while(7!=(0|E));C=0,E=0;do{E=(0|Q[g+C>>0])-1|E,C=C+1|0}while(7!=(0|C));return y=I,E>>>8&1|0}function dA(A,I,g,B,Q,E,i,e,o,c,a,n){return A|=0,I|=0,g|=0,B|=0,Q|=0,E|=0,i|=0,e|=0,o|=0,c|=0,c=y,y=y+336|0,QB(c,a|=0,n|=0),gB(c+64|0,c),MI(c,64),bg(c+64|0,i,e,o),LI(c+320|0,e,o),bg(c+64|0,c+320|0,8,0),zI(A,B,Q,E,a,n),bg(c+64|0,A,Q,E),LI(c+320|0,Q,E),bg(c+64|0,c+320|0,8,0),IB(c+64|0,I),MI(c+64|0,256),0|g&&(C[g>>2]=16,C[g+4>>2]=0),y=c,0}function YA(A,I,g){I|=0;var Q,E=0;if(Q=(A|=0)+(g|=0)|0,I&=255,(0|g)>=67){for(;3&A;)B[A>>0]=I,A=A+1|0;for(E=I|I<<8|I<<16|I<<24;(0|A)<=((-4&Q)-64|0);)C[A>>2]=E,C[A+4>>2]=E,C[A+8>>2]=E,C[A+12>>2]=E,C[A+16>>2]=E,C[A+20>>2]=E,C[A+24>>2]=E,C[A+28>>2]=E,C[A+32>>2]=E,C[A+36>>2]=E,C[A+40>>2]=E,C[A+44>>2]=E,C[A+48>>2]=E,C[A+52>>2]=E,C[A+56>>2]=E,C[A+60>>2]=E,A=A+64|0;for(;(0|A)<(-4&Q|0);)C[A>>2]=E,A=A+4|0}for(;(0|A)<(0|Q);)B[A>>0]=I,A=A+1|0;return Q-g|0}function MA(A,I){A|=0;var g=0;g=67108863&(0|Vg(I|=0)),C[A>>2]=g,g=(0|Vg(I+3|0))>>>2&67108611,C[A+4>>2]=g,g=(0|Vg(I+6|0))>>>4&67092735,C[A+8>>2]=g,g=(0|Vg(I+9|0))>>>6&66076671,C[A+12>>2]=g,g=(0|Vg(I+12|0))>>>8&1048575,C[A+16>>2]=g,C[A+20>>2]=0,C[A+20+4>>2]=0,C[A+20+8>>2]=0,C[A+20+12>>2]=0,C[A+20+16>>2]=0,g=0|Vg(I+16|0),C[A+40>>2]=g,g=0|Vg(I+20|0),C[A+44>>2]=g,g=0|Vg(I+24|0),C[A+48>>2]=g,I=0|Vg(I+28|0),C[A+52>>2]=I,C[A+56>>2]=0,C[A+56+4>>2]=0,B[A+80>>0]=0}function SA(A,I,g,B,Q,E){A|=0,I|=0,g|=0,B|=0,Q|=0,E|=0;var i=0,e=0,c=0;do{if(Q>>>0<0|0==(0|Q)&B>>>0<64||(i=0|vg(0|B,0|Q,-64,-1),(e=0|o())>>>0>0|0==(0|e)&i>>>0>4294967231))c=10;else{if(0|dg(g,g+64|0,i,e,E)){if(!A){c=10;break}YA(0|A,0,0|i),c=10;break}0|I&&(C[I>>2]=i,C[I+4>>2]=e),A?(YI(0|A,g+64|0,0|i),B=0):B=0}}while(0);return 10==(0|c)&&(I?(C[I>>2]=0,C[I+4>>2]=0,B=-1):B=-1),0|B}function UA(A,I){I|=0;var g,Q,E=0,i=0;if(g=y,Q=y=y+63&-64,y=y+32|0,0|(A|=0)&&0|(E=0|C[A+28>>2])){C[Q>>2]=I,i=0;do{if(B[Q+8>>0]=i,E){I=0;do{C[Q+4>>2]=I,C[Q+12>>2]=0,C[Q+16>>2]=C[Q>>2],C[Q+16+4>>2]=C[Q+4>>2],C[Q+16+8>>2]=C[Q+8>>2],C[Q+16+12>>2]=C[Q+12>>2],X(A,Q+16|0),I=I+1|0,E=0|C[A+28>>2]}while(I>>>0<E>>>0)}else E=0;i=i+1|0}while(4!=(0|i))}y=g}function vA(A,I,g,Q){A|=0,g|=0,Q|=0;var E,i,e=0;if(E=y,i=y=y+63&-64,y=y+192|0,((I|=0)-1&255)>63&&SB(),!((Q+-1&255)>63|0==(0|g))){B[i+128>>0]=I,B[i+128+1>>0]=Q,B[i+128+2>>0]=1,B[i+128+3>>0]=1,Wg(i+128+4|0),LI(i+128+8|0,0,0),e=48+(I=i+128+16|0)|0;do{C[I>>2]=0,I=I+4|0}while((0|I)<(0|e));return XA(A,i+128|0),YA(i+(255&Q)|0,0,128-(255&Q)|0),BA(0|i,0|g,255&Q|0),$(A,i,128,0),MI(i,128),void(y=E)}SB()}function bA(A,I){A|=0,I|=0;var g,B,Q=0;B=y,g=y=y+63&-64,y=y+16|0;do{if(0!=(0|A)&&0!=(0|I)&&1024==(0|(I<<10>>>0)/(I>>>0))&&(Q=0|F(12),C[A>>2]=Q,0!=(0|Q))){if(C[Q+4>>2]=0,C[Q>>2]=0,Q=0|wg(g,I<<10),C[8678]=Q,Q)C[g>>2]=0;else if(0|(Q=0|C[g>>2])){C[C[A>>2]>>2]=Q,C[4+(0|C[A>>2])>>2]=Q,C[8+(0|C[A>>2])>>2]=I<<10,Q=0;break}d(0|C[A>>2]),C[A>>2]=0,Q=-22}else Q=-22}while(0);return y=B,0|Q}function JA(A,I,g,B,E,i){var e,o,c;return A|=0,I|=0,g|=0,B|=0,i|=0,o=y,e=y=y+63&-64,y=y+32|0,c=Q[4+(E|=0)>>0]|Q[E+4+1>>0]<<8|Q[E+4+2>>0]<<16|Q[E+4+3>>0]<<24,C[e+16>>2]=Q[E>>0]|Q[E+1>>0]<<8|Q[E+2>>0]<<16|Q[E+3>>0]<<24,C[e+16+4>>2]=c,C[e+16+8>>2]=0,C[e+16+8+4>>2]=0,LI(e,g,B),C[e+8>>2]=0,C[e+8+4>>2]=0,(I+-16|0)>>>0>48?(C[8678]=28,g=-1):g=0|function(A,I,g,B,C){return g|=0,((I|=0)-1|0)>>>0>63?g=-1:(function(A,I,g,B,C){var Q,E;if(I|=0,g|=0,B|=0,C|=0,Q=y,E=y=y+63&-64,y=y+368|0,(A|=0)||SB(),(g+-1&255)>63&&SB(),I)return cA(E,g,I,B,C),$(E,0,0,0),b(E,A,g),void(y=Q);SB()}(A|=0,g,255&I,B|=0,C|=0),g=0),0|g}(A,I,i,e,e+16|0),y=o,0|g}function PA(A,I,g,B,E,i,e,c,a,n,r){var t;return A|=0,I|=0,g|=0,B|=0,E|=0,i|=0,e|=0,c|=0,a|=0,n|=0,r|=0,t=y,y=y+48|0,C[t+32>>2]=0,R(t,n,r),I=Q[n+16+4>>0]|Q[n+16+4+1>>0]<<8|Q[n+16+4+2>>0]<<16|Q[n+16+4+3>>0]<<24,C[t+32+4>>2]=Q[n+16>>0]|Q[n+16+1>>0]<<8|Q[n+16+2>>0]<<16|Q[n+16+3>>0]<<24,C[t+32+4+4>>2]=I,I=0|function(A,I,g,B,C,Q,E,i,e,c){var a;A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,a=y,y=y+352|0,gg(a+16|0,64,0,e|=0,c|=0),gB(a+80|0,a+16|0),MI(a+16|0,64),bg(a+80|0,Q,E,i),Q=0|Ug(0,0,0|E,0|i),o(),bg(a+80|0,34640,15&Q,0),bg(a+80|0,I,g,B),Q=0|Ug(0,0,0|g,0|B),o(),bg(a+80|0,34640,15&Q,0),LI(a+336|0,E,i),bg(a+80|0,a+336|0,8,0),LI(a+336|0,g,B),bg(a+80|0,a+336|0,8,0),IB(a+80|0,a),MI(a+80|0,256),E=0|tB(a,C),MI(a,16);do{if(A){if(E){YA(0|A,0,0|g),E=-1;break}mI(A,I,g,B,e,1,c),E=0;break}}while(0);return y=a,0|E}(A,g,B,E,i,e,c,a,t+32|0,t),MI(t,32),y=t,0|I}function RA(A,I,g,Q,E,i,e){I|=0,g|=0,Q|=0,E|=0,i|=0,e|=0;var o,c,a,n=0;a=y,o=y=y+63&-64,y=y+16|0,c=128+(n=A|=0)|0;do{B[n>>0]=0,n=n+1|0}while((0|n)<(0|c));do{if(!((i|Q)>>>0>0|0==(i|Q|0)&(E|g)>>>0>4294967295|e>>>0>2147483648)){if(i>>>0<0|0==(0|i)&E>>>0<3|e>>>0<8192){C[8678]=28,g=-1;break}Cg(o,16),g=(0!=(0|Gg(E,e>>>10,I,g,o,A)))<<31>>31;break}C[8678]=22,g=-1}while(0);return y=a,0|g}function NA(A,I,g,B,E,i,e,c,a,n,r,t){return A|=0,I|=0,g|=0,B|=0,E|=0,i|=0,e|=0,c|=0,a|=0,n|=0,r|=0,t|=0,n=y,y=y+48|0,C[n+32>>2]=0,R(n,r,t),t=Q[r+16+4>>0]|Q[r+16+4+1>>0]<<8|Q[r+16+4+2>>0]<<16|Q[r+16+4+3>>0]<<24,C[n+32+4>>2]=Q[r+16>>0]|Q[r+16+1>>0]<<8|Q[r+16+2>>0]<<16|Q[r+16+3>>0]<<24,C[n+32+4+4>>2]=t,function(A,I,g,B,Q,E,i,e,c,a,n){var r;A|=0,I|=0,g|=0,B|=0,Q|=0,E|=0,i|=0,e|=0,c|=0,r=y,y=y+336|0,gg(r,64,0,a|=0,n|=0),gB(r+64|0,r),MI(r,64),bg(r+64|0,i,e,c),i=0|Ug(0,0,0|e,0|c),o(),bg(r+64|0,34640,15&i,0),mI(A,B,Q,E,a,1,n),bg(r+64|0,A,Q,E),a=0|Ug(0,0,0|Q,0|E),o(),bg(r+64|0,34640,15&a,0),LI(r+320|0,e,c),bg(r+64|0,r+320|0,8,0),LI(r+320|0,Q,E),bg(r+64|0,r+320|0,8,0),IB(r+64|0,I),MI(r+64|0,256),0|g&&(C[g>>2]=16,C[g+4>>2]=0),y=r}(A,I,g,B,E,i,e,c,a,n+32|0,n),MI(n,32),y=n,0}function mA(A,I,g,Q,E){A|=0,I|=0,g|=0,Q|=0,E|=0;var i=0,e=0;A:do{if(E){for(e=0|C[g>>2];;){if(e>>>0>=I>>>0){i=4;break}if((i=0|B[A+e>>0])<<24>>24!=61){if(!Q){i=9;break}if(!(0|qg(Q,i<<24>>24))){i=9;break}}else E=E+-1|0;if(e=e+1|0,C[g>>2]=e,!E){E=0;break A}}if(4==(0|i)){C[8678]=68,E=-1;break}if(9==(0|i)){C[8678]=28,E=-1;break}}else E=0}while(0);return 0|E}function LA(A,I,g,Q,E,i,e){I|=0,g|=0,Q|=0,E|=0,i|=0,e|=0;var o,c,a,n=0;a=y,o=y=y+63&-64,y=y+16|0,c=128+(n=A|=0)|0;do{B[n>>0]=0,n=n+1|0}while((0|n)<(0|c));do{if(!((i|Q)>>>0>0|0==(i|Q|0)&(E|g)>>>0>4294967295|e>>>0>2147483648)){if(0==(0|E)&0==(0|i)|e>>>0<8192){C[8678]=28,g=-1;break}Cg(o,16),g=(0!=(0|lg(E,e>>>10,I,g,o,A)))<<31>>31;break}C[8678]=22,g=-1}while(0);return y=a,0|g}function xA(A,I){var g,B,Q,E,i,e,o,c,a;A|=0,a=0-(0|C[4+(I|=0)>>2])|0,c=0-(0|C[I+8>>2])|0,o=0-(0|C[I+12>>2])|0,e=0-(0|C[I+16>>2])|0,i=0-(0|C[I+20>>2])|0,E=0-(0|C[I+24>>2])|0,Q=0-(0|C[I+28>>2])|0,B=0-(0|C[I+32>>2])|0,g=0-(0|C[I+36>>2])|0,C[A>>2]=0-(0|C[I>>2]),C[A+4>>2]=a,C[A+8>>2]=c,C[A+12>>2]=o,C[A+16>>2]=e,C[A+20>>2]=i,C[A+24>>2]=E,C[A+28>>2]=Q,C[A+32>>2]=B,C[A+36>>2]=g}function KA(A,I){A|=0;var g,B,Q=0;if(g=y,B=y=y+63&-64,y=y+1024|0,0|C[28+(I|=0)>>2]){Q=0;do{Pg(A+64|0,0),Pg(A+68|0,Q),T(B,1024,A,72),xI((0|C[4+(0|C[I>>2])>>2])+((0|E(0|C[I+24>>2],Q))<<10)|0,B),Pg(A+64|0,1),T(B,1024,A,72),xI((0|C[4+(0|C[I>>2])>>2])+(1+(0|E(0|C[I+24>>2],Q))<<10)|0,B),Q=Q+1|0}while(Q>>>0<(0|C[I+28>>2])>>>0)}MI(B,1024),y=g}function XA(A,I){I|=0;var g=0,C=0,E=0,i=0;!function(A){var I,g=0,C=0;C=32352,I=64+(g=A|=0)|0;do{B[g>>0]=0|B[C>>0],g=g+1|0,C=C+1|0}while((0|g)<(0|I));YA(A+64|0,0,293)}(A|=0),g=0;do{i=0|qI(I+(g<<3)|0),E=0|o(),i=(Q[(C=A+(g<<3)|0)>>0]|Q[C+1>>0]<<8|Q[C+2>>0]<<16|Q[C+3>>0]<<24)^i,E=(Q[C+4>>0]|Q[C+4+1>>0]<<8|Q[C+4+2>>0]<<16|Q[C+4+3>>0]<<24)^E,B[C>>0]=i,B[C+1>>0]=i>>8,B[C+2>>0]=i>>16,B[C+3>>0]=i>>24,B[C+4>>0]=E,B[C+4+1>>0]=E>>8,B[C+4+2>>0]=E>>16,B[C+4+3>>0]=E>>24,g=g+1|0}while(8!=(0|g))}function jA(A){var I,g,B,C,E,i,c=0;return E=0|Q[7+(A|=0)>>0],i=0|rg(0|Q[A+6>>0],0,8),c=0|o(),C=0|rg(0|Q[A+5>>0],0,16),c=0|c|o(),B=0|rg(0|Q[A+4>>0],0,24),c=0|(c=0|c|o())|Q[A+3>>0],g=0|rg(0|Q[A+2>>0],0,40),c=0|c|o(),I=0|rg(0|Q[A+1>>0],0,48),c=0|c|o(),A=0|rg(0|Q[A>>0],0,56),e(0|c|o()|0),i|E|C|B|g|I|A|0}function TA(A,I,g,B,Q,E){I|=0,Q|=0,E|=0;var i,e=0;return i=y,e=y=y+63&-64,y=y+16|0,YI(64+(A|=0)|0,0|(g|=0),0|(B|=0)),kg(A,e,A+64|0,B,Q,E),64==(0|C[e>>2])&0==(0|C[e+4>>2])?0|I?(e=0|vg(0|B,0|Q,64,0),B=0|o(),C[I>>2]=e,C[I+4>>2]=B,B=0):B=0:(0|I&&(C[I>>2]=0,C[I+4>>2]=0),YA(0|A,0,B+64|0),B=-1),y=i,0|B}function qA(A,I){I|=0;var g,Q=0,E=0,i=0,e=0;g=0|B[(A|=0)>>0];A:do{if((g+-48&255)<=9){for(E=g,i=0,e=A;;){if(!(i>>>0<429496730&((E=(E<<24>>24)-48|0)>>>0>~(Q=10*i|0)>>>0^1))){Q=0;break A}if(i=(E>>>0>~Q>>>0?0:E)+Q|0,((E=0|B[(Q=e+1|0)>>0])-48&255)>9)break;e=Q}(0|Q)!=(0|A)&&(0|e)==(0|A)|g<<24>>24!=48?C[I>>2]=i:Q=0}else Q=0}while(0);return 0|Q}function VA(A){return((0-((0-(95^(A|=0))|0)>>>8&63^63|(0-(45^A)|0)>>>8&62^62|((A+65439|0)>>>8^255)&A+185&((122-A|0)>>>8&255^255)|((A+-65|0)>>>8^255)&A+-65&((90-A|0)>>>8&255^255)|((A+65488|0)>>>8^255)&A+4&((57-A|0)>>>8&255^255))|0)>>>8&255^255)&(0-(65^A)|0)>>>8|(0-(95^A)|0)>>>8&63^63|(0-(45^A)|0)>>>8&62^62|((A+65439|0)>>>8^255)&A+185&((122-A|0)>>>8&255^255)|((A+-65|0)>>>8^255)&A+-65&((90-A|0)>>>8&255^255)|((A+65488|0)>>>8^255)&A+4&((57-A|0)>>>8&255^255)|0}function zA(A){return((0-((0-(47^(A|=0))|0)>>>8&63^63|(0-(43^A)|0)>>>8&62^62|((A+65439|0)>>>8^255)&A+185&((122-A|0)>>>8&255^255)|((A+-65|0)>>>8^255)&A+-65&((90-A|0)>>>8&255^255)|((A+65488|0)>>>8^255)&A+4&((57-A|0)>>>8&255^255))|0)>>>8&255^255)&(0-(65^A)|0)>>>8|(0-(47^A)|0)>>>8&63^63|(0-(43^A)|0)>>>8&62^62|((A+65439|0)>>>8^255)&A+185&((122-A|0)>>>8&255^255)|((A+-65|0)>>>8^255)&A+-65&((90-A|0)>>>8&255^255)|((A+65488|0)>>>8^255)&A+4&((57-A|0)>>>8&255^255)|0}function WA(A,I){I|=0;var g=0,B=0;if(g=0|yg(0|C[72+(A|=0)>>2],0|C[A+72+4>>2],3),o(),(127&g)>>>0<112)112-(127&g)|0&&BA(A+80+(127&g)|0,33056,112-(127&g)|0);else{128-(127&g)|0&&BA(A+80+(127&g)|0,33056,128-(127&g)|0),D(A,A+80|0,I,I+640|0),B=112+(g=A+80|0)|0;do{C[g>>2]=0,g=g+4|0}while((0|g)<(0|B))}NI(A+192|0,A+64|0,16),D(A,A+80|0,I,I+640|0)}function OA(A,I){var g,B,Q,E,i,e,o,c,a;A|=0,a=0|C[4+(I|=0)>>2],c=0|C[I+8>>2],o=0|C[I+12>>2],e=0|C[I+16>>2],i=0|C[I+20>>2],E=0|C[I+24>>2],Q=0|C[I+28>>2],B=0|C[I+32>>2],g=0|C[I+36>>2],C[A>>2]=C[I>>2],C[A+4>>2]=a,C[A+8>>2]=c,C[A+12>>2]=o,C[A+16>>2]=e,C[A+20>>2]=i,C[A+24>>2]=E,C[A+28>>2]=Q,C[A+32>>2]=B,C[A+36>>2]=g}function ZA(A){A|=0;var I=0,g=0,Q=0;A:do{if(3&A)for(I=A,g=A;;){if(!(0|B[g>>0]))break A;if(!(3&(I=g=g+1|0))){I=g,Q=5;break}}else I=A,Q=5}while(0);if(5==(0|Q)){for(;!((-2139062144&(g=0|C[I>>2])^-2139062144)&g+-16843009);)I=I+4|0;if((255&g)<<24>>24)do{I=I+1|0}while(0!=(0|B[I>>0]))}return I-A|0}function $A(A,I){I|=0;var g=0;C[(A|=0)>>2]=1634760805,C[A+4>>2]=857760878,C[A+8>>2]=2036477234,C[A+12>>2]=1797285236,g=0|Vg(I),C[A+16>>2]=g,g=0|Vg(I+4|0),C[A+20>>2]=g,g=0|Vg(I+8|0),C[A+24>>2]=g,g=0|Vg(I+12|0),C[A+28>>2]=g,g=0|Vg(I+16|0),C[A+32>>2]=g,g=0|Vg(I+20|0),C[A+36>>2]=g,g=0|Vg(I+24|0),C[A+40>>2]=g,I=0|Vg(I+28|0),C[A+44>>2]=I}function AI(A,I,g){I|=0,g|=0;var C=0;B[7+(A|=0)>>0]=I,C=0|yg(0|I,0|g,8),o(),B[A+6>>0]=C,C=0|yg(0|I,0|g,16),o(),B[A+5>>0]=C,C=0|yg(0|I,0|g,24),o(),B[A+4>>0]=C,B[A+3>>0]=g,C=0|yg(0|I,0|g,40),o(),B[A+2>>0]=C,C=0|yg(0|I,0|g,48),o(),B[A+1>>0]=C,g=0|yg(0|I,0|g,56),o(),B[A>>0]=g}function II(A,I,g){var B,C;g|=0,B=y,C=y=y+63&-64,y=y+48|0,_A(A|=0,40+(I|=0)|0,I),lA(A+40|0,I+40|0,I),u(A+80|0,A,g+40|0),u(A+40|0,A+40|0,g),u(A+120|0,g+120|0,I+120|0),u(A,I+80|0,g+80|0),_A(C,A,A),lA(A,A+80|0,A+40|0),_A(A+40|0,A+80|0,A+40|0),lA(A+80|0,C,A+120|0),_A(A+120|0,C,A+120|0),y=B}function gI(A,I,g){var B,C;g|=0,B=y,C=y=y+63&-64,y=y+48|0,_A(A|=0,40+(I|=0)|0,I),lA(A+40|0,I+40|0,I),u(A+80|0,A,g),u(A+40|0,A+40|0,g+40|0),u(A+120|0,g+120|0,I+120|0),u(A,I+80|0,g+80|0),_A(C,A,A),lA(A,A+80|0,A+40|0),_A(A+40|0,A+80|0,A+40|0),_A(A+80|0,C,A+120|0),lA(A+120|0,C,A+120|0),y=B}function BI(A,I,g){var B,C;g|=0,B=y,C=y=y+63&-64,y=y+48|0,_A(A|=0,40+(I|=0)|0,I),lA(A+40|0,I+40|0,I),u(A+80|0,A,g+40|0),u(A+40|0,A+40|0,g),u(A+120|0,g+80|0,I+120|0),_A(C,I+80|0,I+80|0),lA(A,A+80|0,A+40|0),_A(A+40|0,A+80|0,A+40|0),lA(A+80|0,C,A+120|0),_A(A+120|0,C,A+120|0),y=B}function CI(A,I,g){var B,C;g|=0,B=y,C=y=y+63&-64,y=y+48|0,_A(A|=0,40+(I|=0)|0,I),lA(A+40|0,I+40|0,I),u(A+80|0,A,g),u(A+40|0,A+40|0,g+40|0),u(A+120|0,g+80|0,I+120|0),_A(C,I+80|0,I+80|0),lA(A,A+80|0,A+40|0),_A(A+40|0,A+80|0,A+40|0),_A(A+80|0,C,A+120|0),lA(A+120|0,C,A+120|0),y=B}function QI(A,I){A|=0,I|=0;var g,C,Q=0;g=y,C=y=y+63&-64,y=y+208|0,Q=0;do{B[A+Q>>0]=0|B[I+Q>>0],Q=Q+1|0}while(32!=(0|Q));return B[A>>0]=-8&B[A>>0],B[A+31>>0]=63&B[A+31>>0]|64,iA(C+40|0,A),function(A,I,g){var B,C;A|=0,B=y,C=y=y+63&-64,y=y+96|0,_A(C+48|0,g|=0,I|=0),lA(C,g,I),W(C,C),u(A,C+48|0,C),y=B}(C,C+40+40|0,C+40+80|0),CA(A,C),y=g,0}function EI(A,I,g){var E,i;if(A|=0,I|=0,g|=0,E=y,i=y=y+63&-64,y=y+16|0,C[i+4>>2]=A,C[i>>2]=I,B[i+8>>0]=0,0|g){A=0;do{B[i+8>>0]=B[i+8>>0]|B[(0|C[i>>2])+A>>0]^B[(0|C[i+4>>2])+A>>0],A=A+1|0}while((0|A)!=(0|g))}return y=E,((511+(0|Q[i+8>>0])|0)>>>8&1)-1|0}function iI(A,I){A|=0;var g,Q,E=0;if(g=y,Q=y=y+63&-64,y=y+64|0,!(((I|=0)-1&255)>63)){B[Q>>0]=I,B[Q+1>>0]=0,B[Q+2>>0]=1,B[Q+3>>0]=1,Wg(Q+4|0),LI(Q+8|0,0,0),E=48+(I=Q+16|0)|0;do{C[I>>2]=0,I=I+4|0}while((0|I)<(0|E));return XA(A,Q),void(y=g)}SB()}function eI(A,I,g){var Q,E;A|=0,I|=0,g|=0,Q=y,E=y=y+63&-64,y=y+16|0,C[E+8>>2]=A,C[E+4>>2]=I,C[E>>2]=0,A=0;do{C[E>>2]=C[E>>2]|255&(B[(0|C[E+4>>2])+A>>0]^B[(0|C[E+8>>2])+A>>0]),A=A+1|0}while((0|A)!=(0|g));return y=Q,((511+(0|C[E>>2])|0)>>>8&1)-1|0}function oI(A,I,g){I|=0,g|=0;var C=0,E=0;C=0|B[(A|=0)>>0];A:do{if(C<<24>>24)for(;;){if(g=g+-1|0,!(C<<24>>24==(E=0|B[I>>0])<<24>>24&0!=(0|g)&E<<24>>24!=0))break A;if(I=I+1|0,!((C=0|B[(A=A+1|0)>>0])<<24>>24)){C=0;break}}else C=0}while(0);return(255&C)-(0|Q[I>>0])|0}function cI(A,I){A|=0,I|=0;var g,C,Q=0,i=0,e=0,o=0;for(g=y,C=y=y+63&-64,y=y+16|0,i=10;o=255&((e=I)+(0|E(I=(I>>>0)/10|0,-10))|48),B[C+(Q=i+-1|0)>>0]=o,e>>>0>9&0!=(0|Q);)i=Q;BA(0|A,C+Q|0,0|(o=11-i|0)),B[A+o>>0]=0,y=g}function aI(A,I){var g,B;g=y,B=y=y+63&-64,y=y+48|0,_(A|=0,I|=0),_(A+80|0,I+40|0),l(A+120|0,I+80|0),_A(A+40|0,I,I+40|0),_(B,A+40|0),_A(A+40|0,A+80|0,A),lA(A+80|0,A+80|0,A),lA(A,B,A+40|0),lA(A+120|0,A+120|0,A+80|0),y=g}function nI(A,I,g){var C,E;if(A|=0,I|=0,g|=0,E=y,C=y=y+63&-64,y=y+16|0,B[C>>0]=0,0|function(A,I,g){A|=0,I|=0;var C,E,i=0;if(E=y,C=y=y+63&-64,y=y+336|0,0|function(A){A|=0;var I,g,C=0,E=0,i=0,e=0;I=y,g=y=y+63&-64,y=y+16|0,B[g>>0]=0,B[g+1>>0]=0,B[g+2>>0]=0,B[g+3>>0]=0,B[g+4>>0]=0,B[g+5>>0]=0,B[g+6>>0]=0,i=0;do{C=0|B[A+i>>0],E=0;do{B[(e=g+E|0)>>0]=B[e>>0]|B[33184+(E<<5)+i>>0]^C,E=E+1|0}while(7!=(0|E));i=i+1|0}while(31!=(0|i));C=127&B[A+31>>0],E=0;do{B[(e=g+E|0)>>0]=B[e>>0]|C^B[33184+(E<<5)+31>>0],E=E+1|0}while(7!=(0|E));C=0,E=0;do{E=(0|Q[g+C>>0])-1|E,C=C+1|0}while(7!=(0|C));return y=I,E>>>8&1|0}(g|=0))i=-1;else{i=0;do{B[A+i>>0]=0|B[I+i>>0],i=i+1|0}while(32!=(0|i));for(B[A>>0]=-8&B[A>>0],B[A+31>>0]=63&B[A+31>>0]|64,U(C+288|0,g),Sg(C+240|0),Kg(C+192|0),OA(C+144|0,C+288|0),Sg(C+96|0),i=254,I=0;g=I,AA(C+240|0,C+144|0,g^=I=(0|Q[A+(i>>>3)>>0])>>>(7&i)&1),AA(C+192|0,C+96|0,g),lA(C+48|0,C+144|0,C+96|0),lA(C,C+240|0,C+192|0),_A(C+240|0,C+240|0,C+192|0),_A(C+192|0,C+144|0,C+96|0),u(C+96|0,C+48|0,C+240|0),u(C+192|0,C+192|0,C),_(C+48|0,C),_(C,C+240|0),_A(C+144|0,C+96|0,C+192|0),lA(C+192|0,C+96|0,C+192|0),u(C+240|0,C,C+48|0),lA(C,C,C+48|0),_(C+192|0,C+192|0),v(C+96|0,C),_(C+144|0,C+144|0),_A(C+48|0,C+48|0,C+96|0),u(C+96|0,C+288|0,C+192|0),u(C+192|0,C,C+48|0),i;)i=i+-1|0;AA(C+240|0,C+144|0,I),AA(C+192|0,C+96|0,I),W(C+192|0,C+192|0),u(C+240|0,C+240|0,C+192|0),CA(A,C+240|0),i=0}return y=E,0|i}(A,I,g))I=-1;else{I=0;do{B[C>>0]=B[C>>0]|B[A+I>>0],I=I+1|0}while(32!=(0|I));I=0-((511+(0|Q[C>>0])|0)>>>8&1)|0}return y=E,0|I}function rI(A,I,g,B,C,Q,E){A|=0,I|=0,C|=0,Q|=0,E|=0;var i,e=0;e=0|Ug(0,1,0|(e=0|yg(0|(e=0|vg(0|(g|=0),0|(B|=0),63,0)),0|o(),6)),0|o()),(i=0|o())>>>0<0|0==(0|i)&e>>>0<Q>>>0?SB():mI(A,I,g,B,C,Q,E)}function tI(A,I,g){A|=0,I|=0;var C,Q,E=0,i=0;Q=y,i=y=y+63&-64,y=y+64|0,RI(i,g|=0,32,0),E=i,C=(g=I)+32|0;do{B[g>>0]=0|B[E>>0],g=g+1|0,E=E+1|0}while((0|g)<(0|C));return MI(i,64),i=0|AB(A,I),y=Q,0|i}function fI(A,I,g,B,C,Q,E){var i,e;A|=0,I|=0,C|=0,E|=0,i=y,e=y=y+63&-64,y=y+80|0,0==(0|(g|=0))&0==(0|(B|=0))||(Pg(e+64|0,Q|=0),$A(e,E),UI(e,C,e+64|0),M(e,I,A,g,B),MI(e,64)),y=i}function wI(A,I,g){var C,Q;A|=0,C=y,Q=y=y+63&-64,y=y+160|0,RI(I|=0,g|=0,32,0),B[I>>0]=-8&B[I>>0],B[I+31>>0]=63&B[I+31>>0]|64,iA(Q,I),sI(A,Q),YI(0|I,0|g,32),YI(I+32|0,0|A,32),y=C}function yI(A,I,g,B){A|=0,I|=0,g|=0,B|=0;A:do{if(B>>>0>0|0==(0|B)&g>>>0>4294967295)C[8678]=22,g=-1;else{switch(0|oB(A,I,g)){case 0:g=0;break A;case-35:C[8678]=28}g=-1}}while(0);return 0|g}function sI(A,I){var g,C;A|=0,g=y,C=y=y+63&-64,y=y+144|0,W(C+96|0,80+(I|=0)|0),u(C+48|0,I,C+96|0),u(C,I+40|0,C+96|0),CA(A,C),I=(0|sg(C+48|0))<<7,B[A+31>>0]=I^(0|Q[A+31>>0]),y=g}function hI(A,I,g,B){A|=0,I|=0,g|=0,B|=0;A:do{if(B>>>0>0|0==(0|B)&g>>>0>4294967295)C[8678]=22,g=-1;else{switch(0|cB(A,I,g)){case 0:g=0;break A;case-35:C[8678]=28}g=-1}}while(0);return 0|g}function DI(A,I,g,B,C,Q,E,i){var e;return A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,e=y,y=y+32|0,0|jg(e,E|=0,i|=0)?B=-1:(B=0|ng(A,I,g,B,C,Q,e),MI(e,32)),y=e,0|B}function FI(A,I,g,B,C,Q,E,i){var e;return A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,e=y,y=y+32|0,0|jg(e,E|=0,i|=0)?B=-1:(tg(A,I,g,B,C,Q,e),MI(e,32),B=0),y=e,0|B}function pI(A){A|=0;var I=0,g=0,C=0,Q=0,E=0;for(Q=0,E=32,I=1;Q=(255&(g=0|B[A+(E=E+-1|0)>>0]))-(255&(C=0|B[32320+E>>0]))>>8&(I&=255)|255&Q,E;)I&=(65535+(255&(C^g))|0)>>>8;return 0!=(0|Q)|0}function uI(A,I,g,B){return B=0|vg(0|vg(0|(g|=0),0|(B|=0),0|(A|=0),0|(I|=0)),0|o(),0|(B=0|Qg(-2&(B=0|rg(0|A,0|I,1))|0,1&(0|o())|0,0|g,0)),0|o()),e(0|o()),0|B}function HI(A,I,g,B){A|=0,I|=0,g|=0,B|=0;do{if(!(g>>>0>64|(B+-1|0)>>>0>63)){if(0==(0|I)|0==(0|g)){iI(A,255&B),I=0;break}vA(A,255&B,I,255&g),I=0;break}I=-1}while(0);return 0|I}function kI(A){var I,g,B,C=0;return g=0|Q[(A|=0)>>0],B=0|rg(0|Q[A+1>>0],0,8),C=0|o(),I=0|rg(0|Q[A+2>>0],0,16),C=0|C|o(),A=0|rg(0|Q[A+3>>0],0,24),e(0|C|o()|0),B|g|I|A|0}function lI(A,I){A|=0,I|=0;var g,C,E=0;g=y,C=y=y+63&-64,y=y+16|0,B[C>>0]=0,E=0;do{B[C>>0]=B[C>>0]|B[A+E>>0],E=E+1|0}while((0|E)!=(0|I));return y=g,(511+(0|Q[C>>0])|0)>>>8&1|0}function _I(A,I,g){A|=0,I|=0;var B=0;(g|=0)?(B=0|Vg(g),C[A+48>>2]=B,g=0|Vg(g+4|0)):(C[A+48>>2]=0,g=0),C[A+52>>2]=g,B=0|Vg(I),C[A+56>>2]=B,B=0|Vg(I+4|0),C[A+60>>2]=B}function GI(A,I,g){var B,C;A|=0,I|=0,g|=0,B=y,C=y=y+63&-64,y=y+384|0,Lg(C,0,0,24),Rg(C,I,32,0),Rg(C,g,32,0),zg(C,A,24),y=B}function dI(A,I,g,B,C,Q,E){return I|=0,C|=0,Q|=0,E|=0,0|((B|=0)>>>0<0|0==(0|B)&(g|=0)>>>0<16?-1:0|DI(A|=0,I+16|0,I,g=0|vg(0|g,0|B,-16,-1),0|o(),C,Q,E))}function YI(A,I,g){var C=0;if((0|(I|=0))<(0|(A|=0))&(0|A)<(I+(g|=0)|0)){for(C=A,I=I+g|0,A=A+g|0;(0|g)>0;)I=I-1|0,g=g-1|0,B[(A=A-1|0)>>0]=0|B[I>>0];A=C}else BA(A,I,g);return 0|A}function MI(A,I){var g,Q;if(A|=0,I|=0,g=y,Q=y=y+63&-64,y=y+16|0,C[Q>>2]=A,0|I){A=0;do{B[(0|C[Q>>2])+A>>0]=0,A=A+1|0}while((0|A)!=(0|I))}y=g}function SI(A,I){A|=0,I|=0;var g=0,B=0,Q=0,E=0;g=0;do{E=I+(g<<3)|0,Q=C[4+(B=A+(g<<3)|0)>>2]^C[E+4>>2],C[B>>2]=C[B>>2]^C[E>>2],C[B+4>>2]=Q,g=g+1|0}while(128!=(0|g))}function UI(A,I,g){A|=0,I|=0,g=(g|=0)?0|Vg(g):0,C[A+48>>2]=g,g=0|Vg(I),C[A+52>>2]=g,g=0|Vg(I+4|0),C[A+56>>2]=g,I=0|Vg(I+8|0),C[A+60>>2]=I}function vI(A,I){var g,C;I|=0,C=y,y=y+64|0,function(A,I){var g;I|=0,g=y,y=y+64|0,VI(A|=0,g),P(A+208|0,g,64,0),VI(A+208|0,I),MI(g,64),y=g}(A|=0,C),A=C,g=I+32|0;do{B[I>>0]=0|B[A>>0],I=I+1|0,A=A+1|0}while((0|I)<(0|g));y=C}function bI(A){var I;return A|=0,((I=0|C[8808])+A|0)>>>0>(0|r())>>>0&&0==(0|f(I+A|0))?(C[8678]=48,0|(A=-1)):(C[8808]=I+A,0|(A=I))}function JI(A,I,g,B,C){var Q;A|=0,I|=0,g|=0,B|=0,Q=y,y=y+416|0,function(A,I){kA(A|=0,I|=0)}(Q,C|=0),function(A,I,g,B){xg(A|=0,I|=0,g|=0,B|=0)}(Q,I,g,B),vI(Q,A),y=Q}function PI(A){var I,g=0;C[64+(A|=0)>>2]=0,C[A+64+4>>2]=0,C[A+64+8>>2]=0,C[A+64+12>>2]=0,g=32352,I=A+64|0;do{C[A>>2]=C[g>>2],A=A+4|0,g=g+4|0}while((0|A)<(0|I))}function RI(A,I,g,B){var C,Q;A|=0,I|=0,g|=0,B|=0,C=y,Q=y=y+63&-64,y=y+208|0,PI(Q),P(Q,I,g,B),VI(Q,A),y=C}function NI(A,I,g){A|=0,I|=0;var B=0,Q=0;if((g|=0)>>>3|0){B=0;do{AI(A+(B<<3)|0,0|C[(Q=I+(B<<3)|0)>>2],0|C[Q+4>>2]),B=B+1|0}while((0|B)!=(g>>>3|0))}}function mI(A,I,g,B,C,Q,E){A|=0,I|=0,C|=0,Q|=0,E|=0,(B|=0)>>>0>0|0==(0|B)&(g|=0)>>>0>4294967295?SB():fI(A,I,g,B,C,Q,E)}function LI(A,I,g){I|=0,g|=0,B[(A|=0)>>0]=I,B[A+1>>0]=I>>8,B[A+2>>0]=I>>16,B[A+3>>0]=I>>24,B[A+4>>0]=g,B[A+4+1>>0]=g>>8,B[A+4+2>>0]=g>>16,B[A+4+3>>0]=g>>24}function xI(A,I){A|=0,I|=0;var g=0,B=0,Q=0,E=0;g=0;do{E=0|qI(I+(g<<3)|0),Q=0|o(),C[(B=A+(g<<3)|0)>>2]=E,C[B+4>>2]=Q,g=g+1|0}while(128!=(0|g))}function KI(A,I,g,B,C,Q,E){return A|=0,I|=0,C|=0,Q|=0,E|=0,(B|=0)>>>0>0|0==(0|B)&(g|=0)>>>0>4294967279?(SB(),0):0|FI(A+16|0,A,I,g,B,C,Q,E)}function XI(A){return(0-(62^(A|=0))|0)>>>8&45^45|(A+65510|0)>>>8&255&A+65|(0-(63^A)|0)>>>8&95^95|(A+65484|0)>>>8&A+71&((A+65510|0)>>>8&255^255)|(A+65474|0)>>>8&A+252&((A+65484|0)>>>8&255^255)|0}function jI(A){return(0-(62^(A|=0))|0)>>>8&43^43|(A+65510|0)>>>8&255&A+65|(0-(63^A)|0)>>>8&47^47|(A+65484|0)>>>8&A+71&((A+65510|0)>>>8&255^255)|(A+65474|0)>>>8&A+252&((A+65484|0)>>>8&255^255)|0}function TI(A,I,g,B,C,Q,E){return B|=0,((I|=0)-1|0)>>>0>63|(E|=0)>>>0>64?B=-1:(function(A,I,g,B,C,Q,E){var i,e;A|=0,g|=0,B|=0,E|=0,i=y,e=y=y+63&-64,y=y+368|0,0==(0|(I|=0))&(0!=(0|(C|=0))|0!=(0|(Q|=0)))&&SB(),A||SB(),(B+-1&255)>63&&SB(),0!=(0|g)|E<<24>>24==0||SB(),(255&E)>64&&SB(),E<<24>>24?vA(e,B,g,E):iI(e,B),$(e,I,C,Q),b(e,A,B),y=i}(A|=0,g|=0,Q|=0,255&I,B,C|=0,255&E),B=0),0|B}function qI(A){var I;return I=Q[(A|=0)>>0]|Q[A+1>>0]<<8|Q[A+2>>0]<<16|Q[A+3>>0]<<24,e(Q[A+4>>0]|Q[A+4+1>>0]<<8|Q[A+4+2>>0]<<16|Q[A+4+3>>0]<<24|0),0|I}function VI(A,I){var g,B;I|=0,g=y,B=y=y+63&-64,y=y+704|0,WA(A|=0,B),NI(I,A,64),MI(B,704),MI(A,208),y=g}function zI(A,I,g,B,C,Q){A|=0,I|=0,C|=0,Q|=0,(B|=0)>>>0>0|0==(0|B)&(g|=0)>>>0>4294967295?SB():function(A,I,g,B,C,Q,E,i){var e,o;A|=0,I|=0,C|=0,i|=0,e=y,o=y=y+63&-64,y=y+80|0,0==(0|(g|=0))&0==(0|(B|=0))||(Pg(o+64|0,1),Pg(o+64+4|0,0),$A(o,i),_I(o,C,o+64|0),M(o,I,A,g,B),MI(o,64)),y=e}(A,I,g,B,C,0,0,Q)}function WI(A){var I=0,g=0;I=127&B[31+(A|=0)>>0]^127,g=30;do{I|=~B[A+g>>0],g=g+-1|0}while(0!=(0|g));return(236-(0|Q[A>>0])&511+(255&I))>>>8&1^1|0}function OI(A,I,g,B,C){A|=0,B|=0,C|=0,(g|=0)>>>0>0|0==(0|g)&(I|=0)>>>0>4294967295?SB():gg(A,I,g,B,C)}function ZI(A,I,g){var B,C;return B=0|yg(0|(A|=0),0|(I|=0),0|(g|=0)),C=0|o(),g=0|rg(0|A,0|I,64-g|0),e(0|o()|C|0),g|B|0}function $I(A,I,g){var B,C;return B=0|rg(0|(A|=0),0|(I|=0),0|(g|=0)),C=0|o(),g=0|yg(0|A,0|I,64-g|0),e(0|o()|C|0),g|B|0}function Ag(A,I,g,B){var Q;return Q=y,y=y+16|0,function(A,I,g,B,Q){A|=0,g|=0,B|=0,Q|=0;var E=0,c=0,a=0,n=0,r=0,t=0,f=0,w=0,y=0,s=0;if(!(I|=0))return B?Q?(C[Q>>2]=0|A,C[Q+4>>2]=0&I,Q=0,0|(e(0|(B=0)),Q)):(Q=0,0|(e(0|(B=0)),Q)):(0|Q&&(C[Q>>2]=(A>>>0)%(g>>>0),C[Q+4>>2]=0),Q=(A>>>0)/(g>>>0)>>>0,0|(e(0|(B=0)),Q));do{if(g){if(0|B){if((c=(0|i(0|B))-(0|i(0|I))|0)>>>0<=31){w=c+1|0,a=A>>>((c+1|0)>>>0)&c-31>>31|I<<31-c,f=I>>>((c+1|0)>>>0)&c-31>>31,E=0,c=A<<31-c;break}return Q?(C[Q>>2]=0|A,C[Q+4>>2]=I|0&I,Q=0,0|(e(0|(B=0)),Q)):(Q=0,0|(e(0|(B=0)),Q))}if(g-1&g|0){w=c=33+(0|i(0|g))-(0|i(0|I))|0,a=32-c-1>>31&I>>>((c-32|0)>>>0)|(I<<32-c|A>>>(c>>>0))&c-32>>31,f=c-32>>31&I>>>(c>>>0),E=A<<64-c&32-c>>31,c=(I<<64-c|A>>>((c-32|0)>>>0))&32-c>>31|A<<32-c&c-33>>31;break}return 0|Q&&(C[Q>>2]=g-1&A,C[Q+4>>2]=0),1==(0|g)?(Q=0|A,0|(e(0|(B=I|0&I)),Q)):(B=I>>>((Q=0|nB(0|g))>>>0)|0,Q=I<<32-Q|A>>>(Q>>>0)|0,0|(e(0|B),Q))}if(!B)return 0|Q&&(C[Q>>2]=(I>>>0)%(g>>>0),C[Q+4>>2]=0),Q=(I>>>0)/(g>>>0)>>>0,0|(e(0|(B=0)),Q);if(!A)return 0|Q&&(C[Q>>2]=0,C[Q+4>>2]=(I>>>0)%(B>>>0)),Q=(I>>>0)/(B>>>0)>>>0,0|(e(0|(g=0)),Q);if(!(B-1&B))return 0|Q&&(C[Q>>2]=0|A,C[Q+4>>2]=B-1&I|0&I),g=0,Q=I>>>((0|nB(0|B))>>>0),0|(e(0|g),Q);if((c=(0|i(0|B))-(0|i(0|I))|0)>>>0<=30){w=c+1|0,a=I<<31-c|A>>>((c+1|0)>>>0),f=I>>>((c+1|0)>>>0),E=0,c=A<<31-c;break}return Q?(C[Q>>2]=0|A,C[Q+4>>2]=I|0&I,Q=0,0|(e(0|(B=0)),Q)):(Q=0,0|(e(0|(B=0)),Q))}while(0);if(w){r=0|vg(0|g,B|0&B|0,-1,-1),t=0|o(),n=c,I=f,A=w,c=0;do{s=n,n=E>>>31|n<<1,E=c|E<<1,Ug(0|r,0|t,0|(s=a<<1|s>>>31|0),0|(y=a>>>31|I<<1|0)),c=1&(f=(w=0|o())>>31|((0|w)<0?-1:0)<<1),a=0|Ug(0|s,0|y,f&(0|g)|0,(((0|w)<0?-1:0)>>31|((0|w)<0?-1:0)<<1)&(B|0&B)|0),I=0|o(),A=A-1|0}while(0!=(0|A));A=0}else n=c,I=f,A=0,c=0;0|Q&&(C[Q>>2]=a,C[Q+4>>2]=I),s=-2&(E<<1|0)|c,e(0|(y=(0|E)>>>31|n<<1|0&(0|E>>>31)|A))}(A|=0,I|=0,g|=0,B|=0,0|Q),y=Q,0|(e(0|C[Q+4>>2]),0|C[Q>>2])}function Ig(A){A|=0;var I=0,g=0,C=0;for(I=1,g=0;I=I+(0|Q[(C=A+g|0)>>0])|0,B[C>>0]=I,4!=(0|(g=g+1|0));)I>>>=8}function gg(A,I,g,B,C){A|=0,B|=0,C|=0,(g|=0)>>>0>0|0==(0|g)&(I|=0)>>>0>4294967295?SB():function(A,I,g,B,C){var Q,E;A|=0,B|=0,Q=y,E=y=y+63&-64,y=y+64|0,0==(0|(I|=0))&0==(0|(g|=0))||($A(E,C|=0),UI(E,B,0),YA(0|A,0,0|I),M(E,A,A,I,g),MI(E,64)),y=Q}(A,I,g,B,C)}function Bg(A,I,g){var B;return A|=0,g|=0,I=0|rg(255&(I|=0)|0,0,8),B=0|o(),g=0|rg(255&g|0,0,16),e(0|B|o()|0),I|255&A|g|0}function Cg(A,I){A|=0;var g=0,C=0;if(0|(I|=0)){g=0;do{C=255&(0|DB()),B[A+g>>0]=C,g=g+1|0}while((0|g)!=(0|I))}}function Qg(A,I,g,B){var C,Q;return I|=0,B|=0,C=0|function(A,I){var g,B,C;return C=((g=0|E(65535&(I|=0),65535&(A|=0)))>>>16)+(0|E(65535&I,A>>>16))|0,B=0|E(I>>>16,65535&A),0|(e((C>>>16)+(0|E(I>>>16,A>>>16))+(((65535&C)+B|0)>>>16)|0),C+B<<16|65535&g|0)}(A|=0,g|=0),Q=0|o(),0|(e((0|E(I,g))+(0|E(B,A))+Q|0&Q|0),0|C)}function Eg(A,I){u(A|=0,I|=0,I+120|0),u(A+40|0,I+40|0,I+80|0),u(A+80|0,I+80|0,I+120|0),u(A+120|0,I,I+40|0)}function ig(A,I,g){return A|=0,I|=0,(0|(g|=0))<32?(e(I>>g|0),A>>>g|(I&(1<<g)-1)<<32-g):(e(0|((0|I)<0?-1:0)),I>>g-32|0)}function eg(A,I){_A(A|=0,40+(I|=0)|0,I),lA(A+40|0,I+40|0,I),OA(A+80|0,I+80|0),u(A+120|0,I+120|0,112)}function og(A,I){var g,B;A|=0,g=y,B=y=y+63&-64,y=y+128|0,function(A,I){OA(A|=0,I|=0),OA(A+40|0,I+40|0),OA(A+80|0,I+80|0)}(B,I|=0),aI(A,B),y=g}function cg(A){var I,g;return I=y,g=y=y+63&-64,y=y+32|0,CA(g,A|=0),A=0|lI(g,32),y=I,0|A}function ag(A,I){A|=0,I|=0;var g=0,C=0;g=0;do{B[(C=A+g|0)>>0]=B[C>>0]^B[I+g>>0],g=g+1|0}while(8!=(0|g))}function ng(A,I,g,B,C,Q,E){return 0|gA(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0)}function rg(A,I,g){return A|=0,(0|(g|=0))<32?(e((I|=0)<<g|(A&(1<<g)-1<<32-g)>>>32-g|0),A<<g):(e(A<<g-32|0),0)}function tg(A,I,g,B,C,Q,E){return Z(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0),0}function fg(A,I,g){return(g|=0)>>>0<256?0|b(A|=0,I|=0,255&g):(c(33547,33567,107,33620),0)}function wg(A,I){A|=0;var g=0;return(I|=0)>>>0<=4294967168&&0!=(0|(g=0|function(A){var I,g=0,B=0,Q=0,E=0;if((A|=0)>>>0>=4294967168)return C[8678]=48,0;if(!(B=0|F(76+(I=A>>>0<11?16:A+11&-8)|0)))return 0;do{if(63&B){if(g=(Q=((B+63&-64)-8-(B+-8)|0)>>>0>15?(B+63&-64)-8|0:56+(B+63&-64)|0)-(B+-8)|0,3&(A=0|C[B+-4>>2])){C[Q+4>>2]=(-8&A)-g|1&C[Q+4>>2]|2,C[Q+((-8&A)-g)+4>>2]=1|C[Q+((-8&A)-g)+4>>2],C[B+-4>>2]=g|1&C[B+-4>>2]|2,C[Q+4>>2]=1|C[Q+4>>2],Y(B+-8|0,g),E=Q,A=Q;break}C[Q>>2]=(0|C[B+-8>>2])+g,C[Q+4>>2]=(-8&A)-g,E=Q,A=Q;break}E=B+-8|0,A=B+-8|0}while(0);return 3&(A=0|C[(g=A+4|0)>>2])|0&&(-8&A)>>>0>(I+16|0)>>>0&&(Q=E+I|0,C[g>>2]=I|1&A|2,C[Q+4>>2]=(-8&A)-I|3,C[(B=E+(-8&A)+4|0)>>2]=1|C[B>>2],Y(Q,(-8&A)-I|0)),0|E+8}(I)))?(C[A>>2]=g,I=0):I=48,0|I}function yg(A,I,g){return A|=0,I|=0,(0|(g|=0))<32?(e(I>>>g|0),A>>>g|(I&(1<<g)-1)<<32-g):(e(0),I>>>g-32|0)}function sg(A){var I,g;return g=y,I=y=y+63&-64,y=y+32|0,CA(I,A|=0),y=g,1&B[I>>0]|0}function hg(A,I,g){tA(A|=0,I|=0,255&(g|=0)),tA(A+40|0,I+40|0,255&g),tA(A+80|0,I+80|0,255&g)}function Dg(A,I,g,B,C,Q,E){return 0|TI(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0)}function Fg(A,I,g,B,C,Q,E){return 0|nA(A|=0,I|=0,1,g|=0,B|=0,C|=0,16,Q|=0,E|=0,0,0,2)}function pg(A,I,g,B,C,Q,E){return 0|nA(A|=0,I|=0,1,g|=0,B|=0,C|=0,16,Q|=0,E|=0,0,0,1)}function ug(A,I){(function(A,I){A|=0,0|(I|=0)&&(0|(I=0|C[A>>2])&&MI(0|C[I+4>>2],C[A+16>>2]<<10),0|(I=0|C[A+4>>2])&&MI(I,C[A+20>>2]<<3))})(A|=0,4&(I|=0)),d(0|C[A+4>>2]),C[A+4>>2]=0,function(A){var I=0;0|(A|=0)&&0|(I=0|C[A>>2])&&d(I),d(A)}(0|C[A>>2]),C[A>>2]=0}function Hg(A,I){u(A|=0,I|=0,I+120|0),u(A+40|0,I+40|0,I+80|0),u(A+80|0,I+80|0,I+120|0)}function kg(A,I,g,B,C,Q){hA(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,0)}function lg(A,I,g,B,C,Q){return 0|nA(A|=0,I|=0,1,g|=0,B|=0,C|=0,16,0,32,Q|=0,128,2)}function _g(A,I,g,B,C,Q){V(A|=0,I|=0,g|=0,B|=0,C|=0,1,0,Q|=0)}function Gg(A,I,g,B,C,Q){return 0|nA(A|=0,I|=0,1,g|=0,B|=0,C|=0,16,0,32,Q|=0,128,1)}function dg(A,I,g,B,C){return 0|uA(A|=0,I|=0,g|=0,B|=0,C|=0,0)}function Yg(A,I,g,B,C,Q){V(A|=0,I|=0,g|=0,B|=0,C|=0,0,0,Q|=0)}function Mg(A){B[32+(A|=0)>>0]=1,B[A+32+1>>0]=0,B[A+32+2>>0]=0,B[A+32+3>>0]=0}function Sg(A){var I;C[(A|=0)>>2]=1,I=36+(A=A+4|0)|0;do{C[A>>2]=0,A=A+4|0}while((0|A)<(0|I))}function Ug(A,I,g,B){return 0|(e(0|(B=(I|=0)-(B|=0)-((g|=0)>>>0>(A|=0)>>>0|0)>>>0)),A-g>>>0|0)}function vg(A,I,g,B){return 0|(e((I|=0)+(B|=0)+((A|=0)+(g|=0)>>>0>>>0<A>>>0|0)>>>0|0),A+g>>>0|0)}function bg(A,I,g,B){!function(A,I,g,B){K(A|=0,I|=0,g|=0,B|=0)}(A|=0,I|=0,g|=0,B|=0)}function Jg(A,I){I|=0,PI(A|=0),0|I&&P(A,33408,34,0)}function Pg(A,I){I|=0,B[(A|=0)>>0]=I,B[A+1>>0]=I>>8,B[A+2>>0]=I>>16,B[A+3>>0]=I>>24}function Rg(A,I,g,B){return Xg(A|=0,I|=0,g|=0,B|=0),0}function Ng(A,I,g,B){return 0|FA(A|=0,I|=0,g|=0,B|=0,2)}function mg(A,I,g,B){return 0|FA(A|=0,I|=0,g|=0,B|=0,1)}function Lg(A,I,g,B){return 0|HI(A|=0,I|=0,g|=0,B|=0)}function xg(A,I,g,B){P(A|=0,I|=0,g|=0,B|=0)}function Kg(A){var I;I=40+(A|=0)|0;do{C[A>>2]=0,A=A+4|0}while((0|A)<(0|I))}function Xg(A,I,g,B){$(A|=0,I|=0,g|=0,B|=0)}function jg(A,I,g){return 0|function(A,I,g){var B,C;return A|=0,C=y,B=y=y+63&-64,y=y+32|0,0|nI(B,g|=0,I|=0)?A=-1:(x(A,34656,B),A=0),y=C,0|A}(A|=0,I|=0,g|=0)}function Tg(A){B[(A|=0)>>0]=-8&B[A>>0],B[A+31>>0]=63&B[A+31>>0]|64}function qg(A,I){return A=0|HA(A|=0,I|=0),0|((0|B[A>>0])==(255&I)<<24>>24?A:0)}function Vg(A){return Q[(A|=0)>>0]|Q[A+1>>0]<<8|Q[A+2>>0]<<16|Q[A+3>>0]<<24|0}function zg(A,I,g){return 0|fg(A|=0,I|=0,g|=0)}function Wg(A){B[(A|=0)>>0]=0,B[A+1>>0]=0,B[A+2>>0]=0,B[A+3>>0]=0}function Og(A){Kg(A|=0),Sg(A+40|0),Sg(A+80|0),Kg(A+120|0)}function Zg(A){C[(A|=0)>>2]=0,C[A+4>>2]=0,C[A+8>>2]=0,C[A+12>>2]=0}function $g(A,I,g){!function(A,I,g){var B,C,Q;A|=0,I|=0,B=y,Q=y=y+63&-64,y=y+128|0,g=((g|=0)<<24>>24)-((0-(255&(C=0|function(A){return(255&(A|=0))>>>7|0}(g)))&g<<24>>24)<<1)&255,function(A){Sg(A|=0),Sg(A+40|0),Kg(A+80|0)}(A),hg(A,I,0|aB(g,1)),hg(A,I+120|0,0|aB(g,2)),hg(A,I+240|0,0|aB(g,3)),hg(A,I+360|0,0|aB(g,4)),hg(A,I+480|0,0|aB(g,5)),hg(A,I+600|0,0|aB(g,6)),hg(A,I+720|0,0|aB(g,7)),hg(A,I+840|0,0|aB(g,8)),OA(Q,A+40|0),OA(Q+40|0,A),xA(Q+80|0,A+80|0),hg(A,Q,C),y=B}(A|=0,1120+(960*(I|=0)|0)|0,g|=0)}function AB(A,I){return 0|QI(A|=0,I|=0)}function IB(A,I){!function(A,I){z(A|=0,I|=0)}(A|=0,I|=0)}function gB(A,I){!function(A,I){MA(A|=0,I|=0)}(A|=0,I|=0)}function BB(A,I,g){return 0|nI(A|=0,I|=0,g|=0)}function CB(A,I){return 0|function(A,I){return A|=0,Cg(I|=0,32),0|AB(A,I)}(A|=0,I|=0)}function QB(A,I,g){!function(A,I,g,B,C){var Q,E;A|=0,B|=0,Q=y,E=y=y+63&-64,y=y+64|0,0==(0|(I|=0))&0==(0|(g|=0))||($A(E,C|=0),_I(E,B,0),YA(0|A,0,64),M(E,A,A,64,0),MI(E,64)),y=Q}(A|=0,64,0,I|=0,g|=0)}function EB(A){1!=(-7&(A|=0)|0)&&SB()}function iB(A,I,g){!function(A,I,g){A|=0,I|=0;var B,C,Q,E,i,e,o,c,a,n,r,t=0,f=0,w=0,y=0,s=0,h=0,D=0,F=0,p=0,u=0,H=0,k=0,l=0,_=0,G=0,d=0,Y=0,M=0,S=0,U=0,v=0,b=0,J=0,P=0,R=0,N=0,m=0,L=0,x=0,K=0,X=0,j=0;r=0|Vg(g|=0),i=0|Vg(g+4|0),e=0|Vg(g+8|0),o=0|Vg(g+12|0),c=0|Vg(g+16|0),a=0|Vg(g+20|0),n=0|Vg(g+24|0),B=0|Vg(g+28|0),C=0|Vg(I),Q=0|Vg(I+4|0),E=0|Vg(I+8|0),g=0|Vg(I+12|0),I=0,t=1634760805,f=r,w=2036477234,y=c,s=a,h=n,D=B,F=1797285236,p=i,u=e,H=o,k=857760878,l=C,_=Q,G=E,d=g;do{x=(0|wB((U=(0|wB((J=(0|wB((N=(0|wB(t+s|0,7))^H)+t|0,9))^G)+N|0,13))^s)+J|0,18))^t,R=(0|wB((j=(0|wB((S=(0|wB((b=(0|wB(f+k|0,7))^d)+k|0,9))^h)+b|0,13))^f)+S|0,18))^k,v=(0|wB((L=(0|wB((X=(0|wB((M=(0|wB(l+w|0,7))^D)+w|0,9))^p)+M|0,13))^l)+X|0,18))^w,Y=(0|wB((P=(0|wB((m=(0|wB((K=(0|wB(y+F|0,7))^u)+F|0,9))^_)+K|0,13))^y)+m|0,18))^F,t=(0|wB((u=(0|wB((p=(0|wB((f=(0|wB(K+x|0,7))^j)+x|0,9))^X)+f|0,13))^K)+p|0,18))^x,k=(0|wB((H=(0|wB((_=(0|wB((l=(0|wB(R+N|0,7))^L)+R|0,9))^m)+l|0,13))^N)+_|0,18))^R,w=(0|wB((d=(0|wB((G=(0|wB((y=(0|wB(v+b|0,7))^P)+v|0,9))^J)+y|0,13))^b)+G|0,18))^v,F=(0|wB((D=(0|wB((h=(0|wB((s=(0|wB(Y+M|0,7))^U)+Y|0,9))^S)+s|0,13))^M)+h|0,18))^Y,I=I+2|0}while(I>>>0<20);Pg(A,t+1634760805|0),Pg(A+4|0,f+r|0),Pg(A+8|0,p+i|0),Pg(A+12|0,u+e|0),Pg(A+16|0,H+o|0),Pg(A+20|0,k+857760878|0),Pg(A+24|0,l+C|0),Pg(A+28|0,_+Q|0),Pg(A+32|0,G+E|0),Pg(A+36|0,d+g|0),Pg(A+40|0,w+2036477234|0),Pg(A+44|0,y+c|0),Pg(A+48|0,s+a|0),Pg(A+52|0,h+n|0),Pg(A+56|0,D+B|0),Pg(A+60|0,F+1797285236|0)}(A|=0,I|=0,g|=0)}function eB(A,I){return 0|AB(A|=0,I|=0)}function oB(A,I,g){return 0|EA(A|=0,I|=0,g|=0,2)}function cB(A,I,g){return 0|EA(A|=0,I|=0,g|=0,1)}function aB(A,I){return((255&((I|=0)^(A|=0)))-1|0)>>>31&255|0}function nB(A){return 0|((A|=0)?31-(0|i(A^A-1))|0:32)}function rB(A,I){return 0|eI(A|=0,I|=0,32)}function tB(A,I){return 0|eI(A|=0,I|=0,16)}function fB(A,I){BA(0|(A|=0),0|(I|=0),1024)}function wB(A,I){return(A|=0)>>>(32-(I|=0)|0)|A<<I|0}function yB(A){YA(0|(A|=0),0,1024)}function sB(A){Cg(A|=0,32)}function hB(){n(1)}function DB(){return 0|n(0)}function FB(){return-17}function pB(){return 3}function uB(){return 2}function HB(){return-1}function kB(){return 1}function lB(){return 8}function _B(){return 24}function GB(){return 16}function dB(){return 64}function YB(){return 32}function MB(){return 0}function SB(){a()}return{___errno_location:function(){return 34712},___muldi3:Qg,___uremdi3:Ag,_bitshift64Ashr:ig,_bitshift64Lshr:yg,_bitshift64Shl:rg,_crypto_aead_chacha20poly1305_abytes:GB,_crypto_aead_chacha20poly1305_decrypt:function(A,I,g,B,Q,E,i,e,c,a,n){I|=0,g|=0,B|=0,i|=0,e|=0,c|=0,a|=0,n|=0;var r=0,t=0;return(E|=0)>>>0>0|0==(0|E)&(Q|=0)>>>0>15?(E=0|sA(A|=0,0,B,g=0|vg(0|Q,0|E,-16,-1),r=0|o(),B+Q+-16|0,i,e,c,a,n),I&&(Q=0==(0|E)?g:0,g=0==(0|E)?r:0,t=4)):I?(Q=0,g=0,E=-1,t=4):E=-1,4==(0|t)&&(C[I>>2]=Q,C[I+4>>2]=g),0|E},_crypto_aead_chacha20poly1305_decrypt_detached:sA,_crypto_aead_chacha20poly1305_encrypt:function(A,I,g,B,Q,E,i,e,c,a,n){return A|=0,I|=0,g|=0,E|=0,i|=0,e|=0,c|=0,a|=0,n|=0,(Q|=0)>>>0>0|0==(0|Q)&(B|=0)>>>0>4294967279&&SB(),dA(A,A+B|0,0,g,B,Q,E,i,e,0,a,n),0|I&&(a=0|vg(0|B,0|Q,16,0),c=0|o(),C[I>>2]=a,C[I+4>>2]=c),0},_crypto_aead_chacha20poly1305_encrypt_detached:dA,_crypto_aead_chacha20poly1305_ietf_abytes:GB,_crypto_aead_chacha20poly1305_ietf_decrypt:function(A,I,g,B,Q,E,i,e,c,a,n){I|=0,g|=0,B|=0,i|=0,e|=0,c|=0,a|=0,n|=0;var r=0,t=0;return(E|=0)>>>0>0|0==(0|E)&(Q|=0)>>>0>15?(E=0|eA(A|=0,0,B,g=0|vg(0|Q,0|E,-16,-1),r=0|o(),B+Q+-16|0,i,e,c,a,n),I&&(Q=0==(0|E)?g:0,g=0==(0|E)?r:0,t=4)):I?(Q=0,g=0,E=-1,t=4):E=-1,4==(0|t)&&(C[I>>2]=Q,C[I+4>>2]=g),0|E},_crypto_aead_chacha20poly1305_ietf_decrypt_detached:eA,_crypto_aead_chacha20poly1305_ietf_encrypt:function(A,I,g,B,Q,E,i,e,c,a,n){return A|=0,I|=0,g|=0,E|=0,i|=0,e|=0,c|=0,a|=0,n|=0,(Q|=0)>>>0>0|0==(0|Q)&(B|=0)>>>0>4294967279&&SB(),fA(A,A+B|0,0,g,B,Q,E,i,e,0,a,n),0|I&&(a=0|vg(0|B,0|Q,16,0),c=0|o(),C[I>>2]=a,C[I+4>>2]=c),0},_crypto_aead_chacha20poly1305_ietf_encrypt_detached:fA,_crypto_aead_chacha20poly1305_ietf_keybytes:YB,_crypto_aead_chacha20poly1305_ietf_keygen:sB,_crypto_aead_chacha20poly1305_ietf_messagebytes_max:FB,_crypto_aead_chacha20poly1305_ietf_npubbytes:function(){return 12},_crypto_aead_chacha20poly1305_ietf_nsecbytes:MB,_crypto_aead_chacha20poly1305_keybytes:YB,_crypto_aead_chacha20poly1305_keygen:sB,_crypto_aead_chacha20poly1305_messagebytes_max:FB,_crypto_aead_chacha20poly1305_npubbytes:lB,_crypto_aead_chacha20poly1305_nsecbytes:MB,_crypto_aead_xchacha20poly1305_ietf_abytes:GB,_crypto_aead_xchacha20poly1305_ietf_decrypt:function(A,I,g,B,Q,E,i,e,c,a,n){I|=0,g|=0,B|=0,i|=0,e|=0,c|=0,a|=0,n|=0;var r=0,t=0;return(E|=0)>>>0>0|0==(0|E)&(Q|=0)>>>0>15?(E=0|PA(A|=0,0,B,g=0|vg(0|Q,0|E,-16,-1),r=0|o(),B+Q+-16|0,i,e,c,a,n),I&&(Q=0==(0|E)?g:0,g=0==(0|E)?r:0,t=4)):I?(Q=0,g=0,E=-1,t=4):E=-1,4==(0|t)&&(C[I>>2]=Q,C[I+4>>2]=g),0|E},_crypto_aead_xchacha20poly1305_ietf_decrypt_detached:PA,_crypto_aead_xchacha20poly1305_ietf_encrypt:function(A,I,g,B,Q,E,i,e,c,a,n){return A|=0,I|=0,g|=0,E|=0,i|=0,e|=0,c|=0,a|=0,n|=0,(Q|=0)>>>0>0|0==(0|Q)&(B|=0)>>>0>4294967279&&SB(),NA(A,A+B|0,0,g,B,Q,E,i,e,0,a,n),0|I&&(a=0|vg(0|B,0|Q,16,0),c=0|o(),C[I>>2]=a,C[I+4>>2]=c),0},_crypto_aead_xchacha20poly1305_ietf_encrypt_detached:NA,_crypto_aead_xchacha20poly1305_ietf_keybytes:YB,_crypto_aead_xchacha20poly1305_ietf_keygen:sB,_crypto_aead_xchacha20poly1305_ietf_messagebytes_max:FB,_crypto_aead_xchacha20poly1305_ietf_npubbytes:_B,_crypto_aead_xchacha20poly1305_ietf_nsecbytes:MB,_crypto_auth:function(A,I,g,B,C){return JI(A|=0,I|=0,g|=0,B|=0,C|=0),0},_crypto_auth_bytes:YB,_crypto_auth_keybytes:YB,_crypto_auth_keygen:sB,_crypto_auth_verify:function(A,I,g,B,C){return 0|function(A,I,g,B,C){var Q;return A|=0,Q=y,y=y+32|0,JI(Q,I|=0,g|=0,B|=0,C|=0),C=0|rB(A,Q),C=0|((0|Q)==(0|A)?-1:C)|EI(Q,A,32),y=Q,0|C}(A|=0,I|=0,g|=0,B|=0,C|=0)},_crypto_box_beforenm:jg,_crypto_box_beforenmbytes:YB,_crypto_box_detached:FI,_crypto_box_detached_afternm:tg,_crypto_box_easy:KI,_crypto_box_easy_afternm:function(A,I,g,B,C,Q){return A|=0,I|=0,C|=0,Q|=0,(B|=0)>>>0>0|0==(0|B)&(g|=0)>>>0>4294967279?(SB(),0):(tg(A+16|0,A,I,g,B,C,Q),0)},_crypto_box_keypair:CB,_crypto_box_macbytes:GB,_crypto_box_messagebytes_max:FB,_crypto_box_noncebytes:_B,_crypto_box_open_detached:DI,_crypto_box_open_detached_afternm:ng,_crypto_box_open_easy:dI,_crypto_box_open_easy_afternm:function(A,I,g,B,C,Q){return I|=0,C|=0,Q|=0,0|((B|=0)>>>0<0|0==(0|B)&(g|=0)>>>0<16?-1:0|ng(A|=0,I+16|0,I,g=0|vg(0|g,0|B,-16,-1),0|o(),C,Q))},_crypto_box_publickeybytes:YB,_crypto_box_seal:function(A,I,g,C,Q){A|=0,I|=0,g|=0,C|=0,Q|=0;var E,i=0,e=0,o=0;if(E=y,y=y+96|0,0|CB(E+32|0,E))g=-1;else{e=E+32|0,o=(i=A)+32|0;do{B[i>>0]=0|B[e>>0],i=i+1|0,e=e+1|0}while((0|i)<(0|o));GI(E+64|0,E+32|0,Q),g=0|KI(A+32|0,I,g,C,E+64|0,Q,E),MI(E,32),MI(E+32|0,32),MI(E+64|0,24)}return y=E,0|g},_crypto_box_seal_open:function(A,I,g,B,C,Q){var E,i;return A|=0,I|=0,C|=0,Q|=0,i=y,E=y=y+63&-64,y=y+32|0,(B|=0)>>>0<0|0==(0|B)&(g|=0)>>>0<48?g=-1:(B=0|vg(0|g,0|B,-32,-1),g=0|o(),GI(E,I,C),g=0|dI(A,I+32|0,B,g,E,I,Q)),y=i,0|g},_crypto_box_sealbytes:function(){return 48},_crypto_box_secretkeybytes:YB,_crypto_box_seed_keypair:function(A,I,g){return 0|tI(A|=0,I|=0,g|=0)},_crypto_box_seedbytes:YB,_crypto_generichash:Dg,_crypto_generichash_bytes:YB,_crypto_generichash_bytes_max:dB,_crypto_generichash_bytes_min:GB,_crypto_generichash_final:zg,_crypto_generichash_init:Lg,_crypto_generichash_keybytes:YB,_crypto_generichash_keybytes_max:dB,_crypto_generichash_keybytes_min:GB,_crypto_generichash_keygen:sB,_crypto_generichash_statebytes:function(){return 384},_crypto_generichash_update:Rg,_crypto_hash:function(A,I,g,B){return RI(A|=0,I|=0,g|=0,B|=0),0},_crypto_hash_bytes:dB,_crypto_kdf_bytes_max:dB,_crypto_kdf_bytes_min:GB,_crypto_kdf_contextbytes:lB,_crypto_kdf_derive_from_key:function(A,I,g,B,C,Q){return 0|JA(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0)},_crypto_kdf_keybytes:YB,_crypto_kdf_keygen:sB,_crypto_kx_client_session_keys:function(A,I,g,C,Q){var E,i,e;if(I|=0,g|=0,C|=0,Q|=0,e=y,i=y=y+63&-64,y=y+480|0,E=0==(0|(A|=0))?I:A,I=0==(0|I)?E:I,E||SB(),0|BB(i+448|0,C,Q))A=-1;else{Lg(i,0,0,64),Rg(i,i+448|0,32,0),MI(i+448|0,32),Rg(i,g,32,0),Rg(i,Q,32,0),zg(i,i+384|0,64),MI(i,384),A=0;do{B[E+A>>0]=0|B[i+384+A>>0],B[I+A>>0]=0|B[i+384+(A+32)>>0],A=A+1|0}while(32!=(0|A));MI(i+384|0,64),A=0}return y=e,0|A},_crypto_kx_keypair:function(A,I){return A|=0,Cg(I|=0,32),0|eB(A,I)},_crypto_kx_publickeybytes:YB,_crypto_kx_secretkeybytes:YB,_crypto_kx_seed_keypair:function(A,I,g){return A|=0,Dg(I|=0,32,g|=0,32,0,0,0),0|eB(A,I)},_crypto_kx_seedbytes:YB,_crypto_kx_server_session_keys:function(A,I,g,C,Q){var E,i,e;if(I|=0,g|=0,C|=0,Q|=0,e=y,i=y=y+63&-64,y=y+480|0,E=0==(0|(A|=0))?I:A,I=0==(0|I)?E:I,E||SB(),0|BB(i+448|0,C,Q))A=-1;else{Lg(i,0,0,64),Rg(i,i+448|0,32,0),MI(i+448|0,32),Rg(i,Q,32,0),Rg(i,g,32,0),zg(i,i+384|0,64),MI(i,384),A=0;do{B[I+A>>0]=0|B[i+384+A>>0],B[E+A>>0]=0|B[i+384+(A+32)>>0],A=A+1|0}while(32!=(0|A));MI(i+384|0,64),A=0}return y=e,0|A},_crypto_kx_sessionkeybytes:YB,_crypto_pwhash:function(A,I,g,B,Q,E,i,e,o,c,a){switch(A|=0,I|=0,g|=0,B|=0,Q|=0,E|=0,i|=0,e|=0,o|=0,c|=0,0|(a|=0)){case 1:I=0|function(A,I,g,B,Q,E,i,e,o,c){g|=0,B|=0,Q|=0,E|=0,i|=0,e|=0,o|=0,c|=0,YA(0|(A|=0),0,0|(I|=0));do{if(!(g>>>0>0|0==(0|g)&I>>>0>4294967295)){if(g>>>0<0|0==(0|g)&I>>>0<16){C[8678]=28,I=-1;break}if((o|E)>>>0>0|0==(o|E|0)&(e|Q)>>>0>4294967295|c>>>0>2147483648){C[8678]=22,I=-1;break}if(o>>>0<0|0==(0|o)&e>>>0<3|c>>>0<8192){C[8678]=28,I=-1;break}I=(0!=(0|pg(e,c>>>10,B,Q,i,A,I)))<<31>>31;break}C[8678]=22,I=-1}while(0);return 0|I}(A,I,g,B,Q,E,i,e,o,c);break;case 2:I=0|function(A,I,g,B,Q,E,i,e,o,c){g|=0,B|=0,Q|=0,E|=0,i|=0,e|=0,o|=0,c|=0,YA(0|(A|=0),0,0|(I|=0));do{if(!(g>>>0>0|0==(0|g)&I>>>0>4294967295)){if(g>>>0<0|0==(0|g)&I>>>0<16){C[8678]=28,I=-1;break}if((o|E)>>>0>0|0==(o|E|0)&(e|Q)>>>0>4294967295|c>>>0>2147483648){C[8678]=22,I=-1;break}if(0==(0|e)&0==(0|o)|c>>>0<8192){C[8678]=28,I=-1;break}I=(0!=(0|Fg(e,c>>>10,B,Q,i,A,I)))<<31>>31;break}C[8678]=22,I=-1}while(0);return 0|I}(A,I,g,B,Q,E,i,e,o,c);break;default:C[8678]=28,I=-1}return 0|I},_crypto_pwhash_alg_argon2i13:kB,_crypto_pwhash_alg_argon2id13:uB,_crypto_pwhash_alg_default:uB,_crypto_pwhash_bytes_max:HB,_crypto_pwhash_bytes_min:GB,_crypto_pwhash_memlimit_interactive:function(){return 67108864},_crypto_pwhash_memlimit_max:function(){return-2147483648},_crypto_pwhash_memlimit_min:function(){return 8192},_crypto_pwhash_memlimit_moderate:function(){return 268435456},_crypto_pwhash_memlimit_sensitive:function(){return 1073741824},_crypto_pwhash_opslimit_interactive:uB,_crypto_pwhash_opslimit_max:HB,_crypto_pwhash_opslimit_min:kB,_crypto_pwhash_opslimit_moderate:pB,_crypto_pwhash_opslimit_sensitive:function(){return 4},_crypto_pwhash_passwd_max:HB,_crypto_pwhash_passwd_min:MB,_crypto_pwhash_saltbytes:GB,_crypto_pwhash_str:function(A,I,g,B,C,Q,E){return 0|LA(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0)},_crypto_pwhash_str_alg:function(A,I,g,B,C,Q,E,i){A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0;var e=0;switch(0|(i|=0)){case 1:e=0|RA(A,I,g,B,C,Q,E);break;case 2:e=0|LA(A,I,g,B,C,Q,E);break;default:SB()}return 0|e},_crypto_pwhash_str_needs_rehash:function(A,I,g,B){A|=0,I|=0,g|=0,B|=0;do{if(0|oI(A,33713,10)){if(0|oI(A,33724,9)){C[8678]=28,I=-1;break}I=0|mg(A,I,g,B);break}I=0|Ng(A,I,g,B)}while(0);return 0|I},_crypto_pwhash_str_verify:function(A,I,g,B){A|=0,I|=0,g|=0,B|=0;do{if(0|oI(A,33713,10)){if(0|oI(A,33724,9)){C[8678]=28,g=-1;break}g=0|hI(A,I,g,B);break}g=0|yI(A,I,g,B)}while(0);return 0|g},_crypto_pwhash_strbytes:function(){return 128},_crypto_pwhash_strprefix:function(){return 33713},_crypto_scalarmult:BB,_crypto_scalarmult_base:eB,_crypto_scalarmult_bytes:YB,_crypto_scalarmult_scalarbytes:YB,_crypto_secretbox_detached:Z,_crypto_secretbox_easy:function(A,I,g,B,C,Q){return A|=0,I|=0,C|=0,Q|=0,(B|=0)>>>0>0|0==(0|B)&(g|=0)>>>0>4294967279?(SB(),0):(Z(A+16|0,A,I,g,B,C,Q),0)},_crypto_secretbox_keybytes:YB,_crypto_secretbox_keygen:sB,_crypto_secretbox_macbytes:GB,_crypto_secretbox_messagebytes_max:FB,_crypto_secretbox_noncebytes:_B,_crypto_secretbox_open_detached:gA,_crypto_secretbox_open_easy:function(A,I,g,B,C,Q){return I|=0,C|=0,Q|=0,0|((B|=0)>>>0<0|0==(0|B)&(g|=0)>>>0<16?-1:0|gA(A|=0,I+16|0,I,g=0|vg(0|g,0|B,-16,-1),0|o(),C,Q))},_crypto_secretstream_xchacha20poly1305_abytes:function(){return 17},_crypto_secretstream_xchacha20poly1305_headerbytes:_B,_crypto_secretstream_xchacha20poly1305_init_pull:function(A,I,g){var C;return R(A|=0,I|=0,g|=0),Mg(A),C=Q[I+16>>0]|Q[I+16+1>>0]<<8|Q[I+16+2>>0]<<16|Q[I+16+3>>0]<<24,g=Q[I+16+4>>0]|Q[I+16+4+1>>0]<<8|Q[I+16+4+2>>0]<<16|Q[I+16+4+3>>0]<<24,B[A+36>>0]=C,B[A+36+1>>0]=C>>8,B[A+36+2>>0]=C>>16,B[A+36+3>>0]=C>>24,B[A+36+4>>0]=g,B[A+36+4+1>>0]=g>>8,B[A+36+4+2>>0]=g>>16,B[A+36+4+3>>0]=g>>24,B[A+44>>0]=0,B[A+44+1>>0]=0,B[A+44+2>>0]=0,B[A+44+3>>0]=0,B[A+44+4>>0]=0,B[A+44+4+1>>0]=0,B[A+44+4+2>>0]=0,B[A+44+4+3>>0]=0,0},_crypto_secretstream_xchacha20poly1305_init_push:function(A,I,g){return A|=0,g|=0,Cg(I|=0,24),R(A,I,g),Mg(A),g=Q[I+16>>0]|Q[I+16+1>>0]<<8|Q[I+16+2>>0]<<16|Q[I+16+3>>0]<<24,I=Q[I+16+4>>0]|Q[I+16+4+1>>0]<<8|Q[I+16+4+2>>0]<<16|Q[I+16+4+3>>0]<<24,B[A+36>>0]=g,B[A+36+1>>0]=g>>8,B[A+36+2>>0]=g>>16,B[A+36+3>>0]=g>>24,B[A+36+4>>0]=I,B[A+36+4+1>>0]=I>>8,B[A+36+4+2>>0]=I>>16,B[A+36+4+3>>0]=I>>24,B[A+44>>0]=0,B[A+44+1>>0]=0,B[A+44+2>>0]=0,B[A+44+3>>0]=0,B[A+44+4>>0]=0,B[A+44+4+1>>0]=0,B[A+44+4+2>>0]=0,B[A+44+4+3>>0]=0,0},_crypto_secretstream_xchacha20poly1305_keybytes:YB,_crypto_secretstream_xchacha20poly1305_keygen:sB,_crypto_secretstream_xchacha20poly1305_messagebytes_max:function(){return-18},_crypto_secretstream_xchacha20poly1305_pull:function(A,I,g,Q,E,i,e,c,a,n){A|=0,I|=0,Q|=0,E|=0,i|=0,e|=0,c|=0,a|=0,n|=0;var r,t,f=0,w=0,s=0;t=y,r=y=y+63&-64,y=y+352|0,0|(g|=0)&&(C[g>>2]=0,C[g+4>>2]=0),0|Q&&(B[Q>>0]=-1);do{if(e>>>0<0|0==(0|e)&i>>>0<17)c=-1;else{w=0|vg(0|i,0|e,-17,-1),(s=0|o())>>>0>0|0==(0|s)&w>>>0>4294967278&&SB(),OI(r+16|0,64,0,A+32|0,A),gB(r+80|0,r+16|0),MI(r+16|0,64),bg(r+80|0,c,a,n),c=0|Ug(0,0,0|a,0|n),o(),bg(r+80|0,34672,15&c,0),f=64+(c=r+16|0)|0;do{C[c>>2]=0,c=c+4|0}while((0|c)<(0|f));if(B[r+16>>0]=0|B[E>>0],rI(r+16|0,r+16|0,64,0,A+32|0,1,A),c=0|B[r+16>>0],B[r+16>>0]=0|B[E>>0],bg(r+80|0,r+16|0,64,0),bg(r+80|0,E+1|0,w,s),f=0|vg(0|i,0|e,15,0),o(),bg(r+80|0,34672,15&f,0),LI(r+336|0,a,n),bg(r+80|0,r+336|0,8,0),LI(r+336|0,n=0|vg(0|i,0|e,47,0),0|o()),bg(r+80|0,r+336|0,8,0),IB(r+80|0,r),MI(r+80|0,256),0|EI(r,E+1+w|0,16)){MI(r,16),c=-1;break}rI(I,E+1|0,w,s,A+32|0,2,A),ag(A+36|0,r),Ig(A+32|0),(0!=(2&c)||0|lI(A+32|0,4))&&wA(A),0|g&&(C[g>>2]=w,C[g+4>>2]=s),0|Q?(B[Q>>0]=c,c=0):c=0}}while(0);return y=t,0|c},_crypto_secretstream_xchacha20poly1305_push:function(A,I,g,Q,E,i,e,c,a,n){A|=0,I|=0,Q|=0,E|=0,i|=0,e|=0,c|=0,a|=0,n|=0;var r,t,f=0;t=y,f=y=y+63&-64,y=y+336|0,0|(g|=0)&&(C[g>>2]=0,C[g+4>>2]=0),i>>>0>0|0==(0|i)&E>>>0>4294967278&&SB(),OI(f,64,0,A+32|0,A),gB(f+64|0,f),MI(f,64),bg(f+64|0,e,c,a),e=0|Ug(0,0,0|c,0|a),o(),bg(f+64|0,34672,15&e,0),r=(e=f)+64|0;do{C[e>>2]=0,e=e+4|0}while((0|e)<(0|r));return B[f>>0]=n,rI(f,f,64,0,A+32|0,1,A),bg(f+64|0,f,64,0),B[I>>0]=0|B[f>>0],rI(I+1|0,Q,E,i,A+32|0,2,A),bg(f+64|0,I+1|0,E,i),bg(f+64|0,34672,15&E,0),LI(f+320|0,c,a),bg(f+64|0,f+320|0,8,0),LI(f+320|0,Q=0|vg(0|E,0|i,64,0),0|o()),bg(f+64|0,f+320|0,8,0),IB(f+64|0,I+1+E|0),MI(f+64|0,256),ag(A+36|0,I+1+E|0),Ig(A+32|0),(0!=(2&n)||0|lI(A+32|0,4))&&wA(A),0|g&&(n=0|vg(0|E,0|i,17,0),f=0|o(),C[g>>2]=n,C[g+4>>2]=f),y=t,0},_crypto_secretstream_xchacha20poly1305_rekey:wA,_crypto_secretstream_xchacha20poly1305_statebytes:function(){return 52},_crypto_secretstream_xchacha20poly1305_tag_final:pB,_crypto_secretstream_xchacha20poly1305_tag_message:MB,_crypto_secretstream_xchacha20poly1305_tag_push:kB,_crypto_secretstream_xchacha20poly1305_tag_rekey:uB,_crypto_shorthash:function(A,I,g,B,C){return G(A|=0,I|=0,g|=0,B|=0,C|=0),0},_crypto_shorthash_bytes:lB,_crypto_shorthash_keybytes:GB,_crypto_shorthash_keygen:function(A){Cg(A|=0,16)},_crypto_sign:function(A,I,g,B,C,Q){return 0|TA(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0)},_crypto_sign_bytes:dB,_crypto_sign_detached:function(A,I,g,B,C,Q){return kg(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0),0},_crypto_sign_ed25519_pk_to_curve25519:function(A,I){var g,B;return A|=0,B=y,g=y=y+63&-64,y=y+256|0,0==(0|GA(I|=0))&&0==(0|rA(g+88|0,I))&&0!=(0|function(A){var I,g;return I=y,g=y=y+63&-64,y=y+160|0,O(g,A|=0),A=0|cg(g),y=I,0|A}(g+88|0))?(Sg(g),lA(g,g,g+88+40|0),Sg(g+48|0),_A(g+48|0,g+48|0,g+88+40|0),W(g,g),u(g+48|0,g+48|0,g),CA(A,g+48|0),A=0):A=-1,y=B,0|A},_crypto_sign_ed25519_sk_to_curve25519:function(A,I){var g,C,Q;A|=0,C=y,Q=y=y+63&-64,y=y+64|0,RI(Q,I|=0,32,0),B[Q>>0]=-8&B[Q>>0],B[Q+31>>0]=63&B[Q+31>>0]|64,I=Q,g=A+32|0;do{B[A>>0]=0|B[I>>0],A=A+1|0,I=I+1|0}while((0|A)<(0|g));return MI(Q,64),y=C,0},_crypto_sign_final_create:function(A,I,g,B){return function(A,I,g,B){var C,Q;I|=0,g|=0,B|=0,C=y,Q=y=y+63&-64,y=y+64|0,VI(A|=0,Q),hA(I,g,Q,64,0,B,1),y=C}(A|=0,I|=0,g|=0,B|=0),0},_crypto_sign_final_verify:function(A,I,g){return 0|function(A,I,g){var B,C;return I|=0,g|=0,B=y,C=y=y+63&-64,y=y+64|0,VI(A|=0,C),A=0|uA(I,C,64,0,g,1),y=B,0|A}(A|=0,I|=0,g|=0)},_crypto_sign_init:function(A){return function(A){PI(A|=0)}(A|=0),0},_crypto_sign_keypair:function(A,I){return function(A,I){var g,B;A|=0,I|=0,g=y,B=y=y+63&-64,y=y+32|0,Cg(B,32),wI(A,I,B),MI(B,32),y=g}(A|=0,I|=0),0},_crypto_sign_messagebytes_max:function(){return-65},_crypto_sign_open:function(A,I,g,B,C,Q){return 0|SA(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0)},_crypto_sign_publickeybytes:YB,_crypto_sign_secretkeybytes:dB,_crypto_sign_seed_keypair:function(A,I,g){return wI(A|=0,I|=0,g|=0),0},_crypto_sign_seedbytes:YB,_crypto_sign_statebytes:function(){return 208},_crypto_sign_update:function(A,I,g,B){return xg(A|=0,I|=0,g|=0,B|=0),0},_crypto_sign_verify_detached:function(A,I,g,B,C){return 0|dg(A|=0,I|=0,g|=0,B|=0,C|=0)},_emscripten_get_sbrk_ptr:function(){return 35232},_emscripten_replace_memory:function(A){return B=new Int8Array(A),Q=new Uint8Array(A),C=new Int32Array(A),g=A,!0},_free:d,_i64Add:vg,_i64Subtract:Ug,_malloc:F,_memcpy:BA,_memmove:YI,_memset:YA,_randombytes:function(A,I,g){(g|=0)>>>0<1|1==(0|g)&(I|=0)>>>0<0?Cg(A|=0,I):c(34506,34526,197,34552)},_randombytes_buf:Cg,_randombytes_buf_deterministic:function(A,I,g){OI(A|=0,I|=0,0,34494,g|=0)},_randombytes_close:MB,_randombytes_random:DB,_randombytes_seedbytes:YB,_randombytes_stir:hB,_randombytes_uniform:function(A){var I=0;if((A|=0)>>>0<2)I=0;else{do{I=0|DB()}while(I>>>0<(((0-A|0)>>>0)%(A>>>0)|0)>>>0);I=(I>>>0)%(A>>>0)|0}return 0|I},_sodium_base642bin:m,_sodium_base64_encoded_len:function(A,I){var g;return A|=0,EB(I|=0),(((A>>>0)/3|0)<<2|1)+(4-(3-(g=(0|E((A>>>0)/3|0,-3))+A|0)&0-(I>>>1&1))&0-(1&(g>>>1|g)))|0},_sodium_bin2base64:q,_sodium_bin2hex:function(A,I,g,C){A|=0,g|=0;var E=0,i=0;if((C|=0)>>>0<2147483647&C<<1>>>0<(I|=0)>>>0||SB(),C){I=0;do{i=0|Q[g+I>>0],B[A+(E=I<<1)>>0]=87+(i>>>4)+((65526+(i>>>4)|0)>>>8&217),B[A+(1|E)>>0]=(22272+((15&i)<<8)+(65526+(15&i)&55552)|0)>>>8,I=I+1|0}while((0|I)!=(0|C));I=C<<1}else I=0;return B[A+I>>0]=0,0|A},_sodium_hex2bin:function(A,I,g,E,i,e,o){A|=0,I|=0,g|=0,E|=0,i|=0,e|=0,o|=0;var c=0,a=0,n=0,r=0,t=0,f=0,w=0;A:do{if(E){r=0,f=0,c=0,a=0;I:for(;;){for(;!(255&((t=(65526+(201+(223&(n=0|Q[g+c>>0]))&255)^65520+(201+(223&n)&255))>>>8)|(65526+(48^n)|0)>>>8)|0);){if(!(0!=(0|i)&a<<24>>24==0)){n=0;break I}if(!(0|qg(i,n))){a=r,w=17;break A}if(!((c=c+1|0)>>>0<E>>>0)){a=r,w=17;break A}a=0}if(n=t&201+(223&n)|(65526+(48^n)|0)>>>8&(48^n),r>>>0>=I>>>0){w=9;break}if(a<<24>>24?(B[A+r>>0]=n|255&f,r=r+1|0,n=f):n=n<<4&255,a=~a,!((c=c+1|0)>>>0<E>>>0)){n=0;break}f=n}if(9==(0|w)&&(C[8678]=68,n=-1),a<<24>>24){C[8678]=28,n=0,a=c+-1|0,c=-1;break}if(n){n=0,a=c,c=-1;break}a=r,w=17;break}a=0,c=0,w=17}while(0);return 17==(0|w)&&(n=a,a=c,c=0),o?C[o>>2]=g+a:(0|a)!=(0|E)&&(C[8678]=28,c=-1),0|e&&(C[e>>2]=n),0|c},_sodium_init:function(){var A=0;return 0|C[8676]?A=1:(function(){return A=y,I=y=y+63&-64,y=y+16|0,Zg(I),0|C[I>>2]&&Zg(I),void(y=A);var A,I}(),hB(),function(){var A=0;(0|(A=0|w(30)))>0?C[8677]=A:A=0|C[8677],A>>>0<16?SB():Cg(34688,16)}(),C[8676]=1,A=0),0|A},_sodium_library_minimal:kB,_sodium_library_version_major:function(){return 10},_sodium_library_version_minor:pB,_sodium_pad:function(A,I,g,E,i){A|=0,I|=0,g|=0,i|=0;var e,o,c=0,a=0;if(o=y,e=y=y+63&-64,y=y+16|0,E|=0)if((a=E+-1-(c=E+-1&E?(g>>>0)%(E>>>0)|0:E+-1&g)|0)>>>0>=~g>>>0&&SB(),(a+g|0)>>>0<i>>>0){0|A&&(C[A>>2]=a+g+1),B[e>>0]=0,c=0;do{A=((c^a)-1|0)>>>24,B[(i=I+(a+g)+(0-c)|0)>>0]=128&A|B[e>>0]&B[i>>0]&255,B[e>>0]=0|A|Q[e>>0],c=c+1|0}while((0|c)!=(0|E));c=0}else c=-1;else c=-1;return y=o,0|c},_sodium_unpad:function(A,I,g,B){A|=0,I|=0,g|=0,B|=0;var E,i,e=0,o=0,c=0,a=0,n=0;if(i=y,E=y=y+63&-64,y=y+16|0,C[E>>2]=0,(B+-1|0)>>>0<g>>>0){for(e=0,c=0,a=0;e&=255,o=0|Q[I+(g+-1)+(0-c)>>0],n=(511+(0|C[E>>2])&e+511&511+(128^o))>>>8&1,C[E>>2]=c&0-n|C[E>>2],a=n|255&a,(0|(c=c+1|0))!=(0|B);)e|=o;C[A>>2]=g+-1-(0|C[E>>2]),e=a+-1|0}else e=-1;return y=i,0|e},_sodium_version_string:function(){return 34617},establishStackSpace:function(A,I){y=A|=0},stackAlloc:function(A){var I;return I=y,y=15+(y=y+(A|=0)|0)&-16,0|I},stackRestore:function(A){y=A|=0},stackSave:function(){return 0|y}}}({Math:Math,Int8Array:Int8Array,Int32Array:Int32Array,Uint8Array:Uint8Array},{a:j,b:function(A){s=A},c:function(){return s},d:function(A,I,g,B){j("Assertion failed: "+d(A)+", at: "+[I?d(I):"unknown filename",g,B?d(B):"unknown function"])},e:BA,f:function(){j()},g:function(A){return O[A]()},h:IA,i:function(A,I,g){u.set(u.subarray(I,I+g),A)},j:function(A){var I=IA();if(A>2130706432)return!1;for(var g=Math.max(I,16777216);g<A;)g=g<=536870912?Y(2*g,16777216):Math.min(Y((3*g+2147483648)/4,16777216),2130706432);return!!gA(g)},k:function(A){switch(A){case 30:return 16384;case 85:return 130048;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 79:return 0;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return"object"==typeof navigator&&navigator.hardwareConcurrency||1}return BA(28),-1},l:function(A){j("OOM")},m:Z,n:$,o:gA,p:AA,q:function(){var A=AA();return I.extraStackTrace&&(A+="\n"+I.extraStackTrace()),$(A)},r:35408},F),aA=(I.___errno_location=cA.___errno_location,I.___muldi3=cA.___muldi3,I.___uremdi3=cA.___uremdi3,I._bitshift64Ashr=cA._bitshift64Ashr,I._bitshift64Lshr=cA._bitshift64Lshr,I._bitshift64Shl=cA._bitshift64Shl,I._crypto_aead_chacha20poly1305_abytes=cA._crypto_aead_chacha20poly1305_abytes,I._crypto_aead_chacha20poly1305_decrypt=cA._crypto_aead_chacha20poly1305_decrypt,I._crypto_aead_chacha20poly1305_decrypt_detached=cA._crypto_aead_chacha20poly1305_decrypt_detached,I._crypto_aead_chacha20poly1305_encrypt=cA._crypto_aead_chacha20poly1305_encrypt,I._crypto_aead_chacha20poly1305_encrypt_detached=cA._crypto_aead_chacha20poly1305_encrypt_detached,I._crypto_aead_chacha20poly1305_ietf_abytes=cA._crypto_aead_chacha20poly1305_ietf_abytes,I._crypto_aead_chacha20poly1305_ietf_decrypt=cA._crypto_aead_chacha20poly1305_ietf_decrypt,I._crypto_aead_chacha20poly1305_ietf_decrypt_detached=cA._crypto_aead_chacha20poly1305_ietf_decrypt_detached,I._crypto_aead_chacha20poly1305_ietf_encrypt=cA._crypto_aead_chacha20poly1305_ietf_encrypt,I._crypto_aead_chacha20poly1305_ietf_encrypt_detached=cA._crypto_aead_chacha20poly1305_ietf_encrypt_detached,I._crypto_aead_chacha20poly1305_ietf_keybytes=cA._crypto_aead_chacha20poly1305_ietf_keybytes,I._crypto_aead_chacha20poly1305_ietf_keygen=cA._crypto_aead_chacha20poly1305_ietf_keygen,I._crypto_aead_chacha20poly1305_ietf_messagebytes_max=cA._crypto_aead_chacha20poly1305_ietf_messagebytes_max,I._crypto_aead_chacha20poly1305_ietf_npubbytes=cA._crypto_aead_chacha20poly1305_ietf_npubbytes,I._crypto_aead_chacha20poly1305_ietf_nsecbytes=cA._crypto_aead_chacha20poly1305_ietf_nsecbytes,I._crypto_aead_chacha20poly1305_keybytes=cA._crypto_aead_chacha20poly1305_keybytes,I._crypto_aead_chacha20poly1305_keygen=cA._crypto_aead_chacha20poly1305_keygen,I._crypto_aead_chacha20poly1305_messagebytes_max=cA._crypto_aead_chacha20poly1305_messagebytes_max,I._crypto_aead_chacha20poly1305_npubbytes=cA._crypto_aead_chacha20poly1305_npubbytes,I._crypto_aead_chacha20poly1305_nsecbytes=cA._crypto_aead_chacha20poly1305_nsecbytes,I._crypto_aead_xchacha20poly1305_ietf_abytes=cA._crypto_aead_xchacha20poly1305_ietf_abytes,I._crypto_aead_xchacha20poly1305_ietf_decrypt=cA._crypto_aead_xchacha20poly1305_ietf_decrypt,I._crypto_aead_xchacha20poly1305_ietf_decrypt_detached=cA._crypto_aead_xchacha20poly1305_ietf_decrypt_detached,I._crypto_aead_xchacha20poly1305_ietf_encrypt=cA._crypto_aead_xchacha20poly1305_ietf_encrypt,I._crypto_aead_xchacha20poly1305_ietf_encrypt_detached=cA._crypto_aead_xchacha20poly1305_ietf_encrypt_detached,I._crypto_aead_xchacha20poly1305_ietf_keybytes=cA._crypto_aead_xchacha20poly1305_ietf_keybytes,I._crypto_aead_xchacha20poly1305_ietf_keygen=cA._crypto_aead_xchacha20poly1305_ietf_keygen,I._crypto_aead_xchacha20poly1305_ietf_messagebytes_max=cA._crypto_aead_xchacha20poly1305_ietf_messagebytes_max,I._crypto_aead_xchacha20poly1305_ietf_npubbytes=cA._crypto_aead_xchacha20poly1305_ietf_npubbytes,I._crypto_aead_xchacha20poly1305_ietf_nsecbytes=cA._crypto_aead_xchacha20poly1305_ietf_nsecbytes,I._crypto_auth=cA._crypto_auth,I._crypto_auth_bytes=cA._crypto_auth_bytes,I._crypto_auth_keybytes=cA._crypto_auth_keybytes,I._crypto_auth_keygen=cA._crypto_auth_keygen,I._crypto_auth_verify=cA._crypto_auth_verify,I._crypto_box_beforenm=cA._crypto_box_beforenm,I._crypto_box_beforenmbytes=cA._crypto_box_beforenmbytes,I._crypto_box_detached=cA._crypto_box_detached,I._crypto_box_detached_afternm=cA._crypto_box_detached_afternm,I._crypto_box_easy=cA._crypto_box_easy,I._crypto_box_easy_afternm=cA._crypto_box_easy_afternm,I._crypto_box_keypair=cA._crypto_box_keypair,I._crypto_box_macbytes=cA._crypto_box_macbytes,I._crypto_box_messagebytes_max=cA._crypto_box_messagebytes_max,I._crypto_box_noncebytes=cA._crypto_box_noncebytes,I._crypto_box_open_detached=cA._crypto_box_open_detached,I._crypto_box_open_detached_afternm=cA._crypto_box_open_detached_afternm,I._crypto_box_open_easy=cA._crypto_box_open_easy,I._crypto_box_open_easy_afternm=cA._crypto_box_open_easy_afternm,I._crypto_box_publickeybytes=cA._crypto_box_publickeybytes,I._crypto_box_seal=cA._crypto_box_seal,I._crypto_box_seal_open=cA._crypto_box_seal_open,I._crypto_box_sealbytes=cA._crypto_box_sealbytes,I._crypto_box_secretkeybytes=cA._crypto_box_secretkeybytes,I._crypto_box_seed_keypair=cA._crypto_box_seed_keypair,I._crypto_box_seedbytes=cA._crypto_box_seedbytes,I._crypto_generichash=cA._crypto_generichash,I._crypto_generichash_bytes=cA._crypto_generichash_bytes,I._crypto_generichash_bytes_max=cA._crypto_generichash_bytes_max,I._crypto_generichash_bytes_min=cA._crypto_generichash_bytes_min,I._crypto_generichash_final=cA._crypto_generichash_final,I._crypto_generichash_init=cA._crypto_generichash_init,I._crypto_generichash_keybytes=cA._crypto_generichash_keybytes,I._crypto_generichash_keybytes_max=cA._crypto_generichash_keybytes_max,I._crypto_generichash_keybytes_min=cA._crypto_generichash_keybytes_min,I._crypto_generichash_keygen=cA._crypto_generichash_keygen,I._crypto_generichash_statebytes=cA._crypto_generichash_statebytes,I._crypto_generichash_update=cA._crypto_generichash_update,I._crypto_hash=cA._crypto_hash,I._crypto_hash_bytes=cA._crypto_hash_bytes,I._crypto_kdf_bytes_max=cA._crypto_kdf_bytes_max,I._crypto_kdf_bytes_min=cA._crypto_kdf_bytes_min,I._crypto_kdf_contextbytes=cA._crypto_kdf_contextbytes,I._crypto_kdf_derive_from_key=cA._crypto_kdf_derive_from_key,I._crypto_kdf_keybytes=cA._crypto_kdf_keybytes,I._crypto_kdf_keygen=cA._crypto_kdf_keygen,I._crypto_kx_client_session_keys=cA._crypto_kx_client_session_keys,I._crypto_kx_keypair=cA._crypto_kx_keypair,I._crypto_kx_publickeybytes=cA._crypto_kx_publickeybytes,I._crypto_kx_secretkeybytes=cA._crypto_kx_secretkeybytes,I._crypto_kx_seed_keypair=cA._crypto_kx_seed_keypair,I._crypto_kx_seedbytes=cA._crypto_kx_seedbytes,I._crypto_kx_server_session_keys=cA._crypto_kx_server_session_keys,I._crypto_kx_sessionkeybytes=cA._crypto_kx_sessionkeybytes,I._crypto_pwhash=cA._crypto_pwhash,I._crypto_pwhash_alg_argon2i13=cA._crypto_pwhash_alg_argon2i13,I._crypto_pwhash_alg_argon2id13=cA._crypto_pwhash_alg_argon2id13,I._crypto_pwhash_alg_default=cA._crypto_pwhash_alg_default,I._crypto_pwhash_bytes_max=cA._crypto_pwhash_bytes_max,I._crypto_pwhash_bytes_min=cA._crypto_pwhash_bytes_min,I._crypto_pwhash_memlimit_interactive=cA._crypto_pwhash_memlimit_interactive,I._crypto_pwhash_memlimit_max=cA._crypto_pwhash_memlimit_max,I._crypto_pwhash_memlimit_min=cA._crypto_pwhash_memlimit_min,I._crypto_pwhash_memlimit_moderate=cA._crypto_pwhash_memlimit_moderate,I._crypto_pwhash_memlimit_sensitive=cA._crypto_pwhash_memlimit_sensitive,I._crypto_pwhash_opslimit_interactive=cA._crypto_pwhash_opslimit_interactive,I._crypto_pwhash_opslimit_max=cA._crypto_pwhash_opslimit_max,I._crypto_pwhash_opslimit_min=cA._crypto_pwhash_opslimit_min,I._crypto_pwhash_opslimit_moderate=cA._crypto_pwhash_opslimit_moderate,I._crypto_pwhash_opslimit_sensitive=cA._crypto_pwhash_opslimit_sensitive,I._crypto_pwhash_passwd_max=cA._crypto_pwhash_passwd_max,I._crypto_pwhash_passwd_min=cA._crypto_pwhash_passwd_min,I._crypto_pwhash_saltbytes=cA._crypto_pwhash_saltbytes,I._crypto_pwhash_str=cA._crypto_pwhash_str,I._crypto_pwhash_str_alg=cA._crypto_pwhash_str_alg,I._crypto_pwhash_str_needs_rehash=cA._crypto_pwhash_str_needs_rehash,I._crypto_pwhash_str_verify=cA._crypto_pwhash_str_verify,I._crypto_pwhash_strbytes=cA._crypto_pwhash_strbytes,I._crypto_pwhash_strprefix=cA._crypto_pwhash_strprefix,I._crypto_scalarmult=cA._crypto_scalarmult,I._crypto_scalarmult_base=cA._crypto_scalarmult_base,I._crypto_scalarmult_bytes=cA._crypto_scalarmult_bytes,I._crypto_scalarmult_scalarbytes=cA._crypto_scalarmult_scalarbytes,I._crypto_secretbox_detached=cA._crypto_secretbox_detached,I._crypto_secretbox_easy=cA._crypto_secretbox_easy,I._crypto_secretbox_keybytes=cA._crypto_secretbox_keybytes,I._crypto_secretbox_keygen=cA._crypto_secretbox_keygen,I._crypto_secretbox_macbytes=cA._crypto_secretbox_macbytes,I._crypto_secretbox_messagebytes_max=cA._crypto_secretbox_messagebytes_max,I._crypto_secretbox_noncebytes=cA._crypto_secretbox_noncebytes,I._crypto_secretbox_open_detached=cA._crypto_secretbox_open_detached,I._crypto_secretbox_open_easy=cA._crypto_secretbox_open_easy,I._crypto_secretstream_xchacha20poly1305_abytes=cA._crypto_secretstream_xchacha20poly1305_abytes,I._crypto_secretstream_xchacha20poly1305_headerbytes=cA._crypto_secretstream_xchacha20poly1305_headerbytes,I._crypto_secretstream_xchacha20poly1305_init_pull=cA._crypto_secretstream_xchacha20poly1305_init_pull,I._crypto_secretstream_xchacha20poly1305_init_push=cA._crypto_secretstream_xchacha20poly1305_init_push,I._crypto_secretstream_xchacha20poly1305_keybytes=cA._crypto_secretstream_xchacha20poly1305_keybytes,I._crypto_secretstream_xchacha20poly1305_keygen=cA._crypto_secretstream_xchacha20poly1305_keygen,I._crypto_secretstream_xchacha20poly1305_messagebytes_max=cA._crypto_secretstream_xchacha20poly1305_messagebytes_max,I._crypto_secretstream_xchacha20poly1305_pull=cA._crypto_secretstream_xchacha20poly1305_pull,I._crypto_secretstream_xchacha20poly1305_push=cA._crypto_secretstream_xchacha20poly1305_push,I._crypto_secretstream_xchacha20poly1305_rekey=cA._crypto_secretstream_xchacha20poly1305_rekey,I._crypto_secretstream_xchacha20poly1305_statebytes=cA._crypto_secretstream_xchacha20poly1305_statebytes,I._crypto_secretstream_xchacha20poly1305_tag_final=cA._crypto_secretstream_xchacha20poly1305_tag_final,I._crypto_secretstream_xchacha20poly1305_tag_message=cA._crypto_secretstream_xchacha20poly1305_tag_message,I._crypto_secretstream_xchacha20poly1305_tag_push=cA._crypto_secretstream_xchacha20poly1305_tag_push,I._crypto_secretstream_xchacha20poly1305_tag_rekey=cA._crypto_secretstream_xchacha20poly1305_tag_rekey,I._crypto_shorthash=cA._crypto_shorthash,I._crypto_shorthash_bytes=cA._crypto_shorthash_bytes,I._crypto_shorthash_keybytes=cA._crypto_shorthash_keybytes,I._crypto_shorthash_keygen=cA._crypto_shorthash_keygen,I._crypto_sign=cA._crypto_sign,I._crypto_sign_bytes=cA._crypto_sign_bytes,I._crypto_sign_detached=cA._crypto_sign_detached,I._crypto_sign_ed25519_pk_to_curve25519=cA._crypto_sign_ed25519_pk_to_curve25519,I._crypto_sign_ed25519_sk_to_curve25519=cA._crypto_sign_ed25519_sk_to_curve25519,I._crypto_sign_final_create=cA._crypto_sign_final_create,I._crypto_sign_final_verify=cA._crypto_sign_final_verify,I._crypto_sign_init=cA._crypto_sign_init,I._crypto_sign_keypair=cA._crypto_sign_keypair,I._crypto_sign_messagebytes_max=cA._crypto_sign_messagebytes_max,I._crypto_sign_open=cA._crypto_sign_open,I._crypto_sign_publickeybytes=cA._crypto_sign_publickeybytes,I._crypto_sign_secretkeybytes=cA._crypto_sign_secretkeybytes,I._crypto_sign_seed_keypair=cA._crypto_sign_seed_keypair,I._crypto_sign_seedbytes=cA._crypto_sign_seedbytes,I._crypto_sign_statebytes=cA._crypto_sign_statebytes,I._crypto_sign_update=cA._crypto_sign_update,I._crypto_sign_verify_detached=cA._crypto_sign_verify_detached,I._emscripten_get_sbrk_ptr=cA._emscripten_get_sbrk_ptr,I._emscripten_replace_memory=cA._emscripten_replace_memory);if(I._free=cA._free,I._i64Add=cA._i64Add,I._i64Subtract=cA._i64Subtract,I._malloc=cA._malloc,I._memcpy=cA._memcpy,I._memmove=cA._memmove,I._memset=cA._memset,I._randombytes=cA._randombytes,I._randombytes_buf=cA._randombytes_buf,I._randombytes_buf_deterministic=cA._randombytes_buf_deterministic,I._randombytes_close=cA._randombytes_close,I._randombytes_random=cA._randombytes_random,I._randombytes_seedbytes=cA._randombytes_seedbytes,I._randombytes_stir=cA._randombytes_stir,I._randombytes_uniform=cA._randombytes_uniform,I._sodium_base642bin=cA._sodium_base642bin,I._sodium_base64_encoded_len=cA._sodium_base64_encoded_len,I._sodium_bin2base64=cA._sodium_bin2base64,I._sodium_bin2hex=cA._sodium_bin2hex,I._sodium_hex2bin=cA._sodium_hex2bin,I._sodium_init=cA._sodium_init,I._sodium_library_minimal=cA._sodium_library_minimal,I._sodium_library_version_major=cA._sodium_library_version_major,I._sodium_library_version_minor=cA._sodium_library_version_minor,I._sodium_pad=cA._sodium_pad,I._sodium_unpad=cA._sodium_unpad,I._sodium_version_string=cA._sodium_version_string,I.establishStackSpace=cA.establishStackSpace,I.stackAlloc=cA.stackAlloc,I.stackRestore=cA.stackRestore,I.stackSave=cA.stackSave,I.asm=cA,I.setValue=function(A,I,g,B){switch("*"===(g=g||"i8").charAt(g.length-1)&&(g="i32"),g){case"i1":case"i8":p[A>>0]=I;break;case"i16":H[A>>1]=I;break;case"i32":k[A>>2]=I;break;case"i64":q=[I>>>0,(T=I,+R(T)>=1?T>0?(0|L(+m(T/4294967296),4294967295))>>>0:~~+N((T-+(~~T>>>0))/4294967296)>>>0:0)],k[A>>2]=q[0],k[A+4>>2]=q[1];break;case"float":l[A>>2]=I;break;case"double":_[A>>3]=I;break;default:j("invalid type for setValue: "+g)}},I.getValue=function(A,I,g){switch("*"===(I=I||"i8").charAt(I.length-1)&&(I="i32"),I){case"i1":case"i8":return p[A>>0];case"i16":return H[A>>1];case"i32":case"i64":return k[A>>2];case"float":return l[A>>2];case"double":return _[A>>3];default:j("invalid type for getValue: "+I)}return null},I.UTF8ToString=d,V)if(W(V)||(eA=V,V=I.locateFile?I.locateFile(eA,f):f+eA),o||i){var nA=n(V);u.set(nA,8)}else{x++,I.monitorRunDependencies&&I.monitorRunDependencies(x);var rA=function(A){A.byteLength&&(A=new Uint8Array(A)),u.set(A,8),I.memoryInitializerRequest&&delete I.memoryInitializerRequest.response,function(A){if(x--,I.monitorRunDependencies&&I.monitorRunDependencies(x),0==x&&(null!==K&&(clearInterval(K),K=null),X)){var g=X;X=null,g()}}()},tA=function(){a(V,rA,function(){throw"could not load memory initializer "+V})},fA=iA(V);if(fA)rA(fA.buffer);else if(I.memoryInitializerRequest){var wA=function(){var A=I.memoryInitializerRequest,g=A.response;if(200!==A.status&&0!==A.status){var B=iA(I.memoryInitializerRequestURL);if(!B)return void tA();g=B.buffer}rA(g)};I.memoryInitializerRequest.response?setTimeout(wA,0):I.memoryInitializerRequest.addEventListener("load",wA)}else tA()}function yA(A){function g(){oA||(oA=!0,h||(U(b),U(J),I.onRuntimeInitialized&&I.onRuntimeInitialized(),function(){if(I.postRun)for("function"==typeof I.postRun&&(I.postRun=[I.postRun]);I.postRun.length;)A=I.postRun.shift(),P.unshift(A);var A;U(P)}()))}A=A||e,x>0||(function(){if(I.preRun)for("function"==typeof I.preRun&&(I.preRun=[I.preRun]);I.preRun.length;)A=I.preRun.shift(),v.unshift(A);var A;U(v)}(),x>0||(I.setStatus?(I.setStatus("Running..."),setTimeout(function(){setTimeout(function(){I.setStatus("")},1),g()},1)):g()))}if(X=function A(){oA||yA(),oA||(X=A)},I.run=yA,I.preInit)for("function"==typeof I.preInit&&(I.preInit=[I.preInit]);I.preInit.length>0;)I.preInit.pop()();yA(),Object.keys(B).forEach(function(A){"getRandomValue"!==A&&delete B[A]}),Object.keys(I).forEach(function(A){B[A]=I[A]})};var g,C=void 0!==C?C:{},Q={};for(g in C)C.hasOwnProperty(g)&&(Q[g]=C[g]);var E,i,e=[],o=!1,c=!1,a=!1;o="object"==typeof window,c="function"==typeof importScripts,E="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,a=E&&!o&&!c,i=!o&&!a&&!c;var n,r,t,f,w="";a?(w=__dirname+"/",n=function(A,I){var g;return(g=eA(A))||(t||(t=__webpack_require__(44)),f||(f=__webpack_require__(45)),A=f.normalize(A),g=t.readFileSync(A)),I?g:g.toString()},r=function(A){var I=n(A,!0);return I.buffer||(I=new Uint8Array(I)),H(I.buffer),I},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),e=process.argv.slice(2), true&&(module.exports=C),process.on("unhandledRejection",z),C.inspect=function(){return"[Emscripten Module object]"}):i?("undefined"!=typeof read&&(n=function(A){var I=eA(A);return I?EA(I):read(A)}),r=function(A){var I;return(I=eA(A))?I:"function"==typeof readbuffer?new Uint8Array(readbuffer(A)):(H("object"==typeof(I=read(A,"binary"))),I)},"undefined"!=typeof scriptArgs?e=scriptArgs:void 0!==arguments&&(e=arguments),"undefined"!=typeof print&&("undefined"==typeof console&&(console={}),console.log=print,console.warn=console.error="undefined"!=typeof printErr?printErr:print)):(o||c)&&(c?w=self.location.href:document.currentScript&&(w=document.currentScript.src),w=0!==w.indexOf("blob:")?w.substr(0,w.lastIndexOf("/")+1):"",n=function(A){try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.send(null),I.responseText}catch(I){var g=eA(A);if(g)return EA(g);throw I}},c&&(r=function(A){try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.responseType="arraybuffer",I.send(null),new Uint8Array(I.response)}catch(I){var g=eA(A);if(g)return g;throw I}}));var y=C.print||void 0,s=C.printErr||void 0;for(g in Q)Q.hasOwnProperty(g)&&(C[g]=Q[g]);Q=null,C.arguments&&(e=C.arguments),C.thisProgram&&C.thisProgram,C.quit&&C.quit;var h,D,F={"f64-rem":function(A,I){return A%I},debugger:function(){}};new Array(8),C.wasmBinary&&(h=C.wasmBinary),C.noExitRuntime&&C.noExitRuntime,"object"!=typeof WebAssembly&&s("no native wasm support detected");var p=new WebAssembly.Table({initial:0,maximum:0,element:"anyfunc"}),u=!1;function H(A,I){A||z("Assertion failed: "+I)}var k,l,_,G,d,Y,M,S="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function U(A,I){return A?function(A,I,g){for(var B=I+g,C=I;A[C]&&!(C>=B);)++C;if(C-I>16&&A.subarray&&S)return S.decode(A.subarray(I,C));for(var Q="";I<C;){var E=A[I++];if(128&E){var i=63&A[I++];if(192!=(224&E)){var e=63&A[I++];if((E=224==(240&E)?(15&E)<<12|i<<6|e:(7&E)<<18|i<<12|e<<6|63&A[I++])<65536)Q+=String.fromCharCode(E);else{var o=E-65536;Q+=String.fromCharCode(55296|o>>10,56320|1023&o)}}else Q+=String.fromCharCode((31&E)<<6|i)}else Q+=String.fromCharCode(E)}return Q}(_,A,I):""}function v(A,I){return A%I>0&&(A+=I-A%I),A}function b(A){k=A,C.HEAP8=l=new Int8Array(A),C.HEAP16=G=new Int16Array(A),C.HEAP32=d=new Int32Array(A),C.HEAPU8=_=new Uint8Array(A),C.HEAPU16=new Uint16Array(A),C.HEAPU32=new Uint32Array(A),C.HEAPF32=Y=new Float32Array(A),C.HEAPF64=M=new Float64Array(A)}"undefined"!=typeof TextDecoder&&new TextDecoder("utf-16le");var J=C.TOTAL_MEMORY||16777216;function P(A){for(;A.length>0;){var I=A.shift();if("function"!=typeof I){var g=I.func;"number"==typeof g?void 0===I.arg?C.dynCall_v(g):C.dynCall_vi(g,I.arg):g(void 0===I.arg?null:I.arg)}else I()}}(D=C.wasmMemory?C.wasmMemory:new WebAssembly.Memory({initial:J/65536}))&&(k=D.buffer),J=k.byteLength,b(k),d[9312]=5280320;var R=[],N=[],m=[],L=[],x=Math.abs,K=Math.ceil,X=Math.floor,j=Math.min,T=0,q=null,V=null;function z(A){throw C.onAbort&&C.onAbort(A),y(A+=""),s(A),u=!0,"abort("+A+"). Build with -s ASSERTIONS=1 for more info."}C.preloadedImages={},C.preloadedAudios={};var W="data:application/octet-stream;base64,";function O(A){return String.prototype.startsWith?A.startsWith(W):0===A.indexOf(W)}var Z,$,AA,IA="data:application/octet-stream;base64,";function gA(){try{if(h)return new Uint8Array(h);var A=eA(IA);if(A)return A;if(r)return r(IA);throw"both async and sync fetching of the wasm failed"}catch(A){z(A)}}O(IA)||(Z=IA,IA=C.locateFile?C.locateFile(Z,w):w+Z),C.asm=function(){var A={env:cA,wasi_unstable:cA,global:{NaN:NaN,Infinity:1/0},"global.Math":Math,asm2wasm:F};function I(A,I){var g=A.exports;C.asm=g,function(A){if(T--,C.monitorRunDependencies&&C.monitorRunDependencies(T),0==T&&(null!==q&&(clearInterval(q),q=null),V)){var I=V;V=null,I()}}()}function g(A){I(A.instance)}function B(I){return(h||!o&&!c||"function"!=typeof fetch?new Promise(function(A,I){A(gA())}):fetch(IA,{credentials:"same-origin"}).then(function(A){if(!A.ok)throw"failed to load wasm binary file at '"+IA+"'";return A.arrayBuffer()}).catch(function(){return gA()})).then(function(I){return WebAssembly.instantiate(I,A)}).then(I,function(A){s("failed to asynchronously prepare wasm: "+A),z(A)})}if(T++,C.monitorRunDependencies&&C.monitorRunDependencies(T),C.instantiateWasm)try{return C.instantiateWasm(A,I)}catch(A){return s("Module.instantiateWasm callback failed with error: "+A),!1}return function(){if(h||"function"!=typeof WebAssembly.instantiateStreaming||O(IA)||"function"!=typeof fetch)return B(g);fetch(IA,{credentials:"same-origin"}).then(function(I){return WebAssembly.instantiateStreaming(I,A).then(g,function(A){s("wasm streaming compile failed: "+A),s("falling back to ArrayBuffer instantiation"),B(g)})})}(),{}};var BA=[function(){return C.getRandomValue()},function(){if(void 0===C.getRandomValue)try{var A="object"==typeof window?window:self,I=void 0!==A.crypto?A.crypto:A.msCrypto,g=function(){var A=new Uint32Array(1);return I.getRandomValues(A),A[0]>>>0};g(),C.getRandomValue=g}catch(A){try{var B=__webpack_require__(46),Q=function(){var A=B.randomBytes(4);return(A[0]<<24|A[1]<<16|A[2]<<8|A[3])>>>0};Q(),C.getRandomValue=Q}catch(A){throw"No secure random number generator found"}}}];function CA(){return l.length}var QA=!1;function EA(A){for(var I=[],g=0;g<A.length;g++){var B=A[g];B>255&&(QA&&H(!1,"Character code "+B+" ("+String.fromCharCode(B)+")  at offset "+g+" not in 0x00-0xFF."),B&=255),I.push(String.fromCharCode(B))}return I.join("")}var iA="function"==typeof atob?atob:function(A){var I,g,B,C,Q,E,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",e="",o=0;A=A.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{I=i.indexOf(A.charAt(o++))<<2|(C=i.indexOf(A.charAt(o++)))>>4,g=(15&C)<<4|(Q=i.indexOf(A.charAt(o++)))>>2,B=(3&Q)<<6|(E=i.indexOf(A.charAt(o++))),e+=String.fromCharCode(I),64!==Q&&(e+=String.fromCharCode(g)),64!==E&&(e+=String.fromCharCode(B))}while(o<A.length);return e};function eA(A){if(O(A))return function(A){if("boolean"==typeof a&&a){var I;try{I=Buffer.from(A,"base64")}catch(g){I=new Buffer(A,"base64")}return new Uint8Array(I.buffer,I.byteOffset,I.byteLength)}try{for(var g=iA(A),B=new Uint8Array(g.length),C=0;C<g.length;++C)B[C]=g.charCodeAt(C);return B}catch(A){throw new Error("Converting base64 string to bytes failed.")}}(A.slice(W.length))}var oA,cA={c:function(A,I,g,B){z("Assertion failed: "+U(A)+", at: "+[I?U(I):"unknown filename",g,B?U(B):"unknown function"])},__memory_base:1024,__table_base:0,a:function(){z()},b:function(A){return BA[A]()},g:CA,f:function(A,I,g){_.set(_.subarray(I,I+g),A)},e:function(A){var I=CA();if(A>2147418112)return!1;for(var g=Math.max(I,16777216);g<A;)g=g<=536870912?v(2*g,65536):Math.min(v((3*g+2147483648)/4,65536),2147418112);return!!function(A){try{return D.grow(A-k.byteLength+65535>>16),b(D.buffer),1}catch(A){}}(g)},d:function(A){switch(A){case 30:return 16384;case 85:return 131068;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 79:return 0;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return"object"==typeof navigator&&navigator.hardwareConcurrency||1}return C.___errno_location&&(d[C.___errno_location()>>2]=28),-1},memory:D,table:p},aA=C.asm({},cA,k);function nA(A){function I(){oA||(oA=!0,u||(P(N),P(m),C.onRuntimeInitialized&&C.onRuntimeInitialized(),function(){if(C.postRun)for("function"==typeof C.postRun&&(C.postRun=[C.postRun]);C.postRun.length;)A=C.postRun.shift(),L.unshift(A);var A;P(L)}()))}A=A||e,T>0||(function(){if(C.preRun)for("function"==typeof C.preRun&&(C.preRun=[C.preRun]);C.preRun.length;)A=C.preRun.shift(),R.unshift(A);var A;P(R)}(),T>0||(C.setStatus?(C.setStatus("Running..."),setTimeout(function(){setTimeout(function(){C.setStatus("")},1),I()},1)):I()))}if(C.asm=aA,C.___errno_location=function(){return C.asm.h.apply(null,arguments)},C._crypto_aead_chacha20poly1305_abytes=function(){return C.asm.i.apply(null,arguments)},C._crypto_aead_chacha20poly1305_decrypt=function(){return C.asm.j.apply(null,arguments)},C._crypto_aead_chacha20poly1305_decrypt_detached=function(){return C.asm.k.apply(null,arguments)},C._crypto_aead_chacha20poly1305_encrypt=function(){return C.asm.l.apply(null,arguments)},C._crypto_aead_chacha20poly1305_encrypt_detached=function(){return C.asm.m.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_abytes=function(){return C.asm.n.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_decrypt=function(){return C.asm.o.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_decrypt_detached=function(){return C.asm.p.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_encrypt=function(){return C.asm.q.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_encrypt_detached=function(){return C.asm.r.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_keybytes=function(){return C.asm.s.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_keygen=function(){return C.asm.t.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_messagebytes_max=function(){return C.asm.u.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_npubbytes=function(){return C.asm.v.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_nsecbytes=function(){return C.asm.w.apply(null,arguments)},C._crypto_aead_chacha20poly1305_keybytes=function(){return C.asm.x.apply(null,arguments)},C._crypto_aead_chacha20poly1305_keygen=function(){return C.asm.y.apply(null,arguments)},C._crypto_aead_chacha20poly1305_messagebytes_max=function(){return C.asm.z.apply(null,arguments)},C._crypto_aead_chacha20poly1305_npubbytes=function(){return C.asm.A.apply(null,arguments)},C._crypto_aead_chacha20poly1305_nsecbytes=function(){return C.asm.B.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_abytes=function(){return C.asm.C.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_decrypt=function(){return C.asm.D.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_decrypt_detached=function(){return C.asm.E.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_encrypt=function(){return C.asm.F.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_encrypt_detached=function(){return C.asm.G.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_keybytes=function(){return C.asm.H.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_keygen=function(){return C.asm.I.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_messagebytes_max=function(){return C.asm.J.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_npubbytes=function(){return C.asm.K.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_nsecbytes=function(){return C.asm.L.apply(null,arguments)},C._crypto_auth=function(){return C.asm.M.apply(null,arguments)},C._crypto_auth_bytes=function(){return C.asm.N.apply(null,arguments)},C._crypto_auth_keybytes=function(){return C.asm.O.apply(null,arguments)},C._crypto_auth_keygen=function(){return C.asm.P.apply(null,arguments)},C._crypto_auth_verify=function(){return C.asm.Q.apply(null,arguments)},C._crypto_box_beforenm=function(){return C.asm.R.apply(null,arguments)},C._crypto_box_beforenmbytes=function(){return C.asm.S.apply(null,arguments)},C._crypto_box_detached=function(){return C.asm.T.apply(null,arguments)},C._crypto_box_detached_afternm=function(){return C.asm.U.apply(null,arguments)},C._crypto_box_easy=function(){return C.asm.V.apply(null,arguments)},C._crypto_box_easy_afternm=function(){return C.asm.W.apply(null,arguments)},C._crypto_box_keypair=function(){return C.asm.X.apply(null,arguments)},C._crypto_box_macbytes=function(){return C.asm.Y.apply(null,arguments)},C._crypto_box_messagebytes_max=function(){return C.asm.Z.apply(null,arguments)},C._crypto_box_noncebytes=function(){return C.asm._.apply(null,arguments)},C._crypto_box_open_detached=function(){return C.asm.$.apply(null,arguments)},C._crypto_box_open_detached_afternm=function(){return C.asm.aa.apply(null,arguments)},C._crypto_box_open_easy=function(){return C.asm.ba.apply(null,arguments)},C._crypto_box_open_easy_afternm=function(){return C.asm.ca.apply(null,arguments)},C._crypto_box_publickeybytes=function(){return C.asm.da.apply(null,arguments)},C._crypto_box_seal=function(){return C.asm.ea.apply(null,arguments)},C._crypto_box_seal_open=function(){return C.asm.fa.apply(null,arguments)},C._crypto_box_sealbytes=function(){return C.asm.ga.apply(null,arguments)},C._crypto_box_secretkeybytes=function(){return C.asm.ha.apply(null,arguments)},C._crypto_box_seed_keypair=function(){return C.asm.ia.apply(null,arguments)},C._crypto_box_seedbytes=function(){return C.asm.ja.apply(null,arguments)},C._crypto_generichash=function(){return C.asm.ka.apply(null,arguments)},C._crypto_generichash_bytes=function(){return C.asm.la.apply(null,arguments)},C._crypto_generichash_bytes_max=function(){return C.asm.ma.apply(null,arguments)},C._crypto_generichash_bytes_min=function(){return C.asm.na.apply(null,arguments)},C._crypto_generichash_final=function(){return C.asm.oa.apply(null,arguments)},C._crypto_generichash_init=function(){return C.asm.pa.apply(null,arguments)},C._crypto_generichash_keybytes=function(){return C.asm.qa.apply(null,arguments)},C._crypto_generichash_keybytes_max=function(){return C.asm.ra.apply(null,arguments)},C._crypto_generichash_keybytes_min=function(){return C.asm.sa.apply(null,arguments)},C._crypto_generichash_keygen=function(){return C.asm.ta.apply(null,arguments)},C._crypto_generichash_statebytes=function(){return C.asm.ua.apply(null,arguments)},C._crypto_generichash_update=function(){return C.asm.va.apply(null,arguments)},C._crypto_hash=function(){return C.asm.wa.apply(null,arguments)},C._crypto_hash_bytes=function(){return C.asm.xa.apply(null,arguments)},C._crypto_kdf_bytes_max=function(){return C.asm.ya.apply(null,arguments)},C._crypto_kdf_bytes_min=function(){return C.asm.za.apply(null,arguments)},C._crypto_kdf_contextbytes=function(){return C.asm.Aa.apply(null,arguments)},C._crypto_kdf_derive_from_key=function(){return C.asm.Ba.apply(null,arguments)},C._crypto_kdf_keybytes=function(){return C.asm.Ca.apply(null,arguments)},C._crypto_kdf_keygen=function(){return C.asm.Da.apply(null,arguments)},C._crypto_kx_client_session_keys=function(){return C.asm.Ea.apply(null,arguments)},C._crypto_kx_keypair=function(){return C.asm.Fa.apply(null,arguments)},C._crypto_kx_publickeybytes=function(){return C.asm.Ga.apply(null,arguments)},C._crypto_kx_secretkeybytes=function(){return C.asm.Ha.apply(null,arguments)},C._crypto_kx_seed_keypair=function(){return C.asm.Ia.apply(null,arguments)},C._crypto_kx_seedbytes=function(){return C.asm.Ja.apply(null,arguments)},C._crypto_kx_server_session_keys=function(){return C.asm.Ka.apply(null,arguments)},C._crypto_kx_sessionkeybytes=function(){return C.asm.La.apply(null,arguments)},C._crypto_pwhash=function(){return C.asm.Ma.apply(null,arguments)},C._crypto_pwhash_alg_argon2i13=function(){return C.asm.Na.apply(null,arguments)},C._crypto_pwhash_alg_argon2id13=function(){return C.asm.Oa.apply(null,arguments)},C._crypto_pwhash_alg_default=function(){return C.asm.Pa.apply(null,arguments)},C._crypto_pwhash_bytes_max=function(){return C.asm.Qa.apply(null,arguments)},C._crypto_pwhash_bytes_min=function(){return C.asm.Ra.apply(null,arguments)},C._crypto_pwhash_memlimit_interactive=function(){return C.asm.Sa.apply(null,arguments)},C._crypto_pwhash_memlimit_max=function(){return C.asm.Ta.apply(null,arguments)},C._crypto_pwhash_memlimit_min=function(){return C.asm.Ua.apply(null,arguments)},C._crypto_pwhash_memlimit_moderate=function(){return C.asm.Va.apply(null,arguments)},C._crypto_pwhash_memlimit_sensitive=function(){return C.asm.Wa.apply(null,arguments)},C._crypto_pwhash_opslimit_interactive=function(){return C.asm.Xa.apply(null,arguments)},C._crypto_pwhash_opslimit_max=function(){return C.asm.Ya.apply(null,arguments)},C._crypto_pwhash_opslimit_min=function(){return C.asm.Za.apply(null,arguments)},C._crypto_pwhash_opslimit_moderate=function(){return C.asm._a.apply(null,arguments)},C._crypto_pwhash_opslimit_sensitive=function(){return C.asm.$a.apply(null,arguments)},C._crypto_pwhash_passwd_max=function(){return C.asm.ab.apply(null,arguments)},C._crypto_pwhash_passwd_min=function(){return C.asm.bb.apply(null,arguments)},C._crypto_pwhash_saltbytes=function(){return C.asm.cb.apply(null,arguments)},C._crypto_pwhash_str=function(){return C.asm.db.apply(null,arguments)},C._crypto_pwhash_str_alg=function(){return C.asm.eb.apply(null,arguments)},C._crypto_pwhash_str_needs_rehash=function(){return C.asm.fb.apply(null,arguments)},C._crypto_pwhash_str_verify=function(){return C.asm.gb.apply(null,arguments)},C._crypto_pwhash_strbytes=function(){return C.asm.hb.apply(null,arguments)},C._crypto_pwhash_strprefix=function(){return C.asm.ib.apply(null,arguments)},C._crypto_scalarmult=function(){return C.asm.jb.apply(null,arguments)},C._crypto_scalarmult_base=function(){return C.asm.kb.apply(null,arguments)},C._crypto_scalarmult_bytes=function(){return C.asm.lb.apply(null,arguments)},C._crypto_scalarmult_scalarbytes=function(){return C.asm.mb.apply(null,arguments)},C._crypto_secretbox_detached=function(){return C.asm.nb.apply(null,arguments)},C._crypto_secretbox_easy=function(){return C.asm.ob.apply(null,arguments)},C._crypto_secretbox_keybytes=function(){return C.asm.pb.apply(null,arguments)},C._crypto_secretbox_keygen=function(){return C.asm.qb.apply(null,arguments)},C._crypto_secretbox_macbytes=function(){return C.asm.rb.apply(null,arguments)},C._crypto_secretbox_messagebytes_max=function(){return C.asm.sb.apply(null,arguments)},C._crypto_secretbox_noncebytes=function(){return C.asm.tb.apply(null,arguments)},C._crypto_secretbox_open_detached=function(){return C.asm.ub.apply(null,arguments)},C._crypto_secretbox_open_easy=function(){return C.asm.vb.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_abytes=function(){return C.asm.wb.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_headerbytes=function(){return C.asm.xb.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_init_pull=function(){return C.asm.yb.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_init_push=function(){return C.asm.zb.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_keybytes=function(){return C.asm.Ab.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_keygen=function(){return C.asm.Bb.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_messagebytes_max=function(){return C.asm.Cb.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_pull=function(){return C.asm.Db.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_push=function(){return C.asm.Eb.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_rekey=function(){return C.asm.Fb.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_statebytes=function(){return C.asm.Gb.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_tag_final=function(){return C.asm.Hb.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_tag_message=function(){return C.asm.Ib.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_tag_push=function(){return C.asm.Jb.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_tag_rekey=function(){return C.asm.Kb.apply(null,arguments)},C._crypto_shorthash=function(){return C.asm.Lb.apply(null,arguments)},C._crypto_shorthash_bytes=function(){return C.asm.Mb.apply(null,arguments)},C._crypto_shorthash_keybytes=function(){return C.asm.Nb.apply(null,arguments)},C._crypto_shorthash_keygen=function(){return C.asm.Ob.apply(null,arguments)},C._crypto_sign=function(){return C.asm.Pb.apply(null,arguments)},C._crypto_sign_bytes=function(){return C.asm.Qb.apply(null,arguments)},C._crypto_sign_detached=function(){return C.asm.Rb.apply(null,arguments)},C._crypto_sign_ed25519_pk_to_curve25519=function(){return C.asm.Sb.apply(null,arguments)},C._crypto_sign_ed25519_sk_to_curve25519=function(){return C.asm.Tb.apply(null,arguments)},C._crypto_sign_final_create=function(){return C.asm.Ub.apply(null,arguments)},C._crypto_sign_final_verify=function(){return C.asm.Vb.apply(null,arguments)},C._crypto_sign_init=function(){return C.asm.Wb.apply(null,arguments)},C._crypto_sign_keypair=function(){return C.asm.Xb.apply(null,arguments)},C._crypto_sign_messagebytes_max=function(){return C.asm.Yb.apply(null,arguments)},C._crypto_sign_open=function(){return C.asm.Zb.apply(null,arguments)},C._crypto_sign_publickeybytes=function(){return C.asm._b.apply(null,arguments)},C._crypto_sign_secretkeybytes=function(){return C.asm.$b.apply(null,arguments)},C._crypto_sign_seed_keypair=function(){return C.asm.ac.apply(null,arguments)},C._crypto_sign_seedbytes=function(){return C.asm.bc.apply(null,arguments)},C._crypto_sign_statebytes=function(){return C.asm.cc.apply(null,arguments)},C._crypto_sign_update=function(){return C.asm.dc.apply(null,arguments)},C._crypto_sign_verify_detached=function(){return C.asm.ec.apply(null,arguments)},C._free=function(){return C.asm.fc.apply(null,arguments)},C._malloc=function(){return C.asm.gc.apply(null,arguments)},C._randombytes=function(){return C.asm.hc.apply(null,arguments)},C._randombytes_buf=function(){return C.asm.ic.apply(null,arguments)},C._randombytes_buf_deterministic=function(){return C.asm.jc.apply(null,arguments)},C._randombytes_close=function(){return C.asm.kc.apply(null,arguments)},C._randombytes_random=function(){return C.asm.lc.apply(null,arguments)},C._randombytes_seedbytes=function(){return C.asm.mc.apply(null,arguments)},C._randombytes_stir=function(){return C.asm.nc.apply(null,arguments)},C._randombytes_uniform=function(){return C.asm.oc.apply(null,arguments)},C._sodium_base642bin=function(){return C.asm.pc.apply(null,arguments)},C._sodium_base64_encoded_len=function(){return C.asm.qc.apply(null,arguments)},C._sodium_bin2base64=function(){return C.asm.rc.apply(null,arguments)},C._sodium_bin2hex=function(){return C.asm.sc.apply(null,arguments)},C._sodium_hex2bin=function(){return C.asm.tc.apply(null,arguments)},C._sodium_init=function(){return C.asm.uc.apply(null,arguments)},C._sodium_library_minimal=function(){return C.asm.vc.apply(null,arguments)},C._sodium_library_version_major=function(){return C.asm.wc.apply(null,arguments)},C._sodium_library_version_minor=function(){return C.asm.xc.apply(null,arguments)},C._sodium_pad=function(){return C.asm.yc.apply(null,arguments)},C._sodium_unpad=function(){return C.asm.zc.apply(null,arguments)},C._sodium_version_string=function(){return C.asm.Ac.apply(null,arguments)},C.asm=aA,C.setValue=function(A,I,g,B){switch("*"===(g=g||"i8").charAt(g.length-1)&&(g="i32"),g){case"i1":case"i8":l[A>>0]=I;break;case"i16":G[A>>1]=I;break;case"i32":d[A>>2]=I;break;case"i64":AA=[I>>>0,($=I,+x($)>=1?$>0?(0|j(+X($/4294967296),4294967295))>>>0:~~+K(($-+(~~$>>>0))/4294967296)>>>0:0)],d[A>>2]=AA[0],d[A+4>>2]=AA[1];break;case"float":Y[A>>2]=I;break;case"double":M[A>>3]=I;break;default:z("invalid type for setValue: "+g)}},C.getValue=function(A,I,g){switch("*"===(I=I||"i8").charAt(I.length-1)&&(I="i32"),I){case"i1":case"i8":return l[A>>0];case"i16":return G[A>>1];case"i32":case"i64":return d[A>>2];case"float":return Y[A>>2];case"double":return M[A>>3];default:z("invalid type for getValue: "+I)}return null},C.UTF8ToString=U,V=function A(){oA||nA(),oA||(V=A)},C.run=nA,C.preInit)for("function"==typeof C.preInit&&(C.preInit=[C.preInit]);C.preInit.length>0;)C.preInit.pop()();nA()}).catch(function(){B.useBackupModule()}),"object"==typeof process&&"function"==typeof process.removeAllListeners&&(process.removeAllListeners("uncaughtException"),process.removeAllListeners("unhandledRejection")),I} true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (I),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):undefined}(this);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(7), __webpack_require__(6), "/", __webpack_require__(3).Buffer))

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),
/* 91 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 92 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = __webpack_require__(28).Buffer;
var util = __webpack_require__(94);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),
/* 94 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(96);
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(7)))

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(7), __webpack_require__(6)))

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(7)))

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(51);

/*<replacement>*/
var util = Object.create(__webpack_require__(14));
util.inherits = __webpack_require__(0);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(29);


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(10);


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(27).Transform


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(27).PassThrough


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = __webpack_require__(0)
var Hash = __webpack_require__(12)
var Buffer = __webpack_require__(1).Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = __webpack_require__(0)
var Hash = __webpack_require__(12)
var Buffer = __webpack_require__(1).Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(0)
var Sha256 = __webpack_require__(52)
var Hash = __webpack_require__(12)
var Buffer = __webpack_require__(1).Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(0)
var SHA512 = __webpack_require__(53)
var Hash = __webpack_require__(12)
var Buffer = __webpack_require__(1).Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(0)
var Buffer = __webpack_require__(1).Buffer

var Base = __webpack_require__(9)

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(56)


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {var checkParameters = __webpack_require__(58)
var defaultEncoding = __webpack_require__(59)
var sync = __webpack_require__(60)
var Buffer = __webpack_require__(1).Buffer

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  'sha': 'SHA-1',
  'sha-1': 'SHA-1',
  'sha1': 'SHA-1',
  'sha256': 'SHA-256',
  'sha-256': 'SHA-256',
  'sha384': 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  'sha512': 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}

function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out)
    })
  }, function (e) {
    process.nextTick(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
  }

  checkParameters(password, salt, iterations, keylen)
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(7), __webpack_require__(6)))

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

var DES = __webpack_require__(111)
var aes = __webpack_require__(34)
var aesModes = __webpack_require__(35)
var desModes = __webpack_require__(124)
var ebtk = __webpack_require__(21)

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

var CipherBase = __webpack_require__(9)
var des = __webpack_require__(112)
var inherits = __webpack_require__(0)
var Buffer = __webpack_require__(1).Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.utils = __webpack_require__(61);
exports.Cipher = __webpack_require__(33);
exports.DES = __webpack_require__(62);
exports.CBC = __webpack_require__(113);
exports.EDE = __webpack_require__(114);


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(4);
var inherits = __webpack_require__(0);

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(4);
var inherits = __webpack_require__(0);

var Cipher = __webpack_require__(33);
var DES = __webpack_require__(62);

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

var MODES = __webpack_require__(35)
var AuthCipher = __webpack_require__(66)
var Buffer = __webpack_require__(1).Buffer
var StreamCipher = __webpack_require__(67)
var Transform = __webpack_require__(9)
var aes = __webpack_require__(20)
var ebtk = __webpack_require__(21)
var inherits = __webpack_require__(0)

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher


/***/ }),
/* 116 */
/***/ (function(module, exports) {

exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__(15)

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(1).Buffer
var xor = __webpack_require__(15)

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(1).Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(1).Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(15)

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3).Buffer))

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(1).Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

var AuthCipher = __webpack_require__(66)
var Buffer = __webpack_require__(1).Buffer
var MODES = __webpack_require__(35)
var StreamCipher = __webpack_require__(67)
var Transform = __webpack_require__(9)
var aes = __webpack_require__(20)
var ebtk = __webpack_require__(21)
var inherits = __webpack_require__(0)

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv


/***/ }),
/* 124 */
/***/ (function(module, exports) {

exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var generatePrime = __webpack_require__(68)
var primes = __webpack_require__(129)

var DH = __webpack_require__(130)

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3).Buffer))

/***/ }),
/* 126 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 127 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 128 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 129 */
/***/ (function(module) {

module.exports = JSON.parse("{\"modp1\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff\"},\"modp2\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff\"},\"modp5\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff\"},\"modp14\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\"},\"modp15\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff\"},\"modp16\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff\"},\"modp17\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff\"},\"modp18\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff\"}}");

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var BN = __webpack_require__(2);
var MillerRabin = __webpack_require__(69);
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = __webpack_require__(68);
var randomBytes = __webpack_require__(11);
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3).Buffer))

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(13)
var stream = __webpack_require__(25)
var inherits = __webpack_require__(0)
var sign = __webpack_require__(132)
var verify = __webpack_require__(164)

var algorithms = __webpack_require__(56)
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = new Buffer(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3).Buffer))

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = __webpack_require__(54)
var crt = __webpack_require__(37)
var EC = __webpack_require__(38).ec
var BN = __webpack_require__(2)
var parseKeys = __webpack_require__(23)
var curves = __webpack_require__(79)

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [ 0 ].concat(r)
  if (s[0] & 0x80) s = [ 0 ].concat(s)

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([ zeros, x ])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([ zeros, out ])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = new Buffer(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([ t, kv.v ])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3).Buffer))

/***/ }),
/* 133 */
/***/ (function(module) {

module.exports = JSON.parse("{\"_args\":[[\"elliptic@6.5.2\",\"/Users/wilson/Development/Projects/Pocket/AAT/JS/aat-sdk\"]],\"_from\":\"elliptic@6.5.2\",\"_id\":\"elliptic@6.5.2\",\"_inBundle\":false,\"_integrity\":\"sha512-f4x70okzZbIQl/NSRLkI/+tteV/9WqL98zx+SQ69KbXxmVrmjwsNUPn/gYJJ0sHvEak24cZgHIPegRePAtA/xw==\",\"_location\":\"/elliptic\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"version\",\"registry\":true,\"raw\":\"elliptic@6.5.2\",\"name\":\"elliptic\",\"escapedName\":\"elliptic\",\"rawSpec\":\"6.5.2\",\"saveSpec\":null,\"fetchSpec\":\"6.5.2\"},\"_requiredBy\":[\"/browserify-sign\",\"/create-ecdh\"],\"_resolved\":\"https://registry.npmjs.org/elliptic/-/elliptic-6.5.2.tgz\",\"_spec\":\"6.5.2\",\"_where\":\"/Users/wilson/Development/Projects/Pocket/AAT/JS/aat-sdk\",\"author\":{\"name\":\"Fedor Indutny\",\"email\":\"fedor@indutny.com\"},\"bugs\":{\"url\":\"https://github.com/indutny/elliptic/issues\"},\"dependencies\":{\"bn.js\":\"^4.4.0\",\"brorand\":\"^1.0.1\",\"hash.js\":\"^1.0.0\",\"hmac-drbg\":\"^1.0.0\",\"inherits\":\"^2.0.1\",\"minimalistic-assert\":\"^1.0.0\",\"minimalistic-crypto-utils\":\"^1.0.0\"},\"description\":\"EC cryptography\",\"devDependencies\":{\"brfs\":\"^1.4.3\",\"coveralls\":\"^3.0.8\",\"grunt\":\"^1.0.4\",\"grunt-browserify\":\"^5.0.0\",\"grunt-cli\":\"^1.2.0\",\"grunt-contrib-connect\":\"^1.0.0\",\"grunt-contrib-copy\":\"^1.0.0\",\"grunt-contrib-uglify\":\"^1.0.1\",\"grunt-mocha-istanbul\":\"^3.0.1\",\"grunt-saucelabs\":\"^9.0.1\",\"istanbul\":\"^0.4.2\",\"jscs\":\"^3.0.7\",\"jshint\":\"^2.10.3\",\"mocha\":\"^6.2.2\"},\"files\":[\"lib\"],\"homepage\":\"https://github.com/indutny/elliptic\",\"keywords\":[\"EC\",\"Elliptic\",\"curve\",\"Cryptography\"],\"license\":\"MIT\",\"main\":\"lib/elliptic.js\",\"name\":\"elliptic\",\"repository\":{\"type\":\"git\",\"url\":\"git+ssh://git@github.com/indutny/elliptic.git\"},\"scripts\":{\"jscs\":\"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",\"jshint\":\"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",\"lint\":\"npm run jscs && npm run jshint\",\"test\":\"npm run lint && npm run unit\",\"unit\":\"istanbul test _mocha --reporter=spec test/index.js\",\"version\":\"grunt dist && git add dist/\"},\"version\":\"6.5.2\"}");

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(5);
var BN = __webpack_require__(2);
var inherits = __webpack_require__(0);
var Base = __webpack_require__(22);

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(2);
var inherits = __webpack_require__(0);
var Base = __webpack_require__(22);

var utils = __webpack_require__(5);

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(5);
var BN = __webpack_require__(2);
var inherits = __webpack_require__(0);
var Base = __webpack_require__(22);

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.sha1 = __webpack_require__(138);
exports.sha224 = __webpack_require__(139);
exports.sha256 = __webpack_require__(73);
exports.sha384 = __webpack_require__(140);
exports.sha512 = __webpack_require__(74);


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(8);
var common = __webpack_require__(16);
var shaCommon = __webpack_require__(72);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(8);
var SHA256 = __webpack_require__(73);

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};



/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(8);

var SHA512 = __webpack_require__(74);

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(8);
var common = __webpack_require__(16);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(8);
var assert = __webpack_require__(4);

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};


/***/ }),
/* 143 */
/***/ (function(module, exports) {

module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(2);
var HmacDRBG = __webpack_require__(145);
var utils = __webpack_require__(5);
var curves = __webpack_require__(39);
var rand = __webpack_require__(36);
var assert = utils.assert;

var KeyPair = __webpack_require__(146);
var Signature = __webpack_require__(147);

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(40);
var utils = __webpack_require__(70);
var assert = __webpack_require__(4);

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(2);
var utils = __webpack_require__(5);
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(2);

var utils = __webpack_require__(5);
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(40);
var curves = __webpack_require__(39);
var utils = __webpack_require__(5);
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = __webpack_require__(149);
var Signature = __webpack_require__(150);

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(5);
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(2);
var utils = __webpack_require__(5);
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.


var asn1 = __webpack_require__(17)

exports.certificate = __webpack_require__(161)

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = __webpack_require__(17);
var inherits = __webpack_require__(0);

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = __webpack_require__(153).runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};


/***/ }),
/* 153 */
/***/ (function(module, exports) {

var indexOf = function (xs, item) {
    if (xs.indexOf) return xs.indexOf(item);
    else for (var i = 0; i < xs.length; i++) {
        if (xs[i] === item) return i;
    }
    return -1;
};
var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    if (context) {
        forEach(Object_keys(ctx), function (key) {
            context[key] = ctx[key];
        });
    }

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.isContext = function (context) {
    return context instanceof Context;
};

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(0);

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

var Reporter = __webpack_require__(18).Reporter;
var EncoderBuffer = __webpack_require__(18).EncoderBuffer;
var DecoderBuffer = __webpack_require__(18).DecoderBuffer;
var assert = __webpack_require__(4);

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

var constants = __webpack_require__(76);

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

var decoders = exports;

decoders.der = __webpack_require__(77);
decoders.pem = __webpack_require__(158);


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(0);
var Buffer = __webpack_require__(3).Buffer;

var DERDecoder = __webpack_require__(77);

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

var encoders = exports;

encoders.der = __webpack_require__(78);
encoders.pem = __webpack_require__(160);


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(0);

var DEREncoder = __webpack_require__(78);

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen



var asn = __webpack_require__(17)

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate


/***/ }),
/* 162 */
/***/ (function(module) {

module.exports = JSON.parse("{\"2.16.840.1.101.3.4.1.1\":\"aes-128-ecb\",\"2.16.840.1.101.3.4.1.2\":\"aes-128-cbc\",\"2.16.840.1.101.3.4.1.3\":\"aes-128-ofb\",\"2.16.840.1.101.3.4.1.4\":\"aes-128-cfb\",\"2.16.840.1.101.3.4.1.21\":\"aes-192-ecb\",\"2.16.840.1.101.3.4.1.22\":\"aes-192-cbc\",\"2.16.840.1.101.3.4.1.23\":\"aes-192-ofb\",\"2.16.840.1.101.3.4.1.24\":\"aes-192-cfb\",\"2.16.840.1.101.3.4.1.41\":\"aes-256-ecb\",\"2.16.840.1.101.3.4.1.42\":\"aes-256-cbc\",\"2.16.840.1.101.3.4.1.43\":\"aes-256-ofb\",\"2.16.840.1.101.3.4.1.44\":\"aes-256-cfb\"}");

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m
var evp = __webpack_require__(21)
var ciphers = __webpack_require__(34)
var Buffer = __webpack_require__(1).Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var BN = __webpack_require__(2)
var EC = __webpack_require__(38).ec
var parseKeys = __webpack_require__(23)
var curves = __webpack_require__(79)

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = new Buffer(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3).Buffer))

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var elliptic = __webpack_require__(38)
var BN = __webpack_require__(2)

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3).Buffer))

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

exports.publicEncrypt = __webpack_require__(167)
exports.privateDecrypt = __webpack_require__(168)

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

var parseKeys = __webpack_require__(23)
var randomBytes = __webpack_require__(11)
var createHash = __webpack_require__(13)
var mgf = __webpack_require__(80)
var xor = __webpack_require__(81)
var BN = __webpack_require__(2)
var withPublic = __webpack_require__(82)
var crt = __webpack_require__(37)
var Buffer = __webpack_require__(1).Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

var parseKeys = __webpack_require__(23)
var mgf = __webpack_require__(80)
var xor = __webpack_require__(81)
var BN = __webpack_require__(2)
var crt = __webpack_require__(37)
var createHash = __webpack_require__(13)
var withPublic = __webpack_require__(82)
var Buffer = __webpack_require__(1).Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = __webpack_require__(1)
var randombytes = __webpack_require__(11)
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(7), __webpack_require__(6)))

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrTGliL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvbm9kZS1saWJzLWJyb3dzZXIvbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL21pbmltYWxpc3RpYy1hc3NlcnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3V0aWxzLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvY2lwaGVyLWJhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvcmFuZG9tYnl0ZXMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9oYXNoLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2NvcmUtdXRpbC1pcy9saWIvdXRpbC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci14b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2Jhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9wcm9jZXNzLW5leHRpY2stYXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2Flcy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2V2cF9ieXRlc3Rva2V5L2luZGV4LmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL2Jhc2UuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2luZGV4LmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvbWQ1LmpzL2luZGV4LmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9ub2RlLWxpYnMtYnJvd3Nlci9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS1icm93c2VyLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV93cml0YWJsZS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL3N0cmluZ19kZWNvZGVyL2xpYi9zdHJpbmdfZGVjb2Rlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL3JpcGVtZDE2MC9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL2NpcGhlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2Jyb3JhbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXJzYS9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZXMuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9zcmMvdXRpbHMvZW51bXMudHMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL3NyYy91dGlscy9oZWxwZXIudHMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvZnMgKGlnbm9yZWQpIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvcGF0aC1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9oYXNoLWJhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcmVhZGFibGUuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMjU2LmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTUxMi5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1obWFjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9tZDUuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9wYmtkZjIvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL3Bia2RmMi9saWIvcHJlY29uZGl0aW9uLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9kZWZhdWx0LWVuY29kaW5nLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9zeW5jLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy91dGlscy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL2Rlcy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2N0ci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2luY3IzMi5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2F1dGhDaXBoZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9zdHJlYW1DaXBoZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9kaWZmaWUtaGVsbG1hbi9saWIvZ2VuZXJhdGVQcmltZS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL21pbGxlci1yYWJpbi9saWIvbXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9taW5pbWFsaXN0aWMtY3J5cHRvLXV0aWxzL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzI1Ni5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzUxMi5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9idWZmZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2NvbnN0YW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZGVjb2RlcnMvZGVyLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9kZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9tZ2YuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC94b3IuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC93aXRoUHVibGljLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL3NyYy91dGlscy9pbmRleC50cyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vc3JjL3BvY2tldC1hYXQudHMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9qcy1zaGEzL3NyYy9zaGEzLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9saWJzb2RpdW0td3JhcHBlcnMvZGlzdC9tb2R1bGVzL2xpYnNvZGl1bS13cmFwcGVycy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2xpYnNvZGl1bS9kaXN0L21vZHVsZXMvbGlic29kaXVtLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliL3V0aWwgKGlnbm9yZWQpIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi91dGlsIChpZ25vcmVkKT8yYWI1Iiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvbm9kZS1saWJzLWJyb3dzZXIvbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvdXRpbC1kZXByZWNhdGUvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS1icm93c2VyLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2R1cGxleC1icm93c2VyLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEyMjQuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMzg0LmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhtYWMvbGVnYWN5LmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2FsZ29zLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9hc3luYy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWRlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMvY2JjLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMvZWRlLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZW5jcnlwdGVyLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvZWNiLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2JjLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiOC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjEuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9vZmIuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9naGFzaC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2RlY3J5cHRlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL21vZGVzLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliL2J1ZmZlciAoaWdub3JlZCkiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi9jcnlwdG8gKGlnbm9yZWQpIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vbGliL2RoLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vYnJvd3Nlci9zaWduLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL3Nob3J0LmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL21vbnQuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvZWR3YXJkcy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzIyNC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzM4NC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvcmlwZW1kLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9obWFjLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL3ByZWNvbXB1dGVkL3NlY3AyNTZrMS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2htYWMtZHJiZy9saWIvaG1hYy1kcmJnLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL2tleS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9zaWduYXR1cmUuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWRkc2EvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWRkc2Eva2V5LmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VkZHNhL3NpZ25hdHVyZS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvYXNuMS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYXBpLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvdm0tYnJvd3NlcmlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9yZXBvcnRlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9ub2RlLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9jb25zdGFudHMvZGVyLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9kZWNvZGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZGVjb2RlcnMvcGVtLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvcGVtLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9jZXJ0aWZpY2F0ZS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvZml4UHJvYy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9icm93c2VyL3ZlcmlmeS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1lY2RoL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFja0xpYi8uL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9icm93c2VyLmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvcHVibGljRW5jcnlwdC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrTGliLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3ByaXZhdGVEZWNyeXB0LmpzIiwid2VicGFjazovL3dlYnBhY2tMaWIvLi9ub2RlX21vZHVsZXMvcmFuZG9tZmlsbC9icm93c2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O1FBQUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7OztRQUdBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwwQ0FBMEMsZ0NBQWdDO1FBQzFFO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0Esd0RBQXdELGtCQUFrQjtRQUMxRTtRQUNBLGlEQUFpRCxjQUFjO1FBQy9EOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSx5Q0FBeUMsaUNBQWlDO1FBQzFFLGdIQUFnSCxtQkFBbUIsRUFBRTtRQUNySTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDJCQUEyQiwwQkFBMEIsRUFBRTtRQUN2RCxpQ0FBaUMsZUFBZTtRQUNoRDtRQUNBO1FBQ0E7O1FBRUE7UUFDQSxzREFBc0QsK0RBQStEOztRQUVySDtRQUNBOzs7UUFHQTtRQUNBOzs7Ozs7O0FDbEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUMxQkE7QUFDQSxhQUFhLG1CQUFPLENBQUMsQ0FBUTtBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQy9EQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLG1CQUFPLENBQUMsR0FBUTtBQUM3QixHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsaUJBQWlCO0FBQ3BDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFFBQVE7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHdCQUF3QixtQkFBbUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixTQUFTO0FBQ2hDOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlCQUFpQjtBQUNwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxZQUFZO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFNBQVM7QUFDaEM7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQ0FBc0Msc0JBQXNCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QixTQUFTO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsaUJBQWlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsaUJBQWlCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsNEJBQTRCO0FBQzdDO0FBQ0E7O0FBRUEsaUJBQWlCLGFBQWE7QUFDOUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMLGlCQUFpQixhQUFhO0FBQzlCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxZQUFZLGVBQWU7QUFDM0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEscUJBQXFCLGdCQUFnQjtBQUNyQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsaUJBQWlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixnQkFBZ0I7QUFDbkM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEsbUJBQW1CLGNBQWM7QUFDakM7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CLGNBQWM7QUFDakM7QUFDQTs7QUFFQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLGlCQUFpQjtBQUNwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLGNBQWM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLDZCQUE2QjtBQUN2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSw2QkFBNkI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxXQUFXO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLG9CQUFvQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsV0FBVztBQUMvRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLE9BQU87QUFDMUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLE9BQU87QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtQkFBbUIsT0FBTztBQUMxQjs7QUFFQTtBQUNBOztBQUVBLHFCQUFxQixPQUFPO0FBQzVCO0FBQ0E7O0FBRUEsdUJBQXVCLE9BQU87QUFDOUI7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixHQUFHO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG1CQUFtQixXQUFXO0FBQzlCOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixXQUFXO0FBQzlCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1Qjs7QUFF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TDtBQUNBLHFCQUFxQixzQ0FBc0M7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHlCQUF5QjtBQUNuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsY0FBYztBQUNuQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCLFFBQVE7QUFDL0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNB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O0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUNBQWlDLFFBQVE7QUFDekM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLFlBQVk7QUFDL0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGdCQUFnQixrQkFBa0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLGdCQUFnQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixnQkFBZ0I7QUFDbkM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixvQkFBb0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixnQkFBZ0I7QUFDbkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIsUUFBUTtBQUNwQztBQUNBLDZCQUE2QixRQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUUsTUFBNkI7Ozs7Ozs7OztBQ2wyR2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVZOztBQUVaLGFBQWEsbUJBQU8sQ0FBQyxFQUFXO0FBQ2hDLGNBQWMsbUJBQU8sQ0FBQyxFQUFTO0FBQy9CLGNBQWMsbUJBQU8sQ0FBQyxFQUFTOztBQUUvQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1EQUFtRDtBQUN4RTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFVBQVU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFlBQVk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSx1Q0FBdUMsU0FBUztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsaUJBQWlCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxFQUFFO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixlQUFlO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0EscUJBQXFCLGVBQWU7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFlBQVk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsU0FBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUIsU0FBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxtQkFBbUIsY0FBYztBQUNqQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdURBQXVELE9BQU87QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVEQUF1RCxPQUFPO0FBQzlEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQixRQUFRO0FBQzdCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxlQUFlLFNBQVM7QUFDeEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpQkFBaUI7QUFDaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsWUFBWTtBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLGdCQUFnQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixnQkFBZ0I7QUFDakM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLFlBQVk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7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QW1CLHdCQUF3QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QixRQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLFFBQVE7QUFDM0I7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsV0FBVztBQUM1QixtQkFBbUIsVUFBVTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7Ozs7Ozs7QUN2WEEsV0FBVyxtQkFBTyxDQUFDLEdBQVE7QUFDM0IsWUFBWSxtQkFBTyxDQUFDLEdBQWM7QUFDbEMsY0FBYyxtQkFBTyxDQUFDLEdBQVc7QUFDakMsY0FBYyxtQkFBTyxDQUFDLEVBQWdCO0FBQ3RDLGFBQWEsbUJBQU8sQ0FBQyxFQUFRO0FBQzdCLGFBQWEsbUJBQU8sQ0FBQyxDQUFhO0FBQ2xDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDMUdZO0FBQ1osZUFBZSxtQkFBTyxDQUFDLENBQVU7QUFDakMsZUFBZSxtQkFBTyxDQUFDLEVBQVc7QUFDbEMsYUFBYSxtQkFBTyxDQUFDLENBQWE7O0FBRWxDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsUUFBUTs7QUFFekI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQ2pKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLFNBQVMsbUJBQU8sQ0FBQyxFQUFRO0FBQ3pCLGVBQWUsbUJBQU8sQ0FBQyxDQUFVOztBQUVqQztBQUNBLGtCQUFrQixtQkFBTyxDQUFDLEVBQTZCO0FBQ3ZELGtCQUFrQixtQkFBTyxDQUFDLEVBQTZCO0FBQ3ZELGdCQUFnQixtQkFBTyxDQUFDLEdBQTJCO0FBQ25ELG1CQUFtQixtQkFBTyxDQUFDLEdBQThCO0FBQ3pELHFCQUFxQixtQkFBTyxDQUFDLEdBQWdDOztBQUU3RDtBQUNBOzs7O0FBSUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUM5SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsc0JBQXNCO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUEsaUNBQWlDLFFBQVE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpQkFBaUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxzQ0FBc0MsUUFBUTtBQUM5QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FB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QTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsRUFBa0I7O0FBRS9DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUM7O0FBRWpDOztBQUVBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLG9EQUFvRDtBQUNwRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFOzs7Ozs7OztBQzlxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYjs7QUFFQSxhQUFhLG1CQUFPLENBQUMsQ0FBYTtBQUNsQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHNDQUFzQyxzQ0FBc0M7QUFDekc7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0NBQXNDOztBQUV0QztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdEO0FBQ3hEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLDRDQUE0Qzs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9COztBQUVwQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNB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QUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLFFBQVE7QUFDekIsUUFBUSxRQUFROztBQUVoQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUN0SUEsZUFBZSxtQkFBTyxDQUFDLENBQVU7QUFDakMsV0FBVyxtQkFBTyxDQUFDLEVBQVE7QUFDM0IsYUFBYSxtQkFBTyxDQUFDLENBQWE7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLFFBQVEsU0FBUztBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOzs7Ozs7OztBQ25RWTtBQUNaLGVBQWUsbUJBQU8sQ0FBQyxDQUFVO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQyxHQUFVO0FBQy9CLFdBQVcsbUJBQU8sQ0FBQyxDQUFhO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQyxDQUFhO0FBQ2xDLFVBQVUsbUJBQU8sQ0FBQyxFQUFpQjtBQUNuQyxnQkFBZ0IsbUJBQU8sQ0FBQyxFQUFXOztBQUVuQyxVQUFVLG1CQUFPLENBQUMsRUFBUTs7QUFFMUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpQkFBaUIsZUFBZTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUM3REEsVUFBVSxtQkFBTyxDQUFDLEVBQVE7O0FBRTFCO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7OztBQ0pBLGlCQUFpQixtQkFBTyxDQUFDLEdBQWE7QUFDdEMscUJBQXFCLG1CQUFPLENBQUMsRUFBWTs7Ozs7OztBQ0R6Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBOzs7Ozs7OztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDVEEsVUFBVSxtQkFBTyxDQUFDLEVBQWlCO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLEVBQVc7QUFDbkMsVUFBVSxtQkFBTyxDQUFDLEVBQVE7O0FBRTFCLHNCQUFzQixtQkFBTyxDQUFDLEVBQWdCO0FBQzlDLHNCQUFzQixtQkFBTyxDQUFDLEVBQW9CO0FBQ2xELGFBQWEsbUJBQU8sQ0FBQyxDQUFhO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLGVBQWU7QUFDaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsUUFBUTtBQUN6Qjs7QUFFQTtBQUNBOztBQUVBLG1CQUFtQixnQkFBZ0I7QUFDbkM7QUFDQSxxQkFBcUIsVUFBVTtBQUMvQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7Ozs7Ozs7QUN2R2E7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsUUFBUTtBQUN6QixtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsUUFBUTtBQUN6QixtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixPQUFPO0FBQ3hCLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekIsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QixtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIscUJBQXFCO0FBQ3hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLFNBQVM7QUFDM0I7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFFBQVE7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQix5QkFBeUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQixVQUFVO0FBQzNCO0FBQ0E7QUFDQTs7Ozs7Ozs7QUMvUGE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLENBQXFCO0FBQzFDLGVBQWUsbUJBQU8sQ0FBQyxDQUFVOztBQUVqQyxZQUFZLG1CQUFPLENBQUMsRUFBUztBQUM3QixhQUFhLG1CQUFPLENBQUMsRUFBVTs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHVCQUF1QjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsbUJBQW1CO0FBQ3RDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1DQUFtQyxtQkFBbUI7QUFDdEQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsdUJBQXVCO0FBQ3hDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUNBQXFDLFFBQVE7QUFDN0M7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7OztBQzdJQSxVQUFVLG1CQUFPLENBQUMsRUFBWTtBQUM5QixhQUFhLG1CQUFPLENBQUMsQ0FBYTtBQUNsQyxhQUFhLG1CQUFPLENBQUMsRUFBVzs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGNBQWM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQzdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7OztBQ2RBLFVBQVUsbUJBQU8sQ0FBQyxFQUFPO0FBQ3pCLGFBQWEsbUJBQU8sQ0FBQyxDQUFhO0FBQ2xDLGdCQUFnQixtQkFBTyxDQUFDLENBQWE7QUFDckMsZUFBZSxtQkFBTyxDQUFDLENBQVU7QUFDakMsWUFBWSxtQkFBTyxDQUFDLEdBQVM7QUFDN0IsVUFBVSxtQkFBTyxDQUFDLEVBQVk7QUFDOUIsYUFBYSxtQkFBTyxDQUFDLEVBQVU7O0FBRS9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQ3BIQSxVQUFVLG1CQUFPLENBQUMsRUFBTztBQUN6QixhQUFhLG1CQUFPLENBQUMsQ0FBYTtBQUNsQyxnQkFBZ0IsbUJBQU8sQ0FBQyxDQUFhO0FBQ3JDLGVBQWUsbUJBQU8sQ0FBQyxDQUFVOztBQUVqQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUMxQkEsa0JBQWtCLG1CQUFPLENBQUMsRUFBYTtBQUN2QztBQUNBO0FBQ0E7QUFDQSxTQUFTLG1CQUFPLENBQUMsQ0FBTztBQUN4QjtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLEVBQWM7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixXQUFXO0FBQ25DO0FBQ0EsbUJBQW1CLHlCQUF5QjtBQUM1QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUN4R0EsU0FBUyxtQkFBTyxDQUFDLENBQU87QUFDeEIsY0FBYyxtQkFBTyxDQUFDLEVBQVM7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLGNBQWM7QUFDL0I7O0FBRUE7O0FBRUE7QUFDQSxRQUFRLE9BQU87QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixPQUFPO0FBQzFCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLGNBQWM7QUFDL0I7O0FBRUE7O0FBRUEsUUFBUSxPQUFPO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsT0FBTztBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7QUNsSGE7O0FBRWI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZ0JBQWdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGdCQUFnQjtBQUNuQztBQUNBLEdBQUc7QUFDSCxtQkFBbUIsZ0JBQWdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLGdCQUFnQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDekRhOztBQUViOztBQUVBLGFBQWEsbUJBQU8sQ0FBQyxFQUFRO0FBQzdCLGNBQWMsbUJBQU8sQ0FBQyxHQUFTO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyxHQUFRO0FBQzdCLGdCQUFnQixtQkFBTyxDQUFDLEdBQVc7Ozs7Ozs7O0FDUHRCOztBQUViLFlBQVksbUJBQU8sQ0FBQyxDQUFVO0FBQzlCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNoRGE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLENBQVU7QUFDOUIsYUFBYSxtQkFBTyxDQUFDLEVBQVc7QUFDaEMsZ0JBQWdCLG1CQUFPLENBQUMsRUFBVTtBQUNsQyxhQUFhLG1CQUFPLENBQUMsQ0FBcUI7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLFFBQVE7QUFDekI7QUFDQSxRQUFRLGNBQWM7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsY0FBYztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDeEdhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxDQUFVO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyxFQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQyxDQUFxQjs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQSxRQUFRLGNBQWM7QUFDdEIsOENBQThDO0FBQzlDO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0EsMEJBQTBCO0FBQzFCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLGNBQWM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyxtQ0FBbUM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyxtQ0FBbUM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9DQUFvQztBQUNwQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ3pVQSxlQUFlLG1CQUFPLENBQUMsQ0FBVTtBQUNqQyxlQUFlLG1CQUFPLENBQUMsRUFBUztBQUNoQyxhQUFhLG1CQUFPLENBQUMsQ0FBUTs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7OztBQ25IQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQSxnQkFBZ0IsbUJBQU8sQ0FBQyxHQUFPOzs7Ozs7O0FDbEIvQixlQUFlLG1CQUFPLENBQUMsQ0FBVTs7QUFFakMsV0FBVyxtQkFBTyxDQUFDLEVBQVk7QUFDL0I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsb0JBQW9CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7QUNuVUEsZUFBZSxtQkFBTyxDQUFDLENBQVU7QUFDakMsYUFBYSxtQkFBTyxDQUFDLENBQVE7O0FBRTdCLFdBQVcsbUJBQU8sQ0FBQyxFQUFZO0FBQy9COztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsWUFBWTtBQUMxQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsaURBQWlELE9BQU87QUFDeEQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxtQkFBbUIsZ0JBQWdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixlQUFlO0FBQ2xDO0FBQ0EsR0FBRztBQUNIO0FBQ0EsbUJBQW1CLGVBQWU7QUFDbEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsZUFBZTtBQUNoQztBQUNBLGdCQUFnQixlQUFlO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZCQUE2QixRQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixZQUFZO0FBQy9COztBQUVBO0FBQ0EsOEJBQThCLFFBQVE7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxXQUFXLGlCQUFpQjtBQUM1QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUN0U0EsaUJBQWlCLG1CQUFPLENBQUMsRUFBYTtBQUN0QyxhQUFhLG1CQUFPLENBQUMsQ0FBYTs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDUEEsU0FBUyxtQkFBTyxDQUFDLENBQU87QUFDeEIsYUFBYSxtQkFBTyxDQUFDLENBQWE7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7Ozs7QUNYQSxpQ0FBaUM7Ozs7O0FBRWpDLGtDQUF1QjtBQUN2QixrQ0FBNEI7Ozs7Ozs7OztBQ0g1QixpQ0FBaUM7Ozs7O0FBRWpDLGtDQUF1QjtBQUN2QixrQ0FBd0I7Ozs7Ozs7Ozs7QUNIeEIsd0NBQWtDO0FBQ2xDLHVDQUF1QztBQUN2QyxzQ0FBd0M7QUFFeEMscUNBQTRDO0FBRTVDOzs7O0dBSUc7QUFDSDtJQWdFRTs7Ozs7O09BTUc7SUFDSCxtQkFBWSxPQUFlLEVBQUUsZUFBdUIsRUFBRSxvQkFBNEIsRUFBRSxvQkFBNEI7UUFaaEcsWUFBTyxHQUFXLGdCQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFO1FBYTVELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTztRQUN0QixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWU7UUFDdEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQjtRQUNoRCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsb0JBQW9CO1FBQ2hELDhCQUE4QjtRQUM5QixJQUFNLE9BQU8sR0FBRztZQUNkLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFdBQVcsRUFBRSxvQkFBb0I7WUFDakMsY0FBYyxFQUFFLGVBQWU7WUFDL0IsU0FBUyxFQUFFLEVBQUU7U0FDZDtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDbkIsTUFBTSxJQUFJLFNBQVMsQ0FBQyw0QkFBNEIsQ0FBQztTQUNsRDtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLG9CQUFvQixDQUFDLEVBQUU7WUFDakYsTUFBTSxJQUFJLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQztTQUM5QztJQUNILENBQUM7SUF4RkQ7Ozs7Ozs7Ozs7T0FVRztJQUNXLGNBQUksR0FBbEIsVUFDRSxPQUFlLEVBQ2YsZUFBdUIsRUFDdkIsb0JBQTRCLEVBQzVCLFVBQWtCO1FBSnBCLGlCQXVCQztRQWpCQyxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQ3ZCLElBQUksZ0JBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ2pDLElBQU0sb0JBQW9CLEdBQUcsS0FBSSxDQUFDLElBQUksQ0FDcEM7b0JBQ0UsT0FBTyxFQUFFLE9BQU87b0JBQ2hCLFdBQVcsRUFBRSxvQkFBb0I7b0JBQ2pDLGNBQWMsRUFBRSxlQUFlO29CQUMvQixTQUFTLEVBQUUsRUFBRTtpQkFDZCxFQUNELFVBQVUsQ0FDWDtnQkFDRCxPQUFPLElBQUksU0FBUyxDQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsb0JBQW9CLEVBQUUsb0JBQW9CLENBQUM7YUFDM0Y7aUJBQU07Z0JBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQztnQkFDL0IsTUFBTSxJQUFJLFNBQVMsQ0FBQyxvQ0FBb0MsQ0FBQzthQUMxRDtRQUNILENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ1ksY0FBSSxHQUFuQixVQUFvQixVQUFrQixFQUFFLFVBQWtCO1FBQ3hELCtDQUErQztRQUMvQyxJQUFNLElBQUksR0FBRyxrQkFBUSxDQUFDLE1BQU0sRUFBRTtRQUM5QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkMsSUFBTSxhQUFhLEdBQUcsZUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFaEQsSUFBSSxlQUFNLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxlQUFNLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzdFLGlDQUFpQztZQUNqQyxJQUFNLGdCQUFnQixHQUFHLGVBQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO1lBQ25ELElBQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLGdCQUFnQixFQUFFLEtBQUssQ0FBQztZQUU1RSxPQUFPLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztTQUNuQzthQUFNO1lBQ0wsTUFBTSxJQUFJLFNBQVMsQ0FBQyxzQ0FBc0MsQ0FBQztTQUM1RDtJQUNILENBQUM7SUFrQ0Q7O09BRUc7SUFDSSwyQkFBTyxHQUFkO1FBQ0UsT0FBTyxDQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUM7WUFDekIsZUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRTtZQUM5QyxlQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7WUFDM0MsZUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFO1lBQ25ELGVBQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDO1lBQ2hELGVBQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQ2pEO0lBQ0gsQ0FBQztJQUNEOzs7O09BSUc7SUFDSyxzQ0FBa0IsR0FBMUIsVUFBMkIsT0FBZSxFQUFFLG9CQUE0QixFQUFFLG9CQUE0QjtRQUNwRywrQ0FBK0M7UUFDL0MsSUFBTSxJQUFJLEdBQUcsa0JBQVEsQ0FBQyxNQUFNLEVBQUU7UUFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLElBQU0sYUFBYSxHQUFHLGVBQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hELElBQU0sMEJBQTBCLEdBQUcsZUFBTSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztRQUN2RSxJQUFNLDBCQUEwQixHQUFHLGVBQU0sQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUM7UUFFdkUsT0FBTyxNQUFNLENBQUMsMkJBQTJCLENBQUMsMEJBQTBCLEVBQUUsYUFBYSxFQUFFLDBCQUEwQixDQUFDO0lBQ2xILENBQUM7SUFDSCxnQkFBQztBQUFELENBQUM7QUF2SFksOEJBQVM7Ozs7Ozs7QUNYdEI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsWUFBWSxLQUE0QixJQUFJLHVCQUFVO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLHlCQUF5QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLLGtGQUFrRjtBQUN2RixLQUFLLHlFQUF5RTtBQUM5RSxLQUFLLDJGQUEyRjtBQUNoRyxLQUFLLDhGQUE4RjtBQUNuRyxLQUFLO0FBQ0w7O0FBRUEsa0JBQWtCOztBQUVsQixpQkFBaUIsdUJBQXVCO0FBQ3hDO0FBQ0E7QUFDQSxtQkFBbUIsaUJBQWlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixRQUFRO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG9CQUFvQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixpQ0FBaUM7QUFDN0Q7QUFDQTtBQUNBLE9BQU87QUFDUCw0QkFBNEIsaUNBQWlDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZ0JBQWdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUJBQXFCLGdCQUFnQjtBQUNyQztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsaUJBQWlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG9CQUFvQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsb0NBQW9DO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsb0NBQW9DO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG9DQUFvQztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNILGVBQWUsd0JBQXdCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLE1BQU0sbUNBQU87QUFDYjtBQUNBLE9BQU87QUFBQSxvR0FBQztBQUNSO0FBQ0E7QUFDQSxDQUFDOzs7Ozs7OztBQy9vQkQ7QUFDQTs7Ozs7Ozs7QUNEQSw2R0FBYSxnQkFBZ0IsYUFBYSwrQ0FBK0MsYUFBYSxvRkFBb0YseTJJQUF5MkksV0FBVyxtREFBbUQseWhLQUF5aEssUUFBUSxXQUFXLG1FQUFtRSx5R0FBeUcsUUFBUSxXQUFXLEtBQUssTUFBTSxnRkFBZ0YsSUFBSSxJQUFJLElBQUkscU5BQXFOLHdCQUF3QixTQUFTLGlGQUFpRix3QkFBd0IsRUFBRSxjQUFjLG9FQUFvRSxrQ0FBa0Msa0RBQWtELElBQUkseUJBQXlCLFNBQVMsY0FBYyxrRUFBa0UsU0FBUyxZQUFZLCtCQUErQixZQUFZLHFFQUFxRSxTQUFTLHVEQUF1RCxxQkFBcUIsSUFBSSxLQUFLLDBEQUEwRCxnQkFBZ0IscUJBQXFCLEdBQUcsYUFBYSx3RUFBd0UsVUFBVSw2QkFBNkIsSUFBSSxnQkFBZ0IsU0FBUyxTQUFTLGNBQWMsb0JBQW9CLHVCQUF1QixXQUFXLDZIQUE2SCxTQUFTLE9BQU8saUVBQWlFLGNBQWMsdUNBQXVDLG1JQUFtSSxTQUFTLGdCQUFnQix3QkFBd0IsOEdBQThHLGdLQUFnSyxnQkFBZ0IsV0FBVyw4REFBOEQsbUJBQW1CLDZDQUE2QywwQ0FBMEMseUNBQXlDLGlFQUFpRSxrREFBa0QsdUJBQXVCLDZCQUE2QixLQUFLLFdBQVcseUJBQXlCLFNBQVMsK0JBQStCLDRDQUE0QyxjQUFjLG1EQUFtRCxXQUFXLHlCQUF5QixTQUFTLGNBQWMsTUFBTSw4RkFBOEYsaUVBQWlFLGNBQWMsZ0NBQWdDLGNBQWMsa0JBQWtCLDJCQUEyQixjQUFjLG1CQUFtQixlQUFlLHFDQUFxQyxTQUFTLGNBQWMsaUJBQWlCLFdBQVcsc0JBQXNCLE1BQU0sZ0JBQWdCLHdCQUF3QixnQkFBZ0IsNEJBQTRCLGtCQUFrQiwrQ0FBK0Msa0JBQWtCLDRHQUE0Ryx3QkFBd0IsU0FBUyxLQUFLLFdBQVcsaUZBQWlGLDREQUE0RCxxREFBcUQsZUFBZSx3RkFBd0Ysc0RBQXNELGlGQUFpRixxREFBcUQseURBQXlELHNFQUFzRSxvRkFBb0YsYUFBYSxjQUFjLHFEQUFxRCwwQkFBMEIsU0FBUyxLQUFLLFdBQVcsMkRBQTJELDBDQUEwQyx5QkFBeUIsbUNBQW1DLHlEQUF5RCxlQUFlLHdGQUF3RixzREFBc0QsaUZBQWlGLHFEQUFxRCx5REFBeUQsNkJBQTZCLDBGQUEwRixhQUFhLGNBQWMscURBQXFELHdCQUF3QixTQUFTLEtBQUssdUNBQXVDLFVBQVUsZUFBZSxnRUFBZ0UsV0FBVyxtRkFBbUYsc0RBQXNELGlGQUFpRixxREFBcUQseURBQXlELHNFQUFzRSxvRkFBb0YsYUFBYSxjQUFjLHFCQUFxQix3QkFBd0IsU0FBUyxLQUFLLHVDQUF1QyxVQUFVLGVBQWUsZ0VBQWdFLFdBQVcsbUZBQW1GLHNEQUFzRCxpRkFBaUYscURBQXFELHlEQUF5RCw2QkFBNkIsVUFBVSxvRUFBb0UsK0ZBQStGLFNBQVMsbUJBQW1CLElBQUksY0FBYyxxQkFBcUIsd0JBQXdCLFNBQVMsS0FBSyxXQUFXLGlGQUFpRixpRUFBaUUscURBQXFELGVBQWUsd0ZBQXdGLDJEQUEyRCxpRkFBaUYsMERBQTBELHlEQUF5RCwyRUFBMkUseUZBQXlGLGFBQWEsY0FBYyxxREFBcUQsMEJBQTBCLFNBQVMsS0FBSyxXQUFXLDJEQUEyRCwwQ0FBMEMseUJBQXlCLG1DQUFtQyx5REFBeUQsZUFBZSx3RkFBd0YsMkRBQTJELGlGQUFpRiwwREFBMEQseURBQXlELDZCQUE2QiwrRkFBK0YsYUFBYSxjQUFjLHFEQUFxRCx3QkFBd0IsU0FBUyxLQUFLLHVDQUF1QyxVQUFVLGVBQWUsZ0VBQWdFLFdBQVcsbUZBQW1GLDJEQUEyRCxpRkFBaUYsMERBQTBELHlEQUF5RCwyRUFBMkUseUZBQXlGLGFBQWEsY0FBYyxxQkFBcUIsd0JBQXdCLFNBQVMsS0FBSyx1Q0FBdUMsVUFBVSxlQUFlLGdFQUFnRSxXQUFXLG1GQUFtRiwyREFBMkQsaUZBQWlGLDBEQUEwRCx5REFBeUQsNkJBQTZCLFVBQVUseUVBQXlFLG9HQUFvRyxTQUFTLG1CQUFtQixJQUFJLGNBQWMscUJBQXFCLGNBQWMsU0FBUyxLQUFLLDJFQUEyRSx5REFBeUQsYUFBYSxjQUFjLGNBQWMsU0FBUyxLQUFLLHNFQUFzRSxvREFBb0QsYUFBYSxjQUFjLHdCQUF3QixTQUFTLEtBQUssV0FBVyxpRkFBaUYsa0VBQWtFLHFEQUFxRCxlQUFlLHdGQUF3Riw0REFBNEQsaUZBQWlGLDJEQUEyRCx5REFBeUQsNEVBQTRFLDBGQUEwRixhQUFhLGNBQWMscURBQXFELDBCQUEwQixTQUFTLEtBQUssV0FBVywyREFBMkQsMENBQTBDLHlCQUF5QixtQ0FBbUMseURBQXlELGVBQWUsd0ZBQXdGLDREQUE0RCxpRkFBaUYsMkRBQTJELHlEQUF5RCw2QkFBNkIsZ0dBQWdHLGFBQWEsY0FBYyxxREFBcUQsd0JBQXdCLFNBQVMsS0FBSyx1Q0FBdUMsVUFBVSxlQUFlLGdFQUFnRSxXQUFXLG1GQUFtRiw0REFBNEQsaUZBQWlGLDJEQUEyRCx5REFBeUQsNEVBQTRFLDBGQUEwRixhQUFhLGNBQWMscUJBQXFCLHdCQUF3QixTQUFTLEtBQUssdUNBQXVDLFVBQVUsZUFBZSxnRUFBZ0UsV0FBVyxtRkFBbUYsNERBQTRELGlGQUFpRiwyREFBMkQseURBQXlELDZCQUE2QixVQUFVLDBFQUEwRSxxR0FBcUcsU0FBUyxtQkFBbUIsSUFBSSxjQUFjLHFCQUFxQixjQUFjLFNBQVMsS0FBSyw0RUFBNEUsMERBQTBELGFBQWEsY0FBYyxrQkFBa0IsU0FBUyxLQUFLLHVDQUF1Qyx5QkFBeUIsb0NBQW9DLHlEQUF5RCxrREFBa0QsK0NBQStDLGFBQWEsY0FBYyxxQkFBcUIsa0JBQWtCLFNBQVMsS0FBSyx1Q0FBdUMseUJBQXlCLCtDQUErQyx5REFBeUQsNkRBQTZELDBEQUEwRCxhQUFhLGNBQWMscUJBQXFCLGNBQWMsU0FBUyxLQUFLLGdFQUFnRSw4Q0FBOEMsYUFBYSxjQUFjLGtCQUFrQixTQUFTLGVBQWUsNENBQTRDLHlEQUF5RCx1Q0FBdUMseUJBQXlCLCtDQUErQyx5REFBeUQseURBQXlELGNBQWMsa0JBQWtCLFNBQVMsS0FBSyx1Q0FBdUMseUJBQXlCLCtDQUErQyx5REFBeUQsNkRBQTZELDBEQUEwRCxhQUFhLGNBQWMscUJBQXFCLGNBQWMsU0FBUyxLQUFLLGdFQUFnRSw4Q0FBOEMsYUFBYSxjQUFjLGtCQUFrQixTQUFTLGVBQWUsNENBQTRDLHlEQUF5RCx1Q0FBdUMseUJBQXlCLCtDQUErQyx5REFBeUQseURBQXlELGNBQWMsY0FBYyxTQUFTLEtBQUsscURBQXFELG1DQUFtQyxhQUFhLGNBQWMsa0JBQWtCLFNBQVMsZUFBZSxpQ0FBaUMseURBQXlELHVDQUF1Qyx5QkFBeUIsb0NBQW9DLHlEQUF5RCw4Q0FBOEMsY0FBYyxrQkFBa0IsU0FBUywwQkFBMEIseUNBQXlDLHFGQUFxRix5Q0FBeUMsZ0VBQWdFLHlEQUF5RCxtREFBbUQsYUFBYSxjQUFjLHFCQUFxQixjQUFjLFNBQVMsS0FBSyxzRkFBc0YsVUFBVSxzRkFBc0YsaUVBQWlFLFNBQVMsOENBQThDLElBQUksY0FBYyxrQkFBa0IsU0FBUyxLQUFLLHVDQUF1QywrQkFBK0IscUVBQXFFLCtEQUErRCxtRkFBbUYsb0VBQW9FLGFBQWEsY0FBYyxvQkFBb0IsU0FBUywyQkFBMkIseUVBQXlFLDBFQUEwRSxxRUFBcUUsb0ZBQW9GLHFFQUFxRSwrREFBK0QsbUZBQW1GLDJFQUEyRSxhQUFhLGNBQWMsc0JBQXNCLFNBQVMsS0FBSyx1Q0FBdUMsMkJBQTJCLHFDQUFxQyxnRkFBZ0YseUNBQXlDLHFGQUFxRix5Q0FBeUMsZ0VBQWdFLDZCQUE2QixVQUFVLG9EQUFvRCw2REFBNkQsU0FBUyxtQkFBbUIsSUFBSSxjQUFjLHFCQUFxQixzQkFBc0IsU0FBUyxLQUFLLHVDQUF1QywyQkFBMkIscUNBQXFDLGdGQUFnRix5Q0FBeUMscUZBQXFGLHlDQUF5QyxnRUFBZ0Usc0RBQXNELHVEQUF1RCxhQUFhLGNBQWMscUJBQXFCLG9CQUFvQixTQUFTLEtBQUssdUNBQXVDLDJCQUEyQixxQ0FBcUMsZ0ZBQWdGLHdDQUF3QywrREFBK0Qsc0RBQXNELDZEQUE2RCxhQUFhLGNBQWMscUJBQXFCLGNBQWMsU0FBUyxLQUFLLDBEQUEwRCxVQUFVLDBEQUEwRCxnREFBZ0QsT0FBTyxxREFBcUQsY0FBYyxzQkFBc0IseUJBQXlCLFNBQVMsS0FBSywwQ0FBMEMseUJBQXlCLG1DQUFtQywwRUFBMEUscUNBQXFDLGdGQUFnRix5Q0FBeUMscUZBQXFGLHlDQUF5QyxnRUFBZ0UsNkJBQTZCLGtFQUFrRSxhQUFhLGNBQWMsbURBQW1ELHVCQUF1QixTQUFTLDJCQUEyQiw0Q0FBNEMsc0VBQXNFLHFDQUFxQyxnRkFBZ0YseUNBQXlDLHFGQUFxRix5Q0FBeUMsZ0VBQWdFLHNEQUFzRCw0REFBNEQsYUFBYSxjQUFjLG1EQUFtRCxxQkFBcUIsU0FBUyxLQUFLLDBDQUEwQywyQkFBMkIscUNBQXFDLGdGQUFnRix3Q0FBd0MsK0RBQStELHNEQUFzRCxrRUFBa0UsYUFBYSxjQUFjLHFEQUFxRCxtQkFBbUIsU0FBUyxLQUFLLHVDQUF1QywrQkFBK0IseUNBQXlDLCtEQUErRCx1REFBdUQsbURBQW1ELGFBQWEsY0FBYyxxQkFBcUIscUJBQXFCLFNBQVMsMkJBQTJCLDZDQUE2QywwRUFBMEUseUNBQXlDLHFGQUFxRix5Q0FBeUMsZ0VBQWdFLHVEQUF1RCwwREFBMEQsYUFBYSxjQUFjLG1EQUFtRCxpQkFBaUIsU0FBUyxxQkFBcUIsb0NBQW9DLDBEQUEwRCwwREFBMEQsVUFBVSwwREFBMEQsdURBQXVELE9BQU8scURBQXFELGNBQWMscUJBQXFCLG1CQUFtQixTQUFTLGtCQUFrQiw4Q0FBOEMsb0VBQW9FLDhDQUE4Qyx1REFBdUQsK0RBQStELDREQUE0RCxhQUFhLGNBQWMsaUNBQWlDLGlCQUFpQixTQUFTLEtBQUssc0JBQXNCLG1CQUFtQiwrREFBK0QsZ0VBQWdFLGFBQWEsY0FBYyxxQkFBcUIsaUJBQWlCLFNBQVMsS0FBSywwQkFBMEIsbUJBQW1CLDJEQUEyRCxjQUFjLGVBQWUsU0FBUyxLQUFLLCtEQUErRCxnREFBZ0QsYUFBYSxjQUFjLG1CQUFtQixTQUFTLGtCQUFrQixvREFBb0Qsb0VBQW9FLG9EQUFvRCx1REFBdUQscUVBQXFFLHdEQUF3RCxhQUFhLGNBQWMsaUJBQWlCLFNBQVMsS0FBSyxzQkFBc0IsbUJBQW1CLHFFQUFxRSw2REFBNkQsYUFBYSxjQUFjLGlCQUFpQixTQUFTLEtBQUssc0JBQXNCLG1CQUFtQixxRUFBcUUsb0VBQW9FLGFBQWEsY0FBYywyQkFBMkIsbUJBQW1CLFNBQVMsa0JBQWtCLG9EQUFvRCxvRUFBb0Usb0RBQW9ELHVEQUF1RCxxRUFBcUUsd0RBQXdELGFBQWEsY0FBYyxpQkFBaUIsU0FBUyxLQUFLLHNCQUFzQixtQkFBbUIscUVBQXFFLHlEQUF5RCxhQUFhLGNBQWMsZUFBZSxTQUFTLEtBQUsscUVBQXFFLGdEQUFnRCxhQUFhLGNBQWMsaUJBQWlCLFNBQVMsS0FBSywyQkFBMkIsbUJBQW1CLHFFQUFxRSx5REFBeUQsYUFBYSxjQUFjLG1CQUFtQixTQUFTLGtCQUFrQixvREFBb0Qsb0VBQW9FLG9EQUFvRCx1REFBdUQscUVBQXFFLHdEQUF3RCxhQUFhLGNBQWMsbUJBQW1CLFNBQVMsa0JBQWtCLDhDQUE4QyxvRUFBb0UsOENBQThDLHVEQUF1RCwrREFBK0QsNERBQTRELGFBQWEsY0FBYyxpQ0FBaUMscUJBQXFCLFNBQVMsK0dBQStHLHVDQUF1QyxVQUFVLGVBQWUsb0RBQW9ELDhCQUE4QiwwREFBMEQsYUFBYSxjQUFjLHFCQUFxQix1QkFBdUIsU0FBUyw2R0FBNkcsZUFBZSxrRUFBa0Usb0RBQW9ELHVFQUF1RSx3REFBd0QseURBQXlELDZCQUE2Qix1RkFBdUYsYUFBYSxjQUFjLHFCQUFxQixtQkFBbUIsU0FBUyxzSUFBc0ksOEJBQThCLHdEQUF3RCwwQkFBMEIsY0FBYyxxQkFBcUIsbUJBQW1CLFNBQVMsS0FBSyxlQUFlLDhKQUE4Six5QkFBeUIsK0NBQStDLFFBQVEsY0FBYyxxQkFBcUIsZUFBZSxTQUFTLEtBQUssNERBQTRELDBDQUEwQyxhQUFhLGNBQWMsbUJBQW1CLFNBQVMsNEJBQTRCLDZDQUE2QyxnRkFBZ0YsaUJBQWlCLFNBQVMsS0FBSyx1Q0FBdUMsVUFBVSxrREFBa0QsNkNBQTZDLGFBQWEsY0FBYyxxQkFBcUIsaUJBQWlCLFNBQVMsS0FBSyx1Q0FBdUMsVUFBVSx5REFBeUQsb0RBQW9ELGFBQWEsY0FBYyxxQkFBcUIsaUJBQWlCLFNBQVMsS0FBSyx1Q0FBdUMsVUFBVSx5REFBeUQsb0RBQW9ELGFBQWEsY0FBYyxxQkFBcUIsdUJBQXVCLFNBQVMsbVFBQW1RLHFCQUFxQixrQ0FBa0MsbUNBQW1DLHlEQUF5RCw2QkFBNkIsOERBQThELGFBQWEsY0FBYyxlQUFlLFNBQVMsS0FBSyxvREFBb0Qsa0NBQWtDLGFBQWEsY0FBYyxxQkFBcUIsU0FBUyxnQ0FBZ0Msd0NBQXdDLGdHQUFnRyx3Q0FBd0MsZ0dBQWdHLHdDQUF3QyxxRUFBcUUsMERBQTBELFVBQVUsMERBQTBELGlFQUFpRSxTQUFTLHNCQUFzQixJQUFJLGNBQWMscUJBQXFCLGVBQWUsU0FBUyxLQUFLLHlEQUF5RCxVQUFVLHlEQUF5RCwrQ0FBK0MsT0FBTyxxREFBcUQsY0FBYyxzQkFBc0IsaUJBQWlCLFNBQVMscUJBQXFCLG1DQUFtQywwREFBMEQseURBQXlELFVBQVUseURBQXlELHNEQUFzRCxPQUFPLHFEQUFxRCxjQUFjLHNCQUFzQixxQkFBcUIsU0FBUyxnQ0FBZ0Msd0NBQXdDLGdHQUFnRyx3Q0FBd0MsZ0dBQWdHLHdDQUF3QyxxRUFBcUUsMERBQTBELFVBQVUsMERBQTBELGlFQUFpRSxTQUFTLHNCQUFzQixJQUFJLGNBQWMscUJBQXFCLG1CQUFtQixTQUFTLEtBQUssdUNBQXVDLHlCQUF5QiwyQ0FBMkMseURBQXlELHlEQUF5RCxzREFBc0QsYUFBYSxjQUFjLHFCQUFxQixpQkFBaUIsU0FBUyw0QkFBNEIseURBQXlELHNEQUFzRCwwQkFBMEIsY0FBYyxxQkFBcUIsaUJBQWlCLFNBQVMsS0FBSyxXQUFXLGtEQUFrRCx5QkFBeUIsMkNBQTJDLFFBQVEsY0FBYyxxQkFBcUIsZUFBZSxTQUFTLEtBQUssNERBQTRELDBDQUEwQyxhQUFhLGNBQWMsbUJBQW1CLFNBQVMsNEJBQTRCLDZDQUE2QyxnRkFBZ0YsbUJBQW1CLFNBQVMsZ0JBQWdCLHdDQUF3QywwREFBMEQsdUNBQXVDLHlCQUF5QiwyQ0FBMkMseURBQXlELHFEQUFxRCxjQUFjLDJCQUEyQixTQUFTLDJHQUEyRyx3Q0FBd0MsMEJBQTBCLHVDQUF1Qyx3V0FBd1csNkJBQTZCLDZEQUE2RCxhQUFhLGNBQWMscUJBQXFCLHlCQUF5QixTQUFTLDJHQUEyRyx3Q0FBd0MsMEJBQTBCLDREQUE0RCxrUUFBa1EsNkJBQTZCLGdGQUFnRixhQUFhLGNBQWMscUJBQXFCLDJCQUEyQixTQUFTLEtBQUssd0NBQXdDLFVBQVUsb0NBQW9DLGdZQUFnWSw2QkFBNkIsbUZBQW1GLGFBQWEsY0FBYyxxQkFBcUIscUJBQXFCLFNBQVMsS0FBSyx3Q0FBd0Msa05BQWtOLHdFQUF3RSw4RUFBOEUsd0JBQXdCLGNBQWMscUJBQXFCLG1CQUFtQixTQUFTLGlFQUFpRSxxQkFBcUIsbUJBQW1CLHdDQUF3QyxVQUFVLHVFQUF1RSxjQUFjLHFCQUFxQixTQUFTLEtBQUssd0NBQXdDLGtOQUFrTixtREFBbUQseURBQXlELHdCQUF3QixjQUFjLHFCQUFxQixtQkFBbUIsU0FBUyxpRUFBaUUscUJBQXFCLG1CQUFtQix3Q0FBd0MsVUFBVSxrREFBa0QsY0FBYyxtQkFBbUIsU0FBUywyQkFBMkIsNkNBQTZDLHFGQUFxRiw2Q0FBNkMsK0RBQStELHdEQUF3RCxpREFBaUQsYUFBYSxjQUFjLHVCQUF1QixpQkFBaUIsU0FBUywyQkFBMkIsNkNBQTZDLGdFQUFnRSw4REFBOEQsb0RBQW9ELGFBQWEsY0FBYyx1QkFBdUIsbUJBQW1CLFNBQVMsdUJBQXVCLDBEQUEwRCxrRkFBa0Ysb0RBQW9ELGdFQUFnRSxxRUFBcUUsOERBQThELGFBQWEsY0FBYyw2QkFBNkIsaUJBQWlCLFNBQVMsS0FBSywyQkFBMkIsbUJBQW1CLCtEQUErRCxpRUFBaUUsYUFBYSxjQUFjLG1CQUFtQixxQkFBcUIsU0FBUyxLQUFLLHVDQUF1QywyQkFBMkIsMkNBQTJDLDBFQUEwRSx5Q0FBeUMseURBQXlELDZCQUE2QixVQUFVLDBEQUEwRCxpRUFBaUUsU0FBUyxlQUFlLElBQUksY0FBYyxxQkFBcUIscUJBQXFCLFNBQVMsS0FBSyx1Q0FBdUMsMkJBQTJCLDJDQUEyQywwRUFBMEUseUNBQXlDLHlEQUF5RCw0REFBNEQsMkRBQTJELGFBQWEsY0FBYyxxQkFBcUIsZUFBZSxTQUFTLEtBQUssMERBQTBELHdDQUF3QyxhQUFhLGNBQWMsdUJBQXVCLFNBQVMsS0FBSywwQ0FBMEMseUJBQXlCLHlDQUF5QywwRUFBMEUsMkNBQTJDLDBFQUEwRSx5Q0FBeUMseURBQXlELDZCQUE2QixzRUFBc0UsYUFBYSxjQUFjLGlEQUFpRCxxQkFBcUIsU0FBUywyQkFBMkIsa0RBQWtELHNFQUFzRSwyQ0FBMkMsMEVBQTBFLHlDQUF5Qyx5REFBeUQsNERBQTRELGdFQUFnRSxhQUFhLGNBQWMsaURBQWlELG1CQUFtQixTQUFTLHVCQUF1QixpRUFBaUUsMkVBQTJFLDhEQUE4RCx5REFBeUQsd0JBQXdCLHFFQUFxRSxRQUFRLGNBQWMscUJBQXFCLGlCQUFpQixTQUFTLG9CQUFvQiw4REFBOEQseURBQXlELHNHQUFzRywrRUFBK0UsT0FBTyx1QkFBdUIsY0FBYyxxQkFBcUIsZUFBZSxTQUFTLEtBQUssK0VBQStFLDZEQUE2RCxhQUFhLGNBQWMscUJBQXFCLFNBQVMsOENBQThDLHFFQUFxRSxpREFBaUQsZUFBZSxtREFBbUQsK0VBQStFLFVBQVUsb0dBQW9HLDBCQUEwQixJQUFJLGlDQUFpQyxFQUFFLGNBQWMsdUJBQXVCLFNBQVMsNEJBQTRCLDZDQUE2QyxVQUFVLGVBQWUsNklBQTZJLCtFQUErRSx3RkFBd0YsYUFBYSxjQUFjLHFCQUFxQixpQkFBaUIsU0FBUyw2RkFBNkYsbUJBQW1CLFNBQVMsS0FBSyx1Q0FBdUMseUJBQXlCLHlDQUF5Qyx5REFBeUQsdURBQXVELG9EQUFvRCxhQUFhLGNBQWMscUJBQXFCLGVBQWUsU0FBUyxLQUFLLDBEQUEwRCx3Q0FBd0MsYUFBYSxjQUFjLG1CQUFtQixTQUFTLEtBQUssdUNBQXVDLHlCQUF5QixvREFBb0QseURBQXlELGtFQUFrRSwrREFBK0QsYUFBYSxjQUFjLHFCQUFxQixtQkFBbUIsU0FBUyxLQUFLLHVDQUF1QyxnQ0FBZ0MsMENBQTBDLGdFQUFnRSwyREFBMkQsb0RBQW9ELGFBQWEsY0FBYyxxQkFBcUIsbUJBQW1CLFNBQVMsS0FBSyx1Q0FBdUMsZ0NBQWdDLDBDQUEwQyxnRUFBZ0Usa0RBQWtELDZEQUE2RCxhQUFhLGNBQWMscUJBQXFCLGlCQUFpQixTQUFTLHFCQUFxQiwwQ0FBMEMsMERBQTBELDhEQUE4RCxrRUFBa0UsYUFBYSxjQUFjLG1CQUFtQixpQkFBaUIsU0FBUyxxQkFBcUIsMENBQTBDLDBEQUEwRCw4REFBOEQsa0VBQWtFLGFBQWEsY0FBYyxtQkFBbUIsaUJBQWlCLFNBQVMsMkJBQTJCLDBDQUEwQyxnRUFBZ0UsMkRBQTJELDBEQUEwRCxhQUFhLGNBQWMsbUJBQW1CLGlCQUFpQixTQUFTLDJCQUEyQiwwQ0FBMEMsZ0VBQWdFLHNEQUFzRCw0REFBNEQsYUFBYSxjQUFjLG1CQUFtQixtQkFBbUIsU0FBUyxrREFBa0QsMENBQTBDLGdFQUFnRSxrREFBa0QsNkRBQTZELDBCQUEwQixjQUFjLHFCQUFxQixxQkFBcUIsU0FBUyxpREFBaUQsaUNBQWlDLG9GQUFvRiwwQ0FBMEMsK0RBQStELGdEQUFnRCxjQUFjLGVBQWUsU0FBUyxLQUFLLHlCQUF5QixrQ0FBa0MsUUFBUSxjQUFjLHNCQUFzQixlQUFlLFNBQVMsS0FBSywyREFBMkQsVUFBVSwyREFBMkQsaURBQWlELE9BQU8sc0RBQXNELGNBQWMsc0JBQXNCLG1CQUFtQixTQUFTLDhCQUE4QiwwQ0FBMEMsNkVBQTZFLDBDQUEwQywrREFBK0Qsb0RBQW9ELHlEQUF5RCxhQUFhLGNBQWMsb0RBQW9ELGlCQUFpQixTQUFTLHFCQUFxQixxQ0FBcUMsMERBQTBELDJEQUEyRCxVQUFVLDJEQUEyRCx3REFBd0QsT0FBTyxzREFBc0QsY0FBYyxxQkFBcUIsbUJBQW1CLFNBQVMsNEJBQTRCLDZDQUE2Qyx5RUFBeUUsbUJBQW1CLFNBQVMscUJBQXFCLGlDQUFpQywrREFBK0QsdUNBQXVDLCtCQUErQiwwQ0FBMEMsK0RBQStELHVEQUF1RCxjQUFjLHFCQUFxQixTQUFTLDBIQUEwSCwrQ0FBK0MsMEVBQTBFLGlEQUFpRCwyREFBMkQsNkJBQTZCLCtDQUErQyxhQUFhLGNBQWMscUJBQXFCLFNBQVMsS0FBSyw2Q0FBNkMsMkJBQTJCLHNEQUFzRCwwRUFBMEUsb0RBQW9ELHlEQUF5RCw2QkFBNkIsa0VBQWtFLGFBQWEsY0FBYyxxQkFBcUIsdUJBQXVCLFNBQVMsS0FBSyw2Q0FBNkMsMkJBQTJCLHNEQUFzRCw0TEFBNEwsb0RBQW9ELHlEQUF5RCw2QkFBNkIseUVBQXlFLGFBQWEsY0FBYyxxQkFBcUIsZUFBZSxTQUFTLEtBQUssZ0VBQWdFLDhDQUE4QyxhQUFhLGNBQWMscUJBQXFCLFNBQVMsS0FBSyw2Q0FBNkMsMkJBQTJCLGlEQUFpRCwwRUFBMEUsK0NBQStDLHlEQUF5RCw2QkFBNkIsNkRBQTZELGFBQWEsY0FBYyxxQkFBcUIsdUJBQXVCLFNBQVMsS0FBSyw2Q0FBNkMsMkJBQTJCLGlEQUFpRCw0TEFBNEwsK0NBQStDLHlEQUF5RCw2QkFBNkIsb0VBQW9FLGFBQWEsY0FBYyxxQkFBcUIsZUFBZSxTQUFTLEtBQUssdURBQXVELHFDQUFxQyxhQUFhLGNBQWMsZUFBZSxTQUFTLEtBQUssaUVBQWlFLCtDQUErQyxhQUFhLGNBQWMscUJBQXFCLFNBQVMsS0FBSyw2Q0FBNkMsMkJBQTJCLGtEQUFrRCwwRUFBMEUsZ0RBQWdELHlEQUF5RCw2QkFBNkIsOERBQThELGFBQWEsY0FBYyxxQkFBcUIsdUJBQXVCLFNBQVMsS0FBSyw2Q0FBNkMsMkJBQTJCLGtEQUFrRCw0TEFBNEwsZ0RBQWdELHlEQUF5RCw2QkFBNkIscUVBQXFFLGFBQWEsY0FBYyxxQkFBcUIsaUJBQWlCLFNBQVMscUdBQXFHLDZCQUE2QixrQ0FBa0MsYUFBYSxjQUFjLG1CQUFtQixTQUFTLHFIQUFxSCxxQ0FBcUMsMERBQTBELDZCQUE2QixrREFBa0QsYUFBYSxjQUFjLGVBQWUsNEJBQTRCLGVBQWUsS0FBSyxrQ0FBa0MsZUFBZSxpQkFBaUIsU0FBUyxLQUFLLDRCQUE0QixJQUFJLHlIQUF5SCxvRkFBb0YsZUFBZSwyQkFBMkIsaUJBQWlCLFNBQVMsK0dBQStHLG9DQUFvQyxjQUFjLGNBQWMscURBQXFELGVBQWUsNENBQTRDLGtDQUFrQyx5RUFBeUUscUJBQXFCLGtIQUFrSCx1QkFBdUIsaUZBQWlGLFFBQVEsSUFBSSxrQ0FBa0MsNkNBQTZDLHdIQUF3SCxpR0FBaUcsMkJBQTJCLE9BQU8sdUNBQXVDLGVBQWUsNkJBQTZCLE9BQU8sdUVBQXVFLDBSQUEwUix3QkFBd0IsOERBQThELDZOQUE2Tix5Q0FBeUMsa0dBQWtHLDZCQUE2QixJQUFJLDZCQUE2Qix1QkFBdUIsOEZBQThGLDJCQUEyQixJQUFJLFlBQVksYUFBYSxzQ0FBc0Msd0hBQXdILGlHQUFpRywyQkFBMkIsSUFBSSxpQkFBaUIsYUFBYSx1QkFBdUIsNEZBQTRGLHVCQUF1QixJQUFJLFdBQVcsNkJBQTZCLDJDQUEyQyxxQkFBcUIsaUZBQWlGLHVEQUF1RCxvREFBb0QsNEJBQTRCLG9DQUFvQyxJQUFJLDJFQUEyRSx5SUFBeUksdUJBQXVCLGlGQUFpRix1REFBdUQsdUJBQXVCLGtLQUFrSyxnQ0FBZ0MsNkJBQTZCLDBDQUEwQyx5RkFBeUYsS0FBcUMsQ0FBQyxpQ0FBTyxDQUFDLE9BQVMsQ0FBQyx1QkFBVyxDQUFDLG9DQUFDLENBQUM7QUFBQTtBQUFBO0FBQUEsb0dBQUMsQ0FBQyxTQUF1SSxtQ0FBbUMsWUFBWSxFQUFFOzs7Ozs7O0FDQTcrbEUsdUxBQWEsY0FBYyxhQUFhLE1BQU0scUJBQXFCLEVBQUUsUUFBUSwwTUFBME0sUUFBUSx5Q0FBeUMscUNBQXFDLHlCQUF5QixtQ0FBbUMsSUFBSSxtQ0FBbUMsU0FBUyxNQUFNLDhCQUE4QixzQkFBc0IsTUFBTSxNQUFNLDRDQUE0QyxzQkFBc0IsNExBQTRMLG1CQUFtQixtQ0FBbUMsTUFBTSx3QkFBd0IsbUJBQU8sQ0FBQyxFQUFJLFNBQVMsbUJBQU8sQ0FBQyxFQUFNLDBEQUEwRCxlQUFlLGNBQWMscURBQXFELG1GQUFtRixLQUEwQiw2RUFBNkUsbUNBQW1DLDhDQUE4QyxZQUFZLHVCQUF1QixnQkFBZ0IsTUFBTSwwSEFBMEgsbUpBQW1KLCtQQUErUCxJQUFJLHlCQUF5QixzREFBc0QsU0FBUyxZQUFZLGtCQUFrQixTQUFTLG1CQUFtQixJQUFJLHlCQUF5QiwrRkFBK0YsU0FBUyxZQUFZLGNBQWMsU0FBUyxvQkFBb0IseUJBQXlCLG9FQUFvRSx3REFBd0QsS0FBSyxZQUFZLG1CQUFtQiwwQkFBMEIsRUFBRSwyQ0FBMkMsNENBQTRDLDZGQUE2RixRQUFRLDREQUE0RCxTQUFTLGdCQUFnQiw2QkFBNkIsbUZBQW1GLGdCQUFnQix5QkFBeUIsa0JBQWtCLGNBQWMsS0FBSywwREFBMEQsYUFBYSxJQUFJLEVBQUUsYUFBYSxVQUFVLGdCQUFnQixpQkFBaUIsZ0JBQWdCLHFHQUFxRyxLQUFLLGNBQWMsa0RBQWtELHlDQUF5QywrQkFBK0IsU0FBUyxXQUFXLGdCQUFnQiwyQkFBMkIsY0FBYyxnUEFBZ1AsNkRBQTZELCtCQUErQixjQUFjLEtBQUssV0FBVyxFQUFFLGdCQUFnQix5QkFBeUIsYUFBYSxvR0FBb0csVUFBVSwyRUFBMkUseUZBQXlGLGNBQWMsMkdBQTJHLG9CQUFvQixzQkFBc0IsZ0RBQWdELFNBQVMsY0FBYyxvRUFBb0Usa0JBQWtCLDBCQUEwQixZQUFZLGlDQUFpQywrRkFBK0YseUJBQXlCLHNDQUFzQyx1QkFBdUIsU0FBUyxJQUFJLE1BQU0sbUJBQU8sQ0FBQyxFQUFRLGVBQWUsdUJBQXVCLDRDQUE0Qyx1QkFBdUIsU0FBUyxpREFBaUQsRUFBRSxjQUFjLFNBQVMsY0FBYyw4Q0FBOEMsV0FBVyw0QkFBNEIsRUFBRSxjQUFjLGdCQUFnQixhQUFhLElBQUksbUJBQW1CLFNBQVMsSUFBSSwrQ0FBK0MsMEJBQTBCLGNBQWMsZ0JBQWdCLGVBQWUsSUFBSSx5QkFBeUIsMEJBQTBCLDRDQUE0QyxXQUFXLGVBQWUsOERBQThELGlDQUFpQyxxbDZDQUFxbDZDLFVBQVUsZUFBZSxpQkFBaUIsV0FBVyxLQUFLLFdBQVcsZ0pBQWdKLGtCQUFrQixnREFBZ0QsK0ZBQStGLHNDQUFzQyxHQUFHLG9QQUFvUCxrQkFBa0IsVUFBVSxlQUFlLDJCQUEyQiwyQkFBMkIsTUFBTSxJQUFJLDBCQUEwQixTQUFTLHlCQUF5QiwwREFBMEQsSUFBSSwrQ0FBK0MsV0FBVyx5QkFBeUIsU0FBUyxTQUFTLDhEQUE4RCxvQkFBb0IsNkJBQTZCLGFBQWEsZ0tBQWdLLGdCQUFnQixVQUFVLG1SQUFtUiwrQkFBK0IsR0FBRywwRUFBMEUsaUJBQWlCLGlCQUFpQixHQUFHLGtDQUFrQyxtQkFBbUIsc3ErQkFBc3ErQiw0VUFBNFUseUNBQXlDLElBQUksb0JBQW9CLGVBQWUsZ3hCQUFneEIsNit6QkFBNit6QixvQkFBb0IsVUFBVSxnS0FBZ0ssZUFBZSxVQUFVLG9CQUFvQixJQUFJLEdBQUcsc0VBQXNFLGlCQUFpQiw2QkFBNkIsR0FBRyxnQ0FBZ0MsbUJBQW1CLDhCQUE4QixHQUFHLDBvUkFBMG9SLCtyTEFBK3JMLGdCQUFnQixJQUFJLEdBQUcsb0hBQW9ILGdCQUFnQixjQUFjLEtBQUssc0ZBQXNGLDBCQUEwQixHQUFHLGNBQWMsdVNBQXVTLDRCQUE0Qixvd0JBQW93QixnQkFBZ0IsNFBBQTRQLG1DQUFtQyx3REFBd0Qsd0JBQXdCLDhCQUE4QixHQUFHLGlCQUFpQixxREFBcUQsSUFBSSxNQUFNLE1BQU0saUNBQWlDLEtBQUssaUNBQWlDLFFBQVEsY0FBYyxnREFBZ0QsU0FBUyxHQUFHLFFBQVEsaURBQWlELDRCQUE0QixrQkFBa0IsT0FBTywrREFBK0QsOEdBQThHLFNBQVMsc1hBQXNYLDJCQUEyQiwwQkFBMEIsNlRBQTZULEtBQUssMERBQTBELEVBQUUscUNBQXFDLE9BQU8sYUFBYSxRQUFRLFFBQVEsNkVBQTZFLFNBQVMsTUFBTSxNQUFNLDBCQUEwQixTQUFTLGNBQWMsc0JBQXNCLDZCQUE2QixtT0FBbU8saUJBQWlCLG1CQUFtQixFQUFFLDZGQUE2RixRQUFRLE1BQU0sUUFBUSwrREFBK0QsOEJBQThCLEdBQUcsaUJBQWlCLHFEQUFxRCxJQUFJLE1BQU0sTUFBTSxpQ0FBaUMsS0FBSyxpQ0FBaUMsUUFBUSxVQUFVLDRDQUE0QyxTQUFTLEdBQUcsTUFBTSxpREFBaUQsNEJBQTRCLDZCQUE2QixPQUFPLCtEQUErRCw0R0FBNEcsU0FBUyxLQUFLLDhEQUE4RCxLQUFLLDhEQUE4RCxnTUFBZ00sTUFBTSw0VUFBNFUsNERBQTRELE1BQU0sWUFBWSxLQUFLLDRCQUE0QixvQ0FBb0MsaUNBQWlDLEVBQUUsNEJBQTRCLElBQUksUUFBUSxVQUFVLGdEQUFnRCxTQUFTLFNBQVMsa0ZBQWtGLFNBQVMsbUJBQW1CLFVBQVUsU0FBUyw4TUFBOE0sd0hBQXdILCtMQUErTCw2RkFBNkYsS0FBSyx1QkFBdUIsS0FBSyxZQUFZLEtBQUssTUFBTSxZQUFZLGlFQUFpRSxFQUFFLHFCQUFxQixNQUFNLFFBQVEsSUFBSSwrRUFBK0UsY0FBYyxrQkFBa0IsUUFBUSxRQUFRLHVCQUF1QixTQUFTLFdBQVcsU0FBUyxHQUFHLDBJQUEwSSwwREFBMEQsSUFBSSxNQUFNLDJCQUEyQixVQUFVLFFBQVEsY0FBYyxTQUFTLFNBQVMsR0FBRyxlQUFlLHNEQUFzRCxjQUFjLElBQUksTUFBTSxjQUFjLFFBQVEsOENBQThDLGNBQWMsUUFBUSxrQkFBa0IsVUFBVSxNQUFNLGtCQUFrQixTQUFTLFNBQVMseUJBQXlCLFNBQVMsOEtBQThLLDJFQUEyRSxLQUFLLE1BQU0sYUFBYSxFQUFFLG1EQUFtRCxNQUFNLE1BQU0sMEJBQTBCLElBQUksOERBQThELGtJQUFrSSxNQUFNLHdEQUF3RCxFQUFFLHVCQUF1QixNQUFNLE1BQU0sMEJBQTBCLElBQUksb0NBQW9DLDRJQUE0SSxLQUFLLG9FQUFvRSxLQUFLLHVCQUF1QixnRUFBZ0UsTUFBTSw2QkFBNkIsS0FBSyxjQUFjLDhDQUE4Qyw4QkFBOEIsTUFBTSx5QkFBeUIsTUFBTSw4QkFBOEIsR0FBRyxpQkFBaUIsK0JBQStCLEtBQUssc0JBQXNCLElBQUksTUFBTSxTQUFTLE1BQU0saUNBQWlDLEtBQUssaUNBQWlDLFFBQVEsVUFBVSw0Q0FBNEMsU0FBUyxZQUFZLGVBQWUsR0FBRyxrQ0FBa0Msa0NBQWtDLHdCQUF3QixRQUFRLDREQUE0RCxTQUFTLDBGQUEwRiwwQkFBMEIsU0FBUywwQkFBMEIsU0FBUywyRUFBMkUsZ01BQWdNLE1BQU0sUUFBUSxHQUFHLE1BQU0sbUJBQW1CLEtBQUssTUFBTSxrT0FBa08sU0FBUyxTQUFTLHdGQUF3Riw0REFBNEQsTUFBTSxZQUFZLEtBQUssNEJBQTRCLG9DQUFvQyxpQ0FBaUMsRUFBRSw0QkFBNEIsSUFBSSxRQUFRLFVBQVUsZ0RBQWdELFNBQVMsU0FBUyxrRkFBa0YsU0FBUyxpQkFBaUIsWUFBWSw2REFBNkQsZUFBZSx5VUFBeVUsR0FBRyxzQkFBc0IseUJBQXlCLGlCQUFpQix1RUFBdUUsOEtBQThLLE1BQU0sb1lBQW9ZLDREQUE0RCxNQUFNLFlBQVksS0FBSyw4QkFBOEIsc0NBQXNDLGlDQUFpQyxFQUFFLDhCQUE4QixJQUFJLFFBQVEsVUFBVSxnREFBZ0QsU0FBUyxTQUFTLGtGQUFrRixnbUNBQWdtQyxTQUFTLHdIQUF3SCx3QkFBd0IsY0FBYyxrU0FBa1MsbThYQUFtOFgsa0JBQWtCLFVBQVUsb3dCQUFvd0IsOHZXQUE4dlcsa0JBQWtCLFVBQVUsd0lBQXdJLHdGQUF3RixHQUFHLHk0R0FBeTRHLGdCQUFnQixJQUFJLEdBQUcsbWhHQUFtaEcsZ0JBQWdCLDJCQUEyQixrQkFBa0IsVUFBVSx3SUFBd0ksZ0ZBQWdGLEdBQUcseTRHQUF5NEcsZ0JBQWdCLElBQUksR0FBRyxtaEdBQW1oRyxnQkFBZ0IsMkJBQTJCLGdCQUFnQixLQUFLLDJZQUEyWSxxMU5BQXExTixnQkFBZ0IsS0FBSywrWUFBK1ksdWtOQUF1a04sc0JBQXNCLG9CQUFvQix3RUFBd0UsOE5BQThOLHNJQUFzSSxFQUFFLDRvQkFBNG9CLDBDQUEwQyxNQUFNLDRCQUE0QixZQUFZLG1EQUFtRCxNQUFNLFdBQVcsTUFBTSxXQUFXLE1BQU0sV0FBVyxNQUFNLFdBQVcsTUFBTSxZQUFZLE1BQU0sWUFBWSw4K0RBQTgrRCxjQUFjLHdDQUF3QyxTQUFTLDJDQUEyQyxHQUFHLGdDQUFnQyxLQUFLLGdDQUFnQyxrREFBa0QsdUJBQXVCLDZCQUE2QixZQUFZLE1BQU0sZ0VBQWdFLGNBQWMsOENBQThDLDBDQUEwQyxNQUFNLHFDQUFxQyxNQUFNLDhCQUE4QixHQUFHLGlCQUFpQiwrQkFBK0IsS0FBSyxzQkFBc0IsSUFBSSxNQUFNLFNBQVMsTUFBTSxpQ0FBaUMsS0FBSyxpQ0FBaUMsUUFBUSxVQUFVLDRDQUE0QyxTQUFTLE1BQU0saURBQWlELDRCQUE0QixvQ0FBb0MsT0FBTywwREFBMEQsWUFBWSxNQUFNLHNJQUFzSSxrQkFBa0IsU0FBUyx1Q0FBdUMsb0RBQW9ELEtBQUssdUJBQXVCLGlGQUFpRixpQ0FBaUMsbUdBQW1HLGFBQWEsR0FBRyxjQUFjLDhDQUE4Qyw4QkFBOEIsTUFBTSx5QkFBeUIsTUFBTSw4QkFBOEIsR0FBRyxpQkFBaUIsK0JBQStCLEtBQUssc0JBQXNCLElBQUksTUFBTSxTQUFTLE1BQU0saUNBQWlDLEtBQUssaUNBQWlDLFFBQVEsY0FBYyxnREFBZ0QsU0FBUyxRQUFRLGlEQUFpRCw0QkFBNEIsd0JBQXdCLE9BQU8sK0RBQStELGdIQUFnSCxTQUFTLHVFQUF1RSxpT0FBaU8sMlVBQTJVLEtBQUssUUFBUSxZQUFZLEtBQUssNEJBQTRCLG9DQUFvQyxpQ0FBaUMsRUFBRSw0QkFBNEIsSUFBSSxRQUFRLFVBQVUsZ0RBQWdELFNBQVMsU0FBUyxpRkFBaUYsaUVBQWlFLFNBQVMsdUNBQXVDLFlBQVksWUFBWSxTQUFTLGNBQWMsZ0JBQWdCLEtBQUssZ0NBQWdDLG1CQUFtQixHQUFHLGVBQWUsS0FBSyw2QkFBNkIsNkJBQTZCLCtCQUErQixvQkFBb0IsTUFBTSw4RUFBOEUsY0FBYywwREFBMEQsa0RBQWtELE1BQU0sNkNBQTZDLE1BQU0sMENBQTBDLEdBQUcsdUJBQXVCLHdDQUF3Qyx3QkFBd0IsSUFBSSxNQUFNLE1BQU0saUNBQWlDLEtBQUssaUNBQWlDLFFBQVEsY0FBYyxzREFBc0QsU0FBUyxNQUFNLDZEQUE2RCw0QkFBNEIsNENBQTRDLE9BQU8sZ0VBQWdFLG9CQUFvQixNQUFNLGtLQUFrSywwQkFBMEIsU0FBUyxzRUFBc0UsS0FBSyx5QkFBeUIsaUZBQWlGLGlDQUFpQyxxR0FBcUcsYUFBYSxHQUFHLGNBQWMsa0RBQWtELDhCQUE4QixNQUFNLHlCQUF5QixNQUFNLGtDQUFrQyxHQUFHLG1CQUFtQixtQ0FBbUMsS0FBSyx3QkFBd0IsSUFBSSxNQUFNLFdBQVcsTUFBTSxpQ0FBaUMsS0FBSyxpQ0FBaUMsUUFBUSxjQUFjLGtEQUFrRCxTQUFTLFFBQVEscURBQXFELDRCQUE0Qix3QkFBd0IsT0FBTyxpRUFBaUUsb0hBQW9ILFNBQVMsdUVBQXVFLGlPQUFpTyw4WkFBOFosWUFBWSxLQUFLLDRCQUE0QixvQ0FBb0MsaUNBQWlDLEVBQUUsNEJBQTRCLElBQUksUUFBUSxVQUFVLDhEQUE4RCxTQUFTLGlGQUFpRixzQkFBc0IsZUFBZSwwUEFBMFAsNkRBQTZELHdQQUF3UCxFQUFFLGdDQUFnQyxhQUFhLEdBQUcsa0JBQWtCLG1CQUFtQixJQUFJLEdBQUcsOEJBQThCLG9DQUFvQyxZQUFZLFNBQVMscUVBQXFFLEdBQUcsc3hCQUFzeEIsZ0JBQWdCLDRtQkFBNG1CLDZEQUE2RCxXQUFXLElBQUksR0FBRyw4QkFBOEIsb0JBQW9CLDBCQUEwQixJQUFJLG9CQUFvQixlQUFlLDBFQUEwRSx1TkFBdU4sRUFBRSxtb0RBQW1vRCx3SEFBd0gsTUFBTSxpSUFBaUksU0FBUyxpRUFBaUUsZ0JBQWdCLEtBQUssd0ZBQXdGLHk3REFBeTdELGdCQUFnQixLQUFLLHdGQUF3RixnN0RBQWc3RCxrQkFBa0IsVUFBVSxvQkFBb0IsMERBQTBELG1CQUFtQix5Q0FBeUMseUlBQXlJLEtBQUssbUVBQW1FLEdBQUcsY0FBYywwTEFBMEwsbUdBQW1HLE1BQU0seUJBQXlCLGtCQUFrQixTQUFTLHNCQUFzQixnQ0FBZ0MseUlBQXlJLHdJQUF3SSxrdENBQWt0QyxlQUFlLGNBQWMsb0JBQW9CLGVBQWUsZ0NBQWdDLDJDQUEyQyx5QkFBeUIsS0FBSyxxQkFBcUIsR0FBRyxrQ0FBa0MsbUJBQW1CLHVCQUF1QixNQUFNLHlCQUF5QixLQUFLLHFCQUFxQixHQUFHLGtDQUFrQyxtQkFBbUIsdUJBQXVCLE1BQU0sY0FBYyxHQUFHLDJCQUEyQixvREFBb0QsTUFBTSxNQUFNLCtCQUErQixpSEFBaUgsTUFBTSxNQUFNLDBDQUEwQyxvSUFBb0ksTUFBTSxNQUFNLGlDQUFpQyx1R0FBdUcsTUFBTSxNQUFNLHVQQUF1UCxNQUFNLFdBQVcsV0FBVyxZQUFZLFNBQVMsZUFBZSxvQkFBb0Isb0JBQW9CLDRDQUE0QywyQkFBMkIsS0FBSyx5QkFBeUIsd2JBQXdiLDJJQUEySSx5QkFBeUIsUUFBUSxHQUFHLHVGQUF1Riw0Q0FBNEMscUZBQXFGLFFBQVEsR0FBRywyREFBMkQsa0NBQWtDLGFBQWEsMkJBQTJCLFFBQVEsR0FBRyxxREFBcUQsb0NBQW9DLFdBQVcsU0FBUyxJQUFJLGtCQUFrQixVQUFVLHdKQUF3SixnT0FBZ08sR0FBRyxvdEJBQW90QixpQkFBaUIsaUdBQWlHLG9CQUFvQixlQUFlLGdCQUFnQixvbkJBQW9uQiwrQkFBK0IsV0FBVyxFQUFFLHFCQUFxQixRQUFRLE1BQU0scUJBQXFCLFFBQVEsTUFBTSxZQUFZLFNBQVMsMkJBQTJCLDBjQUEwYyxVQUFVLElBQUksNEJBQTRCLHdDQUF3QyxvQ0FBb0MsZ0RBQWdELGdCQUFnQixRQUFRLEVBQUUsUUFBUSwrQ0FBK0MsRUFBRSxPQUFPLEtBQUssUUFBUSxpQkFBaUIsS0FBSyxRQUFRLDJCQUEyQixLQUFLLFFBQVEsSUFBSSxpQ0FBaUMsMEJBQTBCLEtBQUssTUFBTSx3QkFBd0IsU0FBUyx5QkFBeUIsS0FBSyxPQUFPLHVLQUF1SywwQkFBMEIsR0FBRyxvQ0FBb0MsNkNBQTZDLDJDQUEyQyxTQUFTLEVBQUUsMkJBQTJCLEtBQUssTUFBTSx5QkFBeUIsS0FBSyxPQUFPLGNBQWMsY0FBYyxNQUFNLGNBQWMsY0FBYyxPQUFPLFNBQVMsU0FBUywwRkFBMEYsa0JBQWtCLFVBQVUsc0JBQXNCLGlHQUFpRywyQ0FBMkMsTUFBTSwyQ0FBMkMsTUFBTSxjQUFjLEdBQUcsZ0hBQWdILEtBQUssMkJBQTJCLE1BQU0sTUFBTSw4Q0FBOEMsS0FBSywyQkFBMkIsTUFBTSxNQUFNLDhDQUE4QyxLQUFLLDJCQUEyQixNQUFNLE1BQU0sNEVBQTRFLDREQUE0RCxNQUFNLE1BQU0scUVBQXFFLHlEQUF5RCxNQUFNLE1BQU0sc0VBQXNFLFdBQVcsYUFBYSxXQUFXLFdBQVcsU0FBUyxlQUFlLGtCQUFrQixVQUFVLGdJQUFnSSxpT0FBaU8sR0FBRyx5cEJBQXlwQixnQkFBZ0IsaUdBQWlHLG9CQUFvQixlQUFlLG9DQUFvQyw4REFBOEQsS0FBSyw0SUFBNEksUUFBUSxHQUFHLHFIQUFxSCw0Q0FBNEMsa0xBQWtMLG9JQUFvSSxRQUFRLEdBQUcseUdBQXlHLDRDQUE0QyxpRkFBaUYsZ0JBQWdCLFVBQVUsZ0RBQWdELEtBQUssUUFBUSxHQUFHLHNCQUFzQiwyQ0FBMkMsSUFBSSxNQUFNLGtCQUFrQixTQUFTLFNBQVMsMk9BQTJPLEVBQUUsOGNBQThjLGlDQUFpQyxTQUFTLGtCQUFrQixRQUFRLDJ4QkFBMnhCLG9CQUFvQixvQkFBb0Isb0JBQW9CLGlJQUFpSSxVQUFVLGlGQUFpRix1QkFBdUIsR0FBRyxrQ0FBa0MsbUJBQW1CLDZCQUE2QixHQUFHLGdDQUFnQyxtQkFBbUIscUJBQXFCLG1CQUFtQixHQUFHLGlEQUFpRCx1QkFBdUIsR0FBRyxrQ0FBa0MsbUJBQW1CLGdEQUFnRCxHQUFHLGdDQUFnQyxtQkFBbUIsZ0JBQWdCLHdCQUF3Qiw0REFBNEQsU0FBUyxjQUFjLHNCQUFzQixvQkFBb0IsNEJBQTRCLHdEQUF3RCxHQUFHLE1BQU0sUUFBUSxrQkFBa0IsTUFBTSxRQUFRLE9BQU8sU0FBUyxrQ0FBa0MsZ0JBQWdCLEdBQUcsd0RBQXdELEVBQUUsbUVBQW1FLElBQUksTUFBTSxLQUFLLG9CQUFvQixpREFBaUQsU0FBUyxhQUFhLGdCQUFnQixHQUFHLHdEQUF3RCxFQUFFLG1FQUFtRSxJQUFJLE1BQU0sS0FBSyxvQkFBb0IsaURBQWlELFNBQVMsOEhBQThILDRCQUE0Qiw4QkFBOEIsZ0JBQWdCLDhEQUE4RCxhQUFhLEdBQUcsa0NBQWtDLG1CQUFtQiwwSUFBMEksR0FBRyxpREFBaUQsaUJBQWlCLHNDQUFzQyxFQUFFLHdCQUF3QixHQUFHLHlDQUF5QyxpQkFBaUIsWUFBWSx5REFBeUQsUUFBUSxrRkFBa0YsSUFBSSxNQUFNLFFBQVEsYUFBYSxvREFBb0QsSUFBSSxHQUFHLHlDQUF5QyxvQkFBb0IsdUJBQXVCLElBQUksZ0JBQWdCLEtBQUssZ0NBQWdDLDZnQ0FBNmdDLGdCQUFnQixRQUFRLCtMQUErTCxHQUFHLHlCQUF5QixnQkFBZ0IsNkNBQTZDLEdBQUcseUJBQXlCLGlCQUFpQix3Q0FBd0MsR0FBRyxlQUFlLGlCQUFpQix3Q0FBd0MsR0FBRyx5QkFBeUIsaUJBQWlCLDZDQUE2QyxHQUFHLHlCQUF5QixpQkFBaUIsd0NBQXdDLEdBQUcsZUFBZSxrQkFBa0Isd0NBQXdDLEdBQUcseUJBQXlCLGlCQUFpQiw2Q0FBNkMsR0FBRyx5QkFBeUIsZ0JBQWdCLHdCQUF3QixnQkFBZ0IsS0FBSyxZQUFZLHNsQkFBc2xCLCtPQUErTyxVQUFVLElBQUksMEJBQTBCLHlCQUF5QixnQkFBZ0IseXlCQUF5eUIsb0JBQW9CLG9CQUFvQixvQkFBb0IsS0FBSyx5QkFBeUIsMkVBQTJFLGtEQUFrRCxFQUFFLHVOQUF1TixHQUFHLGtDQUFrQyxtQkFBbUIsK01BQStNLFFBQVEsbUtBQW1LLFNBQVMsbUJBQW1CLDRDQUE0QyxtdkJBQW12Qix1QkFBdUIsZUFBZSw0QkFBNEIsOERBQThELGFBQWEsR0FBRyxrQ0FBa0MsbUJBQW1CLG9NQUFvTSxHQUFHLDJCQUEyQix5REFBeUQsUUFBUSx3Q0FBd0MsaUNBQWlDLGlDQUFpQyxpQkFBaUIsd0NBQXdDLElBQUksR0FBRyxpQ0FBaUMsb0JBQW9CLHVCQUF1QixJQUFJLDJCQUEyQix5QkFBeUIsWUFBWSxnRUFBZ0Usd0JBQXdCLHdDQUF3Qyw2QkFBNkIsUUFBUSwwREFBMEQsUUFBUSwrRUFBK0UsNENBQTRDLDJCQUEyQixtakJBQW1qQixtQkFBbUIsVUFBVSxZQUFZLDhDQUE4QywrQkFBK0IsS0FBSyxJQUFJLEVBQUUsaUJBQWlCLDBDQUEwQyxzQkFBc0IsYUFBYSx5V0FBeVcsS0FBSyxZQUFZLGlDQUFpQyxpQkFBaUIsWUFBWSxxR0FBcUcsS0FBSyxZQUFZLG1DQUFtQyxXQUFXLGlCQUFpQixLQUFLLFlBQVksd0NBQXdDLDBCQUEwQiw4d0JBQTh3QixzdUJBQXN1QixtQkFBbUIsZUFBZSxvQkFBb0Isd1dBQXdXLElBQUksR0FBRyxxUUFBcVEsZ0NBQWdDLElBQUkscUJBQXFCLG9CQUFvQix3QkFBd0IsMkNBQTJDLEdBQUcsa0JBQWtCLG1CQUFtQiwrR0FBK0csR0FBRyxtREFBbUQsS0FBSyxnQkFBZ0IscUJBQXFCLE1BQU0scUJBQXFCLGtEQUFrRCxNQUFNLHlNQUF5TSxTQUFTLGVBQWUsaUJBQWlCLFVBQVUsb0JBQW9CLCtCQUErQixHQUFHLHNFQUFzRSxpQkFBaUIsUUFBUSxHQUFHLDJFQUEyRSxpQkFBaUIsc0NBQXNDLEdBQUcsd0VBQXdFLGdCQUFnQix3SkFBd0osR0FBRyx3RUFBd0UsZ0JBQWdCLElBQUksbUNBQW1DLE1BQU0sc1hBQXNYLEdBQUcsTUFBTSxNQUFNLG1CQUFtQixNQUFNLHNCQUFzQixPQUFPLFNBQVMsZUFBZSxlQUFlLEtBQUssWUFBWSxHQUFHLDRDQUE0QyxtQ0FBbUMsTUFBTSxNQUFNLDZEQUE2RCxhQUFhLG9DQUFvQyxNQUFNLE1BQU0sb0NBQW9DLE1BQU0sTUFBTSxxR0FBcUcsaUZBQWlGLE1BQU0sV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFVBQVUsVUFBVSxVQUFVLFdBQVcsU0FBUyxXQUFXLHVCQUF1QixRQUFRLHlRQUF5USxLQUFLLFFBQVEsdUJBQXVCLEdBQUcsa0NBQWtDLG1CQUFtQix5R0FBeUcsS0FBSyxRQUFRLHVCQUF1QixHQUFHLGtDQUFrQyxtQkFBbUIseUhBQXlILEdBQUcsa0JBQWtCLG1CQUFtQixhQUFhLEdBQUcsa0NBQWtDLG1CQUFtQiwyQkFBMkIsbUJBQW1CLFFBQVEsb3BCQUFvcEIscUNBQXFDLFVBQVUsNkZBQTZGLEdBQUcsTUFBTSx5TkFBeU4sYUFBYSxNQUFNLHlEQUF5RCwyQkFBMkIsTUFBTSxpQkFBaUIsV0FBVyxTQUFTLGVBQWUsaUJBQWlCLFlBQVksc1FBQXNRLEtBQUssWUFBWSxxTEFBcUwsR0FBRyx5QkFBeUIsZ0JBQWdCLDZDQUE2QyxHQUFHLHlCQUF5QixpQkFBaUIsd0NBQXdDLEdBQUcsZUFBZSxpQkFBaUIsd0NBQXdDLEdBQUcseUJBQXlCLGlCQUFpQiw2Q0FBNkMsR0FBRyx5QkFBeUIsaUJBQWlCLHdDQUF3QyxHQUFHLGVBQWUsa0JBQWtCLHdDQUF3QyxHQUFHLHlCQUF5QixpQkFBaUIsNEVBQTRFLHFRQUFxUSxtQkFBbUIsMENBQTBDLDBmQUEwZixxQ0FBcUMsb1pBQW9aLGVBQWUsb0JBQW9CLDhDQUE4QyxHQUFHLGtDQUFrQyxtQkFBbUIsZ0xBQWdMLG1CQUFtQiwrQkFBK0Isc0JBQXNCLGdDQUFnQyxHQUFHLGtDQUFrQyxtQkFBbUIsNExBQTRMLGlCQUFpQixVQUFVLHdCQUF3QixJQUFJLEdBQUcsZ0RBQWdELGtCQUFrQixJQUFJLEdBQUcsUUFBUSxLQUFLLGNBQWMsSUFBSSxHQUFHLDhCQUE4QixjQUFjLEtBQUssY0FBYywwQ0FBMEMsd0JBQXdCLE1BQU0sdUJBQXVCLGdCQUFnQixrQkFBa0IseUNBQXlDLFdBQVcsU0FBUyxRQUFRLGdCQUFnQixTQUFTLFFBQVEsa0JBQWtCLG1DQUFtQyxNQUFNLGlSQUFpUixHQUFHLE1BQU0sTUFBTSxtQkFBbUIsTUFBTSxvQkFBb0IsT0FBTyxTQUFTLGVBQWUsMkJBQTJCLFFBQVEsc1lBQXNZLHlCQUF5Qiw4QkFBOEIsUUFBUSxHQUFHLE1BQU0sd0NBQXdDLFdBQVcsTUFBTSwyQkFBMkIsTUFBTSxpQkFBaUIsU0FBUyxNQUFNLGdDQUFnQyxXQUFXLE1BQU0sMkJBQTJCLE1BQU0sU0FBUyx1TkFBdU4sdUJBQXVCLFVBQVUsY0FBYyxnSEFBZ0gsS0FBSyxhQUFhLEdBQUcsa0JBQWtCLG1CQUFtQixpQkFBaUIsTUFBTSwwREFBMEQseU9BQXlPLGVBQWUsaUJBQWlCLEtBQUssb0JBQW9CLGlFQUFpRSxxUEFBcVAsVUFBVSxZQUFZLDBCQUEwQixHQUFHLDJCQUEyQixLQUFLLHVDQUF1QywyQkFBMkIsbUJBQW1CLE1BQU0sc0RBQXNELE1BQU0sT0FBTyxTQUFTLGVBQWUsUUFBUSxnQkFBZ0IsSUFBSSxHQUFHLGdCQUFnQiwrQkFBK0IsZUFBZSxnQkFBZ0IsNERBQTRELHNGQUFzRixJQUFJLEdBQUcseUZBQXlGLGdDQUFnQyxlQUFlLFVBQVUsWUFBWSxJQUFJLEdBQUcsMERBQTBELGtCQUFrQiw2RkFBNkYsSUFBSSxXQUFXLFdBQVcsZUFBZSx5QkFBeUIsUUFBUSwwVkFBMFYsaUJBQWlCLFVBQVUsWUFBWSxLQUFLLFVBQVUsVUFBVSxnRUFBZ0UsUUFBUSxrQkFBa0Isa0NBQWtDLEtBQUssaURBQWlELDBEQUEwRCxvQkFBb0Isb0RBQW9ELFNBQVMsS0FBSyxxREFBcUQsU0FBUyxxQkFBcUIsU0FBUyxXQUFXLGlCQUFpQixLQUFLLGNBQWMsMENBQTBDLEdBQUcsMEJBQTBCLG1CQUFtQiwwQkFBMEIsR0FBRyw2Q0FBNkMsaUJBQWlCLGlEQUFpRCxHQUFHLDJCQUEyQixtQkFBbUIsMEJBQTBCLEdBQUcsNkNBQTZDLGlCQUFpQixvREFBb0QsbUJBQW1CLHNCQUFzQixnZEFBZ2QsbUJBQW1CLHNCQUFzQixnZEFBZ2QsZUFBZSxLQUFLLHdCQUF3QixnSEFBZ0gsR0FBRyxrQkFBa0IsR0FBRyx1REFBdUQsZ0JBQWdCLFFBQVEsaUJBQWlCLHFCQUFxQixHQUFHLHdEQUF3RCxnQkFBZ0IsUUFBUSxHQUFHLDRCQUE0QixnQkFBZ0IscUJBQXFCLHFDQUFxQyw2U0FBNlMsbUJBQW1CLEtBQUssVUFBVSx1Q0FBdUMsS0FBSyxJQUFJLG1CQUFtQix5QkFBeUIscUJBQXFCLHFOQUFxTixLQUFLLGVBQWUsbUJBQW1CLEtBQUssWUFBWSxtQkFBbUIsYUFBYSxpQkFBaUIsS0FBSyxRQUFRLDRhQUE0YSx5QkFBeUIsOEJBQThCLGdCQUFnQixHQUFHLHNHQUFzRyxLQUFLLHlCQUF5QixPQUFPLEtBQUssTUFBTSxtQkFBbUIsTUFBTSw2REFBNkQsU0FBUyw0REFBNEQsaUJBQWlCLEtBQUssZ0JBQWdCLDJEQUEyRCxjQUFjLEdBQUcsa0JBQWtCLElBQUksR0FBRyxzSkFBc0osbUJBQW1CLFNBQVMsUUFBUSxnQkFBZ0IsSUFBSSxxQkFBcUIsZUFBZSxZQUFZLGlGQUFpRixvSEFBb0gsR0FBRyxrQkFBa0IsbUJBQW1CLDBHQUEwRyxLQUFLLGlCQUFpQixVQUFVLFlBQVksMEJBQTBCLEdBQUcsc0ZBQXNGLCtEQUErRCx5QkFBeUIsb0VBQW9FLE1BQU0sNkJBQTZCLFdBQVcsU0FBUyxlQUFlLHlCQUF5QixVQUFVLG9VQUFvVSwwREFBMEQsUUFBUSx3SUFBd0ksS0FBSyxrQ0FBa0MseUJBQXlCLG1DQUFtQyxNQUFNLHFTQUFxUyxNQUFNLGlYQUFpWCxHQUFHLE1BQU0sTUFBTSxtQkFBbUIsTUFBTSxzQkFBc0IsT0FBTyxTQUFTLGVBQWUsNENBQTRDLDJCQUEyQiw4QkFBOEIsY0FBYywyQ0FBMkMsR0FBRyxrQkFBa0IsbUJBQW1CLEdBQUcsb0VBQW9FLHdDQUF3QyxnQkFBZ0IsTUFBTSxpREFBaUQsTUFBTSxnQkFBZ0IsU0FBUyxlQUFlLHFDQUFxQyx3U0FBd1MsTUFBTSxzWUFBc1ksNENBQTRDLHVCQUF1Qix5QkFBeUIsWUFBWSxLQUFLLE1BQU0saUJBQWlCLEVBQUUsaUJBQWlCLElBQUksTUFBTSxnQ0FBZ0MsT0FBTyxJQUFJLE1BQU0seUJBQXlCLElBQUksT0FBTyxjQUFjLHlCQUF5QixJQUFJLFNBQVMsYUFBYSxnQkFBZ0IsTUFBTSxhQUFhLGdCQUFnQixPQUFPLFNBQVMsU0FBUyxXQUFXLDJCQUEyQiw4QkFBOEIsY0FBYywyQ0FBMkMsR0FBRyxrQkFBa0IsbUJBQW1CLEdBQUcsb0VBQW9FLGlDQUFpQyxnQkFBZ0IsTUFBTSxpREFBaUQsTUFBTSxnQkFBZ0IsU0FBUyxlQUFlLGlCQUFpQixzQkFBc0IsOFVBQThVLGlCQUFpQixLQUFLLFlBQVksa0RBQWtELElBQUksR0FBRyx1TUFBdU0sZ0NBQWdDLGVBQWUsaUJBQWlCLEtBQUssb0JBQW9CLGFBQWEsY0FBYyx3QkFBd0IsR0FBRyxrQ0FBa0MsbUJBQW1CLGlCQUFpQixXQUFXLEdBQUcsZ1NBQWdTLGdCQUFnQixlQUFlLG9CQUFvQiwwUUFBMFEseUJBQXlCLGVBQWUsVUFBVSx1UEFBdVAsaUJBQWlCLEtBQUssc0JBQXNCLGlCQUFpQixLQUFLLG1CQUFtQixpQkFBaUIsRUFBRSxvRUFBb0UsSUFBSSxRQUFRLG1FQUFtRSxJQUFJLHVEQUF1RCxTQUFTLFNBQVMsV0FBVyxlQUFlLDRiQUE0YixlQUFlLDRiQUE0YixpQkFBaUIsS0FBSyxZQUFZLHdIQUF3SCxLQUFLLCtGQUErRixHQUFHLGtCQUFrQixtQkFBbUIsNENBQTRDLGlCQUFpQixzQkFBc0Isa1JBQWtSLGVBQWUsS0FBSyxnQkFBZ0IsS0FBSyxvQkFBb0IsRUFBRSx3QkFBd0IscUJBQXFCLFFBQVEsT0FBTyxhQUFhLFNBQVMsYUFBYSxLQUFLLHVEQUF1RCxTQUFTLHNCQUFzQixRQUFRLHNCQUFzQixhQUFhLGlCQUFpQixLQUFLLFFBQVEsZ1RBQWdULG1CQUFtQixVQUFVLFFBQVEsNE9BQTRPLG1CQUFtQixRQUFRLG9RQUFvUSxtQkFBbUIsUUFBUSxvUUFBb1EsbUJBQW1CLFFBQVEsMFBBQTBQLG1CQUFtQixRQUFRLDBQQUEwUCxpQkFBaUIsVUFBVSxZQUFZLCtCQUErQixHQUFHLDhCQUE4QixpQkFBaUIsbUZBQW1GLFFBQVEsdUZBQXVGLHNDQUFzQyxtQkFBbUIsUUFBUSxtRkFBbUYsSUFBSSxHQUFHLHNFQUFzRSxvQkFBb0IsNkNBQTZDLGlCQUFpQixLQUFLLFlBQVksbURBQW1ELHdGQUF3RixHQUFHLGtCQUFrQixtQkFBbUIseUJBQXlCLEtBQUssbUJBQW1CLFFBQVEsK0VBQStFLEdBQUcsMEVBQTBFLG9CQUFvQiwyQ0FBMkMsbUJBQW1CLFVBQVUsWUFBWSxpQkFBaUIsS0FBSyxtQkFBbUIsRUFBRSw4RUFBOEUsNkNBQTZDLElBQUksT0FBTyxTQUFTLFNBQVMsNEJBQTRCLGlCQUFpQixVQUFVLHdCQUF3QixtQ0FBbUMsaUZBQWlGLEtBQUssMkNBQTJDLGlCQUFpQixRQUFRLGdNQUFnTSxtQkFBbUIsUUFBUSx3RUFBd0UsVUFBVSxZQUFZLDRDQUE0QyxLQUFLLHdCQUF3QixnSEFBZ0gsR0FBRyxrQkFBa0IsR0FBRyx1REFBdUQsZ0JBQWdCLFFBQVEsaUJBQWlCLHFCQUFxQixHQUFHLHdEQUF3RCxnQkFBZ0IsUUFBUSxHQUFHLDRCQUE0QixnQkFBZ0IscUJBQXFCLFlBQVksS0FBSyxJQUFJLEdBQUcsOEJBQThCLGlCQUFpQixpSUFBaUksa2RBQWtkLFVBQVUsMkdBQTJHLGVBQWUsYUFBYSxLQUFLLElBQUksR0FBRyxrQ0FBa0MsaUJBQWlCLGtDQUFrQyxlQUFlLDJCQUEyQix5QkFBeUIsVUFBVSxxSUFBcUksbUJBQW1CLFVBQVUsZ0JBQWdCLDJEQUEyRCxHQUFHLGtDQUFrQyxtQkFBbUIsb0NBQW9DLDJCQUEyQixRQUFRLDhJQUE4SSxtQkFBbUIsUUFBUSx1SkFBdUoscUJBQXFCLG9CQUFvQixLQUFLLHFEQUFxRCxLQUFLLG9CQUFvQixXQUFXLFFBQVEsbUJBQW1CLE1BQU0sU0FBUyxXQUFXLGlCQUFpQixRQUFRLHdKQUF3SixxQkFBcUIsb0JBQW9CLEtBQUsscURBQXFELEtBQUssb0JBQW9CLFdBQVcsUUFBUSxtQkFBbUIsTUFBTSxTQUFTLFdBQVcsNkJBQTZCLE1BQU0sa0hBQWtILDZCQUE2QixNQUFNLGtIQUFrSCxlQUFlLEtBQUssd0JBQXdCLGlCQUFpQiwrRUFBK0UsOEJBQThCLGtCQUFrQixxQkFBcUIseUlBQXlJLHFCQUFxQixvQkFBb0IsR0FBRyxnQ0FBZ0Msc0JBQXNCLGdCQUFnQixNQUFNLHdCQUF3QixNQUFNLEtBQUssU0FBUyxXQUFXLGVBQWUsY0FBYywySUFBMkksaUJBQWlCLFVBQVUsWUFBWSx3Q0FBd0MsR0FBRyxrQ0FBa0Msb0JBQW9CLHVDQUF1QyxtQkFBbUIsVUFBVSxRQUFRLGdJQUFnSSxtQkFBbUIsUUFBUSxnR0FBZ0csMkJBQTJCLDZIQUE2SCxtQkFBbUIsUUFBUSw2Q0FBNkMsd0JBQXdCLFFBQVEsMkNBQTJDLElBQUksZUFBZSxXQUFXLGlCQUFpQixRQUFRLHNEQUFzRCxJQUFJLEdBQUcsOEJBQThCLG9CQUFvQixJQUFJLGlCQUFpQixVQUFVLG9CQUFvQixJQUFJLEdBQUcsNEZBQTRGLGtCQUFrQixtQkFBbUIsdUhBQXVILGlCQUFpQixRQUFRLGdDQUFnQyxNQUFNLDBFQUEwRSxzQkFBc0IsR0FBRyxrQ0FBa0MsbUJBQW1CLElBQUksZUFBZSxNQUFNLDZHQUE2Ryx1QkFBdUIsTUFBTSxnREFBZ0QsY0FBYywyQkFBMkIsd0JBQXdCLHNCQUFzQixlQUFlLFVBQVUsaUZBQWlGLEdBQUcsZ0NBQWdDLG1CQUFtQixxQkFBcUIsUUFBUSw0RUFBNEUsbUJBQW1CLFVBQVUsWUFBWSxpQkFBaUIsSUFBSSxHQUFHLDBEQUEwRCx5QkFBeUIsMkJBQTJCLDRGQUE0RixtQkFBbUIseUlBQXlJLGlCQUFpQixVQUFVLG9CQUFvQixJQUFJLEdBQUcsc0VBQXNFLGtCQUFrQiwyQkFBMkIsZ0hBQWdILGVBQWUsbUxBQW1MLGVBQWUsbUxBQW1MLDJCQUEyQiw0RUFBNEUsUUFBUSxnT0FBZ08sNkNBQTZDLGVBQWUsTUFBTSxpSUFBaUksaUJBQWlCLFFBQVEsOEVBQThFLHlCQUF5QiwrRkFBK0YsUUFBUSwwSkFBMEosa0JBQWtCLGVBQWUsWUFBWSwrQkFBK0IsR0FBRyx1QkFBdUIsZ0JBQWdCLDhDQUE4Qyx1QkFBdUIsOEVBQThFLG1CQUFtQixRQUFRLDRGQUE0RixtQkFBbUIsUUFBUSw0RkFBNEYscUJBQXFCLE1BQU0sd0NBQXdDLG9CQUFvQiw0Q0FBNEMsa0xBQWtMLEdBQUcsTUFBTSxRQUFRLHdDQUF3Qyx3RkFBd0YsTUFBTSxtRkFBbUYsWUFBWSxpTUFBaU0sTUFBTSxpSkFBaUosK0ZBQStGLCtGQUErRixtR0FBbUcsd0NBQXdDLHNFQUFzRSxNQUFNLG1GQUFtRixTQUFTLE1BQU0sa0RBQWtELEdBQUcsa05BQWtOLGdCQUFnQixJQUFJLHFCQUFxQixxRkFBcUYsMkRBQTJELGVBQWUsS0FBSyxnQkFBZ0IsWUFBWSxxREFBcUQsUUFBUSx1QkFBdUIsb0ZBQW9GLFFBQVEsZ0lBQWdJLFlBQVksbUJBQW1CLE1BQU0sZ0dBQWdHLGlCQUFpQixLQUFLLFlBQVksYUFBYSxJQUFJLEdBQUcsbUNBQW1DLHFCQUFxQixxQkFBcUIsUUFBUSxtQ0FBbUMsVUFBVSxpTEFBaUwsNkRBQTZELGlCQUFpQiwwRkFBMEYsbUJBQW1CLG9HQUFvRyxpQkFBaUIsb0ZBQW9GLGlCQUFpQixRQUFRLDhDQUE4QyxrREFBa0QscUJBQXFCLGVBQWUsUUFBUSxpRUFBaUUsaUJBQWlCLFVBQVUsWUFBWSxJQUFJLEdBQUcsMENBQTBDLGdCQUFnQiwyQkFBMkIsZ0RBQWdELG1CQUFtQiwyRkFBMkYsMkJBQTJCLCtDQUErQyxtQkFBbUIsdUVBQXVFLGlCQUFpQixLQUFLLFFBQVEscURBQXFELHNCQUFzQiw4Q0FBOEMsbURBQW1ELEdBQUcsU0FBUyxvR0FBb0csbUpBQW1KLE1BQU0sb0RBQW9ELE1BQU0sa0JBQWtCLFNBQVMsaUtBQWlLLCtCQUErQixtQkFBbUIsdUZBQXVGLGVBQWUsUUFBUSw0REFBNEQsbUJBQW1CLHlFQUF5RSwyQkFBMkIsZ0RBQWdELDJCQUEyQiwyREFBMkQsMkJBQTJCLDJEQUEyRCxpQkFBaUIsZUFBZSx3R0FBd0csd0RBQXdELFFBQVEscUNBQXFDLHNCQUFzQixpQkFBaUIsc0VBQXNFLHlCQUF5QixvQ0FBb0MseUJBQXlCLDJEQUEyRCx5QkFBeUIscUNBQXFDLHlCQUF5QiwyREFBMkQsdUJBQXVCLHdDQUF3Qyx5QkFBeUIscUNBQXFDLGVBQWUsK0RBQStELGVBQWUsTUFBTSxnQ0FBZ0MsR0FBRyxrQkFBa0IsbUJBQW1CLHFCQUFxQiwwRUFBMEUscUJBQXFCLDRFQUE0RSxxQkFBcUIsbUJBQW1CLHVCQUF1QixzQkFBc0IsaUJBQWlCLG1DQUFtQyxpQkFBaUIsbUVBQW1FLHFCQUFxQixpQ0FBaUMscUJBQXFCLG1DQUFtQyxxQkFBcUIsbUNBQW1DLHFCQUFxQixpQ0FBaUMscUJBQXFCLHVCQUF1QixlQUFlLE1BQU0sY0FBYyxHQUFHLGtCQUFrQixtQkFBbUIscUJBQXFCLHVCQUF1QixtQkFBbUIseUJBQXlCLFFBQVEsd0ZBQXdGLGlCQUFpQixlQUFlLG9EQUFvRCxpQkFBaUIsOERBQThELGVBQWUsK0RBQStELG1CQUFtQiw0QkFBNEIsZUFBZSxtREFBbUQsZUFBZSwyQ0FBMkMsZUFBZSxvREFBb0QsbUJBQW1CLGlCQUFpQixVQUFVLGtGQUFrRix5QkFBeUIscUNBQXFDLCtCQUErQix3UEFBd1Asa0NBQWtDLGlCQUFpQix1QkFBdUIsaUJBQWlCLGVBQWUsYUFBYSxZQUFZLGlCQUFpQixlQUFlLGNBQWMsWUFBWSxtQkFBbUIsNEJBQTRCLGlCQUFpQix1QkFBdUIsa0NBQWtDLFlBQVksbUJBQW1CLHFCQUFxQixRQUFRLGdJQUFnSSxzQkFBc0IsZUFBZSx1QkFBdUIsbUJBQW1CLGlCQUFpQixVQUFVLDBKQUEwSixnUkFBZ1IsR0FBRyx3cEJBQXdwQixnQkFBZ0IsNFNBQTRTLGlCQUFpQixpQkFBaUIsdUJBQXVCLG1CQUFtQiw4QkFBOEIsbUJBQW1CLDhCQUE4QixpQkFBaUIsNkNBQTZDLGVBQWUsdUNBQXVDLGlCQUFpQiwwQkFBMEIsaUJBQWlCLDBCQUEwQixpQkFBaUIsMkJBQTJCLGlCQUFpQixvQ0FBb0MsZUFBZSxvQkFBb0IsZUFBZSxZQUFZLGNBQWMsS0FBSyxjQUFjLGNBQWMsY0FBYyxVQUFVLGNBQWMsU0FBUyxjQUFjLFNBQVMsY0FBYyxTQUFTLGNBQWMsU0FBUyxjQUFjLFNBQVMsY0FBYyxVQUFVLGNBQWMsVUFBVSxjQUFjLFVBQVUsY0FBYyxVQUFVLGNBQWMsU0FBUyxjQUFjLElBQUksT0FBTyw2QkFBNkIsYUFBYSxrTUFBa00sd0NBQXdDLFlBQVksdU5BQXVOLHlIQUF5SCxrTUFBa00sMktBQTJLLHdDQUF3QyxZQUFZLHVOQUF1TixtSUFBbUksa01BQWtNLG1RQUFtUSxVQUFVLHFZQUFxWSx3Q0FBd0MsWUFBWSx1TkFBdU4scUlBQXFJLGtNQUFrTSxrVkFBa1Ysc0NBQXNDLCtHQUErRyw2QkFBNkIsTUFBTSwwR0FBMEcsMkJBQTJCLGlMQUFpTCwyR0FBMkcseVBBQXlQLHNIQUFzSCxvRUFBb0UseUJBQXlCLGtCQUFrQixvQ0FBb0MsS0FBSyxzQkFBc0IsR0FBRyxrQ0FBa0MsbUJBQW1CLHlGQUF5RixlQUFlLDZDQUE2QyxRQUFRLDRLQUE0SyxrQ0FBa0MsVUFBVSx3RUFBd0UsNEJBQTRCLHlYQUF5WCxXQUFXLDhEQUE4RCxpQ0FBaUMsdUpBQXVKLDJDQUEyQyxrR0FBa0csVUFBVSxvSEFBb0gsS0FBSyx3R0FBd0csR0FBRyxpRUFBaUUsaUJBQWlCLG1CQUFtQixlQUFlLGtDQUFrQyxrQ0FBa0MsbUdBQW1HLGdEQUFnRCw0RUFBNEUsVUFBVSxvSEFBb0gsS0FBSyx3R0FBd0csR0FBRyxpRUFBaUUsaUJBQWlCLG1CQUFtQixlQUFlLDhFQUE4RSxtRUFBbUUseUNBQXlDLGdFQUFnRSxHQUFHLHlDQUF5Qyw4QkFBOEIsZ0JBQWdCLE1BQU0saUVBQWlFLGdCQUFnQixNQUFNLHdDQUF3QyxnQkFBZ0IsTUFBTSwwQ0FBMEMsTUFBTSxnQkFBZ0IsU0FBUyxXQUFXLHNCQUFzQixNQUFNLHlDQUF5QyxnRUFBZ0UsR0FBRyx5Q0FBeUMsOEJBQThCLGdCQUFnQixNQUFNLGlFQUFpRSxnQkFBZ0IsTUFBTSxpQ0FBaUMsZ0JBQWdCLE1BQU0sMENBQTBDLE1BQU0sZ0JBQWdCLFNBQVMsV0FBVyxzQkFBc0IsTUFBTSx3QkFBd0IsV0FBVyx1TUFBdU0sZ0JBQWdCLHdDQUF3QyxrQkFBa0Isd0NBQXdDLFlBQVksNkNBQTZDLGlCQUFpQiw4Q0FBOEMsa0JBQWtCLHVMQUF1TCxTQUFTLGtJQUFrSSxnREFBZ0Qsa0RBQWtELG1DQUFtQyxRQUFRLGlCQUFpQiw2QkFBNkIsTUFBTSw2QkFBNkIsTUFBTSxhQUFhLFdBQVcsbURBQW1ELG9CQUFvQixHQUFHLHFCQUFxQixvQkFBb0IsZ0JBQWdCLE1BQU0sZ0JBQWdCLE1BQU0sZ0JBQWdCLFNBQVMsV0FBVyw2Q0FBNkMsb0JBQW9CLEdBQUcscUJBQXFCLG9CQUFvQixnQkFBZ0IsTUFBTSxnQkFBZ0IsTUFBTSxnQkFBZ0IsU0FBUyxXQUFXLG9DQUFvQyxXQUFXLHFDQUFxQyxhQUFhLDBMQUEwTCwwR0FBMEcsb1BBQW9QLHNIQUFzSCwwREFBMEQsVUFBVSx3SEFBd0gsTUFBTSxxYkFBcWIsa0VBQWtFLGtjQUFrYyx3S0FBd0ssVUFBVSwyRUFBMkUsNkNBQTZDLG9CQUFvQiwrRUFBK0UsR0FBRyxrQ0FBa0MsS0FBSyxtTkFBbU4sR0FBRyxrQkFBa0IsbUJBQW1CLGdWQUFnVixjQUFjLE1BQU0sMklBQTJJLFNBQVMsZUFBZSwyRUFBMkUsNkNBQTZDLFlBQVksNk5BQTZOLEdBQUcsa0JBQWtCLG1CQUFtQiw0WkFBNFosOEdBQThHLFVBQVUsd1BBQXdQLHFDQUFxQywrRkFBK0YsWUFBWSxvQ0FBb0MsMkNBQTJDLG1FQUFtRSwyQ0FBMkMscURBQXFELFFBQVEsK0ZBQStGLFFBQVEsOERBQThELG1JQUFtSSxxREFBcUQsVUFBVSwyR0FBMkcsR0FBRyxrQ0FBa0MsbUJBQW1CLHNCQUFzQiw2Q0FBNkMseUJBQXlCLFFBQVEsMkVBQTJFLHdCQUF3QiwyQ0FBMkMseUJBQXlCLFFBQVEsbUZBQW1GLGlCQUFpQiwrQkFBK0IsbUJBQW1CLFNBQVMsU0FBUyxvQ0FBb0MscUJBQXFCLFFBQVEsb0VBQW9FLGNBQWMsMENBQTBDLFVBQVUseUNBQXlDLDJDQUEyQyx5R0FBeUcsNEJBQTRCLDhEQUE4RCxXQUFXLHVDQUF1QyxpQ0FBaUMsa0RBQWtELHNDQUFzQyxxQ0FBcUMsYUFBYSx3Q0FBd0MseUVBQXlFLDZHQUE2Ryx1RUFBdUUsb0VBQW9FLDJCQUEyQiw4SEFBOEgsUUFBUSxvQkFBb0IsS0FBSyxHQUFHLFNBQVMsMkNBQTJDLG9CQUFvQixXQUFXLCtEQUErRCxNQUFNLDhHQUE4Ryx3REFBd0QsVUFBVSxZQUFZLHNEQUFzRCxJQUFJLEdBQUcsMklBQTJJLG9CQUFvQixPQUFPLFNBQVMsdUJBQXVCLHlDQUF5QyxtQ0FBbUMsZ0NBQWdDLEtBQUssTUFBTSxnQkFBZ0IsUUFBUSxFQUFFLEtBQUssd0dBQXdHLEVBQUUsNkJBQTZCLElBQUksUUFBUSxpQkFBaUIsU0FBUyxRQUFRLDJCQUEyQixTQUFTLFFBQVEsSUFBSSw2REFBNkQsSUFBSSxNQUFNLHFGQUFxRixJQUFJLE1BQU0sSUFBSSwwQ0FBMEMsNkJBQTZCLE1BQU0sTUFBTSxhQUFhLE1BQU0sU0FBUyxNQUFNLGFBQWEsU0FBUyxtR0FBbUcseUJBQXlCLFFBQVEsaUNBQWlDLGtFQUFrRSxRQUFRLG1CQUFtQixRQUFRLG1FQUFtRSxzQkFBc0IscUVBQXFFLFVBQVUsa0VBQWtFLG9CQUFvQixnQkFBZ0IseUhBQXlILG1DQUFtQyxHQUFHLG1HQUFtRyxvQkFBb0IsSUFBSSxVQUFVLFVBQVUsZUFBZSxpQ0FBaUMsb0JBQW9CLDRCQUE0QiwyREFBMkQsZ0JBQWdCLGlJQUFpSSxNQUFNLGtDQUFrQyxVQUFVLGVBQWUsbUNBQW1DLGFBQWEsbUNBQW1DLE9BQU8sd0JBQXdCLE1BQU0sdUNBQXVDLDBCQUEwQixPQUFPLHNCQUFzQixhQUFhLEVBQUUsMEVBQTBFLEVBQUUsa0JBQWtCLElBQUksY0FBYyxTQUFTLHFCQUFxQiw4RkFBOEYsbUJBQW1CLElBQUksZUFBZSxjQUFjLHdCQUF3QiwyQkFBMkIsZUFBZSxXQUFXLHlCQUF5QiwrQkFBK0IsSUFBSSxvRkFBb0YsY0FBYyxlQUFlLFVBQVUscUJBQXFCLHNCQUFzQix5VkFBeVYsaUJBQWlCLGdTQUFnUyx3SUFBd0ksbURBQW1ELGtDQUFrQywwQ0FBMEMsNEJBQTRCLDBCQUEwQiw0QkFBNEIsc0JBQXNCLG9CQUFvQixxQkFBcUIscUJBQXFCLHFCQUFxQixtQkFBbUIsbUJBQW1CLG1CQUFtQixtQkFBbUIsa0JBQWtCLG1CQUFtQixrQkFBa0IsaUJBQWlCLGdCQUFnQixpQkFBaUIsMkVBQTJFLGlCQUFpQixlQUFlLFNBQVMsZ0NBQWdDLFdBQVcsNkRBQTZELFNBQVMsd3lWQUF3eVYsa3RDQUFrdEMsMERBQTBELDRCQUE0QixNQUFNLG9CQUFvQixNQUFNLG9CQUFvQixNQUFNLGdKQUFnSixNQUFNLHNCQUFzQixNQUFNLHVCQUF1QixNQUFNLDRDQUE0Qyw0QkFBNEIsMERBQTBELGlDQUFpQyx5QkFBeUIsbUNBQW1DLDJCQUEyQiw0QkFBNEIsMkNBQTJDLFlBQVksaUZBQWlGLFlBQVksWUFBWSxLQUFLLDBEQUEwRCxtQkFBbUIsa0lBQWtJLDRHQUE0RyxRQUFRLFlBQVksR0FBRyxlQUFlLGtCQUFrQiw0Q0FBNEMsRUFBRSxVQUFVLG9CQUFvQixvQ0FBb0Msa0JBQWtCLDhDQUE4QyxpQ0FBaUMsd0NBQXdDLHVCQUF1QixXQUFXLE9BQU8sNEdBQTRHLFVBQVUsZUFBZSxhQUFhLHFGQUFxRix1RUFBdUUsaUJBQWlCLGtDQUFrQyxNQUFNLEtBQUssS0FBSyx3QkFBd0IsbUVBQW1FLGdCQUFnQixpQ0FBaUMsTUFBTSxLQUFLLHNFQUFzRSxzQkFBc0IsZ0JBQWdCLFFBQVEsV0FBVyxrQkFBa0IsbUJBQW1CLDhFQUE4RSxtQkFBbUIsbUJBQW1CLHdDQUF3QyxrQ0FBa0MscUNBQXFDLFVBQVUsR0FBRyx1QkFBdUIsTUFBTSw0Q0FBNEMsNEJBQTRCLDRMQUE0TCxpQkFBaUIsbUNBQW1DLE1BQU0sd0JBQXdCLG1CQUFPLENBQUMsRUFBSSxTQUFTLG1CQUFPLENBQUMsRUFBTSwwREFBMEQsZUFBZSxjQUFjLHFEQUFxRCxtRkFBbUYsS0FBMEIsNkVBQTZFLG1DQUFtQyw4Q0FBOEMsWUFBWSx1QkFBdUIsZ0JBQWdCLE1BQU0sMEhBQTBILG1KQUFtSiwrUEFBK1AsSUFBSSx5QkFBeUIsc0RBQXNELFNBQVMsWUFBWSxrQkFBa0IsU0FBUyxtQkFBbUIsSUFBSSx5QkFBeUIsK0ZBQStGLFNBQVMsWUFBWSxjQUFjLFNBQVMsR0FBRywyQ0FBMkMsNENBQTRDLGdGQUFnRixXQUFXLHdCQUF3QixXQUFXLHdCQUF3QixnSkFBZ0osNkJBQTZCLHNDQUFzQyxPQUFPLGdCQUFnQiw2QkFBNkIsbUZBQW1GLGdCQUFnQix5QkFBeUIsa0JBQWtCLGNBQWMsS0FBSywwREFBMEQsYUFBYSxJQUFJLEVBQUUsYUFBYSxVQUFVLGdCQUFnQixpQkFBaUIsZ0JBQWdCLHFHQUFxRyxLQUFLLGNBQWMsa0RBQWtELHlDQUF5QywrQkFBK0IsU0FBUyxXQUFXLGdCQUFnQiwyQkFBMkIsY0FBYyxnUEFBZ1AsNkRBQTZELCtCQUErQixjQUFjLEtBQUssV0FBVyxFQUFFLGdCQUFnQix5QkFBeUIsYUFBYSxvR0FBb0csVUFBVSxxREFBcUQsZ0JBQWdCLHFEQUFxRCx5RkFBeUYsY0FBYywyR0FBMkcsb0JBQW9CLHNCQUFzQixxQ0FBcUMsU0FBUyxjQUFjLG9FQUFvRSw2Q0FBNkMseXhqSkFBeXhqSixjQUFjLElBQUksOEJBQThCLGFBQWEsY0FBYyxrQkFBa0IsdURBQXVELFNBQVMsTUFBTSxxRUFBcUUsT0FBTyxnQ0FBZ0MscUJBQXFCLGdDQUFnQyxnQkFBZ0IsZ0JBQWdCLG9CQUFvQiw0R0FBNEcsUUFBUSxZQUFZLEdBQUcsY0FBYyxjQUFjLGNBQWMscUVBQXFFLFFBQVEsWUFBWSwwQkFBMEIsbUJBQW1CLDREQUE0RCx1QkFBdUIsbUJBQW1CLFlBQVksb0JBQW9CLG9DQUFvQyxxQkFBcUIsb0RBQW9ELEVBQUUsbUZBQW1GLDhCQUE4QixTQUFTLHFFQUFxRSxrQkFBa0IsdUdBQXVHLFVBQVUsMEJBQTBCLG1CQUFtQixnRUFBZ0UsMkZBQTJGLEVBQUUsRUFBRSxPQUFPLG1CQUFtQiwwQkFBMEIsWUFBWSxpQ0FBaUMsK0ZBQStGLHlCQUF5QixzQ0FBc0MsdUJBQXVCLFNBQVMsSUFBSSxNQUFNLG1CQUFPLENBQUMsRUFBUSxlQUFlLHVCQUF1Qiw0Q0FBNEMsdUJBQXVCLFNBQVMsaURBQWlELEVBQUUsY0FBYyxnQkFBZ0IsVUFBVSxlQUFlLGlCQUFpQixXQUFXLEtBQUssV0FBVyxnSkFBZ0osa0JBQWtCLGdEQUFnRCwrRkFBK0Ysc0NBQXNDLEdBQUcsb1BBQW9QLGtCQUFrQixVQUFVLGVBQWUsMkJBQTJCLDJCQUEyQixNQUFNLElBQUksMEJBQTBCLFNBQVMseUJBQXlCLDBEQUEwRCxJQUFJLCtDQUErQyxXQUFXLHlCQUF5QixTQUFTLFNBQVMsOERBQThELG9CQUFvQixXQUFXLG9CQUFvQiw4RkFBOEYsZ0RBQWdELElBQUksZUFBZSxlQUFlLHdCQUF3QiwyQkFBMkIsZUFBZSxXQUFXLHlCQUF5QiwrQkFBK0IsSUFBSSw4RUFBOEUsb0JBQW9CLElBQUksc0RBQXNELFdBQVcsSUFBSSxlQUFlLFVBQVUscUJBQXFCLHNCQUFzQix5VkFBeVYsaUJBQWlCLGdTQUFnUyx3SUFBd0ksbURBQW1ELGtDQUFrQywwQ0FBMEMsNEJBQTRCLDBCQUEwQiw0QkFBNEIsc0JBQXNCLG9CQUFvQixxQkFBcUIscUJBQXFCLHFCQUFxQixtQkFBbUIsbUJBQW1CLG1CQUFtQixtQkFBbUIsa0JBQWtCLG1CQUFtQixrQkFBa0IsaUJBQWlCLGdCQUFnQixpQkFBaUIsMkVBQTJFLGdFQUFnRSxrQkFBa0IsWUFBWSxPQUFPLGVBQWUsYUFBYSxxRkFBcUYsdUVBQXVFLGlCQUFpQixrQ0FBa0MsTUFBTSxLQUFLLEtBQUssd0JBQXdCLG1FQUFtRSxnQkFBZ0IsaUNBQWlDLE1BQU0sS0FBSyxzRUFBc0Usc0JBQXNCLGdCQUFnQixRQUFRLFdBQVcsMkNBQTJDLHFDQUFxQyxtREFBbUQscUNBQXFDLG9EQUFvRCxxQ0FBcUMsNkRBQTZELHFDQUFxQyxvREFBb0QscUNBQXFDLDZEQUE2RCxxQ0FBcUMsd0RBQXdELHFDQUFxQyx5REFBeUQscUNBQXFDLGtFQUFrRSxxQ0FBcUMseURBQXlELHFDQUFxQyxrRUFBa0UscUNBQXFDLDBEQUEwRCxxQ0FBcUMsd0RBQXdELHFDQUFxQyxrRUFBa0UscUNBQXFDLDJEQUEyRCxxQ0FBcUMsMkRBQTJELHFDQUFxQyxxREFBcUQscUNBQXFDLG1EQUFtRCxxQ0FBcUMsNkRBQTZELHFDQUFxQyxzREFBc0QscUNBQXFDLHNEQUFzRCxxQ0FBcUMseURBQXlELHFDQUFxQywwREFBMEQscUNBQXFDLG1FQUFtRSxxQ0FBcUMsMERBQTBELHFDQUFxQyxtRUFBbUUscUNBQXFDLDJEQUEyRCxxQ0FBcUMseURBQXlELHFDQUFxQyxtRUFBbUUscUNBQXFDLDREQUE0RCxxQ0FBcUMsNERBQTRELHFDQUFxQywyQkFBMkIscUNBQXFDLGlDQUFpQyxxQ0FBcUMsb0NBQW9DLHFDQUFxQyxrQ0FBa0MscUNBQXFDLGtDQUFrQyxxQ0FBcUMsbUNBQW1DLHFDQUFxQyx3Q0FBd0MscUNBQXFDLG1DQUFtQyxxQ0FBcUMsMkNBQTJDLHFDQUFxQywrQkFBK0IscUNBQXFDLHVDQUF1QyxxQ0FBcUMsa0NBQWtDLHFDQUFxQyxtQ0FBbUMscUNBQXFDLDJDQUEyQyxxQ0FBcUMscUNBQXFDLHFDQUFxQyx3Q0FBd0MscUNBQXFDLGdEQUFnRCxzQ0FBc0Msb0NBQW9DLHNDQUFzQyw0Q0FBNEMsc0NBQXNDLHlDQUF5QyxzQ0FBc0MsK0JBQStCLHNDQUFzQyxvQ0FBb0Msc0NBQXNDLG9DQUFvQyxzQ0FBc0MseUNBQXlDLHNDQUFzQyx1Q0FBdUMsc0NBQXNDLG9DQUFvQyxzQ0FBc0Msa0NBQWtDLHNDQUFzQyx3Q0FBd0Msc0NBQXNDLDRDQUE0QyxzQ0FBc0MsNENBQTRDLHNDQUFzQyx3Q0FBd0Msc0NBQXNDLHVDQUF1QyxzQ0FBc0MsMkNBQTJDLHNDQUFzQywrQ0FBK0Msc0NBQXNDLCtDQUErQyxzQ0FBc0MseUNBQXlDLHNDQUFzQyw2Q0FBNkMsc0NBQXNDLHlDQUF5QyxzQ0FBc0MsMkJBQTJCLHNDQUFzQyxpQ0FBaUMsc0NBQXNDLG9DQUFvQyxzQ0FBc0Msb0NBQW9DLHNDQUFzQyx1Q0FBdUMsc0NBQXNDLDBDQUEwQyxzQ0FBc0MsbUNBQW1DLHNDQUFzQyxpQ0FBaUMsc0NBQXNDLDZDQUE2QyxzQ0FBc0MsaUNBQWlDLHNDQUFzQyx3Q0FBd0Msc0NBQXNDLHdDQUF3QyxzQ0FBc0Msc0NBQXNDLHNDQUFzQyxtQ0FBbUMsc0NBQXNDLDZDQUE2QyxzQ0FBc0MseUNBQXlDLHNDQUFzQyw2QkFBNkIsc0NBQXNDLDJDQUEyQyxzQ0FBc0MsNENBQTRDLHNDQUFzQyx5Q0FBeUMsc0NBQXNDLHVDQUF1QyxzQ0FBc0MsdUNBQXVDLHNDQUFzQyxrREFBa0Qsc0NBQXNDLDBDQUEwQyxzQ0FBc0MsMENBQTBDLHNDQUFzQywrQ0FBK0Msc0NBQXNDLGdEQUFnRCxzQ0FBc0Msa0RBQWtELHNDQUFzQywwQ0FBMEMsc0NBQXNDLDBDQUEwQyxzQ0FBc0MsK0NBQStDLHNDQUFzQyxnREFBZ0Qsc0NBQXNDLHdDQUF3QyxzQ0FBc0Msd0NBQXdDLHNDQUFzQyx1Q0FBdUMsc0NBQXNDLGlDQUFpQyxzQ0FBc0MscUNBQXFDLHNDQUFzQyw4Q0FBOEMsc0NBQXNDLHdDQUF3QyxzQ0FBc0Msc0NBQXNDLHNDQUFzQyx1Q0FBdUMsc0NBQXNDLGlDQUFpQyxzQ0FBc0Msc0NBQXNDLHNDQUFzQyx1Q0FBdUMsc0NBQXNDLDZDQUE2QyxzQ0FBc0MseUNBQXlDLHNDQUFzQyxxQ0FBcUMsc0NBQXNDLHlDQUF5QyxzQ0FBc0MsdUNBQXVDLHNDQUFzQyx5Q0FBeUMsc0NBQXNDLGlEQUFpRCxzQ0FBc0MsMkNBQTJDLHNDQUFzQyw4Q0FBOEMsc0NBQXNDLDBDQUEwQyxzQ0FBc0MsNERBQTRELHNDQUFzQyxpRUFBaUUsc0NBQXNDLCtEQUErRCxzQ0FBc0MsK0RBQStELHNDQUFzQyw4REFBOEQsc0NBQXNDLDREQUE0RCxzQ0FBc0Msc0VBQXNFLHNDQUFzQywwREFBMEQsc0NBQXNDLDBEQUEwRCxzQ0FBc0MsMkRBQTJELHNDQUFzQyxnRUFBZ0Usc0NBQXNDLCtEQUErRCxzQ0FBc0MsaUVBQWlFLHNDQUFzQyw4REFBOEQsc0NBQXNDLCtEQUErRCxzQ0FBc0MsZ0NBQWdDLHNDQUFzQyxzQ0FBc0Msc0NBQXNDLHlDQUF5QyxzQ0FBc0MsdUNBQXVDLHNDQUFzQywyQkFBMkIsc0NBQXNDLGlDQUFpQyxzQ0FBc0Msb0NBQW9DLHNDQUFzQyxvREFBb0Qsc0NBQXNDLG9EQUFvRCxzQ0FBc0Msd0NBQXdDLHNDQUFzQyx3Q0FBd0Msc0NBQXNDLGdDQUFnQyxzQ0FBc0MsbUNBQW1DLHNDQUFzQyw0Q0FBNEMsc0NBQXNDLGdDQUFnQyxzQ0FBc0MsMENBQTBDLHNDQUFzQywwQ0FBMEMsc0NBQXNDLHdDQUF3QyxzQ0FBc0MscUNBQXFDLHNDQUFzQyxzQ0FBc0Msc0NBQXNDLGtDQUFrQyxzQ0FBc0MsMkNBQTJDLHNDQUFzQyxvQkFBb0Isc0NBQXNDLHNCQUFzQixzQ0FBc0MsMkJBQTJCLHNDQUFzQywrQkFBK0Isc0NBQXNDLDZDQUE2QyxzQ0FBc0MsaUNBQWlDLHNDQUFzQyxrQ0FBa0Msc0NBQXNDLHFDQUFxQyxzQ0FBc0MsZ0NBQWdDLHNDQUFzQyxtQ0FBbUMsc0NBQXNDLGlDQUFpQyxzQ0FBc0MseUNBQXlDLHNDQUFzQyxpQ0FBaUMsc0NBQXNDLDhCQUE4QixzQ0FBc0MsOEJBQThCLHNDQUFzQywyQkFBMkIsc0NBQXNDLHNDQUFzQyxzQ0FBc0MsNENBQTRDLHNDQUFzQyw0Q0FBNEMsc0NBQXNDLDBCQUEwQixzQ0FBc0MsNEJBQTRCLHNDQUFzQyxxQ0FBcUMsc0NBQXNDLHVDQUF1QywwREFBMEQsNEJBQTRCLE1BQU0sb0JBQW9CLE1BQU0sb0JBQW9CLE1BQU0sbUpBQW1KLE1BQU0sc0JBQXNCLE1BQU0sdUJBQXVCLE1BQU0sNENBQTRDLDRCQUE0QiwwREFBMEQsaUNBQWlDLHlCQUF5QixtQ0FBbUMsMkJBQTJCLDRCQUE0QiwyQ0FBMkMsWUFBWSxpQ0FBaUMsbUJBQW1CLDhFQUE4RSxtQkFBbUIsbUJBQW1CLEtBQUssbUJBQW1CLG9CQUFvQixnTEFBZ0wsS0FBcUMsQ0FBQyxpQ0FBTyxDQUFDLE9BQVMsQ0FBQyxvQ0FBQyxDQUFDO0FBQUE7QUFBQTtBQUFBLG9HQUFDLENBQUMsU0FBNEgsQ0FBQzs7Ozs7Ozs7O0FDQS9scGU7O0FBRVo7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQyxTQUFTO0FBQzNDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQ0FBMEMsVUFBVTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7OztBQ3ZKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUSxXQUFXOztBQUVuQjtBQUNBO0FBQ0E7QUFDQSxRQUFRLFdBQVc7O0FBRW5CO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLFdBQVc7O0FBRW5CO0FBQ0E7QUFDQSxRQUFRLFVBQVU7O0FBRWxCO0FBQ0E7Ozs7Ozs7QUNuRkEsZTs7Ozs7OztBQ0FhOztBQUViLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGFBQWEsbUJBQU8sQ0FBQyxFQUFhO0FBQ2xDLFdBQVcsbUJBQU8sQ0FBQyxFQUFNOztBQUV6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0RBQXdEO0FBQ3hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSw0QkFBNEIsc0JBQXNCO0FBQ2xEO0FBQ0E7QUFDQSxDOzs7Ozs7QUM5RUEsZTs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLG1CQUFPLENBQUMsRUFBYztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDOURBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixpQkFBaUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBDQUEwQyxzQkFBc0IsRUFBRTtBQUNsRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7Ozs7O0FDeExEO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsU0FBUztBQUN0QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDbEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVhOztBQUViOztBQUVBLGdCQUFnQixtQkFBTyxDQUFDLEVBQXFCOztBQUU3QztBQUNBLHlCQUF5QixtQkFBTyxDQUFDLEVBQWM7QUFDL0MsZ0JBQWdCLG1CQUFPLENBQUMsQ0FBVTtBQUNsQzs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEU7Ozs7OztBQzlDQSxpQkFBaUIsbUJBQU8sQ0FBQyxFQUEyQjs7Ozs7OztBQ0FwRCxpQkFBaUIsbUJBQU8sQ0FBQyxFQUF5Qjs7Ozs7OztBQ0FsRCxpQkFBaUIsbUJBQU8sQ0FBQyxFQUFZOzs7Ozs7O0FDQXJDLGlCQUFpQixtQkFBTyxDQUFDLEVBQVk7Ozs7Ozs7QUNBckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZSxtQkFBTyxDQUFDLENBQVU7QUFDakMsV0FBVyxtQkFBTyxDQUFDLEVBQVE7QUFDM0IsYUFBYSxtQkFBTyxDQUFDLENBQWE7O0FBRWxDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixRQUFRO0FBQ3pCLFFBQVEsUUFBUTs7QUFFaEIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOzs7Ozs7O0FDN0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZSxtQkFBTyxDQUFDLENBQVU7QUFDakMsV0FBVyxtQkFBTyxDQUFDLEVBQVE7QUFDM0IsYUFBYSxtQkFBTyxDQUFDLENBQWE7O0FBRWxDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsUUFBUTtBQUN6QixRQUFRLFFBQVE7O0FBRWhCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7Ozs7OztBQ2xHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlLG1CQUFPLENBQUMsQ0FBVTtBQUNqQyxhQUFhLG1CQUFPLENBQUMsRUFBVTtBQUMvQixXQUFXLG1CQUFPLENBQUMsRUFBUTtBQUMzQixhQUFhLG1CQUFPLENBQUMsQ0FBYTs7QUFFbEM7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7Ozs7OztBQ3BEQSxlQUFlLG1CQUFPLENBQUMsQ0FBVTtBQUNqQyxhQUFhLG1CQUFPLENBQUMsRUFBVTtBQUMvQixXQUFXLG1CQUFPLENBQUMsRUFBUTtBQUMzQixhQUFhLG1CQUFPLENBQUMsQ0FBYTs7QUFFbEM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOzs7Ozs7OztBQ3hEWTtBQUNaLGVBQWUsbUJBQU8sQ0FBQyxDQUFVO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQyxDQUFhOztBQUVsQyxXQUFXLG1CQUFPLENBQUMsQ0FBYTs7QUFFaEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLGVBQWU7QUFDaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUM3Q0EsaUJBQWlCLG1CQUFPLENBQUMsRUFBMkI7Ozs7Ozs7QUNBcEQsNkVBQXNCLG1CQUFPLENBQUMsRUFBZ0I7QUFDOUMsc0JBQXNCLG1CQUFPLENBQUMsRUFBb0I7QUFDbEQsV0FBVyxtQkFBTyxDQUFDLEVBQVE7QUFDM0IsYUFBYSxtQkFBTyxDQUFDLENBQWE7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esc0JBQXNCLGVBQWU7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7Ozs7Ozs7O0FDbkdBLFVBQVUsbUJBQU8sQ0FBQyxHQUFnQjtBQUNsQyxVQUFVLG1CQUFPLENBQUMsRUFBd0I7QUFDMUMsZUFBZSxtQkFBTyxDQUFDLEVBQXNCO0FBQzdDLGVBQWUsbUJBQU8sQ0FBQyxHQUFzQjtBQUM3QyxXQUFXLG1CQUFPLENBQUMsRUFBZ0I7O0FBRW5DO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGdDQUFnQzs7QUFFdkU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsK0NBQStDOztBQUV0RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDbEVBLGlCQUFpQixtQkFBTyxDQUFDLENBQWE7QUFDdEMsVUFBVSxtQkFBTyxDQUFDLEdBQVE7QUFDMUIsZUFBZSxtQkFBTyxDQUFDLENBQVU7QUFDakMsYUFBYSxtQkFBTyxDQUFDLENBQWE7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDakRhOztBQUViLGdCQUFnQixtQkFBTyxDQUFDLEVBQWE7QUFDckMsaUJBQWlCLG1CQUFPLENBQUMsRUFBYztBQUN2QyxjQUFjLG1CQUFPLENBQUMsRUFBVztBQUNqQyxjQUFjLG1CQUFPLENBQUMsR0FBVztBQUNqQyxjQUFjLG1CQUFPLENBQUMsR0FBVzs7Ozs7Ozs7QUNOcEI7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLENBQXFCO0FBQzFDLGVBQWUsbUJBQU8sQ0FBQyxDQUFVOztBQUVqQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLG9CQUFvQjtBQUNyQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQixpQkFBaUI7QUFDbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLG9CQUFvQjtBQUN2Qzs7QUFFQTs7QUFFQSxtQkFBbUIsb0JBQW9CO0FBQ3ZDO0FBQ0EsR0FBRztBQUNIOztBQUVBLG1CQUFtQixvQkFBb0I7QUFDdkM7O0FBRUEsbUJBQW1CLG9CQUFvQjtBQUN2QztBQUNBO0FBQ0E7Ozs7Ozs7O0FDaEVhOztBQUViLGFBQWEsbUJBQU8sQ0FBQyxDQUFxQjtBQUMxQyxlQUFlLG1CQUFPLENBQUMsQ0FBVTs7QUFFakMsYUFBYSxtQkFBTyxDQUFDLEVBQVU7QUFDL0IsVUFBVSxtQkFBTyxDQUFDLEVBQU87O0FBRXpCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsMkJBQTJCO0FBQzdDLGtCQUFrQiwyQkFBMkI7QUFDN0Msa0JBQWtCLDJCQUEyQjtBQUM3QztBQUNBLEdBQUc7QUFDSDtBQUNBLGtCQUFrQiwyQkFBMkI7QUFDN0Msa0JBQWtCLDJCQUEyQjtBQUM3QyxrQkFBa0IsMkJBQTJCO0FBQzdDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7QUNyREEsWUFBWSxtQkFBTyxDQUFDLEVBQVM7QUFDN0IsaUJBQWlCLG1CQUFPLENBQUMsRUFBYztBQUN2QyxhQUFhLG1CQUFPLENBQUMsQ0FBYTtBQUNsQyxtQkFBbUIsbUJBQU8sQ0FBQyxFQUFnQjtBQUMzQyxnQkFBZ0IsbUJBQU8sQ0FBQyxDQUFhO0FBQ3JDLFVBQVUsbUJBQU8sQ0FBQyxFQUFPO0FBQ3pCLFdBQVcsbUJBQU8sQ0FBQyxFQUFnQjtBQUNuQyxlQUFlLG1CQUFPLENBQUMsQ0FBVTs7QUFFakM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7O0FDakhBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNOQSxVQUFVLG1CQUFPLENBQUMsRUFBWTs7QUFFOUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7QUNoQkEsYUFBYSxtQkFBTyxDQUFDLENBQWE7QUFDbEMsVUFBVSxtQkFBTyxDQUFDLEVBQVk7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7QUNoQ0EsYUFBYSxtQkFBTyxDQUFDLENBQWE7O0FBRWxDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7O0FDeEJBLGFBQWEsbUJBQU8sQ0FBQyxDQUFhOztBQUVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7OztBQ3pDQSx3REFBVSxtQkFBTyxDQUFDLEVBQVk7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ2ZBLGFBQWEsbUJBQU8sQ0FBQyxDQUFhO0FBQ2xDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7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O0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUssZUFBZTtBQUNwQixLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQixXQUFXO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ3g2QmE7O0FBRWIsU0FBUyxtQkFBTyxDQUFDLENBQU87QUFDeEIsZUFBZSxtQkFBTyxDQUFDLENBQVU7QUFDakMsV0FBVyxtQkFBTyxDQUFDLEVBQVE7O0FBRTNCLFlBQVksbUJBQU8sQ0FBQyxDQUFVOztBQUU5QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWU7QUFDZix1Q0FBdUM7QUFDdkMsZUFBZTs7QUFFZixxQkFBcUIsaUJBQWlCO0FBQ3RDOztBQUVBLCtCQUErQixRQUFRO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7OztBQ2pMYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsQ0FBVTtBQUM5QixTQUFTLG1CQUFPLENBQUMsQ0FBTztBQUN4QixlQUFlLG1CQUFPLENBQUMsQ0FBVTtBQUNqQyxXQUFXLG1CQUFPLENBQUMsRUFBUTs7QUFFM0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDM3dCYTs7QUFFYixTQUFTLG1CQUFPLENBQUMsQ0FBTztBQUN4QixlQUFlLG1CQUFPLENBQUMsR0FBVztB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YUFBYTtBQUN2QixVQUFVLGFBQWE7QUFDdkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOzs7Ozs7OztBQ2hFQTtBQUNBO0FBQ1k7O0FBRVosV0FBVyxtQkFBTyxDQUFDLEVBQVM7O0FBRTVCLHNCQUFzQixtQkFBTyxDQUFDLEdBQWU7O0FBRTdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7Ozs7O0FDekhELFdBQVcsbUJBQU8sQ0FBQyxFQUFTO0FBQzVCLGVBQWUsbUJBQU8sQ0FBQyxDQUFVOztBQUVqQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG1CQUFPLENBQUMsR0FBSTtBQUN4Qiw0Q0FBNEM7QUFDNUMsaUNBQWlDO0FBQ2pDLFFBQVE7QUFDUjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7OztBQzVEQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0IsZUFBZTtBQUN2QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdDQUFnQyxTQUFTO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCO0FBQzNCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOzs7Ozs7O0FDcEpBLGVBQWUsbUJBQU8sQ0FBQyxDQUFVOztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDeEhBLGVBQWUsbUJBQU8sQ0FBQyxFQUFTO0FBQ2hDLG9CQUFvQixtQkFBTyxDQUFDLEVBQVM7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsRUFBUztBQUNyQyxhQUFhLG1CQUFPLENBQUMsQ0FBcUI7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFF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QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7O0FDbEZBLDZEQUFlLG1CQUFPLENBQUMsRUFBVTtBQUNqQyxTQUFTLG1CQUFPLENBQUMsQ0FBTzs7QUFFeEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FB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Q0E7QUFDQTs7QUFFQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gODMpO1xuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICAgIH1cbiAgfVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gIH1cbn1cbmlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuYWxsb2MgJiYgQnVmZmVyLmFsbG9jVW5zYWZlICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcbn0gZWxzZSB7XG4gIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXG4gIGV4cG9ydHMuQnVmZmVyID0gU2FmZUJ1ZmZlclxufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQnVmZmVyLnByb3RvdHlwZSlcblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVXRpbHNcbiAgZnVuY3Rpb24gYXNzZXJ0ICh2YWwsIG1zZykge1xuICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cblxuICAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZVxuICAvLyBhcmNoaXRlY3R1cmUgeWV0LlxuICBmdW5jdGlvbiBpbmhlcml0cyAoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge307XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIEJOXG5cbiAgZnVuY3Rpb24gQk4gKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKEJOLmlzQk4obnVtYmVyKSkge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB0aGlzLndvcmRzID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICAgIHRoaXMucmVkID0gbnVsbDtcblxuICAgIGlmIChudW1iZXIgIT09IG51bGwpIHtcbiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHtcbiAgICAgICAgZW5kaWFuID0gYmFzZTtcbiAgICAgICAgYmFzZSA9IDEwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQk47XG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0cy5CTiA9IEJOO1xuICB9XG5cbiAgQk4uQk4gPSBCTjtcbiAgQk4ud29yZFNpemUgPSAyNjtcblxuICB2YXIgQnVmZmVyO1xuICB0cnkge1xuICAgIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG5cbiAgQk4uaXNCTiA9IGZ1bmN0aW9uIGlzQk4gKG51bSkge1xuICAgIGlmIChudW0gaW5zdGFuY2VvZiBCTikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bSAhPT0gbnVsbCAmJiB0eXBlb2YgbnVtID09PSAnb2JqZWN0JyAmJlxuICAgICAgbnVtLmNvbnN0cnVjdG9yLndvcmRTaXplID09PSBCTi53b3JkU2l6ZSAmJiBBcnJheS5pc0FycmF5KG51bS53b3Jkcyk7XG4gIH07XG5cbiAgQk4ubWF4ID0gZnVuY3Rpb24gbWF4IChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPiAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ubWluID0gZnVuY3Rpb24gbWluIChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPCAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdCAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0TnVtYmVyKG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0QXJyYXkobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAnaGV4Jykge1xuICAgICAgYmFzZSA9IDE2O1xuICAgIH1cbiAgICBhc3NlcnQoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNik7XG5cbiAgICBudW1iZXIgPSBudW1iZXIudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMrL2csICcnKTtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgc3RhcnQrKztcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gMTYpIHtcbiAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24gX2luaXROdW1iZXIgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDB4NDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgbnVtYmVyICYgMHgzZmZmZmZmIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKVxuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZixcbiAgICAgICAgMVxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMztcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICAvLyBSZXZlcnNlIHRoZSBieXRlc1xuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXRBcnJheSA9IGZ1bmN0aW9uIF9pbml0QXJyYXkgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXlcbiAgICBhc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGggPT09ICdudW1iZXInKTtcbiAgICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgLSAxXSA8PCA4KSB8IChudW1iZXJbaSAtIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUhleCAoc3RyLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgPDw9IDQ7XG5cbiAgICAgIC8vICdhJyAtICdmJ1xuICAgICAgaWYgKGMgPj0gNDkgJiYgYyA8PSA1NCkge1xuICAgICAgICByIHw9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnIC0gJ0YnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcgJiYgYyA8PSAyMikge1xuICAgICAgICByIHw9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByIHw9IGMgJiAweGY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleCAobnVtYmVyLCBzdGFydCkge1xuICAgIC8vIENyZWF0ZSBwb3NzaWJseSBiaWdnZXIgYXJyYXkgdG8gZW5zdXJlIHRoYXQgaXQgZml0cyB0aGUgbnVtYmVyXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwoKG51bWJlci5sZW5ndGggLSBzdGFydCkgLyA2KTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIC8vIFNjYW4gMjQtYml0IGNodW5rcyBhbmQgYWRkIHRoZW0gdG8gdGhlIG51bWJlclxuICAgIHZhciBvZmYgPSAwO1xuICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSA2LCBqID0gMDsgaSA+PSBzdGFydDsgaSAtPSA2KSB7XG4gICAgICB3ID0gcGFyc2VIZXgobnVtYmVyLCBpLCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAvLyBOT1RFOiBgMHgzZmZmZmZgIGlzIGludGVudGlvbmFsIGhlcmUsIDI2Yml0cyBtYXggc2hpZnQgKyAyNGJpdCBoZXggbGltYlxuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgICAgb2ZmICs9IDI0O1xuICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgKyA2ICE9PSBzdGFydCkge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgc3RhcnQsIGkgKyA2KTtcbiAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlQmFzZSAoc3RyLCBzdGFydCwgZW5kLCBtdWwpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciAqPSBtdWw7XG5cbiAgICAgIC8vICdhJ1xuICAgICAgaWYgKGMgPj0gNDkpIHtcbiAgICAgICAgciArPSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3KSB7XG4gICAgICAgIHIgKz0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgKz0gYztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlQmFzZSA9IGZ1bmN0aW9uIF9wYXJzZUJhc2UgKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgICAvLyBJbml0aWFsaXplIGFzIHplcm9cbiAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuXG4gICAgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlXG4gICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7XG4gICAgICBsaW1iTGVuKys7XG4gICAgfVxuICAgIGxpbWJMZW4tLTtcbiAgICBsaW1iUG93ID0gKGxpbWJQb3cgLyBiYXNlKSB8IDA7XG5cbiAgICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjtcbiAgICB2YXIgZW5kID0gTWF0aC5taW4odG90YWwsIHRvdGFsIC0gbW9kKSArIHN0YXJ0O1xuXG4gICAgdmFyIHdvcmQgPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBsaW1iTGVuKSB7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgaSArIGxpbWJMZW4sIGJhc2UpO1xuXG4gICAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2QgIT09IDApIHtcbiAgICAgIHZhciBwb3cgPSAxO1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kOyBpKyspIHtcbiAgICAgICAgcG93ICo9IGJhc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5IChkZXN0KSB7XG4gICAgZGVzdC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXN0LndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICB9XG4gICAgZGVzdC5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gdGhpcy5uZWdhdGl2ZTtcbiAgICBkZXN0LnJlZCA9IHRoaXMucmVkO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICB2YXIgciA9IG5ldyBCTihudWxsKTtcbiAgICB0aGlzLmNvcHkocik7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9leHBhbmQgPSBmdW5jdGlvbiBfZXhwYW5kIChzaXplKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3RyaXAgPSBmdW5jdGlvbiBzdHJpcCAoKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoID4gMSAmJiB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24gKCkge1xuICAgIC8vIC0wID0gMFxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICByZXR1cm4gKHRoaXMucmVkID8gJzxCTi1SOiAnIDogJzxCTjogJykgKyB0aGlzLnRvU3RyaW5nKDE2KSArICc+JztcbiAgfTtcblxuICAvKlxuXG4gIHZhciB6ZXJvcyA9IFtdO1xuICB2YXIgZ3JvdXBTaXplcyA9IFtdO1xuICB2YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG4gIHZhciBzID0gJyc7XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICAgIHplcm9zW2ldID0gcztcbiAgICBzICs9ICcwJztcbiAgfVxuICBncm91cFNpemVzWzBdID0gMDtcbiAgZ3JvdXBTaXplc1sxXSA9IDA7XG4gIGdyb3VwQmFzZXNbMF0gPSAwO1xuICBncm91cEJhc2VzWzFdID0gMDtcbiAgdmFyIGJhc2UgPSAyIC0gMTtcbiAgd2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICAgIHZhciBncm91cFNpemUgPSAwO1xuICAgIHZhciBncm91cEJhc2UgPSAxO1xuICAgIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgICBncm91cEJhc2UgKj0gYmFzZTtcbiAgICAgIGdyb3VwU2l6ZSArPSAxO1xuICAgIH1cbiAgICBncm91cFNpemVzW2Jhc2VdID0gZ3JvdXBTaXplO1xuICAgIGdyb3VwQmFzZXNbYmFzZV0gPSBncm91cEJhc2U7XG4gIH1cblxuICAqL1xuXG4gIHZhciB6ZXJvcyA9IFtcbiAgICAnJyxcbiAgICAnMCcsXG4gICAgJzAwJyxcbiAgICAnMDAwJyxcbiAgICAnMDAwMCcsXG4gICAgJzAwMDAwJyxcbiAgICAnMDAwMDAwJyxcbiAgICAnMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAgXTtcblxuICB2YXIgZ3JvdXBTaXplcyA9IFtcbiAgICAwLCAwLFxuICAgIDI1LCAxNiwgMTIsIDExLCAxMCwgOSwgOCxcbiAgICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICAgIDYsIDYsIDYsIDYsIDYsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1XG4gIF07XG5cbiAgdmFyIGdyb3VwQmFzZXMgPSBbXG4gICAgMCwgMCxcbiAgICAzMzU1NDQzMiwgNDMwNDY3MjEsIDE2Nzc3MjE2LCA0ODgyODEyNSwgNjA0NjYxNzYsIDQwMzUzNjA3LCAxNjc3NzIxNixcbiAgICA0MzA0NjcyMSwgMTAwMDAwMDAsIDE5NDg3MTcxLCAzNTgzMTgwOCwgNjI3NDg1MTcsIDc1Mjk1MzYsIDExMzkwNjI1LFxuICAgIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgICA2NDM2MzQzLCA3OTYyNjI0LCA5NzY1NjI1LCAxMTg4MTM3NiwgMTQzNDg5MDcsIDE3MjEwMzY4LCAyMDUxMTE0OSxcbiAgICAyNDMwMDAwMCwgMjg2MjkxNTEsIDMzNTU0NDMyLCAzOTEzNTM5MywgNDU0MzU0MjQsIDUyNTIxODc1LCA2MDQ2NjE3NlxuICBdO1xuXG4gIEJOLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChiYXNlLCBwYWRkaW5nKSB7XG4gICAgYmFzZSA9IGJhc2UgfHwgMTA7XG4gICAgcGFkZGluZyA9IHBhZGRpbmcgfCAwIHx8IDE7XG5cbiAgICB2YXIgb3V0O1xuICAgIGlmIChiYXNlID09PSAxNiB8fCBiYXNlID09PSAnaGV4Jykge1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgb2ZmID0gMDtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICAgIGNhcnJ5ID0gKHcgPj4+ICgyNCAtIG9mZikpICYgMHhmZmZmZmY7XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICAgIG9mZiArPSAyO1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KSB7XG4gICAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgICAgdmFyIGdyb3VwU2l6ZSA9IGdyb3VwU2l6ZXNbYmFzZV07XG4gICAgICAvLyB2YXIgZ3JvdXBCYXNlID0gTWF0aC5wb3coYmFzZSwgZ3JvdXBTaXplKTtcbiAgICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGMubmVnYXRpdmUgPSAwO1xuICAgICAgd2hpbGUgKCFjLmlzWmVybygpKSB7XG4gICAgICAgIHZhciByID0gYy5tb2RuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7XG4gICAgICAgIGMgPSBjLmlkaXZuKGdyb3VwQmFzZSk7XG5cbiAgICAgICAgaWYgKCFjLmlzWmVybygpKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSByICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIgKCkge1xuICAgIHZhciByZXQgPSB0aGlzLndvcmRzWzBdO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMyAmJiB0aGlzLndvcmRzWzJdID09PSAweDAxKSB7XG4gICAgICAvLyBOT1RFOiBhdCB0aGlzIHN0YWdlIGl0IGlzIGtub3duIHRoYXQgdGhlIHRvcCBiaXQgaXMgc2V0XG4gICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArICh0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgPyAtcmV0IDogcmV0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlciAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpO1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEJ1ZmZlciwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShBcnJheSwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5TGlrZSA9IGZ1bmN0aW9uIHRvQXJyYXlMaWtlIChBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0aGlzLmJ5dGVMZW5ndGgoKTtcbiAgICB2YXIgcmVxTGVuZ3RoID0gbGVuZ3RoIHx8IE1hdGgubWF4KDEsIGJ5dGVMZW5ndGgpO1xuICAgIGFzc2VydChieXRlTGVuZ3RoIDw9IHJlcUxlbmd0aCwgJ2J5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGgnKTtcbiAgICBhc3NlcnQocmVxTGVuZ3RoID4gMCwgJ1JlcXVlc3RlZCBhcnJheSBsZW5ndGggPD0gMCcpO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuICAgIHZhciBsaXR0bGVFbmRpYW4gPSBlbmRpYW4gPT09ICdsZSc7XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheVR5cGUocmVxTGVuZ3RoKTtcblxuICAgIHZhciBiLCBpO1xuICAgIHZhciBxID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmICghbGl0dGxlRW5kaWFuKSB7XG4gICAgICAvLyBBc3N1bWUgYmlnLWVuZGlhblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJlcUxlbmd0aCAtIGJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbcmVxTGVuZ3RoIC0gaSAtIDFdID0gYjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW2ldID0gYjtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGkgPCByZXFMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgaWYgKE1hdGguY2x6MzIpIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHJldHVybiAzMiAtIE1hdGguY2x6MzIodyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHZhciB0ID0gdztcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgICByICs9IDEzO1xuICAgICAgICB0ID4+Pj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDQwKSB7XG4gICAgICAgIHIgKz0gNztcbiAgICAgICAgdCA+Pj49IDc7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDgpIHtcbiAgICAgICAgciArPSA0O1xuICAgICAgICB0ID4+Pj0gNDtcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgICAgciArPSAyO1xuICAgICAgICB0ID4+Pj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICsgdDtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl96ZXJvQml0cyA9IGZ1bmN0aW9uIF96ZXJvQml0cyAodykge1xuICAgIC8vIFNob3J0LWN1dFxuICAgIGlmICh3ID09PSAwKSByZXR1cm4gMjY7XG5cbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHtcbiAgICAgIHIgKz0gMTM7XG4gICAgICB0ID4+Pj0gMTM7XG4gICAgfVxuICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7XG4gICAgICByICs9IDc7XG4gICAgICB0ID4+Pj0gNztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MykgPT09IDApIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7XG4gICAgICByKys7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIC8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbiAgQk4ucHJvdG90eXBlLmJpdExlbmd0aCA9IGZ1bmN0aW9uIGJpdExlbmd0aCAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpO1xuICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9CaXRBcnJheSAobnVtKSB7XG4gICAgdmFyIHcgPSBuZXcgQXJyYXkobnVtLmJpdExlbmd0aCgpKTtcblxuICAgIGZvciAodmFyIGJpdCA9IDA7IGJpdCA8IHcubGVuZ3RoOyBiaXQrKykge1xuICAgICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgICAgd1tiaXRdID0gKG51bS53b3Jkc1tvZmZdICYgKDEgPDwgd2JpdCkpID4+PiB3Yml0O1xuICAgIH1cblxuICAgIHJldHVybiB3O1xuICB9XG5cbiAgLy8gTnVtYmVyIG9mIHRyYWlsaW5nIHplcm8gYml0c1xuICBCTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cyAoKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiAwO1xuXG4gICAgdmFyIHIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGIgPSB0aGlzLl96ZXJvQml0cyh0aGlzLndvcmRzW2ldKTtcbiAgICAgIHIgKz0gYjtcbiAgICAgIGlmIChiICE9PSAyNikgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gYnl0ZUxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpIC8gOCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvVHdvcyA9IGZ1bmN0aW9uIHRvVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzKCkuaW5vdG4od2lkdGgpLmlhZGRuKDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tVHdvcyA9IGZ1bmN0aW9uIGZyb21Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLnRlc3RuKHdpZHRoIC0gMSkpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNOZWcgPSBmdW5jdGlvbiBpc05lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgIT09IDA7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5lZyA9IGZ1bmN0aW9uIGluZWcgKCkge1xuICAgIGlmICghdGhpcy5pc1plcm8oKSkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdW9yID0gZnVuY3Rpb24gaXVvciAobnVtKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldIHwgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVvcihudW0pO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVvciA9IGZ1bmN0aW9uIHVvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdWFuZCA9IGZ1bmN0aW9uIGl1YW5kIChudW0pIHtcbiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpXG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSAmIG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFuZCA9IGZ1bmN0aW9uIGlhbmQgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1YW5kKG51bSk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYW5kKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51YW5kID0gZnVuY3Rpb24gdWFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdWFuZCh0aGlzKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1eG9yID0gZnVuY3Rpb24gaXV4b3IgKG51bSkge1xuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYTtcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldIF4gYi53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcyAhPT0gYSkge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5peG9yID0gZnVuY3Rpb24gaXhvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXV4b3IobnVtKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnV4b3IgPSBmdW5jdGlvbiB1eG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1eG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1eG9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIE5vdCBgYHRoaXNgYCB3aXRoIGBgd2lkdGhgYCBiaXR3aWR0aFxuICBCTi5wcm90b3R5cGUuaW5vdG4gPSBmdW5jdGlvbiBpbm90biAod2lkdGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyAmJiB3aWR0aCA+PSAwKTtcblxuICAgIHZhciBieXRlc05lZWRlZCA9IE1hdGguY2VpbCh3aWR0aCAvIDI2KSB8IDA7XG4gICAgdmFyIGJpdHNMZWZ0ID0gd2lkdGggJSAyNjtcblxuICAgIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHdpdGggbGVhZGluZyB6ZXJvZXNcbiAgICB0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpO1xuXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgYnl0ZXNOZWVkZWQtLTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgY29tcGxldGUgd29yZHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIHJlc2lkdWVcbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAoMHgzZmZmZmZmID4+ICgyNiAtIGJpdHNMZWZ0KSk7XG4gICAgfVxuXG4gICAgLy8gQW5kIHJlbW92ZSBsZWFkaW5nIHplcm9lc1xuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuICh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5vdG4od2lkdGgpO1xuICB9O1xuXG4gIC8vIFNldCBgYml0YCBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNldG4gPSBmdW5jdGlvbiBzZXRuIChiaXQsIHZhbCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG5cbiAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgIHRoaXMuX2V4cGFuZChvZmYgKyAxKTtcblxuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSB8ICgxIDw8IHdiaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAobnVtKSB7XG4gICAgdmFyIHI7XG5cbiAgICAvLyBuZWdhdGl2ZSArIHBvc2l0aXZlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gcG9zaXRpdmUgKyBuZWdhdGl2ZVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhLCBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAvLyBDb3B5IHRoZSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIH0gZWxzZSBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAobnVtKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwICYmIHRoaXMubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSB0aGlzLnN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSBpZiAobnVtLm5lZ2F0aXZlID09PSAwICYmIHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gbnVtLnN1Yih0aGlzKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtcblxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAobnVtKSB7XG4gICAgLy8gdGhpcyAtICgtbnVtKSA9IHRoaXMgKyBudW1cbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgdmFyIHIgPSB0aGlzLmlhZGQobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcblxuICAgIC8vIC10aGlzIC0gbnVtID0gLSh0aGlzICsgbnVtKVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGQobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlXG4gICAgdmFyIGNtcCA9IHRoaXMuY21wKG51bSk7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24gLSB6ZXJvaWZ5XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGEgPiBiXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGNtcCA+IDApIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSAtIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSk7XG5cbiAgICBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbWFsbE11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgdmFyIGxlbiA9IChzZWxmLmxlbmd0aCArIG51bS5sZW5ndGgpIHwgMDtcbiAgICBvdXQubGVuZ3RoID0gbGVuO1xuICAgIGxlbiA9IChsZW4gLSAxKSB8IDA7XG5cbiAgICAvLyBQZWVsIG9uZSBpdGVyYXRpb24gKGNvbXBpbGVyIGNhbid0IGRvIGl0LCBiZWNhdXNlIG9mIGNvZGUgY29tcGxleGl0eSlcbiAgICB2YXIgYSA9IHNlbGYud29yZHNbMF0gfCAwO1xuICAgIHZhciBiID0gbnVtLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgY2FycnkgPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIG91dC53b3Jkc1swXSA9IGxvO1xuXG4gICAgZm9yICh2YXIgayA9IDE7IGsgPCBsZW47IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBjYXJyeSA+Pj4gMjY7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IChrIC0gaikgfCAwO1xuICAgICAgICBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICByID0gYSAqIGIgKyByd29yZDtcbiAgICAgICAgbmNhcnJ5ICs9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkIHwgMDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5IHwgMDtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICAvLyBUT0RPKGluZHV0bnkpOiBpdCBtYXkgYmUgcmVhc29uYWJsZSB0byBvbWl0IGl0IGZvciB1c2VycyB3aG8gZG9uJ3QgbmVlZFxuICAvLyB0byB3b3JrIHdpdGggMjU2LWJpdCBudW1iZXJzLCBvdGhlcndpc2UgaXQgZ2l2ZXMgMjAlIGltcHJvdmVtZW50IGZvciAyNTYtYml0XG4gIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuXG4gIHZhciBjb21iMTBNdWxUbyA9IGZ1bmN0aW9uIGNvbWIxME11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBhID0gc2VsZi53b3JkcztcbiAgICB2YXIgYiA9IG51bS53b3JkcztcbiAgICB2YXIgbyA9IG91dC53b3JkcztcbiAgICB2YXIgYyA9IDA7XG4gICAgdmFyIGxvO1xuICAgIHZhciBtaWQ7XG4gICAgdmFyIGhpO1xuICAgIHZhciBhMCA9IGFbMF0gfCAwO1xuICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjtcbiAgICB2YXIgYWgwID0gYTAgPj4+IDEzO1xuICAgIHZhciBhMSA9IGFbMV0gfCAwO1xuICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjtcbiAgICB2YXIgYWgxID0gYTEgPj4+IDEzO1xuICAgIHZhciBhMiA9IGFbMl0gfCAwO1xuICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjtcbiAgICB2YXIgYWgyID0gYTIgPj4+IDEzO1xuICAgIHZhciBhMyA9IGFbM10gfCAwO1xuICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjtcbiAgICB2YXIgYWgzID0gYTMgPj4+IDEzO1xuICAgIHZhciBhNCA9IGFbNF0gfCAwO1xuICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjtcbiAgICB2YXIgYWg0ID0gYTQgPj4+IDEzO1xuICAgIHZhciBhNSA9IGFbNV0gfCAwO1xuICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjtcbiAgICB2YXIgYWg1ID0gYTUgPj4+IDEzO1xuICAgIHZhciBhNiA9IGFbNl0gfCAwO1xuICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjtcbiAgICB2YXIgYWg2ID0gYTYgPj4+IDEzO1xuICAgIHZhciBhNyA9IGFbN10gfCAwO1xuICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjtcbiAgICB2YXIgYWg3ID0gYTcgPj4+IDEzO1xuICAgIHZhciBhOCA9IGFbOF0gfCAwO1xuICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjtcbiAgICB2YXIgYWg4ID0gYTggPj4+IDEzO1xuICAgIHZhciBhOSA9IGFbOV0gfCAwO1xuICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjtcbiAgICB2YXIgYWg5ID0gYTkgPj4+IDEzO1xuICAgIHZhciBiMCA9IGJbMF0gfCAwO1xuICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjtcbiAgICB2YXIgYmgwID0gYjAgPj4+IDEzO1xuICAgIHZhciBiMSA9IGJbMV0gfCAwO1xuICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjtcbiAgICB2YXIgYmgxID0gYjEgPj4+IDEzO1xuICAgIHZhciBiMiA9IGJbMl0gfCAwO1xuICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjtcbiAgICB2YXIgYmgyID0gYjIgPj4+IDEzO1xuICAgIHZhciBiMyA9IGJbM10gfCAwO1xuICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjtcbiAgICB2YXIgYmgzID0gYjMgPj4+IDEzO1xuICAgIHZhciBiNCA9IGJbNF0gfCAwO1xuICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjtcbiAgICB2YXIgYmg0ID0gYjQgPj4+IDEzO1xuICAgIHZhciBiNSA9IGJbNV0gfCAwO1xuICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjtcbiAgICB2YXIgYmg1ID0gYjUgPj4+IDEzO1xuICAgIHZhciBiNiA9IGJbNl0gfCAwO1xuICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjtcbiAgICB2YXIgYmg2ID0gYjYgPj4+IDEzO1xuICAgIHZhciBiNyA9IGJbN10gfCAwO1xuICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjtcbiAgICB2YXIgYmg3ID0gYjcgPj4+IDEzO1xuICAgIHZhciBiOCA9IGJbOF0gfCAwO1xuICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjtcbiAgICB2YXIgYmg4ID0gYjggPj4+IDEzO1xuICAgIHZhciBiOSA9IGJbOV0gfCAwO1xuICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjtcbiAgICB2YXIgYmg5ID0gYjkgPj4+IDEzO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0gc2VsZi5uZWdhdGl2ZSBeIG51bS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gMTk7XG4gICAgLyogayA9IDAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMCwgYmgwKTtcbiAgICB2YXIgdzAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcwID4+PiAyNikpIHwgMDtcbiAgICB3MCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDEsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpKSB8IDA7XG4gICAgdmFyIHcxID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MSA+Pj4gMjYpKSB8IDA7XG4gICAgdzEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwyLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDIsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMikpIHwgMDtcbiAgICB2YXIgdzIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcyID4+PiAyNikpIHwgMDtcbiAgICB3MiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMykpIHwgMDtcbiAgICB2YXIgdzMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHczID4+PiAyNikpIHwgMDtcbiAgICB3MyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDQsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpKSB8IDA7XG4gICAgdmFyIHc0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NCA+Pj4gMjYpKSB8IDA7XG4gICAgdzQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw1LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDUsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNSkpIHwgMDtcbiAgICB2YXIgdzUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc1ID4+PiAyNikpIHwgMDtcbiAgICB3NSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNikpIHwgMDtcbiAgICB2YXIgdzYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc2ID4+PiAyNikpIHwgMDtcbiAgICB3NiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDcsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpKSB8IDA7XG4gICAgdmFyIHc3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NyA+Pj4gMjYpKSB8IDA7XG4gICAgdzcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw4LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDgsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOCkpIHwgMDtcbiAgICB2YXIgdzggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc4ID4+PiAyNikpIHwgMDtcbiAgICB3OCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDkgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzkgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc5ID4+PiAyNikpIHwgMDtcbiAgICB3OSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDEpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTAgPj4+IDI2KSkgfCAwO1xuICAgIHcxMCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDExICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDIpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMSA+Pj4gMjYpKSB8IDA7XG4gICAgdzExICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgzKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgzKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTIgPj4+IDI2KSkgfCAwO1xuICAgIHcxMiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDQpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEzID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTMgPj4+IDI2KSkgfCAwO1xuICAgIHcxMyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDUpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg2KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg2KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTUgPj4+IDI2KSkgfCAwO1xuICAgIHcxNSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDcpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTYgPj4+IDI2KSkgfCAwO1xuICAgIHcxNiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDgpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNyA+Pj4gMjYpKSB8IDA7XG4gICAgdzE3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg5KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg5KTtcbiAgICB2YXIgdzE4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTggPj4+IDI2KSkgfCAwO1xuICAgIHcxOCAmPSAweDNmZmZmZmY7XG4gICAgb1swXSA9IHcwO1xuICAgIG9bMV0gPSB3MTtcbiAgICBvWzJdID0gdzI7XG4gICAgb1szXSA9IHczO1xuICAgIG9bNF0gPSB3NDtcbiAgICBvWzVdID0gdzU7XG4gICAgb1s2XSA9IHc2O1xuICAgIG9bN10gPSB3NztcbiAgICBvWzhdID0gdzg7XG4gICAgb1s5XSA9IHc5O1xuICAgIG9bMTBdID0gdzEwO1xuICAgIG9bMTFdID0gdzExO1xuICAgIG9bMTJdID0gdzEyO1xuICAgIG9bMTNdID0gdzEzO1xuICAgIG9bMTRdID0gdzE0O1xuICAgIG9bMTVdID0gdzE1O1xuICAgIG9bMTZdID0gdzE2O1xuICAgIG9bMTddID0gdzE3O1xuICAgIG9bMThdID0gdzE4O1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICBvWzE5XSA9IGM7XG4gICAgICBvdXQubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgLy8gUG9seWZpbGwgY29tYlxuICBpZiAoIU1hdGguaW11bCkge1xuICAgIGNvbWIxME11bFRvID0gc21hbGxNdWxUbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpZ011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgdmFyIGhuY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5O1xuICAgICAgaG5jYXJyeSA9IDA7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgICB2YXIgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArICgociAvIDB4NDAwMDAwMCkgfCAwKSkgfCAwO1xuICAgICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAobG8gPj4+IDI2KSkgfCAwO1xuXG4gICAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgICAgbmNhcnJ5ICY9IDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgICAgY2FycnkgPSBuY2Fycnk7XG4gICAgICBuY2FycnkgPSBobmNhcnJ5O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24ganVtYm9NdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgZmZ0bSA9IG5ldyBGRlRNKCk7XG4gICAgcmV0dXJuIGZmdG0ubXVscChzZWxmLCBudW0sIG91dCk7XG4gIH1cblxuICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyAobnVtLCBvdXQpIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkge1xuICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgNjMpIHtcbiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkge1xuICAgICAgcmVzID0gYmlnTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvb2xleS1UdWtleSBhbGdvcml0aG0gZm9yIEZGVFxuICAvLyBzbGlnaHRseSByZXZpc2l0ZWQgdG8gcmVseSBvbiBsb29waW5nIGluc3RlYWQgb2YgcmVjdXJzaW9uXG5cbiAgZnVuY3Rpb24gRkZUTSAoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUIChOKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGBcbiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluICh4LCBsLCBOKSB7XG4gICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTiAtIDEpIHJldHVybiB4O1xuXG4gICAgdmFyIHJiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcmIgfD0gKHggJiAxKSA8PCAobCAtIGkgLSAxKTtcbiAgICAgIHggPj49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJiO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1zIFwidHdlZWRsaW5nXCIgcGhhc2UsIHRoZXJlZm9yZSAnZW11bGF0aW5nJ1xuICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG1cbiAgRkZUTS5wcm90b3R5cGUucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUgKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcnR3c1tpXSA9IHJ3c1tyYnRbaV1dO1xuICAgICAgaXR3c1tpXSA9IGl3c1tyYnRbaV1dO1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0gKHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOLCByYnQpIHtcbiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7XG5cbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IE47IHMgPDw9IDEpIHtcbiAgICAgIHZhciBsID0gcyA8PCAxO1xuXG4gICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpO1xuICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTtcblxuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHtcbiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmO1xuICAgICAgICB2YXIgaXR3ZGZfID0gaXR3ZGY7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHtcbiAgICAgICAgICB2YXIgcmUgPSBydHdzW3AgKyBqXTtcbiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTtcblxuICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTtcbiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107XG5cbiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlvO1xuXG4gICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvO1xuICAgICAgICAgIHJvID0gcng7XG5cbiAgICAgICAgICBydHdzW3AgKyBqXSA9IHJlICsgcm87XG4gICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvO1xuXG4gICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybztcbiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvO1xuXG4gICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi9cbiAgICAgICAgICBpZiAoaiAhPT0gbCkge1xuICAgICAgICAgICAgcnggPSBydHdkZiAqIHJ0d2RmXyAtIGl0d2RmICogaXR3ZGZfO1xuXG4gICAgICAgICAgICBpdHdkZl8gPSBydHdkZiAqIGl0d2RmXyArIGl0d2RmICogcnR3ZGZfO1xuICAgICAgICAgICAgcnR3ZGZfID0gcng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IgKG4sIG0pIHtcbiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTtcbiAgICB2YXIgb2RkID0gTiAmIDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoTiA9IE4gLyAyIHwgMDsgTjsgTiA9IE4gPj4+IDEpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUgKHJ3cywgaXdzLCBOKSB7XG4gICAgaWYgKE4gPD0gMSkgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHJ3c1tpXTtcblxuICAgICAgcndzW2ldID0gcndzW04gLSBpIC0gMV07XG4gICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7XG5cbiAgICAgIHQgPSBpd3NbaV07XG5cbiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTtcbiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm5vcm1hbGl6ZTEzYiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZTEzYiAod3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHcgPSBNYXRoLnJvdW5kKHdzWzIgKiBpICsgMV0gLyBOKSAqIDB4MjAwMCArXG4gICAgICAgIE1hdGgucm91bmQod3NbMiAqIGldIC8gTikgK1xuICAgICAgICBjYXJyeTtcblxuICAgICAgd3NbaV0gPSB3ICYgMHgzZmZmZmZmO1xuXG4gICAgICBpZiAodyA8IDB4NDAwMDAwMCkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cztcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiID0gZnVuY3Rpb24gY29udmVydDEzYiAod3MsIGxlbiwgcndzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYXJyeSA9IGNhcnJ5ICsgKHdzW2ldIHwgMCk7XG5cbiAgICAgIHJ3c1syICogaV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICB9XG5cbiAgICAvLyBQYWQgd2l0aCB6ZXJvZXNcbiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7XG4gICAgICByd3NbaV0gPSAwO1xuICAgIH1cblxuICAgIGFzc2VydChjYXJyeSA9PT0gMCk7XG4gICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YiAoTikge1xuICAgIHZhciBwaCA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcGhbaV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwaDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCAoeCwgeSwgb3V0KSB7XG4gICAgdmFyIE4gPSAyICogdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuXG4gICAgdmFyIHJidCA9IHRoaXMubWFrZVJCVChOKTtcblxuICAgIHZhciBfID0gdGhpcy5zdHViKE4pO1xuXG4gICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBucndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgcm13cyA9IG91dC53b3JkcztcbiAgICBybXdzLmxlbmd0aCA9IE47XG5cbiAgICB0aGlzLmNvbnZlcnQxM2IoeC53b3JkcywgeC5sZW5ndGgsIHJ3cywgTik7XG4gICAgdGhpcy5jb252ZXJ0MTNiKHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTtcblxuICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTtcbiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldO1xuICAgICAgaXdzdFtpXSA9IHJ3c3RbaV0gKiBuaXdzdFtpXSArIGl3c3RbaV0gKiBucndzdFtpXTtcbiAgICAgIHJ3c3RbaV0gPSByeDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTtcbiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpO1xuICAgIHRoaXMuY29uanVnYXRlKHJtd3MsIF8sIE4pO1xuICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7XG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGB0aGlzYCBieSBgbnVtYFxuICBCTi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLm11bFRvKG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBlbXBsb3lpbmcgRkZUXG4gIEJOLnByb3RvdHlwZS5tdWxmID0gZnVuY3Rpb24gbXVsZiAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb25cbiAgQk4ucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm11bFRvKG51bSwgdGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmltdWxuID0gZnVuY3Rpb24gaW11bG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG5cbiAgICAvLyBDYXJyeVxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKiBudW07XG4gICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpO1xuICAgICAgY2FycnkgPj49IDI2O1xuICAgICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIC8vIE5PVEU6IGxvIGlzIDI3Yml0IG1heGltdW1cbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm11bG4gPSBmdW5jdGlvbiBtdWxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKG51bSk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLm11bCh0aGlzKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSk7XG4gIH07XG5cbiAgLy8gTWF0aC5wb3coYHRoaXNgLCBgbnVtYClcbiAgQk4ucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAobnVtKSB7XG4gICAgdmFyIHcgPSB0b0JpdEFycmF5KG51bSk7XG4gICAgaWYgKHcubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IEJOKDEpO1xuXG4gICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lc1xuICAgIHZhciByZXMgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdy5sZW5ndGg7IGkrKywgcmVzID0gcmVzLnNxcigpKSB7XG4gICAgICBpZiAod1tpXSAhPT0gMCkgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCsraSA8IHcubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBxID0gcmVzLnNxcigpOyBpIDwgdy5sZW5ndGg7IGkrKywgcSA9IHEuc3FyKCkpIHtcbiAgICAgICAgaWYgKHdbaV0gPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHJlcy5tdWwocSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0IGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXNobG4gPSBmdW5jdGlvbiBpdXNobG4gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG4gICAgdmFyIGNhcnJ5TWFzayA9ICgweDNmZmZmZmYgPj4+ICgyNiAtIHIpKSA8PCAoMjYgLSByKTtcbiAgICB2YXIgaTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbmV3Q2FycnkgPSB0aGlzLndvcmRzW2ldICYgY2FycnlNYXNrO1xuICAgICAgICB2YXIgYyA9ICgodGhpcy53b3Jkc1tpXSB8IDApIC0gbmV3Q2FycnkpIDw8IHI7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7XG4gICAgICAgIGNhcnJ5ID0gbmV3Q2FycnkgPj4+ICgyNiAtIHIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FycnkpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgICB0aGlzLmxlbmd0aCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzICE9PSAwKSB7XG4gICAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIHNdID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggKz0gcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuIChiaXRzKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodCBpbi1wbGFjZVxuICAvLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbiAgLy8gTk9URTogaWYgYGV4dGVuZGVkYCBpcyBwcmVzZW50IC0gaXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBkZXN0cm95ZWQgYml0c1xuICBCTi5wcm90b3R5cGUuaXVzaHJuID0gZnVuY3Rpb24gaXVzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgaDtcbiAgICBpZiAoaGludCkge1xuICAgICAgaCA9IChoaW50IC0gKGhpbnQgJSAyNikpIC8gMjY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSAwO1xuICAgIH1cblxuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgdmFyIG1hc2tlZFdvcmRzID0gZXh0ZW5kZWQ7XG5cbiAgICBoIC09IHM7XG4gICAgaCA9IE1hdGgubWF4KDAsIGgpO1xuXG4gICAgLy8gRXh0ZW5kZWQgbW9kZSwgY29weSBtYXNrZWQgcGFydFxuICAgIGlmIChtYXNrZWRXb3Jkcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuICAgICAgbWFza2VkV29yZHMubGVuZ3RoID0gcztcbiAgICB9XG5cbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgLy8gTm8tb3AsIHdlIHNob3VsZCBub3QgbW92ZSBhbnl0aGluZyBhdCBhbGxcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gcykge1xuICAgICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2kgKyBzXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiAoY2FycnkgIT09IDAgfHwgaSA+PSBoKTsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgICBjYXJyeSA9IHdvcmQgJiBtYXNrO1xuICAgIH1cblxuICAgIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICAgIGlmIChtYXNrZWRXb3JkcyAmJiBjYXJyeSAhPT0gMCkge1xuICAgICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnRcbiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNobG4gPSBmdW5jdGlvbiB1c2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0XG4gIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaHJuID0gZnVuY3Rpb24gdXNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKTtcbiAgfTtcblxuICAvLyBUZXN0IGlmIG4gYml0IGlzIHNldFxuICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0biAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBiaXQgYW5kIHJldHVyblxuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICAgIHJldHVybiAhISh3ICYgcSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAnaW1hc2tuIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZSBudW1iZXJzJyk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlclxuICBCTi5wcm90b3R5cGUubWFza24gPSBmdW5jdGlvbiBtYXNrbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpO1xuICB9O1xuXG4gIC8vIEFkZCBwbGFpbiBudW1iZXIgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pYWRkbiA9IGZ1bmN0aW9uIGlhZGRuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pc3VibigtbnVtKTtcblxuICAgIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiAodGhpcy53b3Jkc1swXSB8IDApIDwgbnVtKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pc3VibihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aG91dCBjaGVja3NcbiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuIChudW0pIHtcbiAgICB0aGlzLndvcmRzWzBdICs9IG51bTtcblxuICAgIC8vIENhcnJ5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldIC09IDB4NDAwMDAwMDtcbiAgICAgIGlmIChpID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0rKztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZG4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy53b3Jkc1swXSAtPSBudW07XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXJyeVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldIDwgMDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuc3RyaXAoKTtcblxuICAgIC8vIFN1YnRyYWN0aW9uIG92ZXJmbG93XG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAtMSk7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gLSh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICB0aGlzLm5lZ2F0aXZlID0gMTtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl93b3JkRGl2ID0gZnVuY3Rpb24gX3dvcmREaXYgKG51bSwgbW9kZSkge1xuICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtO1xuXG4gICAgLy8gTm9ybWFsaXplXG4gICAgdmFyIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTtcbiAgICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgICBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTtcbiAgICAgIGEuaXVzaGxuKHNoaWZ0KTtcbiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICB2YXIgcTtcblxuICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgcSA9IG5ldyBCTihudWxsKTtcbiAgICAgIHEubGVuZ3RoID0gbSArIDE7XG4gICAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxLndvcmRzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7XG4gICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIGEgPSBkaWZmO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1ttXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgdmFyIHFqID0gKGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICtcbiAgICAgICAgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTtcblxuICAgICAgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXhcbiAgICAgIC8vICgweDdmZmZmZmYpXG4gICAgICBxaiA9IE1hdGgubWluKChxaiAvIGJoaSkgfCAwLCAweDNmZmZmZmYpO1xuXG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCBxaiwgaik7XG4gICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBxai0tO1xuICAgICAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgYS5faXNobG5zdWJtdWwoYiwgMSwgaik7XG4gICAgICAgIGlmICghYS5pc1plcm8oKSkge1xuICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocSkge1xuICAgICAgcS5zdHJpcCgpO1xuICAgIH1cbiAgICBhLnN0cmlwKCk7XG5cbiAgICAvLyBEZW5vcm1hbGl6ZVxuICAgIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMCkge1xuICAgICAgYS5pdXNocm4oc2hpZnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXY6IHEgfHwgbnVsbCxcbiAgICAgIG1vZDogYVxuICAgIH07XG4gIH07XG5cbiAgLy8gTk9URTogMSkgYG1vZGVgIGNhbiBiZSBzZXQgdG8gYG1vZGAgdG8gcmVxdWVzdCBtb2Qgb25seSxcbiAgLy8gICAgICAgdG8gYGRpdmAgdG8gcmVxdWVzdCBkaXYgb25seSwgb3IgYmUgYWJzZW50IHRvXG4gIC8vICAgICAgIHJlcXVlc3QgYm90aCBkaXYgJiBtb2RcbiAgLy8gICAgICAgMikgYHBvc2l0aXZlYCBpcyB0cnVlIGlmIHVuc2lnbmVkIG1vZCBpcyByZXF1ZXN0ZWRcbiAgQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZCAobnVtLCBtb2RlLCBwb3NpdGl2ZSkge1xuICAgIGFzc2VydCghbnVtLmlzWmVybygpKTtcblxuICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiBuZXcgQk4oMClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRpdiwgbW9kLCByZXM7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaWFkZChudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiByZXMubW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICgodGhpcy5uZWdhdGl2ZSAmIG51bS5uZWdhdGl2ZSkgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlzdWIobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHJlcy5kaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gICAgLy8gU3RyaXAgYm90aCBudW1iZXJzIHRvIGFwcHJveGltYXRlIHNoaWZ0IHZhbHVlXG4gICAgaWYgKG51bS5sZW5ndGggPiB0aGlzLmxlbmd0aCB8fCB0aGlzLmNtcChudW0pIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogdGhpc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICAgIGlmIChudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAobW9kZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICAgIG1vZDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSA9PT0gJ21vZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IG51bGwsXG4gICAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCByMiA9PT0gMSAmJiBjbXAgPT09IDApIHJldHVybiBkbS5kaXY7XG5cbiAgICAvLyBSb3VuZCB1cFxuICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICAgIGNhcnJ5ID0gdyAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgIG51bSA9IC1udW07XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmLCAnTnVtYmVyIGlzIHRvbyBiaWcnKTtcblxuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdIHwgMDtcbiAgICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29tcGFyZSB0d28gbnVtYmVycyBhbmQgcmV0dXJuOlxuICAvLyAxIC0gaWYgYHRoaXNgID4gYG51bWBcbiAgLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuICAvLyAtMSAtIGlmIGB0aGlzYCA8IGBudW1gXG4gIEJOLnByb3RvdHlwZS5jbXAgPSBmdW5jdGlvbiBjbXAgKG51bSkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIDE7XG5cbiAgICB2YXIgcmVzID0gdGhpcy51Y21wKG51bSk7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFVuc2lnbmVkIGNvbXBhcmlzb25cbiAgQk4ucHJvdG90eXBlLnVjbXAgPSBmdW5jdGlvbiB1Y21wIChudW0pIHtcbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBoYXZlIHRoZSBzYW1lIHNpZ25cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gMTtcbiAgICBpZiAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgcmVzID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2ldIHwgMDtcblxuICAgICAgaWYgKGEgPT09IGIpIGNvbnRpbnVlO1xuICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgIHJlcyA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXMgPSAxO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0biA9IGZ1bmN0aW9uIGd0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uIGd0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlbiA9IGZ1bmN0aW9uIGd0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGUgPSBmdW5jdGlvbiBndGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0biA9IGZ1bmN0aW9uIGx0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHQgPSBmdW5jdGlvbiBsdCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGVuID0gZnVuY3Rpb24gbHRlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZSA9IGZ1bmN0aW9uIGx0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXFuID0gZnVuY3Rpb24gZXFuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAwO1xuICB9O1xuXG4gIC8vXG4gIC8vIEEgcmVkdWNlIGNvbnRleHQsIGNvdWxkIGJlIHVzaW5nIG1vbnRnb21lcnkgb3Igc29tZXRoaW5nIGJldHRlciwgZGVwZW5kaW5nXG4gIC8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuICAvL1xuICBCTi5yZWQgPSBmdW5jdGlvbiByZWQgKG51bSkge1xuICAgIHJldHVybiBuZXcgUmVkKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvUmVkID0gZnVuY3Rpb24gdG9SZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tUmVkID0gZnVuY3Rpb24gZnJvbVJlZCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAnZnJvbVJlZCB3b3JrcyBvbmx5IHdpdGggbnVtYmVycyBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2ZvcmNlUmVkID0gZnVuY3Rpb24gX2ZvcmNlUmVkIChjdHgpIHtcbiAgICB0aGlzLnJlZCA9IGN0eDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZm9yY2VSZWQgPSBmdW5jdGlvbiBmb3JjZVJlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkQWRkID0gZnVuY3Rpb24gcmVkQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJQWRkID0gZnVuY3Rpb24gcmVkSUFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSUFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTdWIgPSBmdW5jdGlvbiByZWRTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTdWIgPSBmdW5jdGlvbiByZWRJU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNobCA9IGZ1bmN0aW9uIHJlZFNobCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU2hsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkTXVsID0gZnVuY3Rpb24gcmVkTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTcXIgPSBmdW5jdGlvbiByZWRTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3FyID0gZnVuY3Rpb24gcmVkSVNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXNxcih0aGlzKTtcbiAgfTtcblxuICAvLyBTcXVhcmUgcm9vdCBvdmVyIHBcbiAgQk4ucHJvdG90eXBlLnJlZFNxcnQgPSBmdW5jdGlvbiByZWRTcXJ0ICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJbnZtID0gZnVuY3Rpb24gcmVkSW52bSAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSW52bSB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW52bSh0aGlzKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG4gIEJOLnByb3RvdHlwZS5yZWROZWcgPSBmdW5jdGlvbiByZWROZWcgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRQb3cgPSBmdW5jdGlvbiByZWRQb3cgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCAmJiAhbnVtLnJlZCwgJ3JlZFBvdyhub3JtYWxOdW0pJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnBvdyh0aGlzLCBudW0pO1xuICB9O1xuXG4gIC8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG4gIHZhciBwcmltZXMgPSB7XG4gICAgazI1NjogbnVsbCxcbiAgICBwMjI0OiBudWxsLFxuICAgIHAxOTI6IG51bGwsXG4gICAgcDI1NTE5OiBudWxsXG4gIH07XG5cbiAgLy8gUHNldWRvLU1lcnNlbm5lIHByaW1lXG4gIGZ1bmN0aW9uIE1QcmltZSAobmFtZSwgcCkge1xuICAgIC8vIFAgPSAyIF4gTiAtIEtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucCA9IG5ldyBCTihwLCAxNik7XG4gICAgdGhpcy5uID0gdGhpcy5wLmJpdExlbmd0aCgpO1xuICAgIHRoaXMuayA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5uKS5pc3ViKHRoaXMucCk7XG5cbiAgICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xuICB9XG5cbiAgTVByaW1lLnByb3RvdHlwZS5fdG1wID0gZnVuY3Rpb24gX3RtcCAoKSB7XG4gICAgdmFyIHRtcCA9IG5ldyBCTihudWxsKTtcbiAgICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gICAgcmV0dXJuIHRtcDtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlIChudW0pIHtcbiAgICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gICAgLy8gbnVtID0gSEkgKiAoMiBeIE4gLSBLKSArIEhJICogSyArIExPID0gSEkgKiBLICsgTE8gKG1vZCBQKVxuICAgIHZhciByID0gbnVtO1xuICAgIHZhciBybGVuO1xuXG4gICAgZG8ge1xuICAgICAgdGhpcy5zcGxpdChyLCB0aGlzLnRtcCk7XG4gICAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICAgIHIgPSByLmlhZGQodGhpcy50bXApO1xuICAgICAgcmxlbiA9IHIuYml0TGVuZ3RoKCk7XG4gICAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgICB2YXIgY21wID0gcmxlbiA8IHRoaXMubiA/IC0xIDogci51Y21wKHRoaXMucCk7XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgci53b3Jkc1swXSA9IDA7XG4gICAgICByLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICByLmlzdWIodGhpcy5wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgci5zdHJpcCgpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dCkge1xuICAgIGlucHV0Lml1c2hybih0aGlzLm4sIDAsIG91dCk7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICByZXR1cm4gbnVtLmltdWwodGhpcy5rKTtcbiAgfTtcblxuICBmdW5jdGlvbiBLMjU2ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnazI1NicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnKTtcbiAgfVxuICBpbmhlcml0cyhLMjU2LCBNUHJpbWUpO1xuXG4gIEsyNTYucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXRwdXQpIHtcbiAgICAvLyAyNTYgPSA5ICogMjYgKyAyMlxuICAgIHZhciBtYXNrID0gMHgzZmZmZmY7XG5cbiAgICB2YXIgb3V0TGVuID0gTWF0aC5taW4oaW5wdXQubGVuZ3RoLCA5KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dExlbjsgaSsrKSB7XG4gICAgICBvdXRwdXQud29yZHNbaV0gPSBpbnB1dC53b3Jkc1tpXTtcbiAgICB9XG4gICAgb3V0cHV0Lmxlbmd0aCA9IG91dExlbjtcblxuICAgIGlmIChpbnB1dC5sZW5ndGggPD0gOSkge1xuICAgICAgaW5wdXQud29yZHNbMF0gPSAwO1xuICAgICAgaW5wdXQubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTaGlmdCBieSA5IGxpbWJzXG4gICAgdmFyIHByZXYgPSBpbnB1dC53b3Jkc1s5XTtcbiAgICBvdXRwdXQud29yZHNbb3V0cHV0Lmxlbmd0aCsrXSA9IHByZXYgJiBtYXNrO1xuXG4gICAgZm9yIChpID0gMTA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5leHQgPSBpbnB1dC53b3Jkc1tpXSB8IDA7XG4gICAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gKChuZXh0ICYgbWFzaykgPDwgNCkgfCAocHJldiA+Pj4gMjIpO1xuICAgICAgcHJldiA9IG5leHQ7XG4gICAgfVxuICAgIHByZXYgPj4+PSAyMjtcbiAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gcHJldjtcbiAgICBpZiAocHJldiA9PT0gMCAmJiBpbnB1dC5sZW5ndGggPiAxMCkge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDEwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gOTtcbiAgICB9XG4gIH07XG5cbiAgSzI1Ni5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTAwMDAwM2QxID0gWyAweDQwLCAweDNkMSBdXG4gICAgbnVtLndvcmRzW251bS5sZW5ndGhdID0gMDtcbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aCArIDFdID0gMDtcbiAgICBudW0ubGVuZ3RoICs9IDI7XG5cbiAgICAvLyBib3VuZGVkIGF0OiAweDQwICogMHgzZmZmZmZmICsgMHgzZDAgPSAweDEwMDAwMDM5MFxuICAgIHZhciBsbyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gbnVtLndvcmRzW2ldIHwgMDtcbiAgICAgIGxvICs9IHcgKiAweDNkMTtcbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgbG8gPSB3ICogMHg0MCArICgobG8gLyAweDQwMDAwMDApIHwgMCk7XG4gICAgfVxuXG4gICAgLy8gRmFzdCBsZW5ndGggcmVkdWN0aW9uXG4gICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICBmdW5jdGlvbiBQMjI0ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDIyNCcsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnKTtcbiAgfVxuICBpbmhlcml0cyhQMjI0LCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAxOTIgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMTkyJyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicpO1xuICB9XG4gIGluaGVyaXRzKFAxOTIsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDI1NTE5ICgpIHtcbiAgICAvLyAyIF4gMjU1IC0gMTlcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnMjU1MTknLFxuICAgICAgJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnKTtcbiAgfVxuICBpbmhlcml0cyhQMjU1MTksIE1QcmltZSk7XG5cbiAgUDI1NTE5LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxM1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoaSA9IChudW0ud29yZHNbaV0gfCAwKSAqIDB4MTMgKyBjYXJyeTtcbiAgICAgIHZhciBsbyA9IGhpICYgMHgzZmZmZmZmO1xuICAgICAgaGkgPj4+PSAyNjtcblxuICAgICAgbnVtLndvcmRzW2ldID0gbG87XG4gICAgICBjYXJyeSA9IGhpO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgLy8gRXhwb3J0ZWQgbW9zdGx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB1c2UgcGxhaW4gbmFtZSBpbnN0ZWFkXG4gIEJOLl9wcmltZSA9IGZ1bmN0aW9uIHByaW1lIChuYW1lKSB7XG4gICAgLy8gQ2FjaGVkIHZlcnNpb24gb2YgcHJpbWVcbiAgICBpZiAocHJpbWVzW25hbWVdKSByZXR1cm4gcHJpbWVzW25hbWVdO1xuXG4gICAgdmFyIHByaW1lO1xuICAgIGlmIChuYW1lID09PSAnazI1NicpIHtcbiAgICAgIHByaW1lID0gbmV3IEsyNTYoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjI0Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDIyNCgpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AxOTInKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMTkyKCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDI1NTE5Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDI1NTE5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcmltZSAnICsgbmFtZSk7XG4gICAgfVxuICAgIHByaW1lc1tuYW1lXSA9IHByaW1lO1xuXG4gICAgcmV0dXJuIHByaW1lO1xuICB9O1xuXG4gIC8vXG4gIC8vIEJhc2UgcmVkdWN0aW9uIGVuZ2luZVxuICAvL1xuICBmdW5jdGlvbiBSZWQgKG0pIHtcbiAgICBpZiAodHlwZW9mIG0gPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgcHJpbWUgPSBCTi5fcHJpbWUobSk7XG4gICAgICB0aGlzLm0gPSBwcmltZS5wO1xuICAgICAgdGhpcy5wcmltZSA9IHByaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobS5ndG4oMSksICdtb2R1bHVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDEnKTtcbiAgICAgIHRoaXMubSA9IG07XG4gICAgICB0aGlzLnByaW1lID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkxID0gZnVuY3Rpb24gX3ZlcmlmeTEgKGEpIHtcbiAgICBhc3NlcnQoYS5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkLCAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTIgPSBmdW5jdGlvbiBfdmVyaWZ5MiAoYSwgYikge1xuICAgIGFzc2VydCgoYS5uZWdhdGl2ZSB8IGIubmVnYXRpdmUpID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQgJiYgYS5yZWQgPT09IGIucmVkLFxuICAgICAgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltb2QgPSBmdW5jdGlvbiBpbW9kIChhKSB7XG4gICAgaWYgKHRoaXMucHJpbWUpIHJldHVybiB0aGlzLnByaW1lLmlyZWR1Y2UoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICAgIHJldHVybiBhLnVtb2QodGhpcy5tKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tLnN1YihhKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5zdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zaGwgPSBmdW5jdGlvbiBzaGwgKGEsIG51bSkge1xuICAgIHRoaXMuX3ZlcmlmeTEoYSk7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLnVzaGxuKG51bSkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5pbXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLm11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLmltdWwoYSwgYS5jbG9uZSgpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLm11bChhLCBhKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbiBzcXJ0IChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgbW9kMyA9IHRoaXMubS5hbmRsbigzKTtcbiAgICBhc3NlcnQobW9kMyAlIDIgPT09IDEpO1xuXG4gICAgLy8gRmFzdCBjYXNlXG4gICAgaWYgKG1vZDMgPT09IDMpIHtcbiAgICAgIHZhciBwb3cgPSB0aGlzLm0uYWRkKG5ldyBCTigxKSkuaXVzaHJuKDIpO1xuICAgICAgcmV0dXJuIHRoaXMucG93KGEsIHBvdyk7XG4gICAgfVxuXG4gICAgLy8gVG9uZWxsaS1TaGFua3MgYWxnb3JpdGhtIChUb3RhbGx5IHVub3B0aW1pemVkIGFuZCBzbG93KVxuICAgIC8vXG4gICAgLy8gRmluZCBRIGFuZCBTLCB0aGF0IFEgKiAyIF4gUyA9IChQIC0gMSlcbiAgICB2YXIgcSA9IHRoaXMubS5zdWJuKDEpO1xuICAgIHZhciBzID0gMDtcbiAgICB3aGlsZSAoIXEuaXNaZXJvKCkgJiYgcS5hbmRsbigxKSA9PT0gMCkge1xuICAgICAgcysrO1xuICAgICAgcS5pdXNocm4oMSk7XG4gICAgfVxuICAgIGFzc2VydCghcS5pc1plcm8oKSk7XG5cbiAgICB2YXIgb25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHZhciBuT25lID0gb25lLnJlZE5lZygpO1xuXG4gICAgLy8gRmluZCBxdWFkcmF0aWMgbm9uLXJlc2lkdWVcbiAgICAvLyBOT1RFOiBNYXggaXMgc3VjaCBiZWNhdXNlIG9mIGdlbmVyYWxpemVkIFJpZW1hbm4gaHlwb3RoZXNpcy5cbiAgICB2YXIgbHBvdyA9IHRoaXMubS5zdWJuKDEpLml1c2hybigxKTtcbiAgICB2YXIgeiA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICB6ID0gbmV3IEJOKDIgKiB6ICogeikudG9SZWQodGhpcyk7XG5cbiAgICB3aGlsZSAodGhpcy5wb3coeiwgbHBvdykuY21wKG5PbmUpICE9PSAwKSB7XG4gICAgICB6LnJlZElBZGQobk9uZSk7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB0aGlzLnBvdyh6LCBxKTtcbiAgICB2YXIgciA9IHRoaXMucG93KGEsIHEuYWRkbigxKS5pdXNocm4oMSkpO1xuICAgIHZhciB0ID0gdGhpcy5wb3coYSwgcSk7XG4gICAgdmFyIG0gPSBzO1xuICAgIHdoaWxlICh0LmNtcChvbmUpICE9PSAwKSB7XG4gICAgICB2YXIgdG1wID0gdDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyB0bXAuY21wKG9uZSkgIT09IDA7IGkrKykge1xuICAgICAgICB0bXAgPSB0bXAucmVkU3FyKCk7XG4gICAgICB9XG4gICAgICBhc3NlcnQoaSA8IG0pO1xuICAgICAgdmFyIGIgPSB0aGlzLnBvdyhjLCBuZXcgQk4oMSkuaXVzaGxuKG0gLSBpIC0gMSkpO1xuXG4gICAgICByID0gci5yZWRNdWwoYik7XG4gICAgICBjID0gYi5yZWRTcXIoKTtcbiAgICAgIHQgPSB0LnJlZE11bChjKTtcbiAgICAgIG0gPSBpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICB2YXIgaW52ID0gYS5faW52bXAodGhpcy5tKTtcbiAgICBpZiAoaW52Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpbnYubmVnYXRpdmUgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpLnJlZE5lZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludik7XG4gICAgfVxuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChhLCBudW0pIHtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIGlmIChudW0uY21wbigxKSA9PT0gMCkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciB3aW5kb3dTaXplID0gNDtcbiAgICB2YXIgd25kID0gbmV3IEFycmF5KDEgPDwgd2luZG93U2l6ZSk7XG4gICAgd25kWzBdID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHduZFsxXSA9IGE7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCB3bmQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHduZFtpXSA9IHRoaXMubXVsKHduZFtpIC0gMV0sIGEpO1xuICAgIH1cblxuICAgIHZhciByZXMgPSB3bmRbMF07XG4gICAgdmFyIGN1cnJlbnQgPSAwO1xuICAgIHZhciBjdXJyZW50TGVuID0gMDtcbiAgICB2YXIgc3RhcnQgPSBudW0uYml0TGVuZ3RoKCkgJSAyNjtcbiAgICBpZiAoc3RhcnQgPT09IDApIHtcbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbnVtLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IG51bS53b3Jkc1tpXTtcbiAgICAgIGZvciAodmFyIGogPSBzdGFydCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgIHZhciBiaXQgPSAod29yZCA+PiBqKSAmIDE7XG4gICAgICAgIGlmIChyZXMgIT09IHduZFswXSkge1xuICAgICAgICAgIHJlcyA9IHRoaXMuc3FyKHJlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYml0ID09PSAwICYmIGN1cnJlbnQgPT09IDApIHtcbiAgICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPDw9IDE7XG4gICAgICAgIGN1cnJlbnQgfD0gYml0O1xuICAgICAgICBjdXJyZW50TGVuKys7XG4gICAgICAgIGlmIChjdXJyZW50TGVuICE9PSB3aW5kb3dTaXplICYmIChpICE9PSAwIHx8IGogIT09IDApKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSB0aGlzLm11bChyZXMsIHduZFtjdXJyZW50XSk7XG4gICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICBjdXJyZW50ID0gMDtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgdmFyIHIgPSBudW0udW1vZCh0aGlzLm0pO1xuXG4gICAgcmV0dXJuIHIgPT09IG51bSA/IHIuY2xvbmUoKSA6IHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgcmVzID0gbnVtLmNsb25lKCk7XG4gICAgcmVzLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvL1xuICAvLyBNb250Z29tZXJ5IG1ldGhvZCBlbmdpbmVcbiAgLy9cblxuICBCTi5tb250ID0gZnVuY3Rpb24gbW9udCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBNb250KG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gTW9udCAobSkge1xuICAgIFJlZC5jYWxsKHRoaXMsIG0pO1xuXG4gICAgdGhpcy5zaGlmdCA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICBpZiAodGhpcy5zaGlmdCAlIDI2ICE9PSAwKSB7XG4gICAgICB0aGlzLnNoaWZ0ICs9IDI2IC0gKHRoaXMuc2hpZnQgJSAyNik7XG4gICAgfVxuXG4gICAgdGhpcy5yID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLnNoaWZ0KTtcbiAgICB0aGlzLnIyID0gdGhpcy5pbW9kKHRoaXMuci5zcXIoKSk7XG4gICAgdGhpcy5yaW52ID0gdGhpcy5yLl9pbnZtcCh0aGlzLm0pO1xuXG4gICAgdGhpcy5taW52ID0gdGhpcy5yaW52Lm11bCh0aGlzLnIpLmlzdWJuKDEpLmRpdih0aGlzLm0pO1xuICAgIHRoaXMubWludiA9IHRoaXMubWludi51bW9kKHRoaXMucik7XG4gICAgdGhpcy5taW52ID0gdGhpcy5yLnN1Yih0aGlzLm1pbnYpO1xuICB9XG4gIGluaGVyaXRzKE1vbnQsIFJlZCk7XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5pbW9kKG51bS51c2hsbih0aGlzLnNoaWZ0KSk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHIgPSB0aGlzLmltb2QobnVtLm11bCh0aGlzLnJpbnYpKTtcbiAgICByLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSB7XG4gICAgICBhLndvcmRzWzBdID0gMDtcbiAgICAgIGEubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIHZhciB0ID0gYS5pbXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuXG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDApLl9mb3JjZVJlZCh0aGlzKTtcblxuICAgIHZhciB0ID0gYS5tdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIC8vIChBUileLTEgKiBSXjIgPSAoQV4tMSAqIFJeLTEpICogUl4yID0gQV4tMSAqIFJcbiAgICB2YXIgcmVzID0gdGhpcy5pbW9kKGEuX2ludm1wKHRoaXMubSkubXVsKHRoaXMucjIpKTtcbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcbn0pKHR5cGVvZiBtb2R1bGUgPT09ICd1bmRlZmluZWQnIHx8IG1vZHVsZSwgdGhpcyk7XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBhc3NlcnQ7XG5cbmZ1bmN0aW9uIGFzc2VydCh2YWwsIG1zZykge1xuICBpZiAoIXZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG59XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGFzc2VydEVxdWFsKGwsIHIsIG1zZykge1xuICBpZiAobCAhPSByKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgKCdBc3NlcnRpb24gZmFpbGVkOiAnICsgbCArICcgIT0gJyArIHIpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IGV4cG9ydHM7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIG1pbkFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBtaW5VdGlscyA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1jcnlwdG8tdXRpbHMnKTtcblxudXRpbHMuYXNzZXJ0ID0gbWluQXNzZXJ0O1xudXRpbHMudG9BcnJheSA9IG1pblV0aWxzLnRvQXJyYXk7XG51dGlscy56ZXJvMiA9IG1pblV0aWxzLnplcm8yO1xudXRpbHMudG9IZXggPSBtaW5VdGlscy50b0hleDtcbnV0aWxzLmVuY29kZSA9IG1pblV0aWxzLmVuY29kZTtcblxuLy8gUmVwcmVzZW50IG51bSBpbiBhIHctTkFGIGZvcm1cbmZ1bmN0aW9uIGdldE5BRihudW0sIHcsIGJpdHMpIHtcbiAgdmFyIG5hZiA9IG5ldyBBcnJheShNYXRoLm1heChudW0uYml0TGVuZ3RoKCksIGJpdHMpICsgMSk7XG4gIG5hZi5maWxsKDApO1xuXG4gIHZhciB3cyA9IDEgPDwgKHcgKyAxKTtcbiAgdmFyIGsgPSBudW0uY2xvbmUoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG5hZi5sZW5ndGg7IGkrKykge1xuICAgIHZhciB6O1xuICAgIHZhciBtb2QgPSBrLmFuZGxuKHdzIC0gMSk7XG4gICAgaWYgKGsuaXNPZGQoKSkge1xuICAgICAgaWYgKG1vZCA+ICh3cyA+PiAxKSAtIDEpXG4gICAgICAgIHogPSAod3MgPj4gMSkgLSBtb2Q7XG4gICAgICBlbHNlXG4gICAgICAgIHogPSBtb2Q7XG4gICAgICBrLmlzdWJuKHopO1xuICAgIH0gZWxzZSB7XG4gICAgICB6ID0gMDtcbiAgICB9XG5cbiAgICBuYWZbaV0gPSB6O1xuICAgIGsuaXVzaHJuKDEpO1xuICB9XG5cbiAgcmV0dXJuIG5hZjtcbn1cbnV0aWxzLmdldE5BRiA9IGdldE5BRjtcblxuLy8gUmVwcmVzZW50IGsxLCBrMiBpbiBhIEpvaW50IFNwYXJzZSBGb3JtXG5mdW5jdGlvbiBnZXRKU0YoazEsIGsyKSB7XG4gIHZhciBqc2YgPSBbXG4gICAgW10sXG4gICAgW11cbiAgXTtcblxuICBrMSA9IGsxLmNsb25lKCk7XG4gIGsyID0gazIuY2xvbmUoKTtcbiAgdmFyIGQxID0gMDtcbiAgdmFyIGQyID0gMDtcbiAgd2hpbGUgKGsxLmNtcG4oLWQxKSA+IDAgfHwgazIuY21wbigtZDIpID4gMCkge1xuXG4gICAgLy8gRmlyc3QgcGhhc2VcbiAgICB2YXIgbTE0ID0gKGsxLmFuZGxuKDMpICsgZDEpICYgMztcbiAgICB2YXIgbTI0ID0gKGsyLmFuZGxuKDMpICsgZDIpICYgMztcbiAgICBpZiAobTE0ID09PSAzKVxuICAgICAgbTE0ID0gLTE7XG4gICAgaWYgKG0yNCA9PT0gMylcbiAgICAgIG0yNCA9IC0xO1xuICAgIHZhciB1MTtcbiAgICBpZiAoKG0xNCAmIDEpID09PSAwKSB7XG4gICAgICB1MSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtOCA9IChrMS5hbmRsbig3KSArIGQxKSAmIDc7XG4gICAgICBpZiAoKG04ID09PSAzIHx8IG04ID09PSA1KSAmJiBtMjQgPT09IDIpXG4gICAgICAgIHUxID0gLW0xNDtcbiAgICAgIGVsc2VcbiAgICAgICAgdTEgPSBtMTQ7XG4gICAgfVxuICAgIGpzZlswXS5wdXNoKHUxKTtcblxuICAgIHZhciB1MjtcbiAgICBpZiAoKG0yNCAmIDEpID09PSAwKSB7XG4gICAgICB1MiA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtOCA9IChrMi5hbmRsbig3KSArIGQyKSAmIDc7XG4gICAgICBpZiAoKG04ID09PSAzIHx8IG04ID09PSA1KSAmJiBtMTQgPT09IDIpXG4gICAgICAgIHUyID0gLW0yNDtcbiAgICAgIGVsc2VcbiAgICAgICAgdTIgPSBtMjQ7XG4gICAgfVxuICAgIGpzZlsxXS5wdXNoKHUyKTtcblxuICAgIC8vIFNlY29uZCBwaGFzZVxuICAgIGlmICgyICogZDEgPT09IHUxICsgMSlcbiAgICAgIGQxID0gMSAtIGQxO1xuICAgIGlmICgyICogZDIgPT09IHUyICsgMSlcbiAgICAgIGQyID0gMSAtIGQyO1xuICAgIGsxLml1c2hybigxKTtcbiAgICBrMi5pdXNocm4oMSk7XG4gIH1cblxuICByZXR1cm4ganNmO1xufVxudXRpbHMuZ2V0SlNGID0gZ2V0SlNGO1xuXG5mdW5jdGlvbiBjYWNoZWRQcm9wZXJ0eShvYmosIG5hbWUsIGNvbXB1dGVyKSB7XG4gIHZhciBrZXkgPSAnXycgKyBuYW1lO1xuICBvYmoucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gY2FjaGVkUHJvcGVydHkoKSB7XG4gICAgcmV0dXJuIHRoaXNba2V5XSAhPT0gdW5kZWZpbmVkID8gdGhpc1trZXldIDpcbiAgICAgICAgICAgdGhpc1trZXldID0gY29tcHV0ZXIuY2FsbCh0aGlzKTtcbiAgfTtcbn1cbnV0aWxzLmNhY2hlZFByb3BlcnR5ID0gY2FjaGVkUHJvcGVydHk7XG5cbmZ1bmN0aW9uIHBhcnNlQnl0ZXMoYnl0ZXMpIHtcbiAgcmV0dXJuIHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycgPyB1dGlscy50b0FycmF5KGJ5dGVzLCAnaGV4JykgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzO1xufVxudXRpbHMucGFyc2VCeXRlcyA9IHBhcnNlQnl0ZXM7XG5cbmZ1bmN0aW9uIGludEZyb21MRShieXRlcykge1xuICByZXR1cm4gbmV3IEJOKGJ5dGVzLCAnaGV4JywgJ2xlJyk7XG59XG51dGlscy5pbnRGcm9tTEUgPSBpbnRGcm9tTEU7XG5cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5leHBvcnRzLmluaGVyaXRzID0gaW5oZXJpdHM7XG5cbmZ1bmN0aW9uIGlzU3Vycm9nYXRlUGFpcihtc2csIGkpIHtcbiAgaWYgKChtc2cuY2hhckNvZGVBdChpKSAmIDB4RkMwMCkgIT09IDB4RDgwMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoaSA8IDAgfHwgaSArIDEgPj0gbXNnLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKG1zZy5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4RkMwMCkgPT09IDB4REMwMDtcbn1cblxuZnVuY3Rpb24gdG9BcnJheShtc2csIGVuYykge1xuICBpZiAoQXJyYXkuaXNBcnJheShtc2cpKVxuICAgIHJldHVybiBtc2cuc2xpY2UoKTtcbiAgaWYgKCFtc2cpXG4gICAgcmV0dXJuIFtdO1xuICB2YXIgcmVzID0gW107XG4gIGlmICh0eXBlb2YgbXNnID09PSAnc3RyaW5nJykge1xuICAgIGlmICghZW5jKSB7XG4gICAgICAvLyBJbnNwaXJlZCBieSBzdHJpbmdUb1V0ZjhCeXRlQXJyYXkoKSBpbiBjbG9zdXJlLWxpYnJhcnkgYnkgR29vZ2xlXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtbGlicmFyeS9ibG9iLzg1OThkODcyNDJhZjU5YWFjMjMzMjcwNzQyYzg5ODRlMmIyYmRiZTAvY2xvc3VyZS9nb29nL2NyeXB0L2NyeXB0LmpzI0wxMTctTDE0M1xuICAgICAgLy8gQXBhY2hlIExpY2Vuc2UgMi4wXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtbGlicmFyeS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gICAgICB2YXIgcCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYyA9IG1zZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoYyA8IDEyOCkge1xuICAgICAgICAgIHJlc1twKytdID0gYztcbiAgICAgICAgfSBlbHNlIGlmIChjIDwgMjA0OCkge1xuICAgICAgICAgIHJlc1twKytdID0gKGMgPj4gNikgfCAxOTI7XG4gICAgICAgICAgcmVzW3ArK10gPSAoYyAmIDYzKSB8IDEyODtcbiAgICAgICAgfSBlbHNlIGlmIChpc1N1cnJvZ2F0ZVBhaXIobXNnLCBpKSkge1xuICAgICAgICAgIGMgPSAweDEwMDAwICsgKChjICYgMHgwM0ZGKSA8PCAxMCkgKyAobXNnLmNoYXJDb2RlQXQoKytpKSAmIDB4MDNGRik7XG4gICAgICAgICAgcmVzW3ArK10gPSAoYyA+PiAxOCkgfCAyNDA7XG4gICAgICAgICAgcmVzW3ArK10gPSAoKGMgPj4gMTIpICYgNjMpIHwgMTI4O1xuICAgICAgICAgIHJlc1twKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xuICAgICAgICAgIHJlc1twKytdID0gKGMgJiA2MykgfCAxMjg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzW3ArK10gPSAoYyA+PiAxMikgfCAyMjQ7XG4gICAgICAgICAgcmVzW3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XG4gICAgICAgICAgcmVzW3ArK10gPSAoYyAmIDYzKSB8IDEyODtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5jID09PSAnaGV4Jykge1xuICAgICAgbXNnID0gbXNnLnJlcGxhY2UoL1teYS16MC05XSsvaWcsICcnKTtcbiAgICAgIGlmIChtc2cubGVuZ3RoICUgMiAhPT0gMClcbiAgICAgICAgbXNnID0gJzAnICsgbXNnO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkgKz0gMilcbiAgICAgICAgcmVzLnB1c2gocGFyc2VJbnQobXNnW2ldICsgbXNnW2kgKyAxXSwgMTYpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICAgIHJlc1tpXSA9IG1zZ1tpXSB8IDA7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMudG9BcnJheSA9IHRvQXJyYXk7XG5cbmZ1bmN0aW9uIHRvSGV4KG1zZykge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKVxuICAgIHJlcyArPSB6ZXJvMihtc2dbaV0udG9TdHJpbmcoMTYpKTtcbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMudG9IZXggPSB0b0hleDtcblxuZnVuY3Rpb24gaHRvbmwodykge1xuICB2YXIgcmVzID0gKHcgPj4+IDI0KSB8XG4gICAgICAgICAgICAoKHcgPj4+IDgpICYgMHhmZjAwKSB8XG4gICAgICAgICAgICAoKHcgPDwgOCkgJiAweGZmMDAwMCkgfFxuICAgICAgICAgICAgKCh3ICYgMHhmZikgPDwgMjQpO1xuICByZXR1cm4gcmVzID4+PiAwO1xufVxuZXhwb3J0cy5odG9ubCA9IGh0b25sO1xuXG5mdW5jdGlvbiB0b0hleDMyKG1zZywgZW5kaWFuKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdyA9IG1zZ1tpXTtcbiAgICBpZiAoZW5kaWFuID09PSAnbGl0dGxlJylcbiAgICAgIHcgPSBodG9ubCh3KTtcbiAgICByZXMgKz0gemVybzgody50b1N0cmluZygxNikpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnRvSGV4MzIgPSB0b0hleDMyO1xuXG5mdW5jdGlvbiB6ZXJvMih3b3JkKSB7XG4gIGlmICh3b3JkLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gJzAnICsgd29yZDtcbiAgZWxzZVxuICAgIHJldHVybiB3b3JkO1xufVxuZXhwb3J0cy56ZXJvMiA9IHplcm8yO1xuXG5mdW5jdGlvbiB6ZXJvOCh3b3JkKSB7XG4gIGlmICh3b3JkLmxlbmd0aCA9PT0gNylcbiAgICByZXR1cm4gJzAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDYpXG4gICAgcmV0dXJuICcwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNSlcbiAgICByZXR1cm4gJzAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNClcbiAgICByZXR1cm4gJzAwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDMpXG4gICAgcmV0dXJuICcwMDAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMilcbiAgICByZXR1cm4gJzAwMDAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gJzAwMDAwMDAnICsgd29yZDtcbiAgZWxzZVxuICAgIHJldHVybiB3b3JkO1xufVxuZXhwb3J0cy56ZXJvOCA9IHplcm84O1xuXG5mdW5jdGlvbiBqb2luMzIobXNnLCBzdGFydCwgZW5kLCBlbmRpYW4pIHtcbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0O1xuICBhc3NlcnQobGVuICUgNCA9PT0gMCk7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkobGVuIC8gNCk7XG4gIGZvciAodmFyIGkgPSAwLCBrID0gc3RhcnQ7IGkgPCByZXMubGVuZ3RoOyBpKyssIGsgKz0gNCkge1xuICAgIHZhciB3O1xuICAgIGlmIChlbmRpYW4gPT09ICdiaWcnKVxuICAgICAgdyA9IChtc2dba10gPDwgMjQpIHwgKG1zZ1trICsgMV0gPDwgMTYpIHwgKG1zZ1trICsgMl0gPDwgOCkgfCBtc2dbayArIDNdO1xuICAgIGVsc2VcbiAgICAgIHcgPSAobXNnW2sgKyAzXSA8PCAyNCkgfCAobXNnW2sgKyAyXSA8PCAxNikgfCAobXNnW2sgKyAxXSA8PCA4KSB8IG1zZ1trXTtcbiAgICByZXNbaV0gPSB3ID4+PiAwO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLmpvaW4zMiA9IGpvaW4zMjtcblxuZnVuY3Rpb24gc3BsaXQzMihtc2csIGVuZGlhbikge1xuICB2YXIgcmVzID0gbmV3IEFycmF5KG1zZy5sZW5ndGggKiA0KTtcbiAgZm9yICh2YXIgaSA9IDAsIGsgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrLCBrICs9IDQpIHtcbiAgICB2YXIgbSA9IG1zZ1tpXTtcbiAgICBpZiAoZW5kaWFuID09PSAnYmlnJykge1xuICAgICAgcmVzW2tdID0gbSA+Pj4gMjQ7XG4gICAgICByZXNbayArIDFdID0gKG0gPj4+IDE2KSAmIDB4ZmY7XG4gICAgICByZXNbayArIDJdID0gKG0gPj4+IDgpICYgMHhmZjtcbiAgICAgIHJlc1trICsgM10gPSBtICYgMHhmZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzW2sgKyAzXSA9IG0gPj4+IDI0O1xuICAgICAgcmVzW2sgKyAyXSA9IChtID4+PiAxNikgJiAweGZmO1xuICAgICAgcmVzW2sgKyAxXSA9IChtID4+PiA4KSAmIDB4ZmY7XG4gICAgICByZXNba10gPSBtICYgMHhmZjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuc3BsaXQzMiA9IHNwbGl0MzI7XG5cbmZ1bmN0aW9uIHJvdHIzMih3LCBiKSB7XG4gIHJldHVybiAodyA+Pj4gYikgfCAodyA8PCAoMzIgLSBiKSk7XG59XG5leHBvcnRzLnJvdHIzMiA9IHJvdHIzMjtcblxuZnVuY3Rpb24gcm90bDMyKHcsIGIpIHtcbiAgcmV0dXJuICh3IDw8IGIpIHwgKHcgPj4+ICgzMiAtIGIpKTtcbn1cbmV4cG9ydHMucm90bDMyID0gcm90bDMyO1xuXG5mdW5jdGlvbiBzdW0zMihhLCBiKSB7XG4gIHJldHVybiAoYSArIGIpID4+PiAwO1xufVxuZXhwb3J0cy5zdW0zMiA9IHN1bTMyO1xuXG5mdW5jdGlvbiBzdW0zMl8zKGEsIGIsIGMpIHtcbiAgcmV0dXJuIChhICsgYiArIGMpID4+PiAwO1xufVxuZXhwb3J0cy5zdW0zMl8zID0gc3VtMzJfMztcblxuZnVuY3Rpb24gc3VtMzJfNChhLCBiLCBjLCBkKSB7XG4gIHJldHVybiAoYSArIGIgKyBjICsgZCkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTMyXzQgPSBzdW0zMl80O1xuXG5mdW5jdGlvbiBzdW0zMl81KGEsIGIsIGMsIGQsIGUpIHtcbiAgcmV0dXJuIChhICsgYiArIGMgKyBkICsgZSkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTMyXzUgPSBzdW0zMl81O1xuXG5mdW5jdGlvbiBzdW02NChidWYsIHBvcywgYWgsIGFsKSB7XG4gIHZhciBiaCA9IGJ1Zltwb3NdO1xuICB2YXIgYmwgPSBidWZbcG9zICsgMV07XG5cbiAgdmFyIGxvID0gKGFsICsgYmwpID4+PiAwO1xuICB2YXIgaGkgPSAobG8gPCBhbCA/IDEgOiAwKSArIGFoICsgYmg7XG4gIGJ1Zltwb3NdID0gaGkgPj4+IDA7XG4gIGJ1Zltwb3MgKyAxXSA9IGxvO1xufVxuZXhwb3J0cy5zdW02NCA9IHN1bTY0O1xuXG5mdW5jdGlvbiBzdW02NF9oaShhaCwgYWwsIGJoLCBibCkge1xuICB2YXIgbG8gPSAoYWwgKyBibCkgPj4+IDA7XG4gIHZhciBoaSA9IChsbyA8IGFsID8gMSA6IDApICsgYWggKyBiaDtcbiAgcmV0dXJuIGhpID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF9oaSA9IHN1bTY0X2hpO1xuXG5mdW5jdGlvbiBzdW02NF9sbyhhaCwgYWwsIGJoLCBibCkge1xuICB2YXIgbG8gPSBhbCArIGJsO1xuICByZXR1cm4gbG8gPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0X2xvID0gc3VtNjRfbG87XG5cbmZ1bmN0aW9uIHN1bTY0XzRfaGkoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsKSB7XG4gIHZhciBjYXJyeSA9IDA7XG4gIHZhciBsbyA9IGFsO1xuICBsbyA9IChsbyArIGJsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBhbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGNsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBjbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGRsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBkbCA/IDEgOiAwO1xuXG4gIHZhciBoaSA9IGFoICsgYmggKyBjaCArIGRoICsgY2Fycnk7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfNF9oaSA9IHN1bTY0XzRfaGk7XG5cbmZ1bmN0aW9uIHN1bTY0XzRfbG8oYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsKSB7XG4gIHZhciBsbyA9IGFsICsgYmwgKyBjbCArIGRsO1xuICByZXR1cm4gbG8gPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzRfbG8gPSBzdW02NF80X2xvO1xuXG5mdW5jdGlvbiBzdW02NF81X2hpKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCwgZWgsIGVsKSB7XG4gIHZhciBjYXJyeSA9IDA7XG4gIHZhciBsbyA9IGFsO1xuICBsbyA9IChsbyArIGJsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBhbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGNsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBjbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGRsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBkbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGVsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBlbCA/IDEgOiAwO1xuXG4gIHZhciBoaSA9IGFoICsgYmggKyBjaCArIGRoICsgZWggKyBjYXJyeTtcbiAgcmV0dXJuIGhpID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF81X2hpID0gc3VtNjRfNV9oaTtcblxuZnVuY3Rpb24gc3VtNjRfNV9sbyhhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwsIGVoLCBlbCkge1xuICB2YXIgbG8gPSBhbCArIGJsICsgY2wgKyBkbCArIGVsO1xuXG4gIHJldHVybiBsbyA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfNV9sbyA9IHN1bTY0XzVfbG87XG5cbmZ1bmN0aW9uIHJvdHI2NF9oaShhaCwgYWwsIG51bSkge1xuICB2YXIgciA9IChhbCA8PCAoMzIgLSBudW0pKSB8IChhaCA+Pj4gbnVtKTtcbiAgcmV0dXJuIHIgPj4+IDA7XG59XG5leHBvcnRzLnJvdHI2NF9oaSA9IHJvdHI2NF9oaTtcblxuZnVuY3Rpb24gcm90cjY0X2xvKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByID0gKGFoIDw8ICgzMiAtIG51bSkpIHwgKGFsID4+PiBudW0pO1xuICByZXR1cm4gciA+Pj4gMDtcbn1cbmV4cG9ydHMucm90cjY0X2xvID0gcm90cjY0X2xvO1xuXG5mdW5jdGlvbiBzaHI2NF9oaShhaCwgYWwsIG51bSkge1xuICByZXR1cm4gYWggPj4+IG51bTtcbn1cbmV4cG9ydHMuc2hyNjRfaGkgPSBzaHI2NF9oaTtcblxuZnVuY3Rpb24gc2hyNjRfbG8oYWgsIGFsLCBudW0pIHtcbiAgdmFyIHIgPSAoYWggPDwgKDMyIC0gbnVtKSkgfCAoYWwgPj4+IG51bSk7XG4gIHJldHVybiByID4+PiAwO1xufVxuZXhwb3J0cy5zaHI2NF9sbyA9IHNocjY0X2xvO1xuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtXG52YXIgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyJykuU3RyaW5nRGVjb2RlclxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBDaXBoZXJCYXNlIChoYXNoTW9kZSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLmhhc2hNb2RlID0gdHlwZW9mIGhhc2hNb2RlID09PSAnc3RyaW5nJ1xuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHRoaXNbaGFzaE1vZGVdID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9IGVsc2Uge1xuICAgIHRoaXMuZmluYWwgPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH1cbiAgaWYgKHRoaXMuX2ZpbmFsKSB7XG4gICAgdGhpcy5fX2ZpbmFsID0gdGhpcy5fZmluYWxcbiAgICB0aGlzLl9maW5hbCA9IG51bGxcbiAgfVxuICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuICB0aGlzLl9lbmNvZGluZyA9IG51bGxcbn1cbmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSlcblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGlucHV0RW5jLCBvdXRwdXRFbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBpbnB1dEVuYylcbiAgfVxuXG4gIHZhciBvdXREYXRhID0gdGhpcy5fdXBkYXRlKGRhdGEpXG4gIGlmICh0aGlzLmhhc2hNb2RlKSByZXR1cm4gdGhpc1xuXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jKVxuICB9XG5cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuZ2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYWFkIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChkYXRhLCBfLCBuZXh0KSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgICAgdGhpcy5fdXBkYXRlKGRhdGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaCh0aGlzLl91cGRhdGUoZGF0YSkpXG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9IGZpbmFsbHkge1xuICAgIG5leHQoZXJyKVxuICB9XG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbiAoZG9uZSkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgdGhpcy5wdXNoKHRoaXMuX19maW5hbCgpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9XG5cbiAgZG9uZShlcnIpXG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmluYWxPckRpZ2VzdCA9IGZ1bmN0aW9uIChvdXRwdXRFbmMpIHtcbiAgdmFyIG91dERhdGEgPSB0aGlzLl9fZmluYWwoKSB8fCBCdWZmZXIuYWxsb2MoMClcbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RvU3RyaW5nID0gZnVuY3Rpb24gKHZhbHVlLCBlbmMsIGZpbikge1xuICBpZiAoIXRoaXMuX2RlY29kZXIpIHtcbiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKVxuICAgIHRoaXMuX2VuY29kaW5nID0gZW5jXG4gIH1cblxuICBpZiAodGhpcy5fZW5jb2RpbmcgIT09IGVuYykgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuXG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluKSB7XG4gICAgb3V0ICs9IHRoaXMuX2RlY29kZXIuZW5kKClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDaXBoZXJCYXNlXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZS5cbi8vIFNpbmNlIEpTIGRvZXNuJ3QgaGF2ZSBtdWx0aXBsZSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzXG4vLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXG4vLyBXcml0YWJsZS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgfXJldHVybiBrZXlzO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IER1cGxleDtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgUmVhZGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fcmVhZGFibGUnKTtcbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV93cml0YWJsZScpO1xuXG51dGlsLmluaGVyaXRzKER1cGxleCwgUmVhZGFibGUpO1xuXG57XG4gIC8vIGF2b2lkIHNjb3BlIGNyZWVwLCB0aGUga2V5cyBhcnJheSBjYW4gdGhlbiBiZSBjb2xsZWN0ZWRcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFdyaXRhYmxlLnByb3RvdHlwZSk7XG4gIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgIHZhciBtZXRob2QgPSBrZXlzW3ZdO1xuICAgIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKSBEdXBsZXgucHJvdG90eXBlW21ldGhvZF0gPSBXcml0YWJsZS5wcm90b3R5cGVbbWV0aG9kXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBEdXBsZXgob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgcmV0dXJuIG5ldyBEdXBsZXgob3B0aW9ucyk7XG5cbiAgUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgV3JpdGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJlYWRhYmxlID09PSBmYWxzZSkgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKSB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgdGhpcy5hbGxvd0hhbGZPcGVuID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSkgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XG5cbiAgdGhpcy5vbmNlKCdlbmQnLCBvbmVuZCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gdGhlIG5vLWhhbGYtb3BlbiBlbmZvcmNlclxuZnVuY3Rpb24gb25lbmQoKSB7XG4gIC8vIGlmIHdlIGFsbG93IGhhbGYtb3BlbiBzdGF0ZSwgb3IgaWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsXG4gIC8vIHRoZW4gd2UncmUgb2suXG4gIGlmICh0aGlzLmFsbG93SGFsZk9wZW4gfHwgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCkgcmV0dXJuO1xuXG4gIC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi5cbiAgLy8gQnV0IGFsbG93IG1vcmUgd3JpdGVzIHRvIGhhcHBlbiBpbiB0aGlzIHRpY2suXG4gIHBuYS5uZXh0VGljayhvbkVuZE5ULCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gb25FbmROVChzZWxmKSB7XG4gIHNlbGYuZW5kKCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbkR1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIHRoaXMuZW5kKCk7XG5cbiAgcG5hLm5leHRUaWNrKGNiLCBlcnIpO1xufTsiLCIndXNlIHN0cmljdCdcblxuLy8gbGltaXQgb2YgQ3J5cHRvLmdldFJhbmRvbVZhbHVlcygpXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3J5cHRvL2dldFJhbmRvbVZhbHVlc1xudmFyIE1BWF9CWVRFUyA9IDY1NTM2XG5cbi8vIE5vZGUgc3VwcG9ydHMgcmVxdWVzdGluZyB1cCB0byB0aGlzIG51bWJlciBvZiBieXRlc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvbWFzdGVyL2xpYi9pbnRlcm5hbC9jcnlwdG8vcmFuZG9tLmpzI0w0OFxudmFyIE1BWF9VSU5UMzIgPSA0Mjk0OTY3Mjk1XG5cbmZ1bmN0aW9uIG9sZEJyb3dzZXIgKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXIuXFxuVXNlIENocm9tZSwgRmlyZWZveCBvciBJbnRlcm5ldCBFeHBsb3JlciAxMScpXG59XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIGNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvXG5cbmlmIChjcnlwdG8gJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJhbmRvbUJ5dGVzXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IG9sZEJyb3dzZXJcbn1cblxuZnVuY3Rpb24gcmFuZG9tQnl0ZXMgKHNpemUsIGNiKSB7XG4gIC8vIHBoYW50b21qcyBuZWVkcyB0byB0aHJvd1xuICBpZiAoc2l6ZSA+IE1BWF9VSU5UMzIpIHRocm93IG5ldyBSYW5nZUVycm9yKCdyZXF1ZXN0ZWQgdG9vIG1hbnkgcmFuZG9tIGJ5dGVzJylcblxuICB2YXIgYnl0ZXMgPSBCdWZmZXIuYWxsb2NVbnNhZmUoc2l6ZSlcblxuICBpZiAoc2l6ZSA+IDApIHsgIC8vIGdldFJhbmRvbVZhbHVlcyBmYWlscyBvbiBJRSBpZiBzaXplID09IDBcbiAgICBpZiAoc2l6ZSA+IE1BWF9CWVRFUykgeyAvLyB0aGlzIGlzIHRoZSBtYXggYnl0ZXMgY3J5cHRvLmdldFJhbmRvbVZhbHVlc1xuICAgICAgLy8gY2FuIGRvIGF0IG9uY2Ugc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS93aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlc1xuICAgICAgZm9yICh2YXIgZ2VuZXJhdGVkID0gMDsgZ2VuZXJhdGVkIDwgc2l6ZTsgZ2VuZXJhdGVkICs9IE1BWF9CWVRFUykge1xuICAgICAgICAvLyBidWZmZXIuc2xpY2UgYXV0b21hdGljYWxseSBjaGVja3MgaWYgdGhlIGVuZCBpcyBwYXN0IHRoZSBlbmQgb2ZcbiAgICAgICAgLy8gdGhlIGJ1ZmZlciBzbyB3ZSBkb24ndCBoYXZlIHRvIGhlcmVcbiAgICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhieXRlcy5zbGljZShnZW5lcmF0ZWQsIGdlbmVyYXRlZCArIE1BWF9CWVRFUykpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYnl0ZXMpXG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNiKG51bGwsIGJ5dGVzKVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG4vLyBwcm90b3R5cGUgY2xhc3MgZm9yIGhhc2ggZnVuY3Rpb25zXG5mdW5jdGlvbiBIYXNoIChibG9ja1NpemUsIGZpbmFsU2l6ZSkge1xuICB0aGlzLl9ibG9jayA9IEJ1ZmZlci5hbGxvYyhibG9ja1NpemUpXG4gIHRoaXMuX2ZpbmFsU2l6ZSA9IGZpbmFsU2l6ZVxuICB0aGlzLl9ibG9ja1NpemUgPSBibG9ja1NpemVcbiAgdGhpcy5fbGVuID0gMFxufVxuXG5IYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmMgPSBlbmMgfHwgJ3V0ZjgnXG4gICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuYylcbiAgfVxuXG4gIHZhciBibG9jayA9IHRoaXMuX2Jsb2NrXG4gIHZhciBibG9ja1NpemUgPSB0aGlzLl9ibG9ja1NpemVcbiAgdmFyIGxlbmd0aCA9IGRhdGEubGVuZ3RoXG4gIHZhciBhY2N1bSA9IHRoaXMuX2xlblxuXG4gIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IGxlbmd0aDspIHtcbiAgICB2YXIgYXNzaWduZWQgPSBhY2N1bSAlIGJsb2NrU2l6ZVxuICAgIHZhciByZW1haW5kZXIgPSBNYXRoLm1pbihsZW5ndGggLSBvZmZzZXQsIGJsb2NrU2l6ZSAtIGFzc2lnbmVkKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1haW5kZXI7IGkrKykge1xuICAgICAgYmxvY2tbYXNzaWduZWQgKyBpXSA9IGRhdGFbb2Zmc2V0ICsgaV1cbiAgICB9XG5cbiAgICBhY2N1bSArPSByZW1haW5kZXJcbiAgICBvZmZzZXQgKz0gcmVtYWluZGVyXG5cbiAgICBpZiAoKGFjY3VtICUgYmxvY2tTaXplKSA9PT0gMCkge1xuICAgICAgdGhpcy5fdXBkYXRlKGJsb2NrKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuX2xlbiArPSBsZW5ndGhcbiAgcmV0dXJuIHRoaXNcbn1cblxuSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuYykge1xuICB2YXIgcmVtID0gdGhpcy5fbGVuICUgdGhpcy5fYmxvY2tTaXplXG5cbiAgdGhpcy5fYmxvY2tbcmVtXSA9IDB4ODBcblxuICAvLyB6ZXJvIChyZW0gKyAxKSB0cmFpbGluZyBiaXRzLCB3aGVyZSAocmVtICsgMSkgaXMgdGhlIHNtYWxsZXN0XG4gIC8vIG5vbi1uZWdhdGl2ZSBzb2x1dGlvbiB0byB0aGUgZXF1YXRpb24gKGxlbmd0aCArIDEgKyAocmVtICsgMSkpID09PSBmaW5hbFNpemUgbW9kIGJsb2NrU2l6ZVxuICB0aGlzLl9ibG9jay5maWxsKDAsIHJlbSArIDEpXG5cbiAgaWYgKHJlbSA+PSB0aGlzLl9maW5hbFNpemUpIHtcbiAgICB0aGlzLl91cGRhdGUodGhpcy5fYmxvY2spXG4gICAgdGhpcy5fYmxvY2suZmlsbCgwKVxuICB9XG5cbiAgdmFyIGJpdHMgPSB0aGlzLl9sZW4gKiA4XG5cbiAgLy8gdWludDMyXG4gIGlmIChiaXRzIDw9IDB4ZmZmZmZmZmYpIHtcbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGJpdHMsIHRoaXMuX2Jsb2NrU2l6ZSAtIDQpXG5cbiAgLy8gdWludDY0XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxvd0JpdHMgPSAoYml0cyAmIDB4ZmZmZmZmZmYpID4+PiAwXG4gICAgdmFyIGhpZ2hCaXRzID0gKGJpdHMgLSBsb3dCaXRzKSAvIDB4MTAwMDAwMDAwXG5cbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGhpZ2hCaXRzLCB0aGlzLl9ibG9ja1NpemUgLSA4KVxuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUobG93Qml0cywgdGhpcy5fYmxvY2tTaXplIC0gNClcbiAgfVxuXG4gIHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaylcbiAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoKClcblxuICByZXR1cm4gZW5jID8gaGFzaC50b1N0cmluZyhlbmMpIDogaGFzaFxufVxuXG5IYXNoLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ191cGRhdGUgbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzcycpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaFxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgTUQ1ID0gcmVxdWlyZSgnbWQ1LmpzJylcbnZhciBSSVBFTUQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKVxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG52YXIgQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcblxuZnVuY3Rpb24gSGFzaCAoaGFzaCkge1xuICBCYXNlLmNhbGwodGhpcywgJ2RpZ2VzdCcpXG5cbiAgdGhpcy5faGFzaCA9IGhhc2hcbn1cblxuaW5oZXJpdHMoSGFzaCwgQmFzZSlcblxuSGFzaC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG59XG5cbkhhc2gucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2hhc2guZGlnZXN0KClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVIYXNoIChhbGcpIHtcbiAgYWxnID0gYWxnLnRvTG93ZXJDYXNlKClcbiAgaWYgKGFsZyA9PT0gJ21kNScpIHJldHVybiBuZXcgTUQ1KClcbiAgaWYgKGFsZyA9PT0gJ3JtZDE2MCcgfHwgYWxnID09PSAncmlwZW1kMTYwJykgcmV0dXJuIG5ldyBSSVBFTUQxNjAoKVxuXG4gIHJldHVybiBuZXcgSGFzaChzaGEoYWxnKSlcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuXG5mdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICBpZiAoQXJyYXkuaXNBcnJheSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXI7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geG9yIChhLCBiKSB7XG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKGxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgYnVmZmVyW2ldID0gYVtpXSBeIGJbaV1cbiAgfVxuXG4gIHJldHVybiBidWZmZXJcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gQmxvY2tIYXNoKCkge1xuICB0aGlzLnBlbmRpbmcgPSBudWxsO1xuICB0aGlzLnBlbmRpbmdUb3RhbCA9IDA7XG4gIHRoaXMuYmxvY2tTaXplID0gdGhpcy5jb25zdHJ1Y3Rvci5ibG9ja1NpemU7XG4gIHRoaXMub3V0U2l6ZSA9IHRoaXMuY29uc3RydWN0b3Iub3V0U2l6ZTtcbiAgdGhpcy5obWFjU3RyZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLmhtYWNTdHJlbmd0aDtcbiAgdGhpcy5wYWRMZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLnBhZExlbmd0aCAvIDg7XG4gIHRoaXMuZW5kaWFuID0gJ2JpZyc7XG5cbiAgdGhpcy5fZGVsdGE4ID0gdGhpcy5ibG9ja1NpemUgLyA4O1xuICB0aGlzLl9kZWx0YTMyID0gdGhpcy5ibG9ja1NpemUgLyAzMjtcbn1cbmV4cG9ydHMuQmxvY2tIYXNoID0gQmxvY2tIYXNoO1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIGVuYykge1xuICAvLyBDb252ZXJ0IG1lc3NhZ2UgdG8gYXJyYXksIHBhZCBpdCwgYW5kIGpvaW4gaW50byAzMmJpdCBibG9ja3NcbiAgbXNnID0gdXRpbHMudG9BcnJheShtc2csIGVuYyk7XG4gIGlmICghdGhpcy5wZW5kaW5nKVxuICAgIHRoaXMucGVuZGluZyA9IG1zZztcbiAgZWxzZVxuICAgIHRoaXMucGVuZGluZyA9IHRoaXMucGVuZGluZy5jb25jYXQobXNnKTtcbiAgdGhpcy5wZW5kaW5nVG90YWwgKz0gbXNnLmxlbmd0aDtcblxuICAvLyBFbm91Z2ggZGF0YSwgdHJ5IHVwZGF0aW5nXG4gIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID49IHRoaXMuX2RlbHRhOCkge1xuICAgIG1zZyA9IHRoaXMucGVuZGluZztcblxuICAgIC8vIFByb2Nlc3MgcGVuZGluZyBkYXRhIGluIGJsb2Nrc1xuICAgIHZhciByID0gbXNnLmxlbmd0aCAlIHRoaXMuX2RlbHRhODtcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2cuc2xpY2UobXNnLmxlbmd0aCAtIHIsIG1zZy5sZW5ndGgpO1xuICAgIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5wZW5kaW5nID0gbnVsbDtcblxuICAgIG1zZyA9IHV0aWxzLmpvaW4zMihtc2csIDAsIG1zZy5sZW5ndGggLSByLCB0aGlzLmVuZGlhbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IHRoaXMuX2RlbHRhMzIpXG4gICAgICB0aGlzLl91cGRhdGUobXNnLCBpLCBpICsgdGhpcy5fZGVsdGEzMik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICB0aGlzLnVwZGF0ZSh0aGlzLl9wYWQoKSk7XG4gIGFzc2VydCh0aGlzLnBlbmRpbmcgPT09IG51bGwpO1xuXG4gIHJldHVybiB0aGlzLl9kaWdlc3QoZW5jKTtcbn07XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIHBhZCgpIHtcbiAgdmFyIGxlbiA9IHRoaXMucGVuZGluZ1RvdGFsO1xuICB2YXIgYnl0ZXMgPSB0aGlzLl9kZWx0YTg7XG4gIHZhciBrID0gYnl0ZXMgLSAoKGxlbiArIHRoaXMucGFkTGVuZ3RoKSAlIGJ5dGVzKTtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShrICsgdGhpcy5wYWRMZW5ndGgpO1xuICByZXNbMF0gPSAweDgwO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGs7IGkrKylcbiAgICByZXNbaV0gPSAwO1xuXG4gIC8vIEFwcGVuZCBsZW5ndGhcbiAgbGVuIDw8PSAzO1xuICBpZiAodGhpcy5lbmRpYW4gPT09ICdiaWcnKSB7XG4gICAgZm9yICh2YXIgdCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuXG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMjQpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDE2KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiA4KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSBsZW4gJiAweGZmO1xuICB9IGVsc2Uge1xuICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDgpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDE2KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAyNCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcblxuICAgIGZvciAodCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG4iLCJ2YXIgYXNuMSA9IGV4cG9ydHM7XG5cbmFzbjEuYmlnbnVtID0gcmVxdWlyZSgnYm4uanMnKTtcblxuYXNuMS5kZWZpbmUgPSByZXF1aXJlKCcuL2FzbjEvYXBpJykuZGVmaW5lO1xuYXNuMS5iYXNlID0gcmVxdWlyZSgnLi9hc24xL2Jhc2UnKTtcbmFzbjEuY29uc3RhbnRzID0gcmVxdWlyZSgnLi9hc24xL2NvbnN0YW50cycpO1xuYXNuMS5kZWNvZGVycyA9IHJlcXVpcmUoJy4vYXNuMS9kZWNvZGVycycpO1xuYXNuMS5lbmNvZGVycyA9IHJlcXVpcmUoJy4vYXNuMS9lbmNvZGVycycpO1xuIiwidmFyIGJhc2UgPSBleHBvcnRzO1xuXG5iYXNlLlJlcG9ydGVyID0gcmVxdWlyZSgnLi9yZXBvcnRlcicpLlJlcG9ydGVyO1xuYmFzZS5EZWNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi9idWZmZXInKS5EZWNvZGVyQnVmZmVyO1xuYmFzZS5FbmNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi9idWZmZXInKS5FbmNvZGVyQnVmZmVyO1xuYmFzZS5Ob2RlID0gcmVxdWlyZSgnLi9ub2RlJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAhcHJvY2Vzcy52ZXJzaW9uIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YwLicpID09PSAwIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLicpID09PSAwICYmIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS44LicpICE9PSAwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0geyBuZXh0VGljazogbmV4dFRpY2sgfTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcHJvY2Vzc1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayhmbiwgYXJnMSwgYXJnMiwgYXJnMykge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJjYWxsYmFja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgYXJncywgaTtcbiAgc3dpdGNoIChsZW4pIHtcbiAgY2FzZSAwOlxuICBjYXNlIDE6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZm4pO1xuICBjYXNlIDI6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrT25lKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxKTtcbiAgICB9KTtcbiAgY2FzZSAzOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1R3bygpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMik7XG4gICAgfSk7XG4gIGNhc2UgNDpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUaHJlZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfSk7XG4gIGRlZmF1bHQ6XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICBhcmdzW2krK10gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGljaygpIHtcbiAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG59XG5cbiIsIi8vIGJhc2VkIG9uIHRoZSBhZXMgaW1wbGltZW50YXRpb24gaW4gdHJpcGxlIHNlY1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2tleWJhc2UvdHJpcGxlc2VjXG4vLyB3aGljaCBpcyBpbiB0dXJuIGJhc2VkIG9uIHRoZSBvbmUgZnJvbSBjcnlwdG8tanNcbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuZnVuY3Rpb24gYXNVSW50MzJBcnJheSAoYnVmKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIGJ1ZiA9IEJ1ZmZlci5mcm9tKGJ1ZilcblxuICB2YXIgbGVuID0gKGJ1Zi5sZW5ndGggLyA0KSB8IDBcbiAgdmFyIG91dCA9IG5ldyBBcnJheShsZW4pXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIG91dFtpXSA9IGJ1Zi5yZWFkVUludDMyQkUoaSAqIDQpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHNjcnViVmVjICh2KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdi5sZW5ndGg7IHYrKykge1xuICAgIHZbaV0gPSAwXG4gIH1cbn1cblxuZnVuY3Rpb24gY3J5cHRCbG9jayAoTSwga2V5U2NoZWR1bGUsIFNVQl9NSVgsIFNCT1gsIG5Sb3VuZHMpIHtcbiAgdmFyIFNVQl9NSVgwID0gU1VCX01JWFswXVxuICB2YXIgU1VCX01JWDEgPSBTVUJfTUlYWzFdXG4gIHZhciBTVUJfTUlYMiA9IFNVQl9NSVhbMl1cbiAgdmFyIFNVQl9NSVgzID0gU1VCX01JWFszXVxuXG4gIHZhciBzMCA9IE1bMF0gXiBrZXlTY2hlZHVsZVswXVxuICB2YXIgczEgPSBNWzFdIF4ga2V5U2NoZWR1bGVbMV1cbiAgdmFyIHMyID0gTVsyXSBeIGtleVNjaGVkdWxlWzJdXG4gIHZhciBzMyA9IE1bM10gXiBrZXlTY2hlZHVsZVszXVxuICB2YXIgdDAsIHQxLCB0MiwgdDNcbiAgdmFyIGtzUm93ID0gNFxuXG4gIGZvciAodmFyIHJvdW5kID0gMTsgcm91bmQgPCBuUm91bmRzOyByb3VuZCsrKSB7XG4gICAgdDAgPSBTVUJfTUlYMFtzMCA+Pj4gMjRdIF4gU1VCX01JWDFbKHMxID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVgyWyhzMiA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVgzW3MzICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICAgIHQxID0gU1VCX01JWDBbczEgPj4+IDI0XSBeIFNVQl9NSVgxWyhzMiA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYMlsoczMgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYM1tzMCAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MiA9IFNVQl9NSVgwW3MyID4+PiAyNF0gXiBTVUJfTUlYMVsoczMgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMwID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczEgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDMgPSBTVUJfTUlYMFtzMyA+Pj4gMjRdIF4gU1VCX01JWDFbKHMwID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVgyWyhzMSA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVgzW3MyICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICAgIHMwID0gdDBcbiAgICBzMSA9IHQxXG4gICAgczIgPSB0MlxuICAgIHMzID0gdDNcbiAgfVxuXG4gIHQwID0gKChTQk9YW3MwID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMxID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczIgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MzICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDEgPSAoKFNCT1hbczEgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczIgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMyA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczAgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MiA9ICgoU0JPWFtzMiA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMyA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMwID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMSAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQzID0gKChTQk9YW3MzID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMwID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczEgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MyICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDAgPSB0MCA+Pj4gMFxuICB0MSA9IHQxID4+PiAwXG4gIHQyID0gdDIgPj4+IDBcbiAgdDMgPSB0MyA+Pj4gMFxuXG4gIHJldHVybiBbdDAsIHQxLCB0MiwgdDNdXG59XG5cbi8vIEFFUyBjb25zdGFudHNcbnZhciBSQ09OID0gWzB4MDAsIDB4MDEsIDB4MDIsIDB4MDQsIDB4MDgsIDB4MTAsIDB4MjAsIDB4NDAsIDB4ODAsIDB4MWIsIDB4MzZdXG52YXIgRyA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIENvbXB1dGUgZG91YmxlIHRhYmxlXG4gIHZhciBkID0gbmV3IEFycmF5KDI1NilcbiAgZm9yICh2YXIgaiA9IDA7IGogPCAyNTY7IGorKykge1xuICAgIGlmIChqIDwgMTI4KSB7XG4gICAgICBkW2pdID0gaiA8PCAxXG4gICAgfSBlbHNlIHtcbiAgICAgIGRbal0gPSAoaiA8PCAxKSBeIDB4MTFiXG4gICAgfVxuICB9XG5cbiAgdmFyIFNCT1ggPSBbXVxuICB2YXIgSU5WX1NCT1ggPSBbXVxuICB2YXIgU1VCX01JWCA9IFtbXSwgW10sIFtdLCBbXV1cbiAgdmFyIElOVl9TVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuXG4gIC8vIFdhbGsgR0YoMl44KVxuICB2YXIgeCA9IDBcbiAgdmFyIHhpID0gMFxuICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gICAgLy8gQ29tcHV0ZSBzYm94XG4gICAgdmFyIHN4ID0geGkgXiAoeGkgPDwgMSkgXiAoeGkgPDwgMikgXiAoeGkgPDwgMykgXiAoeGkgPDwgNClcbiAgICBzeCA9IChzeCA+Pj4gOCkgXiAoc3ggJiAweGZmKSBeIDB4NjNcbiAgICBTQk9YW3hdID0gc3hcbiAgICBJTlZfU0JPWFtzeF0gPSB4XG5cbiAgICAvLyBDb21wdXRlIG11bHRpcGxpY2F0aW9uXG4gICAgdmFyIHgyID0gZFt4XVxuICAgIHZhciB4NCA9IGRbeDJdXG4gICAgdmFyIHg4ID0gZFt4NF1cblxuICAgIC8vIENvbXB1dGUgc3ViIGJ5dGVzLCBtaXggY29sdW1ucyB0YWJsZXNcbiAgICB2YXIgdCA9IChkW3N4XSAqIDB4MTAxKSBeIChzeCAqIDB4MTAxMDEwMClcbiAgICBTVUJfTUlYWzBdW3hdID0gKHQgPDwgMjQpIHwgKHQgPj4+IDgpXG4gICAgU1VCX01JWFsxXVt4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNilcbiAgICBTVUJfTUlYWzJdW3hdID0gKHQgPDwgOCkgfCAodCA+Pj4gMjQpXG4gICAgU1VCX01JWFszXVt4XSA9IHRcblxuICAgIC8vIENvbXB1dGUgaW52IHN1YiBieXRlcywgaW52IG1peCBjb2x1bW5zIHRhYmxlc1xuICAgIHQgPSAoeDggKiAweDEwMTAxMDEpIF4gKHg0ICogMHgxMDAwMSkgXiAoeDIgKiAweDEwMSkgXiAoeCAqIDB4MTAxMDEwMClcbiAgICBJTlZfU1VCX01JWFswXVtzeF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOClcbiAgICBJTlZfU1VCX01JWFsxXVtzeF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpXG4gICAgSU5WX1NVQl9NSVhbMl1bc3hdID0gKHQgPDwgOCkgfCAodCA+Pj4gMjQpXG4gICAgSU5WX1NVQl9NSVhbM11bc3hdID0gdFxuXG4gICAgaWYgKHggPT09IDApIHtcbiAgICAgIHggPSB4aSA9IDFcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IHgyIF4gZFtkW2RbeDggXiB4Ml1dXVxuICAgICAgeGkgXj0gZFtkW3hpXV1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFNCT1g6IFNCT1gsXG4gICAgSU5WX1NCT1g6IElOVl9TQk9YLFxuICAgIFNVQl9NSVg6IFNVQl9NSVgsXG4gICAgSU5WX1NVQl9NSVg6IElOVl9TVUJfTUlYXG4gIH1cbn0pKClcblxuZnVuY3Rpb24gQUVTIChrZXkpIHtcbiAgdGhpcy5fa2V5ID0gYXNVSW50MzJBcnJheShrZXkpXG4gIHRoaXMuX3Jlc2V0KClcbn1cblxuQUVTLmJsb2NrU2l6ZSA9IDQgKiA0XG5BRVMua2V5U2l6ZSA9IDI1NiAvIDhcbkFFUy5wcm90b3R5cGUuYmxvY2tTaXplID0gQUVTLmJsb2NrU2l6ZVxuQUVTLnByb3RvdHlwZS5rZXlTaXplID0gQUVTLmtleVNpemVcbkFFUy5wcm90b3R5cGUuX3Jlc2V0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIga2V5V29yZHMgPSB0aGlzLl9rZXlcbiAgdmFyIGtleVNpemUgPSBrZXlXb3Jkcy5sZW5ndGhcbiAgdmFyIG5Sb3VuZHMgPSBrZXlTaXplICsgNlxuICB2YXIga3NSb3dzID0gKG5Sb3VuZHMgKyAxKSAqIDRcblxuICB2YXIga2V5U2NoZWR1bGUgPSBbXVxuICBmb3IgKHZhciBrID0gMDsgayA8IGtleVNpemU7IGsrKykge1xuICAgIGtleVNjaGVkdWxlW2tdID0ga2V5V29yZHNba11cbiAgfVxuXG4gIGZvciAoayA9IGtleVNpemU7IGsgPCBrc1Jvd3M7IGsrKykge1xuICAgIHZhciB0ID0ga2V5U2NoZWR1bGVbayAtIDFdXG5cbiAgICBpZiAoayAlIGtleVNpemUgPT09IDApIHtcbiAgICAgIHQgPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICAgIHQgPVxuICAgICAgICAoRy5TQk9YW3QgPj4+IDI0XSA8PCAyNCkgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHxcbiAgICAgICAgKEcuU0JPWFt0ICYgMHhmZl0pXG5cbiAgICAgIHQgXj0gUkNPTlsoayAvIGtleVNpemUpIHwgMF0gPDwgMjRcbiAgICB9IGVsc2UgaWYgKGtleVNpemUgPiA2ICYmIGsgJSBrZXlTaXplID09PSA0KSB7XG4gICAgICB0ID1cbiAgICAgICAgKEcuU0JPWFt0ID4+PiAyNF0gPDwgMjQpIHxcbiAgICAgICAgKEcuU0JPWFsodCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHxcbiAgICAgICAgKEcuU0JPWFsodCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8XG4gICAgICAgIChHLlNCT1hbdCAmIDB4ZmZdKVxuICAgIH1cblxuICAgIGtleVNjaGVkdWxlW2tdID0ga2V5U2NoZWR1bGVbayAtIGtleVNpemVdIF4gdFxuICB9XG5cbiAgdmFyIGludktleVNjaGVkdWxlID0gW11cbiAgZm9yICh2YXIgaWsgPSAwOyBpayA8IGtzUm93czsgaWsrKykge1xuICAgIHZhciBrc1IgPSBrc1Jvd3MgLSBpa1xuICAgIHZhciB0dCA9IGtleVNjaGVkdWxlW2tzUiAtIChpayAlIDQgPyAwIDogNCldXG5cbiAgICBpZiAoaWsgPCA0IHx8IGtzUiA8PSA0KSB7XG4gICAgICBpbnZLZXlTY2hlZHVsZVtpa10gPSB0dFxuICAgIH0gZWxzZSB7XG4gICAgICBpbnZLZXlTY2hlZHVsZVtpa10gPVxuICAgICAgICBHLklOVl9TVUJfTUlYWzBdW0cuU0JPWFt0dCA+Pj4gMjRdXSBeXG4gICAgICAgIEcuSU5WX1NVQl9NSVhbMV1bRy5TQk9YWyh0dCA+Pj4gMTYpICYgMHhmZl1dIF5cbiAgICAgICAgRy5JTlZfU1VCX01JWFsyXVtHLlNCT1hbKHR0ID4+PiA4KSAmIDB4ZmZdXSBeXG4gICAgICAgIEcuSU5WX1NVQl9NSVhbM11bRy5TQk9YW3R0ICYgMHhmZl1dXG4gICAgfVxuICB9XG5cbiAgdGhpcy5fblJvdW5kcyA9IG5Sb3VuZHNcbiAgdGhpcy5fa2V5U2NoZWR1bGUgPSBrZXlTY2hlZHVsZVxuICB0aGlzLl9pbnZLZXlTY2hlZHVsZSA9IGludktleVNjaGVkdWxlXG59XG5cbkFFUy5wcm90b3R5cGUuZW5jcnlwdEJsb2NrUmF3ID0gZnVuY3Rpb24gKE0pIHtcbiAgTSA9IGFzVUludDMyQXJyYXkoTSlcbiAgcmV0dXJuIGNyeXB0QmxvY2soTSwgdGhpcy5fa2V5U2NoZWR1bGUsIEcuU1VCX01JWCwgRy5TQk9YLCB0aGlzLl9uUm91bmRzKVxufVxuXG5BRVMucHJvdG90eXBlLmVuY3J5cHRCbG9jayA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBvdXQgPSB0aGlzLmVuY3J5cHRCbG9ja1JhdyhNKVxuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMF0sIDApXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsxXSwgNClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzJdLCA4KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbM10sIDEyKVxuICByZXR1cm4gYnVmXG59XG5cbkFFUy5wcm90b3R5cGUuZGVjcnlwdEJsb2NrID0gZnVuY3Rpb24gKE0pIHtcbiAgTSA9IGFzVUludDMyQXJyYXkoTSlcblxuICAvLyBzd2FwXG4gIHZhciBtMSA9IE1bMV1cbiAgTVsxXSA9IE1bM11cbiAgTVszXSA9IG0xXG5cbiAgdmFyIG91dCA9IGNyeXB0QmxvY2soTSwgdGhpcy5faW52S2V5U2NoZWR1bGUsIEcuSU5WX1NVQl9NSVgsIEcuSU5WX1NCT1gsIHRoaXMuX25Sb3VuZHMpXG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsxXSwgMTIpXG4gIHJldHVybiBidWZcbn1cblxuQUVTLnByb3RvdHlwZS5zY3J1YiA9IGZ1bmN0aW9uICgpIHtcbiAgc2NydWJWZWModGhpcy5fa2V5U2NoZWR1bGUpXG4gIHNjcnViVmVjKHRoaXMuX2ludktleVNjaGVkdWxlKVxuICBzY3J1YlZlYyh0aGlzLl9rZXkpXG59XG5cbm1vZHVsZS5leHBvcnRzLkFFUyA9IEFFU1xuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgTUQ1ID0gcmVxdWlyZSgnbWQ1LmpzJylcblxuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG5mdW5jdGlvbiBFVlBfQnl0ZXNUb0tleSAocGFzc3dvcmQsIHNhbHQsIGtleUJpdHMsIGl2TGVuKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhc3N3b3JkKSkgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZCwgJ2JpbmFyeScpXG4gIGlmIChzYWx0KSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoc2FsdCkpIHNhbHQgPSBCdWZmZXIuZnJvbShzYWx0LCAnYmluYXJ5JylcbiAgICBpZiAoc2FsdC5sZW5ndGggIT09IDgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzYWx0IHNob3VsZCBiZSBCdWZmZXIgd2l0aCA4IGJ5dGUgbGVuZ3RoJylcbiAgfVxuXG4gIHZhciBrZXlMZW4gPSBrZXlCaXRzIC8gOFxuICB2YXIga2V5ID0gQnVmZmVyLmFsbG9jKGtleUxlbilcbiAgdmFyIGl2ID0gQnVmZmVyLmFsbG9jKGl2TGVuIHx8IDApXG4gIHZhciB0bXAgPSBCdWZmZXIuYWxsb2MoMClcblxuICB3aGlsZSAoa2V5TGVuID4gMCB8fCBpdkxlbiA+IDApIHtcbiAgICB2YXIgaGFzaCA9IG5ldyBNRDUoKVxuICAgIGhhc2gudXBkYXRlKHRtcClcbiAgICBoYXNoLnVwZGF0ZShwYXNzd29yZClcbiAgICBpZiAoc2FsdCkgaGFzaC51cGRhdGUoc2FsdClcbiAgICB0bXAgPSBoYXNoLmRpZ2VzdCgpXG5cbiAgICB2YXIgdXNlZCA9IDBcblxuICAgIGlmIChrZXlMZW4gPiAwKSB7XG4gICAgICB2YXIga2V5U3RhcnQgPSBrZXkubGVuZ3RoIC0ga2V5TGVuXG4gICAgICB1c2VkID0gTWF0aC5taW4oa2V5TGVuLCB0bXAubGVuZ3RoKVxuICAgICAgdG1wLmNvcHkoa2V5LCBrZXlTdGFydCwgMCwgdXNlZClcbiAgICAgIGtleUxlbiAtPSB1c2VkXG4gICAgfVxuXG4gICAgaWYgKHVzZWQgPCB0bXAubGVuZ3RoICYmIGl2TGVuID4gMCkge1xuICAgICAgdmFyIGl2U3RhcnQgPSBpdi5sZW5ndGggLSBpdkxlblxuICAgICAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGl2TGVuLCB0bXAubGVuZ3RoIC0gdXNlZClcbiAgICAgIHRtcC5jb3B5KGl2LCBpdlN0YXJ0LCB1c2VkLCB1c2VkICsgbGVuZ3RoKVxuICAgICAgaXZMZW4gLT0gbGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdG1wLmZpbGwoMClcbiAgcmV0dXJuIHsga2V5OiBrZXksIGl2OiBpdiB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRVZQX0J5dGVzVG9LZXlcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgZ2V0TkFGID0gdXRpbHMuZ2V0TkFGO1xudmFyIGdldEpTRiA9IHV0aWxzLmdldEpTRjtcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIEJhc2VDdXJ2ZSh0eXBlLCBjb25mKSB7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMucCA9IG5ldyBCTihjb25mLnAsIDE2KTtcblxuICAvLyBVc2UgTW9udGdvbWVyeSwgd2hlbiB0aGVyZSBpcyBubyBmYXN0IHJlZHVjdGlvbiBmb3IgdGhlIHByaW1lXG4gIHRoaXMucmVkID0gY29uZi5wcmltZSA/IEJOLnJlZChjb25mLnByaW1lKSA6IEJOLm1vbnQodGhpcy5wKTtcblxuICAvLyBVc2VmdWwgZm9yIG1hbnkgY3VydmVzXG4gIHRoaXMuemVybyA9IG5ldyBCTigwKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMub25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy50d28gPSBuZXcgQk4oMikudG9SZWQodGhpcy5yZWQpO1xuXG4gIC8vIEN1cnZlIGNvbmZpZ3VyYXRpb24sIG9wdGlvbmFsXG4gIHRoaXMubiA9IGNvbmYubiAmJiBuZXcgQk4oY29uZi5uLCAxNik7XG4gIHRoaXMuZyA9IGNvbmYuZyAmJiB0aGlzLnBvaW50RnJvbUpTT04oY29uZi5nLCBjb25mLmdSZWQpO1xuXG4gIC8vIFRlbXBvcmFyeSBhcnJheXNcbiAgdGhpcy5fd25hZlQxID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl93bmFmVDIgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX3duYWZUMyA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fd25hZlQ0ID0gbmV3IEFycmF5KDQpO1xuXG4gIHRoaXMuX2JpdExlbmd0aCA9IHRoaXMubiA/IHRoaXMubi5iaXRMZW5ndGgoKSA6IDA7XG5cbiAgLy8gR2VuZXJhbGl6ZWQgR3JlZyBNYXh3ZWxsJ3MgdHJpY2tcbiAgdmFyIGFkanVzdENvdW50ID0gdGhpcy5uICYmIHRoaXMucC5kaXYodGhpcy5uKTtcbiAgaWYgKCFhZGp1c3RDb3VudCB8fCBhZGp1c3RDb3VudC5jbXBuKDEwMCkgPiAwKSB7XG4gICAgdGhpcy5yZWROID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9tYXh3ZWxsVHJpY2sgPSB0cnVlO1xuICAgIHRoaXMucmVkTiA9IHRoaXMubi50b1JlZCh0aGlzLnJlZCk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gQmFzZUN1cnZlO1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl9maXhlZE5hZk11bCA9IGZ1bmN0aW9uIF9maXhlZE5hZk11bChwLCBrKSB7XG4gIGFzc2VydChwLnByZWNvbXB1dGVkKTtcbiAgdmFyIGRvdWJsZXMgPSBwLl9nZXREb3VibGVzKCk7XG5cbiAgdmFyIG5hZiA9IGdldE5BRihrLCAxLCB0aGlzLl9iaXRMZW5ndGgpO1xuICB2YXIgSSA9ICgxIDw8IChkb3VibGVzLnN0ZXAgKyAxKSkgLSAoZG91Ymxlcy5zdGVwICUgMiA9PT0gMCA/IDIgOiAxKTtcbiAgSSAvPSAzO1xuXG4gIC8vIFRyYW5zbGF0ZSBpbnRvIG1vcmUgd2luZG93ZWQgZm9ybVxuICB2YXIgcmVwciA9IFtdO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IG5hZi5sZW5ndGg7IGogKz0gZG91Ymxlcy5zdGVwKSB7XG4gICAgdmFyIG5hZlcgPSAwO1xuICAgIGZvciAodmFyIGsgPSBqICsgZG91Ymxlcy5zdGVwIC0gMTsgayA+PSBqOyBrLS0pXG4gICAgICBuYWZXID0gKG5hZlcgPDwgMSkgKyBuYWZba107XG4gICAgcmVwci5wdXNoKG5hZlcpO1xuICB9XG5cbiAgdmFyIGEgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgdmFyIGIgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgZm9yICh2YXIgaSA9IEk7IGkgPiAwOyBpLS0pIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlcHIubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBuYWZXID0gcmVwcltqXTtcbiAgICAgIGlmIChuYWZXID09PSBpKVxuICAgICAgICBiID0gYi5taXhlZEFkZChkb3VibGVzLnBvaW50c1tqXSk7XG4gICAgICBlbHNlIGlmIChuYWZXID09PSAtaSlcbiAgICAgICAgYiA9IGIubWl4ZWRBZGQoZG91Ymxlcy5wb2ludHNbal0ubmVnKCkpO1xuICAgIH1cbiAgICBhID0gYS5hZGQoYik7XG4gIH1cbiAgcmV0dXJuIGEudG9QKCk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl93bmFmTXVsID0gZnVuY3Rpb24gX3duYWZNdWwocCwgaykge1xuICB2YXIgdyA9IDQ7XG5cbiAgLy8gUHJlY29tcHV0ZSB3aW5kb3dcbiAgdmFyIG5hZlBvaW50cyA9IHAuX2dldE5BRlBvaW50cyh3KTtcbiAgdyA9IG5hZlBvaW50cy53bmQ7XG4gIHZhciB3bmQgPSBuYWZQb2ludHMucG9pbnRzO1xuXG4gIC8vIEdldCBOQUYgZm9ybVxuICB2YXIgbmFmID0gZ2V0TkFGKGssIHcsIHRoaXMuX2JpdExlbmd0aCk7XG5cbiAgLy8gQWRkIGB0aGlzYCooTisxKSBmb3IgZXZlcnkgdy1OQUYgaW5kZXhcbiAgdmFyIGFjYyA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICBmb3IgKHZhciBpID0gbmFmLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgLy8gQ291bnQgemVyb2VzXG4gICAgZm9yICh2YXIgayA9IDA7IGkgPj0gMCAmJiBuYWZbaV0gPT09IDA7IGktLSlcbiAgICAgIGsrKztcbiAgICBpZiAoaSA+PSAwKVxuICAgICAgaysrO1xuICAgIGFjYyA9IGFjYy5kYmxwKGspO1xuXG4gICAgaWYgKGkgPCAwKVxuICAgICAgYnJlYWs7XG4gICAgdmFyIHogPSBuYWZbaV07XG4gICAgYXNzZXJ0KHogIT09IDApO1xuICAgIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKSB7XG4gICAgICAvLyBKICstIFBcbiAgICAgIGlmICh6ID4gMClcbiAgICAgICAgYWNjID0gYWNjLm1peGVkQWRkKHduZFsoeiAtIDEpID4+IDFdKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYWNjID0gYWNjLm1peGVkQWRkKHduZFsoLXogLSAxKSA+PiAxXS5uZWcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEogKy0gSlxuICAgICAgaWYgKHogPiAwKVxuICAgICAgICBhY2MgPSBhY2MuYWRkKHduZFsoeiAtIDEpID4+IDFdKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYWNjID0gYWNjLmFkZCh3bmRbKC16IC0gMSkgPj4gMV0ubmVnKCkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcC50eXBlID09PSAnYWZmaW5lJyA/IGFjYy50b1AoKSA6IGFjYztcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUuX3duYWZNdWxBZGQgPSBmdW5jdGlvbiBfd25hZk11bEFkZChkZWZXLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2VmZnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGphY29iaWFuUmVzdWx0KSB7XG4gIHZhciB3bmRXaWR0aCA9IHRoaXMuX3duYWZUMTtcbiAgdmFyIHduZCA9IHRoaXMuX3duYWZUMjtcbiAgdmFyIG5hZiA9IHRoaXMuX3duYWZUMztcblxuICAvLyBGaWxsIGFsbCBhcnJheXNcbiAgdmFyIG1heCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgcCA9IHBvaW50c1tpXTtcbiAgICB2YXIgbmFmUG9pbnRzID0gcC5fZ2V0TkFGUG9pbnRzKGRlZlcpO1xuICAgIHduZFdpZHRoW2ldID0gbmFmUG9pbnRzLnduZDtcbiAgICB3bmRbaV0gPSBuYWZQb2ludHMucG9pbnRzO1xuICB9XG5cbiAgLy8gQ29tYiBzbWFsbCB3aW5kb3cgTkFGc1xuICBmb3IgKHZhciBpID0gbGVuIC0gMTsgaSA+PSAxOyBpIC09IDIpIHtcbiAgICB2YXIgYSA9IGkgLSAxO1xuICAgIHZhciBiID0gaTtcbiAgICBpZiAod25kV2lkdGhbYV0gIT09IDEgfHwgd25kV2lkdGhbYl0gIT09IDEpIHtcbiAgICAgIG5hZlthXSA9IGdldE5BRihjb2VmZnNbYV0sIHduZFdpZHRoW2FdLCB0aGlzLl9iaXRMZW5ndGgpO1xuICAgICAgbmFmW2JdID0gZ2V0TkFGKGNvZWZmc1tiXSwgd25kV2lkdGhbYl0sIHRoaXMuX2JpdExlbmd0aCk7XG4gICAgICBtYXggPSBNYXRoLm1heChuYWZbYV0ubGVuZ3RoLCBtYXgpO1xuICAgICAgbWF4ID0gTWF0aC5tYXgobmFmW2JdLmxlbmd0aCwgbWF4KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBjb21iID0gW1xuICAgICAgcG9pbnRzW2FdLCAvKiAxICovXG4gICAgICBudWxsLCAvKiAzICovXG4gICAgICBudWxsLCAvKiA1ICovXG4gICAgICBwb2ludHNbYl0gLyogNyAqL1xuICAgIF07XG5cbiAgICAvLyBUcnkgdG8gYXZvaWQgUHJvamVjdGl2ZSBwb2ludHMsIGlmIHBvc3NpYmxlXG4gICAgaWYgKHBvaW50c1thXS55LmNtcChwb2ludHNbYl0ueSkgPT09IDApIHtcbiAgICAgIGNvbWJbMV0gPSBwb2ludHNbYV0uYWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfSBlbHNlIGlmIChwb2ludHNbYV0ueS5jbXAocG9pbnRzW2JdLnkucmVkTmVnKCkpID09PSAwKSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLmFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gW1xuICAgICAgLTMsIC8qIC0xIC0xICovXG4gICAgICAtMSwgLyogLTEgMCAqL1xuICAgICAgLTUsIC8qIC0xIDEgKi9cbiAgICAgIC03LCAvKiAwIC0xICovXG4gICAgICAwLCAvKiAwIDAgKi9cbiAgICAgIDcsIC8qIDAgMSAqL1xuICAgICAgNSwgLyogMSAtMSAqL1xuICAgICAgMSwgLyogMSAwICovXG4gICAgICAzICAvKiAxIDEgKi9cbiAgICBdO1xuXG4gICAgdmFyIGpzZiA9IGdldEpTRihjb2VmZnNbYV0sIGNvZWZmc1tiXSk7XG4gICAgbWF4ID0gTWF0aC5tYXgoanNmWzBdLmxlbmd0aCwgbWF4KTtcbiAgICBuYWZbYV0gPSBuZXcgQXJyYXkobWF4KTtcbiAgICBuYWZbYl0gPSBuZXcgQXJyYXkobWF4KTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1heDsgaisrKSB7XG4gICAgICB2YXIgamEgPSBqc2ZbMF1bal0gfCAwO1xuICAgICAgdmFyIGpiID0ganNmWzFdW2pdIHwgMDtcblxuICAgICAgbmFmW2FdW2pdID0gaW5kZXhbKGphICsgMSkgKiAzICsgKGpiICsgMSldO1xuICAgICAgbmFmW2JdW2pdID0gMDtcbiAgICAgIHduZFthXSA9IGNvbWI7XG4gICAgfVxuICB9XG5cbiAgdmFyIGFjYyA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICB2YXIgdG1wID0gdGhpcy5fd25hZlQ0O1xuICBmb3IgKHZhciBpID0gbWF4OyBpID49IDA7IGktLSkge1xuICAgIHZhciBrID0gMDtcblxuICAgIHdoaWxlIChpID49IDApIHtcbiAgICAgIHZhciB6ZXJvID0gdHJ1ZTtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgdG1wW2pdID0gbmFmW2pdW2ldIHwgMDtcbiAgICAgICAgaWYgKHRtcFtqXSAhPT0gMClcbiAgICAgICAgICB6ZXJvID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIXplcm8pXG4gICAgICAgIGJyZWFrO1xuICAgICAgaysrO1xuICAgICAgaS0tO1xuICAgIH1cbiAgICBpZiAoaSA+PSAwKVxuICAgICAgaysrO1xuICAgIGFjYyA9IGFjYy5kYmxwKGspO1xuICAgIGlmIChpIDwgMClcbiAgICAgIGJyZWFrO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBsZW47IGorKykge1xuICAgICAgdmFyIHogPSB0bXBbal07XG4gICAgICB2YXIgcDtcbiAgICAgIGlmICh6ID09PSAwKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGVsc2UgaWYgKHogPiAwKVxuICAgICAgICBwID0gd25kW2pdWyh6IC0gMSkgPj4gMV07XG4gICAgICBlbHNlIGlmICh6IDwgMClcbiAgICAgICAgcCA9IHduZFtqXVsoLXogLSAxKSA+PiAxXS5uZWcoKTtcblxuICAgICAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZChwKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYWNjID0gYWNjLmFkZChwKTtcbiAgICB9XG4gIH1cbiAgLy8gWmVyb2lmeSByZWZlcmVuY2VzXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgd25kW2ldID0gbnVsbDtcblxuICBpZiAoamFjb2JpYW5SZXN1bHQpXG4gICAgcmV0dXJuIGFjYztcbiAgZWxzZVxuICAgIHJldHVybiBhY2MudG9QKCk7XG59O1xuXG5mdW5jdGlvbiBCYXNlUG9pbnQoY3VydmUsIHR5cGUpIHtcbiAgdGhpcy5jdXJ2ZSA9IGN1cnZlO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnByZWNvbXB1dGVkID0gbnVsbDtcbn1cbkJhc2VDdXJ2ZS5CYXNlUG9pbnQgPSBCYXNlUG9pbnQ7XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSgvKm90aGVyKi8pIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUudmFsaWRhdGUodGhpcyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMsIGVuYykge1xuICBieXRlcyA9IHV0aWxzLnRvQXJyYXkoYnl0ZXMsIGVuYyk7XG5cbiAgdmFyIGxlbiA9IHRoaXMucC5ieXRlTGVuZ3RoKCk7XG5cbiAgLy8gdW5jb21wcmVzc2VkLCBoeWJyaWQtb2RkLCBoeWJyaWQtZXZlblxuICBpZiAoKGJ5dGVzWzBdID09PSAweDA0IHx8IGJ5dGVzWzBdID09PSAweDA2IHx8IGJ5dGVzWzBdID09PSAweDA3KSAmJlxuICAgICAgYnl0ZXMubGVuZ3RoIC0gMSA9PT0gMiAqIGxlbikge1xuICAgIGlmIChieXRlc1swXSA9PT0gMHgwNilcbiAgICAgIGFzc2VydChieXRlc1tieXRlcy5sZW5ndGggLSAxXSAlIDIgPT09IDApO1xuICAgIGVsc2UgaWYgKGJ5dGVzWzBdID09PSAweDA3KVxuICAgICAgYXNzZXJ0KGJ5dGVzW2J5dGVzLmxlbmd0aCAtIDFdICUgMiA9PT0gMSk7XG5cbiAgICB2YXIgcmVzID0gIHRoaXMucG9pbnQoYnl0ZXMuc2xpY2UoMSwgMSArIGxlbiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzLnNsaWNlKDEgKyBsZW4sIDEgKyAyICogbGVuKSk7XG5cbiAgICByZXR1cm4gcmVzO1xuICB9IGVsc2UgaWYgKChieXRlc1swXSA9PT0gMHgwMiB8fCBieXRlc1swXSA9PT0gMHgwMykgJiZcbiAgICAgICAgICAgICAgYnl0ZXMubGVuZ3RoIC0gMSA9PT0gbGVuKSB7XG4gICAgcmV0dXJuIHRoaXMucG9pbnRGcm9tWChieXRlcy5zbGljZSgxLCAxICsgbGVuKSwgYnl0ZXNbMF0gPT09IDB4MDMpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwb2ludCBmb3JtYXQnKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZW5jb2RlQ29tcHJlc3NlZCA9IGZ1bmN0aW9uIGVuY29kZUNvbXByZXNzZWQoZW5jKSB7XG4gIHJldHVybiB0aGlzLmVuY29kZShlbmMsIHRydWUpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZW5jb2RlID0gZnVuY3Rpb24gX2VuY29kZShjb21wYWN0KSB7XG4gIHZhciBsZW4gPSB0aGlzLmN1cnZlLnAuYnl0ZUxlbmd0aCgpO1xuICB2YXIgeCA9IHRoaXMuZ2V0WCgpLnRvQXJyYXkoJ2JlJywgbGVuKTtcblxuICBpZiAoY29tcGFjdClcbiAgICByZXR1cm4gWyB0aGlzLmdldFkoKS5pc0V2ZW4oKSA/IDB4MDIgOiAweDAzIF0uY29uY2F0KHgpO1xuXG4gIHJldHVybiBbIDB4MDQgXS5jb25jYXQoeCwgdGhpcy5nZXRZKCkudG9BcnJheSgnYmUnLCBsZW4pKSA7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShlbmMsIGNvbXBhY3QpIHtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLl9lbmNvZGUoY29tcGFjdCksIGVuYyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIHZhciBwcmVjb21wdXRlZCA9IHtcbiAgICBkb3VibGVzOiBudWxsLFxuICAgIG5hZjogbnVsbCxcbiAgICBiZXRhOiBudWxsXG4gIH07XG4gIHByZWNvbXB1dGVkLm5hZiA9IHRoaXMuX2dldE5BRlBvaW50cyg4KTtcbiAgcHJlY29tcHV0ZWQuZG91YmxlcyA9IHRoaXMuX2dldERvdWJsZXMoNCwgcG93ZXIpO1xuICBwcmVjb21wdXRlZC5iZXRhID0gdGhpcy5fZ2V0QmV0YSgpO1xuICB0aGlzLnByZWNvbXB1dGVkID0gcHJlY29tcHV0ZWQ7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9oYXNEb3VibGVzID0gZnVuY3Rpb24gX2hhc0RvdWJsZXMoaykge1xuICBpZiAoIXRoaXMucHJlY29tcHV0ZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBkb3VibGVzID0gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuICBpZiAoIWRvdWJsZXMpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiBkb3VibGVzLnBvaW50cy5sZW5ndGggPj0gTWF0aC5jZWlsKChrLmJpdExlbmd0aCgpICsgMSkgLyBkb3VibGVzLnN0ZXApO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0RG91YmxlcyA9IGZ1bmN0aW9uIF9nZXREb3VibGVzKHN0ZXAsIHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkICYmIHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcylcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuXG4gIHZhciBkb3VibGVzID0gWyB0aGlzIF07XG4gIHZhciBhY2MgPSB0aGlzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvd2VyOyBpICs9IHN0ZXApIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN0ZXA7IGorKylcbiAgICAgIGFjYyA9IGFjYy5kYmwoKTtcbiAgICBkb3VibGVzLnB1c2goYWNjKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0ZXA6IHN0ZXAsXG4gICAgcG9pbnRzOiBkb3VibGVzXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXROQUZQb2ludHMgPSBmdW5jdGlvbiBfZ2V0TkFGUG9pbnRzKHduZCkge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZCAmJiB0aGlzLnByZWNvbXB1dGVkLm5hZilcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5uYWY7XG5cbiAgdmFyIHJlcyA9IFsgdGhpcyBdO1xuICB2YXIgbWF4ID0gKDEgPDwgd25kKSAtIDE7XG4gIHZhciBkYmwgPSBtYXggPT09IDEgPyBudWxsIDogdGhpcy5kYmwoKTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBtYXg7IGkrKylcbiAgICByZXNbaV0gPSByZXNbaSAtIDFdLmFkZChkYmwpO1xuICByZXR1cm4ge1xuICAgIHduZDogd25kLFxuICAgIHBvaW50czogcmVzXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXRCZXRhID0gZnVuY3Rpb24gX2dldEJldGEoKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5kYmxwID0gZnVuY3Rpb24gZGJscChrKSB7XG4gIHZhciByID0gdGhpcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrOyBpKyspXG4gICAgciA9IHIuZGJsKCk7XG4gIHJldHVybiByO1xufTtcbiIsInZhciBhc24xID0gcmVxdWlyZSgnLi9hc24xJylcbnZhciBhZXNpZCA9IHJlcXVpcmUoJy4vYWVzaWQuanNvbicpXG52YXIgZml4UHJvYyA9IHJlcXVpcmUoJy4vZml4UHJvYycpXG52YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJylcbnZhciBjb21wYXQgPSByZXF1aXJlKCdwYmtkZjInKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlS2V5c1xuXG5mdW5jdGlvbiBwYXJzZUtleXMgKGJ1ZmZlcikge1xuICB2YXIgcGFzc3dvcmRcbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdvYmplY3QnICYmICFCdWZmZXIuaXNCdWZmZXIoYnVmZmVyKSkge1xuICAgIHBhc3N3b3JkID0gYnVmZmVyLnBhc3NwaHJhc2VcbiAgICBidWZmZXIgPSBidWZmZXIua2V5XG4gIH1cbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgYnVmZmVyID0gQnVmZmVyLmZyb20oYnVmZmVyKVxuICB9XG5cbiAgdmFyIHN0cmlwcGVkID0gZml4UHJvYyhidWZmZXIsIHBhc3N3b3JkKVxuXG4gIHZhciB0eXBlID0gc3RyaXBwZWQudGFnXG4gIHZhciBkYXRhID0gc3RyaXBwZWQuZGF0YVxuICB2YXIgc3VidHlwZSwgbmRhdGFcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnQ0VSVElGSUNBVEUnOlxuICAgICAgbmRhdGEgPSBhc24xLmNlcnRpZmljYXRlLmRlY29kZShkYXRhLCAnZGVyJykudGJzQ2VydGlmaWNhdGUuc3ViamVjdFB1YmxpY0tleUluZm9cbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICBjYXNlICdQVUJMSUMgS0VZJzpcbiAgICAgIGlmICghbmRhdGEpIHtcbiAgICAgICAgbmRhdGEgPSBhc24xLlB1YmxpY0tleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICB9XG4gICAgICBzdWJ0eXBlID0gbmRhdGEuYWxnb3JpdGhtLmFsZ29yaXRobS5qb2luKCcuJylcbiAgICAgIHN3aXRjaCAoc3VidHlwZSkge1xuICAgICAgICBjYXNlICcxLjIuODQwLjExMzU0OS4xLjEuMSc6XG4gICAgICAgICAgcmV0dXJuIGFzbjEuUlNBUHVibGljS2V5LmRlY29kZShuZGF0YS5zdWJqZWN0UHVibGljS2V5LmRhdGEsICdkZXInKVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQ1LjIuMSc6XG4gICAgICAgICAgbmRhdGEuc3ViamVjdFByaXZhdGVLZXkgPSBuZGF0YS5zdWJqZWN0UHVibGljS2V5XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdlYycsXG4gICAgICAgICAgICBkYXRhOiBuZGF0YVxuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0MC40LjEnOlxuICAgICAgICAgIG5kYXRhLmFsZ29yaXRobS5wYXJhbXMucHViX2tleSA9IGFzbjEuRFNBcGFyYW0uZGVjb2RlKG5kYXRhLnN1YmplY3RQdWJsaWNLZXkuZGF0YSwgJ2RlcicpXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdkc2EnLFxuICAgICAgICAgICAgZGF0YTogbmRhdGEuYWxnb3JpdGhtLnBhcmFtc1xuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSBpZCAnICsgc3VidHlwZSlcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgdHlwZSAnICsgdHlwZSlcbiAgICBjYXNlICdFTkNSWVBURUQgUFJJVkFURSBLRVknOlxuICAgICAgZGF0YSA9IGFzbjEuRW5jcnlwdGVkUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICBkYXRhID0gZGVjcnlwdChkYXRhLCBwYXNzd29yZClcbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICBjYXNlICdQUklWQVRFIEtFWSc6XG4gICAgICBuZGF0YSA9IGFzbjEuUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICBzdWJ0eXBlID0gbmRhdGEuYWxnb3JpdGhtLmFsZ29yaXRobS5qb2luKCcuJylcbiAgICAgIHN3aXRjaCAoc3VidHlwZSkge1xuICAgICAgICBjYXNlICcxLjIuODQwLjExMzU0OS4xLjEuMSc6XG4gICAgICAgICAgcmV0dXJuIGFzbjEuUlNBUHJpdmF0ZUtleS5kZWNvZGUobmRhdGEuc3ViamVjdFByaXZhdGVLZXksICdkZXInKVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQ1LjIuMSc6XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGN1cnZlOiBuZGF0YS5hbGdvcml0aG0uY3VydmUsXG4gICAgICAgICAgICBwcml2YXRlS2V5OiBhc24xLkVDUHJpdmF0ZUtleS5kZWNvZGUobmRhdGEuc3ViamVjdFByaXZhdGVLZXksICdkZXInKS5wcml2YXRlS2V5XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQwLjQuMSc6XG4gICAgICAgICAgbmRhdGEuYWxnb3JpdGhtLnBhcmFtcy5wcml2X2tleSA9IGFzbjEuRFNBcGFyYW0uZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJylcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2RzYScsXG4gICAgICAgICAgICBwYXJhbXM6IG5kYXRhLmFsZ29yaXRobS5wYXJhbXNcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgaWQgJyArIHN1YnR5cGUpXG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gICAgY2FzZSAnUlNBIFBVQkxJQyBLRVknOlxuICAgICAgcmV0dXJuIGFzbjEuUlNBUHVibGljS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICBjYXNlICdSU0EgUFJJVkFURSBLRVknOlxuICAgICAgcmV0dXJuIGFzbjEuUlNBUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgY2FzZSAnRFNBIFBSSVZBVEUgS0VZJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdkc2EnLFxuICAgICAgICBwYXJhbXM6IGFzbjEuRFNBUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICB9XG4gICAgY2FzZSAnRUMgUFJJVkFURSBLRVknOlxuICAgICAgZGF0YSA9IGFzbjEuRUNQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGN1cnZlOiBkYXRhLnBhcmFtZXRlcnMudmFsdWUsXG4gICAgICAgIHByaXZhdGVLZXk6IGRhdGEucHJpdmF0ZUtleVxuICAgICAgfVxuICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgdHlwZSAnICsgdHlwZSlcbiAgfVxufVxucGFyc2VLZXlzLnNpZ25hdHVyZSA9IGFzbjEuc2lnbmF0dXJlXG5mdW5jdGlvbiBkZWNyeXB0IChkYXRhLCBwYXNzd29yZCkge1xuICB2YXIgc2FsdCA9IGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQua2RlLmtkZXBhcmFtcy5zYWx0XG4gIHZhciBpdGVycyA9IHBhcnNlSW50KGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQua2RlLmtkZXBhcmFtcy5pdGVycy50b1N0cmluZygpLCAxMClcbiAgdmFyIGFsZ28gPSBhZXNpZFtkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmNpcGhlci5hbGdvLmpvaW4oJy4nKV1cbiAgdmFyIGl2ID0gZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5jaXBoZXIuaXZcbiAgdmFyIGNpcGhlclRleHQgPSBkYXRhLnN1YmplY3RQcml2YXRlS2V5XG4gIHZhciBrZXlsZW4gPSBwYXJzZUludChhbGdvLnNwbGl0KCctJylbMV0sIDEwKSAvIDhcbiAgdmFyIGtleSA9IGNvbXBhdC5wYmtkZjJTeW5jKHBhc3N3b3JkLCBzYWx0LCBpdGVycywga2V5bGVuLCAnc2hhMScpXG4gIHZhciBjaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXYoYWxnbywga2V5LCBpdilcbiAgdmFyIG91dCA9IFtdXG4gIG91dC5wdXNoKGNpcGhlci51cGRhdGUoY2lwaGVyVGV4dCkpXG4gIG91dC5wdXNoKGNpcGhlci5maW5hbCgpKVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG4iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoQmFzZSA9IHJlcXVpcmUoJ2hhc2gtYmFzZScpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEFSUkFZMTYgPSBuZXcgQXJyYXkoMTYpXG5cbmZ1bmN0aW9uIE1ENSAoKSB7XG4gIEhhc2hCYXNlLmNhbGwodGhpcywgNjQpXG5cbiAgLy8gc3RhdGVcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbn1cblxuaW5oZXJpdHMoTUQ1LCBIYXNoQmFzZSlcblxuTUQ1LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgTSA9IEFSUkFZMTZcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBNW2ldID0gdGhpcy5fYmxvY2sucmVhZEludDMyTEUoaSAqIDQpXG5cbiAgdmFyIGEgPSB0aGlzLl9hXG4gIHZhciBiID0gdGhpcy5fYlxuICB2YXIgYyA9IHRoaXMuX2NcbiAgdmFyIGQgPSB0aGlzLl9kXG5cbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzBdLCAweGQ3NmFhNDc4LCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bMV0sIDB4ZThjN2I3NTYsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMl0sIDB4MjQyMDcwZGIsIDE3KVxuICBiID0gZm5GKGIsIGMsIGQsIGEsIE1bM10sIDB4YzFiZGNlZWUsIDIyKVxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bNF0sIDB4ZjU3YzBmYWYsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVs1XSwgMHg0Nzg3YzYyYSwgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVs2XSwgMHhhODMwNDYxMywgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVs3XSwgMHhmZDQ2OTUwMSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVs4XSwgMHg2OTgwOThkOCwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzldLCAweDhiNDRmN2FmLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzEwXSwgMHhmZmZmNWJiMSwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVsxMV0sIDB4ODk1Y2Q3YmUsIDIyKVxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bMTJdLCAweDZiOTAxMTIyLCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bMTNdLCAweGZkOTg3MTkzLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzE0XSwgMHhhNjc5NDM4ZSwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVsxNV0sIDB4NDliNDA4MjEsIDIyKVxuXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVsxXSwgMHhmNjFlMjU2MiwgNSlcbiAgZCA9IGZuRyhkLCBhLCBiLCBjLCBNWzZdLCAweGMwNDBiMzQwLCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bMTFdLCAweDI2NWU1YTUxLCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzBdLCAweGU5YjZjN2FhLCAyMClcbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzVdLCAweGQ2MmYxMDVkLCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMTBdLCAweDAyNDQxNDUzLCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bMTVdLCAweGQ4YTFlNjgxLCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzRdLCAweGU3ZDNmYmM4LCAyMClcbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzldLCAweDIxZTFjZGU2LCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMTRdLCAweGMzMzcwN2Q2LCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bM10sIDB4ZjRkNTBkODcsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bOF0sIDB4NDU1YTE0ZWQsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bMTNdLCAweGE5ZTNlOTA1LCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMl0sIDB4ZmNlZmEzZjgsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVs3XSwgMHg2NzZmMDJkOSwgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVsxMl0sIDB4OGQyYTRjOGEsIDIwKVxuXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVs1XSwgMHhmZmZhMzk0MiwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzhdLCAweDg3NzFmNjgxLCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzExXSwgMHg2ZDlkNjEyMiwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVsxNF0sIDB4ZmRlNTM4MGMsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bMV0sIDB4YTRiZWVhNDQsIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVs0XSwgMHg0YmRlY2ZhOSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVs3XSwgMHhmNmJiNGI2MCwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVsxMF0sIDB4YmViZmJjNzAsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bMTNdLCAweDI4OWI3ZWM2LCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bMF0sIDB4ZWFhMTI3ZmEsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bM10sIDB4ZDRlZjMwODUsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bNl0sIDB4MDQ4ODFkMDUsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bOV0sIDB4ZDlkNGQwMzksIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVsxMl0sIDB4ZTZkYjk5ZTUsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bMTVdLCAweDFmYTI3Y2Y4LCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzJdLCAweGM0YWM1NjY1LCAyMylcblxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bMF0sIDB4ZjQyOTIyNDQsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVs3XSwgMHg0MzJhZmY5NywgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsxNF0sIDB4YWI5NDIzYTcsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bNV0sIDB4ZmM5M2EwMzksIDIxKVxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bMTJdLCAweDY1NWI1OWMzLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bM10sIDB4OGYwY2NjOTIsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bMTBdLCAweGZmZWZmNDdkLCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzFdLCAweDg1ODQ1ZGQxLCAyMSlcbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzhdLCAweDZmYTg3ZTRmLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bMTVdLCAweGZlMmNlNmUwLCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzZdLCAweGEzMDE0MzE0LCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzEzXSwgMHg0ZTA4MTFhMSwgMjEpXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVs0XSwgMHhmNzUzN2U4MiwgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzExXSwgMHhiZDNhZjIzNSwgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsyXSwgMHgyYWQ3ZDJiYiwgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVs5XSwgMHhlYjg2ZDM5MSwgMjEpXG5cbiAgdGhpcy5fYSA9ICh0aGlzLl9hICsgYSkgfCAwXG4gIHRoaXMuX2IgPSAodGhpcy5fYiArIGIpIHwgMFxuICB0aGlzLl9jID0gKHRoaXMuX2MgKyBjKSB8IDBcbiAgdGhpcy5fZCA9ICh0aGlzLl9kICsgZCkgfCAwXG59XG5cbk1ENS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gY3JlYXRlIHBhZGRpbmcgYW5kIGhhbmRsZSBibG9ja3NcbiAgdGhpcy5fYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSAweDgwXG4gIGlmICh0aGlzLl9ibG9ja09mZnNldCA+IDU2KSB7XG4gICAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNjQpXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDU2KVxuICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFswXSwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzFdLCA2MClcbiAgdGhpcy5fdXBkYXRlKClcblxuICAvLyBwcm9kdWNlIHJlc3VsdFxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2EsIDApXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYiwgNClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9jLCA4KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2QsIDEyKVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIHJvdGwgKHgsIG4pIHtcbiAgcmV0dXJuICh4IDw8IG4pIHwgKHggPj4+ICgzMiAtIG4pKVxufVxuXG5mdW5jdGlvbiBmbkYgKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiICYgYykgfCAoKH5iKSAmIGQpKSArIG0gKyBrKSB8IDAsIHMpICsgYikgfCAwXG59XG5cbmZ1bmN0aW9uIGZuRyAoYSwgYiwgYywgZCwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBkKSB8IChjICYgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5IIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gYyBeIGQpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5JIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYyBeIChiIHwgKH5kKSkpKSArIG0gKyBrKSB8IDAsIHMpICsgYikgfCAwXG59XG5cbm1vZHVsZS5leHBvcnRzID0gTUQ1XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG5cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmluaGVyaXRzKFN0cmVhbSwgRUUpO1xuU3RyZWFtLlJlYWRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzJyk7XG5TdHJlYW0uV3JpdGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUuanMnKTtcblN0cmVhbS5EdXBsZXggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vZHVwbGV4LmpzJyk7XG5TdHJlYW0uVHJhbnNmb3JtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcycpO1xuU3RyZWFtLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzJyk7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuNC54XG5TdHJlYW0uU3RyZWFtID0gU3RyZWFtO1xuXG5cblxuLy8gb2xkLXN0eWxlIHN0cmVhbXMuICBOb3RlIHRoYXQgdGhlIHBpcGUgbWV0aG9kICh0aGUgb25seSByZWxldmFudFxuLy8gcGFydCBvZiB0aGlzIGNsYXNzKSBpcyBvdmVycmlkZGVuIGluIHRoZSBSZWFkYWJsZSBjbGFzcy5cblxuZnVuY3Rpb24gU3RyZWFtKCkge1xuICBFRS5jYWxsKHRoaXMpO1xufVxuXG5TdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBvcHRpb25zKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGlmIChkZXN0LndyaXRhYmxlKSB7XG4gICAgICBpZiAoZmFsc2UgPT09IGRlc3Qud3JpdGUoY2h1bmspICYmIHNvdXJjZS5wYXVzZSkge1xuICAgICAgICBzb3VyY2UucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2RhdGEnLCBvbmRhdGEpO1xuXG4gIGZ1bmN0aW9uIG9uZHJhaW4oKSB7XG4gICAgaWYgKHNvdXJjZS5yZWFkYWJsZSAmJiBzb3VyY2UucmVzdW1lKSB7XG4gICAgICBzb3VyY2UucmVzdW1lKCk7XG4gICAgfVxuICB9XG5cbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICAvLyBJZiB0aGUgJ2VuZCcgb3B0aW9uIGlzIG5vdCBzdXBwbGllZCwgZGVzdC5lbmQoKSB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gIC8vIHNvdXJjZSBnZXRzIHRoZSAnZW5kJyBvciAnY2xvc2UnIGV2ZW50cy4gIE9ubHkgZGVzdC5lbmQoKSBvbmNlLlxuICBpZiAoIWRlc3QuX2lzU3RkaW8gJiYgKCFvcHRpb25zIHx8IG9wdGlvbnMuZW5kICE9PSBmYWxzZSkpIHtcbiAgICBzb3VyY2Uub24oJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2Uub24oJ2Nsb3NlJywgb25jbG9zZSk7XG4gIH1cblxuICB2YXIgZGlkT25FbmQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBpZiAodHlwZW9mIGRlc3QuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgZGVzdC5kZXN0cm95KCk7XG4gIH1cblxuICAvLyBkb24ndCBsZWF2ZSBkYW5nbGluZyBwaXBlcyB3aGVuIHRoZXJlIGFyZSBlcnJvcnMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBjbGVhbnVwKCk7XG4gICAgaWYgKEVFLmxpc3RlbmVyQ291bnQodGhpcywgJ2Vycm9yJykgPT09IDApIHtcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgc3RyZWFtIGVycm9yIGluIHBpcGUuXG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBkZXN0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIHJlbW92ZSBhbGwgdGhlIGV2ZW50IGxpc3RlbmVycyB0aGF0IHdlcmUgYWRkZWQuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG4gIH1cblxuICBzb3VyY2Uub24oJ2VuZCcsIGNsZWFudXApO1xuICBzb3VyY2Uub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0LmVtaXQoJ3BpcGUnLCBzb3VyY2UpO1xuXG4gIC8vIEFsbG93IGZvciB1bml4LWxpa2UgdXNhZ2U6IEEucGlwZShCKS5waXBlKEMpXG4gIHJldHVybiBkZXN0O1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGxcbnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nXG4gID8gUi5hcHBseVxuICA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseSh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpO1xuICB9XG5cbnZhciBSZWZsZWN0T3duS2V5c1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWZsZWN0T3duS2V5cyA9IFIub3duS2V5c1xufSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldClcbiAgICAgIC5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKTtcbiAgfTtcbn0gZWxzZSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFByb2Nlc3NFbWl0V2FybmluZyh3YXJuaW5nKSB7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2FybikgY29uc29sZS53YXJuKHdhcm5pbmcpO1xufVxuXG52YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gTnVtYmVySXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gQSBiaXQgc2ltcGxlciB0aGFuIHJlYWRhYmxlIHN0cmVhbXMuXG4vLyBJbXBsZW1lbnQgYW4gYXN5bmMgLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNiKSwgYW5kIGl0J2xsIGhhbmRsZSBhbGxcbi8vIHRoZSBkcmFpbiBldmVudCBlbWlzc2lvbiBhbmQgYnVmZmVyaW5nLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gV3JpdGFibGU7XG5cbi8qIDxyZXBsYWNlbWVudD4gKi9cbmZ1bmN0aW9uIFdyaXRlUmVxKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhpcy5jaHVuayA9IGNodW5rO1xuICB0aGlzLmVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHRoaXMuY2FsbGJhY2sgPSBjYjtcbiAgdGhpcy5uZXh0ID0gbnVsbDtcbn1cblxuLy8gSXQgc2VlbXMgYSBsaW5rZWQgbGlzdCBidXQgaXQgaXMgbm90XG4vLyB0aGVyZSB3aWxsIGJlIG9ubHkgMiBvZiB0aGVzZSBmb3IgZWFjaCBzdHJlYW1cbmZ1bmN0aW9uIENvcmtlZFJlcXVlc3Qoc3RhdGUpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB0aGlzLm5leHQgPSBudWxsO1xuICB0aGlzLmVudHJ5ID0gbnVsbDtcbiAgdGhpcy5maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgb25Db3JrZWRGaW5pc2goX3RoaXMsIHN0YXRlKTtcbiAgfTtcbn1cbi8qIDwvcmVwbGFjZW1lbnQ+ICovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgYXN5bmNXcml0ZSA9ICFwcm9jZXNzLmJyb3dzZXIgJiYgWyd2MC4xMCcsICd2MC45LiddLmluZGV4T2YocHJvY2Vzcy52ZXJzaW9uLnNsaWNlKDAsIDUpKSA+IC0xID8gc2V0SW1tZWRpYXRlIDogcG5hLm5leHRUaWNrO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbldyaXRhYmxlLldyaXRhYmxlU3RhdGUgPSBXcml0YWJsZVN0YXRlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaW50ZXJuYWxVdGlsID0ge1xuICBkZXByZWNhdGU6IHJlcXVpcmUoJ3V0aWwtZGVwcmVjYXRlJylcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIGRlc3Ryb3lJbXBsID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3knKTtcblxudXRpbC5pbmhlcml0cyhXcml0YWJsZSwgU3RyZWFtKTtcblxuZnVuY3Rpb24gbm9wKCkge31cblxuZnVuY3Rpb24gV3JpdGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG4gIHZhciBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciBvciBub3QgdGhpcyBzdHJlYW1cbiAgLy8gY29udGFpbnMgYnVmZmVycyBvciBvYmplY3RzLlxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMud3JpdGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCB3cml0ZSgpIHN0YXJ0cyByZXR1cm5pbmcgZmFsc2VcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyB0aGF0IHdlIGFsd2F5cyByZXR1cm4gZmFsc2UgaWZcbiAgLy8gdGhlIGVudGlyZSBidWZmZXIgaXMgbm90IGZsdXNoZWQgaW1tZWRpYXRlbHkgb24gd3JpdGUoKVxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgd3JpdGFibGVId20gPSBvcHRpb25zLndyaXRhYmxlSGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcblxuICBpZiAoaHdtIHx8IGh3bSA9PT0gMCkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtO2Vsc2UgaWYgKGlzRHVwbGV4ICYmICh3cml0YWJsZUh3bSB8fCB3cml0YWJsZUh3bSA9PT0gMCkpIHRoaXMuaGlnaFdhdGVyTWFyayA9IHdyaXRhYmxlSHdtO2Vsc2UgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBpZiBfZmluYWwgaGFzIGJlZW4gY2FsbGVkXG4gIHRoaXMuZmluYWxDYWxsZWQgPSBmYWxzZTtcblxuICAvLyBkcmFpbiBldmVudCBmbGFnLlxuICB0aGlzLm5lZWREcmFpbiA9IGZhbHNlO1xuICAvLyBhdCB0aGUgc3RhcnQgb2YgY2FsbGluZyBlbmQoKVxuICB0aGlzLmVuZGluZyA9IGZhbHNlO1xuICAvLyB3aGVuIGVuZCgpIGhhcyBiZWVuIGNhbGxlZCwgYW5kIHJldHVybmVkXG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgLy8gd2hlbiAnZmluaXNoJyBpcyBlbWl0dGVkXG4gIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBoYXMgaXQgYmVlbiBkZXN0cm95ZWRcbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcblxuICAvLyBzaG91bGQgd2UgZGVjb2RlIHN0cmluZ3MgaW50byBidWZmZXJzIGJlZm9yZSBwYXNzaW5nIHRvIF93cml0ZT9cbiAgLy8gdGhpcyBpcyBoZXJlIHNvIHRoYXQgc29tZSBub2RlLWNvcmUgc3RyZWFtcyBjYW4gb3B0aW1pemUgc3RyaW5nXG4gIC8vIGhhbmRsaW5nIGF0IGEgbG93ZXIgbGV2ZWwuXG4gIHZhciBub0RlY29kZSA9IG9wdGlvbnMuZGVjb2RlU3RyaW5ncyA9PT0gZmFsc2U7XG4gIHRoaXMuZGVjb2RlU3RyaW5ncyA9ICFub0RlY29kZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyBub3QgYW4gYWN0dWFsIGJ1ZmZlciB3ZSBrZWVwIHRyYWNrIG9mLCBidXQgYSBtZWFzdXJlbWVudFxuICAvLyBvZiBob3cgbXVjaCB3ZSdyZSB3YWl0aW5nIHRvIGdldCBwdXNoZWQgdG8gc29tZSB1bmRlcmx5aW5nXG4gIC8vIHNvY2tldCBvciBmaWxlLlxuICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgLy8gYSBmbGFnIHRvIHNlZSB3aGVuIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSB3cml0ZS5cbiAgdGhpcy53cml0aW5nID0gZmFsc2U7XG5cbiAgLy8gd2hlbiB0cnVlIGFsbCB3cml0ZXMgd2lsbCBiZSBidWZmZXJlZCB1bnRpbCAudW5jb3JrKCkgY2FsbFxuICB0aGlzLmNvcmtlZCA9IDA7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgb253cml0ZSBjYiBpcyBjYWxsZWQgaW1tZWRpYXRlbHksXG4gIC8vIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2UgYW55XG4gIC8vIGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gYSBmbGFnIHRvIGtub3cgaWYgd2UncmUgcHJvY2Vzc2luZyBwcmV2aW91c2x5IGJ1ZmZlcmVkIGl0ZW1zLCB3aGljaFxuICAvLyBtYXkgY2FsbCB0aGUgX3dyaXRlKCkgY2FsbGJhY2sgaW4gdGhlIHNhbWUgdGljaywgc28gdGhhdCB3ZSBkb24ndFxuICAvLyBlbmQgdXAgaW4gYW4gb3ZlcmxhcHBlZCBvbndyaXRlIHNpdHVhdGlvbi5cbiAgdGhpcy5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQncyBwYXNzZWQgdG8gX3dyaXRlKGNodW5rLGNiKVxuICB0aGlzLm9ud3JpdGUgPSBmdW5jdGlvbiAoZXIpIHtcbiAgICBvbndyaXRlKHN0cmVhbSwgZXIpO1xuICB9O1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0IHRoZSB1c2VyIHN1cHBsaWVzIHRvIHdyaXRlKGNodW5rLGVuY29kaW5nLGNiKVxuICB0aGlzLndyaXRlY2IgPSBudWxsO1xuXG4gIC8vIHRoZSBhbW91bnQgdGhhdCBpcyBiZWluZyB3cml0dGVuIHdoZW4gX3dyaXRlIGlzIGNhbGxlZC5cbiAgdGhpcy53cml0ZWxlbiA9IDA7XG5cbiAgdGhpcy5idWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuXG4gIC8vIG51bWJlciBvZiBwZW5kaW5nIHVzZXItc3VwcGxpZWQgd3JpdGUgY2FsbGJhY2tzXG4gIC8vIHRoaXMgbXVzdCBiZSAwIGJlZm9yZSAnZmluaXNoJyBjYW4gYmUgZW1pdHRlZFxuICB0aGlzLnBlbmRpbmdjYiA9IDA7XG5cbiAgLy8gZW1pdCBwcmVmaW5pc2ggaWYgdGhlIG9ubHkgdGhpbmcgd2UncmUgd2FpdGluZyBmb3IgaXMgX3dyaXRlIGNic1xuICAvLyBUaGlzIGlzIHJlbGV2YW50IGZvciBzeW5jaHJvbm91cyBUcmFuc2Zvcm0gc3RyZWFtc1xuICB0aGlzLnByZWZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gVHJ1ZSBpZiB0aGUgZXJyb3Igd2FzIGFscmVhZHkgZW1pdHRlZCBhbmQgc2hvdWxkIG5vdCBiZSB0aHJvd24gYWdhaW5cbiAgdGhpcy5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcblxuICAvLyBjb3VudCBidWZmZXJlZCByZXF1ZXN0c1xuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcblxuICAvLyBhbGxvY2F0ZSB0aGUgZmlyc3QgQ29ya2VkUmVxdWVzdCwgdGhlcmUgaXMgYWx3YXlzXG4gIC8vIG9uZSBhbGxvY2F0ZWQgYW5kIGZyZWUgdG8gdXNlLCBhbmQgd2UgbWFpbnRhaW4gYXQgbW9zdCB0d29cbiAgdGhpcy5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdCh0aGlzKTtcbn1cblxuV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUuZ2V0QnVmZmVyID0gZnVuY3Rpb24gZ2V0QnVmZmVyKCkge1xuICB2YXIgY3VycmVudCA9IHRoaXMuYnVmZmVyZWRSZXF1ZXN0O1xuICB2YXIgb3V0ID0gW107XG4gIHdoaWxlIChjdXJyZW50KSB7XG4gICAgb3V0LnB1c2goY3VycmVudCk7XG4gICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgfVxuICByZXR1cm4gb3V0O1xufTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUsICdidWZmZXInLCB7XG4gICAgICBnZXQ6IGludGVybmFsVXRpbC5kZXByZWNhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCdWZmZXIoKTtcbiAgICAgIH0sICdfd3JpdGFibGVTdGF0ZS5idWZmZXIgaXMgZGVwcmVjYXRlZC4gVXNlIF93cml0YWJsZVN0YXRlLmdldEJ1ZmZlciAnICsgJ2luc3RlYWQuJywgJ0RFUDAwMDMnKVxuICAgIH0pO1xuICB9IGNhdGNoIChfKSB7fVxufSkoKTtcblxuLy8gVGVzdCBfd3JpdGFibGVTdGF0ZSBmb3IgaW5oZXJpdGFuY2UgdG8gYWNjb3VudCBmb3IgRHVwbGV4IHN0cmVhbXMsXG4vLyB3aG9zZSBwcm90b3R5cGUgY2hhaW4gb25seSBwb2ludHMgdG8gUmVhZGFibGUuXG52YXIgcmVhbEhhc0luc3RhbmNlO1xuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmhhc0luc3RhbmNlICYmIHR5cGVvZiBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICByZWFsSGFzSW5zdGFuY2UgPSBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLCBTeW1ib2wuaGFzSW5zdGFuY2UsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgaWYgKHJlYWxIYXNJbnN0YW5jZS5jYWxsKHRoaXMsIG9iamVjdCkpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHRoaXMgIT09IFdyaXRhYmxlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIHJldHVybiBvYmplY3QgJiYgb2JqZWN0Ll93cml0YWJsZVN0YXRlIGluc3RhbmNlb2YgV3JpdGFibGVTdGF0ZTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiB0aGlzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBXcml0YWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0b28uXG4gIC8vIGByZWFsSGFzSW5zdGFuY2VgIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHVzaW5nIHBsYWluIGBpbnN0YW5jZW9mYFxuICAvLyB3b3VsZCByZXR1cm4gZmFsc2UsIGFzIG5vIGBfd3JpdGFibGVTdGF0ZWAgcHJvcGVydHkgaXMgYXR0YWNoZWQuXG5cbiAgLy8gVHJ5aW5nIHRvIHVzZSB0aGUgY3VzdG9tIGBpbnN0YW5jZW9mYCBmb3IgV3JpdGFibGUgaGVyZSB3aWxsIGFsc28gYnJlYWsgdGhlXG4gIC8vIE5vZGUuanMgTGF6eVRyYW5zZm9ybSBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaGFzIGEgbm9uLXRyaXZpYWwgZ2V0dGVyIGZvclxuICAvLyBgX3dyaXRhYmxlU3RhdGVgIHRoYXQgd291bGQgbGVhZCB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gIGlmICghcmVhbEhhc0luc3RhbmNlLmNhbGwoV3JpdGFibGUsIHRoaXMpICYmICEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHtcbiAgICByZXR1cm4gbmV3IFdyaXRhYmxlKG9wdGlvbnMpO1xuICB9XG5cbiAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeS5cbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGUgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRlID0gb3B0aW9ucy53cml0ZTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZXYgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRldiA9IG9wdGlvbnMud3JpdGV2O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmluYWwgPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZpbmFsID0gb3B0aW9ucy5maW5hbDtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG4vLyBPdGhlcndpc2UgcGVvcGxlIGNhbiBwaXBlIFdyaXRhYmxlIHN0cmVhbXMsIHdoaWNoIGlzIGp1c3Qgd3JvbmcuXG5Xcml0YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignQ2Fubm90IHBpcGUsIG5vdCByZWFkYWJsZScpKTtcbn07XG5cbmZ1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoc3RyZWFtLCBjYikge1xuICB2YXIgZXIgPSBuZXcgRXJyb3IoJ3dyaXRlIGFmdGVyIGVuZCcpO1xuICAvLyBUT0RPOiBkZWZlciBlcnJvciBldmVudHMgY29uc2lzdGVudGx5IGV2ZXJ5d2hlcmUsIG5vdCBqdXN0IHRoZSBjYlxuICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIHBuYS5uZXh0VGljayhjYiwgZXIpO1xufVxuXG4vLyBDaGVja3MgdGhhdCBhIHVzZXItc3VwcGxpZWQgY2h1bmsgaXMgdmFsaWQsIGVzcGVjaWFsbHkgZm9yIHRoZSBwYXJ0aWN1bGFyXG4vLyBtb2RlIHRoZSBzdHJlYW0gaXMgaW4uIEN1cnJlbnRseSB0aGlzIG1lYW5zIHRoYXQgYG51bGxgIGlzIG5ldmVyIGFjY2VwdGVkXG4vLyBhbmQgdW5kZWZpbmVkL25vbi1zdHJpbmcgdmFsdWVzIGFyZSBvbmx5IGFsbG93ZWQgaW4gb2JqZWN0IG1vZGUuXG5mdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBjYikge1xuICB2YXIgdmFsaWQgPSB0cnVlO1xuICB2YXIgZXIgPSBmYWxzZTtcblxuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ01heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgaWYgKGVyKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIHBuYS5uZXh0VGljayhjYiwgZXIpO1xuICAgIHZhbGlkID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbGlkO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuICB2YXIgcmV0ID0gZmFsc2U7XG4gIHZhciBpc0J1ZiA9ICFzdGF0ZS5vYmplY3RNb2RlICYmIF9pc1VpbnQ4QXJyYXkoY2h1bmspO1xuXG4gIGlmIChpc0J1ZiAmJiAhQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkge1xuICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoaXNCdWYpIGVuY29kaW5nID0gJ2J1ZmZlcic7ZWxzZSBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcblxuICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSBjYiA9IG5vcDtcblxuICBpZiAoc3RhdGUuZW5kZWQpIHdyaXRlQWZ0ZXJFbmQodGhpcywgY2IpO2Vsc2UgaWYgKGlzQnVmIHx8IHZhbGlkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBjYikpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgc3RhdGUuY29ya2VkKys7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUudW5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQtLTtcblxuICAgIGlmICghc3RhdGUud3JpdGluZyAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIGNsZWFyQnVmZmVyKHRoaXMsIHN0YXRlKTtcbiAgfVxufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnNldERlZmF1bHRFbmNvZGluZyA9IGZ1bmN0aW9uIHNldERlZmF1bHRFbmNvZGluZyhlbmNvZGluZykge1xuICAvLyBub2RlOjpQYXJzZUVuY29kaW5nKCkgcmVxdWlyZXMgbG93ZXIgY2FzZS5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIGVuY29kaW5nID0gZW5jb2RpbmcudG9Mb3dlckNhc2UoKTtcbiAgaWYgKCEoWydoZXgnLCAndXRmOCcsICd1dGYtOCcsICdhc2NpaScsICdiaW5hcnknLCAnYmFzZTY0JywgJ3VjczInLCAndWNzLTInLCAndXRmMTZsZScsICd1dGYtMTZsZScsICdyYXcnXS5pbmRleE9mKChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpKSA+IC0xKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKTtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2RpbmcgPSBlbmNvZGluZztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKSB7XG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiBzdGF0ZS5kZWNvZGVTdHJpbmdzICE9PSBmYWxzZSAmJiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICB9XG4gIHJldHVybiBjaHVuaztcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xuLy8gaW4gdGhlIHF1ZXVlLCBhbmQgd2FpdCBvdXIgdHVybi4gIE90aGVyd2lzZSwgY2FsbCBfd3JpdGVcbi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuXG5mdW5jdGlvbiB3cml0ZU9yQnVmZmVyKHN0cmVhbSwgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGlmICghaXNCdWYpIHtcbiAgICB2YXIgbmV3Q2h1bmsgPSBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKTtcbiAgICBpZiAoY2h1bmsgIT09IG5ld0NodW5rKSB7XG4gICAgICBpc0J1ZiA9IHRydWU7XG4gICAgICBlbmNvZGluZyA9ICdidWZmZXInO1xuICAgICAgY2h1bmsgPSBuZXdDaHVuaztcbiAgICB9XG4gIH1cbiAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gIHN0YXRlLmxlbmd0aCArPSBsZW47XG5cbiAgdmFyIHJldCA9IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIC8vIHdlIG11c3QgZW5zdXJlIHRoYXQgcHJldmlvdXMgbmVlZERyYWluIHdpbGwgbm90IGJlIHJlc2V0IHRvIGZhbHNlLlxuICBpZiAoIXJldCkgc3RhdGUubmVlZERyYWluID0gdHJ1ZTtcblxuICBpZiAoc3RhdGUud3JpdGluZyB8fCBzdGF0ZS5jb3JrZWQpIHtcbiAgICB2YXIgbGFzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IHtcbiAgICAgIGNodW5rOiBjaHVuayxcbiAgICAgIGVuY29kaW5nOiBlbmNvZGluZyxcbiAgICAgIGlzQnVmOiBpc0J1ZixcbiAgICAgIGNhbGxiYWNrOiBjYixcbiAgICAgIG5leHQ6IG51bGxcbiAgICB9O1xuICAgIGlmIChsYXN0KSB7XG4gICAgICBsYXN0Lm5leHQgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCArPSAxO1xuICB9IGVsc2Uge1xuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHdyaXRldiwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHN0YXRlLndyaXRlbGVuID0gbGVuO1xuICBzdGF0ZS53cml0ZWNiID0gY2I7XG4gIHN0YXRlLndyaXRpbmcgPSB0cnVlO1xuICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgaWYgKHdyaXRldikgc3RyZWFtLl93cml0ZXYoY2h1bmssIHN0YXRlLm9ud3JpdGUpO2Vsc2Ugc3RyZWFtLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIHN0YXRlLm9ud3JpdGUpO1xuICBzdGF0ZS5zeW5jID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpIHtcbiAgLS1zdGF0ZS5wZW5kaW5nY2I7XG5cbiAgaWYgKHN5bmMpIHtcbiAgICAvLyBkZWZlciB0aGUgY2FsbGJhY2sgaWYgd2UgYXJlIGJlaW5nIGNhbGxlZCBzeW5jaHJvbm91c2x5XG4gICAgLy8gdG8gYXZvaWQgcGlsaW5nIHVwIHRoaW5ncyBvbiB0aGUgc3RhY2tcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYW5kIGl0IHdpbGwgYWx3YXlzIGhhcHBlblxuICAgIC8vIGFmdGVyIGVycm9yXG4gICAgcG5hLm5leHRUaWNrKGZpbmlzaE1heWJlLCBzdHJlYW0sIHN0YXRlKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNhbGxlciBleHBlY3QgdGhpcyB0byBoYXBwZW4gYmVmb3JlIGlmXG4gICAgLy8gaXQgaXMgYXN5bmNcbiAgICBjYihlcik7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBidXQgZmluaXNoIG11c3RcbiAgICAvLyBhbHdheXMgZm9sbG93IGVycm9yXG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKSB7XG4gIHN0YXRlLndyaXRpbmcgPSBmYWxzZTtcbiAgc3RhdGUud3JpdGVjYiA9IG51bGw7XG4gIHN0YXRlLmxlbmd0aCAtPSBzdGF0ZS53cml0ZWxlbjtcbiAgc3RhdGUud3JpdGVsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlKHN0cmVhbSwgZXIpIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgc3luYyA9IHN0YXRlLnN5bmM7XG4gIHZhciBjYiA9IHN0YXRlLndyaXRlY2I7XG5cbiAgb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKTtcblxuICBpZiAoZXIpIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpO2Vsc2Uge1xuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0XG4gICAgdmFyIGZpbmlzaGVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG5cbiAgICBpZiAoIWZpbmlzaGVkICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSB7XG4gICAgICBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoc3luYykge1xuICAgICAgLyo8cmVwbGFjZW1lbnQ+Ki9cbiAgICAgIGFzeW5jV3JpdGUoYWZ0ZXJXcml0ZSwgc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICAgIC8qPC9yZXBsYWNlbWVudD4qL1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKSB7XG4gIGlmICghZmluaXNoZWQpIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKTtcbiAgc3RhdGUucGVuZGluZ2NiLS07XG4gIGNiKCk7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG4vLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndFxuLy8gZW1pdCAnZHJhaW4nIGJlZm9yZSB0aGUgd3JpdGUoKSBjb25zdW1lciBnZXRzIHRoZSAnZmFsc2UnIHJldHVyblxuLy8gdmFsdWUsIGFuZCBoYXMgYSBjaGFuY2UgdG8gYXR0YWNoIGEgJ2RyYWluJyBsaXN0ZW5lci5cbmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUubmVlZERyYWluKSB7XG4gICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XG4gIH1cbn1cblxuLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcbmZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7XG4gIHZhciBlbnRyeSA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdDtcblxuICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkge1xuICAgIC8vIEZhc3QgY2FzZSwgd3JpdGUgZXZlcnl0aGluZyB1c2luZyBfd3JpdGV2KClcbiAgICB2YXIgbCA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50O1xuICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobCk7XG4gICAgdmFyIGhvbGRlciA9IHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZTtcbiAgICBob2xkZXIuZW50cnkgPSBlbnRyeTtcblxuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdmFyIGFsbEJ1ZmZlcnMgPSB0cnVlO1xuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgYnVmZmVyW2NvdW50XSA9IGVudHJ5O1xuICAgICAgaWYgKCFlbnRyeS5pc0J1ZikgYWxsQnVmZmVycyA9IGZhbHNlO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgY291bnQgKz0gMTtcbiAgICB9XG4gICAgYnVmZmVyLmFsbEJ1ZmZlcnMgPSBhbGxCdWZmZXJzO1xuXG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB0cnVlLCBzdGF0ZS5sZW5ndGgsIGJ1ZmZlciwgJycsIGhvbGRlci5maW5pc2gpO1xuXG4gICAgLy8gZG9Xcml0ZSBpcyBhbG1vc3QgYWx3YXlzIGFzeW5jLCBkZWZlciB0aGVzZSB0byBzYXZlIGEgYml0IG9mIHRpbWVcbiAgICAvLyBhcyB0aGUgaG90IHBhdGggZW5kcyB3aXRoIGRvV3JpdGVcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgICBpZiAoaG9sZGVyLm5leHQpIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGhvbGRlci5uZXh0O1xuICAgICAgaG9sZGVyLm5leHQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdChzdGF0ZSk7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lXG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuaztcbiAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nO1xuICAgICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudC0tO1xuICAgICAgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5XG4gICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cbiAgICAgIGlmIChzdGF0ZS53cml0aW5nKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlbnRyeSA9PT0gbnVsbCkgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIH1cblxuICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBlbnRyeTtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobmV3IEVycm9yKCdfd3JpdGUoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRldiA9IG51bGw7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmICh0eXBlb2YgY2h1bmsgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGNodW5rO1xuICAgIGNodW5rID0gbnVsbDtcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoY2h1bmsgIT09IG51bGwgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCkgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpO1xuXG4gIC8vIC5lbmQoKSBmdWxseSB1bmNvcmtzXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQgPSAxO1xuICAgIHRoaXMudW5jb3JrKCk7XG4gIH1cblxuICAvLyBpZ25vcmUgdW5uZWNlc3NhcnkgZW5kKCkgY2FsbHMuXG4gIGlmICghc3RhdGUuZW5kaW5nICYmICFzdGF0ZS5maW5pc2hlZCkgZW5kV3JpdGFibGUodGhpcywgc3RhdGUsIGNiKTtcbn07XG5cbmZ1bmN0aW9uIG5lZWRGaW5pc2goc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLmVuZGluZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID09PSBudWxsICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUud3JpdGluZztcbn1cbmZ1bmN0aW9uIGNhbGxGaW5hbChzdHJlYW0sIHN0YXRlKSB7XG4gIHN0cmVhbS5fZmluYWwoZnVuY3Rpb24gKGVycikge1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfVxuICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCAmJiAhc3RhdGUuZmluYWxDYWxsZWQpIHtcbiAgICBpZiAodHlwZW9mIHN0cmVhbS5fZmluYWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgICAgc3RhdGUuZmluYWxDYWxsZWQgPSB0cnVlO1xuICAgICAgcG5hLm5leHRUaWNrKGNhbGxGaW5hbCwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbmVlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuICBpZiAobmVlZCkge1xuICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcbiAgICBpZiAoc3RhdGUucGVuZGluZ2NiID09PSAwKSB7XG4gICAgICBzdGF0ZS5maW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgnZmluaXNoJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZWVkO1xufVxuXG5mdW5jdGlvbiBlbmRXcml0YWJsZShzdHJlYW0sIHN0YXRlLCBjYikge1xuICBzdGF0ZS5lbmRpbmcgPSB0cnVlO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgaWYgKGNiKSB7XG4gICAgaWYgKHN0YXRlLmZpbmlzaGVkKSBwbmEubmV4dFRpY2soY2IpO2Vsc2Ugc3RyZWFtLm9uY2UoJ2ZpbmlzaCcsIGNiKTtcbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbkNvcmtlZEZpbmlzaChjb3JrUmVxLCBzdGF0ZSwgZXJyKSB7XG4gIHZhciBlbnRyeSA9IGNvcmtSZXEuZW50cnk7XG4gIGNvcmtSZXEuZW50cnkgPSBudWxsO1xuICB3aGlsZSAoZW50cnkpIHtcbiAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBjYihlcnIpO1xuICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgfVxuICBpZiAoc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlKSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlLm5leHQgPSBjb3JrUmVxO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGNvcmtSZXE7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuV3JpdGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLmVuZCgpO1xuICBjYihlcnIpO1xufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIGlzRW5jb2RpbmcgPSBCdWZmZXIuaXNFbmNvZGluZyB8fCBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgZW5jb2RpbmcgPSAnJyArIGVuY29kaW5nO1xuICBzd2l0Y2ggKGVuY29kaW5nICYmIGVuY29kaW5nLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOmNhc2UgJ3V0ZjgnOmNhc2UgJ3V0Zi04JzpjYXNlICdhc2NpaSc6Y2FzZSAnYmluYXJ5JzpjYXNlICdiYXNlNjQnOmNhc2UgJ3VjczInOmNhc2UgJ3Vjcy0yJzpjYXNlICd1dGYxNmxlJzpjYXNlICd1dGYtMTZsZSc6Y2FzZSAncmF3JzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9ub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgaWYgKCFlbmMpIHJldHVybiAndXRmOCc7XG4gIHZhciByZXRyaWVkO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jKSB7XG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuICd1dGY4JztcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiAndXRmMTZsZSc7XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuICdsYXRpbjEnO1xuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBlbmM7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAocmV0cmllZCkgcmV0dXJuOyAvLyB1bmRlZmluZWRcbiAgICAgICAgZW5jID0gKCcnICsgZW5jKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXRyaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIERvIG5vdCBjYWNoZSBgQnVmZmVyLmlzRW5jb2RpbmdgIHdoZW4gY2hlY2tpbmcgZW5jb2RpbmcgbmFtZXMgYXMgc29tZVxuLy8gbW9kdWxlcyBtb25rZXktcGF0Y2ggaXQgdG8gc3VwcG9ydCBhZGRpdGlvbmFsIGVuY29kaW5nc1xuZnVuY3Rpb24gbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIHZhciBuZW5jID0gX25vcm1hbGl6ZUVuY29kaW5nKGVuYyk7XG4gIGlmICh0eXBlb2YgbmVuYyAhPT0gJ3N0cmluZycgJiYgKEJ1ZmZlci5pc0VuY29kaW5nID09PSBpc0VuY29kaW5nIHx8ICFpc0VuY29kaW5nKGVuYykpKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmMpO1xuICByZXR1cm4gbmVuYyB8fCBlbmM7XG59XG5cbi8vIFN0cmluZ0RlY29kZXIgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGZvciBlZmZpY2llbnRseSBzcGxpdHRpbmcgYSBzZXJpZXMgb2Zcbi8vIGJ1ZmZlcnMgaW50byBhIHNlcmllcyBvZiBKUyBzdHJpbmdzIHdpdGhvdXQgYnJlYWtpbmcgYXBhcnQgbXVsdGktYnl0ZVxuLy8gY2hhcmFjdGVycy5cbmV4cG9ydHMuU3RyaW5nRGVjb2RlciA9IFN0cmluZ0RlY29kZXI7XG5mdW5jdGlvbiBTdHJpbmdEZWNvZGVyKGVuY29kaW5nKSB7XG4gIHRoaXMuZW5jb2RpbmcgPSBub3JtYWxpemVFbmNvZGluZyhlbmNvZGluZyk7XG4gIHZhciBuYjtcbiAgc3dpdGNoICh0aGlzLmVuY29kaW5nKSB7XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICB0aGlzLnRleHQgPSB1dGYxNlRleHQ7XG4gICAgICB0aGlzLmVuZCA9IHV0ZjE2RW5kO1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndXRmOCc6XG4gICAgICB0aGlzLmZpbGxMYXN0ID0gdXRmOEZpbGxMYXN0O1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHRoaXMudGV4dCA9IGJhc2U2NFRleHQ7XG4gICAgICB0aGlzLmVuZCA9IGJhc2U2NEVuZDtcbiAgICAgIG5iID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLndyaXRlID0gc2ltcGxlV3JpdGU7XG4gICAgICB0aGlzLmVuZCA9IHNpbXBsZUVuZDtcbiAgICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgdGhpcy5sYXN0VG90YWwgPSAwO1xuICB0aGlzLmxhc3RDaGFyID0gQnVmZmVyLmFsbG9jVW5zYWZlKG5iKTtcbn1cblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmIChidWYubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gIHZhciByO1xuICB2YXIgaTtcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICByID0gdGhpcy5maWxsTGFzdChidWYpO1xuICAgIGlmIChyID09PSB1bmRlZmluZWQpIHJldHVybiAnJztcbiAgICBpID0gdGhpcy5sYXN0TmVlZDtcbiAgICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgfSBlbHNlIHtcbiAgICBpID0gMDtcbiAgfVxuICBpZiAoaSA8IGJ1Zi5sZW5ndGgpIHJldHVybiByID8gciArIHRoaXMudGV4dChidWYsIGkpIDogdGhpcy50ZXh0KGJ1ZiwgaSk7XG4gIHJldHVybiByIHx8ICcnO1xufTtcblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gdXRmOEVuZDtcblxuLy8gUmV0dXJucyBvbmx5IGNvbXBsZXRlIGNoYXJhY3RlcnMgaW4gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLnRleHQgPSB1dGY4VGV4dDtcblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBwYXJ0aWFsIG5vbi1VVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZmlsbExhc3QgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59O1xuXG4vLyBDaGVja3MgdGhlIHR5cGUgb2YgYSBVVEYtOCBieXRlLCB3aGV0aGVyIGl0J3MgQVNDSUksIGEgbGVhZGluZyBieXRlLCBvciBhXG4vLyBjb250aW51YXRpb24gYnl0ZS4gSWYgYW4gaW52YWxpZCBieXRlIGlzIGRldGVjdGVkLCAtMiBpcyByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0J5dGUoYnl0ZSkge1xuICBpZiAoYnl0ZSA8PSAweDdGKSByZXR1cm4gMDtlbHNlIGlmIChieXRlID4+IDUgPT09IDB4MDYpIHJldHVybiAyO2Vsc2UgaWYgKGJ5dGUgPj4gNCA9PT0gMHgwRSkgcmV0dXJuIDM7ZWxzZSBpZiAoYnl0ZSA+PiAzID09PSAweDFFKSByZXR1cm4gNDtcbiAgcmV0dXJuIGJ5dGUgPj4gNiA9PT0gMHgwMiA/IC0xIDogLTI7XG59XG5cbi8vIENoZWNrcyBhdCBtb3N0IDMgYnl0ZXMgYXQgdGhlIGVuZCBvZiBhIEJ1ZmZlciBpbiBvcmRlciB0byBkZXRlY3QgYW5cbi8vIGluY29tcGxldGUgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIuIFRoZSB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgKDIsIDMsIG9yIDQpXG4vLyBuZWVkZWQgdG8gY29tcGxldGUgdGhlIFVURi04IGNoYXJhY3RlciAoaWYgYXBwbGljYWJsZSkgYXJlIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrSW5jb21wbGV0ZShzZWxmLCBidWYsIGkpIHtcbiAgdmFyIGogPSBidWYubGVuZ3RoIC0gMTtcbiAgaWYgKGogPCBpKSByZXR1cm4gMDtcbiAgdmFyIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDE7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpIHx8IG5iID09PSAtMikgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDI7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpIHx8IG5iID09PSAtMikgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHtcbiAgICAgIGlmIChuYiA9PT0gMikgbmIgPSAwO2Vsc2Ugc2VsZi5sYXN0TmVlZCA9IG5iIC0gMztcbiAgICB9XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIHJldHVybiAwO1xufVxuXG4vLyBWYWxpZGF0ZXMgYXMgbWFueSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgYXNcbi8vIG5lZWRlZCBvciBhcmUgYXZhaWxhYmxlLiBJZiB3ZSBzZWUgYSBub24tY29udGludWF0aW9uIGJ5dGUgd2hlcmUgd2UgZXhwZWN0XG4vLyBvbmUsIHdlIFwicmVwbGFjZVwiIHRoZSB2YWxpZGF0ZWQgY29udGludWF0aW9uIGJ5dGVzIHdlJ3ZlIHNlZW4gc28gZmFyIHdpdGhcbi8vIGEgc2luZ2xlIFVURi04IHJlcGxhY2VtZW50IGNoYXJhY3RlciAoJ1xcdWZmZmQnKSwgdG8gbWF0Y2ggdjgncyBVVEYtOCBkZWNvZGluZ1xuLy8gYmVoYXZpb3IuIFRoZSBjb250aW51YXRpb24gYnl0ZSBjaGVjayBpcyBpbmNsdWRlZCB0aHJlZSB0aW1lcyBpbiB0aGUgY2FzZVxuLy8gd2hlcmUgYWxsIG9mIHRoZSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgY2hhcmFjdGVyIGV4aXN0IGluIHRoZSBzYW1lIGJ1ZmZlci5cbi8vIEl0IGlzIGFsc28gZG9uZSB0aGlzIHdheSBhcyBhIHNsaWdodCBwZXJmb3JtYW5jZSBpbmNyZWFzZSBpbnN0ZWFkIG9mIHVzaW5nIGFcbi8vIGxvb3AuXG5mdW5jdGlvbiB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHNlbGYsIGJ1ZiwgcCkge1xuICBpZiAoKGJ1ZlswXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgc2VsZi5sYXN0TmVlZCA9IDA7XG4gICAgcmV0dXJuICdcXHVmZmZkJztcbiAgfVxuICBpZiAoc2VsZi5sYXN0TmVlZCA+IDEgJiYgYnVmLmxlbmd0aCA+IDEpIHtcbiAgICBpZiAoKGJ1ZlsxXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICBzZWxmLmxhc3ROZWVkID0gMTtcbiAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgfVxuICAgIGlmIChzZWxmLmxhc3ROZWVkID4gMiAmJiBidWYubGVuZ3RoID4gMikge1xuICAgICAgaWYgKChidWZbMl0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgICBzZWxmLmxhc3ROZWVkID0gMjtcbiAgICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyLlxuZnVuY3Rpb24gdXRmOEZpbGxMYXN0KGJ1Zikge1xuICB2YXIgcCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgdmFyIHIgPSB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHRoaXMsIGJ1ZiwgcCk7XG4gIGlmIChyICE9PSB1bmRlZmluZWQpIHJldHVybiByO1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59XG5cbi8vIFJldHVybnMgYWxsIGNvbXBsZXRlIFVURi04IGNoYXJhY3RlcnMgaW4gYSBCdWZmZXIuIElmIHRoZSBCdWZmZXIgZW5kZWQgb24gYVxuLy8gcGFydGlhbCBjaGFyYWN0ZXIsIHRoZSBjaGFyYWN0ZXIncyBieXRlcyBhcmUgYnVmZmVyZWQgdW50aWwgdGhlIHJlcXVpcmVkXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXJlIGF2YWlsYWJsZS5cbmZ1bmN0aW9uIHV0ZjhUZXh0KGJ1ZiwgaSkge1xuICB2YXIgdG90YWwgPSB1dGY4Q2hlY2tJbmNvbXBsZXRlKHRoaXMsIGJ1ZiwgaSk7XG4gIGlmICghdGhpcy5sYXN0TmVlZCkgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGkpO1xuICB0aGlzLmxhc3RUb3RhbCA9IHRvdGFsO1xuICB2YXIgZW5kID0gYnVmLmxlbmd0aCAtICh0b3RhbCAtIHRoaXMubGFzdE5lZWQpO1xuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCAwLCBlbmQpO1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSwgZW5kKTtcbn1cblxuLy8gRm9yIFVURi04LCBhIHJlcGxhY2VtZW50IGNoYXJhY3RlciBpcyBhZGRlZCB3aGVuIGVuZGluZyBvbiBhIHBhcnRpYWxcbi8vIGNoYXJhY3Rlci5cbmZ1bmN0aW9uIHV0ZjhFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgJ1xcdWZmZmQnO1xuICByZXR1cm4gcjtcbn1cblxuLy8gVVRGLTE2TEUgdHlwaWNhbGx5IG5lZWRzIHR3byBieXRlcyBwZXIgY2hhcmFjdGVyLCBidXQgZXZlbiBpZiB3ZSBoYXZlIGFuIGV2ZW5cbi8vIG51bWJlciBvZiBieXRlcyBhdmFpbGFibGUsIHdlIG5lZWQgdG8gY2hlY2sgaWYgd2UgZW5kIG9uIGEgbGVhZGluZy9oaWdoXG4vLyBzdXJyb2dhdGUuIEluIHRoYXQgY2FzZSwgd2UgbmVlZCB0byB3YWl0IGZvciB0aGUgbmV4dCB0d28gYnl0ZXMgaW4gb3JkZXIgdG9cbi8vIGRlY29kZSB0aGUgbGFzdCBjaGFyYWN0ZXIgcHJvcGVybHkuXG5mdW5jdGlvbiB1dGYxNlRleHQoYnVmLCBpKSB7XG4gIGlmICgoYnVmLmxlbmd0aCAtIGkpICUgMiA9PT0gMCkge1xuICAgIHZhciByID0gYnVmLnRvU3RyaW5nKCd1dGYxNmxlJywgaSk7XG4gICAgaWYgKHIpIHtcbiAgICAgIHZhciBjID0gci5jaGFyQ29kZUF0KHIubGVuZ3RoIC0gMSk7XG4gICAgICBpZiAoYyA+PSAweEQ4MDAgJiYgYyA8PSAweERCRkYpIHtcbiAgICAgICAgdGhpcy5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHRoaXMubGFzdFRvdGFsID0gNDtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICAgICAgICByZXR1cm4gci5zbGljZSgwLCAtMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAxO1xuICB0aGlzLmxhc3RUb3RhbCA9IDI7XG4gIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGYxNmxlJywgaSwgYnVmLmxlbmd0aCAtIDEpO1xufVxuXG4vLyBGb3IgVVRGLTE2TEUgd2UgZG8gbm90IGV4cGxpY2l0bHkgYXBwZW5kIHNwZWNpYWwgcmVwbGFjZW1lbnQgY2hhcmFjdGVycyBpZiB3ZVxuLy8gZW5kIG9uIGEgcGFydGlhbCBjaGFyYWN0ZXIsIHdlIHNpbXBseSBsZXQgdjggaGFuZGxlIHRoYXQuXG5mdW5jdGlvbiB1dGYxNkVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHZhciBlbmQgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gICAgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCd1dGYxNmxlJywgMCwgZW5kKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gYmFzZTY0VGV4dChidWYsIGkpIHtcbiAgdmFyIG4gPSAoYnVmLmxlbmd0aCAtIGkpICUgMztcbiAgaWYgKG4gPT09IDApIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGkpO1xuICB0aGlzLmxhc3ROZWVkID0gMyAtIG47XG4gIHRoaXMubGFzdFRvdGFsID0gMztcbiAgaWYgKG4gPT09IDEpIHtcbiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgfVxuICByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpLCBidWYubGVuZ3RoIC0gbik7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCdiYXNlNjQnLCAwLCAzIC0gdGhpcy5sYXN0TmVlZCk7XG4gIHJldHVybiByO1xufVxuXG4vLyBQYXNzIGJ5dGVzIG9uIHRocm91Z2ggZm9yIHNpbmdsZS1ieXRlIGVuY29kaW5ncyAoZS5nLiBhc2NpaSwgbGF0aW4xLCBoZXgpXG5mdW5jdGlvbiBzaW1wbGVXcml0ZShidWYpIHtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZyh0aGlzLmVuY29kaW5nKTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlRW5kKGJ1Zikge1xuICByZXR1cm4gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbn0iLCIndXNlIHN0cmljdCdcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXJcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoQmFzZSA9IHJlcXVpcmUoJ2hhc2gtYmFzZScpXG5cbnZhciBBUlJBWTE2ID0gbmV3IEFycmF5KDE2KVxuXG52YXIgemwgPSBbXG4gIDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsXG4gIDcsIDQsIDEzLCAxLCAxMCwgNiwgMTUsIDMsIDEyLCAwLCA5LCA1LCAyLCAxNCwgMTEsIDgsXG4gIDMsIDEwLCAxNCwgNCwgOSwgMTUsIDgsIDEsIDIsIDcsIDAsIDYsIDEzLCAxMSwgNSwgMTIsXG4gIDEsIDksIDExLCAxMCwgMCwgOCwgMTIsIDQsIDEzLCAzLCA3LCAxNSwgMTQsIDUsIDYsIDIsXG4gIDQsIDAsIDUsIDksIDcsIDEyLCAyLCAxMCwgMTQsIDEsIDMsIDgsIDExLCA2LCAxNSwgMTNcbl1cblxudmFyIHpyID0gW1xuICA1LCAxNCwgNywgMCwgOSwgMiwgMTEsIDQsIDEzLCA2LCAxNSwgOCwgMSwgMTAsIDMsIDEyLFxuICA2LCAxMSwgMywgNywgMCwgMTMsIDUsIDEwLCAxNCwgMTUsIDgsIDEyLCA0LCA5LCAxLCAyLFxuICAxNSwgNSwgMSwgMywgNywgMTQsIDYsIDksIDExLCA4LCAxMiwgMiwgMTAsIDAsIDQsIDEzLFxuICA4LCA2LCA0LCAxLCAzLCAxMSwgMTUsIDAsIDUsIDEyLCAyLCAxMywgOSwgNywgMTAsIDE0LFxuICAxMiwgMTUsIDEwLCA0LCAxLCA1LCA4LCA3LCA2LCAyLCAxMywgMTQsIDAsIDMsIDksIDExXG5dXG5cbnZhciBzbCA9IFtcbiAgMTEsIDE0LCAxNSwgMTIsIDUsIDgsIDcsIDksIDExLCAxMywgMTQsIDE1LCA2LCA3LCA5LCA4LFxuICA3LCA2LCA4LCAxMywgMTEsIDksIDcsIDE1LCA3LCAxMiwgMTUsIDksIDExLCA3LCAxMywgMTIsXG4gIDExLCAxMywgNiwgNywgMTQsIDksIDEzLCAxNSwgMTQsIDgsIDEzLCA2LCA1LCAxMiwgNywgNSxcbiAgMTEsIDEyLCAxNCwgMTUsIDE0LCAxNSwgOSwgOCwgOSwgMTQsIDUsIDYsIDgsIDYsIDUsIDEyLFxuICA5LCAxNSwgNSwgMTEsIDYsIDgsIDEzLCAxMiwgNSwgMTIsIDEzLCAxNCwgMTEsIDgsIDUsIDZcbl1cblxudmFyIHNyID0gW1xuICA4LCA5LCA5LCAxMSwgMTMsIDE1LCAxNSwgNSwgNywgNywgOCwgMTEsIDE0LCAxNCwgMTIsIDYsXG4gIDksIDEzLCAxNSwgNywgMTIsIDgsIDksIDExLCA3LCA3LCAxMiwgNywgNiwgMTUsIDEzLCAxMSxcbiAgOSwgNywgMTUsIDExLCA4LCA2LCA2LCAxNCwgMTIsIDEzLCA1LCAxNCwgMTMsIDEzLCA3LCA1LFxuICAxNSwgNSwgOCwgMTEsIDE0LCAxNCwgNiwgMTQsIDYsIDksIDEyLCA5LCAxMiwgNSwgMTUsIDgsXG4gIDgsIDUsIDEyLCA5LCAxMiwgNSwgMTQsIDYsIDgsIDEzLCA2LCA1LCAxNSwgMTMsIDExLCAxMVxuXVxuXG52YXIgaGwgPSBbMHgwMDAwMDAwMCwgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYywgMHhhOTUzZmQ0ZV1cbnZhciBociA9IFsweDUwYTI4YmU2LCAweDVjNGRkMTI0LCAweDZkNzAzZWYzLCAweDdhNmQ3NmU5LCAweDAwMDAwMDAwXVxuXG5mdW5jdGlvbiBSSVBFTUQxNjAgKCkge1xuICBIYXNoQmFzZS5jYWxsKHRoaXMsIDY0KVxuXG4gIC8vIHN0YXRlXG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwXG59XG5cbmluaGVyaXRzKFJJUEVNRDE2MCwgSGFzaEJhc2UpXG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHdvcmRzID0gQVJSQVkxNlxuICBmb3IgKHZhciBqID0gMDsgaiA8IDE2OyArK2opIHdvcmRzW2pdID0gdGhpcy5fYmxvY2sucmVhZEludDMyTEUoaiAqIDQpXG5cbiAgdmFyIGFsID0gdGhpcy5fYSB8IDBcbiAgdmFyIGJsID0gdGhpcy5fYiB8IDBcbiAgdmFyIGNsID0gdGhpcy5fYyB8IDBcbiAgdmFyIGRsID0gdGhpcy5fZCB8IDBcbiAgdmFyIGVsID0gdGhpcy5fZSB8IDBcblxuICB2YXIgYXIgPSB0aGlzLl9hIHwgMFxuICB2YXIgYnIgPSB0aGlzLl9iIHwgMFxuICB2YXIgY3IgPSB0aGlzLl9jIHwgMFxuICB2YXIgZHIgPSB0aGlzLl9kIHwgMFxuICB2YXIgZXIgPSB0aGlzLl9lIHwgMFxuXG4gIC8vIGNvbXB1dGF0aW9uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkgKz0gMSkge1xuICAgIHZhciB0bFxuICAgIHZhciB0clxuICAgIGlmIChpIDwgMTYpIHtcbiAgICAgIHRsID0gZm4xKGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFswXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuNShhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbMF0sIHNyW2ldKVxuICAgIH0gZWxzZSBpZiAoaSA8IDMyKSB7XG4gICAgICB0bCA9IGZuMihhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbMV0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjQoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzFdLCBzcltpXSlcbiAgICB9IGVsc2UgaWYgKGkgPCA0OCkge1xuICAgICAgdGwgPSBmbjMoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzJdLCBzbFtpXSlcbiAgICAgIHRyID0gZm4zKGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclsyXSwgc3JbaV0pXG4gICAgfSBlbHNlIGlmIChpIDwgNjQpIHtcbiAgICAgIHRsID0gZm40KGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFszXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuMihhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbM10sIHNyW2ldKVxuICAgIH0gZWxzZSB7IC8vIGlmIChpPDgwKSB7XG4gICAgICB0bCA9IGZuNShhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbNF0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjEoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzRdLCBzcltpXSlcbiAgICB9XG5cbiAgICBhbCA9IGVsXG4gICAgZWwgPSBkbFxuICAgIGRsID0gcm90bChjbCwgMTApXG4gICAgY2wgPSBibFxuICAgIGJsID0gdGxcblxuICAgIGFyID0gZXJcbiAgICBlciA9IGRyXG4gICAgZHIgPSByb3RsKGNyLCAxMClcbiAgICBjciA9IGJyXG4gICAgYnIgPSB0clxuICB9XG5cbiAgLy8gdXBkYXRlIHN0YXRlXG4gIHZhciB0ID0gKHRoaXMuX2IgKyBjbCArIGRyKSB8IDBcbiAgdGhpcy5fYiA9ICh0aGlzLl9jICsgZGwgKyBlcikgfCAwXG4gIHRoaXMuX2MgPSAodGhpcy5fZCArIGVsICsgYXIpIHwgMFxuICB0aGlzLl9kID0gKHRoaXMuX2UgKyBhbCArIGJyKSB8IDBcbiAgdGhpcy5fZSA9ICh0aGlzLl9hICsgYmwgKyBjcikgfCAwXG4gIHRoaXMuX2EgPSB0XG59XG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gY3JlYXRlIHBhZGRpbmcgYW5kIGhhbmRsZSBibG9ja3NcbiAgdGhpcy5fYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSAweDgwXG4gIGlmICh0aGlzLl9ibG9ja09mZnNldCA+IDU2KSB7XG4gICAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNjQpXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDU2KVxuICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFswXSwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzFdLCA2MClcbiAgdGhpcy5fdXBkYXRlKClcblxuICAvLyBwcm9kdWNlIHJlc3VsdFxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jID8gQnVmZmVyLmFsbG9jKDIwKSA6IG5ldyBCdWZmZXIoMjApXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYSwgMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9iLCA0KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2MsIDgpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZCwgMTIpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZSwgMTYpXG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gcm90bCAoeCwgbikge1xuICByZXR1cm4gKHggPDwgbikgfCAoeCA+Pj4gKDMyIC0gbikpXG59XG5cbmZ1bmN0aW9uIGZuMSAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoYiBeIGMgXiBkKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuMiAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBjKSB8ICgofmIpICYgZCkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm4zIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiB8ICh+YykpIF4gZCkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjQgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiICYgZCkgfCAoYyAmICh+ZCkpKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuNSAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoYiBeIChjIHwgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSSVBFTUQxNjBcbiIsInZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBTSEEgKGFsZ29yaXRobSkge1xuICBhbGdvcml0aG0gPSBhbGdvcml0aG0udG9Mb3dlckNhc2UoKVxuXG4gIHZhciBBbGdvcml0aG0gPSBleHBvcnRzW2FsZ29yaXRobV1cbiAgaWYgKCFBbGdvcml0aG0pIHRocm93IG5ldyBFcnJvcihhbGdvcml0aG0gKyAnIGlzIG5vdCBzdXBwb3J0ZWQgKHdlIGFjY2VwdCBwdWxsIHJlcXVlc3RzKScpXG5cbiAgcmV0dXJuIG5ldyBBbGdvcml0aG0oKVxufVxuXG5leHBvcnRzLnNoYSA9IHJlcXVpcmUoJy4vc2hhJylcbmV4cG9ydHMuc2hhMSA9IHJlcXVpcmUoJy4vc2hhMScpXG5leHBvcnRzLnNoYTIyNCA9IHJlcXVpcmUoJy4vc2hhMjI0JylcbmV4cG9ydHMuc2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEyNTYnKVxuZXhwb3J0cy5zaGEzODQgPSByZXF1aXJlKCcuL3NoYTM4NCcpXG5leHBvcnRzLnNoYTUxMiA9IHJlcXVpcmUoJy4vc2hhNTEyJylcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gQ2lwaGVyKG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICB0aGlzLnR5cGUgPSB0aGlzLm9wdGlvbnMudHlwZTtcbiAgdGhpcy5ibG9ja1NpemUgPSA4O1xuICB0aGlzLl9pbml0KCk7XG5cbiAgdGhpcy5idWZmZXIgPSBuZXcgQXJyYXkodGhpcy5ibG9ja1NpemUpO1xuICB0aGlzLmJ1ZmZlck9mZiA9IDA7XG59XG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlcjtcblxuQ2lwaGVyLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIF9pbml0KCkge1xuICAvLyBNaWdodCBiZSBvdmVycmlkZWRcbn07XG5cbkNpcGhlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKGRhdGEpIHtcbiAgaWYgKGRhdGEubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodGhpcy50eXBlID09PSAnZGVjcnlwdCcpXG4gICAgcmV0dXJuIHRoaXMuX3VwZGF0ZURlY3J5cHQoZGF0YSk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fdXBkYXRlRW5jcnlwdChkYXRhKTtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2J1ZmZlciA9IGZ1bmN0aW9uIF9idWZmZXIoZGF0YSwgb2ZmKSB7XG4gIC8vIEFwcGVuZCBkYXRhIHRvIGJ1ZmZlclxuICB2YXIgbWluID0gTWF0aC5taW4odGhpcy5idWZmZXIubGVuZ3RoIC0gdGhpcy5idWZmZXJPZmYsIGRhdGEubGVuZ3RoIC0gb2ZmKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaW47IGkrKylcbiAgICB0aGlzLmJ1ZmZlclt0aGlzLmJ1ZmZlck9mZiArIGldID0gZGF0YVtvZmYgKyBpXTtcbiAgdGhpcy5idWZmZXJPZmYgKz0gbWluO1xuXG4gIC8vIFNoaWZ0IG5leHRcbiAgcmV0dXJuIG1pbjtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZsdXNoQnVmZmVyID0gZnVuY3Rpb24gX2ZsdXNoQnVmZmVyKG91dCwgb2ZmKSB7XG4gIHRoaXMuX3VwZGF0ZSh0aGlzLmJ1ZmZlciwgMCwgb3V0LCBvZmYpO1xuICB0aGlzLmJ1ZmZlck9mZiA9IDA7XG4gIHJldHVybiB0aGlzLmJsb2NrU2l6ZTtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZUVuY3J5cHQgPSBmdW5jdGlvbiBfdXBkYXRlRW5jcnlwdChkYXRhKSB7XG4gIHZhciBpbnB1dE9mZiA9IDA7XG4gIHZhciBvdXRwdXRPZmYgPSAwO1xuXG4gIHZhciBjb3VudCA9ICgodGhpcy5idWZmZXJPZmYgKyBkYXRhLmxlbmd0aCkgLyB0aGlzLmJsb2NrU2l6ZSkgfCAwO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KGNvdW50ICogdGhpcy5ibG9ja1NpemUpO1xuXG4gIGlmICh0aGlzLmJ1ZmZlck9mZiAhPT0gMCkge1xuICAgIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7XG5cbiAgICBpZiAodGhpcy5idWZmZXJPZmYgPT09IHRoaXMuYnVmZmVyLmxlbmd0aClcbiAgICAgIG91dHB1dE9mZiArPSB0aGlzLl9mbHVzaEJ1ZmZlcihvdXQsIG91dHB1dE9mZik7XG4gIH1cblxuICAvLyBXcml0ZSBibG9ja3NcbiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoIC0gKChkYXRhLmxlbmd0aCAtIGlucHV0T2ZmKSAlIHRoaXMuYmxvY2tTaXplKTtcbiAgZm9yICg7IGlucHV0T2ZmIDwgbWF4OyBpbnB1dE9mZiArPSB0aGlzLmJsb2NrU2l6ZSkge1xuICAgIHRoaXMuX3VwZGF0ZShkYXRhLCBpbnB1dE9mZiwgb3V0LCBvdXRwdXRPZmYpO1xuICAgIG91dHB1dE9mZiArPSB0aGlzLmJsb2NrU2l6ZTtcbiAgfVxuXG4gIC8vIFF1ZXVlIHJlc3RcbiAgZm9yICg7IGlucHV0T2ZmIDwgZGF0YS5sZW5ndGg7IGlucHV0T2ZmKyssIHRoaXMuYnVmZmVyT2ZmKyspXG4gICAgdGhpcy5idWZmZXJbdGhpcy5idWZmZXJPZmZdID0gZGF0YVtpbnB1dE9mZl07XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZURlY3J5cHQgPSBmdW5jdGlvbiBfdXBkYXRlRGVjcnlwdChkYXRhKSB7XG4gIHZhciBpbnB1dE9mZiA9IDA7XG4gIHZhciBvdXRwdXRPZmYgPSAwO1xuXG4gIHZhciBjb3VudCA9IE1hdGguY2VpbCgodGhpcy5idWZmZXJPZmYgKyBkYXRhLmxlbmd0aCkgLyB0aGlzLmJsb2NrU2l6ZSkgLSAxO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KGNvdW50ICogdGhpcy5ibG9ja1NpemUpO1xuXG4gIC8vIFRPRE8oaW5kdXRueSk6IG9wdGltaXplIGl0LCB0aGlzIGlzIGZhciBmcm9tIG9wdGltYWxcbiAgZm9yICg7IGNvdW50ID4gMDsgY291bnQtLSkge1xuICAgIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7XG4gICAgb3V0cHV0T2ZmICs9IHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgb3V0cHV0T2ZmKTtcbiAgfVxuXG4gIC8vIEJ1ZmZlciByZXN0IG9mIHRoZSBpbnB1dFxuICBpbnB1dE9mZiArPSB0aGlzLl9idWZmZXIoZGF0YSwgaW5wdXRPZmYpO1xuXG4gIHJldHVybiBvdXQ7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLmZpbmFsID0gZnVuY3Rpb24gZmluYWwoYnVmZmVyKSB7XG4gIHZhciBmaXJzdDtcbiAgaWYgKGJ1ZmZlcilcbiAgICBmaXJzdCA9IHRoaXMudXBkYXRlKGJ1ZmZlcik7XG5cbiAgdmFyIGxhc3Q7XG4gIGlmICh0aGlzLnR5cGUgPT09ICdlbmNyeXB0JylcbiAgICBsYXN0ID0gdGhpcy5fZmluYWxFbmNyeXB0KCk7XG4gIGVsc2VcbiAgICBsYXN0ID0gdGhpcy5fZmluYWxEZWNyeXB0KCk7XG5cbiAgaWYgKGZpcnN0KVxuICAgIHJldHVybiBmaXJzdC5jb25jYXQobGFzdCk7XG4gIGVsc2VcbiAgICByZXR1cm4gbGFzdDtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIF9wYWQoYnVmZmVyLCBvZmYpIHtcbiAgaWYgKG9mZiA9PT0gMClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgd2hpbGUgKG9mZiA8IGJ1ZmZlci5sZW5ndGgpXG4gICAgYnVmZmVyW29mZisrXSA9IDA7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLl9maW5hbEVuY3J5cHQgPSBmdW5jdGlvbiBfZmluYWxFbmNyeXB0KCkge1xuICBpZiAoIXRoaXMuX3BhZCh0aGlzLmJ1ZmZlciwgdGhpcy5idWZmZXJPZmYpKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgb3V0ID0gbmV3IEFycmF5KHRoaXMuYmxvY2tTaXplKTtcbiAgdGhpcy5fdXBkYXRlKHRoaXMuYnVmZmVyLCAwLCBvdXQsIDApO1xuICByZXR1cm4gb3V0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdW5wYWQgPSBmdW5jdGlvbiBfdW5wYWQoYnVmZmVyKSB7XG4gIHJldHVybiBidWZmZXI7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLl9maW5hbERlY3J5cHQgPSBmdW5jdGlvbiBfZmluYWxEZWNyeXB0KCkge1xuICBhc3NlcnQuZXF1YWwodGhpcy5idWZmZXJPZmYsIHRoaXMuYmxvY2tTaXplLCAnTm90IGVub3VnaCBkYXRhIHRvIGRlY3J5cHQnKTtcbiAgdmFyIG91dCA9IG5ldyBBcnJheSh0aGlzLmJsb2NrU2l6ZSk7XG4gIHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgMCk7XG5cbiAgcmV0dXJuIHRoaXMuX3VucGFkKG91dCk7XG59O1xuIiwidmFyIGNpcGhlcnMgPSByZXF1aXJlKCcuL2VuY3J5cHRlcicpXG52YXIgZGVjaXBoZXJzID0gcmVxdWlyZSgnLi9kZWNyeXB0ZXInKVxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2Rlcy9saXN0Lmpzb24nKVxuXG5mdW5jdGlvbiBnZXRDaXBoZXJzICgpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1vZGVzKVxufVxuXG5leHBvcnRzLmNyZWF0ZUNpcGhlciA9IGV4cG9ydHMuQ2lwaGVyID0gY2lwaGVycy5jcmVhdGVDaXBoZXJcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBleHBvcnRzLkNpcGhlcml2ID0gY2lwaGVycy5jcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGV4cG9ydHMuRGVjaXBoZXIgPSBkZWNpcGhlcnMuY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGV4cG9ydHMuRGVjaXBoZXJpdiA9IGRlY2lwaGVycy5jcmVhdGVEZWNpcGhlcml2XG5leHBvcnRzLmxpc3RDaXBoZXJzID0gZXhwb3J0cy5nZXRDaXBoZXJzID0gZ2V0Q2lwaGVyc1xuIiwidmFyIG1vZGVNb2R1bGVzID0ge1xuICBFQ0I6IHJlcXVpcmUoJy4vZWNiJyksXG4gIENCQzogcmVxdWlyZSgnLi9jYmMnKSxcbiAgQ0ZCOiByZXF1aXJlKCcuL2NmYicpLFxuICBDRkI4OiByZXF1aXJlKCcuL2NmYjgnKSxcbiAgQ0ZCMTogcmVxdWlyZSgnLi9jZmIxJyksXG4gIE9GQjogcmVxdWlyZSgnLi9vZmInKSxcbiAgQ1RSOiByZXF1aXJlKCcuL2N0cicpLFxuICBHQ006IHJlcXVpcmUoJy4vY3RyJylcbn1cblxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9saXN0Lmpzb24nKVxuXG5mb3IgKHZhciBrZXkgaW4gbW9kZXMpIHtcbiAgbW9kZXNba2V5XS5tb2R1bGUgPSBtb2RlTW9kdWxlc1ttb2Rlc1trZXldLm1vZGVdXG59XG5cbm1vZHVsZS5leHBvcnRzID0gbW9kZXNcbiIsInZhciByO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJhbmQobGVuKSB7XG4gIGlmICghcilcbiAgICByID0gbmV3IFJhbmQobnVsbCk7XG5cbiAgcmV0dXJuIHIuZ2VuZXJhdGUobGVuKTtcbn07XG5cbmZ1bmN0aW9uIFJhbmQocmFuZCkge1xuICB0aGlzLnJhbmQgPSByYW5kO1xufVxubW9kdWxlLmV4cG9ydHMuUmFuZCA9IFJhbmQ7XG5cblJhbmQucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gZ2VuZXJhdGUobGVuKSB7XG4gIHJldHVybiB0aGlzLl9yYW5kKGxlbik7XG59O1xuXG4vLyBFbXVsYXRlIGNyeXB0byBBUEkgdXNpbmcgcmFuZHlcblJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikge1xuICBpZiAodGhpcy5yYW5kLmdldEJ5dGVzKVxuICAgIHJldHVybiB0aGlzLnJhbmQuZ2V0Qnl0ZXMobik7XG5cbiAgdmFyIHJlcyA9IG5ldyBVaW50OEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlcy5sZW5ndGg7IGkrKylcbiAgICByZXNbaV0gPSB0aGlzLnJhbmQuZ2V0Qnl0ZSgpO1xuICByZXR1cm4gcmVzO1xufTtcblxuaWYgKHR5cGVvZiBzZWxmID09PSAnb2JqZWN0Jykge1xuICBpZiAoc2VsZi5jcnlwdG8gJiYgc2VsZi5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gTW9kZXJuIGJyb3dzZXJzXG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gICAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gICAgICBzZWxmLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyKTtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfTtcbiAgfSBlbHNlIGlmIChzZWxmLm1zQ3J5cHRvICYmIHNlbGYubXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gSUVcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShuKTtcbiAgICAgIHNlbGYubXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycik7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH07XG5cbiAgLy8gU2FmYXJpJ3MgV2ViV29ya2VycyBkbyBub3QgaGF2ZSBgY3J5cHRvYFxuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gT2xkIGp1bmtcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQgeWV0Jyk7XG4gICAgfTtcbiAgfVxufSBlbHNlIHtcbiAgLy8gTm9kZS5qcyBvciBXZWIgd29ya2VyIHdpdGggbm8gY3J5cHRvIHN1cHBvcnRcbiAgdHJ5IHtcbiAgICB2YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG4gICAgaWYgKHR5cGVvZiBjcnlwdG8ucmFuZG9tQnl0ZXMgIT09ICdmdW5jdGlvbicpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQnKTtcblxuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikge1xuICAgICAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcyhuKTtcbiAgICB9O1xuICB9IGNhdGNoIChlKSB7XG4gIH1cbn1cbiIsInZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBjcnQ7XG5mdW5jdGlvbiBibGluZChwcml2KSB7XG4gIHZhciByID0gZ2V0cihwcml2KTtcbiAgdmFyIGJsaW5kZXIgPSByLnRvUmVkKGJuLm1vbnQocHJpdi5tb2R1bHVzKSlcbiAgLnJlZFBvdyhuZXcgYm4ocHJpdi5wdWJsaWNFeHBvbmVudCkpLmZyb21SZWQoKTtcbiAgcmV0dXJuIHtcbiAgICBibGluZGVyOiBibGluZGVyLFxuICAgIHVuYmxpbmRlcjpyLmludm0ocHJpdi5tb2R1bHVzKVxuICB9O1xufVxuZnVuY3Rpb24gY3J0KG1zZywgcHJpdikge1xuICB2YXIgYmxpbmRzID0gYmxpbmQocHJpdik7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgbW9kID0gYm4ubW9udChwcml2Lm1vZHVsdXMpO1xuICB2YXIgYmxpbmRlZCA9IG5ldyBibihtc2cpLm11bChibGluZHMuYmxpbmRlcikudW1vZChwcml2Lm1vZHVsdXMpO1xuICB2YXIgYzEgPSBibGluZGVkLnRvUmVkKGJuLm1vbnQocHJpdi5wcmltZTEpKTtcbiAgdmFyIGMyID0gYmxpbmRlZC50b1JlZChibi5tb250KHByaXYucHJpbWUyKSk7XG4gIHZhciBxaW52ID0gcHJpdi5jb2VmZmljaWVudDtcbiAgdmFyIHAgPSBwcml2LnByaW1lMTtcbiAgdmFyIHEgPSBwcml2LnByaW1lMjtcbiAgdmFyIG0xID0gYzEucmVkUG93KHByaXYuZXhwb25lbnQxKTtcbiAgdmFyIG0yID0gYzIucmVkUG93KHByaXYuZXhwb25lbnQyKTtcbiAgbTEgPSBtMS5mcm9tUmVkKCk7XG4gIG0yID0gbTIuZnJvbVJlZCgpO1xuICB2YXIgaCA9IG0xLmlzdWIobTIpLmltdWwocWludikudW1vZChwKTtcbiAgaC5pbXVsKHEpO1xuICBtMi5pYWRkKGgpO1xuICByZXR1cm4gbmV3IEJ1ZmZlcihtMi5pbXVsKGJsaW5kcy51bmJsaW5kZXIpLnVtb2QocHJpdi5tb2R1bHVzKS50b0FycmF5KGZhbHNlLCBsZW4pKTtcbn1cbmNydC5nZXRyID0gZ2V0cjtcbmZ1bmN0aW9uIGdldHIocHJpdikge1xuICB2YXIgbGVuID0gcHJpdi5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIHIgPSBuZXcgYm4ocmFuZG9tQnl0ZXMobGVuKSk7XG4gIHdoaWxlIChyLmNtcChwcml2Lm1vZHVsdXMpID49ICAwIHx8ICFyLnVtb2QocHJpdi5wcmltZTEpIHx8ICFyLnVtb2QocHJpdi5wcmltZTIpKSB7XG4gICAgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVsbGlwdGljID0gZXhwb3J0cztcblxuZWxsaXB0aWMudmVyc2lvbiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb247XG5lbGxpcHRpYy51dGlscyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvdXRpbHMnKTtcbmVsbGlwdGljLnJhbmQgPSByZXF1aXJlKCdicm9yYW5kJyk7XG5lbGxpcHRpYy5jdXJ2ZSA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvY3VydmUnKTtcbmVsbGlwdGljLmN1cnZlcyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvY3VydmVzJyk7XG5cbi8vIFByb3RvY29sc1xuZWxsaXB0aWMuZWMgPSByZXF1aXJlKCcuL2VsbGlwdGljL2VjJyk7XG5lbGxpcHRpYy5lZGRzYSA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvZWRkc2EnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlcyA9IGV4cG9ydHM7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpO1xudmFyIGN1cnZlID0gcmVxdWlyZSgnLi9jdXJ2ZScpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBQcmVzZXRDdXJ2ZShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLnR5cGUgPT09ICdzaG9ydCcpXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBjdXJ2ZS5zaG9ydChvcHRpb25zKTtcbiAgZWxzZSBpZiAob3B0aW9ucy50eXBlID09PSAnZWR3YXJkcycpXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBjdXJ2ZS5lZHdhcmRzKG9wdGlvbnMpO1xuICBlbHNlXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBjdXJ2ZS5tb250KG9wdGlvbnMpO1xuICB0aGlzLmcgPSB0aGlzLmN1cnZlLmc7XG4gIHRoaXMubiA9IHRoaXMuY3VydmUubjtcbiAgdGhpcy5oYXNoID0gb3B0aW9ucy5oYXNoO1xuXG4gIGFzc2VydCh0aGlzLmcudmFsaWRhdGUoKSwgJ0ludmFsaWQgY3VydmUnKTtcbiAgYXNzZXJ0KHRoaXMuZy5tdWwodGhpcy5uKS5pc0luZmluaXR5KCksICdJbnZhbGlkIGN1cnZlLCBHKk4gIT0gTycpO1xufVxuY3VydmVzLlByZXNldEN1cnZlID0gUHJlc2V0Q3VydmU7XG5cbmZ1bmN0aW9uIGRlZmluZUN1cnZlKG5hbWUsIG9wdGlvbnMpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1cnZlcywgbmFtZSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY3VydmUgPSBuZXcgUHJlc2V0Q3VydmUob3B0aW9ucyk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VydmVzLCBuYW1lLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGN1cnZlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjdXJ2ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5kZWZpbmVDdXJ2ZSgncDE5MicsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6ICdwMTkyJyxcbiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmJyxcbiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZjJyxcbiAgYjogJzY0MjEwNTE5IGU1OWM4MGU3IDBmYTdlOWFiIDcyMjQzMDQ5IGZlYjhkZWVjIGMxNDZiOWIxJyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDk5ZGVmODM2IDE0NmJjOWIxIGI0ZDIyODMxJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzE4OGRhODBlIGIwMzA5MGY2IDdjYmYyMGViIDQzYTE4ODAwIGY0ZmYwYWZkIDgyZmYxMDEyJyxcbiAgICAnMDcxOTJiOTUgZmZjOGRhNzggNjMxMDExZWQgNmIyNGNkZDUgNzNmOTc3YTEgMWU3OTQ4MTEnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDIyNCcsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6ICdwMjI0JyxcbiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyxcbiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlJyxcbiAgYjogJ2I0MDUwYTg1IDBjMDRiM2FiIGY1NDEzMjU2IDUwNDRiMGI3IGQ3YmZkOGJhIDI3MGIzOTQzIDIzNTVmZmI0JyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmYxNmEyIGUwYjhmMDNlIDEzZGQyOTQ1IDVjNWMyYTNkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJ2I3MGUwY2JkIDZiYjRiZjdmIDMyMTM5MGI5IDRhMDNjMWQzIDU2YzIxMTIyIDM0MzI4MGQ2IDExNWMxZDIxJyxcbiAgICAnYmQzNzYzODggYjVmNzIzZmIgNGMyMmRmZTYgY2Q0Mzc1YTAgNWEwNzQ3NjQgNDRkNTgxOTkgODUwMDdlMzQnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDI1NicsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICdmZmZmZmZmZiAwMDAwMDAwMSAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZicsXG4gIGE6ICdmZmZmZmZmZiAwMDAwMDAwMSAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmYycsXG4gIGI6ICc1YWM2MzVkOCBhYTNhOTNlNyBiM2ViYmQ1NSA3Njk4ODZiYyA2NTFkMDZiMCBjYzUzYjBmNiAzYmNlM2MzZSAyN2QyNjA0YicsXG4gIG46ICdmZmZmZmZmZiAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBiY2U2ZmFhZCBhNzE3OWU4NCBmM2I5Y2FjMiBmYzYzMjU1MScsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc2YjE3ZDFmMiBlMTJjNDI0NyBmOGJjZTZlNSA2M2E0NDBmMiA3NzAzN2Q4MSAyZGViMzNhMCBmNGExMzk0NSBkODk4YzI5NicsXG4gICAgJzRmZTM0MmUyIGZlMWE3ZjliIDhlZTdlYjRhIDdjMGY5ZTE2IDJiY2UzMzU3IDZiMzE1ZWNlIGNiYjY0MDY4IDM3YmY1MWY1J1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ3AzODQnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiBudWxsLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZSBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZicsXG4gIGE6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZlIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZjJyxcbiAgYjogJ2IzMzEyZmE3IGUyM2VlN2U0IDk4OGUwNTZiIGUzZjgyZDE5IDE4MWQ5YzZlIGZlODE0MTEyIDAzMTQwODhmICcgK1xuICAgICAnNTAxMzg3NWEgYzY1NjM5OGQgOGEyZWQxOWQgMmE4NWM4ZWQgZDNlYzJhZWYnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgYzc2MzRkODEgJyArXG4gICAgICdmNDM3MmRkZiA1ODFhMGRiMiA0OGIwYTc3YSBlY2VjMTk2YSBjY2M1Mjk3MycsXG4gIGhhc2g6IGhhc2guc2hhMzg0LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICdhYTg3Y2EyMiBiZThiMDUzNyA4ZWIxYzcxZSBmMzIwYWQ3NCA2ZTFkM2I2MiA4YmE3OWI5OCA1OWY3NDFlMCA4MjU0MmEzOCAnICtcbiAgICAnNTUwMmYyNWQgYmY1NTI5NmMgM2E1NDVlMzggNzI3NjBhYjcnLFxuICAgICczNjE3ZGU0YSA5NjI2MmM2ZiA1ZDllOThiZiA5MjkyZGMyOSBmOGY0MWRiZCAyODlhMTQ3YyBlOWRhMzExMyBiNWYwYjhjMCAnICtcbiAgICAnMGE2MGIxY2UgMWQ3ZTgxOWQgN2E0MzFkN2MgOTBlYTBlNWYnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDUyMScsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICcwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYnLFxuICBhOiAnMDAwMDAxZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZjJyxcbiAgYjogJzAwMDAwMDUxIDk1M2ViOTYxIDhlMWM5YTFmIDkyOWEyMWEwIGI2ODU0MGVlIGEyZGE3MjViICcgK1xuICAgICAnOTliMzE1ZjMgYjhiNDg5OTEgOGVmMTA5ZTEgNTYxOTM5NTEgZWM3ZTkzN2IgMTY1MmMwYmQgJyArXG4gICAgICczYmIxYmYwNyAzNTczZGY4OCAzZDJjMzRmMSBlZjQ1MWZkNCA2YjUwM2YwMCcsXG4gIG46ICcwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZhIDUxODY4NzgzIGJmMmY5NjZiIDdmY2MwMTQ4ICcgK1xuICAgICAnZjcwOWE1ZDAgM2JiNWM5YjggODk5YzQ3YWUgYmI2ZmI3MWUgOTEzODY0MDknLFxuICBoYXNoOiBoYXNoLnNoYTUxMixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMDAwMDAwYzYgODU4ZTA2YjcgMDQwNGU5Y2QgOWUzZWNiNjYgMjM5NWI0NDIgOWM2NDgxMzkgJyArXG4gICAgJzA1M2ZiNTIxIGY4MjhhZjYwIDZiNGQzZGJhIGExNGI1ZTc3IGVmZTc1OTI4IGZlMWRjMTI3ICcgK1xuICAgICdhMmZmYThkZSAzMzQ4YjNjMSA4NTZhNDI5YiBmOTdlN2UzMSBjMmU1YmQ2NicsXG4gICAgJzAwMDAwMTE4IDM5Mjk2YTc4IDlhM2JjMDA0IDVjOGE1ZmI0IDJjN2QxYmQ5IDk4ZjU0NDQ5ICcgK1xuICAgICc1NzliNDQ2OCAxN2FmYmQxNyAyNzNlNjYyYyA5N2VlNzI5OSA1ZWY0MjY0MCBjNTUwYjkwMSAnICtcbiAgICAnM2ZhZDA3NjEgMzUzYzcwODYgYTI3MmMyNDAgODhiZTk0NzYgOWZkMTY2NTAnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgnY3VydmUyNTUxOScsIHtcbiAgdHlwZTogJ21vbnQnLFxuICBwcmltZTogJ3AyNTUxOScsXG4gIHA6ICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyxcbiAgYTogJzc2ZDA2JyxcbiAgYjogJzEnLFxuICBuOiAnMTAwMDAwMDAwMDAwMDAwMCAwMDAwMDAwMDAwMDAwMDAwIDE0ZGVmOWRlYTJmNzljZDYgNTgxMjYzMWE1Y2Y1ZDNlZCcsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc5J1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ2VkMjU1MTknLCB7XG4gIHR5cGU6ICdlZHdhcmRzJyxcbiAgcHJpbWU6ICdwMjU1MTknLFxuICBwOiAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcsXG4gIGE6ICctMScsXG4gIGM6ICcxJyxcbiAgLy8gLTEyMTY2NSAqICgxMjE2NjZeKC0xKSkgKG1vZCBQKVxuICBkOiAnNTIwMzZjZWUyYjZmZmU3MyA4Y2M3NDA3OTc3NzllODk4IDAwNzAwYTRkNDE0MWQ4YWIgNzVlYjRkY2ExMzU5NzhhMycsXG4gIG46ICcxMDAwMDAwMDAwMDAwMDAwIDAwMDAwMDAwMDAwMDAwMDAgMTRkZWY5ZGVhMmY3OWNkNiA1ODEyNjMxYTVjZjVkM2VkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzIxNjkzNmQzY2Q2ZTUzZmVjMGE0ZTIzMWZkZDZkYzVjNjkyY2M3NjA5NTI1YTdiMmM5NTYyZDYwOGYyNWQ1MWEnLFxuXG4gICAgLy8gNC81XG4gICAgJzY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NTgnXG4gIF1cbn0pO1xuXG52YXIgcHJlO1xudHJ5IHtcbiAgcHJlID0gcmVxdWlyZSgnLi9wcmVjb21wdXRlZC9zZWNwMjU2azEnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgcHJlID0gdW5kZWZpbmVkO1xufVxuXG5kZWZpbmVDdXJ2ZSgnc2VjcDI1NmsxJywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogJ2syNTYnLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnLFxuICBhOiAnMCcsXG4gIGI6ICc3JyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGJhYWVkY2U2IGFmNDhhMDNiIGJmZDI1ZThjIGQwMzY0MTQxJyxcbiAgaDogJzEnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcblxuICAvLyBQcmVjb21wdXRlZCBlbmRvbW9ycGhpc21cbiAgYmV0YTogJzdhZTk2YTJiNjU3YzA3MTA2ZTY0NDc5ZWFjMzQzNGU5OWNmMDQ5NzUxMmY1ODk5NWMxMzk2YzI4NzE5NTAxZWUnLFxuICBsYW1iZGE6ICc1MzYzYWQ0Y2MwNWMzMGUwYTUyNjFjMDI4ODEyNjQ1YTEyMmUyMmVhMjA4MTY2NzhkZjAyOTY3YzFiMjNiZDcyJyxcbiAgYmFzaXM6IFtcbiAgICB7XG4gICAgICBhOiAnMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTUnLFxuICAgICAgYjogJy1lNDQzN2VkNjAxMGU4ODI4NmY1NDdmYTkwYWJmZTRjMydcbiAgICB9LFxuICAgIHtcbiAgICAgIGE6ICcxMTRjYTUwZjdhOGUyZjNmNjU3YzExMDhkOWQ0NGNmZDgnLFxuICAgICAgYjogJzMwODZkMjIxYTdkNDZiY2RlODZjOTBlNDkyODRlYjE1J1xuICAgIH1cbiAgXSxcblxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc3OWJlNjY3ZWY5ZGNiYmFjNTVhMDYyOTVjZTg3MGIwNzAyOWJmY2RiMmRjZTI4ZDk1OWYyODE1YjE2ZjgxNzk4JyxcbiAgICAnNDgzYWRhNzcyNmEzYzQ2NTVkYTRmYmZjMGUxMTA4YThmZDE3YjQ0OGE2ODU1NDE5OWM0N2QwOGZmYjEwZDRiOCcsXG4gICAgcHJlXG4gIF1cbn0pO1xuIiwidmFyIGhhc2ggPSBleHBvcnRzO1xuXG5oYXNoLnV0aWxzID0gcmVxdWlyZSgnLi9oYXNoL3V0aWxzJyk7XG5oYXNoLmNvbW1vbiA9IHJlcXVpcmUoJy4vaGFzaC9jb21tb24nKTtcbmhhc2guc2hhID0gcmVxdWlyZSgnLi9oYXNoL3NoYScpO1xuaGFzaC5yaXBlbWQgPSByZXF1aXJlKCcuL2hhc2gvcmlwZW1kJyk7XG5oYXNoLmhtYWMgPSByZXF1aXJlKCcuL2hhc2gvaG1hYycpO1xuXG4vLyBQcm94eSBoYXNoIGZ1bmN0aW9ucyB0byB0aGUgbWFpbiBvYmplY3Rcbmhhc2guc2hhMSA9IGhhc2guc2hhLnNoYTE7XG5oYXNoLnNoYTI1NiA9IGhhc2guc2hhLnNoYTI1Njtcbmhhc2guc2hhMjI0ID0gaGFzaC5zaGEuc2hhMjI0O1xuaGFzaC5zaGEzODQgPSBoYXNoLnNoYS5zaGEzODQ7XG5oYXNoLnNoYTUxMiA9IGhhc2guc2hhLnNoYTUxMjtcbmhhc2gucmlwZW1kMTYwID0gaGFzaC5yaXBlbWQucmlwZW1kMTYwO1xuIiwiLyoqXG4gKlxuICogVmVyc2lvbnMgZW51bVxuICovXG5leHBvcnQgZW51bSBWZXJzaW9ucyB7XG4gICcwLjAuMScgPSAnMC4wLjEnLFxufVxuXG5leHBvcnQgbmFtZXNwYWNlIFZlcnNpb25zIHtcbiAgLyoqXG4gICAqXG4gICAqIENoZWNrcyBpZiB0aGUgcHJvdmlkZWQgdmVyc2lvbiBpcyBzdXBwb3J0ZWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFByb3ZpZGVkIHZlcnNpb24gc3RyaW5nLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBJZiBpcyBzdXBwb3J0ZWQgb3Igbm90LlxuICAgKiBAbWVtYmVyb2YgVmVyc2lvbnNcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBpc1N1cHBvcnRlZCh2ZXJzaW9uOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBzd2l0Y2ggKHZlcnNpb24pIHtcbiAgICAgIGNhc2UgVmVyc2lvbnNbJzAuMC4xJ10udG9TdHJpbmcoKTpcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIGNhc2UgJyc6XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgY2xhc3MgSGVscGVyIHtcbiAgLyoqXG4gICAqIHJlZmVyZW5jZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTAxMjE3NDBcbiAgICogQ2hlY2tzIHRoZSBsZW5naHQgb2YgYSBwcm92aWRlZCBzdHJpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFByb3ZpZGVkIHN0cmluZy5cbiAgICogQHJldHVybnMge251bWJlcn0gLSBUaGUgc3RyaW5nIGxlbmdodCBpbiBieXRlcy5cbiAgICogQG1lbWJlcm9mIEhlbHBlclxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBieXRlTGVuZ3RoKHN0cjogc3RyaW5nKTogbnVtYmVyIHtcbiAgICBjb25zdCBhID0gW11cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgYS5wdXNoKHN0ci5zdWJzdHIoaSwgMikpXG4gICAgfVxuXG4gICAgcmV0dXJuIGEubGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogcmVmZXJlbmNlZCBmcm9tIGh0dHBzOi8vd3d3LnNpdGVwb2ludC5jb20vY29tbXVuaXR5L3QvaG93LXRvLWNoZWNrLWlmLXN0cmluZy1pcy1oZXhhZGVjaW1hbC8xNjI3MzkvMlxuICAgKiBDaGVja3MgaWYgdGhlIHByb3ZpZGVkIHN0cmluZyBpcyBhIHZhbGlkIEhleC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFByb3ZpZGVkIHN0cmluZy5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IC0gSWYgaXMgYSB2YWxpZCBIZXggc3RyaW5nIG9yIG5vdC5cbiAgICogQG1lbWJlcm9mIEhlbHBlclxuICAgKi9cbiAgcHVibGljIHN0YXRpYyB2YWxpZGF0ZUhleFN0cihzdHI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHJlID0gL1swLTlBLUZhLWZdL2dcblxuICAgIGlmIChyZS50ZXN0KHN0cikpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBmcm9tSGV4KHN0cjogc3RyaW5nKTogVWludDhBcnJheSB7XG4gICAgaWYgKCFzdHIpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSgwKVxuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSBbXVxuICAgIGZvciAobGV0IGluZGV4ID0gMCwgbGVuID0gc3RyLmxlbmd0aDsgaW5kZXggPCBsZW47IGluZGV4ICs9IDIpIHtcbiAgICAgIGRhdGEucHVzaChwYXJzZUludChzdHIuc3Vic3RyKGluZGV4LCAyKSwgMTYpKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShkYXRhKVxuICB9XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8qIChpZ25vcmVkKSAqLyIsIi8vIC5kaXJuYW1lLCAuYmFzZW5hbWUsIGFuZCAuZXh0bmFtZSBtZXRob2RzIGFyZSBleHRyYWN0ZWQgZnJvbSBOb2RlLmpzIHY4LjExLjEsXG4vLyBiYWNrcG9ydGVkIGFuZCB0cmFuc3BsaXRlZCB3aXRoIEJhYmVsLCB3aXRoIGJhY2t3YXJkcy1jb21wYXQgZml4ZXNcblxuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIHJlc29sdmVzIC4gYW5kIC4uIGVsZW1lbnRzIGluIGEgcGF0aCBhcnJheSB3aXRoIGRpcmVjdG9yeSBuYW1lcyB0aGVyZVxuLy8gbXVzdCBiZSBubyBzbGFzaGVzLCBlbXB0eSBlbGVtZW50cywgb3IgZGV2aWNlIG5hbWVzIChjOlxcKSBpbiB0aGUgYXJyYXlcbi8vIChzbyBhbHNvIG5vIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoZXMgLSBpdCBkb2VzIG5vdCBkaXN0aW5ndWlzaFxuLy8gcmVsYXRpdmUgYW5kIGFic29sdXRlIHBhdGhzKVxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsIGFsbG93QWJvdmVSb290KSB7XG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBwYXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBsYXN0ID0gcGFydHNbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKGFsbG93QWJvdmVSb290KSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBwYXJ0cy51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuLy8gcGF0aC5yZXNvbHZlKFtmcm9tIC4uLl0sIHRvKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5yZXNvbHZlID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNvbHZlZFBhdGggPSAnJyxcbiAgICAgIHJlc29sdmVkQWJzb2x1dGUgPSBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gLTEgJiYgIXJlc29sdmVkQWJzb2x1dGU7IGktLSkge1xuICAgIHZhciBwYXRoID0gKGkgPj0gMCkgPyBhcmd1bWVudHNbaV0gOiBwcm9jZXNzLmN3ZCgpO1xuXG4gICAgLy8gU2tpcCBlbXB0eSBhbmQgaW52YWxpZCBlbnRyaWVzXG4gICAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGgucmVzb2x2ZSBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9IGVsc2UgaWYgKCFwYXRoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICByZXNvbHZlZFBhdGggPSBwYXRoICsgJy8nICsgcmVzb2x2ZWRQYXRoO1xuICAgIHJlc29sdmVkQWJzb2x1dGUgPSBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xuICB9XG5cbiAgLy8gQXQgdGhpcyBwb2ludCB0aGUgcGF0aCBzaG91bGQgYmUgcmVzb2x2ZWQgdG8gYSBmdWxsIGFic29sdXRlIHBhdGgsIGJ1dFxuICAvLyBoYW5kbGUgcmVsYXRpdmUgcGF0aHMgdG8gYmUgc2FmZSAobWlnaHQgaGFwcGVuIHdoZW4gcHJvY2Vzcy5jd2QoKSBmYWlscylcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcmVzb2x2ZWRQYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHJlc29sdmVkUGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFyZXNvbHZlZEFic29sdXRlKS5qb2luKCcvJyk7XG5cbiAgcmV0dXJuICgocmVzb2x2ZWRBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHJlc29sdmVkUGF0aCkgfHwgJy4nO1xufTtcblxuLy8gcGF0aC5ub3JtYWxpemUocGF0aClcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMubm9ybWFsaXplID0gZnVuY3Rpb24ocGF0aCkge1xuICB2YXIgaXNBYnNvbHV0ZSA9IGV4cG9ydHMuaXNBYnNvbHV0ZShwYXRoKSxcbiAgICAgIHRyYWlsaW5nU2xhc2ggPSBzdWJzdHIocGF0aCwgLTEpID09PSAnLyc7XG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFpc0Fic29sdXRlKS5qb2luKCcvJyk7XG5cbiAgaWYgKCFwYXRoICYmICFpc0Fic29sdXRlKSB7XG4gICAgcGF0aCA9ICcuJztcbiAgfVxuICBpZiAocGF0aCAmJiB0cmFpbGluZ1NsYXNoKSB7XG4gICAgcGF0aCArPSAnLyc7XG4gIH1cblxuICByZXR1cm4gKGlzQWJzb2x1dGUgPyAnLycgOiAnJykgKyBwYXRoO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5pc0Fic29sdXRlID0gZnVuY3Rpb24ocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbn07XG5cbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMuam9pbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcGF0aHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICByZXR1cm4gZXhwb3J0cy5ub3JtYWxpemUoZmlsdGVyKHBhdGhzLCBmdW5jdGlvbihwLCBpbmRleCkge1xuICAgIGlmICh0eXBlb2YgcCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLmpvaW4gbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfVxuICAgIHJldHVybiBwO1xuICB9KS5qb2luKCcvJykpO1xufTtcblxuXG4vLyBwYXRoLnJlbGF0aXZlKGZyb20sIHRvKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5yZWxhdGl2ZSA9IGZ1bmN0aW9uKGZyb20sIHRvKSB7XG4gIGZyb20gPSBleHBvcnRzLnJlc29sdmUoZnJvbSkuc3Vic3RyKDEpO1xuICB0byA9IGV4cG9ydHMucmVzb2x2ZSh0bykuc3Vic3RyKDEpO1xuXG4gIGZ1bmN0aW9uIHRyaW0oYXJyKSB7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBmb3IgKDsgc3RhcnQgPCBhcnIubGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgICBpZiAoYXJyW3N0YXJ0XSAhPT0gJycpIGJyZWFrO1xuICAgIH1cblxuICAgIHZhciBlbmQgPSBhcnIubGVuZ3RoIC0gMTtcbiAgICBmb3IgKDsgZW5kID49IDA7IGVuZC0tKSB7XG4gICAgICBpZiAoYXJyW2VuZF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgPiBlbmQpIHJldHVybiBbXTtcbiAgICByZXR1cm4gYXJyLnNsaWNlKHN0YXJ0LCBlbmQgLSBzdGFydCArIDEpO1xuICB9XG5cbiAgdmFyIGZyb21QYXJ0cyA9IHRyaW0oZnJvbS5zcGxpdCgnLycpKTtcbiAgdmFyIHRvUGFydHMgPSB0cmltKHRvLnNwbGl0KCcvJykpO1xuXG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihmcm9tUGFydHMubGVuZ3RoLCB0b1BhcnRzLmxlbmd0aCk7XG4gIHZhciBzYW1lUGFydHNMZW5ndGggPSBsZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZnJvbVBhcnRzW2ldICE9PSB0b1BhcnRzW2ldKSB7XG4gICAgICBzYW1lUGFydHNMZW5ndGggPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdmFyIG91dHB1dFBhcnRzID0gW107XG4gIGZvciAodmFyIGkgPSBzYW1lUGFydHNMZW5ndGg7IGkgPCBmcm9tUGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRwdXRQYXJ0cy5wdXNoKCcuLicpO1xuICB9XG5cbiAgb3V0cHV0UGFydHMgPSBvdXRwdXRQYXJ0cy5jb25jYXQodG9QYXJ0cy5zbGljZShzYW1lUGFydHNMZW5ndGgpKTtcblxuICByZXR1cm4gb3V0cHV0UGFydHMuam9pbignLycpO1xufTtcblxuZXhwb3J0cy5zZXAgPSAnLyc7XG5leHBvcnRzLmRlbGltaXRlciA9ICc6JztcblxuZXhwb3J0cy5kaXJuYW1lID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykgcGF0aCA9IHBhdGggKyAnJztcbiAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSByZXR1cm4gJy4nO1xuICB2YXIgY29kZSA9IHBhdGguY2hhckNvZGVBdCgwKTtcbiAgdmFyIGhhc1Jvb3QgPSBjb2RlID09PSA0NyAvKi8qLztcbiAgdmFyIGVuZCA9IC0xO1xuICB2YXIgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgZm9yICh2YXIgaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAxOyAtLWkpIHtcbiAgICBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChjb2RlID09PSA0NyAvKi8qLykge1xuICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgIGVuZCA9IGk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvclxuICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaWYgKGVuZCA9PT0gLTEpIHJldHVybiBoYXNSb290ID8gJy8nIDogJy4nO1xuICBpZiAoaGFzUm9vdCAmJiBlbmQgPT09IDEpIHtcbiAgICAvLyByZXR1cm4gJy8vJztcbiAgICAvLyBCYWNrd2FyZHMtY29tcGF0IGZpeDpcbiAgICByZXR1cm4gJy8nO1xuICB9XG4gIHJldHVybiBwYXRoLnNsaWNlKDAsIGVuZCk7XG59O1xuXG5mdW5jdGlvbiBiYXNlbmFtZShwYXRoKSB7XG4gIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHBhdGggPSBwYXRoICsgJyc7XG5cbiAgdmFyIHN0YXJ0ID0gMDtcbiAgdmFyIGVuZCA9IC0xO1xuICB2YXIgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgdmFyIGk7XG5cbiAgZm9yIChpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgIGlmIChwYXRoLmNoYXJDb2RlQXQoaSkgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZW5kID09PSAtMSkge1xuICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgLy8gcGF0aCBjb21wb25lbnRcbiAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgZW5kID0gaSArIDE7XG4gICAgfVxuICB9XG5cbiAgaWYgKGVuZCA9PT0gLTEpIHJldHVybiAnJztcbiAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnQsIGVuZCk7XG59XG5cbi8vIFVzZXMgYSBtaXhlZCBhcHByb2FjaCBmb3IgYmFja3dhcmRzLWNvbXBhdGliaWxpdHksIGFzIGV4dCBiZWhhdmlvciBjaGFuZ2VkXG4vLyBpbiBuZXcgTm9kZS5qcyB2ZXJzaW9ucywgc28gb25seSBiYXNlbmFtZSgpIGFib3ZlIGlzIGJhY2twb3J0ZWQgaGVyZVxuZXhwb3J0cy5iYXNlbmFtZSA9IGZ1bmN0aW9uIChwYXRoLCBleHQpIHtcbiAgdmFyIGYgPSBiYXNlbmFtZShwYXRoKTtcbiAgaWYgKGV4dCAmJiBmLnN1YnN0cigtMSAqIGV4dC5sZW5ndGgpID09PSBleHQpIHtcbiAgICBmID0gZi5zdWJzdHIoMCwgZi5sZW5ndGggLSBleHQubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gZjtcbn07XG5cbmV4cG9ydHMuZXh0bmFtZSA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHBhdGggPSBwYXRoICsgJyc7XG4gIHZhciBzdGFydERvdCA9IC0xO1xuICB2YXIgc3RhcnRQYXJ0ID0gMDtcbiAgdmFyIGVuZCA9IC0xO1xuICB2YXIgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgLy8gVHJhY2sgdGhlIHN0YXRlIG9mIGNoYXJhY3RlcnMgKGlmIGFueSkgd2Ugc2VlIGJlZm9yZSBvdXIgZmlyc3QgZG90IGFuZFxuICAvLyBhZnRlciBhbnkgcGF0aCBzZXBhcmF0b3Igd2UgZmluZFxuICB2YXIgcHJlRG90U3RhdGUgPSAwO1xuICBmb3IgKHZhciBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgIHZhciBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChjb2RlID09PSA0NyAvKi8qLykge1xuICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxuICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcbiAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICBzdGFydFBhcnQgPSBpICsgMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICBpZiAoZW5kID09PSAtMSkge1xuICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgLy8gZXh0ZW5zaW9uXG4gICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICAgIGVuZCA9IGkgKyAxO1xuICAgIH1cbiAgICBpZiAoY29kZSA9PT0gNDYgLyouKi8pIHtcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uXG4gICAgICAgIGlmIChzdGFydERvdCA9PT0gLTEpXG4gICAgICAgICAgc3RhcnREb3QgPSBpO1xuICAgICAgICBlbHNlIGlmIChwcmVEb3RTdGF0ZSAhPT0gMSlcbiAgICAgICAgICBwcmVEb3RTdGF0ZSA9IDE7XG4gICAgfSBlbHNlIGlmIChzdGFydERvdCAhPT0gLTEpIHtcbiAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgYW5kIG5vbi1wYXRoIHNlcGFyYXRvciBiZWZvcmUgb3VyIGRvdCwgc28gd2Ugc2hvdWxkXG4gICAgICAvLyBoYXZlIGEgZ29vZCBjaGFuY2UgYXQgaGF2aW5nIGEgbm9uLWVtcHR5IGV4dGVuc2lvblxuICAgICAgcHJlRG90U3RhdGUgPSAtMTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhcnREb3QgPT09IC0xIHx8IGVuZCA9PT0gLTEgfHxcbiAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgY2hhcmFjdGVyIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgZG90XG4gICAgICBwcmVEb3RTdGF0ZSA9PT0gMCB8fFxuICAgICAgLy8gVGhlIChyaWdodC1tb3N0KSB0cmltbWVkIHBhdGggY29tcG9uZW50IGlzIGV4YWN0bHkgJy4uJ1xuICAgICAgcHJlRG90U3RhdGUgPT09IDEgJiYgc3RhcnREb3QgPT09IGVuZCAtIDEgJiYgc3RhcnREb3QgPT09IHN0YXJ0UGFydCArIDEpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnREb3QsIGVuZCk7XG59O1xuXG5mdW5jdGlvbiBmaWx0ZXIgKHhzLCBmKSB7XG4gICAgaWYgKHhzLmZpbHRlcikgcmV0dXJuIHhzLmZpbHRlcihmKTtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZih4c1tpXSwgaSwgeHMpKSByZXMucHVzaCh4c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbi8vIFN0cmluZy5wcm90b3R5cGUuc3Vic3RyIC0gbmVnYXRpdmUgaW5kZXggZG9uJ3Qgd29yayBpbiBJRThcbnZhciBzdWJzdHIgPSAnYWInLnN1YnN0cigtMSkgPT09ICdiJ1xuICAgID8gZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbikgeyByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKSB9XG4gICAgOiBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7XG4gICAgICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gc3RyLmxlbmd0aCArIHN0YXJ0O1xuICAgICAgICByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKTtcbiAgICB9XG47XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5yYW5kb21CeXRlcyA9IGV4cG9ydHMucm5nID0gZXhwb3J0cy5wc2V1ZG9SYW5kb21CeXRlcyA9IGV4cG9ydHMucHJuZyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJylcbmV4cG9ydHMuY3JlYXRlSGFzaCA9IGV4cG9ydHMuSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbmV4cG9ydHMuY3JlYXRlSG1hYyA9IGV4cG9ydHMuSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJylcblxudmFyIGFsZ29zID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1zaWduL2FsZ29zJylcbnZhciBhbGdvS2V5cyA9IE9iamVjdC5rZXlzKGFsZ29zKVxudmFyIGhhc2hlcyA9IFsnc2hhMScsICdzaGEyMjQnLCAnc2hhMjU2JywgJ3NoYTM4NCcsICdzaGE1MTInLCAnbWQ1JywgJ3JtZDE2MCddLmNvbmNhdChhbGdvS2V5cylcbmV4cG9ydHMuZ2V0SGFzaGVzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaGFzaGVzXG59XG5cbnZhciBwID0gcmVxdWlyZSgncGJrZGYyJylcbmV4cG9ydHMucGJrZGYyID0gcC5wYmtkZjJcbmV4cG9ydHMucGJrZGYyU3luYyA9IHAucGJrZGYyU3luY1xuXG52YXIgYWVzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1jaXBoZXInKVxuXG5leHBvcnRzLkNpcGhlciA9IGFlcy5DaXBoZXJcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gYWVzLmNyZWF0ZUNpcGhlclxuZXhwb3J0cy5DaXBoZXJpdiA9IGFlcy5DaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGFlcy5jcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5EZWNpcGhlciA9IGFlcy5EZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGFlcy5jcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5EZWNpcGhlcml2ID0gYWVzLkRlY2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGFlcy5jcmVhdGVEZWNpcGhlcml2XG5leHBvcnRzLmdldENpcGhlcnMgPSBhZXMuZ2V0Q2lwaGVyc1xuZXhwb3J0cy5saXN0Q2lwaGVycyA9IGFlcy5saXN0Q2lwaGVyc1xuXG52YXIgZGggPSByZXF1aXJlKCdkaWZmaWUtaGVsbG1hbicpXG5cbmV4cG9ydHMuRGlmZmllSGVsbG1hbkdyb3VwID0gZGguRGlmZmllSGVsbG1hbkdyb3VwXG5leHBvcnRzLmNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cCA9IGRoLmNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cFxuZXhwb3J0cy5nZXREaWZmaWVIZWxsbWFuID0gZGguZ2V0RGlmZmllSGVsbG1hblxuZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuID0gZGguY3JlYXRlRGlmZmllSGVsbG1hblxuZXhwb3J0cy5EaWZmaWVIZWxsbWFuID0gZGguRGlmZmllSGVsbG1hblxuXG52YXIgc2lnbiA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktc2lnbicpXG5cbmV4cG9ydHMuY3JlYXRlU2lnbiA9IHNpZ24uY3JlYXRlU2lnblxuZXhwb3J0cy5TaWduID0gc2lnbi5TaWduXG5leHBvcnRzLmNyZWF0ZVZlcmlmeSA9IHNpZ24uY3JlYXRlVmVyaWZ5XG5leHBvcnRzLlZlcmlmeSA9IHNpZ24uVmVyaWZ5XG5cbmV4cG9ydHMuY3JlYXRlRUNESCA9IHJlcXVpcmUoJ2NyZWF0ZS1lY2RoJylcblxudmFyIHB1YmxpY0VuY3J5cHQgPSByZXF1aXJlKCdwdWJsaWMtZW5jcnlwdCcpXG5cbmV4cG9ydHMucHVibGljRW5jcnlwdCA9IHB1YmxpY0VuY3J5cHQucHVibGljRW5jcnlwdFxuZXhwb3J0cy5wcml2YXRlRW5jcnlwdCA9IHB1YmxpY0VuY3J5cHQucHJpdmF0ZUVuY3J5cHRcbmV4cG9ydHMucHVibGljRGVjcnlwdCA9IHB1YmxpY0VuY3J5cHQucHVibGljRGVjcnlwdFxuZXhwb3J0cy5wcml2YXRlRGVjcnlwdCA9IHB1YmxpY0VuY3J5cHQucHJpdmF0ZURlY3J5cHRcblxuLy8gdGhlIGxlYXN0IEkgY2FuIGRvIGlzIG1ha2UgZXJyb3IgbWVzc2FnZXMgZm9yIHRoZSByZXN0IG9mIHRoZSBub2RlLmpzL2NyeXB0byBhcGkuXG4vLyA7W1xuLy8gICAnY3JlYXRlQ3JlZGVudGlhbHMnXG4vLyBdLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbi8vICAgZXhwb3J0c1tuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICB0aHJvdyBuZXcgRXJyb3IoW1xuLy8gICAgICAgJ3NvcnJ5LCAnICsgbmFtZSArICcgaXMgbm90IGltcGxlbWVudGVkIHlldCcsXG4vLyAgICAgICAnd2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMnLFxuLy8gICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9jcnlwdG8tYnJvd3NlcmlmeS9jcnlwdG8tYnJvd3NlcmlmeSdcbi8vICAgICBdLmpvaW4oJ1xcbicpKVxuLy8gICB9XG4vLyB9KVxuXG52YXIgcmYgPSByZXF1aXJlKCdyYW5kb21maWxsJylcblxuZXhwb3J0cy5yYW5kb21GaWxsID0gcmYucmFuZG9tRmlsbFxuZXhwb3J0cy5yYW5kb21GaWxsU3luYyA9IHJmLnJhbmRvbUZpbGxTeW5jXG5cbmV4cG9ydHMuY3JlYXRlQ3JlZGVudGlhbHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcihbXG4gICAgJ3NvcnJ5LCBjcmVhdGVDcmVkZW50aWFscyBpcyBub3QgaW1wbGVtZW50ZWQgeWV0JyxcbiAgICAnd2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMnLFxuICAgICdodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvLWJyb3dzZXJpZnkvY3J5cHRvLWJyb3dzZXJpZnknXG4gIF0uam9pbignXFxuJykpXG59XG5cbmV4cG9ydHMuY29uc3RhbnRzID0ge1xuICAnREhfQ0hFQ0tfUF9OT1RfU0FGRV9QUklNRSc6IDIsXG4gICdESF9DSEVDS19QX05PVF9QUklNRSc6IDEsXG4gICdESF9VTkFCTEVfVE9fQ0hFQ0tfR0VORVJBVE9SJzogNCxcbiAgJ0RIX05PVF9TVUlUQUJMRV9HRU5FUkFUT1InOiA4LFxuICAnTlBOX0VOQUJMRUQnOiAxLFxuICAnQUxQTl9FTkFCTEVEJzogMSxcbiAgJ1JTQV9QS0NTMV9QQURESU5HJzogMSxcbiAgJ1JTQV9TU0xWMjNfUEFERElORyc6IDIsXG4gICdSU0FfTk9fUEFERElORyc6IDMsXG4gICdSU0FfUEtDUzFfT0FFUF9QQURESU5HJzogNCxcbiAgJ1JTQV9YOTMxX1BBRERJTkcnOiA1LFxuICAnUlNBX1BLQ1MxX1BTU19QQURESU5HJzogNixcbiAgJ1BPSU5UX0NPTlZFUlNJT05fQ09NUFJFU1NFRCc6IDIsXG4gICdQT0lOVF9DT05WRVJTSU9OX1VOQ09NUFJFU1NFRCc6IDQsXG4gICdQT0lOVF9DT05WRVJTSU9OX0hZQlJJRCc6IDZcbn1cbiIsIid1c2Ugc3RyaWN0J1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIHRocm93SWZOb3RTdHJpbmdPckJ1ZmZlciAodmFsLCBwcmVmaXgpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodmFsKSAmJiB0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocHJlZml4ICsgJyBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgYnVmZmVyJylcbiAgfVxufVxuXG5mdW5jdGlvbiBIYXNoQmFzZSAoYmxvY2tTaXplKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fYmxvY2sgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tTaXplKVxuICB0aGlzLl9ibG9ja1NpemUgPSBibG9ja1NpemVcbiAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIHRoaXMuX2xlbmd0aCA9IFswLCAwLCAwLCAwXVxuXG4gIHRoaXMuX2ZpbmFsaXplZCA9IGZhbHNlXG59XG5cbmluaGVyaXRzKEhhc2hCYXNlLCBUcmFuc2Zvcm0pXG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgdmFyIGVycm9yID0gbnVsbFxuICB0cnkge1xuICAgIHRoaXMudXBkYXRlKGNodW5rLCBlbmNvZGluZylcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IgPSBlcnJcbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9yKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciBlcnJvciA9IG51bGxcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5kaWdlc3QoKSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IgPSBlcnJcbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9yKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGVuY29kaW5nKSB7XG4gIHRocm93SWZOb3RTdHJpbmdPckJ1ZmZlcihkYXRhLCAnRGF0YScpXG4gIGlmICh0aGlzLl9maW5hbGl6ZWQpIHRocm93IG5ldyBFcnJvcignRGlnZXN0IGFscmVhZHkgY2FsbGVkJylcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBlbmNvZGluZylcblxuICAvLyBjb25zdW1lIGRhdGFcbiAgdmFyIGJsb2NrID0gdGhpcy5fYmxvY2tcbiAgdmFyIG9mZnNldCA9IDBcbiAgd2hpbGUgKHRoaXMuX2Jsb2NrT2Zmc2V0ICsgZGF0YS5sZW5ndGggLSBvZmZzZXQgPj0gdGhpcy5fYmxvY2tTaXplKSB7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMuX2Jsb2NrT2Zmc2V0OyBpIDwgdGhpcy5fYmxvY2tTaXplOykgYmxvY2tbaSsrXSA9IGRhdGFbb2Zmc2V0KytdXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuICB3aGlsZSAob2Zmc2V0IDwgZGF0YS5sZW5ndGgpIGJsb2NrW3RoaXMuX2Jsb2NrT2Zmc2V0KytdID0gZGF0YVtvZmZzZXQrK11cblxuICAvLyB1cGRhdGUgbGVuZ3RoXG4gIGZvciAodmFyIGogPSAwLCBjYXJyeSA9IGRhdGEubGVuZ3RoICogODsgY2FycnkgPiAwOyArK2opIHtcbiAgICB0aGlzLl9sZW5ndGhbal0gKz0gY2FycnlcbiAgICBjYXJyeSA9ICh0aGlzLl9sZW5ndGhbal0gLyAweDAxMDAwMDAwMDApIHwgMFxuICAgIGlmIChjYXJyeSA+IDApIHRoaXMuX2xlbmd0aFtqXSAtPSAweDAxMDAwMDAwMDAgKiBjYXJyeVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3VwZGF0ZSBpcyBub3QgaW1wbGVtZW50ZWQnKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGlmICh0aGlzLl9maW5hbGl6ZWQpIHRocm93IG5ldyBFcnJvcignRGlnZXN0IGFscmVhZHkgY2FsbGVkJylcbiAgdGhpcy5fZmluYWxpemVkID0gdHJ1ZVxuXG4gIHZhciBkaWdlc3QgPSB0aGlzLl9kaWdlc3QoKVxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkgZGlnZXN0ID0gZGlnZXN0LnRvU3RyaW5nKGVuY29kaW5nKVxuXG4gIC8vIHJlc2V0IHN0YXRlXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMClcbiAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB0aGlzLl9sZW5ndGhbaV0gPSAwXG5cbiAgcmV0dXJuIGRpZ2VzdFxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfZGlnZXN0IGlzIG5vdCBpbXBsZW1lbnRlZCcpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaEJhc2VcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhZGFibGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5SZWFkYWJsZS5SZWFkYWJsZVN0YXRlID0gUmVhZGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxudmFyIEVFbGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIChlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVycyh0eXBlKS5sZW5ndGg7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBkZWJ1Z1V0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgZGVidWcgPSB2b2lkIDA7XG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXJMaXN0ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QnKTtcbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG52YXIgU3RyaW5nRGVjb2RlcjtcblxudXRpbC5pbmhlcml0cyhSZWFkYWJsZSwgU3RyZWFtKTtcblxudmFyIGtQcm94eUV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTtcblxuZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbikge1xuICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93blxuICAvLyBldmVudCBlbWl0dGVyIGltcGxlbWVudGF0aW9uIHdpdGggdGhlbS5cbiAgaWYgKHR5cGVvZiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBmbik7XG5cbiAgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueVxuICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHNcbiAgLy8gdG8gY29udGludWUgdG8gd29yayB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIE5vZGUuanMgdGhhdCBkbyBub3QgaW5jbHVkZVxuICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suXG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50LCBmbik7ZWxzZSBpZiAoaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dO1xufVxuXG5mdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZy4gVXNlZCB0byBtYWtlIHJlYWQobikgaWdub3JlIG4gYW5kIHRvXG4gIC8vIG1ha2UgYWxsIHRoZSBidWZmZXIgbWVyZ2luZyBhbmQgbGVuZ3RoIGNoZWNrcyBnbyBhd2F5XG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyBcImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXJcIlxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgcmVhZGFibGVId20gPSBvcHRpb25zLnJlYWRhYmxlSGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcblxuICBpZiAoaHdtIHx8IGh3bSA9PT0gMCkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtO2Vsc2UgaWYgKGlzRHVwbGV4ICYmIChyZWFkYWJsZUh3bSB8fCByZWFkYWJsZUh3bSA9PT0gMCkpIHRoaXMuaGlnaFdhdGVyTWFyayA9IHJlYWRhYmxlSHdtO2Vsc2UgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBBIGxpbmtlZCBsaXN0IGlzIHVzZWQgdG8gc3RvcmUgZGF0YSBjaHVua3MgaW5zdGVhZCBvZiBhbiBhcnJheSBiZWNhdXNlIHRoZVxuICAvLyBsaW5rZWQgbGlzdCBjYW4gcmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIGJlZ2lubmluZyBmYXN0ZXIgdGhhblxuICAvLyBhcnJheS5zaGlmdCgpXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgZXZlbnQgJ3JlYWRhYmxlJy8nZGF0YScgaXMgZW1pdHRlZFxuICAvLyBpbW1lZGlhdGVseSwgb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZVxuICAvLyBhbnkgYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3QgcmVhZCBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5XG4gIC8vIHRoYXQgd2UncmUgYXdhaXRpbmcgYSAncmVhZGFibGUnIGV2ZW50IGVtaXNzaW9uLlxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcbiAgdGhpcy5hd2FpdERyYWluID0gMDtcblxuICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcblxuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKSByZXR1cm4gbmV3IFJlYWRhYmxlKG9wdGlvbnMpO1xuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3lcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVhZCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fcmVhZCA9IG9wdGlvbnMucmVhZDtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cblJlYWRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICBjYihlcnIpO1xufTtcblxuLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuXG4vLyBUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgaGlnaFdhdGVyTWFyayBoYXMgbm90IGJlZW4gaGl0IHlldCxcbi8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGRcbi8vIHdyaXRlKCkgc29tZSBtb3JlLlxuUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBza2lwQ2h1bmtDaGVjaztcblxuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG4gICAgICBpZiAoZW5jb2RpbmcgIT09IHN0YXRlLmVuY29kaW5nKSB7XG4gICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgICAgICAgZW5jb2RpbmcgPSAnJztcbiAgICAgIH1cbiAgICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIGVuY29kaW5nLCBmYWxzZSwgc2tpcENodW5rQ2hlY2spO1xufTtcblxuLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKClcblJlYWRhYmxlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBudWxsLCB0cnVlLCBmYWxzZSk7XG59O1xuXG5mdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250LCBza2lwQ2h1bmtDaGVjaykge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBlcjtcbiAgICBpZiAoIXNraXBDaHVua0NoZWNrKSBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspO1xuICAgIGlmIChlcikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY2h1bmspICE9PSBCdWZmZXIucHJvdG90eXBlKSB7XG4gICAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGRUb0Zyb250KSB7XG4gICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50JykpO2Vsc2UgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRlZCkge1xuICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhZW5jb2RpbmcpIHtcbiAgICAgICAgICBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rLmxlbmd0aCAhPT0gMCkgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtlbHNlIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmVlZE1vcmVEYXRhKHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGFkZFRvRnJvbnQpIHtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5zeW5jKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtlbHNlIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcblxuICAgIGlmIChzdGF0ZS5uZWVkUmVhZGFibGUpIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICB9XG4gIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyO1xuICBpZiAoIV9pc1VpbnQ4QXJyYXkoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIHJldHVybiBlcjtcbn1cblxuLy8gaWYgaXQncyBwYXN0IHRoZSBoaWdoIHdhdGVyIG1hcmssIHdlIGNhbiBwdXNoIGluIHNvbWUgbW9yZS5cbi8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lXG4vLyBtb3JlIGJ5dGVzLiAgVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCxcbi8vIHN1Y2ggYXMgdGhlIHJlcGwuICBBbHNvLCBpZiB0aGUgcHVzaCgpIHRyaWdnZXJlZCBhXG4vLyByZWFkYWJsZSBldmVudCwgYW5kIHRoZSB1c2VyIGNhbGxlZCByZWFkKGxhcmdlTnVtYmVyKSBzdWNoIHRoYXRcbi8vIG5lZWRSZWFkYWJsZSB3YXMgc2V0LCB0aGVuIHdlIG91Z2h0IHRvIHB1c2ggbW9yZSwgc28gdGhhdCBhbm90aGVyXG4vLyAncmVhZGFibGUnIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLlxuZnVuY3Rpb24gbmVlZE1vcmVEYXRhKHN0YXRlKSB7XG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLm5lZWRSZWFkYWJsZSB8fCBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7XG59O1xuXG4vLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblJlYWRhYmxlLnByb3RvdHlwZS5zZXRFbmNvZGluZyA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IGVuYztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBEb24ndCByYWlzZSB0aGUgaHdtID4gOE1CXG52YXIgTUFYX0hXTSA9IDB4ODAwMDAwO1xuZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMiB0byBwcmV2ZW50IGluY3JlYXNpbmcgaHdtIGV4Y2Vzc2l2ZWx5IGluXG4gICAgLy8gdGlueSBhbW91bnRzXG4gICAgbi0tO1xuICAgIG4gfD0gbiA+Pj4gMTtcbiAgICBuIHw9IG4gPj4+IDI7XG4gICAgbiB8PSBuID4+PiA0O1xuICAgIG4gfD0gbiA+Pj4gODtcbiAgICBuIHw9IG4gPj4+IDE2O1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7XG4gIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxO1xuICBpZiAobiAhPT0gbikge1xuICAgIC8vIE9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCkgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfVxuICAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgY3VycmVudCBod20sIHRoZW4gcmFpc2UgdGhlIGh3bS5cbiAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7XG4gIGlmIChuIDw9IHN0YXRlLmxlbmd0aCkgcmV0dXJuIG47XG4gIC8vIERvbid0IGhhdmUgZW5vdWdoXG4gIGlmICghc3RhdGUuZW5kZWQpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sZW5ndGg7XG59XG5cbi8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIGRlYnVnKCdyZWFkJywgbik7XG4gIG4gPSBwYXJzZUludChuLCAxMCk7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBuT3JpZyA9IG47XG5cbiAgaWYgKG4gIT09IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gIC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUubmVlZFJlYWRhYmxlICYmIChzdGF0ZS5sZW5ndGggPj0gc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7ZWxzZSBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7XG5cbiAgLy8gaWYgd2UndmUgZW5kZWQsIGFuZCB3ZSdyZSBub3cgY2xlYXIsIHRoZW4gZmluaXNoIGl0IHVwLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQWxsIHRoZSBhY3R1YWwgY2h1bmsgZ2VuZXJhdGlvbiBsb2dpYyBuZWVkcyB0byBiZVxuICAvLyAqYmVsb3cqIHRoZSBjYWxsIHRvIF9yZWFkLiAgVGhlIHJlYXNvbiBpcyB0aGF0IGluIGNlcnRhaW5cbiAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZFxuICAvLyBtYXkgYmUgYSBjb21wbGV0ZWx5IHN5bmNocm9ub3VzIG9wZXJhdGlvbiB3aGljaCBtYXkgY2hhbmdlXG4gIC8vIHRoZSBzdGF0ZSBvZiB0aGUgcmVhZCBidWZmZXIsIHByb3ZpZGluZyBlbm91Z2ggZGF0YSB3aGVuXG4gIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLlxuICAvL1xuICAvLyBTbywgdGhlIHN0ZXBzIGFyZTpcbiAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkb1xuICAvLyBhIHJlYWQgZnJvbSB0aGUgYnVmZmVyLlxuICAvL1xuICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLlxuICAvLyBOb3RlIHRoYXQgdGhpcyBtYXkgYmUgYXN5bmNocm9ub3VzLCBvciBzeW5jaHJvbm91cy4gIFllcywgaXQgaXNcbiAgLy8gZGVlcGx5IHVnbHkgdG8gd3JpdGUgQVBJcyB0aGlzIHdheSwgYnV0IHRoYXQgc3RpbGwgZG9lc24ndCBtZWFuXG4gIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmVcbiAgLy8gZGVzaWduZWQgdG8gYmUgc3luYy9hc3luYyBhZ25vc3RpYy5cbiAgLy8gVGFrZSBub3RlIGlmIHRoZSBfcmVhZCBjYWxsIGlzIHN5bmMgb3IgYXN5bmMgKGllLCBpZiB0aGUgcmVhZCBjYWxsXG4gIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXRcbiAgLy8gJ3JlYWRhYmxlJyBldGMuXG4gIC8vXG4gIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi5cblxuICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuXG4gIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7XG4gIGRlYnVnKCduZWVkIHJlYWRhYmxlJywgZG9SZWFkKTtcblxuICAvLyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBsZXNzIHRoYW4gdGhlIGhpZ2hXYXRlck1hcmssIHRoZW4gYWxzbyByZWFkIHNvbWVcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCB8fCBzdGF0ZS5sZW5ndGggLSBuIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRvUmVhZCA9IHRydWU7XG4gICAgZGVidWcoJ2xlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrJywgZG9SZWFkKTtcbiAgfVxuXG4gIC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5XG4gIC8vIHJlYWRpbmcsIHRoZW4gaXQncyB1bm5lY2Vzc2FyeS5cbiAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHtcbiAgICBkb1JlYWQgPSBmYWxzZTtcbiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7XG4gIH0gZWxzZSBpZiAoZG9SZWFkKSB7XG4gICAgZGVidWcoJ2RvIHJlYWQnKTtcbiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTtcbiAgICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgICAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LlxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG4gICAgc3RhdGUuc3luYyA9IGZhbHNlO1xuICAgIC8vIElmIF9yZWFkIHB1c2hlZCBkYXRhIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgIHdpbGwgYmUgZmFsc2UsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuICAgIGlmICghc3RhdGUucmVhZGluZykgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTtcbiAgfVxuXG4gIHZhciByZXQ7XG4gIGlmIChuID4gMCkgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO2Vsc2UgcmV0ID0gbnVsbDtcblxuICBpZiAocmV0ID09PSBudWxsKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBuID0gMDtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5sZW5ndGggLT0gbjtcbiAgfVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcbiAgICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuXG4gICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAgIC8vIElmIHdlIHRyaWVkIHRvIHJlYWQoKSBwYXN0IHRoZSBFT0YsIHRoZW4gZW1pdCBlbmQgb24gdGhlIG5leHQgdGljay5cbiAgICBpZiAobk9yaWcgIT09IG4gJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO1xuICB9XG5cbiAgaWYgKHJldCAhPT0gbnVsbCkgdGhpcy5lbWl0KCdkYXRhJywgcmV0KTtcblxuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuO1xuICBpZiAoc3RhdGUuZGVjb2Rlcikge1xuICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG5cbiAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xufVxuXG4vLyBEb24ndCBlbWl0IHJlYWRhYmxlIHJpZ2h0IGF3YXkgaW4gc3luYyBtb2RlLCBiZWNhdXNlIHRoaXMgY2FuIHRyaWdnZXJcbi8vIGFub3RoZXIgcmVhZCgpIGNhbGwgPT4gc3RhY2sgb3ZlcmZsb3cuICBUaGlzIHdheSwgaXQgbWlnaHQgdHJpZ2dlclxuLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLlxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5mbG93aW5nKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlO1xuICAgIGlmIChzdGF0ZS5zeW5jKSBwbmEubmV4dFRpY2soZW1pdFJlYWRhYmxlXywgc3RyZWFtKTtlbHNlIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpO1xuICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgZmxvdyhzdHJlYW0pO1xufVxuXG4vLyBhdCB0aGlzIHBvaW50LCB0aGUgdXNlciBoYXMgcHJlc3VtYWJseSBzZWVuIHRoZSAncmVhZGFibGUnIGV2ZW50LFxuLy8gYW5kIGNhbGxlZCByZWFkKCkgdG8gY29uc3VtZSBzb21lIGRhdGEuICB0aGF0IG1heSBoYXZlIHRyaWdnZXJlZFxuLy8gaW4gdHVybiBhbm90aGVyIF9yZWFkKG4pIGNhbGwsIGluIHdoaWNoIGNhc2UgcmVhZGluZyA9IHRydWUgaWZcbi8vIGl0J3MgaW4gcHJvZ3Jlc3MuXG4vLyBIb3dldmVyLCBpZiB3ZSdyZSBub3QgZW5kZWQsIG9yIHJlYWRpbmcsIGFuZCB0aGUgbGVuZ3RoIDwgaHdtLFxuLy8gdGhlbiBnbyBhaGVhZCBhbmQgdHJ5IHRvIHJlYWQgc29tZSBtb3JlIHByZWVtcHRpdmVseS5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmdNb3JlKSB7XG4gICAgc3RhdGUucmVhZGluZ01vcmUgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkZWJ1ZygnbWF5YmVSZWFkTW9yZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpXG4gICAgICAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxuICAgICAgYnJlYWs7ZWxzZSBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcbn1cblxuLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC5cbi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdfcmVhZCgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKGRlc3QsIHBpcGVPcHRzKSB7XG4gIHZhciBzcmMgPSB0aGlzO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIHN3aXRjaCAoc3RhdGUucGlwZXNDb3VudCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHN0YXRlLnBpcGVzID0gZGVzdDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHN0YXRlLnBpcGVzID0gW3N0YXRlLnBpcGVzLCBkZXN0XTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzdGF0ZS5waXBlcy5wdXNoKGRlc3QpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgc3RhdGUucGlwZXNDb3VudCArPSAxO1xuICBkZWJ1ZygncGlwZSBjb3VudD0lZCBvcHRzPSVqJywgc3RhdGUucGlwZXNDb3VudCwgcGlwZU9wdHMpO1xuXG4gIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSkgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRvdXQgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRlcnI7XG5cbiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IHVucGlwZTtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHBuYS5uZXh0VGljayhlbmRGbik7ZWxzZSBzcmMub25jZSgnZW5kJywgZW5kRm4pO1xuXG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUsIHVucGlwZUluZm8pIHtcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgaWYgKHVucGlwZUluZm8gJiYgdW5waXBlSW5mby5oYXNVbnBpcGVkID09PSBmYWxzZSkge1xuICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgZGVidWcoJ29uZW5kJyk7XG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG4gIC8vIHdoZW4gdGhlIGRlc3QgZHJhaW5zLCBpdCByZWR1Y2VzIHRoZSBhd2FpdERyYWluIGNvdW50ZXJcbiAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpXG4gIC8vIGhhbmRsZXIgaW4gZmxvdygpLCBidXQgYWRkaW5nIGFuZCByZW1vdmluZyByZXBlYXRlZGx5IGlzXG4gIC8vIHRvbyBzbG93LlxuICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7XG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlO1xuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIGRlYnVnKCdjbGVhbnVwJyk7XG4gICAgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCB1bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG5cbiAgICBjbGVhbmVkVXAgPSB0cnVlO1xuXG4gICAgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpc1xuICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydFxuICAgIC8vIGZsb3dpbmcgYWdhaW4uXG4gICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LlxuICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS5cbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7XG4gIH1cblxuICAvLyBJZiB0aGUgdXNlciBwdXNoZXMgbW9yZSBkYXRhIHdoaWxlIHdlJ3JlIHdyaXRpbmcgdG8gZGVzdCB0aGVuIHdlJ2xsIGVuZCB1cFxuICAvLyBpbiBvbmRhdGEgYWdhaW4uIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byBpbmNyZWFzZSBhd2FpdERyYWluIG9uY2UgYmVjYXVzZVxuICAvLyBkZXN0IHdpbGwgb25seSBlbWl0IG9uZSAnZHJhaW4nIGV2ZW50IGZvciB0aGUgbXVsdGlwbGUgd3JpdGVzLlxuICAvLyA9PiBJbnRyb2R1Y2UgYSBndWFyZCBvbiBpbmNyZWFzaW5nIGF3YWl0RHJhaW4uXG4gIHZhciBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gIHNyYy5vbignZGF0YScsIG9uZGF0YSk7XG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGRlYnVnKCdvbmRhdGEnKTtcbiAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGlmIChmYWxzZSA9PT0gcmV0ICYmICFpbmNyZWFzZWRBd2FpdERyYWluKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGVcbiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxuICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uXG4gICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbik7XG4gICAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKys7XG4gICAgICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSB0cnVlO1xuICAgICAgfVxuICAgICAgc3JjLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGRlYnVnKCdvbmVycm9yJywgZXIpO1xuICAgIHVucGlwZSgpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgaWYgKEVFbGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMCkgZGVzdC5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgdXNlcmxhbmQgb25lcy5cbiAgcHJlcGVuZExpc3RlbmVyKGRlc3QsICdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgZGVidWcoJ29uZmluaXNoJyk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblxuICBmdW5jdGlvbiB1bnBpcGUoKSB7XG4gICAgZGVidWcoJ3VucGlwZScpO1xuICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gIH1cblxuICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpO1xuXG4gIC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS5cbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BpcGUgcmVzdW1lJyk7XG4gICAgc3JjLnJlc3VtZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5mdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiA9PT0gMCAmJiBFRWxpc3RlbmVyQ291bnQoc3JjLCAnZGF0YScpKSB7XG4gICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICAgIGZsb3coc3JjKTtcbiAgICB9XG4gIH07XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbiAoZGVzdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgdW5waXBlSW5mbyA9IHsgaGFzVW5waXBlZDogZmFsc2UgfTtcblxuICAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpcztcblxuICAvLyBqdXN0IG9uZSBkZXN0aW5hdGlvbi4gIG1vc3QgY29tbW9uIGNhc2UuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gc3RhdGUucGlwZXM7XG5cbiAgICAvLyBnb3QgYSBtYXRjaC5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0c1tpXS5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICB9cmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLlxuICB2YXIgaW5kZXggPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIHRoaXM7XG5cbiAgc3RhdGUucGlwZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgc3RhdGUucGlwZXNDb3VudCAtPSAxO1xuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTtcblxuICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gc2V0IHVwIGRhdGEgZXZlbnRzIGlmIHRoZXkgYXJlIGFza2VkIGZvclxuLy8gRW5zdXJlIHJlYWRhYmxlIGxpc3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmdcblJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgZm4pIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUub24uY2FsbCh0aGlzLCBldiwgZm4pO1xuXG4gIGlmIChldiA9PT0gJ2RhdGEnKSB7XG4gICAgLy8gU3RhcnQgZmxvd2luZyBvbiBuZXh0IHRpY2sgaWYgc3RyZWFtIGlzbid0IGV4cGxpY2l0bHkgcGF1c2VkXG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHRoaXMucmVzdW1lKCk7XG4gIH0gZWxzZSBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgICAgIHBuYS5uZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcblxuZnVuY3Rpb24gblJlYWRpbmdOZXh0VGljayhzZWxmKSB7XG4gIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcbiAgc2VsZi5yZWFkKDApO1xufVxuXG4vLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lJyk7XG4gICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgcmVzdW1lKHRoaXMsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2socmVzdW1lXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZykge1xuICAgIGRlYnVnKCdyZXN1bWUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH1cblxuICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTtcbiAgZmxvdyhzdHJlYW0pO1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2NhbGwgcGF1c2UgZmxvd2luZz0laicsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7XG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BhdXNlJyk7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZmxvdyhzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpO1xuICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7fVxufVxuXG4vLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgcGF1c2VkID0gZmFsc2U7XG5cbiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZW5kJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XG4gICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgX3RoaXMucHVzaChjaHVuayk7XG4gICAgfVxuXG4gICAgX3RoaXMucHVzaChudWxsKTtcbiAgfSk7XG5cbiAgc3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZGF0YScpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuXG4gICAgLy8gZG9uJ3Qgc2tpcCBvdmVyIGZhbHN5IHZhbHVlcyBpbiBvYmplY3RNb2RlXG4gICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgJiYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB1bmRlZmluZWQpKSByZXR1cm47ZWxzZSBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSkgcmV0dXJuO1xuXG4gICAgdmFyIHJldCA9IF90aGlzLnB1c2goY2h1bmspO1xuICAgIGlmICghcmV0KSB7XG4gICAgICBwYXVzZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLnBhdXNlKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuXG4gIC8vIGltcG9ydGFudCB3aGVuIHdyYXBwaW5nIGZpbHRlcnMgYW5kIGR1cGxleGVzLlxuICBmb3IgKHZhciBpIGluIHN0cmVhbSkge1xuICAgIGlmICh0aGlzW2ldID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHN0cmVhbVtpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tpXSA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfShpKTtcbiAgICB9XG4gIH1cblxuICAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwga1Byb3h5RXZlbnRzLmxlbmd0aDsgbisrKSB7XG4gICAgc3RyZWFtLm9uKGtQcm94eUV2ZW50c1tuXSwgdGhpcy5lbWl0LmJpbmQodGhpcywga1Byb3h5RXZlbnRzW25dKSk7XG4gIH1cblxuICAvLyB3aGVuIHdlIHRyeSB0byBjb25zdW1lIHNvbWUgbW9yZSBieXRlcywgc2ltcGx5IHVucGF1c2UgdGhlXG4gIC8vIHVuZGVybHlpbmcgc3RyZWFtLlxuICB0aGlzLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBfcmVhZCcsIG4pO1xuICAgIGlmIChwYXVzZWQpIHtcbiAgICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtLnJlc3VtZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcblxuLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUpIHtcbiAgLy8gbm90aGluZyBidWZmZXJlZFxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcblxuICB2YXIgcmV0O1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0ID0gc3RhdGUuYnVmZmVyLnNoaWZ0KCk7ZWxzZSBpZiAoIW4gfHwgbiA+PSBzdGF0ZS5sZW5ndGgpIHtcbiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3RcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgcmV0ID0gc3RhdGUuYnVmZmVyLmpvaW4oJycpO2Vsc2UgaWYgKHN0YXRlLmJ1ZmZlci5sZW5ndGggPT09IDEpIHJldCA9IHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGE7ZWxzZSByZXQgPSBzdGF0ZS5idWZmZXIuY29uY2F0KHN0YXRlLmxlbmd0aCk7XG4gICAgc3RhdGUuYnVmZmVyLmNsZWFyKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVhZCBwYXJ0IG9mIGxpc3RcbiAgICByZXQgPSBmcm9tTGlzdFBhcnRpYWwobiwgc3RhdGUuYnVmZmVyLCBzdGF0ZS5kZWNvZGVyKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbi8vIEV4dHJhY3RzIG9ubHkgZW5vdWdoIGJ1ZmZlcmVkIGRhdGEgdG8gc2F0aXNmeSB0aGUgYW1vdW50IHJlcXVlc3RlZC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3RQYXJ0aWFsKG4sIGxpc3QsIGhhc1N0cmluZ3MpIHtcbiAgdmFyIHJldDtcbiAgaWYgKG4gPCBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBzbGljZSBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5nc1xuICAgIHJldCA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKDAsIG4pO1xuICAgIGxpc3QuaGVhZC5kYXRhID0gbGlzdC5oZWFkLmRhdGEuc2xpY2Uobik7XG4gIH0gZWxzZSBpZiAobiA9PT0gbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gZmlyc3QgY2h1bmsgaXMgYSBwZXJmZWN0IG1hdGNoXG4gICAgcmV0ID0gbGlzdC5zaGlmdCgpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlc3VsdCBzcGFucyBtb3JlIHRoYW4gb25lIGJ1ZmZlclxuICAgIHJldCA9IGhhc1N0cmluZ3MgPyBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSA6IGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgY2hhcmFjdGVycyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGFcbi8vIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkge1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICB2YXIgcmV0ID0gcC5kYXRhO1xuICBuIC09IHJldC5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIHN0ciA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gc3RyLmxlbmd0aCA/IHN0ci5sZW5ndGggOiBuO1xuICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkgcmV0ICs9IHN0cjtlbHNlIHJldCArPSBzdHIuc2xpY2UoMCwgbik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IHN0ci5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXIobiwgbGlzdCkge1xuICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4pO1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICBwLmRhdGEuY29weShyZXQpO1xuICBuIC09IHAuZGF0YS5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIGJ1ZiA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gYnVmLmxlbmd0aCA/IGJ1Zi5sZW5ndGggOiBuO1xuICAgIGJ1Zi5jb3B5KHJldCwgcmV0Lmxlbmd0aCAtIG4sIDAsIG5iKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gYnVmLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblxuICAvLyBJZiB3ZSBnZXQgaGVyZSBiZWZvcmUgY29uc3VtaW5nIGFsbCB0aGUgYnl0ZXMsIHRoZW4gdGhhdCBpcyBhXG4gIC8vIGJ1ZyBpbiBub2RlLiAgU2hvdWxkIG5ldmVyIGhhcHBlbi5cbiAgaWYgKHN0YXRlLmxlbmd0aCA+IDApIHRocm93IG5ldyBFcnJvcignXCJlbmRSZWFkYWJsZSgpXCIgY2FsbGVkIG9uIG5vbi1lbXB0eSBzdHJlYW0nKTtcblxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlLCBzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlTlQoc3RhdGUsIHN0cmVhbSkge1xuICAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5zaGlmdC5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8vIHVuZG9jdW1lbnRlZCBjYigpIEFQSSwgbmVlZGVkIGZvciBjb3JlLCBub3QgZm9yIHB1YmxpYyBBUElcbmZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIHZhciB3cml0YWJsZURlc3Ryb3llZCA9IHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG5cbiAgaWYgKHJlYWRhYmxlRGVzdHJveWVkIHx8IHdyaXRhYmxlRGVzdHJveWVkKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSBpZiAoZXJyICYmICghdGhpcy5fd3JpdGFibGVTdGF0ZSB8fCAhdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gd2Ugc2V0IGRlc3Ryb3llZCB0byB0cnVlIGJlZm9yZSBmaXJpbmcgZXJyb3IgY2FsbGJhY2tzIGluIG9yZGVyXG4gIC8vIHRvIG1ha2UgaXQgcmUtZW50cmFuY2Ugc2FmZSBpbiBjYXNlIGRlc3Ryb3koKSBpcyBjYWxsZWQgd2l0aGluIGNhbGxiYWNrc1xuXG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgLy8gaWYgdGhpcyBpcyBhIGR1cGxleCBzdHJlYW0gbWFyayB0aGUgd3JpdGFibGUgcGFydCBhcyBkZXN0cm95ZWQgYXMgd2VsbFxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIHRoaXMuX2Rlc3Ryb3koZXJyIHx8IG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoIWNiICYmIGVycikge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCBfdGhpcywgZXJyKTtcbiAgICAgIGlmIChfdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBfdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdW5kZXN0cm95KCkge1xuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRFcnJvck5UKHNlbGYsIGVycikge1xuICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gIHVuZGVzdHJveTogdW5kZXN0cm95XG59OyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2Zvcm07XG5cbnZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhUcmFuc2Zvcm0sIER1cGxleCk7XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKGVyLCBkYXRhKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTtcblxuICB2YXIgY2IgPSB0cy53cml0ZWNiO1xuXG4gIGlmICghY2IpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignd3JpdGUgY2FsbGJhY2sgY2FsbGVkIG11bHRpcGxlIHRpbWVzJykpO1xuICB9XG5cbiAgdHMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRzLndyaXRlY2IgPSBudWxsO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHRoaXMucHVzaChkYXRhKTtcblxuICBjYihlcik7XG5cbiAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgcnMucmVhZGluZyA9IGZhbHNlO1xuICBpZiAocnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHtcbiAgICB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zKTtcblxuICBEdXBsZXguY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZSA9IHtcbiAgICBhZnRlclRyYW5zZm9ybTogYWZ0ZXJUcmFuc2Zvcm0uYmluZCh0aGlzKSxcbiAgICBuZWVkVHJhbnNmb3JtOiBmYWxzZSxcbiAgICB0cmFuc2Zvcm1pbmc6IGZhbHNlLFxuICAgIHdyaXRlY2I6IG51bGwsXG4gICAgd3JpdGVjaHVuazogbnVsbCxcbiAgICB3cml0ZWVuY29kaW5nOiBudWxsXG4gIH07XG5cbiAgLy8gc3RhcnQgb3V0IGFza2luZyBmb3IgYSByZWFkYWJsZSBldmVudCBvbmNlIGRhdGEgaXMgdHJhbnNmb3JtZWQuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAvLyB3ZSBoYXZlIGltcGxlbWVudGVkIHRoZSBfcmVhZCBtZXRob2QsIGFuZCBkb25lIHRoZSBvdGhlciB0aGluZ3NcbiAgLy8gdGhhdCBSZWFkYWJsZSB3YW50cyBiZWZvcmUgdGhlIGZpcnN0IF9yZWFkIGNhbGwsIHNvIHVuc2V0IHRoZVxuICAvLyBzeW5jIGd1YXJkIGZsYWcuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fdHJhbnNmb3JtID0gb3B0aW9ucy50cmFuc2Zvcm07XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmx1c2ggPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZsdXNoID0gb3B0aW9ucy5mbHVzaDtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIHdyaXRhYmxlIHNpZGUgZmluaXNoZXMsIHRoZW4gZmx1c2ggb3V0IGFueXRoaW5nIHJlbWFpbmluZy5cbiAgdGhpcy5vbigncHJlZmluaXNoJywgcHJlZmluaXNoKTtcbn1cblxuZnVuY3Rpb24gcHJlZmluaXNoKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgdGhpcy5fZmx1c2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLl9mbHVzaChmdW5jdGlvbiAoZXIsIGRhdGEpIHtcbiAgICAgIGRvbmUoX3RoaXMsIGVyLCBkYXRhKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBkb25lKHRoaXMsIG51bGwsIG51bGwpO1xuICB9XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ190cmFuc2Zvcm0oKSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fCBycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufTtcblxuLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS5cbi8vIF90cmFuc2Zvcm0gZG9lcyBhbGwgdGhlIHdvcmsuXG4vLyBUaGF0IHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhlIHJlYWRhYmxlIHNpZGUgd2FudHMgbW9yZSBkYXRhLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmIHRzLndyaXRlY2IgJiYgIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7XG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG4gICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gIH1cbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICBEdXBsZXgucHJvdG90eXBlLl9kZXN0cm95LmNhbGwodGhpcywgZXJyLCBmdW5jdGlvbiAoZXJyMikge1xuICAgIGNiKGVycjIpO1xuICAgIF90aGlzMi5lbWl0KCdjbG9zZScpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGRvbmUoc3RyZWFtLCBlciwgZGF0YSkge1xuICBpZiAoZXIpIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG5cbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgaWYgKHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHdzLmxlbmd0aCAhPSAwJyk7XG5cbiAgaWYgKHN0cmVhbS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiBzdGlsbCB0cmFuc2Zvcm1pbmcnKTtcblxuICByZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7XG59IiwiLyoqXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTI1NiwgYXMgZGVmaW5lZFxuICogaW4gRklQUyAxODAtMlxuICogVmVyc2lvbiAyLjItYmV0YSBDb3B5cmlnaHQgQW5nZWwgTWFyaW4sIFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg0MjhBMkY5OCwgMHg3MTM3NDQ5MSwgMHhCNUMwRkJDRiwgMHhFOUI1REJBNSxcbiAgMHgzOTU2QzI1QiwgMHg1OUYxMTFGMSwgMHg5MjNGODJBNCwgMHhBQjFDNUVENSxcbiAgMHhEODA3QUE5OCwgMHgxMjgzNUIwMSwgMHgyNDMxODVCRSwgMHg1NTBDN0RDMyxcbiAgMHg3MkJFNUQ3NCwgMHg4MERFQjFGRSwgMHg5QkRDMDZBNywgMHhDMTlCRjE3NCxcbiAgMHhFNDlCNjlDMSwgMHhFRkJFNDc4NiwgMHgwRkMxOURDNiwgMHgyNDBDQTFDQyxcbiAgMHgyREU5MkM2RiwgMHg0QTc0ODRBQSwgMHg1Q0IwQTlEQywgMHg3NkY5ODhEQSxcbiAgMHg5ODNFNTE1MiwgMHhBODMxQzY2RCwgMHhCMDAzMjdDOCwgMHhCRjU5N0ZDNyxcbiAgMHhDNkUwMEJGMywgMHhENUE3OTE0NywgMHgwNkNBNjM1MSwgMHgxNDI5Mjk2NyxcbiAgMHgyN0I3MEE4NSwgMHgyRTFCMjEzOCwgMHg0RDJDNkRGQywgMHg1MzM4MEQxMyxcbiAgMHg2NTBBNzM1NCwgMHg3NjZBMEFCQiwgMHg4MUMyQzkyRSwgMHg5MjcyMkM4NSxcbiAgMHhBMkJGRThBMSwgMHhBODFBNjY0QiwgMHhDMjRCOEI3MCwgMHhDNzZDNTFBMyxcbiAgMHhEMTkyRTgxOSwgMHhENjk5MDYyNCwgMHhGNDBFMzU4NSwgMHgxMDZBQTA3MCxcbiAgMHgxOUE0QzExNiwgMHgxRTM3NkMwOCwgMHgyNzQ4Nzc0QywgMHgzNEIwQkNCNSxcbiAgMHgzOTFDMENCMywgMHg0RUQ4QUE0QSwgMHg1QjlDQ0E0RiwgMHg2ODJFNkZGMyxcbiAgMHg3NDhGODJFRSwgMHg3OEE1NjM2RiwgMHg4NEM4NzgxNCwgMHg4Q0M3MDIwOCxcbiAgMHg5MEJFRkZGQSwgMHhBNDUwNkNFQiwgMHhCRUY5QTNGNywgMHhDNjcxNzhGMlxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjU2ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjU2LCBIYXNoKVxuXG5TaGEyNTYucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDZhMDllNjY3XG4gIHRoaXMuX2IgPSAweGJiNjdhZTg1XG4gIHRoaXMuX2MgPSAweDNjNmVmMzcyXG4gIHRoaXMuX2QgPSAweGE1NGZmNTNhXG4gIHRoaXMuX2UgPSAweDUxMGU1MjdmXG4gIHRoaXMuX2YgPSAweDliMDU2ODhjXG4gIHRoaXMuX2cgPSAweDFmODNkOWFiXG4gIHRoaXMuX2ggPSAweDViZTBjZDE5XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gY2ggKHgsIHksIHopIHtcbiAgcmV0dXJuIHogXiAoeCAmICh5IF4geikpXG59XG5cbmZ1bmN0aW9uIG1haiAoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSB8ICh6ICYgKHggfCB5KSlcbn1cblxuZnVuY3Rpb24gc2lnbWEwICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gMiB8IHggPDwgMzApIF4gKHggPj4+IDEzIHwgeCA8PCAxOSkgXiAoeCA+Pj4gMjIgfCB4IDw8IDEwKVxufVxuXG5mdW5jdGlvbiBzaWdtYTEgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiA2IHwgeCA8PCAyNikgXiAoeCA+Pj4gMTEgfCB4IDw8IDIxKSBeICh4ID4+PiAyNSB8IHggPDwgNylcbn1cblxuZnVuY3Rpb24gZ2FtbWEwICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gNyB8IHggPDwgMjUpIF4gKHggPj4+IDE4IHwgeCA8PCAxNCkgXiAoeCA+Pj4gMylcbn1cblxuZnVuY3Rpb24gZ2FtbWExICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gMTcgfCB4IDw8IDE1KSBeICh4ID4+PiAxOSB8IHggPDwgMTMpIF4gKHggPj4+IDEwKVxufVxuXG5TaGEyNTYucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2EgfCAwXG4gIHZhciBiID0gdGhpcy5fYiB8IDBcbiAgdmFyIGMgPSB0aGlzLl9jIHwgMFxuICB2YXIgZCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlID0gdGhpcy5fZSB8IDBcbiAgdmFyIGYgPSB0aGlzLl9mIHwgMFxuICB2YXIgZyA9IHRoaXMuX2cgfCAwXG4gIHZhciBoID0gdGhpcy5faCB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICBmb3IgKDsgaSA8IDY0OyArK2kpIFdbaV0gPSAoZ2FtbWExKFdbaSAtIDJdKSArIFdbaSAtIDddICsgZ2FtbWEwKFdbaSAtIDE1XSkgKyBXW2kgLSAxNl0pIHwgMFxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgNjQ7ICsraikge1xuICAgIHZhciBUMSA9IChoICsgc2lnbWExKGUpICsgY2goZSwgZiwgZykgKyBLW2pdICsgV1tqXSkgfCAwXG4gICAgdmFyIFQyID0gKHNpZ21hMChhKSArIG1haihhLCBiLCBjKSkgfCAwXG5cbiAgICBoID0gZ1xuICAgIGcgPSBmXG4gICAgZiA9IGVcbiAgICBlID0gKGQgKyBUMSkgfCAwXG4gICAgZCA9IGNcbiAgICBjID0gYlxuICAgIGIgPSBhXG4gICAgYSA9IChUMSArIFQyKSB8IDBcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbiAgdGhpcy5fZiA9IChmICsgdGhpcy5fZikgfCAwXG4gIHRoaXMuX2cgPSAoZyArIHRoaXMuX2cpIHwgMFxuICB0aGlzLl9oID0gKGggKyB0aGlzLl9oKSB8IDBcbn1cblxuU2hhMjU2LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMzIpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2gsIDI4KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMjU2XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIsIDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QsXG4gIDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYsIDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMsXG4gIDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgsIDB4NTlmMTExZjEsIDB4YjYwNWQwMTksXG4gIDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIsIDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgsXG4gIDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIsIDB4MTI4MzViMDEsIDB4NDU3MDZmYmUsXG4gIDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMsIDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIsXG4gIDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYsIDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEsXG4gIDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUsIDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQsXG4gIDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIsIDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMsXG4gIDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUsIDB4MjQwY2ExY2MsIDB4NzdhYzljNjUsXG4gIDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUsIDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMsXG4gIDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQsIDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUsXG4gIDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIsIDB4YTgzMWM2NmQsIDB4MmRiNDMyMTAsXG4gIDB4YjAwMzI3YzgsIDB4OThmYjIxM2YsIDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQsXG4gIDB4YzZlMDBiZjMsIDB4M2RhODhmYzIsIDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUsXG4gIDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYsIDB4MTQyOTI5NjcsIDB4MGEwZTZlNzAsXG4gIDB4MjdiNzBhODUsIDB4NDZkMjJmZmMsIDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYsXG4gIDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQsIDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYsXG4gIDB4NjUwYTczNTQsIDB4OGJhZjYzZGUsIDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgsXG4gIDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYsIDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IsXG4gIDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQsIDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEsXG4gIDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEsIDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzAsXG4gIDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgsIDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTAsXG4gIDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEsIDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgsXG4gIDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgsIDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMsXG4gIDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTksIDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgsXG4gIDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMsIDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IsXG4gIDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMsIDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMsXG4gIDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMsIDB4NzhhNTYzNmYsIDB4NDMxNzJmNjAsXG4gIDB4ODRjODc4MTQsIDB4YTFmMGFiNzIsIDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMsXG4gIDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgsIDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTksXG4gIDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUsIDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIsXG4gIDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMsIDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcsXG4gIDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUsIDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgsXG4gIDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEsIDB4MGE2MzdkYzUsIDB4YTJjODk4YTYsXG4gIDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUsIDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIsXG4gIDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQsIDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMsXG4gIDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMsIDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMsXG4gIDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYsIDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEsXG4gIDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMsIDB4NmM0NDE5OGMsIDB4NGE0NzU4MTdcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoMTYwKVxuXG5mdW5jdGlvbiBTaGE1MTIgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCAxMjgsIDExMilcbn1cblxuaW5oZXJpdHMoU2hhNTEyLCBIYXNoKVxuXG5TaGE1MTIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2FoID0gMHg2YTA5ZTY2N1xuICB0aGlzLl9iaCA9IDB4YmI2N2FlODVcbiAgdGhpcy5fY2ggPSAweDNjNmVmMzcyXG4gIHRoaXMuX2RoID0gMHhhNTRmZjUzYVxuICB0aGlzLl9laCA9IDB4NTEwZTUyN2ZcbiAgdGhpcy5fZmggPSAweDliMDU2ODhjXG4gIHRoaXMuX2doID0gMHgxZjgzZDlhYlxuICB0aGlzLl9oaCA9IDB4NWJlMGNkMTlcblxuICB0aGlzLl9hbCA9IDB4ZjNiY2M5MDhcbiAgdGhpcy5fYmwgPSAweDg0Y2FhNzNiXG4gIHRoaXMuX2NsID0gMHhmZTk0ZjgyYlxuICB0aGlzLl9kbCA9IDB4NWYxZDM2ZjFcbiAgdGhpcy5fZWwgPSAweGFkZTY4MmQxXG4gIHRoaXMuX2ZsID0gMHgyYjNlNmMxZlxuICB0aGlzLl9nbCA9IDB4ZmI0MWJkNmJcbiAgdGhpcy5faGwgPSAweDEzN2UyMTc5XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gQ2ggKHgsIHksIHopIHtcbiAgcmV0dXJuIHogXiAoeCAmICh5IF4geikpXG59XG5cbmZ1bmN0aW9uIG1haiAoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSB8ICh6ICYgKHggfCB5KSlcbn1cblxuZnVuY3Rpb24gc2lnbWEwICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDI4IHwgeGwgPDwgNCkgXiAoeGwgPj4+IDIgfCB4IDw8IDMwKSBeICh4bCA+Pj4gNyB8IHggPDwgMjUpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMSAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxNCB8IHhsIDw8IDE4KSBeICh4ID4+PiAxOCB8IHhsIDw8IDE0KSBeICh4bCA+Pj4gOSB8IHggPDwgMjMpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxIHwgeGwgPDwgMzEpIF4gKHggPj4+IDggfCB4bCA8PCAyNCkgXiAoeCA+Pj4gNylcbn1cblxuZnVuY3Rpb24gR2FtbWEwbCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxIHwgeGwgPDwgMzEpIF4gKHggPj4+IDggfCB4bCA8PCAyNCkgXiAoeCA+Pj4gNyB8IHhsIDw8IDI1KVxufVxuXG5mdW5jdGlvbiBHYW1tYTEgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTkgfCB4bCA8PCAxMykgXiAoeGwgPj4+IDI5IHwgeCA8PCAzKSBeICh4ID4+PiA2KVxufVxuXG5mdW5jdGlvbiBHYW1tYTFsICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE5IHwgeGwgPDwgMTMpIF4gKHhsID4+PiAyOSB8IHggPDwgMykgXiAoeCA+Pj4gNiB8IHhsIDw8IDI2KVxufVxuXG5mdW5jdGlvbiBnZXRDYXJyeSAoYSwgYikge1xuICByZXR1cm4gKGEgPj4+IDApIDwgKGIgPj4+IDApID8gMSA6IDBcbn1cblxuU2hhNTEyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGFoID0gdGhpcy5fYWggfCAwXG4gIHZhciBiaCA9IHRoaXMuX2JoIHwgMFxuICB2YXIgY2ggPSB0aGlzLl9jaCB8IDBcbiAgdmFyIGRoID0gdGhpcy5fZGggfCAwXG4gIHZhciBlaCA9IHRoaXMuX2VoIHwgMFxuICB2YXIgZmggPSB0aGlzLl9maCB8IDBcbiAgdmFyIGdoID0gdGhpcy5fZ2ggfCAwXG4gIHZhciBoaCA9IHRoaXMuX2hoIHwgMFxuXG4gIHZhciBhbCA9IHRoaXMuX2FsIHwgMFxuICB2YXIgYmwgPSB0aGlzLl9ibCB8IDBcbiAgdmFyIGNsID0gdGhpcy5fY2wgfCAwXG4gIHZhciBkbCA9IHRoaXMuX2RsIHwgMFxuICB2YXIgZWwgPSB0aGlzLl9lbCB8IDBcbiAgdmFyIGZsID0gdGhpcy5fZmwgfCAwXG4gIHZhciBnbCA9IHRoaXMuX2dsIHwgMFxuICB2YXIgaGwgPSB0aGlzLl9obCB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpICs9IDIpIHtcbiAgICBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgICBXW2kgKyAxXSA9IE0ucmVhZEludDMyQkUoaSAqIDQgKyA0KVxuICB9XG4gIGZvciAoOyBpIDwgMTYwOyBpICs9IDIpIHtcbiAgICB2YXIgeGggPSBXW2kgLSAxNSAqIDJdXG4gICAgdmFyIHhsID0gV1tpIC0gMTUgKiAyICsgMV1cbiAgICB2YXIgZ2FtbWEwID0gR2FtbWEwKHhoLCB4bClcbiAgICB2YXIgZ2FtbWEwbCA9IEdhbW1hMGwoeGwsIHhoKVxuXG4gICAgeGggPSBXW2kgLSAyICogMl1cbiAgICB4bCA9IFdbaSAtIDIgKiAyICsgMV1cbiAgICB2YXIgZ2FtbWExID0gR2FtbWExKHhoLCB4bClcbiAgICB2YXIgZ2FtbWExbCA9IEdhbW1hMWwoeGwsIHhoKVxuXG4gICAgLy8gV1tpXSA9IGdhbW1hMCArIFdbaSAtIDddICsgZ2FtbWExICsgV1tpIC0gMTZdXG4gICAgdmFyIFdpN2ggPSBXW2kgLSA3ICogMl1cbiAgICB2YXIgV2k3bCA9IFdbaSAtIDcgKiAyICsgMV1cblxuICAgIHZhciBXaTE2aCA9IFdbaSAtIDE2ICogMl1cbiAgICB2YXIgV2kxNmwgPSBXW2kgLSAxNiAqIDIgKyAxXVxuXG4gICAgdmFyIFdpbCA9IChnYW1tYTBsICsgV2k3bCkgfCAwXG4gICAgdmFyIFdpaCA9IChnYW1tYTAgKyBXaTdoICsgZ2V0Q2FycnkoV2lsLCBnYW1tYTBsKSkgfCAwXG4gICAgV2lsID0gKFdpbCArIGdhbW1hMWwpIHwgMFxuICAgIFdpaCA9IChXaWggKyBnYW1tYTEgKyBnZXRDYXJyeShXaWwsIGdhbW1hMWwpKSB8IDBcbiAgICBXaWwgPSAoV2lsICsgV2kxNmwpIHwgMFxuICAgIFdpaCA9IChXaWggKyBXaTE2aCArIGdldENhcnJ5KFdpbCwgV2kxNmwpKSB8IDBcblxuICAgIFdbaV0gPSBXaWhcbiAgICBXW2kgKyAxXSA9IFdpbFxuICB9XG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjA7IGogKz0gMikge1xuICAgIFdpaCA9IFdbal1cbiAgICBXaWwgPSBXW2ogKyAxXVxuXG4gICAgdmFyIG1hamggPSBtYWooYWgsIGJoLCBjaClcbiAgICB2YXIgbWFqbCA9IG1haihhbCwgYmwsIGNsKVxuXG4gICAgdmFyIHNpZ21hMGggPSBzaWdtYTAoYWgsIGFsKVxuICAgIHZhciBzaWdtYTBsID0gc2lnbWEwKGFsLCBhaClcbiAgICB2YXIgc2lnbWExaCA9IHNpZ21hMShlaCwgZWwpXG4gICAgdmFyIHNpZ21hMWwgPSBzaWdtYTEoZWwsIGVoKVxuXG4gICAgLy8gdDEgPSBoICsgc2lnbWExICsgY2ggKyBLW2pdICsgV1tqXVxuICAgIHZhciBLaWggPSBLW2pdXG4gICAgdmFyIEtpbCA9IEtbaiArIDFdXG5cbiAgICB2YXIgY2hoID0gQ2goZWgsIGZoLCBnaClcbiAgICB2YXIgY2hsID0gQ2goZWwsIGZsLCBnbClcblxuICAgIHZhciB0MWwgPSAoaGwgKyBzaWdtYTFsKSB8IDBcbiAgICB2YXIgdDFoID0gKGhoICsgc2lnbWExaCArIGdldENhcnJ5KHQxbCwgaGwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgY2hsKSB8IDBcbiAgICB0MWggPSAodDFoICsgY2hoICsgZ2V0Q2FycnkodDFsLCBjaGwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgS2lsKSB8IDBcbiAgICB0MWggPSAodDFoICsgS2loICsgZ2V0Q2FycnkodDFsLCBLaWwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgV2lsKSB8IDBcbiAgICB0MWggPSAodDFoICsgV2loICsgZ2V0Q2FycnkodDFsLCBXaWwpKSB8IDBcblxuICAgIC8vIHQyID0gc2lnbWEwICsgbWFqXG4gICAgdmFyIHQybCA9IChzaWdtYTBsICsgbWFqbCkgfCAwXG4gICAgdmFyIHQyaCA9IChzaWdtYTBoICsgbWFqaCArIGdldENhcnJ5KHQybCwgc2lnbWEwbCkpIHwgMFxuXG4gICAgaGggPSBnaFxuICAgIGhsID0gZ2xcbiAgICBnaCA9IGZoXG4gICAgZ2wgPSBmbFxuICAgIGZoID0gZWhcbiAgICBmbCA9IGVsXG4gICAgZWwgPSAoZGwgKyB0MWwpIHwgMFxuICAgIGVoID0gKGRoICsgdDFoICsgZ2V0Q2FycnkoZWwsIGRsKSkgfCAwXG4gICAgZGggPSBjaFxuICAgIGRsID0gY2xcbiAgICBjaCA9IGJoXG4gICAgY2wgPSBibFxuICAgIGJoID0gYWhcbiAgICBibCA9IGFsXG4gICAgYWwgPSAodDFsICsgdDJsKSB8IDBcbiAgICBhaCA9ICh0MWggKyB0MmggKyBnZXRDYXJyeShhbCwgdDFsKSkgfCAwXG4gIH1cblxuICB0aGlzLl9hbCA9ICh0aGlzLl9hbCArIGFsKSB8IDBcbiAgdGhpcy5fYmwgPSAodGhpcy5fYmwgKyBibCkgfCAwXG4gIHRoaXMuX2NsID0gKHRoaXMuX2NsICsgY2wpIHwgMFxuICB0aGlzLl9kbCA9ICh0aGlzLl9kbCArIGRsKSB8IDBcbiAgdGhpcy5fZWwgPSAodGhpcy5fZWwgKyBlbCkgfCAwXG4gIHRoaXMuX2ZsID0gKHRoaXMuX2ZsICsgZmwpIHwgMFxuICB0aGlzLl9nbCA9ICh0aGlzLl9nbCArIGdsKSB8IDBcbiAgdGhpcy5faGwgPSAodGhpcy5faGwgKyBobCkgfCAwXG5cbiAgdGhpcy5fYWggPSAodGhpcy5fYWggKyBhaCArIGdldENhcnJ5KHRoaXMuX2FsLCBhbCkpIHwgMFxuICB0aGlzLl9iaCA9ICh0aGlzLl9iaCArIGJoICsgZ2V0Q2FycnkodGhpcy5fYmwsIGJsKSkgfCAwXG4gIHRoaXMuX2NoID0gKHRoaXMuX2NoICsgY2ggKyBnZXRDYXJyeSh0aGlzLl9jbCwgY2wpKSB8IDBcbiAgdGhpcy5fZGggPSAodGhpcy5fZGggKyBkaCArIGdldENhcnJ5KHRoaXMuX2RsLCBkbCkpIHwgMFxuICB0aGlzLl9laCA9ICh0aGlzLl9laCArIGVoICsgZ2V0Q2FycnkodGhpcy5fZWwsIGVsKSkgfCAwXG4gIHRoaXMuX2ZoID0gKHRoaXMuX2ZoICsgZmggKyBnZXRDYXJyeSh0aGlzLl9mbCwgZmwpKSB8IDBcbiAgdGhpcy5fZ2ggPSAodGhpcy5fZ2ggKyBnaCArIGdldENhcnJ5KHRoaXMuX2dsLCBnbCkpIHwgMFxuICB0aGlzLl9oaCA9ICh0aGlzLl9oaCArIGhoICsgZ2V0Q2FycnkodGhpcy5faGwsIGhsKSkgfCAwXG59XG5cblNoYTUxMi5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDY0KVxuXG4gIGZ1bmN0aW9uIHdyaXRlSW50NjRCRSAoaCwgbCwgb2Zmc2V0KSB7XG4gICAgSC53cml0ZUludDMyQkUoaCwgb2Zmc2V0KVxuICAgIEgud3JpdGVJbnQzMkJFKGwsIG9mZnNldCArIDQpXG4gIH1cblxuICB3cml0ZUludDY0QkUodGhpcy5fYWgsIHRoaXMuX2FsLCAwKVxuICB3cml0ZUludDY0QkUodGhpcy5fYmgsIHRoaXMuX2JsLCA4KVxuICB3cml0ZUludDY0QkUodGhpcy5fY2gsIHRoaXMuX2NsLCAxNilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2RoLCB0aGlzLl9kbCwgMjQpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9laCwgdGhpcy5fZWwsIDMyKVxuICB3cml0ZUludDY0QkUodGhpcy5fZmgsIHRoaXMuX2ZsLCA0MClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2doLCB0aGlzLl9nbCwgNDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9oaCwgdGhpcy5faGwsIDU2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhNTEyXG4iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBMZWdhY3kgPSByZXF1aXJlKCcuL2xlZ2FjeScpXG52YXIgQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIG1kNSA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoL21kNScpXG52YXIgUklQRU1EMTYwID0gcmVxdWlyZSgncmlwZW1kMTYwJylcblxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG5cbnZhciBaRVJPUyA9IEJ1ZmZlci5hbGxvYygxMjgpXG5cbmZ1bmN0aW9uIEhtYWMgKGFsZywga2V5KSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAga2V5ID0gQnVmZmVyLmZyb20oa2V5KVxuICB9XG5cbiAgdmFyIGJsb2Nrc2l6ZSA9IChhbGcgPT09ICdzaGE1MTInIHx8IGFsZyA9PT0gJ3NoYTM4NCcpID8gMTI4IDogNjRcblxuICB0aGlzLl9hbGcgPSBhbGdcbiAgdGhpcy5fa2V5ID0ga2V5XG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAgdmFyIGhhc2ggPSBhbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hhKGFsZylcbiAgICBrZXkgPSBoYXNoLnVwZGF0ZShrZXkpLmRpZ2VzdCgpXG4gIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwgWkVST1NdLCBibG9ja3NpemUpXG4gIH1cblxuICB2YXIgaXBhZCA9IHRoaXMuX2lwYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuICB2YXIgb3BhZCA9IHRoaXMuX29wYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tzaXplOyBpKyspIHtcbiAgICBpcGFkW2ldID0ga2V5W2ldIF4gMHgzNlxuICAgIG9wYWRbaV0gPSBrZXlbaV0gXiAweDVDXG4gIH1cbiAgdGhpcy5faGFzaCA9IGFsZyA9PT0gJ3JtZDE2MCcgPyBuZXcgUklQRU1EMTYwKCkgOiBzaGEoYWxnKVxuICB0aGlzLl9oYXNoLnVwZGF0ZShpcGFkKVxufVxuXG5pbmhlcml0cyhIbWFjLCBCYXNlKVxuXG5IbWFjLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbn1cblxuSG1hYy5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaCA9IHRoaXMuX2hhc2guZGlnZXN0KClcbiAgdmFyIGhhc2ggPSB0aGlzLl9hbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hhKHRoaXMuX2FsZylcbiAgcmV0dXJuIGhhc2gudXBkYXRlKHRoaXMuX29wYWQpLnVwZGF0ZShoKS5kaWdlc3QoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUhtYWMgKGFsZywga2V5KSB7XG4gIGFsZyA9IGFsZy50b0xvd2VyQ2FzZSgpXG4gIGlmIChhbGcgPT09ICdybWQxNjAnIHx8IGFsZyA9PT0gJ3JpcGVtZDE2MCcpIHtcbiAgICByZXR1cm4gbmV3IEhtYWMoJ3JtZDE2MCcsIGtleSlcbiAgfVxuICBpZiAoYWxnID09PSAnbWQ1Jykge1xuICAgIHJldHVybiBuZXcgTGVnYWN5KG1kNSwga2V5KVxuICB9XG4gIHJldHVybiBuZXcgSG1hYyhhbGcsIGtleSlcbn1cbiIsInZhciBNRDUgPSByZXF1aXJlKCdtZDUuanMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgcmV0dXJuIG5ldyBNRDUoKS51cGRhdGUoYnVmZmVyKS5kaWdlc3QoKVxufVxuIiwiZXhwb3J0cy5wYmtkZjIgPSByZXF1aXJlKCcuL2xpYi9hc3luYycpXG5leHBvcnRzLnBia2RmMlN5bmMgPSByZXF1aXJlKCcuL2xpYi9zeW5jJylcbiIsInZhciBNQVhfQUxMT0MgPSBNYXRoLnBvdygyLCAzMCkgLSAxIC8vIGRlZmF1bHQgaW4gaW9qc1xuXG5mdW5jdGlvbiBjaGVja0J1ZmZlciAoYnVmLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgYnVmICE9PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKG5hbWUgKyAnIG11c3QgYmUgYSBidWZmZXIgb3Igc3RyaW5nJylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuKSB7XG4gIGNoZWNrQnVmZmVyKHBhc3N3b3JkLCAnUGFzc3dvcmQnKVxuICBjaGVja0J1ZmZlcihzYWx0LCAnU2FsdCcpXG5cbiAgaWYgKHR5cGVvZiBpdGVyYXRpb25zICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0l0ZXJhdGlvbnMgbm90IGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChpdGVyYXRpb25zIDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBpdGVyYXRpb25zJylcbiAgfVxuXG4gIGlmICh0eXBlb2Yga2V5bGVuICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0tleSBsZW5ndGggbm90IGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChrZXlsZW4gPCAwIHx8IGtleWxlbiA+IE1BWF9BTExPQyB8fCBrZXlsZW4gIT09IGtleWxlbikgeyAvKiBlc2xpbnQgbm8tc2VsZi1jb21wYXJlOiAwICovXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFkIGtleSBsZW5ndGgnKVxuICB9XG59XG4iLCJ2YXIgZGVmYXVsdEVuY29kaW5nXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKHByb2Nlc3MuYnJvd3Nlcikge1xuICBkZWZhdWx0RW5jb2RpbmcgPSAndXRmLTgnXG59IGVsc2Uge1xuICB2YXIgcFZlcnNpb25NYWpvciA9IHBhcnNlSW50KHByb2Nlc3MudmVyc2lvbi5zcGxpdCgnLicpWzBdLnNsaWNlKDEpLCAxMClcblxuICBkZWZhdWx0RW5jb2RpbmcgPSBwVmVyc2lvbk1ham9yID49IDYgPyAndXRmLTgnIDogJ2JpbmFyeSdcbn1cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdEVuY29kaW5nXG4iLCJ2YXIgbWQ1ID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gvbWQ1JylcbnZhciBSSVBFTUQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKVxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG5cbnZhciBjaGVja1BhcmFtZXRlcnMgPSByZXF1aXJlKCcuL3ByZWNvbmRpdGlvbicpXG52YXIgZGVmYXVsdEVuY29kaW5nID0gcmVxdWlyZSgnLi9kZWZhdWx0LWVuY29kaW5nJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFpFUk9TID0gQnVmZmVyLmFsbG9jKDEyOClcbnZhciBzaXplcyA9IHtcbiAgbWQ1OiAxNixcbiAgc2hhMTogMjAsXG4gIHNoYTIyNDogMjgsXG4gIHNoYTI1NjogMzIsXG4gIHNoYTM4NDogNDgsXG4gIHNoYTUxMjogNjQsXG4gIHJtZDE2MDogMjAsXG4gIHJpcGVtZDE2MDogMjBcbn1cblxuZnVuY3Rpb24gSG1hYyAoYWxnLCBrZXksIHNhbHRMZW4pIHtcbiAgdmFyIGhhc2ggPSBnZXREaWdlc3QoYWxnKVxuICB2YXIgYmxvY2tzaXplID0gKGFsZyA9PT0gJ3NoYTUxMicgfHwgYWxnID09PSAnc2hhMzg0JykgPyAxMjggOiA2NFxuXG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAga2V5ID0gaGFzaChrZXkpXG4gIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwgWkVST1NdLCBibG9ja3NpemUpXG4gIH1cblxuICB2YXIgaXBhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUgKyBzaXplc1thbGddKVxuICB2YXIgb3BhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUgKyBzaXplc1thbGddKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzZcbiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1Q1xuICB9XG5cbiAgdmFyIGlwYWQxID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSArIHNhbHRMZW4gKyA0KVxuICBpcGFkLmNvcHkoaXBhZDEsIDAsIDAsIGJsb2Nrc2l6ZSlcbiAgdGhpcy5pcGFkMSA9IGlwYWQxXG4gIHRoaXMuaXBhZDIgPSBpcGFkXG4gIHRoaXMub3BhZCA9IG9wYWRcbiAgdGhpcy5hbGcgPSBhbGdcbiAgdGhpcy5ibG9ja3NpemUgPSBibG9ja3NpemVcbiAgdGhpcy5oYXNoID0gaGFzaFxuICB0aGlzLnNpemUgPSBzaXplc1thbGddXG59XG5cbkhtYWMucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIChkYXRhLCBpcGFkKSB7XG4gIGRhdGEuY29weShpcGFkLCB0aGlzLmJsb2Nrc2l6ZSlcbiAgdmFyIGggPSB0aGlzLmhhc2goaXBhZClcbiAgaC5jb3B5KHRoaXMub3BhZCwgdGhpcy5ibG9ja3NpemUpXG4gIHJldHVybiB0aGlzLmhhc2godGhpcy5vcGFkKVxufVxuXG5mdW5jdGlvbiBnZXREaWdlc3QgKGFsZykge1xuICBmdW5jdGlvbiBzaGFGdW5jIChkYXRhKSB7XG4gICAgcmV0dXJuIHNoYShhbGcpLnVwZGF0ZShkYXRhKS5kaWdlc3QoKVxuICB9XG4gIGZ1bmN0aW9uIHJtZDE2MEZ1bmMgKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IFJJUEVNRDE2MCgpLnVwZGF0ZShkYXRhKS5kaWdlc3QoKVxuICB9XG5cbiAgaWYgKGFsZyA9PT0gJ3JtZDE2MCcgfHwgYWxnID09PSAncmlwZW1kMTYwJykgcmV0dXJuIHJtZDE2MEZ1bmNcbiAgaWYgKGFsZyA9PT0gJ21kNScpIHJldHVybiBtZDVcbiAgcmV0dXJuIHNoYUZ1bmNcbn1cblxuZnVuY3Rpb24gcGJrZGYyIChwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBkaWdlc3QpIHtcbiAgY2hlY2tQYXJhbWV0ZXJzKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4pXG5cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3dvcmQpKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkLCBkZWZhdWx0RW5jb2RpbmcpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHNhbHQpKSBzYWx0ID0gQnVmZmVyLmZyb20oc2FsdCwgZGVmYXVsdEVuY29kaW5nKVxuXG4gIGRpZ2VzdCA9IGRpZ2VzdCB8fCAnc2hhMSdcblxuICB2YXIgaG1hYyA9IG5ldyBIbWFjKGRpZ2VzdCwgcGFzc3dvcmQsIHNhbHQubGVuZ3RoKVxuXG4gIHZhciBESyA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShrZXlsZW4pXG4gIHZhciBibG9jazEgPSBCdWZmZXIuYWxsb2NVbnNhZmUoc2FsdC5sZW5ndGggKyA0KVxuICBzYWx0LmNvcHkoYmxvY2sxLCAwLCAwLCBzYWx0Lmxlbmd0aClcblxuICB2YXIgZGVzdFBvcyA9IDBcbiAgdmFyIGhMZW4gPSBzaXplc1tkaWdlc3RdXG4gIHZhciBsID0gTWF0aC5jZWlsKGtleWxlbiAvIGhMZW4pXG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gbDsgaSsrKSB7XG4gICAgYmxvY2sxLndyaXRlVUludDMyQkUoaSwgc2FsdC5sZW5ndGgpXG5cbiAgICB2YXIgVCA9IGhtYWMucnVuKGJsb2NrMSwgaG1hYy5pcGFkMSlcbiAgICB2YXIgVSA9IFRcblxuICAgIGZvciAodmFyIGogPSAxOyBqIDwgaXRlcmF0aW9uczsgaisrKSB7XG4gICAgICBVID0gaG1hYy5ydW4oVSwgaG1hYy5pcGFkMilcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaExlbjsgaysrKSBUW2tdIF49IFVba11cbiAgICB9XG5cbiAgICBULmNvcHkoREssIGRlc3RQb3MpXG4gICAgZGVzdFBvcyArPSBoTGVuXG4gIH1cblxuICByZXR1cm4gREtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYmtkZjJcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUoYnl0ZXMsIG9mZikge1xuICB2YXIgcmVzID0gIChieXRlc1swICsgb2ZmXSA8PCAyNCkgfFxuICAgICAgICAgICAgIChieXRlc1sxICsgb2ZmXSA8PCAxNikgfFxuICAgICAgICAgICAgIChieXRlc1syICsgb2ZmXSA8PCA4KSB8XG4gICAgICAgICAgICAgYnl0ZXNbMyArIG9mZl07XG4gIHJldHVybiByZXMgPj4+IDA7XG59O1xuXG5leHBvcnRzLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFKGJ5dGVzLCB2YWx1ZSwgb2ZmKSB7XG4gIGJ5dGVzWzAgKyBvZmZdID0gdmFsdWUgPj4+IDI0O1xuICBieXRlc1sxICsgb2ZmXSA9ICh2YWx1ZSA+Pj4gMTYpICYgMHhmZjtcbiAgYnl0ZXNbMiArIG9mZl0gPSAodmFsdWUgPj4+IDgpICYgMHhmZjtcbiAgYnl0ZXNbMyArIG9mZl0gPSB2YWx1ZSAmIDB4ZmY7XG59O1xuXG5leHBvcnRzLmlwID0gZnVuY3Rpb24gaXAoaW5MLCBpblIsIG91dCwgb2ZmKSB7XG4gIHZhciBvdXRMID0gMDtcbiAgdmFyIG91dFIgPSAwO1xuXG4gIGZvciAodmFyIGkgPSA2OyBpID49IDA7IGkgLT0gMikge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpblIgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluTCA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSA2OyBpID49IDA7IGkgLT0gMikge1xuICAgIGZvciAodmFyIGogPSAxOyBqIDw9IDI1OyBqICs9IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpblIgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gICAgZm9yICh2YXIgaiA9IDE7IGogPD0gMjU7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluTCA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuXG4gIG91dFtvZmYgKyAwXSA9IG91dEwgPj4+IDA7XG4gIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7XG59O1xuXG5leHBvcnRzLnJpcCA9IGZ1bmN0aW9uIHJpcChpbkwsIGluUiwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMjQ7IGogPj0gMDsgaiAtPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5SID4+PiAoaiArIGkpKSAmIDE7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG4gIGZvciAodmFyIGkgPSA0OyBpIDwgODsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDI0OyBqID49IDA7IGogLT0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluTCA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuXG4gIG91dFtvZmYgKyAwXSA9IG91dEwgPj4+IDA7XG4gIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7XG59O1xuXG5leHBvcnRzLnBjMSA9IGZ1bmN0aW9uIHBjMShpbkwsIGluUiwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgLy8gNywgMTUsIDIzLCAzMSwgMzksIDQ3LCA1NSwgNjNcbiAgLy8gNiwgMTQsIDIyLCAzMCwgMzksIDQ3LCA1NSwgNjNcbiAgLy8gNSwgMTMsIDIxLCAyOSwgMzksIDQ3LCA1NSwgNjNcbiAgLy8gNCwgMTIsIDIwLCAyOFxuICBmb3IgKHZhciBpID0gNzsgaSA+PSA1OyBpLS0pIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5SID4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluTCA+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG4gIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICBvdXRMIDw8PSAxO1xuICAgIG91dEwgfD0gKGluUiA+PiAoaiArIGkpKSAmIDE7XG4gIH1cblxuICAvLyAxLCA5LCAxNywgMjUsIDMzLCA0MSwgNDksIDU3XG4gIC8vIDIsIDEwLCAxOCwgMjYsIDM0LCA0MiwgNTAsIDU4XG4gIC8vIDMsIDExLCAxOSwgMjcsIDM1LCA0MywgNTEsIDU5XG4gIC8vIDM2LCA0NCwgNTIsIDYwXG4gIGZvciAodmFyIGkgPSAxOyBpIDw9IDM7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpblIgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5MID4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgIG91dFIgPDw9IDE7XG4gICAgb3V0UiB8PSAoaW5MID4+IChqICsgaSkpICYgMTtcbiAgfVxuXG4gIG91dFtvZmYgKyAwXSA9IG91dEwgPj4+IDA7XG4gIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7XG59O1xuXG5leHBvcnRzLnIyOHNobCA9IGZ1bmN0aW9uIHIyOHNobChudW0sIHNoaWZ0KSB7XG4gIHJldHVybiAoKG51bSA8PCBzaGlmdCkgJiAweGZmZmZmZmYpIHwgKG51bSA+Pj4gKDI4IC0gc2hpZnQpKTtcbn07XG5cbnZhciBwYzJ0YWJsZSA9IFtcbiAgLy8gaW5MID0+IG91dExcbiAgMTQsIDExLCAxNywgNCwgMjcsIDIzLCAyNSwgMCxcbiAgMTMsIDIyLCA3LCAxOCwgNSwgOSwgMTYsIDI0LFxuICAyLCAyMCwgMTIsIDIxLCAxLCA4LCAxNSwgMjYsXG5cbiAgLy8gaW5SID0+IG91dFJcbiAgMTUsIDQsIDI1LCAxOSwgOSwgMSwgMjYsIDE2LFxuICA1LCAxMSwgMjMsIDgsIDEyLCA3LCAxNywgMCxcbiAgMjIsIDMsIDEwLCAxNCwgNiwgMjAsIDI3LCAyNFxuXTtcblxuZXhwb3J0cy5wYzIgPSBmdW5jdGlvbiBwYzIoaW5MLCBpblIsIG91dCwgb2ZmKSB7XG4gIHZhciBvdXRMID0gMDtcbiAgdmFyIG91dFIgPSAwO1xuXG4gIHZhciBsZW4gPSBwYzJ0YWJsZS5sZW5ndGggPj4+IDE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBvdXRMIDw8PSAxO1xuICAgIG91dEwgfD0gKGluTCA+Pj4gcGMydGFibGVbaV0pICYgMHgxO1xuICB9XG4gIGZvciAodmFyIGkgPSBsZW47IGkgPCBwYzJ0YWJsZS5sZW5ndGg7IGkrKykge1xuICAgIG91dFIgPDw9IDE7XG4gICAgb3V0UiB8PSAoaW5SID4+PiBwYzJ0YWJsZVtpXSkgJiAweDE7XG4gIH1cblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxuZXhwb3J0cy5leHBhbmQgPSBmdW5jdGlvbiBleHBhbmQociwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgb3V0TCA9ICgociAmIDEpIDw8IDUpIHwgKHIgPj4+IDI3KTtcbiAgZm9yICh2YXIgaSA9IDIzOyBpID49IDE1OyBpIC09IDQpIHtcbiAgICBvdXRMIDw8PSA2O1xuICAgIG91dEwgfD0gKHIgPj4+IGkpICYgMHgzZjtcbiAgfVxuICBmb3IgKHZhciBpID0gMTE7IGkgPj0gMzsgaSAtPSA0KSB7XG4gICAgb3V0UiB8PSAociA+Pj4gaSkgJiAweDNmO1xuICAgIG91dFIgPDw9IDY7XG4gIH1cbiAgb3V0UiB8PSAoKHIgJiAweDFmKSA8PCAxKSB8IChyID4+PiAzMSk7XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbnZhciBzVGFibGUgPSBbXG4gIDE0LCAwLCA0LCAxNSwgMTMsIDcsIDEsIDQsIDIsIDE0LCAxNSwgMiwgMTEsIDEzLCA4LCAxLFxuICAzLCAxMCwgMTAsIDYsIDYsIDEyLCAxMiwgMTEsIDUsIDksIDksIDUsIDAsIDMsIDcsIDgsXG4gIDQsIDE1LCAxLCAxMiwgMTQsIDgsIDgsIDIsIDEzLCA0LCA2LCA5LCAyLCAxLCAxMSwgNyxcbiAgMTUsIDUsIDEyLCAxMSwgOSwgMywgNywgMTQsIDMsIDEwLCAxMCwgMCwgNSwgNiwgMCwgMTMsXG5cbiAgMTUsIDMsIDEsIDEzLCA4LCA0LCAxNCwgNywgNiwgMTUsIDExLCAyLCAzLCA4LCA0LCAxNCxcbiAgOSwgMTIsIDcsIDAsIDIsIDEsIDEzLCAxMCwgMTIsIDYsIDAsIDksIDUsIDExLCAxMCwgNSxcbiAgMCwgMTMsIDE0LCA4LCA3LCAxMCwgMTEsIDEsIDEwLCAzLCA0LCAxNSwgMTMsIDQsIDEsIDIsXG4gIDUsIDExLCA4LCA2LCAxMiwgNywgNiwgMTIsIDksIDAsIDMsIDUsIDIsIDE0LCAxNSwgOSxcblxuICAxMCwgMTMsIDAsIDcsIDksIDAsIDE0LCA5LCA2LCAzLCAzLCA0LCAxNSwgNiwgNSwgMTAsXG4gIDEsIDIsIDEzLCA4LCAxMiwgNSwgNywgMTQsIDExLCAxMiwgNCwgMTEsIDIsIDE1LCA4LCAxLFxuICAxMywgMSwgNiwgMTAsIDQsIDEzLCA5LCAwLCA4LCA2LCAxNSwgOSwgMywgOCwgMCwgNyxcbiAgMTEsIDQsIDEsIDE1LCAyLCAxNCwgMTIsIDMsIDUsIDExLCAxMCwgNSwgMTQsIDIsIDcsIDEyLFxuXG4gIDcsIDEzLCAxMywgOCwgMTQsIDExLCAzLCA1LCAwLCA2LCA2LCAxNSwgOSwgMCwgMTAsIDMsXG4gIDEsIDQsIDIsIDcsIDgsIDIsIDUsIDEyLCAxMSwgMSwgMTIsIDEwLCA0LCAxNCwgMTUsIDksXG4gIDEwLCAzLCA2LCAxNSwgOSwgMCwgMCwgNiwgMTIsIDEwLCAxMSwgMSwgNywgMTMsIDEzLCA4LFxuICAxNSwgOSwgMSwgNCwgMywgNSwgMTQsIDExLCA1LCAxMiwgMiwgNywgOCwgMiwgNCwgMTQsXG5cbiAgMiwgMTQsIDEyLCAxMSwgNCwgMiwgMSwgMTIsIDcsIDQsIDEwLCA3LCAxMSwgMTMsIDYsIDEsXG4gIDgsIDUsIDUsIDAsIDMsIDE1LCAxNSwgMTAsIDEzLCAzLCAwLCA5LCAxNCwgOCwgOSwgNixcbiAgNCwgMTEsIDIsIDgsIDEsIDEyLCAxMSwgNywgMTAsIDEsIDEzLCAxNCwgNywgMiwgOCwgMTMsXG4gIDE1LCA2LCA5LCAxNSwgMTIsIDAsIDUsIDksIDYsIDEwLCAzLCA0LCAwLCA1LCAxNCwgMyxcblxuICAxMiwgMTAsIDEsIDE1LCAxMCwgNCwgMTUsIDIsIDksIDcsIDIsIDEyLCA2LCA5LCA4LCA1LFxuICAwLCA2LCAxMywgMSwgMywgMTMsIDQsIDE0LCAxNCwgMCwgNywgMTEsIDUsIDMsIDExLCA4LFxuICA5LCA0LCAxNCwgMywgMTUsIDIsIDUsIDEyLCAyLCA5LCA4LCA1LCAxMiwgMTUsIDMsIDEwLFxuICA3LCAxMSwgMCwgMTQsIDQsIDEsIDEwLCA3LCAxLCA2LCAxMywgMCwgMTEsIDgsIDYsIDEzLFxuXG4gIDQsIDEzLCAxMSwgMCwgMiwgMTEsIDE0LCA3LCAxNSwgNCwgMCwgOSwgOCwgMSwgMTMsIDEwLFxuICAzLCAxNCwgMTIsIDMsIDksIDUsIDcsIDEyLCA1LCAyLCAxMCwgMTUsIDYsIDgsIDEsIDYsXG4gIDEsIDYsIDQsIDExLCAxMSwgMTMsIDEzLCA4LCAxMiwgMSwgMywgNCwgNywgMTAsIDE0LCA3LFxuICAxMCwgOSwgMTUsIDUsIDYsIDAsIDgsIDE1LCAwLCAxNCwgNSwgMiwgOSwgMywgMiwgMTIsXG5cbiAgMTMsIDEsIDIsIDE1LCA4LCAxMywgNCwgOCwgNiwgMTAsIDE1LCAzLCAxMSwgNywgMSwgNCxcbiAgMTAsIDEyLCA5LCA1LCAzLCA2LCAxNCwgMTEsIDUsIDAsIDAsIDE0LCAxMiwgOSwgNywgMixcbiAgNywgMiwgMTEsIDEsIDQsIDE0LCAxLCA3LCA5LCA0LCAxMiwgMTAsIDE0LCA4LCAyLCAxMyxcbiAgMCwgMTUsIDYsIDEyLCAxMCwgOSwgMTMsIDAsIDE1LCAzLCAzLCA1LCA1LCA2LCA4LCAxMVxuXTtcblxuZXhwb3J0cy5zdWJzdGl0dXRlID0gZnVuY3Rpb24gc3Vic3RpdHV0ZShpbkwsIGluUikge1xuICB2YXIgb3V0ID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICB2YXIgYiA9IChpbkwgPj4+ICgxOCAtIGkgKiA2KSkgJiAweDNmO1xuICAgIHZhciBzYiA9IHNUYWJsZVtpICogMHg0MCArIGJdO1xuXG4gICAgb3V0IDw8PSA0O1xuICAgIG91dCB8PSBzYjtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIHZhciBiID0gKGluUiA+Pj4gKDE4IC0gaSAqIDYpKSAmIDB4M2Y7XG4gICAgdmFyIHNiID0gc1RhYmxlWzQgKiAweDQwICsgaSAqIDB4NDAgKyBiXTtcblxuICAgIG91dCA8PD0gNDtcbiAgICBvdXQgfD0gc2I7XG4gIH1cbiAgcmV0dXJuIG91dCA+Pj4gMDtcbn07XG5cbnZhciBwZXJtdXRlVGFibGUgPSBbXG4gIDE2LCAyNSwgMTIsIDExLCAzLCAyMCwgNCwgMTUsIDMxLCAxNywgOSwgNiwgMjcsIDE0LCAxLCAyMixcbiAgMzAsIDI0LCA4LCAxOCwgMCwgNSwgMjksIDIzLCAxMywgMTksIDIsIDI2LCAxMCwgMjEsIDI4LCA3XG5dO1xuXG5leHBvcnRzLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlKG51bSkge1xuICB2YXIgb3V0ID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwZXJtdXRlVGFibGUubGVuZ3RoOyBpKyspIHtcbiAgICBvdXQgPDw9IDE7XG4gICAgb3V0IHw9IChudW0gPj4+IHBlcm11dGVUYWJsZVtpXSkgJiAweDE7XG4gIH1cbiAgcmV0dXJuIG91dCA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucGFkU3BsaXQgPSBmdW5jdGlvbiBwYWRTcGxpdChudW0sIHNpemUsIGdyb3VwKSB7XG4gIHZhciBzdHIgPSBudW0udG9TdHJpbmcoMik7XG4gIHdoaWxlIChzdHIubGVuZ3RoIDwgc2l6ZSlcbiAgICBzdHIgPSAnMCcgKyBzdHI7XG5cbiAgdmFyIG91dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7IGkgKz0gZ3JvdXApXG4gICAgb3V0LnB1c2goc3RyLnNsaWNlKGksIGkgKyBncm91cCkpO1xuICByZXR1cm4gb3V0LmpvaW4oJyAnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgQ2lwaGVyID0gcmVxdWlyZSgnLi9jaXBoZXInKTtcblxuZnVuY3Rpb24gREVTU3RhdGUoKSB7XG4gIHRoaXMudG1wID0gbmV3IEFycmF5KDIpO1xuICB0aGlzLmtleXMgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBERVMob3B0aW9ucykge1xuICBDaXBoZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB2YXIgc3RhdGUgPSBuZXcgREVTU3RhdGUoKTtcbiAgdGhpcy5fZGVzU3RhdGUgPSBzdGF0ZTtcblxuICB0aGlzLmRlcml2ZUtleXMoc3RhdGUsIG9wdGlvbnMua2V5KTtcbn1cbmluaGVyaXRzKERFUywgQ2lwaGVyKTtcbm1vZHVsZS5leHBvcnRzID0gREVTO1xuXG5ERVMuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBERVMob3B0aW9ucyk7XG59O1xuXG52YXIgc2hpZnRUYWJsZSA9IFtcbiAgMSwgMSwgMiwgMiwgMiwgMiwgMiwgMixcbiAgMSwgMiwgMiwgMiwgMiwgMiwgMiwgMVxuXTtcblxuREVTLnByb3RvdHlwZS5kZXJpdmVLZXlzID0gZnVuY3Rpb24gZGVyaXZlS2V5cyhzdGF0ZSwga2V5KSB7XG4gIHN0YXRlLmtleXMgPSBuZXcgQXJyYXkoMTYgKiAyKTtcblxuICBhc3NlcnQuZXF1YWwoa2V5Lmxlbmd0aCwgdGhpcy5ibG9ja1NpemUsICdJbnZhbGlkIGtleSBsZW5ndGgnKTtcblxuICB2YXIga0wgPSB1dGlscy5yZWFkVUludDMyQkUoa2V5LCAwKTtcbiAgdmFyIGtSID0gdXRpbHMucmVhZFVJbnQzMkJFKGtleSwgNCk7XG5cbiAgdXRpbHMucGMxKGtMLCBrUiwgc3RhdGUudG1wLCAwKTtcbiAga0wgPSBzdGF0ZS50bXBbMF07XG4gIGtSID0gc3RhdGUudG1wWzFdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLmtleXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIgc2hpZnQgPSBzaGlmdFRhYmxlW2kgPj4+IDFdO1xuICAgIGtMID0gdXRpbHMucjI4c2hsKGtMLCBzaGlmdCk7XG4gICAga1IgPSB1dGlscy5yMjhzaGwoa1IsIHNoaWZ0KTtcbiAgICB1dGlscy5wYzIoa0wsIGtSLCBzdGF0ZS5rZXlzLCBpKTtcbiAgfVxufTtcblxuREVTLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9kZXNTdGF0ZTtcblxuICB2YXIgbCA9IHV0aWxzLnJlYWRVSW50MzJCRShpbnAsIGluT2ZmKTtcbiAgdmFyIHIgPSB1dGlscy5yZWFkVUludDMyQkUoaW5wLCBpbk9mZiArIDQpO1xuXG4gIC8vIEluaXRpYWwgUGVybXV0YXRpb25cbiAgdXRpbHMuaXAobCwgciwgc3RhdGUudG1wLCAwKTtcbiAgbCA9IHN0YXRlLnRtcFswXTtcbiAgciA9IHN0YXRlLnRtcFsxXTtcblxuICBpZiAodGhpcy50eXBlID09PSAnZW5jcnlwdCcpXG4gICAgdGhpcy5fZW5jcnlwdChzdGF0ZSwgbCwgciwgc3RhdGUudG1wLCAwKTtcbiAgZWxzZVxuICAgIHRoaXMuX2RlY3J5cHQoc3RhdGUsIGwsIHIsIHN0YXRlLnRtcCwgMCk7XG5cbiAgbCA9IHN0YXRlLnRtcFswXTtcbiAgciA9IHN0YXRlLnRtcFsxXTtcblxuICB1dGlscy53cml0ZVVJbnQzMkJFKG91dCwgbCwgb3V0T2ZmKTtcbiAgdXRpbHMud3JpdGVVSW50MzJCRShvdXQsIHIsIG91dE9mZiArIDQpO1xufTtcblxuREVTLnByb3RvdHlwZS5fcGFkID0gZnVuY3Rpb24gX3BhZChidWZmZXIsIG9mZikge1xuICB2YXIgdmFsdWUgPSBidWZmZXIubGVuZ3RoIC0gb2ZmO1xuICBmb3IgKHZhciBpID0gb2ZmOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSsrKVxuICAgIGJ1ZmZlcltpXSA9IHZhbHVlO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuREVTLnByb3RvdHlwZS5fdW5wYWQgPSBmdW5jdGlvbiBfdW5wYWQoYnVmZmVyKSB7XG4gIHZhciBwYWQgPSBidWZmZXJbYnVmZmVyLmxlbmd0aCAtIDFdO1xuICBmb3IgKHZhciBpID0gYnVmZmVyLmxlbmd0aCAtIHBhZDsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKylcbiAgICBhc3NlcnQuZXF1YWwoYnVmZmVyW2ldLCBwYWQpO1xuXG4gIHJldHVybiBidWZmZXIuc2xpY2UoMCwgYnVmZmVyLmxlbmd0aCAtIHBhZCk7XG59O1xuXG5ERVMucHJvdG90eXBlLl9lbmNyeXB0ID0gZnVuY3Rpb24gX2VuY3J5cHQoc3RhdGUsIGxTdGFydCwgclN0YXJ0LCBvdXQsIG9mZikge1xuICB2YXIgbCA9IGxTdGFydDtcbiAgdmFyIHIgPSByU3RhcnQ7XG5cbiAgLy8gQXBwbHkgZigpIHgxNiB0aW1lc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLmtleXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIga2V5TCA9IHN0YXRlLmtleXNbaV07XG4gICAgdmFyIGtleVIgPSBzdGF0ZS5rZXlzW2kgKyAxXTtcblxuICAgIC8vIGYociwgaylcbiAgICB1dGlscy5leHBhbmQociwgc3RhdGUudG1wLCAwKTtcblxuICAgIGtleUwgXj0gc3RhdGUudG1wWzBdO1xuICAgIGtleVIgXj0gc3RhdGUudG1wWzFdO1xuICAgIHZhciBzID0gdXRpbHMuc3Vic3RpdHV0ZShrZXlMLCBrZXlSKTtcbiAgICB2YXIgZiA9IHV0aWxzLnBlcm11dGUocyk7XG5cbiAgICB2YXIgdCA9IHI7XG4gICAgciA9IChsIF4gZikgPj4+IDA7XG4gICAgbCA9IHQ7XG4gIH1cblxuICAvLyBSZXZlcnNlIEluaXRpYWwgUGVybXV0YXRpb25cbiAgdXRpbHMucmlwKHIsIGwsIG91dCwgb2ZmKTtcbn07XG5cbkRFUy5wcm90b3R5cGUuX2RlY3J5cHQgPSBmdW5jdGlvbiBfZGVjcnlwdChzdGF0ZSwgbFN0YXJ0LCByU3RhcnQsIG91dCwgb2ZmKSB7XG4gIHZhciBsID0gclN0YXJ0O1xuICB2YXIgciA9IGxTdGFydDtcblxuICAvLyBBcHBseSBmKCkgeDE2IHRpbWVzXG4gIGZvciAodmFyIGkgPSBzdGF0ZS5rZXlzLmxlbmd0aCAtIDI7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgdmFyIGtleUwgPSBzdGF0ZS5rZXlzW2ldO1xuICAgIHZhciBrZXlSID0gc3RhdGUua2V5c1tpICsgMV07XG5cbiAgICAvLyBmKHIsIGspXG4gICAgdXRpbHMuZXhwYW5kKGwsIHN0YXRlLnRtcCwgMCk7XG5cbiAgICBrZXlMIF49IHN0YXRlLnRtcFswXTtcbiAgICBrZXlSIF49IHN0YXRlLnRtcFsxXTtcbiAgICB2YXIgcyA9IHV0aWxzLnN1YnN0aXR1dGUoa2V5TCwga2V5Uik7XG4gICAgdmFyIGYgPSB1dGlscy5wZXJtdXRlKHMpO1xuXG4gICAgdmFyIHQgPSBsO1xuICAgIGwgPSAociBeIGYpID4+PiAwO1xuICAgIHIgPSB0O1xuICB9XG5cbiAgLy8gUmV2ZXJzZSBJbml0aWFsIFBlcm11dGF0aW9uXG4gIHV0aWxzLnJpcChsLCByLCBvdXQsIG9mZik7XG59O1xuIiwidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgaW5jcjMyID0gcmVxdWlyZSgnLi4vaW5jcjMyJylcblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgdmFyIG91dCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2tSYXcoc2VsZi5fcHJldilcbiAgaW5jcjMyKHNlbGYuX3ByZXYpXG4gIHJldHVybiBvdXRcbn1cblxudmFyIGJsb2NrU2l6ZSA9IDE2XG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgdmFyIGNodW5rTnVtID0gTWF0aC5jZWlsKGNodW5rLmxlbmd0aCAvIGJsb2NrU2l6ZSlcbiAgdmFyIHN0YXJ0ID0gc2VsZi5fY2FjaGUubGVuZ3RoXG4gIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbXG4gICAgc2VsZi5fY2FjaGUsXG4gICAgQnVmZmVyLmFsbG9jVW5zYWZlKGNodW5rTnVtICogYmxvY2tTaXplKVxuICBdKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNodW5rTnVtOyBpKyspIHtcbiAgICB2YXIgb3V0ID0gZ2V0QmxvY2soc2VsZilcbiAgICB2YXIgb2Zmc2V0ID0gc3RhcnQgKyBpICogYmxvY2tTaXplXG4gICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJCRShvdXRbMF0sIG9mZnNldCArIDApXG4gICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJCRShvdXRbMV0sIG9mZnNldCArIDQpXG4gICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJCRShvdXRbMl0sIG9mZnNldCArIDgpXG4gICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJCRShvdXRbM10sIG9mZnNldCArIDEyKVxuICB9XG4gIHZhciBwYWQgPSBzZWxmLl9jYWNoZS5zbGljZSgwLCBjaHVuay5sZW5ndGgpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UoY2h1bmsubGVuZ3RoKVxuICByZXR1cm4geG9yKGNodW5rLCBwYWQpXG59XG4iLCJmdW5jdGlvbiBpbmNyMzIgKGl2KSB7XG4gIHZhciBsZW4gPSBpdi5sZW5ndGhcbiAgdmFyIGl0ZW1cbiAgd2hpbGUgKGxlbi0tKSB7XG4gICAgaXRlbSA9IGl2LnJlYWRVSW50OChsZW4pXG4gICAgaWYgKGl0ZW0gPT09IDI1NSkge1xuICAgICAgaXYud3JpdGVVSW50OCgwLCBsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW0rK1xuICAgICAgaXYud3JpdGVVSW50OChpdGVtLCBsZW4pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBpbmNyMzJcbiIsInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgR0hBU0ggPSByZXF1aXJlKCcuL2doYXNoJylcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcbnZhciBpbmNyMzIgPSByZXF1aXJlKCcuL2luY3IzMicpXG5cbmZ1bmN0aW9uIHhvclRlc3QgKGEsIGIpIHtcbiAgdmFyIG91dCA9IDBcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgb3V0KytcblxuICB2YXIgbGVuID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgb3V0ICs9IChhW2ldIF4gYltpXSlcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gY2FsY0l2IChzZWxmLCBpdiwgY2spIHtcbiAgaWYgKGl2Lmxlbmd0aCA9PT0gMTIpIHtcbiAgICBzZWxmLl9maW5JRCA9IEJ1ZmZlci5jb25jYXQoW2l2LCBCdWZmZXIuZnJvbShbMCwgMCwgMCwgMV0pXSlcbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbaXYsIEJ1ZmZlci5mcm9tKFswLCAwLCAwLCAyXSldKVxuICB9XG4gIHZhciBnaGFzaCA9IG5ldyBHSEFTSChjaylcbiAgdmFyIGxlbiA9IGl2Lmxlbmd0aFxuICB2YXIgdG9QYWQgPSBsZW4gJSAxNlxuICBnaGFzaC51cGRhdGUoaXYpXG4gIGlmICh0b1BhZCkge1xuICAgIHRvUGFkID0gMTYgLSB0b1BhZFxuICAgIGdoYXNoLnVwZGF0ZShCdWZmZXIuYWxsb2ModG9QYWQsIDApKVxuICB9XG4gIGdoYXNoLnVwZGF0ZShCdWZmZXIuYWxsb2MoOCwgMCkpXG4gIHZhciBpdkJpdHMgPSBsZW4gKiA4XG4gIHZhciB0YWlsID0gQnVmZmVyLmFsbG9jKDgpXG4gIHRhaWwud3JpdGVVSW50QkUoaXZCaXRzLCAwLCA4KVxuICBnaGFzaC51cGRhdGUodGFpbClcbiAgc2VsZi5fZmluSUQgPSBnaGFzaC5zdGF0ZVxuICB2YXIgb3V0ID0gQnVmZmVyLmZyb20oc2VsZi5fZmluSUQpXG4gIGluY3IzMihvdXQpXG4gIHJldHVybiBvdXRcbn1cbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHZhciBoID0gQnVmZmVyLmFsbG9jKDQsIDApXG5cbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB2YXIgY2sgPSB0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGgpXG4gIHRoaXMuX2doYXNoID0gbmV3IEdIQVNIKGNrKVxuICBpdiA9IGNhbGNJdih0aGlzLCBpdiwgY2spXG5cbiAgdGhpcy5fcHJldiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB0aGlzLl9jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB0aGlzLl9zZWNDYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICB0aGlzLl9hbGVuID0gMFxuICB0aGlzLl9sZW4gPSAwXG4gIHRoaXMuX21vZGUgPSBtb2RlXG5cbiAgdGhpcy5fYXV0aFRhZyA9IG51bGxcbiAgdGhpcy5fY2FsbGVkID0gZmFsc2Vcbn1cblxuaW5oZXJpdHMoU3RyZWFtQ2lwaGVyLCBUcmFuc2Zvcm0pXG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICBpZiAoIXRoaXMuX2NhbGxlZCAmJiB0aGlzLl9hbGVuKSB7XG4gICAgdmFyIHJ1bXAgPSAxNiAtICh0aGlzLl9hbGVuICUgMTYpXG4gICAgaWYgKHJ1bXAgPCAxNikge1xuICAgICAgcnVtcCA9IEJ1ZmZlci5hbGxvYyhydW1wLCAwKVxuICAgICAgdGhpcy5fZ2hhc2gudXBkYXRlKHJ1bXApXG4gICAgfVxuICB9XG5cbiAgdGhpcy5fY2FsbGVkID0gdHJ1ZVxuICB2YXIgb3V0ID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICBpZiAodGhpcy5fZGVjcnlwdCkge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShjaHVuaylcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUob3V0KVxuICB9XG4gIHRoaXMuX2xlbiArPSBjaHVuay5sZW5ndGhcbiAgcmV0dXJuIG91dFxufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX2RlY3J5cHQgJiYgIXRoaXMuX2F1dGhUYWcpIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhJylcblxuICB2YXIgdGFnID0geG9yKHRoaXMuX2doYXNoLmZpbmFsKHRoaXMuX2FsZW4gKiA4LCB0aGlzLl9sZW4gKiA4KSwgdGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayh0aGlzLl9maW5JRCkpXG4gIGlmICh0aGlzLl9kZWNyeXB0ICYmIHhvclRlc3QodGFnLCB0aGlzLl9hdXRoVGFnKSkgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGEnKVxuXG4gIHRoaXMuX2F1dGhUYWcgPSB0YWdcbiAgdGhpcy5fY2lwaGVyLnNjcnViKClcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gZ2V0QXV0aFRhZyAoKSB7XG4gIGlmICh0aGlzLl9kZWNyeXB0IHx8ICFCdWZmZXIuaXNCdWZmZXIodGhpcy5fYXV0aFRhZykpIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuXG4gIHJldHVybiB0aGlzLl9hdXRoVGFnXG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uIHNldEF1dGhUYWcgKHRhZykge1xuICBpZiAoIXRoaXMuX2RlY3J5cHQpIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuXG4gIHRoaXMuX2F1dGhUYWcgPSB0YWdcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiBzZXRBQUQgKGJ1Zikge1xuICBpZiAodGhpcy5fY2FsbGVkKSB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gc2V0IEFBRCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG5cbiAgdGhpcy5fZ2hhc2gudXBkYXRlKGJ1ZilcbiAgdGhpcy5fYWxlbiArPSBidWYubGVuZ3RoXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG4iLCJ2YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBTdHJlYW1DaXBoZXIgKG1vZGUsIGtleSwgaXYsIGRlY3J5cHQpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcblxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdilcbiAgdGhpcy5fY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdGhpcy5fc2VjQ2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdGhpcy5fZGVjcnlwdCA9IGRlY3J5cHRcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbn1cblxuaW5oZXJpdHMoU3RyZWFtQ2lwaGVyLCBUcmFuc2Zvcm0pXG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICByZXR1cm4gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rLCB0aGlzLl9kZWNyeXB0KVxufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fY2lwaGVyLnNjcnViKClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcbiIsInZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZpbmRQcmltZTtcbmZpbmRQcmltZS5zaW1wbGVTaWV2ZSA9IHNpbXBsZVNpZXZlO1xuZmluZFByaW1lLmZlcm1hdFRlc3QgPSBmZXJtYXRUZXN0O1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBUV0VOVFlGT1VSID0gbmV3IEJOKDI0KTtcbnZhciBNaWxsZXJSYWJpbiA9IHJlcXVpcmUoJ21pbGxlci1yYWJpbicpO1xudmFyIG1pbGxlclJhYmluID0gbmV3IE1pbGxlclJhYmluKCk7XG52YXIgT05FID0gbmV3IEJOKDEpO1xudmFyIFRXTyA9IG5ldyBCTigyKTtcbnZhciBGSVZFID0gbmV3IEJOKDUpO1xudmFyIFNJWFRFRU4gPSBuZXcgQk4oMTYpO1xudmFyIEVJR0hUID0gbmV3IEJOKDgpO1xudmFyIFRFTiA9IG5ldyBCTigxMCk7XG52YXIgVEhSRUUgPSBuZXcgQk4oMyk7XG52YXIgU0VWRU4gPSBuZXcgQk4oNyk7XG52YXIgRUxFVkVOID0gbmV3IEJOKDExKTtcbnZhciBGT1VSID0gbmV3IEJOKDQpO1xudmFyIFRXRUxWRSA9IG5ldyBCTigxMik7XG52YXIgcHJpbWVzID0gbnVsbDtcblxuZnVuY3Rpb24gX2dldFByaW1lcygpIHtcbiAgaWYgKHByaW1lcyAhPT0gbnVsbClcbiAgICByZXR1cm4gcHJpbWVzO1xuXG4gIHZhciBsaW1pdCA9IDB4MTAwMDAwO1xuICB2YXIgcmVzID0gW107XG4gIHJlc1swXSA9IDI7XG4gIGZvciAodmFyIGkgPSAxLCBrID0gMzsgayA8IGxpbWl0OyBrICs9IDIpIHtcbiAgICB2YXIgc3FydCA9IE1hdGguY2VpbChNYXRoLnNxcnQoaykpO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgaSAmJiByZXNbal0gPD0gc3FydDsgaisrKVxuICAgICAgaWYgKGsgJSByZXNbal0gPT09IDApXG4gICAgICAgIGJyZWFrO1xuXG4gICAgaWYgKGkgIT09IGogJiYgcmVzW2pdIDw9IHNxcnQpXG4gICAgICBjb250aW51ZTtcblxuICAgIHJlc1tpKytdID0gaztcbiAgfVxuICBwcmltZXMgPSByZXM7XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZVNpZXZlKHApIHtcbiAgdmFyIHByaW1lcyA9IF9nZXRQcmltZXMoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW1lcy5sZW5ndGg7IGkrKylcbiAgICBpZiAocC5tb2RuKHByaW1lc1tpXSkgPT09IDApIHtcbiAgICAgIGlmIChwLmNtcG4ocHJpbWVzW2ldKSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGZlcm1hdFRlc3QocCkge1xuICB2YXIgcmVkID0gQk4ubW9udChwKTtcbiAgcmV0dXJuIFRXTy50b1JlZChyZWQpLnJlZFBvdyhwLnN1Ym4oMSkpLmZyb21SZWQoKS5jbXBuKDEpID09PSAwO1xufVxuXG5mdW5jdGlvbiBmaW5kUHJpbWUoYml0cywgZ2VuKSB7XG4gIGlmIChiaXRzIDwgMTYpIHtcbiAgICAvLyB0aGlzIGlzIHdoYXQgb3BlbnNzbCBkb2VzXG4gICAgaWYgKGdlbiA9PT0gMiB8fCBnZW4gPT09IDUpIHtcbiAgICAgIHJldHVybiBuZXcgQk4oWzB4OGMsIDB4N2JdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBCTihbMHg4YywgMHgyN10pO1xuICAgIH1cbiAgfVxuICBnZW4gPSBuZXcgQk4oZ2VuKTtcblxuICB2YXIgbnVtLCBuMjtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIG51bSA9IG5ldyBCTihyYW5kb21CeXRlcyhNYXRoLmNlaWwoYml0cyAvIDgpKSk7XG4gICAgd2hpbGUgKG51bS5iaXRMZW5ndGgoKSA+IGJpdHMpIHtcbiAgICAgIG51bS5pc2hybigxKTtcbiAgICB9XG4gICAgaWYgKG51bS5pc0V2ZW4oKSkge1xuICAgICAgbnVtLmlhZGQoT05FKTtcbiAgICB9XG4gICAgaWYgKCFudW0udGVzdG4oMSkpIHtcbiAgICAgIG51bS5pYWRkKFRXTyk7XG4gICAgfVxuICAgIGlmICghZ2VuLmNtcChUV08pKSB7XG4gICAgICB3aGlsZSAobnVtLm1vZChUV0VOVFlGT1VSKS5jbXAoRUxFVkVOKSkge1xuICAgICAgICBudW0uaWFkZChGT1VSKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFnZW4uY21wKEZJVkUpKSB7XG4gICAgICB3aGlsZSAobnVtLm1vZChURU4pLmNtcChUSFJFRSkpIHtcbiAgICAgICAgbnVtLmlhZGQoRk9VUik7XG4gICAgICB9XG4gICAgfVxuICAgIG4yID0gbnVtLnNocm4oMSk7XG4gICAgaWYgKHNpbXBsZVNpZXZlKG4yKSAmJiBzaW1wbGVTaWV2ZShudW0pICYmXG4gICAgICBmZXJtYXRUZXN0KG4yKSAmJiBmZXJtYXRUZXN0KG51bSkgJiZcbiAgICAgIG1pbGxlclJhYmluLnRlc3QobjIpICYmIG1pbGxlclJhYmluLnRlc3QobnVtKSkge1xuICAgICAgcmV0dXJuIG51bTtcbiAgICB9XG4gIH1cblxufVxuIiwidmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBicm9yYW5kID0gcmVxdWlyZSgnYnJvcmFuZCcpO1xuXG5mdW5jdGlvbiBNaWxsZXJSYWJpbihyYW5kKSB7XG4gIHRoaXMucmFuZCA9IHJhbmQgfHwgbmV3IGJyb3JhbmQuUmFuZCgpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBNaWxsZXJSYWJpbjtcblxuTWlsbGVyUmFiaW4uY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHJhbmQpIHtcbiAgcmV0dXJuIG5ldyBNaWxsZXJSYWJpbihyYW5kKTtcbn07XG5cbk1pbGxlclJhYmluLnByb3RvdHlwZS5fcmFuZGJlbG93ID0gZnVuY3Rpb24gX3JhbmRiZWxvdyhuKSB7XG4gIHZhciBsZW4gPSBuLmJpdExlbmd0aCgpO1xuICB2YXIgbWluX2J5dGVzID0gTWF0aC5jZWlsKGxlbiAvIDgpO1xuXG4gIC8vIEdlbmVyYWdlIHJhbmRvbSBieXRlcyB1bnRpbCBhIG51bWJlciBsZXNzIHRoYW4gbiBpcyBmb3VuZC5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgMC4ubi0xIGhhdmUgYW4gZXF1YWwgcHJvYmFiaWxpdHkgb2YgYmVpbmcgc2VsZWN0ZWQuXG4gIGRvXG4gICAgdmFyIGEgPSBuZXcgYm4odGhpcy5yYW5kLmdlbmVyYXRlKG1pbl9ieXRlcykpO1xuICB3aGlsZSAoYS5jbXAobikgPj0gMCk7XG5cbiAgcmV0dXJuIGE7XG59O1xuXG5NaWxsZXJSYWJpbi5wcm90b3R5cGUuX3JhbmRyYW5nZSA9IGZ1bmN0aW9uIF9yYW5kcmFuZ2Uoc3RhcnQsIHN0b3ApIHtcbiAgLy8gR2VuZXJhdGUgYSByYW5kb20gbnVtYmVyIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBzdGFydCBhbmQgbGVzcyB0aGFuIHN0b3AuXG4gIHZhciBzaXplID0gc3RvcC5zdWIoc3RhcnQpO1xuICByZXR1cm4gc3RhcnQuYWRkKHRoaXMuX3JhbmRiZWxvdyhzaXplKSk7XG59O1xuXG5NaWxsZXJSYWJpbi5wcm90b3R5cGUudGVzdCA9IGZ1bmN0aW9uIHRlc3QobiwgaywgY2IpIHtcbiAgdmFyIGxlbiA9IG4uYml0TGVuZ3RoKCk7XG4gIHZhciByZWQgPSBibi5tb250KG4pO1xuICB2YXIgcm9uZSA9IG5ldyBibigxKS50b1JlZChyZWQpO1xuXG4gIGlmICghaylcbiAgICBrID0gTWF0aC5tYXgoMSwgKGxlbiAvIDQ4KSB8IDApO1xuXG4gIC8vIEZpbmQgZCBhbmQgcywgKG4gLSAxKSA9ICgyIF4gcykgKiBkO1xuICB2YXIgbjEgPSBuLnN1Ym4oMSk7XG4gIGZvciAodmFyIHMgPSAwOyAhbjEudGVzdG4ocyk7IHMrKykge31cbiAgdmFyIGQgPSBuLnNocm4ocyk7XG5cbiAgdmFyIHJuMSA9IG4xLnRvUmVkKHJlZCk7XG5cbiAgdmFyIHByaW1lID0gdHJ1ZTtcbiAgZm9yICg7IGsgPiAwOyBrLS0pIHtcbiAgICB2YXIgYSA9IHRoaXMuX3JhbmRyYW5nZShuZXcgYm4oMiksIG4xKTtcbiAgICBpZiAoY2IpXG4gICAgICBjYihhKTtcblxuICAgIHZhciB4ID0gYS50b1JlZChyZWQpLnJlZFBvdyhkKTtcbiAgICBpZiAoeC5jbXAocm9uZSkgPT09IDAgfHwgeC5jbXAocm4xKSA9PT0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBzOyBpKyspIHtcbiAgICAgIHggPSB4LnJlZFNxcigpO1xuXG4gICAgICBpZiAoeC5jbXAocm9uZSkgPT09IDApXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIGlmICh4LmNtcChybjEpID09PSAwKVxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gcylcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBwcmltZTtcbn07XG5cbk1pbGxlclJhYmluLnByb3RvdHlwZS5nZXREaXZpc29yID0gZnVuY3Rpb24gZ2V0RGl2aXNvcihuLCBrKSB7XG4gIHZhciBsZW4gPSBuLmJpdExlbmd0aCgpO1xuICB2YXIgcmVkID0gYm4ubW9udChuKTtcbiAgdmFyIHJvbmUgPSBuZXcgYm4oMSkudG9SZWQocmVkKTtcblxuICBpZiAoIWspXG4gICAgayA9IE1hdGgubWF4KDEsIChsZW4gLyA0OCkgfCAwKTtcblxuICAvLyBGaW5kIGQgYW5kIHMsIChuIC0gMSkgPSAoMiBeIHMpICogZDtcbiAgdmFyIG4xID0gbi5zdWJuKDEpO1xuICBmb3IgKHZhciBzID0gMDsgIW4xLnRlc3RuKHMpOyBzKyspIHt9XG4gIHZhciBkID0gbi5zaHJuKHMpO1xuXG4gIHZhciBybjEgPSBuMS50b1JlZChyZWQpO1xuXG4gIGZvciAoOyBrID4gMDsgay0tKSB7XG4gICAgdmFyIGEgPSB0aGlzLl9yYW5kcmFuZ2UobmV3IGJuKDIpLCBuMSk7XG5cbiAgICB2YXIgZyA9IG4uZ2NkKGEpO1xuICAgIGlmIChnLmNtcG4oMSkgIT09IDApXG4gICAgICByZXR1cm4gZztcblxuICAgIHZhciB4ID0gYS50b1JlZChyZWQpLnJlZFBvdyhkKTtcbiAgICBpZiAoeC5jbXAocm9uZSkgPT09IDAgfHwgeC5jbXAocm4xKSA9PT0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBzOyBpKyspIHtcbiAgICAgIHggPSB4LnJlZFNxcigpO1xuXG4gICAgICBpZiAoeC5jbXAocm9uZSkgPT09IDApXG4gICAgICAgIHJldHVybiB4LmZyb21SZWQoKS5zdWJuKDEpLmdjZChuKTtcbiAgICAgIGlmICh4LmNtcChybjEpID09PSAwKVxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gcykge1xuICAgICAgeCA9IHgucmVkU3FyKCk7XG4gICAgICByZXR1cm4geC5mcm9tUmVkKCkuc3VibigxKS5nY2Qobik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gZXhwb3J0cztcblxuZnVuY3Rpb24gdG9BcnJheShtc2csIGVuYykge1xuICBpZiAoQXJyYXkuaXNBcnJheShtc2cpKVxuICAgIHJldHVybiBtc2cuc2xpY2UoKTtcbiAgaWYgKCFtc2cpXG4gICAgcmV0dXJuIFtdO1xuICB2YXIgcmVzID0gW107XG4gIGlmICh0eXBlb2YgbXNnICE9PSAnc3RyaW5nJykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKVxuICAgICAgcmVzW2ldID0gbXNnW2ldIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIGlmIChlbmMgPT09ICdoZXgnKSB7XG4gICAgbXNnID0gbXNnLnJlcGxhY2UoL1teYS16MC05XSsvaWcsICcnKTtcbiAgICBpZiAobXNnLmxlbmd0aCAlIDIgIT09IDApXG4gICAgICBtc2cgPSAnMCcgKyBtc2c7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IDIpXG4gICAgICByZXMucHVzaChwYXJzZUludChtc2dbaV0gKyBtc2dbaSArIDFdLCAxNikpO1xuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG1zZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgdmFyIGhpID0gYyA+PiA4O1xuICAgICAgdmFyIGxvID0gYyAmIDB4ZmY7XG4gICAgICBpZiAoaGkpXG4gICAgICAgIHJlcy5wdXNoKGhpLCBsbyk7XG4gICAgICBlbHNlXG4gICAgICAgIHJlcy5wdXNoKGxvKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbnV0aWxzLnRvQXJyYXkgPSB0b0FycmF5O1xuXG5mdW5jdGlvbiB6ZXJvMih3b3JkKSB7XG4gIGlmICh3b3JkLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gJzAnICsgd29yZDtcbiAgZWxzZVxuICAgIHJldHVybiB3b3JkO1xufVxudXRpbHMuemVybzIgPSB6ZXJvMjtcblxuZnVuY3Rpb24gdG9IZXgobXNnKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgcmVzICs9IHplcm8yKG1zZ1tpXS50b1N0cmluZygxNikpO1xuICByZXR1cm4gcmVzO1xufVxudXRpbHMudG9IZXggPSB0b0hleDtcblxudXRpbHMuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGFyciwgZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB0b0hleChhcnIpO1xuICBlbHNlXG4gICAgcmV0dXJuIGFycjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjdXJ2ZSA9IGV4cG9ydHM7XG5cbmN1cnZlLmJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcbmN1cnZlLnNob3J0ID0gcmVxdWlyZSgnLi9zaG9ydCcpO1xuY3VydmUubW9udCA9IHJlcXVpcmUoJy4vbW9udCcpO1xuY3VydmUuZWR3YXJkcyA9IHJlcXVpcmUoJy4vZWR3YXJkcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIHJvdHIzMiA9IHV0aWxzLnJvdHIzMjtcblxuZnVuY3Rpb24gZnRfMShzLCB4LCB5LCB6KSB7XG4gIGlmIChzID09PSAwKVxuICAgIHJldHVybiBjaDMyKHgsIHksIHopO1xuICBpZiAocyA9PT0gMSB8fCBzID09PSAzKVxuICAgIHJldHVybiBwMzIoeCwgeSwgeik7XG4gIGlmIChzID09PSAyKVxuICAgIHJldHVybiBtYWozMih4LCB5LCB6KTtcbn1cbmV4cG9ydHMuZnRfMSA9IGZ0XzE7XG5cbmZ1bmN0aW9uIGNoMzIoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSBeICgofngpICYgeik7XG59XG5leHBvcnRzLmNoMzIgPSBjaDMyO1xuXG5mdW5jdGlvbiBtYWozMih4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIF4gKHggJiB6KSBeICh5ICYgeik7XG59XG5leHBvcnRzLm1hajMyID0gbWFqMzI7XG5cbmZ1bmN0aW9uIHAzMih4LCB5LCB6KSB7XG4gIHJldHVybiB4IF4geSBeIHo7XG59XG5leHBvcnRzLnAzMiA9IHAzMjtcblxuZnVuY3Rpb24gczBfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCAyKSBeIHJvdHIzMih4LCAxMykgXiByb3RyMzIoeCwgMjIpO1xufVxuZXhwb3J0cy5zMF8yNTYgPSBzMF8yNTY7XG5cbmZ1bmN0aW9uIHMxXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgNikgXiByb3RyMzIoeCwgMTEpIF4gcm90cjMyKHgsIDI1KTtcbn1cbmV4cG9ydHMuczFfMjU2ID0gczFfMjU2O1xuXG5mdW5jdGlvbiBnMF8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDcpIF4gcm90cjMyKHgsIDE4KSBeICh4ID4+PiAzKTtcbn1cbmV4cG9ydHMuZzBfMjU2ID0gZzBfMjU2O1xuXG5mdW5jdGlvbiBnMV8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDE3KSBeIHJvdHIzMih4LCAxOSkgXiAoeCA+Pj4gMTApO1xufVxuZXhwb3J0cy5nMV8yNTYgPSBnMV8yNTY7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG52YXIgc2hhQ29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyO1xudmFyIHN1bTMyXzQgPSB1dGlscy5zdW0zMl80O1xudmFyIHN1bTMyXzUgPSB1dGlscy5zdW0zMl81O1xudmFyIGNoMzIgPSBzaGFDb21tb24uY2gzMjtcbnZhciBtYWozMiA9IHNoYUNvbW1vbi5tYWozMjtcbnZhciBzMF8yNTYgPSBzaGFDb21tb24uczBfMjU2O1xudmFyIHMxXzI1NiA9IHNoYUNvbW1vbi5zMV8yNTY7XG52YXIgZzBfMjU2ID0gc2hhQ29tbW9uLmcwXzI1NjtcbnZhciBnMV8yNTYgPSBzaGFDb21tb24uZzFfMjU2O1xuXG52YXIgQmxvY2tIYXNoID0gY29tbW9uLkJsb2NrSGFzaDtcblxudmFyIHNoYTI1Nl9LID0gW1xuICAweDQyOGEyZjk4LCAweDcxMzc0NDkxLCAweGI1YzBmYmNmLCAweGU5YjVkYmE1LFxuICAweDM5NTZjMjViLCAweDU5ZjExMWYxLCAweDkyM2Y4MmE0LCAweGFiMWM1ZWQ1LFxuICAweGQ4MDdhYTk4LCAweDEyODM1YjAxLCAweDI0MzE4NWJlLCAweDU1MGM3ZGMzLFxuICAweDcyYmU1ZDc0LCAweDgwZGViMWZlLCAweDliZGMwNmE3LCAweGMxOWJmMTc0LFxuICAweGU0OWI2OWMxLCAweGVmYmU0Nzg2LCAweDBmYzE5ZGM2LCAweDI0MGNhMWNjLFxuICAweDJkZTkyYzZmLCAweDRhNzQ4NGFhLCAweDVjYjBhOWRjLCAweDc2Zjk4OGRhLFxuICAweDk4M2U1MTUyLCAweGE4MzFjNjZkLCAweGIwMDMyN2M4LCAweGJmNTk3ZmM3LFxuICAweGM2ZTAwYmYzLCAweGQ1YTc5MTQ3LCAweDA2Y2E2MzUxLCAweDE0MjkyOTY3LFxuICAweDI3YjcwYTg1LCAweDJlMWIyMTM4LCAweDRkMmM2ZGZjLCAweDUzMzgwZDEzLFxuICAweDY1MGE3MzU0LCAweDc2NmEwYWJiLCAweDgxYzJjOTJlLCAweDkyNzIyYzg1LFxuICAweGEyYmZlOGExLCAweGE4MWE2NjRiLCAweGMyNGI4YjcwLCAweGM3NmM1MWEzLFxuICAweGQxOTJlODE5LCAweGQ2OTkwNjI0LCAweGY0MGUzNTg1LCAweDEwNmFhMDcwLFxuICAweDE5YTRjMTE2LCAweDFlMzc2YzA4LCAweDI3NDg3NzRjLCAweDM0YjBiY2I1LFxuICAweDM5MWMwY2IzLCAweDRlZDhhYTRhLCAweDViOWNjYTRmLCAweDY4MmU2ZmYzLFxuICAweDc0OGY4MmVlLCAweDc4YTU2MzZmLCAweDg0Yzg3ODE0LCAweDhjYzcwMjA4LFxuICAweDkwYmVmZmZhLCAweGE0NTA2Y2ViLCAweGJlZjlhM2Y3LCAweGM2NzE3OGYyXG5dO1xuXG5mdW5jdGlvbiBTSEEyNTYoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEyNTYpKVxuICAgIHJldHVybiBuZXcgU0hBMjU2KCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweDZhMDllNjY3LCAweGJiNjdhZTg1LCAweDNjNmVmMzcyLCAweGE1NGZmNTNhLFxuICAgIDB4NTEwZTUyN2YsIDB4OWIwNTY4OGMsIDB4MWY4M2Q5YWIsIDB4NWJlMGNkMTlcbiAgXTtcbiAgdGhpcy5rID0gc2hhMjU2X0s7XG4gIHRoaXMuVyA9IG5ldyBBcnJheSg2NCk7XG59XG51dGlscy5pbmhlcml0cyhTSEEyNTYsIEJsb2NrSGFzaCk7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTI1NjtcblxuU0hBMjU2LmJsb2NrU2l6ZSA9IDUxMjtcblNIQTI1Ni5vdXRTaXplID0gMjU2O1xuU0hBMjU2LmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTI1Ni5wYWRMZW5ndGggPSA2NDtcblxuU0hBMjU2LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG4gIGZvciAoOyBpIDwgVy5sZW5ndGg7IGkrKylcbiAgICBXW2ldID0gc3VtMzJfNChnMV8yNTYoV1tpIC0gMl0pLCBXW2kgLSA3XSwgZzBfMjU2KFdbaSAtIDE1XSksIFdbaSAtIDE2XSk7XG5cbiAgdmFyIGEgPSB0aGlzLmhbMF07XG4gIHZhciBiID0gdGhpcy5oWzFdO1xuICB2YXIgYyA9IHRoaXMuaFsyXTtcbiAgdmFyIGQgPSB0aGlzLmhbM107XG4gIHZhciBlID0gdGhpcy5oWzRdO1xuICB2YXIgZiA9IHRoaXMuaFs1XTtcbiAgdmFyIGcgPSB0aGlzLmhbNl07XG4gIHZhciBoID0gdGhpcy5oWzddO1xuXG4gIGFzc2VydCh0aGlzLmsubGVuZ3RoID09PSBXLmxlbmd0aCk7XG4gIGZvciAoaSA9IDA7IGkgPCBXLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIFQxID0gc3VtMzJfNShoLCBzMV8yNTYoZSksIGNoMzIoZSwgZiwgZyksIHRoaXMua1tpXSwgV1tpXSk7XG4gICAgdmFyIFQyID0gc3VtMzIoczBfMjU2KGEpLCBtYWozMihhLCBiLCBjKSk7XG4gICAgaCA9IGc7XG4gICAgZyA9IGY7XG4gICAgZiA9IGU7XG4gICAgZSA9IHN1bTMyKGQsIFQxKTtcbiAgICBkID0gYztcbiAgICBjID0gYjtcbiAgICBiID0gYTtcbiAgICBhID0gc3VtMzIoVDEsIFQyKTtcbiAgfVxuXG4gIHRoaXMuaFswXSA9IHN1bTMyKHRoaXMuaFswXSwgYSk7XG4gIHRoaXMuaFsxXSA9IHN1bTMyKHRoaXMuaFsxXSwgYik7XG4gIHRoaXMuaFsyXSA9IHN1bTMyKHRoaXMuaFsyXSwgYyk7XG4gIHRoaXMuaFszXSA9IHN1bTMyKHRoaXMuaFszXSwgZCk7XG4gIHRoaXMuaFs0XSA9IHN1bTMyKHRoaXMuaFs0XSwgZSk7XG4gIHRoaXMuaFs1XSA9IHN1bTMyKHRoaXMuaFs1XSwgZik7XG4gIHRoaXMuaFs2XSA9IHN1bTMyKHRoaXMuaFs2XSwgZyk7XG4gIHRoaXMuaFs3XSA9IHN1bTMyKHRoaXMuaFs3XSwgaCk7XG59O1xuXG5TSEEyNTYucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnYmlnJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxudmFyIHJvdHI2NF9oaSA9IHV0aWxzLnJvdHI2NF9oaTtcbnZhciByb3RyNjRfbG8gPSB1dGlscy5yb3RyNjRfbG87XG52YXIgc2hyNjRfaGkgPSB1dGlscy5zaHI2NF9oaTtcbnZhciBzaHI2NF9sbyA9IHV0aWxzLnNocjY0X2xvO1xudmFyIHN1bTY0ID0gdXRpbHMuc3VtNjQ7XG52YXIgc3VtNjRfaGkgPSB1dGlscy5zdW02NF9oaTtcbnZhciBzdW02NF9sbyA9IHV0aWxzLnN1bTY0X2xvO1xudmFyIHN1bTY0XzRfaGkgPSB1dGlscy5zdW02NF80X2hpO1xudmFyIHN1bTY0XzRfbG8gPSB1dGlscy5zdW02NF80X2xvO1xudmFyIHN1bTY0XzVfaGkgPSB1dGlscy5zdW02NF81X2hpO1xudmFyIHN1bTY0XzVfbG8gPSB1dGlscy5zdW02NF81X2xvO1xuXG52YXIgQmxvY2tIYXNoID0gY29tbW9uLkJsb2NrSGFzaDtcblxudmFyIHNoYTUxMl9LID0gW1xuICAweDQyOGEyZjk4LCAweGQ3MjhhZTIyLCAweDcxMzc0NDkxLCAweDIzZWY2NWNkLFxuICAweGI1YzBmYmNmLCAweGVjNGQzYjJmLCAweGU5YjVkYmE1LCAweDgxODlkYmJjLFxuICAweDM5NTZjMjViLCAweGYzNDhiNTM4LCAweDU5ZjExMWYxLCAweGI2MDVkMDE5LFxuICAweDkyM2Y4MmE0LCAweGFmMTk0ZjliLCAweGFiMWM1ZWQ1LCAweGRhNmQ4MTE4LFxuICAweGQ4MDdhYTk4LCAweGEzMDMwMjQyLCAweDEyODM1YjAxLCAweDQ1NzA2ZmJlLFxuICAweDI0MzE4NWJlLCAweDRlZTRiMjhjLCAweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyLFxuICAweDcyYmU1ZDc0LCAweGYyN2I4OTZmLCAweDgwZGViMWZlLCAweDNiMTY5NmIxLFxuICAweDliZGMwNmE3LCAweDI1YzcxMjM1LCAweGMxOWJmMTc0LCAweGNmNjkyNjk0LFxuICAweGU0OWI2OWMxLCAweDllZjE0YWQyLCAweGVmYmU0Nzg2LCAweDM4NGYyNWUzLFxuICAweDBmYzE5ZGM2LCAweDhiOGNkNWI1LCAweDI0MGNhMWNjLCAweDc3YWM5YzY1LFxuICAweDJkZTkyYzZmLCAweDU5MmIwMjc1LCAweDRhNzQ4NGFhLCAweDZlYTZlNDgzLFxuICAweDVjYjBhOWRjLCAweGJkNDFmYmQ0LCAweDc2Zjk4OGRhLCAweDgzMTE1M2I1LFxuICAweDk4M2U1MTUyLCAweGVlNjZkZmFiLCAweGE4MzFjNjZkLCAweDJkYjQzMjEwLFxuICAweGIwMDMyN2M4LCAweDk4ZmIyMTNmLCAweGJmNTk3ZmM3LCAweGJlZWYwZWU0LFxuICAweGM2ZTAwYmYzLCAweDNkYTg4ZmMyLCAweGQ1YTc5MTQ3LCAweDkzMGFhNzI1LFxuICAweDA2Y2E2MzUxLCAweGUwMDM4MjZmLCAweDE0MjkyOTY3LCAweDBhMGU2ZTcwLFxuICAweDI3YjcwYTg1LCAweDQ2ZDIyZmZjLCAweDJlMWIyMTM4LCAweDVjMjZjOTI2LFxuICAweDRkMmM2ZGZjLCAweDVhYzQyYWVkLCAweDUzMzgwZDEzLCAweDlkOTViM2RmLFxuICAweDY1MGE3MzU0LCAweDhiYWY2M2RlLCAweDc2NmEwYWJiLCAweDNjNzdiMmE4LFxuICAweDgxYzJjOTJlLCAweDQ3ZWRhZWU2LCAweDkyNzIyYzg1LCAweDE0ODIzNTNiLFxuICAweGEyYmZlOGExLCAweDRjZjEwMzY0LCAweGE4MWE2NjRiLCAweGJjNDIzMDAxLFxuICAweGMyNGI4YjcwLCAweGQwZjg5NzkxLCAweGM3NmM1MWEzLCAweDA2NTRiZTMwLFxuICAweGQxOTJlODE5LCAweGQ2ZWY1MjE4LCAweGQ2OTkwNjI0LCAweDU1NjVhOTEwLFxuICAweGY0MGUzNTg1LCAweDU3NzEyMDJhLCAweDEwNmFhMDcwLCAweDMyYmJkMWI4LFxuICAweDE5YTRjMTE2LCAweGI4ZDJkMGM4LCAweDFlMzc2YzA4LCAweDUxNDFhYjUzLFxuICAweDI3NDg3NzRjLCAweGRmOGVlYjk5LCAweDM0YjBiY2I1LCAweGUxOWI0OGE4LFxuICAweDM5MWMwY2IzLCAweGM1Yzk1YTYzLCAweDRlZDhhYTRhLCAweGUzNDE4YWNiLFxuICAweDViOWNjYTRmLCAweDc3NjNlMzczLCAweDY4MmU2ZmYzLCAweGQ2YjJiOGEzLFxuICAweDc0OGY4MmVlLCAweDVkZWZiMmZjLCAweDc4YTU2MzZmLCAweDQzMTcyZjYwLFxuICAweDg0Yzg3ODE0LCAweGExZjBhYjcyLCAweDhjYzcwMjA4LCAweDFhNjQzOWVjLFxuICAweDkwYmVmZmZhLCAweDIzNjMxZTI4LCAweGE0NTA2Y2ViLCAweGRlODJiZGU5LFxuICAweGJlZjlhM2Y3LCAweGIyYzY3OTE1LCAweGM2NzE3OGYyLCAweGUzNzI1MzJiLFxuICAweGNhMjczZWNlLCAweGVhMjY2MTljLCAweGQxODZiOGM3LCAweDIxYzBjMjA3LFxuICAweGVhZGE3ZGQ2LCAweGNkZTBlYjFlLCAweGY1N2Q0ZjdmLCAweGVlNmVkMTc4LFxuICAweDA2ZjA2N2FhLCAweDcyMTc2ZmJhLCAweDBhNjM3ZGM1LCAweGEyYzg5OGE2LFxuICAweDExM2Y5ODA0LCAweGJlZjkwZGFlLCAweDFiNzEwYjM1LCAweDEzMWM0NzFiLFxuICAweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0LCAweDMyY2FhYjdiLCAweDQwYzcyNDkzLFxuICAweDNjOWViZTBhLCAweDE1YzliZWJjLCAweDQzMWQ2N2M0LCAweDljMTAwZDRjLFxuICAweDRjYzVkNGJlLCAweGNiM2U0MmI2LCAweDU5N2YyOTljLCAweGZjNjU3ZTJhLFxuICAweDVmY2I2ZmFiLCAweDNhZDZmYWVjLCAweDZjNDQxOThjLCAweDRhNDc1ODE3XG5dO1xuXG5mdW5jdGlvbiBTSEE1MTIoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEE1MTIpKVxuICAgIHJldHVybiBuZXcgU0hBNTEyKCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweDZhMDllNjY3LCAweGYzYmNjOTA4LFxuICAgIDB4YmI2N2FlODUsIDB4ODRjYWE3M2IsXG4gICAgMHgzYzZlZjM3MiwgMHhmZTk0ZjgyYixcbiAgICAweGE1NGZmNTNhLCAweDVmMWQzNmYxLFxuICAgIDB4NTEwZTUyN2YsIDB4YWRlNjgyZDEsXG4gICAgMHg5YjA1Njg4YywgMHgyYjNlNmMxZixcbiAgICAweDFmODNkOWFiLCAweGZiNDFiZDZiLFxuICAgIDB4NWJlMGNkMTksIDB4MTM3ZTIxNzkgXTtcbiAgdGhpcy5rID0gc2hhNTEyX0s7XG4gIHRoaXMuVyA9IG5ldyBBcnJheSgxNjApO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBNTEyLCBCbG9ja0hhc2gpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEE1MTI7XG5cblNIQTUxMi5ibG9ja1NpemUgPSAxMDI0O1xuU0hBNTEyLm91dFNpemUgPSA1MTI7XG5TSEE1MTIuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBNTEyLnBhZExlbmd0aCA9IDEyODtcblxuU0hBNTEyLnByb3RvdHlwZS5fcHJlcGFyZUJsb2NrID0gZnVuY3Rpb24gX3ByZXBhcmVCbG9jayhtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIC8vIDMyIHggMzJiaXQgd29yZHNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzMjsgaSsrKVxuICAgIFdbaV0gPSBtc2dbc3RhcnQgKyBpXTtcbiAgZm9yICg7IGkgPCBXLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGMwX2hpID0gZzFfNTEyX2hpKFdbaSAtIDRdLCBXW2kgLSAzXSk7ICAvLyBpIC0gMlxuICAgIHZhciBjMF9sbyA9IGcxXzUxMl9sbyhXW2kgLSA0XSwgV1tpIC0gM10pO1xuICAgIHZhciBjMV9oaSA9IFdbaSAtIDE0XTsgIC8vIGkgLSA3XG4gICAgdmFyIGMxX2xvID0gV1tpIC0gMTNdO1xuICAgIHZhciBjMl9oaSA9IGcwXzUxMl9oaShXW2kgLSAzMF0sIFdbaSAtIDI5XSk7ICAvLyBpIC0gMTVcbiAgICB2YXIgYzJfbG8gPSBnMF81MTJfbG8oV1tpIC0gMzBdLCBXW2kgLSAyOV0pO1xuICAgIHZhciBjM19oaSA9IFdbaSAtIDMyXTsgIC8vIGkgLSAxNlxuICAgIHZhciBjM19sbyA9IFdbaSAtIDMxXTtcblxuICAgIFdbaV0gPSBzdW02NF80X2hpKFxuICAgICAgYzBfaGksIGMwX2xvLFxuICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgYzNfaGksIGMzX2xvKTtcbiAgICBXW2kgKyAxXSA9IHN1bTY0XzRfbG8oXG4gICAgICBjMF9oaSwgYzBfbG8sXG4gICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICBjM19oaSwgYzNfbG8pO1xuICB9XG59O1xuXG5TSEE1MTIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdGhpcy5fcHJlcGFyZUJsb2NrKG1zZywgc3RhcnQpO1xuXG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIHZhciBhaCA9IHRoaXMuaFswXTtcbiAgdmFyIGFsID0gdGhpcy5oWzFdO1xuICB2YXIgYmggPSB0aGlzLmhbMl07XG4gIHZhciBibCA9IHRoaXMuaFszXTtcbiAgdmFyIGNoID0gdGhpcy5oWzRdO1xuICB2YXIgY2wgPSB0aGlzLmhbNV07XG4gIHZhciBkaCA9IHRoaXMuaFs2XTtcbiAgdmFyIGRsID0gdGhpcy5oWzddO1xuICB2YXIgZWggPSB0aGlzLmhbOF07XG4gIHZhciBlbCA9IHRoaXMuaFs5XTtcbiAgdmFyIGZoID0gdGhpcy5oWzEwXTtcbiAgdmFyIGZsID0gdGhpcy5oWzExXTtcbiAgdmFyIGdoID0gdGhpcy5oWzEyXTtcbiAgdmFyIGdsID0gdGhpcy5oWzEzXTtcbiAgdmFyIGhoID0gdGhpcy5oWzE0XTtcbiAgdmFyIGhsID0gdGhpcy5oWzE1XTtcblxuICBhc3NlcnQodGhpcy5rLmxlbmd0aCA9PT0gVy5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IFcubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIgYzBfaGkgPSBoaDtcbiAgICB2YXIgYzBfbG8gPSBobDtcbiAgICB2YXIgYzFfaGkgPSBzMV81MTJfaGkoZWgsIGVsKTtcbiAgICB2YXIgYzFfbG8gPSBzMV81MTJfbG8oZWgsIGVsKTtcbiAgICB2YXIgYzJfaGkgPSBjaDY0X2hpKGVoLCBlbCwgZmgsIGZsLCBnaCwgZ2wpO1xuICAgIHZhciBjMl9sbyA9IGNoNjRfbG8oZWgsIGVsLCBmaCwgZmwsIGdoLCBnbCk7XG4gICAgdmFyIGMzX2hpID0gdGhpcy5rW2ldO1xuICAgIHZhciBjM19sbyA9IHRoaXMua1tpICsgMV07XG4gICAgdmFyIGM0X2hpID0gV1tpXTtcbiAgICB2YXIgYzRfbG8gPSBXW2kgKyAxXTtcblxuICAgIHZhciBUMV9oaSA9IHN1bTY0XzVfaGkoXG4gICAgICBjMF9oaSwgYzBfbG8sXG4gICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICBjM19oaSwgYzNfbG8sXG4gICAgICBjNF9oaSwgYzRfbG8pO1xuICAgIHZhciBUMV9sbyA9IHN1bTY0XzVfbG8oXG4gICAgICBjMF9oaSwgYzBfbG8sXG4gICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICBjM19oaSwgYzNfbG8sXG4gICAgICBjNF9oaSwgYzRfbG8pO1xuXG4gICAgYzBfaGkgPSBzMF81MTJfaGkoYWgsIGFsKTtcbiAgICBjMF9sbyA9IHMwXzUxMl9sbyhhaCwgYWwpO1xuICAgIGMxX2hpID0gbWFqNjRfaGkoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCk7XG4gICAgYzFfbG8gPSBtYWo2NF9sbyhhaCwgYWwsIGJoLCBibCwgY2gsIGNsKTtcblxuICAgIHZhciBUMl9oaSA9IHN1bTY0X2hpKGMwX2hpLCBjMF9sbywgYzFfaGksIGMxX2xvKTtcbiAgICB2YXIgVDJfbG8gPSBzdW02NF9sbyhjMF9oaSwgYzBfbG8sIGMxX2hpLCBjMV9sbyk7XG5cbiAgICBoaCA9IGdoO1xuICAgIGhsID0gZ2w7XG5cbiAgICBnaCA9IGZoO1xuICAgIGdsID0gZmw7XG5cbiAgICBmaCA9IGVoO1xuICAgIGZsID0gZWw7XG5cbiAgICBlaCA9IHN1bTY0X2hpKGRoLCBkbCwgVDFfaGksIFQxX2xvKTtcbiAgICBlbCA9IHN1bTY0X2xvKGRsLCBkbCwgVDFfaGksIFQxX2xvKTtcblxuICAgIGRoID0gY2g7XG4gICAgZGwgPSBjbDtcblxuICAgIGNoID0gYmg7XG4gICAgY2wgPSBibDtcblxuICAgIGJoID0gYWg7XG4gICAgYmwgPSBhbDtcblxuICAgIGFoID0gc3VtNjRfaGkoVDFfaGksIFQxX2xvLCBUMl9oaSwgVDJfbG8pO1xuICAgIGFsID0gc3VtNjRfbG8oVDFfaGksIFQxX2xvLCBUMl9oaSwgVDJfbG8pO1xuICB9XG5cbiAgc3VtNjQodGhpcy5oLCAwLCBhaCwgYWwpO1xuICBzdW02NCh0aGlzLmgsIDIsIGJoLCBibCk7XG4gIHN1bTY0KHRoaXMuaCwgNCwgY2gsIGNsKTtcbiAgc3VtNjQodGhpcy5oLCA2LCBkaCwgZGwpO1xuICBzdW02NCh0aGlzLmgsIDgsIGVoLCBlbCk7XG4gIHN1bTY0KHRoaXMuaCwgMTAsIGZoLCBmbCk7XG4gIHN1bTY0KHRoaXMuaCwgMTIsIGdoLCBnbCk7XG4gIHN1bTY0KHRoaXMuaCwgMTQsIGhoLCBobCk7XG59O1xuXG5TSEE1MTIucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnYmlnJyk7XG59O1xuXG5mdW5jdGlvbiBjaDY0X2hpKHhoLCB4bCwgeWgsIHlsLCB6aCkge1xuICB2YXIgciA9ICh4aCAmIHloKSBeICgofnhoKSAmIHpoKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBjaDY0X2xvKHhoLCB4bCwgeWgsIHlsLCB6aCwgemwpIHtcbiAgdmFyIHIgPSAoeGwgJiB5bCkgXiAoKH54bCkgJiB6bCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gbWFqNjRfaGkoeGgsIHhsLCB5aCwgeWwsIHpoKSB7XG4gIHZhciByID0gKHhoICYgeWgpIF4gKHhoICYgemgpIF4gKHloICYgemgpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIG1hajY0X2xvKHhoLCB4bCwgeWgsIHlsLCB6aCwgemwpIHtcbiAgdmFyIHIgPSAoeGwgJiB5bCkgXiAoeGwgJiB6bCkgXiAoeWwgJiB6bCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczBfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAyOCk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDIpOyAgLy8gMzRcbiAgdmFyIGMyX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgNyk7ICAvLyAzOVxuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMwXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMjgpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCAyKTsgIC8vIDM0XG4gIHZhciBjMl9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDcpOyAgLy8gMzlcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMV81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE0KTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMTgpO1xuICB2YXIgYzJfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCA5KTsgIC8vIDQxXG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczFfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxNCk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDE4KTtcbiAgdmFyIGMyX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgOSk7ICAvLyA0MVxuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcwXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMSk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDgpO1xuICB2YXIgYzJfaGkgPSBzaHI2NF9oaSh4aCwgeGwsIDcpO1xuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcwXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMSk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDgpO1xuICB2YXIgYzJfbG8gPSBzaHI2NF9sbyh4aCwgeGwsIDcpO1xuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcxXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMTkpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCAyOSk7ICAvLyA2MVxuICB2YXIgYzJfaGkgPSBzaHI2NF9oaSh4aCwgeGwsIDYpO1xuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcxXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTkpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCAyOSk7ICAvLyA2MVxuICB2YXIgYzJfbG8gPSBzaHI2NF9sbyh4aCwgeGwsIDYpO1xuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIFJlcG9ydGVyID0gcmVxdWlyZSgnLi4vYmFzZScpLlJlcG9ydGVyO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxuZnVuY3Rpb24gRGVjb2RlckJ1ZmZlcihiYXNlLCBvcHRpb25zKSB7XG4gIFJlcG9ydGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJhc2UpKSB7XG4gICAgdGhpcy5lcnJvcignSW5wdXQgbm90IEJ1ZmZlcicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuYmFzZSA9IGJhc2U7XG4gIHRoaXMub2Zmc2V0ID0gMDtcbiAgdGhpcy5sZW5ndGggPSBiYXNlLmxlbmd0aDtcbn1cbmluaGVyaXRzKERlY29kZXJCdWZmZXIsIFJlcG9ydGVyKTtcbmV4cG9ydHMuRGVjb2RlckJ1ZmZlciA9IERlY29kZXJCdWZmZXI7XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiBzYXZlKCkge1xuICByZXR1cm4geyBvZmZzZXQ6IHRoaXMub2Zmc2V0LCByZXBvcnRlcjogUmVwb3J0ZXIucHJvdG90eXBlLnNhdmUuY2FsbCh0aGlzKSB9O1xufTtcblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uIHJlc3RvcmUoc2F2ZSkge1xuICAvLyBSZXR1cm4gc2tpcHBlZCBkYXRhXG4gIHZhciByZXMgPSBuZXcgRGVjb2RlckJ1ZmZlcih0aGlzLmJhc2UpO1xuICByZXMub2Zmc2V0ID0gc2F2ZS5vZmZzZXQ7XG4gIHJlcy5sZW5ndGggPSB0aGlzLm9mZnNldDtcblxuICB0aGlzLm9mZnNldCA9IHNhdmUub2Zmc2V0O1xuICBSZXBvcnRlci5wcm90b3R5cGUucmVzdG9yZS5jYWxsKHRoaXMsIHNhdmUucmVwb3J0ZXIpO1xuXG4gIHJldHVybiByZXM7XG59O1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgcmV0dXJuIHRoaXMub2Zmc2V0ID09PSB0aGlzLmxlbmd0aDtcbn07XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OChmYWlsKSB7XG4gIGlmICh0aGlzLm9mZnNldCArIDEgPD0gdGhpcy5sZW5ndGgpXG4gICAgcmV0dXJuIHRoaXMuYmFzZS5yZWFkVUludDgodGhpcy5vZmZzZXQrKywgdHJ1ZSk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5lcnJvcihmYWlsIHx8ICdEZWNvZGVyQnVmZmVyIG92ZXJydW4nKTtcbn1cblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUuc2tpcCA9IGZ1bmN0aW9uIHNraXAoYnl0ZXMsIGZhaWwpIHtcbiAgaWYgKCEodGhpcy5vZmZzZXQgKyBieXRlcyA8PSB0aGlzLmxlbmd0aCkpXG4gICAgcmV0dXJuIHRoaXMuZXJyb3IoZmFpbCB8fCAnRGVjb2RlckJ1ZmZlciBvdmVycnVuJyk7XG5cbiAgdmFyIHJlcyA9IG5ldyBEZWNvZGVyQnVmZmVyKHRoaXMuYmFzZSk7XG5cbiAgLy8gU2hhcmUgcmVwb3J0ZXIgc3RhdGVcbiAgcmVzLl9yZXBvcnRlclN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICByZXMub2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gIHJlcy5sZW5ndGggPSB0aGlzLm9mZnNldCArIGJ5dGVzO1xuICB0aGlzLm9mZnNldCArPSBieXRlcztcbiAgcmV0dXJuIHJlcztcbn1cblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUucmF3ID0gZnVuY3Rpb24gcmF3KHNhdmUpIHtcbiAgcmV0dXJuIHRoaXMuYmFzZS5zbGljZShzYXZlID8gc2F2ZS5vZmZzZXQgOiB0aGlzLm9mZnNldCwgdGhpcy5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBFbmNvZGVyQnVmZmVyKHZhbHVlLCByZXBvcnRlcikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpZiAoIShpdGVtIGluc3RhbmNlb2YgRW5jb2RlckJ1ZmZlcikpXG4gICAgICAgIGl0ZW0gPSBuZXcgRW5jb2RlckJ1ZmZlcihpdGVtLCByZXBvcnRlcik7XG4gICAgICB0aGlzLmxlbmd0aCArPSBpdGVtLmxlbmd0aDtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH0sIHRoaXMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAoISgwIDw9IHZhbHVlICYmIHZhbHVlIDw9IDB4ZmYpKVxuICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdub24tYnl0ZSBFbmNvZGVyQnVmZmVyIHZhbHVlJyk7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgodmFsdWUpO1xuICB9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5sZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdVbnN1cHBvcnRlZCB0eXBlOiAnICsgdHlwZW9mIHZhbHVlKTtcbiAgfVxufVxuZXhwb3J0cy5FbmNvZGVyQnVmZmVyID0gRW5jb2RlckJ1ZmZlcjtcblxuRW5jb2RlckJ1ZmZlci5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIGpvaW4ob3V0LCBvZmZzZXQpIHtcbiAgaWYgKCFvdXQpXG4gICAgb3V0ID0gbmV3IEJ1ZmZlcih0aGlzLmxlbmd0aCk7XG4gIGlmICghb2Zmc2V0KVxuICAgIG9mZnNldCA9IDA7XG5cbiAgaWYgKHRoaXMubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBvdXQ7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkpIHtcbiAgICB0aGlzLnZhbHVlLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgaXRlbS5qb2luKG91dCwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSBpdGVtLmxlbmd0aDtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIHRoaXMudmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgb3V0W29mZnNldF0gPSB0aGlzLnZhbHVlO1xuICAgIGVsc2UgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgIG91dC53cml0ZSh0aGlzLnZhbHVlLCBvZmZzZXQpO1xuICAgIGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcih0aGlzLnZhbHVlKSlcbiAgICAgIHRoaXMudmFsdWUuY29weShvdXQsIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IHRoaXMubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG4iLCJ2YXIgY29uc3RhbnRzID0gZXhwb3J0cztcblxuLy8gSGVscGVyXG5jb25zdGFudHMuX3JldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlKG1hcCkge1xuICB2YXIgcmVzID0ge307XG5cbiAgT2JqZWN0LmtleXMobWFwKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIC8vIENvbnZlcnQga2V5IHRvIGludGVnZXIgaWYgaXQgaXMgc3RyaW5naWZpZWRcbiAgICBpZiAoKGtleSB8IDApID09IGtleSlcbiAgICAgIGtleSA9IGtleSB8IDA7XG5cbiAgICB2YXIgdmFsdWUgPSBtYXBba2V5XTtcbiAgICByZXNbdmFsdWVdID0ga2V5O1xuICB9KTtcblxuICByZXR1cm4gcmVzO1xufTtcblxuY29uc3RhbnRzLmRlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgYXNuMSA9IHJlcXVpcmUoJy4uLy4uL2FzbjEnKTtcbnZhciBiYXNlID0gYXNuMS5iYXNlO1xudmFyIGJpZ251bSA9IGFzbjEuYmlnbnVtO1xuXG4vLyBJbXBvcnQgREVSIGNvbnN0YW50c1xudmFyIGRlciA9IGFzbjEuY29uc3RhbnRzLmRlcjtcblxuZnVuY3Rpb24gREVSRGVjb2RlcihlbnRpdHkpIHtcbiAgdGhpcy5lbmMgPSAnZGVyJztcbiAgdGhpcy5uYW1lID0gZW50aXR5Lm5hbWU7XG4gIHRoaXMuZW50aXR5ID0gZW50aXR5O1xuXG4gIC8vIENvbnN0cnVjdCBiYXNlIHRyZWVcbiAgdGhpcy50cmVlID0gbmV3IERFUk5vZGUoKTtcbiAgdGhpcy50cmVlLl9pbml0KGVudGl0eS5ib2R5KTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IERFUkRlY29kZXI7XG5cbkRFUkRlY29kZXIucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShkYXRhLCBvcHRpb25zKSB7XG4gIGlmICghKGRhdGEgaW5zdGFuY2VvZiBiYXNlLkRlY29kZXJCdWZmZXIpKVxuICAgIGRhdGEgPSBuZXcgYmFzZS5EZWNvZGVyQnVmZmVyKGRhdGEsIG9wdGlvbnMpO1xuXG4gIHJldHVybiB0aGlzLnRyZWUuX2RlY29kZShkYXRhLCBvcHRpb25zKTtcbn07XG5cbi8vIFRyZWUgbWV0aG9kc1xuXG5mdW5jdGlvbiBERVJOb2RlKHBhcmVudCkge1xuICBiYXNlLk5vZGUuY2FsbCh0aGlzLCAnZGVyJywgcGFyZW50KTtcbn1cbmluaGVyaXRzKERFUk5vZGUsIGJhc2UuTm9kZSk7XG5cbkRFUk5vZGUucHJvdG90eXBlLl9wZWVrVGFnID0gZnVuY3Rpb24gcGVla1RhZyhidWZmZXIsIHRhZywgYW55KSB7XG4gIGlmIChidWZmZXIuaXNFbXB0eSgpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB2YXIgc3RhdGUgPSBidWZmZXIuc2F2ZSgpO1xuICB2YXIgZGVjb2RlZFRhZyA9IGRlckRlY29kZVRhZyhidWZmZXIsICdGYWlsZWQgdG8gcGVlayB0YWc6IFwiJyArIHRhZyArICdcIicpO1xuICBpZiAoYnVmZmVyLmlzRXJyb3IoZGVjb2RlZFRhZykpXG4gICAgcmV0dXJuIGRlY29kZWRUYWc7XG5cbiAgYnVmZmVyLnJlc3RvcmUoc3RhdGUpO1xuXG4gIHJldHVybiBkZWNvZGVkVGFnLnRhZyA9PT0gdGFnIHx8IGRlY29kZWRUYWcudGFnU3RyID09PSB0YWcgfHxcbiAgICAoZGVjb2RlZFRhZy50YWdTdHIgKyAnb2YnKSA9PT0gdGFnIHx8IGFueTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVUYWcgPSBmdW5jdGlvbiBkZWNvZGVUYWcoYnVmZmVyLCB0YWcsIGFueSkge1xuICB2YXIgZGVjb2RlZFRhZyA9IGRlckRlY29kZVRhZyhidWZmZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdGYWlsZWQgdG8gZGVjb2RlIHRhZyBvZiBcIicgKyB0YWcgKyAnXCInKTtcbiAgaWYgKGJ1ZmZlci5pc0Vycm9yKGRlY29kZWRUYWcpKVxuICAgIHJldHVybiBkZWNvZGVkVGFnO1xuXG4gIHZhciBsZW4gPSBkZXJEZWNvZGVMZW4oYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGRlY29kZWRUYWcucHJpbWl0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICdGYWlsZWQgdG8gZ2V0IGxlbmd0aCBvZiBcIicgKyB0YWcgKyAnXCInKTtcblxuICAvLyBGYWlsdXJlXG4gIGlmIChidWZmZXIuaXNFcnJvcihsZW4pKVxuICAgIHJldHVybiBsZW47XG5cbiAgaWYgKCFhbnkgJiZcbiAgICAgIGRlY29kZWRUYWcudGFnICE9PSB0YWcgJiZcbiAgICAgIGRlY29kZWRUYWcudGFnU3RyICE9PSB0YWcgJiZcbiAgICAgIGRlY29kZWRUYWcudGFnU3RyICsgJ29mJyAhPT0gdGFnKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5lcnJvcignRmFpbGVkIHRvIG1hdGNoIHRhZzogXCInICsgdGFnICsgJ1wiJyk7XG4gIH1cblxuICBpZiAoZGVjb2RlZFRhZy5wcmltaXRpdmUgfHwgbGVuICE9PSBudWxsKVxuICAgIHJldHVybiBidWZmZXIuc2tpcChsZW4sICdGYWlsZWQgdG8gbWF0Y2ggYm9keSBvZjogXCInICsgdGFnICsgJ1wiJyk7XG5cbiAgLy8gSW5kZWZpbml0ZSBsZW5ndGguLi4gZmluZCBFTkQgdGFnXG4gIHZhciBzdGF0ZSA9IGJ1ZmZlci5zYXZlKCk7XG4gIHZhciByZXMgPSB0aGlzLl9za2lwVW50aWxFbmQoXG4gICAgICBidWZmZXIsXG4gICAgICAnRmFpbGVkIHRvIHNraXAgaW5kZWZpbml0ZSBsZW5ndGggYm9keTogXCInICsgdGhpcy50YWcgKyAnXCInKTtcbiAgaWYgKGJ1ZmZlci5pc0Vycm9yKHJlcykpXG4gICAgcmV0dXJuIHJlcztcblxuICBsZW4gPSBidWZmZXIub2Zmc2V0IC0gc3RhdGUub2Zmc2V0O1xuICBidWZmZXIucmVzdG9yZShzdGF0ZSk7XG4gIHJldHVybiBidWZmZXIuc2tpcChsZW4sICdGYWlsZWQgdG8gbWF0Y2ggYm9keSBvZjogXCInICsgdGFnICsgJ1wiJyk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fc2tpcFVudGlsRW5kID0gZnVuY3Rpb24gc2tpcFVudGlsRW5kKGJ1ZmZlciwgZmFpbCkge1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHZhciB0YWcgPSBkZXJEZWNvZGVUYWcoYnVmZmVyLCBmYWlsKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IodGFnKSlcbiAgICAgIHJldHVybiB0YWc7XG4gICAgdmFyIGxlbiA9IGRlckRlY29kZUxlbihidWZmZXIsIHRhZy5wcmltaXRpdmUsIGZhaWwpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcihsZW4pKVxuICAgICAgcmV0dXJuIGxlbjtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRhZy5wcmltaXRpdmUgfHwgbGVuICE9PSBudWxsKVxuICAgICAgcmVzID0gYnVmZmVyLnNraXAobGVuKVxuICAgIGVsc2VcbiAgICAgIHJlcyA9IHRoaXMuX3NraXBVbnRpbEVuZChidWZmZXIsIGZhaWwpO1xuXG4gICAgLy8gRmFpbHVyZVxuICAgIGlmIChidWZmZXIuaXNFcnJvcihyZXMpKVxuICAgICAgcmV0dXJuIHJlcztcblxuICAgIGlmICh0YWcudGFnU3RyID09PSAnZW5kJylcbiAgICAgIGJyZWFrO1xuICB9XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlTGlzdCA9IGZ1bmN0aW9uIGRlY29kZUxpc3QoYnVmZmVyLCB0YWcsIGRlY29kZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHdoaWxlICghYnVmZmVyLmlzRW1wdHkoKSkge1xuICAgIHZhciBwb3NzaWJsZUVuZCA9IHRoaXMuX3BlZWtUYWcoYnVmZmVyLCAnZW5kJyk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHBvc3NpYmxlRW5kKSlcbiAgICAgIHJldHVybiBwb3NzaWJsZUVuZDtcblxuICAgIHZhciByZXMgPSBkZWNvZGVyLmRlY29kZShidWZmZXIsICdkZXInLCBvcHRpb25zKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IocmVzKSAmJiBwb3NzaWJsZUVuZClcbiAgICAgIGJyZWFrO1xuICAgIHJlc3VsdC5wdXNoKHJlcyk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVTdHIgPSBmdW5jdGlvbiBkZWNvZGVTdHIoYnVmZmVyLCB0YWcpIHtcbiAgaWYgKHRhZyA9PT0gJ2JpdHN0cicpIHtcbiAgICB2YXIgdW51c2VkID0gYnVmZmVyLnJlYWRVSW50OCgpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcih1bnVzZWQpKVxuICAgICAgcmV0dXJuIHVudXNlZDtcbiAgICByZXR1cm4geyB1bnVzZWQ6IHVudXNlZCwgZGF0YTogYnVmZmVyLnJhdygpIH07XG4gIH0gZWxzZSBpZiAodGFnID09PSAnYm1wc3RyJykge1xuICAgIHZhciByYXcgPSBidWZmZXIucmF3KCk7XG4gICAgaWYgKHJhdy5sZW5ndGggJSAyID09PSAxKVxuICAgICAgcmV0dXJuIGJ1ZmZlci5lcnJvcignRGVjb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6IGJtcHN0ciBsZW5ndGggbWlzbWF0Y2gnKTtcblxuICAgIHZhciBzdHIgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhdy5sZW5ndGggLyAyOyBpKyspIHtcbiAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHJhdy5yZWFkVUludDE2QkUoaSAqIDIpKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdudW1zdHInKSB7XG4gICAgdmFyIG51bXN0ciA9IGJ1ZmZlci5yYXcoKS50b1N0cmluZygnYXNjaWknKTtcbiAgICBpZiAoIXRoaXMuX2lzTnVtc3RyKG51bXN0cikpIHtcbiAgICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nIG9mIHN0cmluZyB0eXBlOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ251bXN0ciB1bnN1cHBvcnRlZCBjaGFyYWN0ZXJzJyk7XG4gICAgfVxuICAgIHJldHVybiBudW1zdHI7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnb2N0c3RyJykge1xuICAgIHJldHVybiBidWZmZXIucmF3KCk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnb2JqRGVzYycpIHtcbiAgICByZXR1cm4gYnVmZmVyLnJhdygpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3ByaW50c3RyJykge1xuICAgIHZhciBwcmludHN0ciA9IGJ1ZmZlci5yYXcoKS50b1N0cmluZygnYXNjaWknKTtcbiAgICBpZiAoIXRoaXMuX2lzUHJpbnRzdHIocHJpbnRzdHIpKSB7XG4gICAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdwcmludHN0ciB1bnN1cHBvcnRlZCBjaGFyYWN0ZXJzJyk7XG4gICAgfVxuICAgIHJldHVybiBwcmludHN0cjtcbiAgfSBlbHNlIGlmICgvc3RyJC8udGVzdCh0YWcpKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5yYXcoKS50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nIG9mIHN0cmluZyB0eXBlOiAnICsgdGFnICsgJyB1bnN1cHBvcnRlZCcpO1xuICB9XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlT2JqaWQgPSBmdW5jdGlvbiBkZWNvZGVPYmppZChidWZmZXIsIHZhbHVlcywgcmVsYXRpdmUpIHtcbiAgdmFyIHJlc3VsdDtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIHZhciBpZGVudCA9IDA7XG4gIHdoaWxlICghYnVmZmVyLmlzRW1wdHkoKSkge1xuICAgIHZhciBzdWJpZGVudCA9IGJ1ZmZlci5yZWFkVUludDgoKTtcbiAgICBpZGVudCA8PD0gNztcbiAgICBpZGVudCB8PSBzdWJpZGVudCAmIDB4N2Y7XG4gICAgaWYgKChzdWJpZGVudCAmIDB4ODApID09PSAwKSB7XG4gICAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50KTtcbiAgICAgIGlkZW50ID0gMDtcbiAgICB9XG4gIH1cbiAgaWYgKHN1YmlkZW50ICYgMHg4MClcbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50KTtcblxuICB2YXIgZmlyc3QgPSAoaWRlbnRpZmllcnNbMF0gLyA0MCkgfCAwO1xuICB2YXIgc2Vjb25kID0gaWRlbnRpZmllcnNbMF0gJSA0MDtcblxuICBpZiAocmVsYXRpdmUpXG4gICAgcmVzdWx0ID0gaWRlbnRpZmllcnM7XG4gIGVsc2VcbiAgICByZXN1bHQgPSBbZmlyc3QsIHNlY29uZF0uY29uY2F0KGlkZW50aWZpZXJzLnNsaWNlKDEpKTtcblxuICBpZiAodmFsdWVzKSB7XG4gICAgdmFyIHRtcCA9IHZhbHVlc1tyZXN1bHQuam9pbignICcpXTtcbiAgICBpZiAodG1wID09PSB1bmRlZmluZWQpXG4gICAgICB0bXAgPSB2YWx1ZXNbcmVzdWx0LmpvaW4oJy4nKV07XG4gICAgaWYgKHRtcCAhPT0gdW5kZWZpbmVkKVxuICAgICAgcmVzdWx0ID0gdG1wO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVUaW1lID0gZnVuY3Rpb24gZGVjb2RlVGltZShidWZmZXIsIHRhZykge1xuICB2YXIgc3RyID0gYnVmZmVyLnJhdygpLnRvU3RyaW5nKCk7XG4gIGlmICh0YWcgPT09ICdnZW50aW1lJykge1xuICAgIHZhciB5ZWFyID0gc3RyLnNsaWNlKDAsIDQpIHwgMDtcbiAgICB2YXIgbW9uID0gc3RyLnNsaWNlKDQsIDYpIHwgMDtcbiAgICB2YXIgZGF5ID0gc3RyLnNsaWNlKDYsIDgpIHwgMDtcbiAgICB2YXIgaG91ciA9IHN0ci5zbGljZSg4LCAxMCkgfCAwO1xuICAgIHZhciBtaW4gPSBzdHIuc2xpY2UoMTAsIDEyKSB8IDA7XG4gICAgdmFyIHNlYyA9IHN0ci5zbGljZSgxMiwgMTQpIHwgMDtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICd1dGN0aW1lJykge1xuICAgIHZhciB5ZWFyID0gc3RyLnNsaWNlKDAsIDIpIHwgMDtcbiAgICB2YXIgbW9uID0gc3RyLnNsaWNlKDIsIDQpIHwgMDtcbiAgICB2YXIgZGF5ID0gc3RyLnNsaWNlKDQsIDYpIHwgMDtcbiAgICB2YXIgaG91ciA9IHN0ci5zbGljZSg2LCA4KSB8IDA7XG4gICAgdmFyIG1pbiA9IHN0ci5zbGljZSg4LCAxMCkgfCAwO1xuICAgIHZhciBzZWMgPSBzdHIuc2xpY2UoMTAsIDEyKSB8IDA7XG4gICAgaWYgKHllYXIgPCA3MClcbiAgICAgIHllYXIgPSAyMDAwICsgeWVhcjtcbiAgICBlbHNlXG4gICAgICB5ZWFyID0gMTkwMCArIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5lcnJvcignRGVjb2RpbmcgJyArIHRhZyArICcgdGltZSBpcyBub3Qgc3VwcG9ydGVkIHlldCcpO1xuICB9XG5cbiAgcmV0dXJuIERhdGUuVVRDKHllYXIsIG1vbiAtIDEsIGRheSwgaG91ciwgbWluLCBzZWMsIDApO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZU51bGwgPSBmdW5jdGlvbiBkZWNvZGVOdWxsKGJ1ZmZlcikge1xuICByZXR1cm4gbnVsbDtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVCb29sID0gZnVuY3Rpb24gZGVjb2RlQm9vbChidWZmZXIpIHtcbiAgdmFyIHJlcyA9IGJ1ZmZlci5yZWFkVUludDgoKTtcbiAgaWYgKGJ1ZmZlci5pc0Vycm9yKHJlcykpXG4gICAgcmV0dXJuIHJlcztcbiAgZWxzZVxuICAgIHJldHVybiByZXMgIT09IDA7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlSW50ID0gZnVuY3Rpb24gZGVjb2RlSW50KGJ1ZmZlciwgdmFsdWVzKSB7XG4gIC8vIEJpZ2ludCwgcmV0dXJuIGFzIGl0IGlzIChhc3N1bWUgYmlnIGVuZGlhbilcbiAgdmFyIHJhdyA9IGJ1ZmZlci5yYXcoKTtcbiAgdmFyIHJlcyA9IG5ldyBiaWdudW0ocmF3KTtcblxuICBpZiAodmFsdWVzKVxuICAgIHJlcyA9IHZhbHVlc1tyZXMudG9TdHJpbmcoMTApXSB8fCByZXM7XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl91c2UgPSBmdW5jdGlvbiB1c2UoZW50aXR5LCBvYmopIHtcbiAgaWYgKHR5cGVvZiBlbnRpdHkgPT09ICdmdW5jdGlvbicpXG4gICAgZW50aXR5ID0gZW50aXR5KG9iaik7XG4gIHJldHVybiBlbnRpdHkuX2dldERlY29kZXIoJ2RlcicpLnRyZWU7XG59O1xuXG4vLyBVdGlsaXR5IG1ldGhvZHNcblxuZnVuY3Rpb24gZGVyRGVjb2RlVGFnKGJ1ZiwgZmFpbCkge1xuICB2YXIgdGFnID0gYnVmLnJlYWRVSW50OChmYWlsKTtcbiAgaWYgKGJ1Zi5pc0Vycm9yKHRhZykpXG4gICAgcmV0dXJuIHRhZztcblxuICB2YXIgY2xzID0gZGVyLnRhZ0NsYXNzW3RhZyA+PiA2XTtcbiAgdmFyIHByaW1pdGl2ZSA9ICh0YWcgJiAweDIwKSA9PT0gMDtcblxuICAvLyBNdWx0aS1vY3RldCB0YWcgLSBsb2FkXG4gIGlmICgodGFnICYgMHgxZikgPT09IDB4MWYpIHtcbiAgICB2YXIgb2N0ID0gdGFnO1xuICAgIHRhZyA9IDA7XG4gICAgd2hpbGUgKChvY3QgJiAweDgwKSA9PT0gMHg4MCkge1xuICAgICAgb2N0ID0gYnVmLnJlYWRVSW50OChmYWlsKTtcbiAgICAgIGlmIChidWYuaXNFcnJvcihvY3QpKVxuICAgICAgICByZXR1cm4gb2N0O1xuXG4gICAgICB0YWcgPDw9IDc7XG4gICAgICB0YWcgfD0gb2N0ICYgMHg3ZjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGFnICY9IDB4MWY7XG4gIH1cbiAgdmFyIHRhZ1N0ciA9IGRlci50YWdbdGFnXTtcblxuICByZXR1cm4ge1xuICAgIGNsczogY2xzLFxuICAgIHByaW1pdGl2ZTogcHJpbWl0aXZlLFxuICAgIHRhZzogdGFnLFxuICAgIHRhZ1N0cjogdGFnU3RyXG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlckRlY29kZUxlbihidWYsIHByaW1pdGl2ZSwgZmFpbCkge1xuICB2YXIgbGVuID0gYnVmLnJlYWRVSW50OChmYWlsKTtcbiAgaWYgKGJ1Zi5pc0Vycm9yKGxlbikpXG4gICAgcmV0dXJuIGxlbjtcblxuICAvLyBJbmRlZmluaXRlIGZvcm1cbiAgaWYgKCFwcmltaXRpdmUgJiYgbGVuID09PSAweDgwKVxuICAgIHJldHVybiBudWxsO1xuXG4gIC8vIERlZmluaXRlIGZvcm1cbiAgaWYgKChsZW4gJiAweDgwKSA9PT0gMCkge1xuICAgIC8vIFNob3J0IGZvcm1cbiAgICByZXR1cm4gbGVuO1xuICB9XG5cbiAgLy8gTG9uZyBmb3JtXG4gIHZhciBudW0gPSBsZW4gJiAweDdmO1xuICBpZiAobnVtID4gNClcbiAgICByZXR1cm4gYnVmLmVycm9yKCdsZW5ndGggb2N0ZWN0IGlzIHRvbyBsb25nJyk7XG5cbiAgbGVuID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW07IGkrKykge1xuICAgIGxlbiA8PD0gODtcbiAgICB2YXIgaiA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gICAgaWYgKGJ1Zi5pc0Vycm9yKGopKVxuICAgICAgcmV0dXJuIGo7XG4gICAgbGVuIHw9IGo7XG4gIH1cblxuICByZXR1cm4gbGVuO1xufVxuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbnZhciBhc24xID0gcmVxdWlyZSgnLi4vLi4vYXNuMScpO1xudmFyIGJhc2UgPSBhc24xLmJhc2U7XG5cbi8vIEltcG9ydCBERVIgY29uc3RhbnRzXG52YXIgZGVyID0gYXNuMS5jb25zdGFudHMuZGVyO1xuXG5mdW5jdGlvbiBERVJFbmNvZGVyKGVudGl0eSkge1xuICB0aGlzLmVuYyA9ICdkZXInO1xuICB0aGlzLm5hbWUgPSBlbnRpdHkubmFtZTtcbiAgdGhpcy5lbnRpdHkgPSBlbnRpdHk7XG5cbiAgLy8gQ29uc3RydWN0IGJhc2UgdHJlZVxuICB0aGlzLnRyZWUgPSBuZXcgREVSTm9kZSgpO1xuICB0aGlzLnRyZWUuX2luaXQoZW50aXR5LmJvZHkpO1xufTtcbm1vZHVsZS5leHBvcnRzID0gREVSRW5jb2RlcjtcblxuREVSRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIHJlcG9ydGVyKSB7XG4gIHJldHVybiB0aGlzLnRyZWUuX2VuY29kZShkYXRhLCByZXBvcnRlcikuam9pbigpO1xufTtcblxuLy8gVHJlZSBtZXRob2RzXG5cbmZ1bmN0aW9uIERFUk5vZGUocGFyZW50KSB7XG4gIGJhc2UuTm9kZS5jYWxsKHRoaXMsICdkZXInLCBwYXJlbnQpO1xufVxuaW5oZXJpdHMoREVSTm9kZSwgYmFzZS5Ob2RlKTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZUNvbXBvc2l0ZSA9IGZ1bmN0aW9uIGVuY29kZUNvbXBvc2l0ZSh0YWcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW1pdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50KSB7XG4gIHZhciBlbmNvZGVkVGFnID0gZW5jb2RlVGFnKHRhZywgcHJpbWl0aXZlLCBjbHMsIHRoaXMucmVwb3J0ZXIpO1xuXG4gIC8vIFNob3J0IGZvcm1cbiAgaWYgKGNvbnRlbnQubGVuZ3RoIDwgMHg4MCkge1xuICAgIHZhciBoZWFkZXIgPSBuZXcgQnVmZmVyKDIpO1xuICAgIGhlYWRlclswXSA9IGVuY29kZWRUYWc7XG4gICAgaGVhZGVyWzFdID0gY29udGVudC5sZW5ndGg7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWyBoZWFkZXIsIGNvbnRlbnQgXSk7XG4gIH1cblxuICAvLyBMb25nIGZvcm1cbiAgLy8gQ291bnQgb2N0ZXRzIHJlcXVpcmVkIHRvIHN0b3JlIGxlbmd0aFxuICB2YXIgbGVuT2N0ZXRzID0gMTtcbiAgZm9yICh2YXIgaSA9IGNvbnRlbnQubGVuZ3RoOyBpID49IDB4MTAwOyBpID4+PSA4KVxuICAgIGxlbk9jdGV0cysrO1xuXG4gIHZhciBoZWFkZXIgPSBuZXcgQnVmZmVyKDEgKyAxICsgbGVuT2N0ZXRzKTtcbiAgaGVhZGVyWzBdID0gZW5jb2RlZFRhZztcbiAgaGVhZGVyWzFdID0gMHg4MCB8IGxlbk9jdGV0cztcblxuICBmb3IgKHZhciBpID0gMSArIGxlbk9jdGV0cywgaiA9IGNvbnRlbnQubGVuZ3RoOyBqID4gMDsgaS0tLCBqID4+PSA4KVxuICAgIGhlYWRlcltpXSA9IGogJiAweGZmO1xuXG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFsgaGVhZGVyLCBjb250ZW50IF0pO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZVN0ciA9IGZ1bmN0aW9uIGVuY29kZVN0cihzdHIsIHRhZykge1xuICBpZiAodGFnID09PSAnYml0c3RyJykge1xuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFsgc3RyLnVudXNlZCB8IDAsIHN0ci5kYXRhIF0pO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2JtcHN0cicpIHtcbiAgICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihzdHIubGVuZ3RoICogMik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJ1Zi53cml0ZVVJbnQxNkJFKHN0ci5jaGFyQ29kZUF0KGkpLCBpICogMik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGJ1Zik7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnbnVtc3RyJykge1xuICAgIGlmICghdGhpcy5faXNOdW1zdHIoc3RyKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nIG9mIHN0cmluZyB0eXBlOiBudW1zdHIgc3VwcG9ydHMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25seSBkaWdpdHMgYW5kIHNwYWNlJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7XG4gIH0gZWxzZSBpZiAodGFnID09PSAncHJpbnRzdHInKSB7XG4gICAgaWYgKCF0aGlzLl9pc1ByaW50c3RyKHN0cikpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdFbmNvZGluZyBvZiBzdHJpbmcgdHlwZTogcHJpbnRzdHIgc3VwcG9ydHMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25seSBsYXRpbiB1cHBlciBhbmQgbG93ZXIgY2FzZSBsZXR0ZXJzLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaWdpdHMsIHNwYWNlLCBhcG9zdHJvcGhlLCBsZWZ0IGFuZCByaWd0aCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwYXJlbnRoZXNpcywgcGx1cyBzaWduLCBjb21tYSwgaHlwaGVuLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkb3QsIHNsYXNoLCBjb2xvbiwgZXF1YWwgc2lnbiwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncXVlc3Rpb24gbWFyaycpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihzdHIpO1xuICB9IGVsc2UgaWYgKC9zdHIkLy50ZXN0KHRhZykpIHtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihzdHIpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignRW5jb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6ICcgKyB0YWcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgdW5zdXBwb3J0ZWQnKTtcbiAgfVxufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZU9iamlkID0gZnVuY3Rpb24gZW5jb2RlT2JqaWQoaWQsIHZhbHVlcywgcmVsYXRpdmUpIHtcbiAgaWYgKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoIXZhbHVlcylcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdzdHJpbmcgb2JqaWQgZ2l2ZW4sIGJ1dCBubyB2YWx1ZXMgbWFwIGZvdW5kJyk7XG4gICAgaWYgKCF2YWx1ZXMuaGFzT3duUHJvcGVydHkoaWQpKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ29iamlkIG5vdCBmb3VuZCBpbiB2YWx1ZXMgbWFwJyk7XG4gICAgaWQgPSB2YWx1ZXNbaWRdLnNwbGl0KC9bXFxzXFwuXSsvZyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZC5sZW5ndGg7IGkrKylcbiAgICAgIGlkW2ldIHw9IDA7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShpZCkpIHtcbiAgICBpZCA9IGlkLnNsaWNlKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZC5sZW5ndGg7IGkrKylcbiAgICAgIGlkW2ldIHw9IDA7XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkoaWQpKSB7XG4gICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ29iamlkKCkgc2hvdWxkIGJlIGVpdGhlciBhcnJheSBvciBzdHJpbmcsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnb3Q6ICcgKyBKU09OLnN0cmluZ2lmeShpZCkpO1xuICB9XG5cbiAgaWYgKCFyZWxhdGl2ZSkge1xuICAgIGlmIChpZFsxXSA+PSA0MClcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdTZWNvbmQgb2JqaWQgaWRlbnRpZmllciBPT0InKTtcbiAgICBpZC5zcGxpY2UoMCwgMiwgaWRbMF0gKiA0MCArIGlkWzFdKTtcbiAgfVxuXG4gIC8vIENvdW50IG51bWJlciBvZiBvY3RldHNcbiAgdmFyIHNpemUgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGlkLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGlkZW50ID0gaWRbaV07XG4gICAgZm9yIChzaXplKys7IGlkZW50ID49IDB4ODA7IGlkZW50ID4+PSA3KVxuICAgICAgc2l6ZSsrO1xuICB9XG5cbiAgdmFyIG9iamlkID0gbmV3IEJ1ZmZlcihzaXplKTtcbiAgdmFyIG9mZnNldCA9IG9iamlkLmxlbmd0aCAtIDE7XG4gIGZvciAodmFyIGkgPSBpZC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBpZGVudCA9IGlkW2ldO1xuICAgIG9iamlkW29mZnNldC0tXSA9IGlkZW50ICYgMHg3ZjtcbiAgICB3aGlsZSAoKGlkZW50ID4+PSA3KSA+IDApXG4gICAgICBvYmppZFtvZmZzZXQtLV0gPSAweDgwIHwgKGlkZW50ICYgMHg3Zik7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihvYmppZCk7XG59O1xuXG5mdW5jdGlvbiB0d28obnVtKSB7XG4gIGlmIChudW0gPCAxMClcbiAgICByZXR1cm4gJzAnICsgbnVtO1xuICBlbHNlXG4gICAgcmV0dXJuIG51bTtcbn1cblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZVRpbWUgPSBmdW5jdGlvbiBlbmNvZGVUaW1lKHRpbWUsIHRhZykge1xuICB2YXIgc3RyO1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHRpbWUpO1xuXG4gIGlmICh0YWcgPT09ICdnZW50aW1lJykge1xuICAgIHN0ciA9IFtcbiAgICAgIHR3byhkYXRlLmdldEZ1bGxZZWFyKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDRGF0ZSgpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0hvdXJzKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDTWludXRlcygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ1NlY29uZHMoKSksXG4gICAgICAnWidcbiAgICBdLmpvaW4oJycpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3V0Y3RpbWUnKSB7XG4gICAgc3RyID0gW1xuICAgICAgdHdvKGRhdGUuZ2V0RnVsbFllYXIoKSAlIDEwMCksXG4gICAgICB0d28oZGF0ZS5nZXRVVENNb250aCgpICsgMSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENEYXRlKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDSG91cnMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENNaW51dGVzKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDU2Vjb25kcygpKSxcbiAgICAgICdaJ1xuICAgIF0uam9pbignJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZXBvcnRlci5lcnJvcignRW5jb2RpbmcgJyArIHRhZyArICcgdGltZSBpcyBub3Qgc3VwcG9ydGVkIHlldCcpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2VuY29kZVN0cihzdHIsICdvY3RzdHInKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVOdWxsID0gZnVuY3Rpb24gZW5jb2RlTnVsbCgpIHtcbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoJycpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZUludCA9IGZ1bmN0aW9uIGVuY29kZUludChudW0sIHZhbHVlcykge1xuICBpZiAodHlwZW9mIG51bSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoIXZhbHVlcylcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdTdHJpbmcgaW50IG9yIGVudW0gZ2l2ZW4sIGJ1dCBubyB2YWx1ZXMgbWFwJyk7XG4gICAgaWYgKCF2YWx1ZXMuaGFzT3duUHJvcGVydHkobnVtKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ1ZhbHVlcyBtYXAgZG9lc25cXCd0IGNvbnRhaW46ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkobnVtKSk7XG4gICAgfVxuICAgIG51bSA9IHZhbHVlc1tudW1dO1xuICB9XG5cbiAgLy8gQmlnbnVtLCBhc3N1bWUgYmlnIGVuZGlhblxuICBpZiAodHlwZW9mIG51bSAhPT0gJ251bWJlcicgJiYgIUJ1ZmZlci5pc0J1ZmZlcihudW0pKSB7XG4gICAgdmFyIG51bUFycmF5ID0gbnVtLnRvQXJyYXkoKTtcbiAgICBpZiAoIW51bS5zaWduICYmIG51bUFycmF5WzBdICYgMHg4MCkge1xuICAgICAgbnVtQXJyYXkudW5zaGlmdCgwKTtcbiAgICB9XG4gICAgbnVtID0gbmV3IEJ1ZmZlcihudW1BcnJheSk7XG4gIH1cblxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG51bSkpIHtcbiAgICB2YXIgc2l6ZSA9IG51bS5sZW5ndGg7XG4gICAgaWYgKG51bS5sZW5ndGggPT09IDApXG4gICAgICBzaXplKys7XG5cbiAgICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihzaXplKTtcbiAgICBudW0uY29weShvdXQpO1xuICAgIGlmIChudW0ubGVuZ3RoID09PSAwKVxuICAgICAgb3V0WzBdID0gMFxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKG91dCk7XG4gIH1cblxuICBpZiAobnVtIDwgMHg4MClcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihudW0pO1xuXG4gIGlmIChudW0gPCAweDEwMClcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbMCwgbnVtXSk7XG5cbiAgdmFyIHNpemUgPSAxO1xuICBmb3IgKHZhciBpID0gbnVtOyBpID49IDB4MTAwOyBpID4+PSA4KVxuICAgIHNpemUrKztcblxuICB2YXIgb3V0ID0gbmV3IEFycmF5KHNpemUpO1xuICBmb3IgKHZhciBpID0gb3V0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgb3V0W2ldID0gbnVtICYgMHhmZjtcbiAgICBudW0gPj49IDg7XG4gIH1cbiAgaWYob3V0WzBdICYgMHg4MCkge1xuICAgIG91dC51bnNoaWZ0KDApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIobmV3IEJ1ZmZlcihvdXQpKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVCb29sID0gZnVuY3Rpb24gZW5jb2RlQm9vbCh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcih2YWx1ZSA/IDB4ZmYgOiAwKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl91c2UgPSBmdW5jdGlvbiB1c2UoZW50aXR5LCBvYmopIHtcbiAgaWYgKHR5cGVvZiBlbnRpdHkgPT09ICdmdW5jdGlvbicpXG4gICAgZW50aXR5ID0gZW50aXR5KG9iaik7XG4gIHJldHVybiBlbnRpdHkuX2dldEVuY29kZXIoJ2RlcicpLnRyZWU7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fc2tpcERlZmF1bHQgPSBmdW5jdGlvbiBza2lwRGVmYXVsdChkYXRhQnVmZmVyLCByZXBvcnRlciwgcGFyZW50KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgdmFyIGk7XG4gIGlmIChzdGF0ZVsnZGVmYXVsdCddID09PSBudWxsKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB2YXIgZGF0YSA9IGRhdGFCdWZmZXIuam9pbigpO1xuICBpZiAoc3RhdGUuZGVmYXVsdEJ1ZmZlciA9PT0gdW5kZWZpbmVkKVxuICAgIHN0YXRlLmRlZmF1bHRCdWZmZXIgPSB0aGlzLl9lbmNvZGVWYWx1ZShzdGF0ZVsnZGVmYXVsdCddLCByZXBvcnRlciwgcGFyZW50KS5qb2luKCk7XG5cbiAgaWYgKGRhdGEubGVuZ3RoICE9PSBzdGF0ZS5kZWZhdWx0QnVmZmVyLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgZm9yIChpPTA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKVxuICAgIGlmIChkYXRhW2ldICE9PSBzdGF0ZS5kZWZhdWx0QnVmZmVyW2ldKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLy8gVXRpbGl0eSBtZXRob2RzXG5cbmZ1bmN0aW9uIGVuY29kZVRhZyh0YWcsIHByaW1pdGl2ZSwgY2xzLCByZXBvcnRlcikge1xuICB2YXIgcmVzO1xuXG4gIGlmICh0YWcgPT09ICdzZXFvZicpXG4gICAgdGFnID0gJ3NlcSc7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ3NldG9mJylcbiAgICB0YWcgPSAnc2V0JztcblxuICBpZiAoZGVyLnRhZ0J5TmFtZS5oYXNPd25Qcm9wZXJ0eSh0YWcpKVxuICAgIHJlcyA9IGRlci50YWdCeU5hbWVbdGFnXTtcbiAgZWxzZSBpZiAodHlwZW9mIHRhZyA9PT0gJ251bWJlcicgJiYgKHRhZyB8IDApID09PSB0YWcpXG4gICAgcmVzID0gdGFnO1xuICBlbHNlXG4gICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdVbmtub3duIHRhZzogJyArIHRhZyk7XG5cbiAgaWYgKHJlcyA+PSAweDFmKVxuICAgIHJldHVybiByZXBvcnRlci5lcnJvcignTXVsdGktb2N0ZXQgdGFnIGVuY29kaW5nIHVuc3VwcG9ydGVkJyk7XG5cbiAgaWYgKCFwcmltaXRpdmUpXG4gICAgcmVzIHw9IDB4MjA7XG5cbiAgcmVzIHw9IChkZXIudGFnQ2xhc3NCeU5hbWVbY2xzIHx8ICd1bml2ZXJzYWwnXSA8PCA2KTtcblxuICByZXR1cm4gcmVzO1xufVxuIiwidmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2VlZCwgbGVuKSB7XG4gIHZhciB0ID0gQnVmZmVyLmFsbG9jKDApXG4gIHZhciBpID0gMFxuICB2YXIgY1xuICB3aGlsZSAodC5sZW5ndGggPCBsZW4pIHtcbiAgICBjID0gaTJvcHMoaSsrKVxuICAgIHQgPSBCdWZmZXIuY29uY2F0KFt0LCBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKHNlZWQpLnVwZGF0ZShjKS5kaWdlc3QoKV0pXG4gIH1cbiAgcmV0dXJuIHQuc2xpY2UoMCwgbGVuKVxufVxuXG5mdW5jdGlvbiBpMm9wcyAoYykge1xuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQpXG4gIG91dC53cml0ZVVJbnQzMkJFKGMsIDApXG4gIHJldHVybiBvdXRcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geG9yIChhLCBiKSB7XG4gIHZhciBsZW4gPSBhLmxlbmd0aFxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBhW2ldIF49IGJbaV1cbiAgfVxuICByZXR1cm4gYVxufVxuIiwidmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbmZ1bmN0aW9uIHdpdGhQdWJsaWMgKHBhZGRlZE1zZywga2V5KSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShwYWRkZWRNc2dcbiAgICAudG9SZWQoQk4ubW9udChrZXkubW9kdWx1cykpXG4gICAgLnJlZFBvdyhuZXcgQk4oa2V5LnB1YmxpY0V4cG9uZW50KSlcbiAgICAuZnJvbVJlZCgpXG4gICAgLnRvQXJyYXkoKSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3aXRoUHVibGljXG4iLCIvLyBjcmVhdGVkIGZyb20gJ2NyZWF0ZS10cy1pbmRleCdcblxuZXhwb3J0ICogZnJvbSAnLi91dGlscydcbmV4cG9ydCAqIGZyb20gJy4vcG9ja2V0LWFhdCdcbiIsIi8vIGNyZWF0ZWQgZnJvbSAnY3JlYXRlLXRzLWluZGV4J1xuXG5leHBvcnQgKiBmcm9tICcuL2VudW1zJ1xuZXhwb3J0ICogZnJvbSAnLi9oZWxwZXInXG4iLCJpbXBvcnQgeyBzaGEzXzI1NiB9IGZyb20gJ2pzLXNoYTMnXG5pbXBvcnQgeyBIZWxwZXIgfSBmcm9tICcuL3V0aWxzL2hlbHBlcidcbmltcG9ydCB7IFZlcnNpb25zIH0gZnJvbSAnLi91dGlscy9lbnVtcydcblxuaW1wb3J0ICogYXMgU29kaXVtIGZyb20gJ2xpYnNvZGl1bS13cmFwcGVycydcblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gUG9ja2V0QUFUIGltcGxlbWVudGF0aW9uXG4gKiAodmVyc2lvbiAwLjAuMSBvZiB0aGUgc3BlY2lmaWNhdGlvbjpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wb2t0LW5ldHdvcmsvcG9ja2V0LWNvcmUvYmxvYi9zdGFnaW5nL2RvYy9hcHBsaWNhdGlvbi1hdXRoLXRva2VuLm1kKS5cbiAqL1xuZXhwb3J0IGNsYXNzIFBvY2tldEFBVCB7XG4gIC8qKlxuICAgKlxuICAgKiBDcmVhdGVzIGEgUG9ja2V0QUFUIG9iamVjdCwgYXV0b21hdGljYWxseSBjcmVhdGVzIHRoZVxuICAgKiBzaWduYXR1cmUgdXNpbmcgdGhlIHByb3ZpZGVkIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZlcnNpb24gLSBWZXJzaW9uIGluZm9ybWF0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xpZW50UHVibGljS2V5IC0gQ2xpZW50IFB1YmxpYyBLZXkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhcHBsaWNhdGlvblB1YmxpY0tleSAtIEFwcGxpY2F0aW9uIFB1YmxpYyBLZXkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcml2YXRlS2V5IC0gUHJpdmF0ZSBLZXkuXG4gICAqIEByZXR1cm5zIHtQb2NrZXRBQVR9IC0gUG9ja2V0IEF1dGhlbnRpY2F0aW9uIFRva2VuIG9iamVjdC5cbiAgICogQG1lbWJlcm9mIFBvY2tldEFBVFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tKFxuICAgIHZlcnNpb246IHN0cmluZyxcbiAgICBjbGllbnRQdWJsaWNLZXk6IHN0cmluZyxcbiAgICBhcHBsaWNhdGlvblB1YmxpY0tleTogc3RyaW5nLFxuICAgIHByaXZhdGVLZXk6IHN0cmluZyxcbiAgKTogUHJvbWlzZTxQb2NrZXRBQVQ+IHtcbiAgICByZXR1cm4gU29kaXVtLnJlYWR5LnRoZW4oKCkgPT4ge1xuICAgICAgaWYgKFZlcnNpb25zLmlzU3VwcG9ydGVkKHZlcnNpb24pKSB7XG4gICAgICAgIGNvbnN0IGFwcGxpY2F0aW9uU2lnbmF0dXJlID0gdGhpcy5zaWduKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZlcnNpb246IHZlcnNpb24sXG4gICAgICAgICAgICBhcHBfcHViX2tleTogYXBwbGljYXRpb25QdWJsaWNLZXksXG4gICAgICAgICAgICBjbGllbnRfcHViX2tleTogY2xpZW50UHVibGljS2V5LFxuICAgICAgICAgICAgc2lnbmF0dXJlOiAnJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHByaXZhdGVLZXksXG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIG5ldyBQb2NrZXRBQVQodmVyc2lvbiwgY2xpZW50UHVibGljS2V5LCBhcHBsaWNhdGlvblB1YmxpY0tleSwgYXBwbGljYXRpb25TaWduYXR1cmUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlBPQ0tFVCBBQVQgRVJST1JcIilcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvdmlkZWQgdmVyc2lvbiBpcyBub3Qgc3VwcG9ydGVkLicpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gR2l2ZW4gYW4gYWF0UGF5bG9hZCBvYmplY3QsIGNyZWF0ZSBhIFNIQTMgaGFzaCBvZiBpdCBhbmQgc2lnbnMgaXQgdXNpbmcgcHJpdmF0ZUtleS5cbiAgICogQHBhcmFtIGFhdFBheWxvYWQgLSBPYmplY3Qgd2l0aCB0aGUgbWFuZGF0b3J5IHBhcmFtZXRlcnMuXG4gICAqIEBwYXJhbSBwcml2YXRlS2V5IC0gUHJpdmF0ZSBLZXlcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIHNpZ24oYWF0UGF5bG9hZDogb2JqZWN0LCBwcml2YXRlS2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIC8vIEdlbmVyYXRlIHNoYTMgaGFzaCBvZiB0aGUgYWF0IHBheWxvYWQgb2JqZWN0XG4gICAgY29uc3QgaGFzaCA9IHNoYTNfMjU2LmNyZWF0ZSgpXG4gICAgaGFzaC51cGRhdGUoSlNPTi5zdHJpbmdpZnkoYWF0UGF5bG9hZCkpXG4gICAgY29uc3QgYnVmZmVyUGF5bG9hZCA9IEhlbHBlci5mcm9tSGV4KGhhc2guaGV4KCkpXG5cbiAgICBpZiAoSGVscGVyLmJ5dGVMZW5ndGgocHJpdmF0ZUtleSkgPT09IDY0ICYmIEhlbHBlci52YWxpZGF0ZUhleFN0cihwcml2YXRlS2V5KSkge1xuICAgICAgLy8gUmV0dXJuIHNpZ25lZCBhYXQgcGF5bG9hZCBoYXNoXG4gICAgICBjb25zdCBwcml2YXRlS2V5QnVmZmVyID0gSGVscGVyLmZyb21IZXgocHJpdmF0ZUtleSlcbiAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IFNvZGl1bS5jcnlwdG9fc2lnbihidWZmZXJQYXlsb2FkLCBwcml2YXRlS2V5QnVmZmVyLCAnaGV4JylcblxuICAgICAgcmV0dXJuIHNpZ25hdHVyZS5zdWJzdHJpbmcoMCwgMTI4KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBrZXkgY2FuJ3QgYmUgYW4gZW1wdHkgc3RyaW5nXCIpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlYWRvbmx5IHZlcnNpb246IHN0cmluZyA9IFZlcnNpb25zWycwLjAuMSddLnRvU3RyaW5nKClcbiAgcHVibGljIHJlYWRvbmx5IGNsaWVudFB1YmxpY0tleTogc3RyaW5nXG4gIHB1YmxpYyByZWFkb25seSBhcHBsaWNhdGlvblB1YmxpY0tleTogc3RyaW5nXG4gIHB1YmxpYyByZWFkb25seSBhcHBsaWNhdGlvblNpZ25hdHVyZTogc3RyaW5nXG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBQb2NrZXRBQVQgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZlcnNpb24gLSBWZXJzaW9uIGluZm9ybWF0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xpZW50UHVibGljS2V5IC0gQ2xpZW50IFB1YmxpYyBLZXkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhcHBsaWNhdGlvblB1YmxpY0tleSAtIEFwcGxpY2F0aW9uIFB1YmxpYyBLZXkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhcHBsaWNhdGlvblNpZ25hdHVyZSAtIEFwcGxpY2F0aW9uIFNpZ25hdHVyZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHZlcnNpb246IHN0cmluZywgY2xpZW50UHVibGljS2V5OiBzdHJpbmcsIGFwcGxpY2F0aW9uUHVibGljS2V5OiBzdHJpbmcsIGFwcGxpY2F0aW9uU2lnbmF0dXJlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uXG4gICAgdGhpcy5jbGllbnRQdWJsaWNLZXkgPSBjbGllbnRQdWJsaWNLZXlcbiAgICB0aGlzLmFwcGxpY2F0aW9uUHVibGljS2V5ID0gYXBwbGljYXRpb25QdWJsaWNLZXlcbiAgICB0aGlzLmFwcGxpY2F0aW9uU2lnbmF0dXJlID0gYXBwbGljYXRpb25TaWduYXR1cmVcbiAgICAvLyBQYXlsb2FkIHRvIHZlcmlmeSBzaWduYXR1cmVcbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgdmVyc2lvbjogdmVyc2lvbixcbiAgICAgIGFwcF9wdWJfa2V5OiBhcHBsaWNhdGlvblB1YmxpY0tleSxcbiAgICAgIGNsaWVudF9wdWJfa2V5OiBjbGllbnRQdWJsaWNLZXksXG4gICAgICBzaWduYXR1cmU6ICcnLFxuICAgIH1cbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHByb3BlcnRpZXMgZm9ybWF0LicpXG4gICAgfVxuICAgIGlmICghdGhpcy52ZXJpZnlBQVRTaWduYXR1cmUocGF5bG9hZCwgYXBwbGljYXRpb25QdWJsaWNLZXksIGFwcGxpY2F0aW9uU2lnbmF0dXJlKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBBQVQgU2lnbmF0dXJlLicpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoaXMgaXMgYSB2YWxpZCBBQVQgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHZlcnNpb24uXG4gICAqL1xuICBwdWJsaWMgaXNWYWxpZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy52ZXJzaW9uLmxlbmd0aCAhPT0gMCAmJlxuICAgICAgSGVscGVyLmJ5dGVMZW5ndGgodGhpcy5jbGllbnRQdWJsaWNLZXkpID09PSAzMiAmJlxuICAgICAgSGVscGVyLnZhbGlkYXRlSGV4U3RyKHRoaXMuY2xpZW50UHVibGljS2V5KSAmJlxuICAgICAgSGVscGVyLmJ5dGVMZW5ndGgodGhpcy5hcHBsaWNhdGlvblB1YmxpY0tleSkgPT09IDMyICYmXG4gICAgICBIZWxwZXIudmFsaWRhdGVIZXhTdHIodGhpcy5hcHBsaWNhdGlvblB1YmxpY0tleSkgJiZcbiAgICAgIEhlbHBlci52YWxpZGF0ZUhleFN0cih0aGlzLmFwcGxpY2F0aW9uU2lnbmF0dXJlKVxuICAgIClcbiAgfVxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFZlcmlmaWVzIGlmIHRoZSBhcHBsaWNhdGlvbiBzaWduYXR1cmUgYmVsb25ncyB0byB0aGUgYXBwbGljYXRpb24gcHVibGljIC5cbiAgICogQHBhcmFtIGFhdFBheWxvYWQgLSBPYmplY3Qgd2l0aCB0aGUgbWFuZGF0b3J5IHBhcmFtZXRlcnMuXG4gICAqIEBwYXJhbSBwcml2YXRlS2V5IC0gUHJpdmF0ZSBLZXlcbiAgICovXG4gIHByaXZhdGUgdmVyaWZ5QUFUU2lnbmF0dXJlKHBheWxvYWQ6IG9iamVjdCwgYXBwbGljYXRpb25QdWJsaWNLZXk6IHN0cmluZywgYXBwbGljYXRpb25TaWduYXR1cmU6IHN0cmluZykge1xuICAgIC8vIEdlbmVyYXRlIHNoYTMgaGFzaCBvZiB0aGUgYWF0IHBheWxvYWQgb2JqZWN0XG4gICAgY29uc3QgaGFzaCA9IHNoYTNfMjU2LmNyZWF0ZSgpXG4gICAgaGFzaC51cGRhdGUoSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpXG4gICAgY29uc3QgYnVmZmVyUGF5bG9hZCA9IEhlbHBlci5mcm9tSGV4KGhhc2guaGV4KCkpXG4gICAgY29uc3QgYnVmZmVyQXBwbGljYXRpb25TaWduYXR1cmUgPSBIZWxwZXIuZnJvbUhleChhcHBsaWNhdGlvblNpZ25hdHVyZSlcbiAgICBjb25zdCBidWZmZXJBcHBsaWNhdGlvblB1YmxpY0tleSA9IEhlbHBlci5mcm9tSGV4KGFwcGxpY2F0aW9uUHVibGljS2V5KVxuXG4gICAgcmV0dXJuIFNvZGl1bS5jcnlwdG9fc2lnbl92ZXJpZnlfZGV0YWNoZWQoYnVmZmVyQXBwbGljYXRpb25TaWduYXR1cmUsIGJ1ZmZlclBheWxvYWQsIGJ1ZmZlckFwcGxpY2F0aW9uUHVibGljS2V5KVxuICB9XG59XG4iLCIvKipcbiAqIFtqcy1zaGEzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZW1uMTc4L2pzLXNoYTN9XG4gKlxuICogQHZlcnNpb24gMC44LjBcbiAqIEBhdXRob3IgQ2hlbiwgWWktQ3l1YW4gW2VtbjE3OEBnbWFpbC5jb21dXG4gKiBAY29weXJpZ2h0IENoZW4sIFlpLUN5dWFuIDIwMTUtMjAxOFxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbi8qanNsaW50IGJpdHdpc2U6IHRydWUgKi9cbihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgSU5QVVRfRVJST1IgPSAnaW5wdXQgaXMgaW52YWxpZCB0eXBlJztcbiAgdmFyIEZJTkFMSVpFX0VSUk9SID0gJ2ZpbmFsaXplIGFscmVhZHkgY2FsbGVkJztcbiAgdmFyIFdJTkRPVyA9IHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnO1xuICB2YXIgcm9vdCA9IFdJTkRPVyA/IHdpbmRvdyA6IHt9O1xuICBpZiAocm9vdC5KU19TSEEzX05PX1dJTkRPVykge1xuICAgIFdJTkRPVyA9IGZhbHNlO1xuICB9XG4gIHZhciBXRUJfV09SS0VSID0gIVdJTkRPVyAmJiB0eXBlb2Ygc2VsZiA9PT0gJ29iamVjdCc7XG4gIHZhciBOT0RFX0pTID0gIXJvb3QuSlNfU0hBM19OT19OT0RFX0pTICYmIHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JyAmJiBwcm9jZXNzLnZlcnNpb25zICYmIHByb2Nlc3MudmVyc2lvbnMubm9kZTtcbiAgaWYgKE5PREVfSlMpIHtcbiAgICByb290ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFdFQl9XT1JLRVIpIHtcbiAgICByb290ID0gc2VsZjtcbiAgfVxuICB2YXIgQ09NTU9OX0pTID0gIXJvb3QuSlNfU0hBM19OT19DT01NT05fSlMgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHM7XG4gIHZhciBBTUQgPSB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQ7XG4gIHZhciBBUlJBWV9CVUZGRVIgPSAhcm9vdC5KU19TSEEzX05PX0FSUkFZX0JVRkZFUiAmJiB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnO1xuICB2YXIgSEVYX0NIQVJTID0gJzAxMjM0NTY3ODlhYmNkZWYnLnNwbGl0KCcnKTtcbiAgdmFyIFNIQUtFX1BBRERJTkcgPSBbMzEsIDc5MzYsIDIwMzE2MTYsIDUyMDA5MzY5Nl07XG4gIHZhciBDU0hBS0VfUEFERElORyA9IFs0LCAxMDI0LCAyNjIxNDQsIDY3MTA4ODY0XTtcbiAgdmFyIEtFQ0NBS19QQURESU5HID0gWzEsIDI1NiwgNjU1MzYsIDE2Nzc3MjE2XTtcbiAgdmFyIFBBRERJTkcgPSBbNiwgMTUzNiwgMzkzMjE2LCAxMDA2NjMyOTZdO1xuICB2YXIgU0hJRlQgPSBbMCwgOCwgMTYsIDI0XTtcbiAgdmFyIFJDID0gWzEsIDAsIDMyODk4LCAwLCAzMjkwNiwgMjE0NzQ4MzY0OCwgMjE0NzUxNjQxNiwgMjE0NzQ4MzY0OCwgMzI5MDcsIDAsIDIxNDc0ODM2NDksXG4gICAgMCwgMjE0NzUxNjU0NSwgMjE0NzQ4MzY0OCwgMzI3NzcsIDIxNDc0ODM2NDgsIDEzOCwgMCwgMTM2LCAwLCAyMTQ3NTE2NDI1LCAwLFxuICAgIDIxNDc0ODM2NTgsIDAsIDIxNDc1MTY1NTUsIDAsIDEzOSwgMjE0NzQ4MzY0OCwgMzI5MDUsIDIxNDc0ODM2NDgsIDMyNzcxLFxuICAgIDIxNDc0ODM2NDgsIDMyNzcwLCAyMTQ3NDgzNjQ4LCAxMjgsIDIxNDc0ODM2NDgsIDMyNzc4LCAwLCAyMTQ3NDgzNjU4LCAyMTQ3NDgzNjQ4LFxuICAgIDIxNDc1MTY1NDUsIDIxNDc0ODM2NDgsIDMyODk2LCAyMTQ3NDgzNjQ4LCAyMTQ3NDgzNjQ5LCAwLCAyMTQ3NTE2NDI0LCAyMTQ3NDgzNjQ4XTtcbiAgdmFyIEJJVFMgPSBbMjI0LCAyNTYsIDM4NCwgNTEyXTtcbiAgdmFyIFNIQUtFX0JJVFMgPSBbMTI4LCAyNTZdO1xuICB2YXIgT1VUUFVUX1RZUEVTID0gWydoZXgnLCAnYnVmZmVyJywgJ2FycmF5QnVmZmVyJywgJ2FycmF5JywgJ2RpZ2VzdCddO1xuICB2YXIgQ1NIQUtFX0JZVEVQQUQgPSB7XG4gICAgJzEyOCc6IDE2OCxcbiAgICAnMjU2JzogMTM2XG4gIH07XG5cbiAgaWYgKHJvb3QuSlNfU0hBM19OT19OT0RFX0pTIHx8ICFBcnJheS5pc0FycmF5KSB7XG4gICAgQXJyYXkuaXNBcnJheSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9O1xuICB9XG5cbiAgaWYgKEFSUkFZX0JVRkZFUiAmJiAocm9vdC5KU19TSEEzX05PX0FSUkFZX0JVRkZFUl9JU19WSUVXIHx8ICFBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgQXJyYXlCdWZmZXIuaXNWaWV3ID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iai5idWZmZXIgJiYgb2JqLmJ1ZmZlci5jb25zdHJ1Y3RvciA9PT0gQXJyYXlCdWZmZXI7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBjcmVhdGVPdXRwdXRNZXRob2QgPSBmdW5jdGlvbiAoYml0cywgcGFkZGluZywgb3V0cHV0VHlwZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgcmV0dXJuIG5ldyBLZWNjYWsoYml0cywgcGFkZGluZywgYml0cykudXBkYXRlKG1lc3NhZ2UpW291dHB1dFR5cGVdKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgY3JlYXRlU2hha2VPdXRwdXRNZXRob2QgPSBmdW5jdGlvbiAoYml0cywgcGFkZGluZywgb3V0cHV0VHlwZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSwgb3V0cHV0Qml0cykge1xuICAgICAgcmV0dXJuIG5ldyBLZWNjYWsoYml0cywgcGFkZGluZywgb3V0cHV0Qml0cykudXBkYXRlKG1lc3NhZ2UpW291dHB1dFR5cGVdKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgY3JlYXRlQ3NoYWtlT3V0cHV0TWV0aG9kID0gZnVuY3Rpb24gKGJpdHMsIHBhZGRpbmcsIG91dHB1dFR5cGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1lc3NhZ2UsIG91dHB1dEJpdHMsIG4sIHMpIHtcbiAgICAgIHJldHVybiBtZXRob2RzWydjc2hha2UnICsgYml0c10udXBkYXRlKG1lc3NhZ2UsIG91dHB1dEJpdHMsIG4sIHMpW291dHB1dFR5cGVdKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS21hY091dHB1dE1ldGhvZCA9IGZ1bmN0aW9uIChiaXRzLCBwYWRkaW5nLCBvdXRwdXRUeXBlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIG1lc3NhZ2UsIG91dHB1dEJpdHMsIHMpIHtcbiAgICAgIHJldHVybiBtZXRob2RzWydrbWFjJyArIGJpdHNdLnVwZGF0ZShrZXksIG1lc3NhZ2UsIG91dHB1dEJpdHMsIHMpW291dHB1dFR5cGVdKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgY3JlYXRlT3V0cHV0TWV0aG9kcyA9IGZ1bmN0aW9uIChtZXRob2QsIGNyZWF0ZU1ldGhvZCwgYml0cywgcGFkZGluZykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgT1VUUFVUX1RZUEVTLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIgdHlwZSA9IE9VVFBVVF9UWVBFU1tpXTtcbiAgICAgIG1ldGhvZFt0eXBlXSA9IGNyZWF0ZU1ldGhvZChiaXRzLCBwYWRkaW5nLCB0eXBlKTtcbiAgICB9XG4gICAgcmV0dXJuIG1ldGhvZDtcbiAgfTtcblxuICB2YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKGJpdHMsIHBhZGRpbmcpIHtcbiAgICB2YXIgbWV0aG9kID0gY3JlYXRlT3V0cHV0TWV0aG9kKGJpdHMsIHBhZGRpbmcsICdoZXgnKTtcbiAgICBtZXRob2QuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5ldyBLZWNjYWsoYml0cywgcGFkZGluZywgYml0cyk7XG4gICAgfTtcbiAgICBtZXRob2QudXBkYXRlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiBtZXRob2QuY3JlYXRlKCkudXBkYXRlKG1lc3NhZ2UpO1xuICAgIH07XG4gICAgcmV0dXJuIGNyZWF0ZU91dHB1dE1ldGhvZHMobWV0aG9kLCBjcmVhdGVPdXRwdXRNZXRob2QsIGJpdHMsIHBhZGRpbmcpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVTaGFrZU1ldGhvZCA9IGZ1bmN0aW9uIChiaXRzLCBwYWRkaW5nKSB7XG4gICAgdmFyIG1ldGhvZCA9IGNyZWF0ZVNoYWtlT3V0cHV0TWV0aG9kKGJpdHMsIHBhZGRpbmcsICdoZXgnKTtcbiAgICBtZXRob2QuY3JlYXRlID0gZnVuY3Rpb24gKG91dHB1dEJpdHMpIHtcbiAgICAgIHJldHVybiBuZXcgS2VjY2FrKGJpdHMsIHBhZGRpbmcsIG91dHB1dEJpdHMpO1xuICAgIH07XG4gICAgbWV0aG9kLnVwZGF0ZSA9IGZ1bmN0aW9uIChtZXNzYWdlLCBvdXRwdXRCaXRzKSB7XG4gICAgICByZXR1cm4gbWV0aG9kLmNyZWF0ZShvdXRwdXRCaXRzKS51cGRhdGUobWVzc2FnZSk7XG4gICAgfTtcbiAgICByZXR1cm4gY3JlYXRlT3V0cHV0TWV0aG9kcyhtZXRob2QsIGNyZWF0ZVNoYWtlT3V0cHV0TWV0aG9kLCBiaXRzLCBwYWRkaW5nKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlQ3NoYWtlTWV0aG9kID0gZnVuY3Rpb24gKGJpdHMsIHBhZGRpbmcpIHtcbiAgICB2YXIgdyA9IENTSEFLRV9CWVRFUEFEW2JpdHNdO1xuICAgIHZhciBtZXRob2QgPSBjcmVhdGVDc2hha2VPdXRwdXRNZXRob2QoYml0cywgcGFkZGluZywgJ2hleCcpO1xuICAgIG1ldGhvZC5jcmVhdGUgPSBmdW5jdGlvbiAob3V0cHV0Qml0cywgbiwgcykge1xuICAgICAgaWYgKCFuICYmICFzKSB7XG4gICAgICAgIHJldHVybiBtZXRob2RzWydzaGFrZScgKyBiaXRzXS5jcmVhdGUob3V0cHV0Qml0cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEtlY2NhayhiaXRzLCBwYWRkaW5nLCBvdXRwdXRCaXRzKS5ieXRlcGFkKFtuLCBzXSwgdyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBtZXRob2QudXBkYXRlID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG91dHB1dEJpdHMsIG4sIHMpIHtcbiAgICAgIHJldHVybiBtZXRob2QuY3JlYXRlKG91dHB1dEJpdHMsIG4sIHMpLnVwZGF0ZShtZXNzYWdlKTtcbiAgICB9O1xuICAgIHJldHVybiBjcmVhdGVPdXRwdXRNZXRob2RzKG1ldGhvZCwgY3JlYXRlQ3NoYWtlT3V0cHV0TWV0aG9kLCBiaXRzLCBwYWRkaW5nKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS21hY01ldGhvZCA9IGZ1bmN0aW9uIChiaXRzLCBwYWRkaW5nKSB7XG4gICAgdmFyIHcgPSBDU0hBS0VfQllURVBBRFtiaXRzXTtcbiAgICB2YXIgbWV0aG9kID0gY3JlYXRlS21hY091dHB1dE1ldGhvZChiaXRzLCBwYWRkaW5nLCAnaGV4Jyk7XG4gICAgbWV0aG9kLmNyZWF0ZSA9IGZ1bmN0aW9uIChrZXksIG91dHB1dEJpdHMsIHMpIHtcbiAgICAgIHJldHVybiBuZXcgS21hYyhiaXRzLCBwYWRkaW5nLCBvdXRwdXRCaXRzKS5ieXRlcGFkKFsnS01BQycsIHNdLCB3KS5ieXRlcGFkKFtrZXldLCB3KTtcbiAgICB9O1xuICAgIG1ldGhvZC51cGRhdGUgPSBmdW5jdGlvbiAoa2V5LCBtZXNzYWdlLCBvdXRwdXRCaXRzLCBzKSB7XG4gICAgICByZXR1cm4gbWV0aG9kLmNyZWF0ZShrZXksIG91dHB1dEJpdHMsIHMpLnVwZGF0ZShtZXNzYWdlKTtcbiAgICB9O1xuICAgIHJldHVybiBjcmVhdGVPdXRwdXRNZXRob2RzKG1ldGhvZCwgY3JlYXRlS21hY091dHB1dE1ldGhvZCwgYml0cywgcGFkZGluZyk7XG4gIH07XG5cbiAgdmFyIGFsZ29yaXRobXMgPSBbXG4gICAgeyBuYW1lOiAna2VjY2FrJywgcGFkZGluZzogS0VDQ0FLX1BBRERJTkcsIGJpdHM6IEJJVFMsIGNyZWF0ZU1ldGhvZDogY3JlYXRlTWV0aG9kIH0sXG4gICAgeyBuYW1lOiAnc2hhMycsIHBhZGRpbmc6IFBBRERJTkcsIGJpdHM6IEJJVFMsIGNyZWF0ZU1ldGhvZDogY3JlYXRlTWV0aG9kIH0sXG4gICAgeyBuYW1lOiAnc2hha2UnLCBwYWRkaW5nOiBTSEFLRV9QQURESU5HLCBiaXRzOiBTSEFLRV9CSVRTLCBjcmVhdGVNZXRob2Q6IGNyZWF0ZVNoYWtlTWV0aG9kIH0sXG4gICAgeyBuYW1lOiAnY3NoYWtlJywgcGFkZGluZzogQ1NIQUtFX1BBRERJTkcsIGJpdHM6IFNIQUtFX0JJVFMsIGNyZWF0ZU1ldGhvZDogY3JlYXRlQ3NoYWtlTWV0aG9kIH0sXG4gICAgeyBuYW1lOiAna21hYycsIHBhZGRpbmc6IENTSEFLRV9QQURESU5HLCBiaXRzOiBTSEFLRV9CSVRTLCBjcmVhdGVNZXRob2Q6IGNyZWF0ZUttYWNNZXRob2QgfVxuICBdO1xuXG4gIHZhciBtZXRob2RzID0ge30sIG1ldGhvZE5hbWVzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGdvcml0aG1zLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGFsZ29yaXRobSA9IGFsZ29yaXRobXNbaV07XG4gICAgdmFyIGJpdHMgPSBhbGdvcml0aG0uYml0cztcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGJpdHMubGVuZ3RoOyArK2opIHtcbiAgICAgIHZhciBtZXRob2ROYW1lID0gYWxnb3JpdGhtLm5hbWUgKyAnXycgKyBiaXRzW2pdO1xuICAgICAgbWV0aG9kTmFtZXMucHVzaChtZXRob2ROYW1lKTtcbiAgICAgIG1ldGhvZHNbbWV0aG9kTmFtZV0gPSBhbGdvcml0aG0uY3JlYXRlTWV0aG9kKGJpdHNbal0sIGFsZ29yaXRobS5wYWRkaW5nKTtcbiAgICAgIGlmIChhbGdvcml0aG0ubmFtZSAhPT0gJ3NoYTMnKSB7XG4gICAgICAgIHZhciBuZXdNZXRob2ROYW1lID0gYWxnb3JpdGhtLm5hbWUgKyBiaXRzW2pdO1xuICAgICAgICBtZXRob2ROYW1lcy5wdXNoKG5ld01ldGhvZE5hbWUpO1xuICAgICAgICBtZXRob2RzW25ld01ldGhvZE5hbWVdID0gbWV0aG9kc1ttZXRob2ROYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBLZWNjYWsoYml0cywgcGFkZGluZywgb3V0cHV0Qml0cykge1xuICAgIHRoaXMuYmxvY2tzID0gW107XG4gICAgdGhpcy5zID0gW107XG4gICAgdGhpcy5wYWRkaW5nID0gcGFkZGluZztcbiAgICB0aGlzLm91dHB1dEJpdHMgPSBvdXRwdXRCaXRzO1xuICAgIHRoaXMucmVzZXQgPSB0cnVlO1xuICAgIHRoaXMuZmluYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5ibG9jayA9IDA7XG4gICAgdGhpcy5zdGFydCA9IDA7XG4gICAgdGhpcy5ibG9ja0NvdW50ID0gKDE2MDAgLSAoYml0cyA8PCAxKSkgPj4gNTtcbiAgICB0aGlzLmJ5dGVDb3VudCA9IHRoaXMuYmxvY2tDb3VudCA8PCAyO1xuICAgIHRoaXMub3V0cHV0QmxvY2tzID0gb3V0cHV0Qml0cyA+PiA1O1xuICAgIHRoaXMuZXh0cmFCeXRlcyA9IChvdXRwdXRCaXRzICYgMzEpID4+IDM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDUwOyArK2kpIHtcbiAgICAgIHRoaXMuc1tpXSA9IDA7XG4gICAgfVxuICB9XG5cbiAgS2VjY2FrLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLmZpbmFsaXplZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKEZJTkFMSVpFX0VSUk9SKTtcbiAgICB9XG4gICAgdmFyIG5vdFN0cmluZywgdHlwZSA9IHR5cGVvZiBtZXNzYWdlO1xuICAgIGlmICh0eXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChtZXNzYWdlID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKElOUFVUX0VSUk9SKTtcbiAgICAgICAgfSBlbHNlIGlmIChBUlJBWV9CVUZGRVIgJiYgbWVzc2FnZS5jb25zdHJ1Y3RvciA9PT0gQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICBtZXNzYWdlID0gbmV3IFVpbnQ4QXJyYXkobWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkobWVzc2FnZSkpIHtcbiAgICAgICAgICBpZiAoIUFSUkFZX0JVRkZFUiB8fCAhQXJyYXlCdWZmZXIuaXNWaWV3KG1lc3NhZ2UpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5QVVRfRVJST1IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKElOUFVUX0VSUk9SKTtcbiAgICAgIH1cbiAgICAgIG5vdFN0cmluZyA9IHRydWU7XG4gICAgfVxuICAgIHZhciBibG9ja3MgPSB0aGlzLmJsb2NrcywgYnl0ZUNvdW50ID0gdGhpcy5ieXRlQ291bnQsIGxlbmd0aCA9IG1lc3NhZ2UubGVuZ3RoLFxuICAgICAgYmxvY2tDb3VudCA9IHRoaXMuYmxvY2tDb3VudCwgaW5kZXggPSAwLCBzID0gdGhpcy5zLCBpLCBjb2RlO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAodGhpcy5yZXNldCkge1xuICAgICAgICB0aGlzLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgIGJsb2Nrc1swXSA9IHRoaXMuYmxvY2s7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBibG9ja0NvdW50ICsgMTsgKytpKSB7XG4gICAgICAgICAgYmxvY2tzW2ldID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG5vdFN0cmluZykge1xuICAgICAgICBmb3IgKGkgPSB0aGlzLnN0YXJ0OyBpbmRleCA8IGxlbmd0aCAmJiBpIDwgYnl0ZUNvdW50OyArK2luZGV4KSB7XG4gICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gbWVzc2FnZVtpbmRleF0gPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IHRoaXMuc3RhcnQ7IGluZGV4IDwgbGVuZ3RoICYmIGkgPCBieXRlQ291bnQ7ICsraW5kZXgpIHtcbiAgICAgICAgICBjb2RlID0gbWVzc2FnZS5jaGFyQ29kZUF0KGluZGV4KTtcbiAgICAgICAgICBpZiAoY29kZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGJsb2Nrc1tpID4+IDJdIHw9IGNvZGUgPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgICAgfSBlbHNlIGlmIChjb2RlIDwgMHg4MDApIHtcbiAgICAgICAgICAgIGJsb2Nrc1tpID4+IDJdIHw9ICgweGMwIHwgKGNvZGUgPj4gNikpIDw8IFNISUZUW2krKyAmIDNdO1xuICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ODAgfCAoY29kZSAmIDB4M2YpKSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPCAweGQ4MDAgfHwgY29kZSA+PSAweGUwMDApIHtcbiAgICAgICAgICAgIGJsb2Nrc1tpID4+IDJdIHw9ICgweGUwIHwgKGNvZGUgPj4gMTIpKSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgICAgIGJsb2Nrc1tpID4+IDJdIHw9ICgweDgwIHwgKChjb2RlID4+IDYpICYgMHgzZikpIDw8IFNISUZUW2krKyAmIDNdO1xuICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ODAgfCAoY29kZSAmIDB4M2YpKSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29kZSA9IDB4MTAwMDAgKyAoKChjb2RlICYgMHgzZmYpIDw8IDEwKSB8IChtZXNzYWdlLmNoYXJDb2RlQXQoKytpbmRleCkgJiAweDNmZikpO1xuICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ZjAgfCAoY29kZSA+PiAxOCkpIDw8IFNISUZUW2krKyAmIDNdO1xuICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ODAgfCAoKGNvZGUgPj4gMTIpICYgMHgzZikpIDw8IFNISUZUW2krKyAmIDNdO1xuICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ODAgfCAoKGNvZGUgPj4gNikgJiAweDNmKSkgPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHg4MCB8IChjb2RlICYgMHgzZikpIDw8IFNISUZUW2krKyAmIDNdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5sYXN0Qnl0ZUluZGV4ID0gaTtcbiAgICAgIGlmIChpID49IGJ5dGVDb3VudCkge1xuICAgICAgICB0aGlzLnN0YXJ0ID0gaSAtIGJ5dGVDb3VudDtcbiAgICAgICAgdGhpcy5ibG9jayA9IGJsb2Nrc1tibG9ja0NvdW50XTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJsb2NrQ291bnQ7ICsraSkge1xuICAgICAgICAgIHNbaV0gXj0gYmxvY2tzW2ldO1xuICAgICAgICB9XG4gICAgICAgIGYocyk7XG4gICAgICAgIHRoaXMucmVzZXQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zdGFydCA9IGk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEtlY2Nhay5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gKHgsIHJpZ2h0KSB7XG4gICAgdmFyIG8gPSB4ICYgMjU1LCBuID0gMTtcbiAgICB2YXIgYnl0ZXMgPSBbb107XG4gICAgeCA9IHggPj4gODtcbiAgICBvID0geCAmIDI1NTtcbiAgICB3aGlsZSAobyA+IDApIHtcbiAgICAgIGJ5dGVzLnVuc2hpZnQobyk7XG4gICAgICB4ID0geCA+PiA4O1xuICAgICAgbyA9IHggJiAyNTU7XG4gICAgICArK247XG4gICAgfVxuICAgIGlmIChyaWdodCkge1xuICAgICAgYnl0ZXMucHVzaChuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnl0ZXMudW5zaGlmdChuKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGUoYnl0ZXMpO1xuICAgIHJldHVybiBieXRlcy5sZW5ndGg7XG4gIH07XG5cbiAgS2VjY2FrLnByb3RvdHlwZS5lbmNvZGVTdHJpbmcgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgdmFyIG5vdFN0cmluZywgdHlwZSA9IHR5cGVvZiBzdHI7XG4gICAgaWYgKHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKHN0ciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihJTlBVVF9FUlJPUik7XG4gICAgICAgIH0gZWxzZSBpZiAoQVJSQVlfQlVGRkVSICYmIHN0ci5jb25zdHJ1Y3RvciA9PT0gQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICBzdHIgPSBuZXcgVWludDhBcnJheShzdHIpO1xuICAgICAgICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHN0cikpIHtcbiAgICAgICAgICBpZiAoIUFSUkFZX0JVRkZFUiB8fCAhQXJyYXlCdWZmZXIuaXNWaWV3KHN0cikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihJTlBVVF9FUlJPUik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5QVVRfRVJST1IpO1xuICAgICAgfVxuICAgICAgbm90U3RyaW5nID0gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGJ5dGVzID0gMCwgbGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgICBpZiAobm90U3RyaW5nKSB7XG4gICAgICBieXRlcyA9IGxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGNvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGNvZGUgPCAweDgwKSB7XG4gICAgICAgICAgYnl0ZXMgKz0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2RlIDwgMHg4MDApIHtcbiAgICAgICAgICBieXRlcyArPSAyO1xuICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPCAweGQ4MDAgfHwgY29kZSA+PSAweGUwMDApIHtcbiAgICAgICAgICBieXRlcyArPSAzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvZGUgPSAweDEwMDAwICsgKCgoY29kZSAmIDB4M2ZmKSA8PCAxMCkgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4M2ZmKSk7XG4gICAgICAgICAgYnl0ZXMgKz0gNDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBieXRlcyArPSB0aGlzLmVuY29kZShieXRlcyAqIDgpO1xuICAgIHRoaXMudXBkYXRlKHN0cik7XG4gICAgcmV0dXJuIGJ5dGVzO1xuICB9O1xuXG4gIEtlY2Nhay5wcm90b3R5cGUuYnl0ZXBhZCA9IGZ1bmN0aW9uIChzdHJzLCB3KSB7XG4gICAgdmFyIGJ5dGVzID0gdGhpcy5lbmNvZGUodyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJzLmxlbmd0aDsgKytpKSB7XG4gICAgICBieXRlcyArPSB0aGlzLmVuY29kZVN0cmluZyhzdHJzW2ldKTtcbiAgICB9XG4gICAgdmFyIHBhZGRpbmdCeXRlcyA9IHcgLSBieXRlcyAlIHc7XG4gICAgdmFyIHplcm9zID0gW107XG4gICAgemVyb3MubGVuZ3RoID0gcGFkZGluZ0J5dGVzO1xuICAgIHRoaXMudXBkYXRlKHplcm9zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBLZWNjYWsucHJvdG90eXBlLmZpbmFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmZpbmFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmZpbmFsaXplZCA9IHRydWU7XG4gICAgdmFyIGJsb2NrcyA9IHRoaXMuYmxvY2tzLCBpID0gdGhpcy5sYXN0Qnl0ZUluZGV4LCBibG9ja0NvdW50ID0gdGhpcy5ibG9ja0NvdW50LCBzID0gdGhpcy5zO1xuICAgIGJsb2Nrc1tpID4+IDJdIHw9IHRoaXMucGFkZGluZ1tpICYgM107XG4gICAgaWYgKHRoaXMubGFzdEJ5dGVJbmRleCA9PT0gdGhpcy5ieXRlQ291bnQpIHtcbiAgICAgIGJsb2Nrc1swXSA9IGJsb2Nrc1tibG9ja0NvdW50XTtcbiAgICAgIGZvciAoaSA9IDE7IGkgPCBibG9ja0NvdW50ICsgMTsgKytpKSB7XG4gICAgICAgIGJsb2Nrc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuICAgIGJsb2Nrc1tibG9ja0NvdW50IC0gMV0gfD0gMHg4MDAwMDAwMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYmxvY2tDb3VudDsgKytpKSB7XG4gICAgICBzW2ldIF49IGJsb2Nrc1tpXTtcbiAgICB9XG4gICAgZihzKTtcbiAgfTtcblxuICBLZWNjYWsucHJvdG90eXBlLnRvU3RyaW5nID0gS2VjY2FrLnByb3RvdHlwZS5oZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5maW5hbGl6ZSgpO1xuXG4gICAgdmFyIGJsb2NrQ291bnQgPSB0aGlzLmJsb2NrQ291bnQsIHMgPSB0aGlzLnMsIG91dHB1dEJsb2NrcyA9IHRoaXMub3V0cHV0QmxvY2tzLFxuICAgICAgZXh0cmFCeXRlcyA9IHRoaXMuZXh0cmFCeXRlcywgaSA9IDAsIGogPSAwO1xuICAgIHZhciBoZXggPSAnJywgYmxvY2s7XG4gICAgd2hpbGUgKGogPCBvdXRwdXRCbG9ja3MpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBibG9ja0NvdW50ICYmIGogPCBvdXRwdXRCbG9ja3M7ICsraSwgKytqKSB7XG4gICAgICAgIGJsb2NrID0gc1tpXTtcbiAgICAgICAgaGV4ICs9IEhFWF9DSEFSU1soYmxvY2sgPj4gNCkgJiAweDBGXSArIEhFWF9DSEFSU1tibG9jayAmIDB4MEZdICtcbiAgICAgICAgICBIRVhfQ0hBUlNbKGJsb2NrID4+IDEyKSAmIDB4MEZdICsgSEVYX0NIQVJTWyhibG9jayA+PiA4KSAmIDB4MEZdICtcbiAgICAgICAgICBIRVhfQ0hBUlNbKGJsb2NrID4+IDIwKSAmIDB4MEZdICsgSEVYX0NIQVJTWyhibG9jayA+PiAxNikgJiAweDBGXSArXG4gICAgICAgICAgSEVYX0NIQVJTWyhibG9jayA+PiAyOCkgJiAweDBGXSArIEhFWF9DSEFSU1soYmxvY2sgPj4gMjQpICYgMHgwRl07XG4gICAgICB9XG4gICAgICBpZiAoaiAlIGJsb2NrQ291bnQgPT09IDApIHtcbiAgICAgICAgZihzKTtcbiAgICAgICAgaSA9IDA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChleHRyYUJ5dGVzKSB7XG4gICAgICBibG9jayA9IHNbaV07XG4gICAgICBoZXggKz0gSEVYX0NIQVJTWyhibG9jayA+PiA0KSAmIDB4MEZdICsgSEVYX0NIQVJTW2Jsb2NrICYgMHgwRl07XG4gICAgICBpZiAoZXh0cmFCeXRlcyA+IDEpIHtcbiAgICAgICAgaGV4ICs9IEhFWF9DSEFSU1soYmxvY2sgPj4gMTIpICYgMHgwRl0gKyBIRVhfQ0hBUlNbKGJsb2NrID4+IDgpICYgMHgwRl07XG4gICAgICB9XG4gICAgICBpZiAoZXh0cmFCeXRlcyA+IDIpIHtcbiAgICAgICAgaGV4ICs9IEhFWF9DSEFSU1soYmxvY2sgPj4gMjApICYgMHgwRl0gKyBIRVhfQ0hBUlNbKGJsb2NrID4+IDE2KSAmIDB4MEZdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGV4O1xuICB9O1xuXG4gIEtlY2Nhay5wcm90b3R5cGUuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5maW5hbGl6ZSgpO1xuXG4gICAgdmFyIGJsb2NrQ291bnQgPSB0aGlzLmJsb2NrQ291bnQsIHMgPSB0aGlzLnMsIG91dHB1dEJsb2NrcyA9IHRoaXMub3V0cHV0QmxvY2tzLFxuICAgICAgZXh0cmFCeXRlcyA9IHRoaXMuZXh0cmFCeXRlcywgaSA9IDAsIGogPSAwO1xuICAgIHZhciBieXRlcyA9IHRoaXMub3V0cHV0Qml0cyA+PiAzO1xuICAgIHZhciBidWZmZXI7XG4gICAgaWYgKGV4dHJhQnl0ZXMpIHtcbiAgICAgIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigob3V0cHV0QmxvY2tzICsgMSkgPDwgMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihieXRlcyk7XG4gICAgfVxuICAgIHZhciBhcnJheSA9IG5ldyBVaW50MzJBcnJheShidWZmZXIpO1xuICAgIHdoaWxlIChqIDwgb3V0cHV0QmxvY2tzKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgYmxvY2tDb3VudCAmJiBqIDwgb3V0cHV0QmxvY2tzOyArK2ksICsraikge1xuICAgICAgICBhcnJheVtqXSA9IHNbaV07XG4gICAgICB9XG4gICAgICBpZiAoaiAlIGJsb2NrQ291bnQgPT09IDApIHtcbiAgICAgICAgZihzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGV4dHJhQnl0ZXMpIHtcbiAgICAgIGFycmF5W2ldID0gc1tpXTtcbiAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5zbGljZSgwLCBieXRlcyk7XG4gICAgfVxuICAgIHJldHVybiBidWZmZXI7XG4gIH07XG5cbiAgS2VjY2FrLnByb3RvdHlwZS5idWZmZXIgPSBLZWNjYWsucHJvdG90eXBlLmFycmF5QnVmZmVyO1xuXG4gIEtlY2Nhay5wcm90b3R5cGUuZGlnZXN0ID0gS2VjY2FrLnByb3RvdHlwZS5hcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZpbmFsaXplKCk7XG5cbiAgICB2YXIgYmxvY2tDb3VudCA9IHRoaXMuYmxvY2tDb3VudCwgcyA9IHRoaXMucywgb3V0cHV0QmxvY2tzID0gdGhpcy5vdXRwdXRCbG9ja3MsXG4gICAgICBleHRyYUJ5dGVzID0gdGhpcy5leHRyYUJ5dGVzLCBpID0gMCwgaiA9IDA7XG4gICAgdmFyIGFycmF5ID0gW10sIG9mZnNldCwgYmxvY2s7XG4gICAgd2hpbGUgKGogPCBvdXRwdXRCbG9ja3MpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBibG9ja0NvdW50ICYmIGogPCBvdXRwdXRCbG9ja3M7ICsraSwgKytqKSB7XG4gICAgICAgIG9mZnNldCA9IGogPDwgMjtcbiAgICAgICAgYmxvY2sgPSBzW2ldO1xuICAgICAgICBhcnJheVtvZmZzZXRdID0gYmxvY2sgJiAweEZGO1xuICAgICAgICBhcnJheVtvZmZzZXQgKyAxXSA9IChibG9jayA+PiA4KSAmIDB4RkY7XG4gICAgICAgIGFycmF5W29mZnNldCArIDJdID0gKGJsb2NrID4+IDE2KSAmIDB4RkY7XG4gICAgICAgIGFycmF5W29mZnNldCArIDNdID0gKGJsb2NrID4+IDI0KSAmIDB4RkY7XG4gICAgICB9XG4gICAgICBpZiAoaiAlIGJsb2NrQ291bnQgPT09IDApIHtcbiAgICAgICAgZihzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGV4dHJhQnl0ZXMpIHtcbiAgICAgIG9mZnNldCA9IGogPDwgMjtcbiAgICAgIGJsb2NrID0gc1tpXTtcbiAgICAgIGFycmF5W29mZnNldF0gPSBibG9jayAmIDB4RkY7XG4gICAgICBpZiAoZXh0cmFCeXRlcyA+IDEpIHtcbiAgICAgICAgYXJyYXlbb2Zmc2V0ICsgMV0gPSAoYmxvY2sgPj4gOCkgJiAweEZGO1xuICAgICAgfVxuICAgICAgaWYgKGV4dHJhQnl0ZXMgPiAyKSB7XG4gICAgICAgIGFycmF5W29mZnNldCArIDJdID0gKGJsb2NrID4+IDE2KSAmIDB4RkY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfTtcblxuICBmdW5jdGlvbiBLbWFjKGJpdHMsIHBhZGRpbmcsIG91dHB1dEJpdHMpIHtcbiAgICBLZWNjYWsuY2FsbCh0aGlzLCBiaXRzLCBwYWRkaW5nLCBvdXRwdXRCaXRzKTtcbiAgfVxuXG4gIEttYWMucHJvdG90eXBlID0gbmV3IEtlY2NhaygpO1xuXG4gIEttYWMucHJvdG90eXBlLmZpbmFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW5jb2RlKHRoaXMub3V0cHV0Qml0cywgdHJ1ZSk7XG4gICAgcmV0dXJuIEtlY2Nhay5wcm90b3R5cGUuZmluYWxpemUuY2FsbCh0aGlzKTtcbiAgfTtcblxuICB2YXIgZiA9IGZ1bmN0aW9uIChzKSB7XG4gICAgdmFyIGgsIGwsIG4sIGMwLCBjMSwgYzIsIGMzLCBjNCwgYzUsIGM2LCBjNywgYzgsIGM5LFxuICAgICAgYjAsIGIxLCBiMiwgYjMsIGI0LCBiNSwgYjYsIGI3LCBiOCwgYjksIGIxMCwgYjExLCBiMTIsIGIxMywgYjE0LCBiMTUsIGIxNiwgYjE3LFxuICAgICAgYjE4LCBiMTksIGIyMCwgYjIxLCBiMjIsIGIyMywgYjI0LCBiMjUsIGIyNiwgYjI3LCBiMjgsIGIyOSwgYjMwLCBiMzEsIGIzMiwgYjMzLFxuICAgICAgYjM0LCBiMzUsIGIzNiwgYjM3LCBiMzgsIGIzOSwgYjQwLCBiNDEsIGI0MiwgYjQzLCBiNDQsIGI0NSwgYjQ2LCBiNDcsIGI0OCwgYjQ5O1xuICAgIGZvciAobiA9IDA7IG4gPCA0ODsgbiArPSAyKSB7XG4gICAgICBjMCA9IHNbMF0gXiBzWzEwXSBeIHNbMjBdIF4gc1szMF0gXiBzWzQwXTtcbiAgICAgIGMxID0gc1sxXSBeIHNbMTFdIF4gc1syMV0gXiBzWzMxXSBeIHNbNDFdO1xuICAgICAgYzIgPSBzWzJdIF4gc1sxMl0gXiBzWzIyXSBeIHNbMzJdIF4gc1s0Ml07XG4gICAgICBjMyA9IHNbM10gXiBzWzEzXSBeIHNbMjNdIF4gc1szM10gXiBzWzQzXTtcbiAgICAgIGM0ID0gc1s0XSBeIHNbMTRdIF4gc1syNF0gXiBzWzM0XSBeIHNbNDRdO1xuICAgICAgYzUgPSBzWzVdIF4gc1sxNV0gXiBzWzI1XSBeIHNbMzVdIF4gc1s0NV07XG4gICAgICBjNiA9IHNbNl0gXiBzWzE2XSBeIHNbMjZdIF4gc1szNl0gXiBzWzQ2XTtcbiAgICAgIGM3ID0gc1s3XSBeIHNbMTddIF4gc1syN10gXiBzWzM3XSBeIHNbNDddO1xuICAgICAgYzggPSBzWzhdIF4gc1sxOF0gXiBzWzI4XSBeIHNbMzhdIF4gc1s0OF07XG4gICAgICBjOSA9IHNbOV0gXiBzWzE5XSBeIHNbMjldIF4gc1szOV0gXiBzWzQ5XTtcblxuICAgICAgaCA9IGM4IF4gKChjMiA8PCAxKSB8IChjMyA+Pj4gMzEpKTtcbiAgICAgIGwgPSBjOSBeICgoYzMgPDwgMSkgfCAoYzIgPj4+IDMxKSk7XG4gICAgICBzWzBdIF49IGg7XG4gICAgICBzWzFdIF49IGw7XG4gICAgICBzWzEwXSBePSBoO1xuICAgICAgc1sxMV0gXj0gbDtcbiAgICAgIHNbMjBdIF49IGg7XG4gICAgICBzWzIxXSBePSBsO1xuICAgICAgc1szMF0gXj0gaDtcbiAgICAgIHNbMzFdIF49IGw7XG4gICAgICBzWzQwXSBePSBoO1xuICAgICAgc1s0MV0gXj0gbDtcbiAgICAgIGggPSBjMCBeICgoYzQgPDwgMSkgfCAoYzUgPj4+IDMxKSk7XG4gICAgICBsID0gYzEgXiAoKGM1IDw8IDEpIHwgKGM0ID4+PiAzMSkpO1xuICAgICAgc1syXSBePSBoO1xuICAgICAgc1szXSBePSBsO1xuICAgICAgc1sxMl0gXj0gaDtcbiAgICAgIHNbMTNdIF49IGw7XG4gICAgICBzWzIyXSBePSBoO1xuICAgICAgc1syM10gXj0gbDtcbiAgICAgIHNbMzJdIF49IGg7XG4gICAgICBzWzMzXSBePSBsO1xuICAgICAgc1s0Ml0gXj0gaDtcbiAgICAgIHNbNDNdIF49IGw7XG4gICAgICBoID0gYzIgXiAoKGM2IDw8IDEpIHwgKGM3ID4+PiAzMSkpO1xuICAgICAgbCA9IGMzIF4gKChjNyA8PCAxKSB8IChjNiA+Pj4gMzEpKTtcbiAgICAgIHNbNF0gXj0gaDtcbiAgICAgIHNbNV0gXj0gbDtcbiAgICAgIHNbMTRdIF49IGg7XG4gICAgICBzWzE1XSBePSBsO1xuICAgICAgc1syNF0gXj0gaDtcbiAgICAgIHNbMjVdIF49IGw7XG4gICAgICBzWzM0XSBePSBoO1xuICAgICAgc1szNV0gXj0gbDtcbiAgICAgIHNbNDRdIF49IGg7XG4gICAgICBzWzQ1XSBePSBsO1xuICAgICAgaCA9IGM0IF4gKChjOCA8PCAxKSB8IChjOSA+Pj4gMzEpKTtcbiAgICAgIGwgPSBjNSBeICgoYzkgPDwgMSkgfCAoYzggPj4+IDMxKSk7XG4gICAgICBzWzZdIF49IGg7XG4gICAgICBzWzddIF49IGw7XG4gICAgICBzWzE2XSBePSBoO1xuICAgICAgc1sxN10gXj0gbDtcbiAgICAgIHNbMjZdIF49IGg7XG4gICAgICBzWzI3XSBePSBsO1xuICAgICAgc1szNl0gXj0gaDtcbiAgICAgIHNbMzddIF49IGw7XG4gICAgICBzWzQ2XSBePSBoO1xuICAgICAgc1s0N10gXj0gbDtcbiAgICAgIGggPSBjNiBeICgoYzAgPDwgMSkgfCAoYzEgPj4+IDMxKSk7XG4gICAgICBsID0gYzcgXiAoKGMxIDw8IDEpIHwgKGMwID4+PiAzMSkpO1xuICAgICAgc1s4XSBePSBoO1xuICAgICAgc1s5XSBePSBsO1xuICAgICAgc1sxOF0gXj0gaDtcbiAgICAgIHNbMTldIF49IGw7XG4gICAgICBzWzI4XSBePSBoO1xuICAgICAgc1syOV0gXj0gbDtcbiAgICAgIHNbMzhdIF49IGg7XG4gICAgICBzWzM5XSBePSBsO1xuICAgICAgc1s0OF0gXj0gaDtcbiAgICAgIHNbNDldIF49IGw7XG5cbiAgICAgIGIwID0gc1swXTtcbiAgICAgIGIxID0gc1sxXTtcbiAgICAgIGIzMiA9IChzWzExXSA8PCA0KSB8IChzWzEwXSA+Pj4gMjgpO1xuICAgICAgYjMzID0gKHNbMTBdIDw8IDQpIHwgKHNbMTFdID4+PiAyOCk7XG4gICAgICBiMTQgPSAoc1syMF0gPDwgMykgfCAoc1syMV0gPj4+IDI5KTtcbiAgICAgIGIxNSA9IChzWzIxXSA8PCAzKSB8IChzWzIwXSA+Pj4gMjkpO1xuICAgICAgYjQ2ID0gKHNbMzFdIDw8IDkpIHwgKHNbMzBdID4+PiAyMyk7XG4gICAgICBiNDcgPSAoc1szMF0gPDwgOSkgfCAoc1szMV0gPj4+IDIzKTtcbiAgICAgIGIyOCA9IChzWzQwXSA8PCAxOCkgfCAoc1s0MV0gPj4+IDE0KTtcbiAgICAgIGIyOSA9IChzWzQxXSA8PCAxOCkgfCAoc1s0MF0gPj4+IDE0KTtcbiAgICAgIGIyMCA9IChzWzJdIDw8IDEpIHwgKHNbM10gPj4+IDMxKTtcbiAgICAgIGIyMSA9IChzWzNdIDw8IDEpIHwgKHNbMl0gPj4+IDMxKTtcbiAgICAgIGIyID0gKHNbMTNdIDw8IDEyKSB8IChzWzEyXSA+Pj4gMjApO1xuICAgICAgYjMgPSAoc1sxMl0gPDwgMTIpIHwgKHNbMTNdID4+PiAyMCk7XG4gICAgICBiMzQgPSAoc1syMl0gPDwgMTApIHwgKHNbMjNdID4+PiAyMik7XG4gICAgICBiMzUgPSAoc1syM10gPDwgMTApIHwgKHNbMjJdID4+PiAyMik7XG4gICAgICBiMTYgPSAoc1szM10gPDwgMTMpIHwgKHNbMzJdID4+PiAxOSk7XG4gICAgICBiMTcgPSAoc1szMl0gPDwgMTMpIHwgKHNbMzNdID4+PiAxOSk7XG4gICAgICBiNDggPSAoc1s0Ml0gPDwgMikgfCAoc1s0M10gPj4+IDMwKTtcbiAgICAgIGI0OSA9IChzWzQzXSA8PCAyKSB8IChzWzQyXSA+Pj4gMzApO1xuICAgICAgYjQwID0gKHNbNV0gPDwgMzApIHwgKHNbNF0gPj4+IDIpO1xuICAgICAgYjQxID0gKHNbNF0gPDwgMzApIHwgKHNbNV0gPj4+IDIpO1xuICAgICAgYjIyID0gKHNbMTRdIDw8IDYpIHwgKHNbMTVdID4+PiAyNik7XG4gICAgICBiMjMgPSAoc1sxNV0gPDwgNikgfCAoc1sxNF0gPj4+IDI2KTtcbiAgICAgIGI0ID0gKHNbMjVdIDw8IDExKSB8IChzWzI0XSA+Pj4gMjEpO1xuICAgICAgYjUgPSAoc1syNF0gPDwgMTEpIHwgKHNbMjVdID4+PiAyMSk7XG4gICAgICBiMzYgPSAoc1szNF0gPDwgMTUpIHwgKHNbMzVdID4+PiAxNyk7XG4gICAgICBiMzcgPSAoc1szNV0gPDwgMTUpIHwgKHNbMzRdID4+PiAxNyk7XG4gICAgICBiMTggPSAoc1s0NV0gPDwgMjkpIHwgKHNbNDRdID4+PiAzKTtcbiAgICAgIGIxOSA9IChzWzQ0XSA8PCAyOSkgfCAoc1s0NV0gPj4+IDMpO1xuICAgICAgYjEwID0gKHNbNl0gPDwgMjgpIHwgKHNbN10gPj4+IDQpO1xuICAgICAgYjExID0gKHNbN10gPDwgMjgpIHwgKHNbNl0gPj4+IDQpO1xuICAgICAgYjQyID0gKHNbMTddIDw8IDIzKSB8IChzWzE2XSA+Pj4gOSk7XG4gICAgICBiNDMgPSAoc1sxNl0gPDwgMjMpIHwgKHNbMTddID4+PiA5KTtcbiAgICAgIGIyNCA9IChzWzI2XSA8PCAyNSkgfCAoc1syN10gPj4+IDcpO1xuICAgICAgYjI1ID0gKHNbMjddIDw8IDI1KSB8IChzWzI2XSA+Pj4gNyk7XG4gICAgICBiNiA9IChzWzM2XSA8PCAyMSkgfCAoc1szN10gPj4+IDExKTtcbiAgICAgIGI3ID0gKHNbMzddIDw8IDIxKSB8IChzWzM2XSA+Pj4gMTEpO1xuICAgICAgYjM4ID0gKHNbNDddIDw8IDI0KSB8IChzWzQ2XSA+Pj4gOCk7XG4gICAgICBiMzkgPSAoc1s0Nl0gPDwgMjQpIHwgKHNbNDddID4+PiA4KTtcbiAgICAgIGIzMCA9IChzWzhdIDw8IDI3KSB8IChzWzldID4+PiA1KTtcbiAgICAgIGIzMSA9IChzWzldIDw8IDI3KSB8IChzWzhdID4+PiA1KTtcbiAgICAgIGIxMiA9IChzWzE4XSA8PCAyMCkgfCAoc1sxOV0gPj4+IDEyKTtcbiAgICAgIGIxMyA9IChzWzE5XSA8PCAyMCkgfCAoc1sxOF0gPj4+IDEyKTtcbiAgICAgIGI0NCA9IChzWzI5XSA8PCA3KSB8IChzWzI4XSA+Pj4gMjUpO1xuICAgICAgYjQ1ID0gKHNbMjhdIDw8IDcpIHwgKHNbMjldID4+PiAyNSk7XG4gICAgICBiMjYgPSAoc1szOF0gPDwgOCkgfCAoc1szOV0gPj4+IDI0KTtcbiAgICAgIGIyNyA9IChzWzM5XSA8PCA4KSB8IChzWzM4XSA+Pj4gMjQpO1xuICAgICAgYjggPSAoc1s0OF0gPDwgMTQpIHwgKHNbNDldID4+PiAxOCk7XG4gICAgICBiOSA9IChzWzQ5XSA8PCAxNCkgfCAoc1s0OF0gPj4+IDE4KTtcblxuICAgICAgc1swXSA9IGIwIF4gKH5iMiAmIGI0KTtcbiAgICAgIHNbMV0gPSBiMSBeICh+YjMgJiBiNSk7XG4gICAgICBzWzEwXSA9IGIxMCBeICh+YjEyICYgYjE0KTtcbiAgICAgIHNbMTFdID0gYjExIF4gKH5iMTMgJiBiMTUpO1xuICAgICAgc1syMF0gPSBiMjAgXiAofmIyMiAmIGIyNCk7XG4gICAgICBzWzIxXSA9IGIyMSBeICh+YjIzICYgYjI1KTtcbiAgICAgIHNbMzBdID0gYjMwIF4gKH5iMzIgJiBiMzQpO1xuICAgICAgc1szMV0gPSBiMzEgXiAofmIzMyAmIGIzNSk7XG4gICAgICBzWzQwXSA9IGI0MCBeICh+YjQyICYgYjQ0KTtcbiAgICAgIHNbNDFdID0gYjQxIF4gKH5iNDMgJiBiNDUpO1xuICAgICAgc1syXSA9IGIyIF4gKH5iNCAmIGI2KTtcbiAgICAgIHNbM10gPSBiMyBeICh+YjUgJiBiNyk7XG4gICAgICBzWzEyXSA9IGIxMiBeICh+YjE0ICYgYjE2KTtcbiAgICAgIHNbMTNdID0gYjEzIF4gKH5iMTUgJiBiMTcpO1xuICAgICAgc1syMl0gPSBiMjIgXiAofmIyNCAmIGIyNik7XG4gICAgICBzWzIzXSA9IGIyMyBeICh+YjI1ICYgYjI3KTtcbiAgICAgIHNbMzJdID0gYjMyIF4gKH5iMzQgJiBiMzYpO1xuICAgICAgc1szM10gPSBiMzMgXiAofmIzNSAmIGIzNyk7XG4gICAgICBzWzQyXSA9IGI0MiBeICh+YjQ0ICYgYjQ2KTtcbiAgICAgIHNbNDNdID0gYjQzIF4gKH5iNDUgJiBiNDcpO1xuICAgICAgc1s0XSA9IGI0IF4gKH5iNiAmIGI4KTtcbiAgICAgIHNbNV0gPSBiNSBeICh+YjcgJiBiOSk7XG4gICAgICBzWzE0XSA9IGIxNCBeICh+YjE2ICYgYjE4KTtcbiAgICAgIHNbMTVdID0gYjE1IF4gKH5iMTcgJiBiMTkpO1xuICAgICAgc1syNF0gPSBiMjQgXiAofmIyNiAmIGIyOCk7XG4gICAgICBzWzI1XSA9IGIyNSBeICh+YjI3ICYgYjI5KTtcbiAgICAgIHNbMzRdID0gYjM0IF4gKH5iMzYgJiBiMzgpO1xuICAgICAgc1szNV0gPSBiMzUgXiAofmIzNyAmIGIzOSk7XG4gICAgICBzWzQ0XSA9IGI0NCBeICh+YjQ2ICYgYjQ4KTtcbiAgICAgIHNbNDVdID0gYjQ1IF4gKH5iNDcgJiBiNDkpO1xuICAgICAgc1s2XSA9IGI2IF4gKH5iOCAmIGIwKTtcbiAgICAgIHNbN10gPSBiNyBeICh+YjkgJiBiMSk7XG4gICAgICBzWzE2XSA9IGIxNiBeICh+YjE4ICYgYjEwKTtcbiAgICAgIHNbMTddID0gYjE3IF4gKH5iMTkgJiBiMTEpO1xuICAgICAgc1syNl0gPSBiMjYgXiAofmIyOCAmIGIyMCk7XG4gICAgICBzWzI3XSA9IGIyNyBeICh+YjI5ICYgYjIxKTtcbiAgICAgIHNbMzZdID0gYjM2IF4gKH5iMzggJiBiMzApO1xuICAgICAgc1szN10gPSBiMzcgXiAofmIzOSAmIGIzMSk7XG4gICAgICBzWzQ2XSA9IGI0NiBeICh+YjQ4ICYgYjQwKTtcbiAgICAgIHNbNDddID0gYjQ3IF4gKH5iNDkgJiBiNDEpO1xuICAgICAgc1s4XSA9IGI4IF4gKH5iMCAmIGIyKTtcbiAgICAgIHNbOV0gPSBiOSBeICh+YjEgJiBiMyk7XG4gICAgICBzWzE4XSA9IGIxOCBeICh+YjEwICYgYjEyKTtcbiAgICAgIHNbMTldID0gYjE5IF4gKH5iMTEgJiBiMTMpO1xuICAgICAgc1syOF0gPSBiMjggXiAofmIyMCAmIGIyMik7XG4gICAgICBzWzI5XSA9IGIyOSBeICh+YjIxICYgYjIzKTtcbiAgICAgIHNbMzhdID0gYjM4IF4gKH5iMzAgJiBiMzIpO1xuICAgICAgc1szOV0gPSBiMzkgXiAofmIzMSAmIGIzMyk7XG4gICAgICBzWzQ4XSA9IGI0OCBeICh+YjQwICYgYjQyKTtcbiAgICAgIHNbNDldID0gYjQ5IF4gKH5iNDEgJiBiNDMpO1xuXG4gICAgICBzWzBdIF49IFJDW25dO1xuICAgICAgc1sxXSBePSBSQ1tuICsgMV07XG4gICAgfVxuICB9O1xuXG4gIGlmIChDT01NT05fSlMpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IG1ldGhvZHM7XG4gIH0gZWxzZSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG1ldGhvZE5hbWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICByb290W21ldGhvZE5hbWVzW2ldXSA9IG1ldGhvZHNbbWV0aG9kTmFtZXNbaV1dO1xuICAgIH1cbiAgICBpZiAoQU1EKSB7XG4gICAgICBkZWZpbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbWV0aG9kcztcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTtcbiIsIi8qIGdsb2JhbHMgX193ZWJwYWNrX2FtZF9vcHRpb25zX18gKi9cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XG4iLCIhZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHQpe1widXNlIHN0cmljdFwiO3ZhciByLGE9XCJ1aW50OGFycmF5XCIsXz10LnJlYWR5LnRoZW4oZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7aWYoMCE9PXIuX3NvZGl1bV9pbml0KCkpdGhyb3cgbmV3IEVycm9yKFwibGlic29kaXVtIHdhcyBub3QgY29ycmVjdGx5IGluaXRpYWxpemVkLlwiKTtmb3IodmFyIHQ9W1wiY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9kZWNyeXB0XCIsXCJjcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2RlY3J5cHRfZGV0YWNoZWRcIixcImNyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfZW5jcnlwdFwiLFwiY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9lbmNyeXB0X2RldGFjaGVkXCIsXCJjcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfZGVjcnlwdFwiLFwiY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX2RlY3J5cHRfZGV0YWNoZWRcIixcImNyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9lbmNyeXB0XCIsXCJjcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfZW5jcnlwdF9kZXRhY2hlZFwiLFwiY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX2tleWdlblwiLFwiY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9rZXlnZW5cIixcImNyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfZGVjcnlwdFwiLFwiY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9kZWNyeXB0X2RldGFjaGVkXCIsXCJjcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2VuY3J5cHRcIixcImNyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfZW5jcnlwdF9kZXRhY2hlZFwiLFwiY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9rZXlnZW5cIixcImNyeXB0b19hdXRoXCIsXCJjcnlwdG9fYXV0aF9obWFjc2hhMjU2XCIsXCJjcnlwdG9fYXV0aF9obWFjc2hhMjU2X2tleWdlblwiLFwiY3J5cHRvX2F1dGhfaG1hY3NoYTI1Nl92ZXJpZnlcIixcImNyeXB0b19hdXRoX2htYWNzaGE1MTJcIixcImNyeXB0b19hdXRoX2htYWNzaGE1MTJfa2V5Z2VuXCIsXCJjcnlwdG9fYXV0aF9obWFjc2hhNTEyX3ZlcmlmeVwiLFwiY3J5cHRvX2F1dGhfa2V5Z2VuXCIsXCJjcnlwdG9fYXV0aF92ZXJpZnlcIixcImNyeXB0b19ib3hfYmVmb3Jlbm1cIixcImNyeXB0b19ib3hfY3VydmUyNTUxOXhjaGFjaGEyMHBvbHkxMzA1X2tleXBhaXJcIixcImNyeXB0b19ib3hfY3VydmUyNTUxOXhjaGFjaGEyMHBvbHkxMzA1X3NlYWxcIixcImNyeXB0b19ib3hfY3VydmUyNTUxOXhjaGFjaGEyMHBvbHkxMzA1X3NlYWxfb3BlblwiLFwiY3J5cHRvX2JveF9kZXRhY2hlZFwiLFwiY3J5cHRvX2JveF9lYXN5XCIsXCJjcnlwdG9fYm94X2Vhc3lfYWZ0ZXJubVwiLFwiY3J5cHRvX2JveF9rZXlwYWlyXCIsXCJjcnlwdG9fYm94X29wZW5fZGV0YWNoZWRcIixcImNyeXB0b19ib3hfb3Blbl9lYXN5XCIsXCJjcnlwdG9fYm94X29wZW5fZWFzeV9hZnRlcm5tXCIsXCJjcnlwdG9fYm94X3NlYWxcIixcImNyeXB0b19ib3hfc2VhbF9vcGVuXCIsXCJjcnlwdG9fYm94X3NlZWRfa2V5cGFpclwiLFwiY3J5cHRvX2NvcmVfcmlzdHJldHRvMjU1X2FkZFwiLFwiY3J5cHRvX2NvcmVfcmlzdHJldHRvMjU1X2Zyb21faGFzaFwiLFwiY3J5cHRvX2NvcmVfcmlzdHJldHRvMjU1X2lzX3ZhbGlkX3BvaW50XCIsXCJjcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfcmFuZG9tXCIsXCJjcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfc2NhbGFyX2FkZFwiLFwiY3J5cHRvX2NvcmVfcmlzdHJldHRvMjU1X3NjYWxhcl9jb21wbGVtZW50XCIsXCJjcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfc2NhbGFyX2ludmVydFwiLFwiY3J5cHRvX2NvcmVfcmlzdHJldHRvMjU1X3NjYWxhcl9tdWxcIixcImNyeXB0b19jb3JlX3Jpc3RyZXR0bzI1NV9zY2FsYXJfbmVnYXRlXCIsXCJjcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfc2NhbGFyX3JhbmRvbVwiLFwiY3J5cHRvX2NvcmVfcmlzdHJldHRvMjU1X3NjYWxhcl9yZWR1Y2VcIixcImNyeXB0b19jb3JlX3Jpc3RyZXR0bzI1NV9zY2FsYXJfc3ViXCIsXCJjcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfc3ViXCIsXCJjcnlwdG9fZ2VuZXJpY2hhc2hcIixcImNyeXB0b19nZW5lcmljaGFzaF9ibGFrZTJiX3NhbHRfcGVyc29uYWxcIixcImNyeXB0b19nZW5lcmljaGFzaF9maW5hbFwiLFwiY3J5cHRvX2dlbmVyaWNoYXNoX2luaXRcIixcImNyeXB0b19nZW5lcmljaGFzaF9rZXlnZW5cIixcImNyeXB0b19nZW5lcmljaGFzaF91cGRhdGVcIixcImNyeXB0b19oYXNoXCIsXCJjcnlwdG9faGFzaF9zaGEyNTZcIixcImNyeXB0b19oYXNoX3NoYTUxMlwiLFwiY3J5cHRvX2tkZl9kZXJpdmVfZnJvbV9rZXlcIixcImNyeXB0b19rZGZfa2V5Z2VuXCIsXCJjcnlwdG9fa3hfY2xpZW50X3Nlc3Npb25fa2V5c1wiLFwiY3J5cHRvX2t4X2tleXBhaXJcIixcImNyeXB0b19reF9zZWVkX2tleXBhaXJcIixcImNyeXB0b19reF9zZXJ2ZXJfc2Vzc2lvbl9rZXlzXCIsXCJjcnlwdG9fb25ldGltZWF1dGhcIixcImNyeXB0b19vbmV0aW1lYXV0aF9maW5hbFwiLFwiY3J5cHRvX29uZXRpbWVhdXRoX2luaXRcIixcImNyeXB0b19vbmV0aW1lYXV0aF9rZXlnZW5cIixcImNyeXB0b19vbmV0aW1lYXV0aF91cGRhdGVcIixcImNyeXB0b19vbmV0aW1lYXV0aF92ZXJpZnlcIixcImNyeXB0b19wd2hhc2hcIixcImNyeXB0b19wd2hhc2hfc2NyeXB0c2Fsc2EyMDhzaGEyNTZcIixcImNyeXB0b19wd2hhc2hfc2NyeXB0c2Fsc2EyMDhzaGEyNTZfbGxcIixcImNyeXB0b19wd2hhc2hfc2NyeXB0c2Fsc2EyMDhzaGEyNTZfc3RyXCIsXCJjcnlwdG9fcHdoYXNoX3NjcnlwdHNhbHNhMjA4c2hhMjU2X3N0cl92ZXJpZnlcIixcImNyeXB0b19wd2hhc2hfc3RyXCIsXCJjcnlwdG9fcHdoYXNoX3N0cl92ZXJpZnlcIixcImNyeXB0b19zY2FsYXJtdWx0XCIsXCJjcnlwdG9fc2NhbGFybXVsdF9iYXNlXCIsXCJjcnlwdG9fc2NhbGFybXVsdF9yaXN0cmV0dG8yNTVcIixcImNyeXB0b19zY2FsYXJtdWx0X3Jpc3RyZXR0bzI1NV9iYXNlXCIsXCJjcnlwdG9fc2VjcmV0Ym94X2RldGFjaGVkXCIsXCJjcnlwdG9fc2VjcmV0Ym94X2Vhc3lcIixcImNyeXB0b19zZWNyZXRib3hfa2V5Z2VuXCIsXCJjcnlwdG9fc2VjcmV0Ym94X29wZW5fZGV0YWNoZWRcIixcImNyeXB0b19zZWNyZXRib3hfb3Blbl9lYXN5XCIsXCJjcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X2luaXRfcHVsbFwiLFwiY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9pbml0X3B1c2hcIixcImNyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfa2V5Z2VuXCIsXCJjcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X3B1bGxcIixcImNyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfcHVzaFwiLFwiY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9yZWtleVwiLFwiY3J5cHRvX3Nob3J0aGFzaFwiLFwiY3J5cHRvX3Nob3J0aGFzaF9rZXlnZW5cIixcImNyeXB0b19zaG9ydGhhc2hfc2lwaGFzaHgyNFwiLFwiY3J5cHRvX3NpZ25cIixcImNyeXB0b19zaWduX2RldGFjaGVkXCIsXCJjcnlwdG9fc2lnbl9lZDI1NTE5X3BrX3RvX2N1cnZlMjU1MTlcIixcImNyeXB0b19zaWduX2VkMjU1MTlfc2tfdG9fY3VydmUyNTUxOVwiLFwiY3J5cHRvX3NpZ25fZWQyNTUxOV9za190b19wa1wiLFwiY3J5cHRvX3NpZ25fZWQyNTUxOV9za190b19zZWVkXCIsXCJjcnlwdG9fc2lnbl9maW5hbF9jcmVhdGVcIixcImNyeXB0b19zaWduX2ZpbmFsX3ZlcmlmeVwiLFwiY3J5cHRvX3NpZ25faW5pdFwiLFwiY3J5cHRvX3NpZ25fa2V5cGFpclwiLFwiY3J5cHRvX3NpZ25fb3BlblwiLFwiY3J5cHRvX3NpZ25fc2VlZF9rZXlwYWlyXCIsXCJjcnlwdG9fc2lnbl91cGRhdGVcIixcImNyeXB0b19zaWduX3ZlcmlmeV9kZXRhY2hlZFwiLFwiY3J5cHRvX3N0cmVhbV9jaGFjaGEyMFwiLFwiY3J5cHRvX3N0cmVhbV9jaGFjaGEyMF9pZXRmX3hvclwiLFwiY3J5cHRvX3N0cmVhbV9jaGFjaGEyMF9pZXRmX3hvcl9pY1wiLFwiY3J5cHRvX3N0cmVhbV9jaGFjaGEyMF9rZXlnZW5cIixcImNyeXB0b19zdHJlYW1fY2hhY2hhMjBfeG9yXCIsXCJjcnlwdG9fc3RyZWFtX2NoYWNoYTIwX3hvcl9pY1wiLFwiY3J5cHRvX3N0cmVhbV9rZXlnZW5cIixcImNyeXB0b19zdHJlYW1feGNoYWNoYTIwX2tleWdlblwiLFwiY3J5cHRvX3N0cmVhbV94Y2hhY2hhMjBfeG9yXCIsXCJjcnlwdG9fc3RyZWFtX3hjaGFjaGEyMF94b3JfaWNcIixcInJhbmRvbWJ5dGVzX2J1ZlwiLFwicmFuZG9tYnl0ZXNfYnVmX2RldGVybWluaXN0aWNcIixcInJhbmRvbWJ5dGVzX2Nsb3NlXCIsXCJyYW5kb21ieXRlc19yYW5kb21cIixcInJhbmRvbWJ5dGVzX3NldF9pbXBsZW1lbnRhdGlvblwiLFwicmFuZG9tYnl0ZXNfc3RpclwiLFwicmFuZG9tYnl0ZXNfdW5pZm9ybVwiLFwic29kaXVtX3ZlcnNpb25fc3RyaW5nXCJdLGE9W3gsRSx3LFMsVCxZLEEsQixLLEksTSxMLE4sVSxPLFIsUCxDLEcsRCxYLFYsRixILHosaixxLFcsSixRLFosJCxlZSx0ZSxyZSxhZSxfZSxuZSxzZSxjZSxoZSxvZSxwZSx5ZSxpZSxsZSx1ZSx2ZSxkZSxnZSxiZSxmZSxtZSxrZSx4ZSxFZSx3ZSxTZSxUZSxZZSxBZSxCZSxLZSxJZSxNZSxMZSxOZSxVZSxPZSxSZSxQZSxDZSxHZSxEZSxYZSxWZSxGZSxIZSx6ZSxqZSxxZSxXZSxKZSxRZSxaZSwkZSxldCx0dCxydCxhdCxfdCxudCxzdCxjdCxodCxvdCxwdCx5dCxpdCxsdCx1dCx2dCxkdCxndCxidCxmdCxtdCxrdCx4dCxFdCx3dCxTdCxUdCxZdCxBdCxCdCxLdCxJdCxNdCxMdCxOdCxVdCxPdCxSdCxQdCxDdCxHdCxEdCxYdF0sXz0wO188YS5sZW5ndGg7XysrKVwiZnVuY3Rpb25cIj09dHlwZW9mIHJbXCJfXCIrdFtfXV0mJihlW3RbX11dPWFbX10pO3ZhciBuPVtcIlNPRElVTV9MSUJSQVJZX1ZFUlNJT05fTUFKT1JcIixcIlNPRElVTV9MSUJSQVJZX1ZFUlNJT05fTUlOT1JcIixcImNyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfQUJZVEVTXCIsXCJjcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X0tFWUJZVEVTXCIsXCJjcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X01FU1NBR0VCWVRFU19NQVhcIixcImNyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfTlBVQkJZVEVTXCIsXCJjcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X05TRUNCWVRFU1wiLFwiY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX0FCWVRFU1wiLFwiY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX0tFWUJZVEVTXCIsXCJjcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfTUVTU0FHRUJZVEVTX01BWFwiLFwiY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX05QVUJCWVRFU1wiLFwiY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX05TRUNCWVRFU1wiLFwiY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9BQllURVNcIixcImNyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfS0VZQllURVNcIixcImNyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfTUVTU0FHRUJZVEVTX01BWFwiLFwiY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9OUFVCQllURVNcIixcImNyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfTlNFQ0JZVEVTXCIsXCJjcnlwdG9fYXV0aF9CWVRFU1wiLFwiY3J5cHRvX2F1dGhfS0VZQllURVNcIixcImNyeXB0b19hdXRoX2htYWNzaGEyNTZfQllURVNcIixcImNyeXB0b19hdXRoX2htYWNzaGEyNTZfS0VZQllURVNcIixcImNyeXB0b19hdXRoX2htYWNzaGE1MTJfQllURVNcIixcImNyeXB0b19hdXRoX2htYWNzaGE1MTJfS0VZQllURVNcIixcImNyeXB0b19ib3hfQkVGT1JFTk1CWVRFU1wiLFwiY3J5cHRvX2JveF9NQUNCWVRFU1wiLFwiY3J5cHRvX2JveF9NRVNTQUdFQllURVNfTUFYXCIsXCJjcnlwdG9fYm94X05PTkNFQllURVNcIixcImNyeXB0b19ib3hfUFVCTElDS0VZQllURVNcIixcImNyeXB0b19ib3hfU0VBTEJZVEVTXCIsXCJjcnlwdG9fYm94X1NFQ1JFVEtFWUJZVEVTXCIsXCJjcnlwdG9fYm94X1NFRURCWVRFU1wiLFwiY3J5cHRvX2JveF9jdXJ2ZTI1NTE5eGNoYWNoYTIwcG9seTEzMDVfTk9OQ0VCWVRFU1wiLFwiY3J5cHRvX2JveF9jdXJ2ZTI1NTE5eGNoYWNoYTIwcG9seTEzMDVfUFVCTElDS0VZQllURVNcIixcImNyeXB0b19ib3hfY3VydmUyNTUxOXhjaGFjaGEyMHBvbHkxMzA1X1NFQ1JFVEtFWUJZVEVTXCIsXCJjcnlwdG9fY29yZV9oY2hhY2hhMjBfQ09OU1RCWVRFU1wiLFwiY3J5cHRvX2NvcmVfaGNoYWNoYTIwX0lOUFVUQllURVNcIixcImNyeXB0b19jb3JlX2hjaGFjaGEyMF9LRVlCWVRFU1wiLFwiY3J5cHRvX2NvcmVfaGNoYWNoYTIwX09VVFBVVEJZVEVTXCIsXCJjcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfQllURVNcIixcImNyeXB0b19jb3JlX3Jpc3RyZXR0bzI1NV9IQVNIQllURVNcIixcImNyeXB0b19jb3JlX3Jpc3RyZXR0bzI1NV9OT05SRURVQ0VEU0NBTEFSQllURVNcIixcImNyeXB0b19jb3JlX3Jpc3RyZXR0bzI1NV9TQ0FMQVJCWVRFU1wiLFwiY3J5cHRvX2dlbmVyaWNoYXNoX0JZVEVTXCIsXCJjcnlwdG9fZ2VuZXJpY2hhc2hfQllURVNfTUFYXCIsXCJjcnlwdG9fZ2VuZXJpY2hhc2hfQllURVNfTUlOXCIsXCJjcnlwdG9fZ2VuZXJpY2hhc2hfS0VZQllURVNcIixcImNyeXB0b19nZW5lcmljaGFzaF9LRVlCWVRFU19NQVhcIixcImNyeXB0b19nZW5lcmljaGFzaF9LRVlCWVRFU19NSU5cIixcImNyeXB0b19nZW5lcmljaGFzaF9ibGFrZTJiX0JZVEVTXCIsXCJjcnlwdG9fZ2VuZXJpY2hhc2hfYmxha2UyYl9CWVRFU19NQVhcIixcImNyeXB0b19nZW5lcmljaGFzaF9ibGFrZTJiX0JZVEVTX01JTlwiLFwiY3J5cHRvX2dlbmVyaWNoYXNoX2JsYWtlMmJfS0VZQllURVNcIixcImNyeXB0b19nZW5lcmljaGFzaF9ibGFrZTJiX0tFWUJZVEVTX01BWFwiLFwiY3J5cHRvX2dlbmVyaWNoYXNoX2JsYWtlMmJfS0VZQllURVNfTUlOXCIsXCJjcnlwdG9fZ2VuZXJpY2hhc2hfYmxha2UyYl9QRVJTT05BTEJZVEVTXCIsXCJjcnlwdG9fZ2VuZXJpY2hhc2hfYmxha2UyYl9TQUxUQllURVNcIixcImNyeXB0b19oYXNoX0JZVEVTXCIsXCJjcnlwdG9faGFzaF9zaGEyNTZfQllURVNcIixcImNyeXB0b19oYXNoX3NoYTUxMl9CWVRFU1wiLFwiY3J5cHRvX2tkZl9CWVRFU19NQVhcIixcImNyeXB0b19rZGZfQllURVNfTUlOXCIsXCJjcnlwdG9fa2RmX0NPTlRFWFRCWVRFU1wiLFwiY3J5cHRvX2tkZl9LRVlCWVRFU1wiLFwiY3J5cHRvX2t4X1BVQkxJQ0tFWUJZVEVTXCIsXCJjcnlwdG9fa3hfU0VDUkVUS0VZQllURVNcIixcImNyeXB0b19reF9TRUVEQllURVNcIixcImNyeXB0b19reF9TRVNTSU9OS0VZQllURVNcIixcImNyeXB0b19vbmV0aW1lYXV0aF9CWVRFU1wiLFwiY3J5cHRvX29uZXRpbWVhdXRoX0tFWUJZVEVTXCIsXCJjcnlwdG9fcHdoYXNoX0FMR19BUkdPTjJJMTNcIixcImNyeXB0b19wd2hhc2hfQUxHX0FSR09OMklEMTNcIixcImNyeXB0b19wd2hhc2hfQUxHX0RFRkFVTFRcIixcImNyeXB0b19wd2hhc2hfQllURVNfTUFYXCIsXCJjcnlwdG9fcHdoYXNoX0JZVEVTX01JTlwiLFwiY3J5cHRvX3B3aGFzaF9NRU1MSU1JVF9JTlRFUkFDVElWRVwiLFwiY3J5cHRvX3B3aGFzaF9NRU1MSU1JVF9NQVhcIixcImNyeXB0b19wd2hhc2hfTUVNTElNSVRfTUlOXCIsXCJjcnlwdG9fcHdoYXNoX01FTUxJTUlUX01PREVSQVRFXCIsXCJjcnlwdG9fcHdoYXNoX01FTUxJTUlUX1NFTlNJVElWRVwiLFwiY3J5cHRvX3B3aGFzaF9PUFNMSU1JVF9JTlRFUkFDVElWRVwiLFwiY3J5cHRvX3B3aGFzaF9PUFNMSU1JVF9NQVhcIixcImNyeXB0b19wd2hhc2hfT1BTTElNSVRfTUlOXCIsXCJjcnlwdG9fcHdoYXNoX09QU0xJTUlUX01PREVSQVRFXCIsXCJjcnlwdG9fcHdoYXNoX09QU0xJTUlUX1NFTlNJVElWRVwiLFwiY3J5cHRvX3B3aGFzaF9QQVNTV0RfTUFYXCIsXCJjcnlwdG9fcHdoYXNoX1BBU1NXRF9NSU5cIixcImNyeXB0b19wd2hhc2hfU0FMVEJZVEVTXCIsXCJjcnlwdG9fcHdoYXNoX1NUUkJZVEVTXCIsXCJjcnlwdG9fcHdoYXNoX1NUUl9WRVJJRllcIixcImNyeXB0b19wd2hhc2hfc2NyeXB0c2Fsc2EyMDhzaGEyNTZfQllURVNfTUFYXCIsXCJjcnlwdG9fcHdoYXNoX3NjcnlwdHNhbHNhMjA4c2hhMjU2X0JZVEVTX01JTlwiLFwiY3J5cHRvX3B3aGFzaF9zY3J5cHRzYWxzYTIwOHNoYTI1Nl9NRU1MSU1JVF9JTlRFUkFDVElWRVwiLFwiY3J5cHRvX3B3aGFzaF9zY3J5cHRzYWxzYTIwOHNoYTI1Nl9NRU1MSU1JVF9NQVhcIixcImNyeXB0b19wd2hhc2hfc2NyeXB0c2Fsc2EyMDhzaGEyNTZfTUVNTElNSVRfTUlOXCIsXCJjcnlwdG9fcHdoYXNoX3NjcnlwdHNhbHNhMjA4c2hhMjU2X01FTUxJTUlUX1NFTlNJVElWRVwiLFwiY3J5cHRvX3B3aGFzaF9zY3J5cHRzYWxzYTIwOHNoYTI1Nl9PUFNMSU1JVF9JTlRFUkFDVElWRVwiLFwiY3J5cHRvX3B3aGFzaF9zY3J5cHRzYWxzYTIwOHNoYTI1Nl9PUFNMSU1JVF9NQVhcIixcImNyeXB0b19wd2hhc2hfc2NyeXB0c2Fsc2EyMDhzaGEyNTZfT1BTTElNSVRfTUlOXCIsXCJjcnlwdG9fcHdoYXNoX3NjcnlwdHNhbHNhMjA4c2hhMjU2X09QU0xJTUlUX1NFTlNJVElWRVwiLFwiY3J5cHRvX3B3aGFzaF9zY3J5cHRzYWxzYTIwOHNoYTI1Nl9TQUxUQllURVNcIixcImNyeXB0b19wd2hhc2hfc2NyeXB0c2Fsc2EyMDhzaGEyNTZfU1RSQllURVNcIixcImNyeXB0b19wd2hhc2hfc2NyeXB0c2Fsc2EyMDhzaGEyNTZfU1RSX1ZFUklGWVwiLFwiY3J5cHRvX3NjYWxhcm11bHRfQllURVNcIixcImNyeXB0b19zY2FsYXJtdWx0X1NDQUxBUkJZVEVTXCIsXCJjcnlwdG9fc2NhbGFybXVsdF9yaXN0cmV0dG8yNTVfQllURVNcIixcImNyeXB0b19zY2FsYXJtdWx0X3Jpc3RyZXR0bzI1NV9TQ0FMQVJCWVRFU1wiLFwiY3J5cHRvX3NlY3JldGJveF9LRVlCWVRFU1wiLFwiY3J5cHRvX3NlY3JldGJveF9NQUNCWVRFU1wiLFwiY3J5cHRvX3NlY3JldGJveF9NRVNTQUdFQllURVNfTUFYXCIsXCJjcnlwdG9fc2VjcmV0Ym94X05PTkNFQllURVNcIixcImNyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfQUJZVEVTXCIsXCJjcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X0hFQURFUkJZVEVTXCIsXCJjcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X0tFWUJZVEVTXCIsXCJjcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X01FU1NBR0VCWVRFU19NQVhcIixcImNyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfTUVTU0FHRVNCWVRFU19NQVhcIixcImNyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfTlBVQkJZVEVTXCIsXCJjcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X1RBR19GSU5BTFwiLFwiY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9UQUdfTUVTU0FHRVwiLFwiY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9UQUdfUFVTSFwiLFwiY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9UQUdfUkVLRVlcIixcImNyeXB0b19zaG9ydGhhc2hfQllURVNcIixcImNyeXB0b19zaG9ydGhhc2hfS0VZQllURVNcIixcImNyeXB0b19zaG9ydGhhc2hfc2lwaGFzaHgyNF9CWVRFU1wiLFwiY3J5cHRvX3Nob3J0aGFzaF9zaXBoYXNoeDI0X0tFWUJZVEVTXCIsXCJjcnlwdG9fc2lnbl9CWVRFU1wiLFwiY3J5cHRvX3NpZ25fTUVTU0FHRUJZVEVTX01BWFwiLFwiY3J5cHRvX3NpZ25fUFVCTElDS0VZQllURVNcIixcImNyeXB0b19zaWduX1NFQ1JFVEtFWUJZVEVTXCIsXCJjcnlwdG9fc2lnbl9TRUVEQllURVNcIixcImNyeXB0b19zdHJlYW1fS0VZQllURVNcIixcImNyeXB0b19zdHJlYW1fTUVTU0FHRUJZVEVTX01BWFwiLFwiY3J5cHRvX3N0cmVhbV9OT05DRUJZVEVTXCIsXCJjcnlwdG9fc3RyZWFtX2NoYWNoYTIwX0tFWUJZVEVTXCIsXCJjcnlwdG9fc3RyZWFtX2NoYWNoYTIwX05PTkNFQllURVNcIixcImNyeXB0b19zdHJlYW1fY2hhY2hhMjBfaWV0Zl9LRVlCWVRFU1wiLFwiY3J5cHRvX3N0cmVhbV9jaGFjaGEyMF9pZXRmX01FU1NBR0VCWVRFU19NQVhcIixcImNyeXB0b19zdHJlYW1fY2hhY2hhMjBfaWV0Zl9OT05DRUJZVEVTXCIsXCJjcnlwdG9fc3RyZWFtX3hjaGFjaGEyMF9LRVlCWVRFU1wiLFwiY3J5cHRvX3N0cmVhbV94Y2hhY2hhMjBfTUVTU0FHRUJZVEVTX01BWFwiLFwiY3J5cHRvX3N0cmVhbV94Y2hhY2hhMjBfTk9OQ0VCWVRFU1wiLFwicmFuZG9tYnl0ZXNfU0VFREJZVEVTXCJdO2ZvcihfPTA7XzxuLmxlbmd0aDtfKyspXCJmdW5jdGlvblwiPT10eXBlb2YoYz1yW1wiX1wiK25bX10udG9Mb3dlckNhc2UoKV0pJiYoZVtuW19dXT1jKCkpO3ZhciBzPVtcIlNPRElVTV9WRVJTSU9OX1NUUklOR1wiLFwiY3J5cHRvX3B3aGFzaF9TVFJQUkVGSVhcIixcImNyeXB0b19wd2hhc2hfc2NyeXB0c2Fsc2EyMDhzaGEyNTZfU1RSUFJFRklYXCJdO2ZvcihfPTA7XzxzLmxlbmd0aDtfKyspe3ZhciBjO1wiZnVuY3Rpb25cIj09dHlwZW9mKGM9cltcIl9cIitzW19dLnRvTG93ZXJDYXNlKCldKSYmKGVbc1tfXV09ci5VVEY4VG9TdHJpbmcoYygpKSl9fXI9dDt0cnl7YSgpO3ZhciBfPW5ldyBVaW50OEFycmF5KFs5OCw5NywxMDgsMTA4LDExNV0pLG49ZS5yYW5kb21ieXRlc19idWYoZS5jcnlwdG9fc2VjcmV0Ym94X05PTkNFQllURVMpLHM9ZS5yYW5kb21ieXRlc19idWYoZS5jcnlwdG9fc2VjcmV0Ym94X0tFWUJZVEVTKSxjPWUuY3J5cHRvX3NlY3JldGJveF9lYXN5KF8sbixzKSxoPWUuY3J5cHRvX3NlY3JldGJveF9vcGVuX2Vhc3koYyxuLHMpO2lmKGUubWVtY21wKF8saCkpcmV0dXJufWNhdGNoKGUpe2lmKG51bGw9PXIudXNlQmFja3VwTW9kdWxlKXRocm93IG5ldyBFcnJvcihcIkJvdGggd2FzbSBhbmQgYXNtIGZhaWxlZCB0byBsb2FkXCIrZSl9ci51c2VCYWNrdXBNb2R1bGUoKSxhKCl9KTtmdW5jdGlvbiBuKGUpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFRleHRFbmNvZGVyKXJldHVybihuZXcgVGV4dEVuY29kZXIpLmVuY29kZShlKTtlPXVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChlKSk7Zm9yKHZhciB0PW5ldyBVaW50OEFycmF5KGUubGVuZ3RoKSxyPTAsYT1lLmxlbmd0aDtyPGE7cisrKXRbcl09ZS5jaGFyQ29kZUF0KHIpO3JldHVybiB0fWZ1bmN0aW9uIHMoZSl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgVGV4dERlY29kZXIpcmV0dXJuIG5ldyBUZXh0RGVjb2RlcihcInV0Zi04XCIse2ZhdGFsOiEwfSkuZGVjb2RlKGUpO3ZhciB0PU1hdGguY2VpbChlLmxlbmd0aC84MTkyKTtpZih0PD0xKXRyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsZSkpKX1jYXRjaChlKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIGVuY29kZWQgZGF0YSB3YXMgbm90IHZhbGlkLlwiKX1mb3IodmFyIHI9XCJcIixhPTAsXz0wO188dDtfKyspe3ZhciBuPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUsODE5MipfK2EsODE5MiooXysxKSthKTtpZigwIT1uLmxlbmd0aCl7dmFyIGMsaD1uLmxlbmd0aCxvPTA7ZG97dmFyIHA9blstLWhdO3A+PTI0MD8obz00LGM9ITApOnA+PTIyND8obz0zLGM9ITApOnA+PTE5Mj8obz0yLGM9ITApOnA8MTI4JiYobz0xLGM9ITApfXdoaWxlKCFjKTtmb3IodmFyIHk9by0obi5sZW5ndGgtaCksaT0wO2k8eTtpKyspYS0tLG4ucG9wKCk7cis9cyhuKX19cmV0dXJuIHJ9ZnVuY3Rpb24gYyhlKXtlPWsobnVsbCxlLFwiaW5wdXRcIik7Zm9yKHZhciB0LHIsYSxfPVwiXCIsbj0wO248ZS5sZW5ndGg7bisrKWE9ODcrKHI9MTUmZVtuXSkrKHItMTA+PjgmLTM5KTw8OHw4NysodD1lW25dPj4+NCkrKHQtMTA+PjgmLTM5KSxfKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDI1NSZhKStTdHJpbmcuZnJvbUNoYXJDb2RlKGE+Pj44KTtyZXR1cm4gX312YXIgaD17T1JJR0lOQUw6MSxPUklHSU5BTF9OT19QQURESU5HOjMsVVJMU0FGRTo1LFVSTFNBRkVfTk9fUEFERElORzo3fTtmdW5jdGlvbiBvKGUpe2lmKG51bGw9PWUpcmV0dXJuIGguVVJMU0FGRV9OT19QQURESU5HO2lmKGUhPT1oLk9SSUdJTkFMJiZlIT09aC5PUklHSU5BTF9OT19QQURESU5HJiZlIT09aC5VUkxTQUZFJiZlIT1oLlVSTFNBRkVfTk9fUEFERElORyl0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCBiYXNlNjQgdmFyaWFudFwiKTtyZXR1cm4gZX1mdW5jdGlvbiBwKGUsdCl7dD1vKHQpLGU9ayhfLGUsXCJpbnB1dFwiKTt2YXIgYSxfPVtdLG49MHxNYXRoLmZsb29yKGUubGVuZ3RoLzMpLGM9ZS5sZW5ndGgtMypuLGg9NCpuKygwIT09Yz8wPT0oMiZ0KT80OjIrKGM+Pj4xKTowKSxwPW5ldyB1KGgrMSkseT12KGUpO3JldHVybiBfLnB1c2goeSksXy5wdXNoKHAuYWRkcmVzcyksMD09PXIuX3NvZGl1bV9iaW4yYmFzZTY0KHAuYWRkcmVzcyxwLmxlbmd0aCx5LGUubGVuZ3RoLHQpJiZiKF8sXCJjb252ZXJzaW9uIGZhaWxlZFwiKSxwLmxlbmd0aD1oLGE9cyhwLnRvX1VpbnQ4QXJyYXkoKSksZyhfKSxhfWZ1bmN0aW9uIHkoZSx0KXt2YXIgcj10fHxhO2lmKCFpKHIpKXRocm93IG5ldyBFcnJvcihyK1wiIG91dHB1dCBmb3JtYXQgaXMgbm90IGF2YWlsYWJsZVwiKTtpZihlIGluc3RhbmNlb2YgdSl7aWYoXCJ1aW50OGFycmF5XCI9PT1yKXJldHVybiBlLnRvX1VpbnQ4QXJyYXkoKTtpZihcInRleHRcIj09PXIpcmV0dXJuIHMoZS50b19VaW50OEFycmF5KCkpO2lmKFwiaGV4XCI9PT1yKXJldHVybiBjKGUudG9fVWludDhBcnJheSgpKTtpZihcImJhc2U2NFwiPT09cilyZXR1cm4gcChlLnRvX1VpbnQ4QXJyYXkoKSxoLlVSTFNBRkVfTk9fUEFERElORyk7dGhyb3cgbmV3IEVycm9yKCdXaGF0IGlzIG91dHB1dCBmb3JtYXQgXCInK3IrJ1wiPycpfWlmKFwib2JqZWN0XCI9PXR5cGVvZiBlKXtmb3IodmFyIF89T2JqZWN0LmtleXMoZSksbj17fSxvPTA7bzxfLmxlbmd0aDtvKyspbltfW29dXT15KGVbX1tvXV0scik7cmV0dXJuIG59aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIGU7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBmb3JtYXQgb3V0cHV0XCIpfWZ1bmN0aW9uIGkoZSl7Zm9yKHZhciB0PVtcInVpbnQ4YXJyYXlcIixcInRleHRcIixcImhleFwiLFwiYmFzZTY0XCJdLHI9MDtyPHQubGVuZ3RoO3IrKylpZih0W3JdPT09ZSlyZXR1cm4hMDtyZXR1cm4hMX1mdW5jdGlvbiBsKGUpe2lmKGUpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJXaGVuIGRlZmluZWQsIHRoZSBvdXRwdXQgZm9ybWF0IG11c3QgYmUgYSBzdHJpbmdcIik7aWYoIWkoZSkpdGhyb3cgbmV3IEVycm9yKGUrXCIgaXMgbm90IGEgc3VwcG9ydGVkIG91dHB1dCBmb3JtYXRcIil9fWZ1bmN0aW9uIHUoZSl7dGhpcy5sZW5ndGg9ZSx0aGlzLmFkZHJlc3M9ZChlKX1mdW5jdGlvbiB2KGUpe3ZhciB0PWQoZS5sZW5ndGgpO3JldHVybiByLkhFQVBVOC5zZXQoZSx0KSx0fWZ1bmN0aW9uIGQoZSl7dmFyIHQ9ci5fbWFsbG9jKGUpO2lmKDA9PT10KXRocm93e21lc3NhZ2U6XCJfbWFsbG9jKCkgZmFpbGVkXCIsbGVuZ3RoOmV9O3JldHVybiB0fWZ1bmN0aW9uIGcoZSl7aWYoZSlmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKylhPWVbdF0sci5fZnJlZShhKTt2YXIgYX1mdW5jdGlvbiBiKGUsdCl7dGhyb3cgZyhlKSxuZXcgRXJyb3IodCl9ZnVuY3Rpb24gZihlLHQpe3Rocm93IGcoZSksbmV3IFR5cGVFcnJvcih0KX1mdW5jdGlvbiBtKGUsdCxyKXtudWxsPT10JiZmKGUscitcIiBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWRcIil9ZnVuY3Rpb24gayhlLHQscil7cmV0dXJuIG0oZSx0LHIpLHQgaW5zdGFuY2VvZiBVaW50OEFycmF5P3Q6XCJzdHJpbmdcIj09dHlwZW9mIHQ/bih0KTp2b2lkIGYoZSxcInVuc3VwcG9ydGVkIGlucHV0IHR5cGUgZm9yIFwiK3IpfWZ1bmN0aW9uIHgoZSx0LGEsXyxuLHMpe3ZhciBjPVtdO2wocyk7dmFyIGg9bnVsbDtudWxsIT1lJiYoaD12KGU9ayhjLGUsXCJzZWNyZXRfbm9uY2VcIikpLGUubGVuZ3RoLGMucHVzaChoKSksdD1rKGMsdCxcImNpcGhlcnRleHRcIik7dmFyIG8scD1yLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2FieXRlcygpLGk9dC5sZW5ndGg7aTxwJiZmKGMsXCJjaXBoZXJ0ZXh0IGlzIHRvbyBzaG9ydFwiKSxvPXYodCksYy5wdXNoKG8pO3ZhciBkPW51bGwsbT0wO251bGwhPWEmJihkPXYoYT1rKGMsYSxcImFkZGl0aW9uYWxfZGF0YVwiKSksbT1hLmxlbmd0aCxjLnB1c2goZCkpLF89ayhjLF8sXCJwdWJsaWNfbm9uY2VcIik7dmFyIHgsRT0wfHIuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfbnB1YmJ5dGVzKCk7Xy5sZW5ndGghPT1FJiZmKGMsXCJpbnZhbGlkIHB1YmxpY19ub25jZSBsZW5ndGhcIikseD12KF8pLGMucHVzaCh4KSxuPWsoYyxuLFwia2V5XCIpO3ZhciB3LFM9MHxyLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2tleWJ5dGVzKCk7bi5sZW5ndGghPT1TJiZmKGMsXCJpbnZhbGlkIGtleSBsZW5ndGhcIiksdz12KG4pLGMucHVzaCh3KTt2YXIgVD1uZXcgdShpLXIuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfYWJ5dGVzKCl8MCksWT1ULmFkZHJlc3M7aWYoYy5wdXNoKFkpLDA9PT1yLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2RlY3J5cHQoWSxudWxsLGgsbyxpLDAsZCxtLDAseCx3KSl7dmFyIEE9eShULHMpO3JldHVybiBnKGMpLEF9YihjLFwiY2lwaGVydGV4dCBjYW5ub3QgYmUgZGVjcnlwdGVkIHVzaW5nIHRoYXQga2V5XCIpfWZ1bmN0aW9uIEUoZSx0LGEsXyxuLHMsYyl7dmFyIGg9W107bChjKTt2YXIgbz1udWxsO251bGwhPWUmJihvPXYoZT1rKGgsZSxcInNlY3JldF9ub25jZVwiKSksZS5sZW5ndGgsaC5wdXNoKG8pKTt2YXIgcD12KHQ9ayhoLHQsXCJjaXBoZXJ0ZXh0XCIpKSxpPXQubGVuZ3RoO2gucHVzaChwKSxhPWsoaCxhLFwibWFjXCIpO3ZhciBkLG09MHxyLl9jcnlwdG9fYm94X21hY2J5dGVzKCk7YS5sZW5ndGghPT1tJiZmKGgsXCJpbnZhbGlkIG1hYyBsZW5ndGhcIiksZD12KGEpLGgucHVzaChkKTt2YXIgeD1udWxsLEU9MDtudWxsIT1fJiYoeD12KF89ayhoLF8sXCJhZGRpdGlvbmFsX2RhdGFcIikpLEU9Xy5sZW5ndGgsaC5wdXNoKHgpKSxuPWsoaCxuLFwicHVibGljX25vbmNlXCIpO3ZhciB3LFM9MHxyLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X25wdWJieXRlcygpO24ubGVuZ3RoIT09UyYmZihoLFwiaW52YWxpZCBwdWJsaWNfbm9uY2UgbGVuZ3RoXCIpLHc9dihuKSxoLnB1c2godykscz1rKGgscyxcImtleVwiKTt2YXIgVCxZPTB8ci5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9rZXlieXRlcygpO3MubGVuZ3RoIT09WSYmZihoLFwiaW52YWxpZCBrZXkgbGVuZ3RoXCIpLFQ9dihzKSxoLnB1c2goVCk7dmFyIEE9bmV3IHUoMHxpKSxCPUEuYWRkcmVzcztpZihoLnB1c2goQiksMD09PXIuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfZGVjcnlwdF9kZXRhY2hlZChCLG8scCxpLDAsZCx4LEUsMCx3LFQpKXt2YXIgSz15KEEsYyk7cmV0dXJuIGcoaCksS31iKGgsXCJjaXBoZXJ0ZXh0IGNhbm5vdCBiZSBkZWNyeXB0ZWQgdXNpbmcgdGhhdCBrZXlcIil9ZnVuY3Rpb24gdyhlLHQsYSxfLG4scyl7dmFyIGM9W107bChzKTt2YXIgaD12KGU9ayhjLGUsXCJtZXNzYWdlXCIpKSxvPWUubGVuZ3RoO2MucHVzaChoKTt2YXIgcD1udWxsLGk9MDtudWxsIT10JiYocD12KHQ9ayhjLHQsXCJhZGRpdGlvbmFsX2RhdGFcIikpLGk9dC5sZW5ndGgsYy5wdXNoKHApKTt2YXIgZD1udWxsO251bGwhPWEmJihkPXYoYT1rKGMsYSxcInNlY3JldF9ub25jZVwiKSksYS5sZW5ndGgsYy5wdXNoKGQpKSxfPWsoYyxfLFwicHVibGljX25vbmNlXCIpO3ZhciBtLHg9MHxyLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X25wdWJieXRlcygpO18ubGVuZ3RoIT09eCYmZihjLFwiaW52YWxpZCBwdWJsaWNfbm9uY2UgbGVuZ3RoXCIpLG09dihfKSxjLnB1c2gobSksbj1rKGMsbixcImtleVwiKTt2YXIgRSx3PTB8ci5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9rZXlieXRlcygpO24ubGVuZ3RoIT09dyYmZihjLFwiaW52YWxpZCBrZXkgbGVuZ3RoXCIpLEU9dihuKSxjLnB1c2goRSk7dmFyIFM9bmV3IHUobytyLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2FieXRlcygpfDApLFQ9Uy5hZGRyZXNzO2lmKGMucHVzaChUKSwwPT09ci5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9lbmNyeXB0KFQsbnVsbCxoLG8sMCxwLGksMCxkLG0sRSkpe3ZhciBZPXkoUyxzKTtyZXR1cm4gZyhjKSxZfWIoYyxcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gUyhlLHQsYSxfLG4scyl7dmFyIGM9W107bChzKTt2YXIgaD12KGU9ayhjLGUsXCJtZXNzYWdlXCIpKSxvPWUubGVuZ3RoO2MucHVzaChoKTt2YXIgcD1udWxsLGk9MDtudWxsIT10JiYocD12KHQ9ayhjLHQsXCJhZGRpdGlvbmFsX2RhdGFcIikpLGk9dC5sZW5ndGgsYy5wdXNoKHApKTt2YXIgZD1udWxsO251bGwhPWEmJihkPXYoYT1rKGMsYSxcInNlY3JldF9ub25jZVwiKSksYS5sZW5ndGgsYy5wdXNoKGQpKSxfPWsoYyxfLFwicHVibGljX25vbmNlXCIpO3ZhciBtLHg9MHxyLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X25wdWJieXRlcygpO18ubGVuZ3RoIT09eCYmZihjLFwiaW52YWxpZCBwdWJsaWNfbm9uY2UgbGVuZ3RoXCIpLG09dihfKSxjLnB1c2gobSksbj1rKGMsbixcImtleVwiKTt2YXIgRSx3PTB8ci5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9rZXlieXRlcygpO24ubGVuZ3RoIT09dyYmZihjLFwiaW52YWxpZCBrZXkgbGVuZ3RoXCIpLEU9dihuKSxjLnB1c2goRSk7dmFyIFM9bmV3IHUoMHxvKSxUPVMuYWRkcmVzcztjLnB1c2goVCk7dmFyIFk9bmV3IHUoMHxyLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2FieXRlcygpKSxBPVkuYWRkcmVzcztpZihjLnB1c2goQSksMD09PXIuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfZW5jcnlwdF9kZXRhY2hlZChULEEsbnVsbCxoLG8sMCxwLGksMCxkLG0sRSkpe3ZhciBCPXkoe2NpcGhlcnRleHQ6UyxtYWM6WX0scyk7cmV0dXJuIGcoYyksQn1iKGMsXCJpbnZhbGlkIHVzYWdlXCIpfWZ1bmN0aW9uIFQoZSx0LGEsXyxuLHMpe3ZhciBjPVtdO2wocyk7dmFyIGg9bnVsbDtudWxsIT1lJiYoaD12KGU9ayhjLGUsXCJzZWNyZXRfbm9uY2VcIikpLGUubGVuZ3RoLGMucHVzaChoKSksdD1rKGMsdCxcImNpcGhlcnRleHRcIik7dmFyIG8scD1yLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfYWJ5dGVzKCksaT10Lmxlbmd0aDtpPHAmJmYoYyxcImNpcGhlcnRleHQgaXMgdG9vIHNob3J0XCIpLG89dih0KSxjLnB1c2gobyk7dmFyIGQ9bnVsbCxtPTA7bnVsbCE9YSYmKGQ9dihhPWsoYyxhLFwiYWRkaXRpb25hbF9kYXRhXCIpKSxtPWEubGVuZ3RoLGMucHVzaChkKSksXz1rKGMsXyxcInB1YmxpY19ub25jZVwiKTt2YXIgeCxFPTB8ci5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX25wdWJieXRlcygpO18ubGVuZ3RoIT09RSYmZihjLFwiaW52YWxpZCBwdWJsaWNfbm9uY2UgbGVuZ3RoXCIpLHg9dihfKSxjLnB1c2goeCksbj1rKGMsbixcImtleVwiKTt2YXIgdyxTPTB8ci5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX2tleWJ5dGVzKCk7bi5sZW5ndGghPT1TJiZmKGMsXCJpbnZhbGlkIGtleSBsZW5ndGhcIiksdz12KG4pLGMucHVzaCh3KTt2YXIgVD1uZXcgdShpLXIuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9hYnl0ZXMoKXwwKSxZPVQuYWRkcmVzcztpZihjLnB1c2goWSksMD09PXIuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9kZWNyeXB0KFksbnVsbCxoLG8saSwwLGQsbSwwLHgsdykpe3ZhciBBPXkoVCxzKTtyZXR1cm4gZyhjKSxBfWIoYyxcImNpcGhlcnRleHQgY2Fubm90IGJlIGRlY3J5cHRlZCB1c2luZyB0aGF0IGtleVwiKX1mdW5jdGlvbiBZKGUsdCxhLF8sbixzLGMpe3ZhciBoPVtdO2woYyk7dmFyIG89bnVsbDtudWxsIT1lJiYobz12KGU9ayhoLGUsXCJzZWNyZXRfbm9uY2VcIikpLGUubGVuZ3RoLGgucHVzaChvKSk7dmFyIHA9dih0PWsoaCx0LFwiY2lwaGVydGV4dFwiKSksaT10Lmxlbmd0aDtoLnB1c2gocCksYT1rKGgsYSxcIm1hY1wiKTt2YXIgZCxtPTB8ci5fY3J5cHRvX2JveF9tYWNieXRlcygpO2EubGVuZ3RoIT09bSYmZihoLFwiaW52YWxpZCBtYWMgbGVuZ3RoXCIpLGQ9dihhKSxoLnB1c2goZCk7dmFyIHg9bnVsbCxFPTA7bnVsbCE9XyYmKHg9dihfPWsoaCxfLFwiYWRkaXRpb25hbF9kYXRhXCIpKSxFPV8ubGVuZ3RoLGgucHVzaCh4KSksbj1rKGgsbixcInB1YmxpY19ub25jZVwiKTt2YXIgdyxTPTB8ci5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX25wdWJieXRlcygpO24ubGVuZ3RoIT09UyYmZihoLFwiaW52YWxpZCBwdWJsaWNfbm9uY2UgbGVuZ3RoXCIpLHc9dihuKSxoLnB1c2godykscz1rKGgscyxcImtleVwiKTt2YXIgVCxZPTB8ci5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX2tleWJ5dGVzKCk7cy5sZW5ndGghPT1ZJiZmKGgsXCJpbnZhbGlkIGtleSBsZW5ndGhcIiksVD12KHMpLGgucHVzaChUKTt2YXIgQT1uZXcgdSgwfGkpLEI9QS5hZGRyZXNzO2lmKGgucHVzaChCKSwwPT09ci5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX2RlY3J5cHRfZGV0YWNoZWQoQixvLHAsaSwwLGQseCxFLDAsdyxUKSl7dmFyIEs9eShBLGMpO3JldHVybiBnKGgpLEt9YihoLFwiY2lwaGVydGV4dCBjYW5ub3QgYmUgZGVjcnlwdGVkIHVzaW5nIHRoYXQga2V5XCIpfWZ1bmN0aW9uIEEoZSx0LGEsXyxuLHMpe3ZhciBjPVtdO2wocyk7dmFyIGg9dihlPWsoYyxlLFwibWVzc2FnZVwiKSksbz1lLmxlbmd0aDtjLnB1c2goaCk7dmFyIHA9bnVsbCxpPTA7bnVsbCE9dCYmKHA9dih0PWsoYyx0LFwiYWRkaXRpb25hbF9kYXRhXCIpKSxpPXQubGVuZ3RoLGMucHVzaChwKSk7dmFyIGQ9bnVsbDtudWxsIT1hJiYoZD12KGE9ayhjLGEsXCJzZWNyZXRfbm9uY2VcIikpLGEubGVuZ3RoLGMucHVzaChkKSksXz1rKGMsXyxcInB1YmxpY19ub25jZVwiKTt2YXIgbSx4PTB8ci5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX25wdWJieXRlcygpO18ubGVuZ3RoIT09eCYmZihjLFwiaW52YWxpZCBwdWJsaWNfbm9uY2UgbGVuZ3RoXCIpLG09dihfKSxjLnB1c2gobSksbj1rKGMsbixcImtleVwiKTt2YXIgRSx3PTB8ci5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX2tleWJ5dGVzKCk7bi5sZW5ndGghPT13JiZmKGMsXCJpbnZhbGlkIGtleSBsZW5ndGhcIiksRT12KG4pLGMucHVzaChFKTt2YXIgUz1uZXcgdShvK3IuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9hYnl0ZXMoKXwwKSxUPVMuYWRkcmVzcztpZihjLnB1c2goVCksMD09PXIuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9lbmNyeXB0KFQsbnVsbCxoLG8sMCxwLGksMCxkLG0sRSkpe3ZhciBZPXkoUyxzKTtyZXR1cm4gZyhjKSxZfWIoYyxcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gQihlLHQsYSxfLG4scyl7dmFyIGM9W107bChzKTt2YXIgaD12KGU9ayhjLGUsXCJtZXNzYWdlXCIpKSxvPWUubGVuZ3RoO2MucHVzaChoKTt2YXIgcD1udWxsLGk9MDtudWxsIT10JiYocD12KHQ9ayhjLHQsXCJhZGRpdGlvbmFsX2RhdGFcIikpLGk9dC5sZW5ndGgsYy5wdXNoKHApKTt2YXIgZD1udWxsO251bGwhPWEmJihkPXYoYT1rKGMsYSxcInNlY3JldF9ub25jZVwiKSksYS5sZW5ndGgsYy5wdXNoKGQpKSxfPWsoYyxfLFwicHVibGljX25vbmNlXCIpO3ZhciBtLHg9MHxyLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfbnB1YmJ5dGVzKCk7Xy5sZW5ndGghPT14JiZmKGMsXCJpbnZhbGlkIHB1YmxpY19ub25jZSBsZW5ndGhcIiksbT12KF8pLGMucHVzaChtKSxuPWsoYyxuLFwia2V5XCIpO3ZhciBFLHc9MHxyLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfa2V5Ynl0ZXMoKTtuLmxlbmd0aCE9PXcmJmYoYyxcImludmFsaWQga2V5IGxlbmd0aFwiKSxFPXYobiksYy5wdXNoKEUpO3ZhciBTPW5ldyB1KDB8byksVD1TLmFkZHJlc3M7Yy5wdXNoKFQpO3ZhciBZPW5ldyB1KDB8ci5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX2FieXRlcygpKSxBPVkuYWRkcmVzcztpZihjLnB1c2goQSksMD09PXIuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9lbmNyeXB0X2RldGFjaGVkKFQsQSxudWxsLGgsbywwLHAsaSwwLGQsbSxFKSl7dmFyIEI9eSh7Y2lwaGVydGV4dDpTLG1hYzpZfSxzKTtyZXR1cm4gZyhjKSxCfWIoYyxcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gSyhlKXt2YXIgdD1bXTtsKGUpO3ZhciBhPW5ldyB1KDB8ci5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX2tleWJ5dGVzKCkpLF89YS5hZGRyZXNzO3QucHVzaChfKSxyLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfa2V5Z2VuKF8pO3ZhciBuPXkoYSxlKTtyZXR1cm4gZyh0KSxufWZ1bmN0aW9uIEkoZSl7dmFyIHQ9W107bChlKTt2YXIgYT1uZXcgdSgwfHIuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfa2V5Ynl0ZXMoKSksXz1hLmFkZHJlc3M7dC5wdXNoKF8pLHIuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfa2V5Z2VuKF8pO3ZhciBuPXkoYSxlKTtyZXR1cm4gZyh0KSxufWZ1bmN0aW9uIE0oZSx0LGEsXyxuLHMpe3ZhciBjPVtdO2wocyk7dmFyIGg9bnVsbDtudWxsIT1lJiYoaD12KGU9ayhjLGUsXCJzZWNyZXRfbm9uY2VcIikpLGUubGVuZ3RoLGMucHVzaChoKSksdD1rKGMsdCxcImNpcGhlcnRleHRcIik7dmFyIG8scD1yLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2FieXRlcygpLGk9dC5sZW5ndGg7aTxwJiZmKGMsXCJjaXBoZXJ0ZXh0IGlzIHRvbyBzaG9ydFwiKSxvPXYodCksYy5wdXNoKG8pO3ZhciBkPW51bGwsbT0wO251bGwhPWEmJihkPXYoYT1rKGMsYSxcImFkZGl0aW9uYWxfZGF0YVwiKSksbT1hLmxlbmd0aCxjLnB1c2goZCkpLF89ayhjLF8sXCJwdWJsaWNfbm9uY2VcIik7dmFyIHgsRT0wfHIuX2NyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfbnB1YmJ5dGVzKCk7Xy5sZW5ndGghPT1FJiZmKGMsXCJpbnZhbGlkIHB1YmxpY19ub25jZSBsZW5ndGhcIikseD12KF8pLGMucHVzaCh4KSxuPWsoYyxuLFwia2V5XCIpO3ZhciB3LFM9MHxyLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2tleWJ5dGVzKCk7bi5sZW5ndGghPT1TJiZmKGMsXCJpbnZhbGlkIGtleSBsZW5ndGhcIiksdz12KG4pLGMucHVzaCh3KTt2YXIgVD1uZXcgdShpLXIuX2NyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfYWJ5dGVzKCl8MCksWT1ULmFkZHJlc3M7aWYoYy5wdXNoKFkpLDA9PT1yLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2RlY3J5cHQoWSxudWxsLGgsbyxpLDAsZCxtLDAseCx3KSl7dmFyIEE9eShULHMpO3JldHVybiBnKGMpLEF9YihjLFwiY2lwaGVydGV4dCBjYW5ub3QgYmUgZGVjcnlwdGVkIHVzaW5nIHRoYXQga2V5XCIpfWZ1bmN0aW9uIEwoZSx0LGEsXyxuLHMsYyl7dmFyIGg9W107bChjKTt2YXIgbz1udWxsO251bGwhPWUmJihvPXYoZT1rKGgsZSxcInNlY3JldF9ub25jZVwiKSksZS5sZW5ndGgsaC5wdXNoKG8pKTt2YXIgcD12KHQ9ayhoLHQsXCJjaXBoZXJ0ZXh0XCIpKSxpPXQubGVuZ3RoO2gucHVzaChwKSxhPWsoaCxhLFwibWFjXCIpO3ZhciBkLG09MHxyLl9jcnlwdG9fYm94X21hY2J5dGVzKCk7YS5sZW5ndGghPT1tJiZmKGgsXCJpbnZhbGlkIG1hYyBsZW5ndGhcIiksZD12KGEpLGgucHVzaChkKTt2YXIgeD1udWxsLEU9MDtudWxsIT1fJiYoeD12KF89ayhoLF8sXCJhZGRpdGlvbmFsX2RhdGFcIikpLEU9Xy5sZW5ndGgsaC5wdXNoKHgpKSxuPWsoaCxuLFwicHVibGljX25vbmNlXCIpO3ZhciB3LFM9MHxyLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX25wdWJieXRlcygpO24ubGVuZ3RoIT09UyYmZihoLFwiaW52YWxpZCBwdWJsaWNfbm9uY2UgbGVuZ3RoXCIpLHc9dihuKSxoLnB1c2godykscz1rKGgscyxcImtleVwiKTt2YXIgVCxZPTB8ci5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9rZXlieXRlcygpO3MubGVuZ3RoIT09WSYmZihoLFwiaW52YWxpZCBrZXkgbGVuZ3RoXCIpLFQ9dihzKSxoLnB1c2goVCk7dmFyIEE9bmV3IHUoMHxpKSxCPUEuYWRkcmVzcztpZihoLnB1c2goQiksMD09PXIuX2NyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfZGVjcnlwdF9kZXRhY2hlZChCLG8scCxpLDAsZCx4LEUsMCx3LFQpKXt2YXIgSz15KEEsYyk7cmV0dXJuIGcoaCksS31iKGgsXCJjaXBoZXJ0ZXh0IGNhbm5vdCBiZSBkZWNyeXB0ZWQgdXNpbmcgdGhhdCBrZXlcIil9ZnVuY3Rpb24gTihlLHQsYSxfLG4scyl7dmFyIGM9W107bChzKTt2YXIgaD12KGU9ayhjLGUsXCJtZXNzYWdlXCIpKSxvPWUubGVuZ3RoO2MucHVzaChoKTt2YXIgcD1udWxsLGk9MDtudWxsIT10JiYocD12KHQ9ayhjLHQsXCJhZGRpdGlvbmFsX2RhdGFcIikpLGk9dC5sZW5ndGgsYy5wdXNoKHApKTt2YXIgZD1udWxsO251bGwhPWEmJihkPXYoYT1rKGMsYSxcInNlY3JldF9ub25jZVwiKSksYS5sZW5ndGgsYy5wdXNoKGQpKSxfPWsoYyxfLFwicHVibGljX25vbmNlXCIpO3ZhciBtLHg9MHxyLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX25wdWJieXRlcygpO18ubGVuZ3RoIT09eCYmZihjLFwiaW52YWxpZCBwdWJsaWNfbm9uY2UgbGVuZ3RoXCIpLG09dihfKSxjLnB1c2gobSksbj1rKGMsbixcImtleVwiKTt2YXIgRSx3PTB8ci5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9rZXlieXRlcygpO24ubGVuZ3RoIT09dyYmZihjLFwiaW52YWxpZCBrZXkgbGVuZ3RoXCIpLEU9dihuKSxjLnB1c2goRSk7dmFyIFM9bmV3IHUobytyLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2FieXRlcygpfDApLFQ9Uy5hZGRyZXNzO2lmKGMucHVzaChUKSwwPT09ci5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9lbmNyeXB0KFQsbnVsbCxoLG8sMCxwLGksMCxkLG0sRSkpe3ZhciBZPXkoUyxzKTtyZXR1cm4gZyhjKSxZfWIoYyxcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gVShlLHQsYSxfLG4scyl7dmFyIGM9W107bChzKTt2YXIgaD12KGU9ayhjLGUsXCJtZXNzYWdlXCIpKSxvPWUubGVuZ3RoO2MucHVzaChoKTt2YXIgcD1udWxsLGk9MDtudWxsIT10JiYocD12KHQ9ayhjLHQsXCJhZGRpdGlvbmFsX2RhdGFcIikpLGk9dC5sZW5ndGgsYy5wdXNoKHApKTt2YXIgZD1udWxsO251bGwhPWEmJihkPXYoYT1rKGMsYSxcInNlY3JldF9ub25jZVwiKSksYS5sZW5ndGgsYy5wdXNoKGQpKSxfPWsoYyxfLFwicHVibGljX25vbmNlXCIpO3ZhciBtLHg9MHxyLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX25wdWJieXRlcygpO18ubGVuZ3RoIT09eCYmZihjLFwiaW52YWxpZCBwdWJsaWNfbm9uY2UgbGVuZ3RoXCIpLG09dihfKSxjLnB1c2gobSksbj1rKGMsbixcImtleVwiKTt2YXIgRSx3PTB8ci5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9rZXlieXRlcygpO24ubGVuZ3RoIT09dyYmZihjLFwiaW52YWxpZCBrZXkgbGVuZ3RoXCIpLEU9dihuKSxjLnB1c2goRSk7dmFyIFM9bmV3IHUoMHxvKSxUPVMuYWRkcmVzcztjLnB1c2goVCk7dmFyIFk9bmV3IHUoMHxyLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2FieXRlcygpKSxBPVkuYWRkcmVzcztpZihjLnB1c2goQSksMD09PXIuX2NyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfZW5jcnlwdF9kZXRhY2hlZChULEEsbnVsbCxoLG8sMCxwLGksMCxkLG0sRSkpe3ZhciBCPXkoe2NpcGhlcnRleHQ6UyxtYWM6WX0scyk7cmV0dXJuIGcoYyksQn1iKGMsXCJpbnZhbGlkIHVzYWdlXCIpfWZ1bmN0aW9uIE8oZSl7dmFyIHQ9W107bChlKTt2YXIgYT1uZXcgdSgwfHIuX2NyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfa2V5Ynl0ZXMoKSksXz1hLmFkZHJlc3M7dC5wdXNoKF8pLHIuX2NyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfa2V5Z2VuKF8pO3ZhciBuPXkoYSxlKTtyZXR1cm4gZyh0KSxufWZ1bmN0aW9uIFIoZSx0LGEpe3ZhciBfPVtdO2woYSk7dmFyIG49dihlPWsoXyxlLFwibWVzc2FnZVwiKSkscz1lLmxlbmd0aDtfLnB1c2gobiksdD1rKF8sdCxcImtleVwiKTt2YXIgYyxoPTB8ci5fY3J5cHRvX2F1dGhfa2V5Ynl0ZXMoKTt0Lmxlbmd0aCE9PWgmJmYoXyxcImludmFsaWQga2V5IGxlbmd0aFwiKSxjPXYodCksXy5wdXNoKGMpO3ZhciBvPW5ldyB1KDB8ci5fY3J5cHRvX2F1dGhfYnl0ZXMoKSkscD1vLmFkZHJlc3M7aWYoXy5wdXNoKHApLDA9PSgwfHIuX2NyeXB0b19hdXRoKHAsbixzLDAsYykpKXt2YXIgaT15KG8sYSk7cmV0dXJuIGcoXyksaX1iKF8sXCJpbnZhbGlkIHVzYWdlXCIpfWZ1bmN0aW9uIFAoZSx0LGEpe3ZhciBfPVtdO2woYSk7dmFyIG49dihlPWsoXyxlLFwibWVzc2FnZVwiKSkscz1lLmxlbmd0aDtfLnB1c2gobiksdD1rKF8sdCxcImtleVwiKTt2YXIgYyxoPTB8ci5fY3J5cHRvX2F1dGhfaG1hY3NoYTI1Nl9rZXlieXRlcygpO3QubGVuZ3RoIT09aCYmZihfLFwiaW52YWxpZCBrZXkgbGVuZ3RoXCIpLGM9dih0KSxfLnB1c2goYyk7dmFyIG89bmV3IHUoMHxyLl9jcnlwdG9fYXV0aF9obWFjc2hhMjU2X2J5dGVzKCkpLHA9by5hZGRyZXNzO2lmKF8ucHVzaChwKSwwPT0oMHxyLl9jcnlwdG9fYXV0aF9obWFjc2hhMjU2KHAsbixzLDAsYykpKXt2YXIgaT15KG8sYSk7cmV0dXJuIGcoXyksaX1iKF8sXCJpbnZhbGlkIHVzYWdlXCIpfWZ1bmN0aW9uIEMoZSl7dmFyIHQ9W107bChlKTt2YXIgYT1uZXcgdSgwfHIuX2NyeXB0b19hdXRoX2htYWNzaGEyNTZfa2V5Ynl0ZXMoKSksXz1hLmFkZHJlc3M7dC5wdXNoKF8pLHIuX2NyeXB0b19hdXRoX2htYWNzaGEyNTZfa2V5Z2VuKF8pO3ZhciBuPXkoYSxlKTtyZXR1cm4gZyh0KSxufWZ1bmN0aW9uIEcoZSx0LGEpe3ZhciBfPVtdO2U9ayhfLGUsXCJ0YWdcIik7dmFyIG4scz0wfHIuX2NyeXB0b19hdXRoX2htYWNzaGEyNTZfYnl0ZXMoKTtlLmxlbmd0aCE9PXMmJmYoXyxcImludmFsaWQgdGFnIGxlbmd0aFwiKSxuPXYoZSksXy5wdXNoKG4pO3ZhciBjPXYodD1rKF8sdCxcIm1lc3NhZ2VcIikpLGg9dC5sZW5ndGg7Xy5wdXNoKGMpLGE9ayhfLGEsXCJrZXlcIik7dmFyIG8scD0wfHIuX2NyeXB0b19hdXRoX2htYWNzaGEyNTZfa2V5Ynl0ZXMoKTthLmxlbmd0aCE9PXAmJmYoXyxcImludmFsaWQga2V5IGxlbmd0aFwiKSxvPXYoYSksXy5wdXNoKG8pO3ZhciB5PTA9PSgwfHIuX2NyeXB0b19hdXRoX2htYWNzaGEyNTZfdmVyaWZ5KG4sYyxoLDAsbykpO3JldHVybiBnKF8pLHl9ZnVuY3Rpb24gRChlLHQsYSl7dmFyIF89W107bChhKTt2YXIgbj12KGU9ayhfLGUsXCJtZXNzYWdlXCIpKSxzPWUubGVuZ3RoO18ucHVzaChuKSx0PWsoXyx0LFwia2V5XCIpO3ZhciBjLGg9MHxyLl9jcnlwdG9fYXV0aF9obWFjc2hhNTEyX2tleWJ5dGVzKCk7dC5sZW5ndGghPT1oJiZmKF8sXCJpbnZhbGlkIGtleSBsZW5ndGhcIiksYz12KHQpLF8ucHVzaChjKTt2YXIgbz1uZXcgdSgwfHIuX2NyeXB0b19hdXRoX2htYWNzaGE1MTJfYnl0ZXMoKSkscD1vLmFkZHJlc3M7aWYoXy5wdXNoKHApLDA9PSgwfHIuX2NyeXB0b19hdXRoX2htYWNzaGE1MTIocCxuLHMsMCxjKSkpe3ZhciBpPXkobyxhKTtyZXR1cm4gZyhfKSxpfWIoXyxcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gWChlKXt2YXIgdD1bXTtsKGUpO3ZhciBhPW5ldyB1KDB8ci5fY3J5cHRvX2F1dGhfaG1hY3NoYTUxMl9rZXlieXRlcygpKSxfPWEuYWRkcmVzczt0LnB1c2goXyksci5fY3J5cHRvX2F1dGhfaG1hY3NoYTUxMl9rZXlnZW4oXyk7dmFyIG49eShhLGUpO3JldHVybiBnKHQpLG59ZnVuY3Rpb24gVihlLHQsYSl7dmFyIF89W107ZT1rKF8sZSxcInRhZ1wiKTt2YXIgbixzPTB8ci5fY3J5cHRvX2F1dGhfaG1hY3NoYTUxMl9ieXRlcygpO2UubGVuZ3RoIT09cyYmZihfLFwiaW52YWxpZCB0YWcgbGVuZ3RoXCIpLG49dihlKSxfLnB1c2gobik7dmFyIGM9dih0PWsoXyx0LFwibWVzc2FnZVwiKSksaD10Lmxlbmd0aDtfLnB1c2goYyksYT1rKF8sYSxcImtleVwiKTt2YXIgbyxwPTB8ci5fY3J5cHRvX2F1dGhfaG1hY3NoYTUxMl9rZXlieXRlcygpO2EubGVuZ3RoIT09cCYmZihfLFwiaW52YWxpZCBrZXkgbGVuZ3RoXCIpLG89dihhKSxfLnB1c2gobyk7dmFyIHk9MD09KDB8ci5fY3J5cHRvX2F1dGhfaG1hY3NoYTUxMl92ZXJpZnkobixjLGgsMCxvKSk7cmV0dXJuIGcoXykseX1mdW5jdGlvbiBGKGUpe3ZhciB0PVtdO2woZSk7dmFyIGE9bmV3IHUoMHxyLl9jcnlwdG9fYXV0aF9rZXlieXRlcygpKSxfPWEuYWRkcmVzczt0LnB1c2goXyksci5fY3J5cHRvX2F1dGhfa2V5Z2VuKF8pO3ZhciBuPXkoYSxlKTtyZXR1cm4gZyh0KSxufWZ1bmN0aW9uIEgoZSx0LGEpe3ZhciBfPVtdO2U9ayhfLGUsXCJ0YWdcIik7dmFyIG4scz0wfHIuX2NyeXB0b19hdXRoX2J5dGVzKCk7ZS5sZW5ndGghPT1zJiZmKF8sXCJpbnZhbGlkIHRhZyBsZW5ndGhcIiksbj12KGUpLF8ucHVzaChuKTt2YXIgYz12KHQ9ayhfLHQsXCJtZXNzYWdlXCIpKSxoPXQubGVuZ3RoO18ucHVzaChjKSxhPWsoXyxhLFwia2V5XCIpO3ZhciBvLHA9MHxyLl9jcnlwdG9fYXV0aF9rZXlieXRlcygpO2EubGVuZ3RoIT09cCYmZihfLFwiaW52YWxpZCBrZXkgbGVuZ3RoXCIpLG89dihhKSxfLnB1c2gobyk7dmFyIHk9MD09KDB8ci5fY3J5cHRvX2F1dGhfdmVyaWZ5KG4sYyxoLDAsbykpO3JldHVybiBnKF8pLHl9ZnVuY3Rpb24geihlLHQsYSl7dmFyIF89W107bChhKSxlPWsoXyxlLFwicHVibGljS2V5XCIpO3ZhciBuLHM9MHxyLl9jcnlwdG9fYm94X3B1YmxpY2tleWJ5dGVzKCk7ZS5sZW5ndGghPT1zJiZmKF8sXCJpbnZhbGlkIHB1YmxpY0tleSBsZW5ndGhcIiksbj12KGUpLF8ucHVzaChuKSx0PWsoXyx0LFwicHJpdmF0ZUtleVwiKTt2YXIgYyxoPTB8ci5fY3J5cHRvX2JveF9zZWNyZXRrZXlieXRlcygpO3QubGVuZ3RoIT09aCYmZihfLFwiaW52YWxpZCBwcml2YXRlS2V5IGxlbmd0aFwiKSxjPXYodCksXy5wdXNoKGMpO3ZhciBvPW5ldyB1KDB8ci5fY3J5cHRvX2JveF9iZWZvcmVubWJ5dGVzKCkpLHA9by5hZGRyZXNzO2lmKF8ucHVzaChwKSwwPT0oMHxyLl9jcnlwdG9fYm94X2JlZm9yZW5tKHAsbixjKSkpe3ZhciBpPXkobyxhKTtyZXR1cm4gZyhfKSxpfWIoXyxcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gaihlKXt2YXIgdD1bXTtsKGUpO3ZhciBhPW5ldyB1KDB8ci5fY3J5cHRvX2JveF9jdXJ2ZTI1NTE5eGNoYWNoYTIwcG9seTEzMDVfcHVibGlja2V5Ynl0ZXMoKSksXz1hLmFkZHJlc3M7dC5wdXNoKF8pO3ZhciBuPW5ldyB1KDB8ci5fY3J5cHRvX2JveF9jdXJ2ZTI1NTE5eGNoYWNoYTIwcG9seTEzMDVfc2VjcmV0a2V5Ynl0ZXMoKSkscz1uLmFkZHJlc3M7dC5wdXNoKHMpLHIuX2NyeXB0b19ib3hfY3VydmUyNTUxOXhjaGFjaGEyMHBvbHkxMzA1X2tleXBhaXIoXyxzKTt2YXIgYz15KHtwdWJsaWNLZXk6YSxwcml2YXRlS2V5Om4sa2V5VHlwZTpcImN1cnZlMjU1MTlcIn0sZSk7cmV0dXJuIGcodCksY31mdW5jdGlvbiBxKGUsdCxhKXt2YXIgXz1bXTtsKGEpO3ZhciBuPXYoZT1rKF8sZSxcIm1lc3NhZ2VcIikpLHM9ZS5sZW5ndGg7Xy5wdXNoKG4pLHQ9ayhfLHQsXCJwdWJsaWNLZXlcIik7dmFyIGMsaD0wfHIuX2NyeXB0b19ib3hfY3VydmUyNTUxOXhjaGFjaGEyMHBvbHkxMzA1X3B1YmxpY2tleWJ5dGVzKCk7dC5sZW5ndGghPT1oJiZmKF8sXCJpbnZhbGlkIHB1YmxpY0tleSBsZW5ndGhcIiksYz12KHQpLF8ucHVzaChjKTt2YXIgbz1uZXcgdShzK3IuX2NyeXB0b19ib3hfY3VydmUyNTUxOXhjaGFjaGEyMHBvbHkxMzA1X3NlYWxieXRlcygpfDApLHA9by5hZGRyZXNzO18ucHVzaChwKSxyLl9jcnlwdG9fYm94X2N1cnZlMjU1MTl4Y2hhY2hhMjBwb2x5MTMwNV9zZWFsKHAsbixzLDAsYyk7dmFyIGk9eShvLGEpO3JldHVybiBnKF8pLGl9ZnVuY3Rpb24gVyhlLHQsYSxfKXt2YXIgbj1bXTtsKF8pLGU9ayhuLGUsXCJjaXBoZXJ0ZXh0XCIpO3ZhciBzLGM9ci5fY3J5cHRvX2JveF9jdXJ2ZTI1NTE5eGNoYWNoYTIwcG9seTEzMDVfc2VhbGJ5dGVzKCksaD1lLmxlbmd0aDtoPGMmJmYobixcImNpcGhlcnRleHQgaXMgdG9vIHNob3J0XCIpLHM9dihlKSxuLnB1c2gocyksdD1rKG4sdCxcInB1YmxpY0tleVwiKTt2YXIgbyxwPTB8ci5fY3J5cHRvX2JveF9jdXJ2ZTI1NTE5eGNoYWNoYTIwcG9seTEzMDVfcHVibGlja2V5Ynl0ZXMoKTt0Lmxlbmd0aCE9PXAmJmYobixcImludmFsaWQgcHVibGljS2V5IGxlbmd0aFwiKSxvPXYodCksbi5wdXNoKG8pLGE9ayhuLGEsXCJzZWNyZXRLZXlcIik7dmFyIGksZD0wfHIuX2NyeXB0b19ib3hfY3VydmUyNTUxOXhjaGFjaGEyMHBvbHkxMzA1X3NlY3JldGtleWJ5dGVzKCk7YS5sZW5ndGghPT1kJiZmKG4sXCJpbnZhbGlkIHNlY3JldEtleSBsZW5ndGhcIiksaT12KGEpLG4ucHVzaChpKTt2YXIgYj1uZXcgdShoLXIuX2NyeXB0b19ib3hfY3VydmUyNTUxOXhjaGFjaGEyMHBvbHkxMzA1X3NlYWxieXRlcygpfDApLG09Yi5hZGRyZXNzO24ucHVzaChtKSxyLl9jcnlwdG9fYm94X2N1cnZlMjU1MTl4Y2hhY2hhMjBwb2x5MTMwNV9zZWFsX29wZW4obSxzLGgsMCxvLGkpO3ZhciB4PXkoYixfKTtyZXR1cm4gZyhuKSx4fWZ1bmN0aW9uIEooZSx0LGEsXyxuKXt2YXIgcz1bXTtsKG4pO3ZhciBjPXYoZT1rKHMsZSxcIm1lc3NhZ2VcIikpLGg9ZS5sZW5ndGg7cy5wdXNoKGMpLHQ9ayhzLHQsXCJub25jZVwiKTt2YXIgbyxwPTB8ci5fY3J5cHRvX2JveF9ub25jZWJ5dGVzKCk7dC5sZW5ndGghPT1wJiZmKHMsXCJpbnZhbGlkIG5vbmNlIGxlbmd0aFwiKSxvPXYodCkscy5wdXNoKG8pLGE9ayhzLGEsXCJwdWJsaWNLZXlcIik7dmFyIGksZD0wfHIuX2NyeXB0b19ib3hfcHVibGlja2V5Ynl0ZXMoKTthLmxlbmd0aCE9PWQmJmYocyxcImludmFsaWQgcHVibGljS2V5IGxlbmd0aFwiKSxpPXYoYSkscy5wdXNoKGkpLF89ayhzLF8sXCJwcml2YXRlS2V5XCIpO3ZhciBtLHg9MHxyLl9jcnlwdG9fYm94X3NlY3JldGtleWJ5dGVzKCk7Xy5sZW5ndGghPT14JiZmKHMsXCJpbnZhbGlkIHByaXZhdGVLZXkgbGVuZ3RoXCIpLG09dihfKSxzLnB1c2gobSk7dmFyIEU9bmV3IHUoMHxoKSx3PUUuYWRkcmVzcztzLnB1c2godyk7dmFyIFM9bmV3IHUoMHxyLl9jcnlwdG9fYm94X21hY2J5dGVzKCkpLFQ9Uy5hZGRyZXNzO2lmKHMucHVzaChUKSwwPT0oMHxyLl9jcnlwdG9fYm94X2RldGFjaGVkKHcsVCxjLGgsMCxvLGksbSkpKXt2YXIgWT15KHtjaXBoZXJ0ZXh0OkUsbWFjOlN9LG4pO3JldHVybiBnKHMpLFl9YihzLFwiaW52YWxpZCB1c2FnZVwiKX1mdW5jdGlvbiBRKGUsdCxhLF8sbil7dmFyIHM9W107bChuKTt2YXIgYz12KGU9ayhzLGUsXCJtZXNzYWdlXCIpKSxoPWUubGVuZ3RoO3MucHVzaChjKSx0PWsocyx0LFwibm9uY2VcIik7dmFyIG8scD0wfHIuX2NyeXB0b19ib3hfbm9uY2VieXRlcygpO3QubGVuZ3RoIT09cCYmZihzLFwiaW52YWxpZCBub25jZSBsZW5ndGhcIiksbz12KHQpLHMucHVzaChvKSxhPWsocyxhLFwicHVibGljS2V5XCIpO3ZhciBpLGQ9MHxyLl9jcnlwdG9fYm94X3B1YmxpY2tleWJ5dGVzKCk7YS5sZW5ndGghPT1kJiZmKHMsXCJpbnZhbGlkIHB1YmxpY0tleSBsZW5ndGhcIiksaT12KGEpLHMucHVzaChpKSxfPWsocyxfLFwicHJpdmF0ZUtleVwiKTt2YXIgbSx4PTB8ci5fY3J5cHRvX2JveF9zZWNyZXRrZXlieXRlcygpO18ubGVuZ3RoIT09eCYmZihzLFwiaW52YWxpZCBwcml2YXRlS2V5IGxlbmd0aFwiKSxtPXYoXykscy5wdXNoKG0pO3ZhciBFPW5ldyB1KGgrci5fY3J5cHRvX2JveF9tYWNieXRlcygpfDApLHc9RS5hZGRyZXNzO2lmKHMucHVzaCh3KSwwPT0oMHxyLl9jcnlwdG9fYm94X2Vhc3kodyxjLGgsMCxvLGksbSkpKXt2YXIgUz15KEUsbik7cmV0dXJuIGcocyksU31iKHMsXCJpbnZhbGlkIHVzYWdlXCIpfWZ1bmN0aW9uIFooZSx0LGEsXyl7dmFyIG49W107bChfKTt2YXIgcz12KGU9ayhuLGUsXCJtZXNzYWdlXCIpKSxjPWUubGVuZ3RoO24ucHVzaChzKSx0PWsobix0LFwibm9uY2VcIik7dmFyIGgsbz0wfHIuX2NyeXB0b19ib3hfbm9uY2VieXRlcygpO3QubGVuZ3RoIT09byYmZihuLFwiaW52YWxpZCBub25jZSBsZW5ndGhcIiksaD12KHQpLG4ucHVzaChoKSxhPWsobixhLFwic2hhcmVkS2V5XCIpO3ZhciBwLGk9MHxyLl9jcnlwdG9fYm94X2JlZm9yZW5tYnl0ZXMoKTthLmxlbmd0aCE9PWkmJmYobixcImludmFsaWQgc2hhcmVkS2V5IGxlbmd0aFwiKSxwPXYoYSksbi5wdXNoKHApO3ZhciBkPW5ldyB1KGMrci5fY3J5cHRvX2JveF9tYWNieXRlcygpfDApLG09ZC5hZGRyZXNzO2lmKG4ucHVzaChtKSwwPT0oMHxyLl9jcnlwdG9fYm94X2Vhc3lfYWZ0ZXJubShtLHMsYywwLGgscCkpKXt2YXIgeD15KGQsXyk7cmV0dXJuIGcobikseH1iKG4sXCJpbnZhbGlkIHVzYWdlXCIpfWZ1bmN0aW9uICQoZSl7dmFyIHQ9W107bChlKTt2YXIgYT1uZXcgdSgwfHIuX2NyeXB0b19ib3hfcHVibGlja2V5Ynl0ZXMoKSksXz1hLmFkZHJlc3M7dC5wdXNoKF8pO3ZhciBuPW5ldyB1KDB8ci5fY3J5cHRvX2JveF9zZWNyZXRrZXlieXRlcygpKSxzPW4uYWRkcmVzcztpZih0LnB1c2gocyksMD09KDB8ci5fY3J5cHRvX2JveF9rZXlwYWlyKF8scykpKXt2YXIgYz17cHVibGljS2V5OnkoYSxlKSxwcml2YXRlS2V5OnkobixlKSxrZXlUeXBlOlwieDI1NTE5XCJ9O3JldHVybiBnKHQpLGN9Yih0LFwiaW50ZXJuYWwgZXJyb3JcIil9ZnVuY3Rpb24gZWUoZSx0LGEsXyxuLHMpe3ZhciBjPVtdO2wocyk7dmFyIGg9dihlPWsoYyxlLFwiY2lwaGVydGV4dFwiKSksbz1lLmxlbmd0aDtjLnB1c2goaCksdD1rKGMsdCxcIm1hY1wiKTt2YXIgcCxpPTB8ci5fY3J5cHRvX2JveF9tYWNieXRlcygpO3QubGVuZ3RoIT09aSYmZihjLFwiaW52YWxpZCBtYWMgbGVuZ3RoXCIpLHA9dih0KSxjLnB1c2gocCksYT1rKGMsYSxcIm5vbmNlXCIpO3ZhciBkLG09MHxyLl9jcnlwdG9fYm94X25vbmNlYnl0ZXMoKTthLmxlbmd0aCE9PW0mJmYoYyxcImludmFsaWQgbm9uY2UgbGVuZ3RoXCIpLGQ9dihhKSxjLnB1c2goZCksXz1rKGMsXyxcInB1YmxpY0tleVwiKTt2YXIgeCxFPTB8ci5fY3J5cHRvX2JveF9wdWJsaWNrZXlieXRlcygpO18ubGVuZ3RoIT09RSYmZihjLFwiaW52YWxpZCBwdWJsaWNLZXkgbGVuZ3RoXCIpLHg9dihfKSxjLnB1c2goeCksbj1rKGMsbixcInByaXZhdGVLZXlcIik7dmFyIHcsUz0wfHIuX2NyeXB0b19ib3hfc2VjcmV0a2V5Ynl0ZXMoKTtuLmxlbmd0aCE9PVMmJmYoYyxcImludmFsaWQgcHJpdmF0ZUtleSBsZW5ndGhcIiksdz12KG4pLGMucHVzaCh3KTt2YXIgVD1uZXcgdSgwfG8pLFk9VC5hZGRyZXNzO2lmKGMucHVzaChZKSwwPT0oMHxyLl9jcnlwdG9fYm94X29wZW5fZGV0YWNoZWQoWSxoLHAsbywwLGQseCx3KSkpe3ZhciBBPXkoVCxzKTtyZXR1cm4gZyhjKSxBfWIoYyxcImluY29ycmVjdCBrZXkgcGFpciBmb3IgdGhlIGdpdmVuIGNpcGhlcnRleHRcIil9ZnVuY3Rpb24gdGUoZSx0LGEsXyxuKXt2YXIgcz1bXTtsKG4pLGU9ayhzLGUsXCJjaXBoZXJ0ZXh0XCIpO3ZhciBjLGg9ci5fY3J5cHRvX2JveF9tYWNieXRlcygpLG89ZS5sZW5ndGg7bzxoJiZmKHMsXCJjaXBoZXJ0ZXh0IGlzIHRvbyBzaG9ydFwiKSxjPXYoZSkscy5wdXNoKGMpLHQ9ayhzLHQsXCJub25jZVwiKTt2YXIgcCxpPTB8ci5fY3J5cHRvX2JveF9ub25jZWJ5dGVzKCk7dC5sZW5ndGghPT1pJiZmKHMsXCJpbnZhbGlkIG5vbmNlIGxlbmd0aFwiKSxwPXYodCkscy5wdXNoKHApLGE9ayhzLGEsXCJwdWJsaWNLZXlcIik7dmFyIGQsbT0wfHIuX2NyeXB0b19ib3hfcHVibGlja2V5Ynl0ZXMoKTthLmxlbmd0aCE9PW0mJmYocyxcImludmFsaWQgcHVibGljS2V5IGxlbmd0aFwiKSxkPXYoYSkscy5wdXNoKGQpLF89ayhzLF8sXCJwcml2YXRlS2V5XCIpO3ZhciB4LEU9MHxyLl9jcnlwdG9fYm94X3NlY3JldGtleWJ5dGVzKCk7Xy5sZW5ndGghPT1FJiZmKHMsXCJpbnZhbGlkIHByaXZhdGVLZXkgbGVuZ3RoXCIpLHg9dihfKSxzLnB1c2goeCk7dmFyIHc9bmV3IHUoby1yLl9jcnlwdG9fYm94X21hY2J5dGVzKCl8MCksUz13LmFkZHJlc3M7aWYocy5wdXNoKFMpLDA9PSgwfHIuX2NyeXB0b19ib3hfb3Blbl9lYXN5KFMsYyxvLDAscCxkLHgpKSl7dmFyIFQ9eSh3LG4pO3JldHVybiBnKHMpLFR9YihzLFwiaW5jb3JyZWN0IGtleSBwYWlyIGZvciB0aGUgZ2l2ZW4gY2lwaGVydGV4dFwiKX1mdW5jdGlvbiByZShlLHQsYSxfKXt2YXIgbj1bXTtsKF8pO3ZhciBzPXYoZT1rKG4sZSxcImNpcGhlcnRleHRcIikpLGM9ZS5sZW5ndGg7bi5wdXNoKHMpLHQ9ayhuLHQsXCJub25jZVwiKTt2YXIgaCxvPTB8ci5fY3J5cHRvX2JveF9ub25jZWJ5dGVzKCk7dC5sZW5ndGghPT1vJiZmKG4sXCJpbnZhbGlkIG5vbmNlIGxlbmd0aFwiKSxoPXYodCksbi5wdXNoKGgpLGE9ayhuLGEsXCJzaGFyZWRLZXlcIik7dmFyIHAsaT0wfHIuX2NyeXB0b19ib3hfYmVmb3Jlbm1ieXRlcygpO2EubGVuZ3RoIT09aSYmZihuLFwiaW52YWxpZCBzaGFyZWRLZXkgbGVuZ3RoXCIpLHA9dihhKSxuLnB1c2gocCk7dmFyIGQ9bmV3IHUoYy1yLl9jcnlwdG9fYm94X21hY2J5dGVzKCl8MCksbT1kLmFkZHJlc3M7aWYobi5wdXNoKG0pLDA9PSgwfHIuX2NyeXB0b19ib3hfb3Blbl9lYXN5X2FmdGVybm0obSxzLGMsMCxoLHApKSl7dmFyIHg9eShkLF8pO3JldHVybiBnKG4pLHh9YihuLFwiaW5jb3JyZWN0IHNlY3JldCBrZXkgZm9yIHRoZSBnaXZlbiBjaXBoZXJ0ZXh0XCIpfWZ1bmN0aW9uIGFlKGUsdCxhKXt2YXIgXz1bXTtsKGEpO3ZhciBuPXYoZT1rKF8sZSxcIm1lc3NhZ2VcIikpLHM9ZS5sZW5ndGg7Xy5wdXNoKG4pLHQ9ayhfLHQsXCJwdWJsaWNLZXlcIik7dmFyIGMsaD0wfHIuX2NyeXB0b19ib3hfcHVibGlja2V5Ynl0ZXMoKTt0Lmxlbmd0aCE9PWgmJmYoXyxcImludmFsaWQgcHVibGljS2V5IGxlbmd0aFwiKSxjPXYodCksXy5wdXNoKGMpO3ZhciBvPW5ldyB1KHMrci5fY3J5cHRvX2JveF9zZWFsYnl0ZXMoKXwwKSxwPW8uYWRkcmVzcztpZihfLnB1c2gocCksMD09KDB8ci5fY3J5cHRvX2JveF9zZWFsKHAsbixzLDAsYykpKXt2YXIgaT15KG8sYSk7cmV0dXJuIGcoXyksaX1iKF8sXCJpbnZhbGlkIHVzYWdlXCIpfWZ1bmN0aW9uIF9lKGUsdCxhLF8pe3ZhciBuPVtdO2woXyksZT1rKG4sZSxcImNpcGhlcnRleHRcIik7dmFyIHMsYz1yLl9jcnlwdG9fYm94X3NlYWxieXRlcygpLGg9ZS5sZW5ndGg7aDxjJiZmKG4sXCJjaXBoZXJ0ZXh0IGlzIHRvbyBzaG9ydFwiKSxzPXYoZSksbi5wdXNoKHMpLHQ9ayhuLHQsXCJwdWJsaWNLZXlcIik7dmFyIG8scD0wfHIuX2NyeXB0b19ib3hfcHVibGlja2V5Ynl0ZXMoKTt0Lmxlbmd0aCE9PXAmJmYobixcImludmFsaWQgcHVibGljS2V5IGxlbmd0aFwiKSxvPXYodCksbi5wdXNoKG8pLGE9ayhuLGEsXCJwcml2YXRlS2V5XCIpO3ZhciBpLGQ9MHxyLl9jcnlwdG9fYm94X3NlY3JldGtleWJ5dGVzKCk7YS5sZW5ndGghPT1kJiZmKG4sXCJpbnZhbGlkIHByaXZhdGVLZXkgbGVuZ3RoXCIpLGk9dihhKSxuLnB1c2goaSk7dmFyIG09bmV3IHUoaC1yLl9jcnlwdG9fYm94X3NlYWxieXRlcygpfDApLHg9bS5hZGRyZXNzO2lmKG4ucHVzaCh4KSwwPT0oMHxyLl9jcnlwdG9fYm94X3NlYWxfb3Blbih4LHMsaCwwLG8saSkpKXt2YXIgRT15KG0sXyk7cmV0dXJuIGcobiksRX1iKG4sXCJpbmNvcnJlY3Qga2V5IHBhaXIgZm9yIHRoZSBnaXZlbiBjaXBoZXJ0ZXh0XCIpfWZ1bmN0aW9uIG5lKGUsdCl7dmFyIGE9W107bCh0KSxlPWsoYSxlLFwic2VlZFwiKTt2YXIgXyxuPTB8ci5fY3J5cHRvX2JveF9zZWVkYnl0ZXMoKTtlLmxlbmd0aCE9PW4mJmYoYSxcImludmFsaWQgc2VlZCBsZW5ndGhcIiksXz12KGUpLGEucHVzaChfKTt2YXIgcz1uZXcgdSgwfHIuX2NyeXB0b19ib3hfcHVibGlja2V5Ynl0ZXMoKSksYz1zLmFkZHJlc3M7YS5wdXNoKGMpO3ZhciBoPW5ldyB1KDB8ci5fY3J5cHRvX2JveF9zZWNyZXRrZXlieXRlcygpKSxvPWguYWRkcmVzcztpZihhLnB1c2gobyksMD09KDB8ci5fY3J5cHRvX2JveF9zZWVkX2tleXBhaXIoYyxvLF8pKSl7dmFyIHA9e3B1YmxpY0tleTp5KHMsdCkscHJpdmF0ZUtleTp5KGgsdCksa2V5VHlwZTpcIngyNTUxOVwifTtyZXR1cm4gZyhhKSxwfWIoYSxcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gc2UoZSx0LGEpe3ZhciBfPVtdO2woYSksZT1rKF8sZSxcInBcIik7dmFyIG4scz0wfHIuX2NyeXB0b19jb3JlX3Jpc3RyZXR0bzI1NV9ieXRlcygpO2UubGVuZ3RoIT09cyYmZihfLFwiaW52YWxpZCBwIGxlbmd0aFwiKSxuPXYoZSksXy5wdXNoKG4pLHQ9ayhfLHQsXCJxXCIpO3ZhciBjLGg9MHxyLl9jcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfYnl0ZXMoKTt0Lmxlbmd0aCE9PWgmJmYoXyxcImludmFsaWQgcSBsZW5ndGhcIiksYz12KHQpLF8ucHVzaChjKTt2YXIgbz1uZXcgdSgwfHIuX2NyeXB0b19jb3JlX3Jpc3RyZXR0bzI1NV9ieXRlcygpKSxwPW8uYWRkcmVzcztpZihfLnB1c2gocCksMD09KDB8ci5fY3J5cHRvX2NvcmVfcmlzdHJldHRvMjU1X2FkZChwLG4sYykpKXt2YXIgaT15KG8sYSk7cmV0dXJuIGcoXyksaX1iKF8sXCJpbnB1dHMgaXMgaW52YWxpZCBlbGVtZW50XCIpfWZ1bmN0aW9uIGNlKGUsdCl7dmFyIGE9W107bCh0KTt2YXIgXz12KGU9ayhhLGUsXCJyXCIpKTtlLmxlbmd0aCxhLnB1c2goXyk7dmFyIG49bmV3IHUoMHxyLl9jcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfYnl0ZXMoKSkscz1uLmFkZHJlc3M7aWYoYS5wdXNoKHMpLDA9PSgwfHIuX2NyeXB0b19jb3JlX3Jpc3RyZXR0bzI1NV9mcm9tX2hhc2gocyxfKSkpe3ZhciBjPXkobix0KTtyZXR1cm4gZyhhKSxjfWIoYSxcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gaGUoZSx0KXt2YXIgYT1bXTtsKHQpO3ZhciBfPXYoZT1rKGEsZSxcInBvaW50XCIpKTtlLmxlbmd0aCxhLnB1c2goXyk7dmFyIG49MT09KDB8ci5fY3J5cHRvX2NvcmVfcmlzdHJldHRvMjU1X2lzX3ZhbGlkX3BvaW50KF8pKTtyZXR1cm4gZyhhKSxufWZ1bmN0aW9uIG9lKGUpe3ZhciB0PVtdO2woZSk7dmFyIGE9bmV3IHUoMHxyLl9jcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfYnl0ZXMoKSksXz1hLmFkZHJlc3M7dC5wdXNoKF8pLHIuX2NyeXB0b19jb3JlX3Jpc3RyZXR0bzI1NV9yYW5kb20oXyk7dmFyIG49eShhLGUpO3JldHVybiBnKHQpLG59ZnVuY3Rpb24gcGUoZSx0LGEpe3ZhciBfPVtdO2woYSksZT1rKF8sZSxcInhcIik7dmFyIG4scz0wfHIuX2NyeXB0b19jb3JlX3Jpc3RyZXR0bzI1NV9zY2FsYXJieXRlcygpO2UubGVuZ3RoIT09cyYmZihfLFwiaW52YWxpZCB4IGxlbmd0aFwiKSxuPXYoZSksXy5wdXNoKG4pLHQ9ayhfLHQsXCJ5XCIpO3ZhciBjLGg9MHxyLl9jcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfc2NhbGFyYnl0ZXMoKTt0Lmxlbmd0aCE9PWgmJmYoXyxcImludmFsaWQgeSBsZW5ndGhcIiksYz12KHQpLF8ucHVzaChjKTt2YXIgbz1uZXcgdSgwfHIuX2NyeXB0b19jb3JlX3Jpc3RyZXR0bzI1NV9zY2FsYXJieXRlcygpKSxwPW8uYWRkcmVzcztfLnB1c2gocCksci5fY3J5cHRvX2NvcmVfcmlzdHJldHRvMjU1X3NjYWxhcl9hZGQocCxuLGMpO3ZhciBpPXkobyxhKTtyZXR1cm4gZyhfKSxpfWZ1bmN0aW9uIHllKGUsdCl7dmFyIGE9W107bCh0KTt2YXIgXz12KGU9ayhhLGUsXCJzXCIpKTtlLmxlbmd0aCxhLnB1c2goXyk7dmFyIG49bmV3IHUoMHxyLl9jcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfc2NhbGFyYnl0ZXMoKSkscz1uLmFkZHJlc3M7YS5wdXNoKHMpLHIuX2NyeXB0b19jb3JlX3Jpc3RyZXR0bzI1NV9zY2FsYXJfY29tcGxlbWVudChzLF8pO3ZhciBjPXkobix0KTtyZXR1cm4gZyhhKSxjfWZ1bmN0aW9uIGllKGUsdCl7dmFyIGE9W107bCh0KTt2YXIgXz12KGU9ayhhLGUsXCJzXCIpKTtlLmxlbmd0aCxhLnB1c2goXyk7dmFyIG49bmV3IHUoMHxyLl9jcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfc2NhbGFyYnl0ZXMoKSkscz1uLmFkZHJlc3M7aWYoYS5wdXNoKHMpLDA9PSgwfHIuX2NyeXB0b19jb3JlX3Jpc3RyZXR0bzI1NV9zY2FsYXJfaW52ZXJ0KHMsXykpKXt2YXIgYz15KG4sdCk7cmV0dXJuIGcoYSksY31iKGEsXCJpbnZhbGlkIHJlY2lwcm9jYXRlXCIpfWZ1bmN0aW9uIGxlKGUsdCxhKXt2YXIgXz1bXTtsKGEpLGU9ayhfLGUsXCJ4XCIpO3ZhciBuLHM9MHxyLl9jcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfc2NhbGFyYnl0ZXMoKTtlLmxlbmd0aCE9PXMmJmYoXyxcImludmFsaWQgeCBsZW5ndGhcIiksbj12KGUpLF8ucHVzaChuKSx0PWsoXyx0LFwieVwiKTt2YXIgYyxoPTB8ci5fY3J5cHRvX2NvcmVfcmlzdHJldHRvMjU1X3NjYWxhcmJ5dGVzKCk7dC5sZW5ndGghPT1oJiZmKF8sXCJpbnZhbGlkIHkgbGVuZ3RoXCIpLGM9dih0KSxfLnB1c2goYyk7dmFyIG89bmV3IHUoMHxyLl9jcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfc2NhbGFyYnl0ZXMoKSkscD1vLmFkZHJlc3M7Xy5wdXNoKHApLHIuX2NyeXB0b19jb3JlX3Jpc3RyZXR0bzI1NV9zY2FsYXJfbXVsKHAsbixjKTt2YXIgaT15KG8sYSk7cmV0dXJuIGcoXyksaX1mdW5jdGlvbiB1ZShlLHQpe3ZhciBhPVtdO2wodCk7dmFyIF89dihlPWsoYSxlLFwic1wiKSk7ZS5sZW5ndGgsYS5wdXNoKF8pO3ZhciBuPW5ldyB1KDB8ci5fY3J5cHRvX2NvcmVfcmlzdHJldHRvMjU1X3NjYWxhcmJ5dGVzKCkpLHM9bi5hZGRyZXNzO2EucHVzaChzKSxyLl9jcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfc2NhbGFyX25lZ2F0ZShzLF8pO3ZhciBjPXkobix0KTtyZXR1cm4gZyhhKSxjfWZ1bmN0aW9uIHZlKGUpe3ZhciB0PVtdO2woZSk7dmFyIGE9bmV3IHUoMHxyLl9jcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfc2NhbGFyYnl0ZXMoKSksXz1hLmFkZHJlc3M7dC5wdXNoKF8pLHIuX2NyeXB0b19jb3JlX3Jpc3RyZXR0bzI1NV9yYW5kb20oXyk7dmFyIG49eShhLGUpO3JldHVybiBnKHQpLG59ZnVuY3Rpb24gZGUoZSx0KXt2YXIgYT1bXTtsKHQpO3ZhciBfPXYoZT1rKGEsZSxcInNhbXBsZVwiKSk7ZS5sZW5ndGgsYS5wdXNoKF8pO3ZhciBuPW5ldyB1KDB8ci5fY3J5cHRvX2NvcmVfcmlzdHJldHRvMjU1X3NjYWxhcmJ5dGVzKCkpLHM9bi5hZGRyZXNzO2EucHVzaChzKSxyLl9jcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfc2NhbGFyX3JlZHVjZShzLF8pO3ZhciBjPXkobix0KTtyZXR1cm4gZyhhKSxjfWZ1bmN0aW9uIGdlKGUsdCxhKXt2YXIgXz1bXTtsKGEpLGU9ayhfLGUsXCJ4XCIpO3ZhciBuLHM9MHxyLl9jcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfc2NhbGFyYnl0ZXMoKTtlLmxlbmd0aCE9PXMmJmYoXyxcImludmFsaWQgeCBsZW5ndGhcIiksbj12KGUpLF8ucHVzaChuKSx0PWsoXyx0LFwieVwiKTt2YXIgYyxoPTB8ci5fY3J5cHRvX2NvcmVfcmlzdHJldHRvMjU1X3NjYWxhcmJ5dGVzKCk7dC5sZW5ndGghPT1oJiZmKF8sXCJpbnZhbGlkIHkgbGVuZ3RoXCIpLGM9dih0KSxfLnB1c2goYyk7dmFyIG89bmV3IHUoMHxyLl9jcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfc2NhbGFyYnl0ZXMoKSkscD1vLmFkZHJlc3M7Xy5wdXNoKHApLHIuX2NyeXB0b19jb3JlX3Jpc3RyZXR0bzI1NV9zY2FsYXJfc3ViKHAsbixjKTt2YXIgaT15KG8sYSk7cmV0dXJuIGcoXyksaX1mdW5jdGlvbiBiZShlLHQsYSl7dmFyIF89W107bChhKSxlPWsoXyxlLFwicFwiKTt2YXIgbixzPTB8ci5fY3J5cHRvX2NvcmVfcmlzdHJldHRvMjU1X2J5dGVzKCk7ZS5sZW5ndGghPT1zJiZmKF8sXCJpbnZhbGlkIHAgbGVuZ3RoXCIpLG49dihlKSxfLnB1c2gobiksdD1rKF8sdCxcInFcIik7dmFyIGMsaD0wfHIuX2NyeXB0b19jb3JlX3Jpc3RyZXR0bzI1NV9ieXRlcygpO3QubGVuZ3RoIT09aCYmZihfLFwiaW52YWxpZCBxIGxlbmd0aFwiKSxjPXYodCksXy5wdXNoKGMpO3ZhciBvPW5ldyB1KDB8ci5fY3J5cHRvX2NvcmVfcmlzdHJldHRvMjU1X2J5dGVzKCkpLHA9by5hZGRyZXNzO2lmKF8ucHVzaChwKSwwPT0oMHxyLl9jcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfc3ViKHAsbixjKSkpe3ZhciBpPXkobyxhKTtyZXR1cm4gZyhfKSxpfWIoXyxcImlucHV0cyBpcyBpbnZhbGlkIGVsZW1lbnRcIil9ZnVuY3Rpb24gZmUoZSx0LGEsXyl7dmFyIG49W107bChfKSxtKG4sZSxcImhhc2hfbGVuZ3RoXCIpLChcIm51bWJlclwiIT10eXBlb2YgZXx8KDB8ZSkhPT1lfHxlPDApJiZmKG4sXCJoYXNoX2xlbmd0aCBtdXN0IGJlIGFuIHVuc2lnbmVkIGludGVnZXJcIik7dmFyIHM9dih0PWsobix0LFwibWVzc2FnZVwiKSksYz10Lmxlbmd0aDtuLnB1c2gocyk7dmFyIGg9bnVsbCxvPTA7bnVsbCE9YSYmKGg9dihhPWsobixhLFwia2V5XCIpKSxvPWEubGVuZ3RoLG4ucHVzaChoKSk7dmFyIHA9bmV3IHUoZXw9MCksaT1wLmFkZHJlc3M7aWYobi5wdXNoKGkpLDA9PSgwfHIuX2NyeXB0b19nZW5lcmljaGFzaChpLGUscyxjLDAsaCxvKSkpe3ZhciBkPXkocCxfKTtyZXR1cm4gZyhuKSxkfWIobixcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gbWUoZSx0LGEsXyxuKXt2YXIgcz1bXTtsKG4pLG0ocyxlLFwic3Via2V5X2xlblwiKSwoXCJudW1iZXJcIiE9dHlwZW9mIGV8fCgwfGUpIT09ZXx8ZTwwKSYmZihzLFwic3Via2V5X2xlbiBtdXN0IGJlIGFuIHVuc2lnbmVkIGludGVnZXJcIik7dmFyIGM9bnVsbCxoPTA7bnVsbCE9dCYmKGM9dih0PWsocyx0LFwia2V5XCIpKSxoPXQubGVuZ3RoLHMucHVzaChjKSksYT1rKHMsYSxcImlkXCIpO3ZhciBvLHA9MHxyLl9jcnlwdG9fZ2VuZXJpY2hhc2hfYmxha2UyYl9zYWx0Ynl0ZXMoKTthLmxlbmd0aCE9PXAmJmYocyxcImludmFsaWQgaWQgbGVuZ3RoXCIpLG89dihhKSxzLnB1c2gobyksXz1rKHMsXyxcImN0eFwiKTt2YXIgaSxkPTB8ci5fY3J5cHRvX2dlbmVyaWNoYXNoX2JsYWtlMmJfcGVyc29uYWxieXRlcygpO18ubGVuZ3RoIT09ZCYmZihzLFwiaW52YWxpZCBjdHggbGVuZ3RoXCIpLGk9dihfKSxzLnB1c2goaSk7dmFyIHg9bmV3IHUoMHxlKSxFPXguYWRkcmVzcztpZihzLnB1c2goRSksMD09KDB8ci5fY3J5cHRvX2dlbmVyaWNoYXNoX2JsYWtlMmJfc2FsdF9wZXJzb25hbChFLGUsbnVsbCwwLDAsYyxoLG8saSkpKXt2YXIgdz15KHgsbik7cmV0dXJuIGcocyksd31iKHMsXCJpbnZhbGlkIHVzYWdlXCIpfWZ1bmN0aW9uIGtlKGUsdCxhKXt2YXIgXz1bXTtsKGEpLG0oXyxlLFwic3RhdGVfYWRkcmVzc1wiKSxtKF8sdCxcImhhc2hfbGVuZ3RoXCIpLChcIm51bWJlclwiIT10eXBlb2YgdHx8KDB8dCkhPT10fHx0PDApJiZmKF8sXCJoYXNoX2xlbmd0aCBtdXN0IGJlIGFuIHVuc2lnbmVkIGludGVnZXJcIik7dmFyIG49bmV3IHUodHw9MCkscz1uLmFkZHJlc3M7aWYoXy5wdXNoKHMpLDA9PSgwfHIuX2NyeXB0b19nZW5lcmljaGFzaF9maW5hbChlLHMsdCkpKXt2YXIgYz0oci5fZnJlZShlKSx5KG4sYSkpO3JldHVybiBnKF8pLGN9YihfLFwiaW52YWxpZCB1c2FnZVwiKX1mdW5jdGlvbiB4ZShlLHQsYSl7dmFyIF89W107bChhKTt2YXIgbj1udWxsLHM9MDtudWxsIT1lJiYobj12KGU9ayhfLGUsXCJrZXlcIikpLHM9ZS5sZW5ndGgsXy5wdXNoKG4pKSxtKF8sdCxcImhhc2hfbGVuZ3RoXCIpLChcIm51bWJlclwiIT10eXBlb2YgdHx8KDB8dCkhPT10fHx0PDApJiZmKF8sXCJoYXNoX2xlbmd0aCBtdXN0IGJlIGFuIHVuc2lnbmVkIGludGVnZXJcIik7dmFyIGM9bmV3IHUoMzU3KS5hZGRyZXNzO2lmKDA9PSgwfHIuX2NyeXB0b19nZW5lcmljaGFzaF9pbml0KGMsbixzLHQpKSl7dmFyIGg9YztyZXR1cm4gZyhfKSxofWIoXyxcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gRWUoZSl7dmFyIHQ9W107bChlKTt2YXIgYT1uZXcgdSgwfHIuX2NyeXB0b19nZW5lcmljaGFzaF9rZXlieXRlcygpKSxfPWEuYWRkcmVzczt0LnB1c2goXyksci5fY3J5cHRvX2dlbmVyaWNoYXNoX2tleWdlbihfKTt2YXIgbj15KGEsZSk7cmV0dXJuIGcodCksbn1mdW5jdGlvbiB3ZShlLHQsYSl7dmFyIF89W107bChhKSxtKF8sZSxcInN0YXRlX2FkZHJlc3NcIik7dmFyIG49dih0PWsoXyx0LFwibWVzc2FnZV9jaHVua1wiKSkscz10Lmxlbmd0aDtfLnB1c2gobiksMCE9KDB8ci5fY3J5cHRvX2dlbmVyaWNoYXNoX3VwZGF0ZShlLG4scykpJiZiKF8sXCJpbnZhbGlkIHVzYWdlXCIpLGcoXyl9ZnVuY3Rpb24gU2UoZSx0KXt2YXIgYT1bXTtsKHQpO3ZhciBfPXYoZT1rKGEsZSxcIm1lc3NhZ2VcIikpLG49ZS5sZW5ndGg7YS5wdXNoKF8pO3ZhciBzPW5ldyB1KDB8ci5fY3J5cHRvX2hhc2hfYnl0ZXMoKSksYz1zLmFkZHJlc3M7aWYoYS5wdXNoKGMpLDA9PSgwfHIuX2NyeXB0b19oYXNoKGMsXyxuLDApKSl7dmFyIGg9eShzLHQpO3JldHVybiBnKGEpLGh9YihhLFwiaW52YWxpZCB1c2FnZVwiKX1mdW5jdGlvbiBUZShlLHQpe3ZhciBhPVtdO2wodCk7dmFyIF89dihlPWsoYSxlLFwibWVzc2FnZVwiKSksbj1lLmxlbmd0aDthLnB1c2goXyk7dmFyIHM9bmV3IHUoMHxyLl9jcnlwdG9faGFzaF9zaGEyNTZfYnl0ZXMoKSksYz1zLmFkZHJlc3M7aWYoYS5wdXNoKGMpLDA9PSgwfHIuX2NyeXB0b19oYXNoX3NoYTI1NihjLF8sbiwwKSkpe3ZhciBoPXkocyx0KTtyZXR1cm4gZyhhKSxofWIoYSxcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gWWUoZSx0KXt2YXIgYT1bXTtsKHQpO3ZhciBfPXYoZT1rKGEsZSxcIm1lc3NhZ2VcIikpLG49ZS5sZW5ndGg7YS5wdXNoKF8pO3ZhciBzPW5ldyB1KDB8ci5fY3J5cHRvX2hhc2hfc2hhNTEyX2J5dGVzKCkpLGM9cy5hZGRyZXNzO2lmKGEucHVzaChjKSwwPT0oMHxyLl9jcnlwdG9faGFzaF9zaGE1MTIoYyxfLG4sMCkpKXt2YXIgaD15KHMsdCk7cmV0dXJuIGcoYSksaH1iKGEsXCJpbnZhbGlkIHVzYWdlXCIpfWZ1bmN0aW9uIEFlKGUsdCxhLF8scyl7dmFyIGM9W107bChzKSxtKGMsZSxcInN1YmtleV9sZW5cIiksKFwibnVtYmVyXCIhPXR5cGVvZiBlfHwoMHxlKSE9PWV8fGU8MCkmJmYoYyxcInN1YmtleV9sZW4gbXVzdCBiZSBhbiB1bnNpZ25lZCBpbnRlZ2VyXCIpLG0oYyx0LFwic3Via2V5X2lkXCIpLChcIm51bWJlclwiIT10eXBlb2YgdHx8KDB8dCkhPT10fHx0PDApJiZmKGMsXCJzdWJrZXlfaWQgbXVzdCBiZSBhbiB1bnNpZ25lZCBpbnRlZ2VyXCIpLFwic3RyaW5nXCIhPXR5cGVvZiBhJiZmKGMsXCJjdHggbXVzdCBiZSBhIHN0cmluZ1wiKTt2YXIgaD12KGE9bihhK1wiXFwwXCIpKTthLmxlbmd0aCxjLnB1c2goaCksXz1rKGMsXyxcImtleVwiKTt2YXIgbyxwPTB8ci5fY3J5cHRvX2tkZl9rZXlieXRlcygpO18ubGVuZ3RoIT09cCYmZihjLFwiaW52YWxpZCBrZXkgbGVuZ3RoXCIpLG89dihfKSxjLnB1c2gobyk7dmFyIGk9bmV3IHUoMHxlKSxkPWkuYWRkcmVzcztjLnB1c2goZCksci5fY3J5cHRvX2tkZl9kZXJpdmVfZnJvbV9rZXkoZCxlLHQsdD4+PjI0Pj4+OCxoLG8pO3ZhciBiPXkoaSxzKTtyZXR1cm4gZyhjKSxifWZ1bmN0aW9uIEJlKGUpe3ZhciB0PVtdO2woZSk7dmFyIGE9bmV3IHUoMHxyLl9jcnlwdG9fa2RmX2tleWJ5dGVzKCkpLF89YS5hZGRyZXNzO3QucHVzaChfKSxyLl9jcnlwdG9fa2RmX2tleWdlbihfKTt2YXIgbj15KGEsZSk7cmV0dXJuIGcodCksbn1mdW5jdGlvbiBLZShlLHQsYSxfKXt2YXIgbj1bXTtsKF8pLGU9ayhuLGUsXCJjbGllbnRQdWJsaWNLZXlcIik7dmFyIHMsYz0wfHIuX2NyeXB0b19reF9wdWJsaWNrZXlieXRlcygpO2UubGVuZ3RoIT09YyYmZihuLFwiaW52YWxpZCBjbGllbnRQdWJsaWNLZXkgbGVuZ3RoXCIpLHM9dihlKSxuLnB1c2gocyksdD1rKG4sdCxcImNsaWVudFNlY3JldEtleVwiKTt2YXIgaCxvPTB8ci5fY3J5cHRvX2t4X3NlY3JldGtleWJ5dGVzKCk7dC5sZW5ndGghPT1vJiZmKG4sXCJpbnZhbGlkIGNsaWVudFNlY3JldEtleSBsZW5ndGhcIiksaD12KHQpLG4ucHVzaChoKSxhPWsobixhLFwic2VydmVyUHVibGljS2V5XCIpO3ZhciBwLGk9MHxyLl9jcnlwdG9fa3hfcHVibGlja2V5Ynl0ZXMoKTthLmxlbmd0aCE9PWkmJmYobixcImludmFsaWQgc2VydmVyUHVibGljS2V5IGxlbmd0aFwiKSxwPXYoYSksbi5wdXNoKHApO3ZhciBkPW5ldyB1KDB8ci5fY3J5cHRvX2t4X3Nlc3Npb25rZXlieXRlcygpKSxtPWQuYWRkcmVzcztuLnB1c2gobSk7dmFyIHg9bmV3IHUoMHxyLl9jcnlwdG9fa3hfc2Vzc2lvbmtleWJ5dGVzKCkpLEU9eC5hZGRyZXNzO2lmKG4ucHVzaChFKSwwPT0oMHxyLl9jcnlwdG9fa3hfY2xpZW50X3Nlc3Npb25fa2V5cyhtLEUscyxoLHApKSl7dmFyIHc9eSh7c2hhcmVkUng6ZCxzaGFyZWRUeDp4fSxfKTtyZXR1cm4gZyhuKSx3fWIobixcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gSWUoZSl7dmFyIHQ9W107bChlKTt2YXIgYT1uZXcgdSgwfHIuX2NyeXB0b19reF9wdWJsaWNrZXlieXRlcygpKSxfPWEuYWRkcmVzczt0LnB1c2goXyk7dmFyIG49bmV3IHUoMHxyLl9jcnlwdG9fa3hfc2VjcmV0a2V5Ynl0ZXMoKSkscz1uLmFkZHJlc3M7aWYodC5wdXNoKHMpLDA9PSgwfHIuX2NyeXB0b19reF9rZXlwYWlyKF8scykpKXt2YXIgYz17cHVibGljS2V5OnkoYSxlKSxwcml2YXRlS2V5OnkobixlKSxrZXlUeXBlOlwieDI1NTE5XCJ9O3JldHVybiBnKHQpLGN9Yih0LFwiaW50ZXJuYWwgZXJyb3JcIil9ZnVuY3Rpb24gTWUoZSx0KXt2YXIgYT1bXTtsKHQpLGU9ayhhLGUsXCJzZWVkXCIpO3ZhciBfLG49MHxyLl9jcnlwdG9fa3hfc2VlZGJ5dGVzKCk7ZS5sZW5ndGghPT1uJiZmKGEsXCJpbnZhbGlkIHNlZWQgbGVuZ3RoXCIpLF89dihlKSxhLnB1c2goXyk7dmFyIHM9bmV3IHUoMHxyLl9jcnlwdG9fa3hfcHVibGlja2V5Ynl0ZXMoKSksYz1zLmFkZHJlc3M7YS5wdXNoKGMpO3ZhciBoPW5ldyB1KDB8ci5fY3J5cHRvX2t4X3NlY3JldGtleWJ5dGVzKCkpLG89aC5hZGRyZXNzO2lmKGEucHVzaChvKSwwPT0oMHxyLl9jcnlwdG9fa3hfc2VlZF9rZXlwYWlyKGMsbyxfKSkpe3ZhciBwPXtwdWJsaWNLZXk6eShzLHQpLHByaXZhdGVLZXk6eShoLHQpLGtleVR5cGU6XCJ4MjU1MTlcIn07cmV0dXJuIGcoYSkscH1iKGEsXCJpbnRlcm5hbCBlcnJvclwiKX1mdW5jdGlvbiBMZShlLHQsYSxfKXt2YXIgbj1bXTtsKF8pLGU9ayhuLGUsXCJzZXJ2ZXJQdWJsaWNLZXlcIik7dmFyIHMsYz0wfHIuX2NyeXB0b19reF9wdWJsaWNrZXlieXRlcygpO2UubGVuZ3RoIT09YyYmZihuLFwiaW52YWxpZCBzZXJ2ZXJQdWJsaWNLZXkgbGVuZ3RoXCIpLHM9dihlKSxuLnB1c2gocyksdD1rKG4sdCxcInNlcnZlclNlY3JldEtleVwiKTt2YXIgaCxvPTB8ci5fY3J5cHRvX2t4X3NlY3JldGtleWJ5dGVzKCk7dC5sZW5ndGghPT1vJiZmKG4sXCJpbnZhbGlkIHNlcnZlclNlY3JldEtleSBsZW5ndGhcIiksaD12KHQpLG4ucHVzaChoKSxhPWsobixhLFwiY2xpZW50UHVibGljS2V5XCIpO3ZhciBwLGk9MHxyLl9jcnlwdG9fa3hfcHVibGlja2V5Ynl0ZXMoKTthLmxlbmd0aCE9PWkmJmYobixcImludmFsaWQgY2xpZW50UHVibGljS2V5IGxlbmd0aFwiKSxwPXYoYSksbi5wdXNoKHApO3ZhciBkPW5ldyB1KDB8ci5fY3J5cHRvX2t4X3Nlc3Npb25rZXlieXRlcygpKSxtPWQuYWRkcmVzcztuLnB1c2gobSk7dmFyIHg9bmV3IHUoMHxyLl9jcnlwdG9fa3hfc2Vzc2lvbmtleWJ5dGVzKCkpLEU9eC5hZGRyZXNzO2lmKG4ucHVzaChFKSwwPT0oMHxyLl9jcnlwdG9fa3hfc2VydmVyX3Nlc3Npb25fa2V5cyhtLEUscyxoLHApKSl7dmFyIHc9eSh7c2hhcmVkUng6ZCxzaGFyZWRUeDp4fSxfKTtyZXR1cm4gZyhuKSx3fWIobixcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gTmUoZSx0LGEpe3ZhciBfPVtdO2woYSk7dmFyIG49dihlPWsoXyxlLFwibWVzc2FnZVwiKSkscz1lLmxlbmd0aDtfLnB1c2gobiksdD1rKF8sdCxcImtleVwiKTt2YXIgYyxoPTB8ci5fY3J5cHRvX29uZXRpbWVhdXRoX2tleWJ5dGVzKCk7dC5sZW5ndGghPT1oJiZmKF8sXCJpbnZhbGlkIGtleSBsZW5ndGhcIiksYz12KHQpLF8ucHVzaChjKTt2YXIgbz1uZXcgdSgwfHIuX2NyeXB0b19vbmV0aW1lYXV0aF9ieXRlcygpKSxwPW8uYWRkcmVzcztpZihfLnB1c2gocCksMD09KDB8ci5fY3J5cHRvX29uZXRpbWVhdXRoKHAsbixzLDAsYykpKXt2YXIgaT15KG8sYSk7cmV0dXJuIGcoXyksaX1iKF8sXCJpbnZhbGlkIHVzYWdlXCIpfWZ1bmN0aW9uIFVlKGUsdCl7dmFyIGE9W107bCh0KSxtKGEsZSxcInN0YXRlX2FkZHJlc3NcIik7dmFyIF89bmV3IHUoMHxyLl9jcnlwdG9fb25ldGltZWF1dGhfYnl0ZXMoKSksbj1fLmFkZHJlc3M7aWYoYS5wdXNoKG4pLDA9PSgwfHIuX2NyeXB0b19vbmV0aW1lYXV0aF9maW5hbChlLG4pKSl7dmFyIHM9KHIuX2ZyZWUoZSkseShfLHQpKTtyZXR1cm4gZyhhKSxzfWIoYSxcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gT2UoZSx0KXt2YXIgYT1bXTtsKHQpO3ZhciBfPW51bGw7bnVsbCE9ZSYmKF89dihlPWsoYSxlLFwia2V5XCIpKSxlLmxlbmd0aCxhLnB1c2goXykpO3ZhciBuPW5ldyB1KDE0NCkuYWRkcmVzcztpZigwPT0oMHxyLl9jcnlwdG9fb25ldGltZWF1dGhfaW5pdChuLF8pKSl7dmFyIHM9bjtyZXR1cm4gZyhhKSxzfWIoYSxcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gUmUoZSl7dmFyIHQ9W107bChlKTt2YXIgYT1uZXcgdSgwfHIuX2NyeXB0b19vbmV0aW1lYXV0aF9rZXlieXRlcygpKSxfPWEuYWRkcmVzczt0LnB1c2goXyksci5fY3J5cHRvX29uZXRpbWVhdXRoX2tleWdlbihfKTt2YXIgbj15KGEsZSk7cmV0dXJuIGcodCksbn1mdW5jdGlvbiBQZShlLHQsYSl7dmFyIF89W107bChhKSxtKF8sZSxcInN0YXRlX2FkZHJlc3NcIik7dmFyIG49dih0PWsoXyx0LFwibWVzc2FnZV9jaHVua1wiKSkscz10Lmxlbmd0aDtfLnB1c2gobiksMCE9KDB8ci5fY3J5cHRvX29uZXRpbWVhdXRoX3VwZGF0ZShlLG4scykpJiZiKF8sXCJpbnZhbGlkIHVzYWdlXCIpLGcoXyl9ZnVuY3Rpb24gQ2UoZSx0LGEpe3ZhciBfPVtdO2U9ayhfLGUsXCJoYXNoXCIpO3ZhciBuLHM9MHxyLl9jcnlwdG9fb25ldGltZWF1dGhfYnl0ZXMoKTtlLmxlbmd0aCE9PXMmJmYoXyxcImludmFsaWQgaGFzaCBsZW5ndGhcIiksbj12KGUpLF8ucHVzaChuKTt2YXIgYz12KHQ9ayhfLHQsXCJtZXNzYWdlXCIpKSxoPXQubGVuZ3RoO18ucHVzaChjKSxhPWsoXyxhLFwia2V5XCIpO3ZhciBvLHA9MHxyLl9jcnlwdG9fb25ldGltZWF1dGhfa2V5Ynl0ZXMoKTthLmxlbmd0aCE9PXAmJmYoXyxcImludmFsaWQga2V5IGxlbmd0aFwiKSxvPXYoYSksXy5wdXNoKG8pO3ZhciB5PTA9PSgwfHIuX2NyeXB0b19vbmV0aW1lYXV0aF92ZXJpZnkobixjLGgsMCxvKSk7cmV0dXJuIGcoXykseX1mdW5jdGlvbiBHZShlLHQsYSxfLG4scyxjKXt2YXIgaD1bXTtsKGMpLG0oaCxlLFwia2V5TGVuZ3RoXCIpLChcIm51bWJlclwiIT10eXBlb2YgZXx8KDB8ZSkhPT1lfHxlPDApJiZmKGgsXCJrZXlMZW5ndGggbXVzdCBiZSBhbiB1bnNpZ25lZCBpbnRlZ2VyXCIpO3ZhciBvPXYodD1rKGgsdCxcInBhc3N3b3JkXCIpKSxwPXQubGVuZ3RoO2gucHVzaChvKSxhPWsoaCxhLFwic2FsdFwiKTt2YXIgaSxkPTB8ci5fY3J5cHRvX3B3aGFzaF9zYWx0Ynl0ZXMoKTthLmxlbmd0aCE9PWQmJmYoaCxcImludmFsaWQgc2FsdCBsZW5ndGhcIiksaT12KGEpLGgucHVzaChpKSxtKGgsXyxcIm9wc0xpbWl0XCIpLChcIm51bWJlclwiIT10eXBlb2YgX3x8KDB8XykhPT1ffHxfPDApJiZmKGgsXCJvcHNMaW1pdCBtdXN0IGJlIGFuIHVuc2lnbmVkIGludGVnZXJcIiksbShoLG4sXCJtZW1MaW1pdFwiKSwoXCJudW1iZXJcIiE9dHlwZW9mIG58fCgwfG4pIT09bnx8bjwwKSYmZihoLFwibWVtTGltaXQgbXVzdCBiZSBhbiB1bnNpZ25lZCBpbnRlZ2VyXCIpLG0oaCxzLFwiYWxnb3JpdGhtXCIpLChcIm51bWJlclwiIT10eXBlb2Ygc3x8KDB8cykhPT1zfHxzPDApJiZmKGgsXCJhbGdvcml0aG0gbXVzdCBiZSBhbiB1bnNpZ25lZCBpbnRlZ2VyXCIpO3ZhciB4PW5ldyB1KDB8ZSksRT14LmFkZHJlc3M7aWYoaC5wdXNoKEUpLDA9PSgwfHIuX2NyeXB0b19wd2hhc2goRSxlLDAsbyxwLDAsaSxfLDAsbixzKSkpe3ZhciB3PXkoeCxjKTtyZXR1cm4gZyhoKSx3fWIoaCxcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gRGUoZSx0LGEsXyxuLHMpe3ZhciBjPVtdO2wocyksbShjLGUsXCJrZXlMZW5ndGhcIiksKFwibnVtYmVyXCIhPXR5cGVvZiBlfHwoMHxlKSE9PWV8fGU8MCkmJmYoYyxcImtleUxlbmd0aCBtdXN0IGJlIGFuIHVuc2lnbmVkIGludGVnZXJcIik7dmFyIGg9dih0PWsoYyx0LFwicGFzc3dvcmRcIikpLG89dC5sZW5ndGg7Yy5wdXNoKGgpLGE9ayhjLGEsXCJzYWx0XCIpO3ZhciBwLGk9MHxyLl9jcnlwdG9fcHdoYXNoX3NjcnlwdHNhbHNhMjA4c2hhMjU2X3NhbHRieXRlcygpO2EubGVuZ3RoIT09aSYmZihjLFwiaW52YWxpZCBzYWx0IGxlbmd0aFwiKSxwPXYoYSksYy5wdXNoKHApLG0oYyxfLFwib3BzTGltaXRcIiksKFwibnVtYmVyXCIhPXR5cGVvZiBffHwoMHxfKSE9PV98fF88MCkmJmYoYyxcIm9wc0xpbWl0IG11c3QgYmUgYW4gdW5zaWduZWQgaW50ZWdlclwiKSxtKGMsbixcIm1lbUxpbWl0XCIpLChcIm51bWJlclwiIT10eXBlb2Ygbnx8KDB8bikhPT1ufHxuPDApJiZmKGMsXCJtZW1MaW1pdCBtdXN0IGJlIGFuIHVuc2lnbmVkIGludGVnZXJcIik7dmFyIGQ9bmV3IHUoMHxlKSx4PWQuYWRkcmVzcztpZihjLnB1c2goeCksMD09KDB8ci5fY3J5cHRvX3B3aGFzaF9zY3J5cHRzYWxzYTIwOHNoYTI1Nih4LGUsMCxoLG8sMCxwLF8sMCxuKSkpe3ZhciBFPXkoZCxzKTtyZXR1cm4gZyhjKSxFfWIoYyxcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gWGUoZSx0LGEsXyxuLHMsYyl7dmFyIGg9W107bChjKTt2YXIgbz12KGU9ayhoLGUsXCJwYXNzd29yZFwiKSkscD1lLmxlbmd0aDtoLnB1c2gobyk7dmFyIGk9dih0PWsoaCx0LFwic2FsdFwiKSksZD10Lmxlbmd0aDtoLnB1c2goaSksbShoLGEsXCJvcHNMaW1pdFwiKSwoXCJudW1iZXJcIiE9dHlwZW9mIGF8fCgwfGEpIT09YXx8YTwwKSYmZihoLFwib3BzTGltaXQgbXVzdCBiZSBhbiB1bnNpZ25lZCBpbnRlZ2VyXCIpLG0oaCxfLFwiclwiKSwoXCJudW1iZXJcIiE9dHlwZW9mIF98fCgwfF8pIT09X3x8XzwwKSYmZihoLFwiciBtdXN0IGJlIGFuIHVuc2lnbmVkIGludGVnZXJcIiksbShoLG4sXCJwXCIpLChcIm51bWJlclwiIT10eXBlb2Ygbnx8KDB8bikhPT1ufHxuPDApJiZmKGgsXCJwIG11c3QgYmUgYW4gdW5zaWduZWQgaW50ZWdlclwiKSxtKGgscyxcImtleUxlbmd0aFwiKSwoXCJudW1iZXJcIiE9dHlwZW9mIHN8fCgwfHMpIT09c3x8czwwKSYmZihoLFwia2V5TGVuZ3RoIG11c3QgYmUgYW4gdW5zaWduZWQgaW50ZWdlclwiKTt2YXIgeD1uZXcgdSgwfHMpLEU9eC5hZGRyZXNzO2lmKGgucHVzaChFKSwwPT0oMHxyLl9jcnlwdG9fcHdoYXNoX3NjcnlwdHNhbHNhMjA4c2hhMjU2X2xsKG8scCxpLGQsYSwwLF8sbixFLHMpKSl7dmFyIHc9eSh4LGMpO3JldHVybiBnKGgpLHd9YihoLFwiaW52YWxpZCB1c2FnZVwiKX1mdW5jdGlvbiBWZShlLHQsYSxfKXt2YXIgbj1bXTtsKF8pO3ZhciBzPXYoZT1rKG4sZSxcInBhc3N3b3JkXCIpKSxjPWUubGVuZ3RoO24ucHVzaChzKSxtKG4sdCxcIm9wc0xpbWl0XCIpLChcIm51bWJlclwiIT10eXBlb2YgdHx8KDB8dCkhPT10fHx0PDApJiZmKG4sXCJvcHNMaW1pdCBtdXN0IGJlIGFuIHVuc2lnbmVkIGludGVnZXJcIiksbShuLGEsXCJtZW1MaW1pdFwiKSwoXCJudW1iZXJcIiE9dHlwZW9mIGF8fCgwfGEpIT09YXx8YTwwKSYmZihuLFwibWVtTGltaXQgbXVzdCBiZSBhbiB1bnNpZ25lZCBpbnRlZ2VyXCIpO3ZhciBoPW5ldyB1KDB8ci5fY3J5cHRvX3B3aGFzaF9zY3J5cHRzYWxzYTIwOHNoYTI1Nl9zdHJieXRlcygpKS5hZGRyZXNzO2lmKG4ucHVzaChoKSwwPT0oMHxyLl9jcnlwdG9fcHdoYXNoX3NjcnlwdHNhbHNhMjA4c2hhMjU2X3N0cihoLHMsYywwLHQsMCxhKSkpe3ZhciBvPXIuVVRGOFRvU3RyaW5nKGgpO3JldHVybiBnKG4pLG99YihuLFwiaW52YWxpZCB1c2FnZVwiKX1mdW5jdGlvbiBGZShlLHQsYSl7dmFyIF89W107bChhKSxcInN0cmluZ1wiIT10eXBlb2YgZSYmZihfLFwiaGFzaGVkX3Bhc3N3b3JkIG11c3QgYmUgYSBzdHJpbmdcIik7dmFyIHM9dihlPW4oZStcIlxcMFwiKSk7ZS5sZW5ndGgsXy5wdXNoKHMpO3ZhciBjPXYodD1rKF8sdCxcInBhc3N3b3JkXCIpKSxoPXQubGVuZ3RoO18ucHVzaChjKTt2YXIgbz0wPT0oMHxyLl9jcnlwdG9fcHdoYXNoX3NjcnlwdHNhbHNhMjA4c2hhMjU2X3N0cl92ZXJpZnkocyxjLGgsMCkpO3JldHVybiBnKF8pLG99ZnVuY3Rpb24gSGUoZSx0LGEsXyl7dmFyIG49W107bChfKTt2YXIgcz12KGU9ayhuLGUsXCJwYXNzd29yZFwiKSksYz1lLmxlbmd0aDtuLnB1c2gocyksbShuLHQsXCJvcHNMaW1pdFwiKSwoXCJudW1iZXJcIiE9dHlwZW9mIHR8fCgwfHQpIT09dHx8dDwwKSYmZihuLFwib3BzTGltaXQgbXVzdCBiZSBhbiB1bnNpZ25lZCBpbnRlZ2VyXCIpLG0obixhLFwibWVtTGltaXRcIiksKFwibnVtYmVyXCIhPXR5cGVvZiBhfHwoMHxhKSE9PWF8fGE8MCkmJmYobixcIm1lbUxpbWl0IG11c3QgYmUgYW4gdW5zaWduZWQgaW50ZWdlclwiKTt2YXIgaD1uZXcgdSgwfHIuX2NyeXB0b19wd2hhc2hfc3RyYnl0ZXMoKSkuYWRkcmVzcztpZihuLnB1c2goaCksMD09KDB8ci5fY3J5cHRvX3B3aGFzaF9zdHIoaCxzLGMsMCx0LDAsYSkpKXt2YXIgbz1yLlVURjhUb1N0cmluZyhoKTtyZXR1cm4gZyhuKSxvfWIobixcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gemUoZSx0LGEpe3ZhciBfPVtdO2woYSksXCJzdHJpbmdcIiE9dHlwZW9mIGUmJmYoXyxcImhhc2hlZF9wYXNzd29yZCBtdXN0IGJlIGEgc3RyaW5nXCIpO3ZhciBzPXYoZT1uKGUrXCJcXDBcIikpO2UubGVuZ3RoLF8ucHVzaChzKTt2YXIgYz12KHQ9ayhfLHQsXCJwYXNzd29yZFwiKSksaD10Lmxlbmd0aDtfLnB1c2goYyk7dmFyIG89MD09KDB8ci5fY3J5cHRvX3B3aGFzaF9zdHJfdmVyaWZ5KHMsYyxoLDApKTtyZXR1cm4gZyhfKSxvfWZ1bmN0aW9uIGplKGUsdCxhKXt2YXIgXz1bXTtsKGEpLGU9ayhfLGUsXCJwcml2YXRlS2V5XCIpO3ZhciBuLHM9MHxyLl9jcnlwdG9fc2NhbGFybXVsdF9zY2FsYXJieXRlcygpO2UubGVuZ3RoIT09cyYmZihfLFwiaW52YWxpZCBwcml2YXRlS2V5IGxlbmd0aFwiKSxuPXYoZSksXy5wdXNoKG4pLHQ9ayhfLHQsXCJwdWJsaWNLZXlcIik7dmFyIGMsaD0wfHIuX2NyeXB0b19zY2FsYXJtdWx0X3NjYWxhcmJ5dGVzKCk7dC5sZW5ndGghPT1oJiZmKF8sXCJpbnZhbGlkIHB1YmxpY0tleSBsZW5ndGhcIiksYz12KHQpLF8ucHVzaChjKTt2YXIgbz1uZXcgdSgwfHIuX2NyeXB0b19zY2FsYXJtdWx0X2J5dGVzKCkpLHA9by5hZGRyZXNzO2lmKF8ucHVzaChwKSwwPT0oMHxyLl9jcnlwdG9fc2NhbGFybXVsdChwLG4sYykpKXt2YXIgaT15KG8sYSk7cmV0dXJuIGcoXyksaX1iKF8sXCJ3ZWFrIHB1YmxpYyBrZXlcIil9ZnVuY3Rpb24gcWUoZSx0KXt2YXIgYT1bXTtsKHQpLGU9ayhhLGUsXCJwcml2YXRlS2V5XCIpO3ZhciBfLG49MHxyLl9jcnlwdG9fc2NhbGFybXVsdF9zY2FsYXJieXRlcygpO2UubGVuZ3RoIT09biYmZihhLFwiaW52YWxpZCBwcml2YXRlS2V5IGxlbmd0aFwiKSxfPXYoZSksYS5wdXNoKF8pO3ZhciBzPW5ldyB1KDB8ci5fY3J5cHRvX3NjYWxhcm11bHRfc2NhbGFyYnl0ZXMoKSksYz1zLmFkZHJlc3M7aWYoYS5wdXNoKGMpLDA9PSgwfHIuX2NyeXB0b19zY2FsYXJtdWx0X2Jhc2UoYyxfKSkpe3ZhciBoPXkocyx0KTtyZXR1cm4gZyhhKSxofWIoYSxcImluc2VjdXJlIHNjYWxhclwiKX1mdW5jdGlvbiBXZShlLHQsYSl7dmFyIF89W107bChhKSxlPWsoXyxlLFwic2NhbGFyXCIpO3ZhciBuLHM9MHxyLl9jcnlwdG9fc2NhbGFybXVsdF9yaXN0cmV0dG8yNTVfc2NhbGFyYnl0ZXMoKTtlLmxlbmd0aCE9PXMmJmYoXyxcImludmFsaWQgc2NhbGFyIGxlbmd0aFwiKSxuPXYoZSksXy5wdXNoKG4pLHQ9ayhfLHQsXCJwcml2YXRlS2V5XCIpO3ZhciBjLGg9MHxyLl9jcnlwdG9fc2NhbGFybXVsdF9yaXN0cmV0dG8yNTVfYnl0ZXMoKTt0Lmxlbmd0aCE9PWgmJmYoXyxcImludmFsaWQgcHJpdmF0ZUtleSBsZW5ndGhcIiksYz12KHQpLF8ucHVzaChjKTt2YXIgbz1uZXcgdSgwfHIuX2NyeXB0b19zY2FsYXJtdWx0X3Jpc3RyZXR0bzI1NV9ieXRlcygpKSxwPW8uYWRkcmVzcztpZihfLnB1c2gocCksMD09KDB8ci5fY3J5cHRvX3NjYWxhcm11bHRfcmlzdHJldHRvMjU1KHAsbixjKSkpe3ZhciBpPXkobyxhKTtyZXR1cm4gZyhfKSxpfWIoXyxcImlucHV0IGlzIHplcm8gZWxlbWVudFwiKX1mdW5jdGlvbiBKZShlLHQpe3ZhciBhPVtdO2wodCk7dmFyIF89dihlPWsoYSxlLFwic2NhbGFyXCIpKTtlLmxlbmd0aCxhLnB1c2goXyk7dmFyIG49bmV3IHUoMHxyLl9jcnlwdG9fY29yZV9yaXN0cmV0dG8yNTVfYnl0ZXMoKSkscz1uLmFkZHJlc3M7aWYoYS5wdXNoKHMpLDA9PSgwfHIuX2NyeXB0b19zY2FsYXJtdWx0X3Jpc3RyZXR0bzI1NV9iYXNlKHMsXykpKXt2YXIgYz15KG4sdCk7cmV0dXJuIGcoYSksY31iKGEsXCJzY2FsYXIgaXMgMFwiKX1mdW5jdGlvbiBRZShlLHQsYSxfKXt2YXIgbj1bXTtsKF8pO3ZhciBzPXYoZT1rKG4sZSxcIm1lc3NhZ2VcIikpLGM9ZS5sZW5ndGg7bi5wdXNoKHMpLHQ9ayhuLHQsXCJub25jZVwiKTt2YXIgaCxvPTB8ci5fY3J5cHRvX3NlY3JldGJveF9ub25jZWJ5dGVzKCk7dC5sZW5ndGghPT1vJiZmKG4sXCJpbnZhbGlkIG5vbmNlIGxlbmd0aFwiKSxoPXYodCksbi5wdXNoKGgpLGE9ayhuLGEsXCJrZXlcIik7dmFyIHAsaT0wfHIuX2NyeXB0b19zZWNyZXRib3hfa2V5Ynl0ZXMoKTthLmxlbmd0aCE9PWkmJmYobixcImludmFsaWQga2V5IGxlbmd0aFwiKSxwPXYoYSksbi5wdXNoKHApO3ZhciBkPW5ldyB1KDB8YyksbT1kLmFkZHJlc3M7bi5wdXNoKG0pO3ZhciB4PW5ldyB1KDB8ci5fY3J5cHRvX3NlY3JldGJveF9tYWNieXRlcygpKSxFPXguYWRkcmVzcztpZihuLnB1c2goRSksMD09KDB8ci5fY3J5cHRvX3NlY3JldGJveF9kZXRhY2hlZChtLEUscyxjLDAsaCxwKSkpe3ZhciB3PXkoe21hYzp4LGNpcGhlcjpkfSxfKTtyZXR1cm4gZyhuKSx3fWIobixcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gWmUoZSx0LGEsXyl7dmFyIG49W107bChfKTt2YXIgcz12KGU9ayhuLGUsXCJtZXNzYWdlXCIpKSxjPWUubGVuZ3RoO24ucHVzaChzKSx0PWsobix0LFwibm9uY2VcIik7dmFyIGgsbz0wfHIuX2NyeXB0b19zZWNyZXRib3hfbm9uY2VieXRlcygpO3QubGVuZ3RoIT09byYmZihuLFwiaW52YWxpZCBub25jZSBsZW5ndGhcIiksaD12KHQpLG4ucHVzaChoKSxhPWsobixhLFwia2V5XCIpO3ZhciBwLGk9MHxyLl9jcnlwdG9fc2VjcmV0Ym94X2tleWJ5dGVzKCk7YS5sZW5ndGghPT1pJiZmKG4sXCJpbnZhbGlkIGtleSBsZW5ndGhcIikscD12KGEpLG4ucHVzaChwKTt2YXIgZD1uZXcgdShjK3IuX2NyeXB0b19zZWNyZXRib3hfbWFjYnl0ZXMoKXwwKSxtPWQuYWRkcmVzcztpZihuLnB1c2gobSksMD09KDB8ci5fY3J5cHRvX3NlY3JldGJveF9lYXN5KG0scyxjLDAsaCxwKSkpe3ZhciB4PXkoZCxfKTtyZXR1cm4gZyhuKSx4fWIobixcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gJGUoZSl7dmFyIHQ9W107bChlKTt2YXIgYT1uZXcgdSgwfHIuX2NyeXB0b19zZWNyZXRib3hfa2V5Ynl0ZXMoKSksXz1hLmFkZHJlc3M7dC5wdXNoKF8pLHIuX2NyeXB0b19zZWNyZXRib3hfa2V5Z2VuKF8pO3ZhciBuPXkoYSxlKTtyZXR1cm4gZyh0KSxufWZ1bmN0aW9uIGV0KGUsdCxhLF8sbil7dmFyIHM9W107bChuKTt2YXIgYz12KGU9ayhzLGUsXCJjaXBoZXJ0ZXh0XCIpKSxoPWUubGVuZ3RoO3MucHVzaChjKSx0PWsocyx0LFwibWFjXCIpO3ZhciBvLHA9MHxyLl9jcnlwdG9fc2VjcmV0Ym94X21hY2J5dGVzKCk7dC5sZW5ndGghPT1wJiZmKHMsXCJpbnZhbGlkIG1hYyBsZW5ndGhcIiksbz12KHQpLHMucHVzaChvKSxhPWsocyxhLFwibm9uY2VcIik7dmFyIGksZD0wfHIuX2NyeXB0b19zZWNyZXRib3hfbm9uY2VieXRlcygpO2EubGVuZ3RoIT09ZCYmZihzLFwiaW52YWxpZCBub25jZSBsZW5ndGhcIiksaT12KGEpLHMucHVzaChpKSxfPWsocyxfLFwia2V5XCIpO3ZhciBtLHg9MHxyLl9jcnlwdG9fc2VjcmV0Ym94X2tleWJ5dGVzKCk7Xy5sZW5ndGghPT14JiZmKHMsXCJpbnZhbGlkIGtleSBsZW5ndGhcIiksbT12KF8pLHMucHVzaChtKTt2YXIgRT1uZXcgdSgwfGgpLHc9RS5hZGRyZXNzO2lmKHMucHVzaCh3KSwwPT0oMHxyLl9jcnlwdG9fc2VjcmV0Ym94X29wZW5fZGV0YWNoZWQodyxjLG8saCwwLGksbSkpKXt2YXIgUz15KEUsbik7cmV0dXJuIGcocyksU31iKHMsXCJ3cm9uZyBzZWNyZXQga2V5IGZvciB0aGUgZ2l2ZW4gY2lwaGVydGV4dFwiKX1mdW5jdGlvbiB0dChlLHQsYSxfKXt2YXIgbj1bXTtsKF8pLGU9ayhuLGUsXCJjaXBoZXJ0ZXh0XCIpO3ZhciBzLGM9ci5fY3J5cHRvX3NlY3JldGJveF9tYWNieXRlcygpLGg9ZS5sZW5ndGg7aDxjJiZmKG4sXCJjaXBoZXJ0ZXh0IGlzIHRvbyBzaG9ydFwiKSxzPXYoZSksbi5wdXNoKHMpLHQ9ayhuLHQsXCJub25jZVwiKTt2YXIgbyxwPTB8ci5fY3J5cHRvX3NlY3JldGJveF9ub25jZWJ5dGVzKCk7dC5sZW5ndGghPT1wJiZmKG4sXCJpbnZhbGlkIG5vbmNlIGxlbmd0aFwiKSxvPXYodCksbi5wdXNoKG8pLGE9ayhuLGEsXCJrZXlcIik7dmFyIGksZD0wfHIuX2NyeXB0b19zZWNyZXRib3hfa2V5Ynl0ZXMoKTthLmxlbmd0aCE9PWQmJmYobixcImludmFsaWQga2V5IGxlbmd0aFwiKSxpPXYoYSksbi5wdXNoKGkpO3ZhciBtPW5ldyB1KGgtci5fY3J5cHRvX3NlY3JldGJveF9tYWNieXRlcygpfDApLHg9bS5hZGRyZXNzO2lmKG4ucHVzaCh4KSwwPT0oMHxyLl9jcnlwdG9fc2VjcmV0Ym94X29wZW5fZWFzeSh4LHMsaCwwLG8saSkpKXt2YXIgRT15KG0sXyk7cmV0dXJuIGcobiksRX1iKG4sXCJ3cm9uZyBzZWNyZXQga2V5IGZvciB0aGUgZ2l2ZW4gY2lwaGVydGV4dFwiKX1mdW5jdGlvbiBydChlLHQsYSl7dmFyIF89W107bChhKSxlPWsoXyxlLFwiaGVhZGVyXCIpO3ZhciBuLHM9MHxyLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X2hlYWRlcmJ5dGVzKCk7ZS5sZW5ndGghPT1zJiZmKF8sXCJpbnZhbGlkIGhlYWRlciBsZW5ndGhcIiksbj12KGUpLF8ucHVzaChuKSx0PWsoXyx0LFwia2V5XCIpO3ZhciBjLGg9MHxyLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X2tleWJ5dGVzKCk7dC5sZW5ndGghPT1oJiZmKF8sXCJpbnZhbGlkIGtleSBsZW5ndGhcIiksYz12KHQpLF8ucHVzaChjKTt2YXIgbz1uZXcgdSg1MikuYWRkcmVzcztpZigwPT0oMHxyLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X2luaXRfcHVsbChvLG4sYykpKXt2YXIgcD1vO3JldHVybiBnKF8pLHB9YihfLFwiaW52YWxpZCB1c2FnZVwiKX1mdW5jdGlvbiBhdChlLHQpe3ZhciBhPVtdO2wodCksZT1rKGEsZSxcImtleVwiKTt2YXIgXyxuPTB8ci5fY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9rZXlieXRlcygpO2UubGVuZ3RoIT09biYmZihhLFwiaW52YWxpZCBrZXkgbGVuZ3RoXCIpLF89dihlKSxhLnB1c2goXyk7dmFyIHM9bmV3IHUoNTIpLmFkZHJlc3MsYz1uZXcgdSgwfHIuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfaGVhZGVyYnl0ZXMoKSksaD1jLmFkZHJlc3M7aWYoYS5wdXNoKGgpLDA9PSgwfHIuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfaW5pdF9wdXNoKHMsaCxfKSkpe3ZhciBvPXtzdGF0ZTpzLGhlYWRlcjp5KGMsdCl9O3JldHVybiBnKGEpLG99YihhLFwiaW52YWxpZCB1c2FnZVwiKX1mdW5jdGlvbiBfdChlKXt2YXIgdD1bXTtsKGUpO3ZhciBhPW5ldyB1KDB8ci5fY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9rZXlieXRlcygpKSxfPWEuYWRkcmVzczt0LnB1c2goXyksci5fY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9rZXlnZW4oXyk7dmFyIG49eShhLGUpO3JldHVybiBnKHQpLG59ZnVuY3Rpb24gbnQoZSx0LGEsXyl7dmFyIG49W107bChfKSxtKG4sZSxcInN0YXRlX2FkZHJlc3NcIiksdD1rKG4sdCxcImNpcGhlclwiKTt2YXIgcyxjPXIuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfYWJ5dGVzKCksaD10Lmxlbmd0aDtoPGMmJmYobixcImNpcGhlciBpcyB0b28gc2hvcnRcIikscz12KHQpLG4ucHVzaChzKTt2YXIgbz1udWxsLHA9MDtudWxsIT1hJiYobz12KGE9ayhuLGEsXCJhZFwiKSkscD1hLmxlbmd0aCxuLnB1c2gobykpO3ZhciBpPW5ldyB1KGgtci5fY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9hYnl0ZXMoKXwwKSxiPWkuYWRkcmVzcztuLnB1c2goYik7dmFyIHgsRT0oeD1kKDEpLG4ucHVzaCh4KSwoRT0wPT09ci5fY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9wdWxsKGUsYiwwLHgscyxoLDAsbyxwKSYme3RhZzpyLkhFQVBVOFt4XSxtZXNzYWdlOml9KSYme21lc3NhZ2U6eShFLm1lc3NhZ2UsXyksdGFnOkUudGFnfSk7cmV0dXJuIGcobiksRX1mdW5jdGlvbiBzdChlLHQsYSxfLG4pe3ZhciBzPVtdO2wobiksbShzLGUsXCJzdGF0ZV9hZGRyZXNzXCIpO3ZhciBjPXYodD1rKHMsdCxcIm1lc3NhZ2VfY2h1bmtcIikpLGg9dC5sZW5ndGg7cy5wdXNoKGMpO3ZhciBvPW51bGwscD0wO251bGwhPWEmJihvPXYoYT1rKHMsYSxcImFkXCIpKSxwPWEubGVuZ3RoLHMucHVzaChvKSksbShzLF8sXCJ0YWdcIiksKFwibnVtYmVyXCIhPXR5cGVvZiBffHwoMHxfKSE9PV98fF88MCkmJmYocyxcInRhZyBtdXN0IGJlIGFuIHVuc2lnbmVkIGludGVnZXJcIik7dmFyIGk9bmV3IHUoaCtyLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X2FieXRlcygpfDApLGQ9aS5hZGRyZXNzO2lmKHMucHVzaChkKSwwPT0oMHxyLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X3B1c2goZSxkLDAsYyxoLDAsbyxwLDAsXykpKXt2YXIgeD15KGksbik7cmV0dXJuIGcocykseH1iKHMsXCJpbnZhbGlkIHVzYWdlXCIpfWZ1bmN0aW9uIGN0KGUsdCl7dmFyIGE9W107cmV0dXJuIGwodCksbShhLGUsXCJzdGF0ZV9hZGRyZXNzXCIpLHIuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfcmVrZXkoZSksZyhhKSwhMH1mdW5jdGlvbiBodChlLHQsYSl7dmFyIF89W107bChhKTt2YXIgbj12KGU9ayhfLGUsXCJtZXNzYWdlXCIpKSxzPWUubGVuZ3RoO18ucHVzaChuKSx0PWsoXyx0LFwia2V5XCIpO3ZhciBjLGg9MHxyLl9jcnlwdG9fc2hvcnRoYXNoX2tleWJ5dGVzKCk7dC5sZW5ndGghPT1oJiZmKF8sXCJpbnZhbGlkIGtleSBsZW5ndGhcIiksYz12KHQpLF8ucHVzaChjKTt2YXIgbz1uZXcgdSgwfHIuX2NyeXB0b19zaG9ydGhhc2hfYnl0ZXMoKSkscD1vLmFkZHJlc3M7aWYoXy5wdXNoKHApLDA9PSgwfHIuX2NyeXB0b19zaG9ydGhhc2gocCxuLHMsMCxjKSkpe3ZhciBpPXkobyxhKTtyZXR1cm4gZyhfKSxpfWIoXyxcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gb3QoZSl7dmFyIHQ9W107bChlKTt2YXIgYT1uZXcgdSgwfHIuX2NyeXB0b19zaG9ydGhhc2hfa2V5Ynl0ZXMoKSksXz1hLmFkZHJlc3M7dC5wdXNoKF8pLHIuX2NyeXB0b19zaG9ydGhhc2hfa2V5Z2VuKF8pO3ZhciBuPXkoYSxlKTtyZXR1cm4gZyh0KSxufWZ1bmN0aW9uIHB0KGUsdCxhKXt2YXIgXz1bXTtsKGEpO3ZhciBuPXYoZT1rKF8sZSxcIm1lc3NhZ2VcIikpLHM9ZS5sZW5ndGg7Xy5wdXNoKG4pLHQ9ayhfLHQsXCJrZXlcIik7dmFyIGMsaD0wfHIuX2NyeXB0b19zaG9ydGhhc2hfc2lwaGFzaHgyNF9rZXlieXRlcygpO3QubGVuZ3RoIT09aCYmZihfLFwiaW52YWxpZCBrZXkgbGVuZ3RoXCIpLGM9dih0KSxfLnB1c2goYyk7dmFyIG89bmV3IHUoMHxyLl9jcnlwdG9fc2hvcnRoYXNoX3NpcGhhc2h4MjRfYnl0ZXMoKSkscD1vLmFkZHJlc3M7aWYoXy5wdXNoKHApLDA9PSgwfHIuX2NyeXB0b19zaG9ydGhhc2hfc2lwaGFzaHgyNChwLG4scywwLGMpKSl7dmFyIGk9eShvLGEpO3JldHVybiBnKF8pLGl9YihfLFwiaW52YWxpZCB1c2FnZVwiKX1mdW5jdGlvbiB5dChlLHQsYSl7dmFyIF89W107bChhKTt2YXIgbj12KGU9ayhfLGUsXCJtZXNzYWdlXCIpKSxzPWUubGVuZ3RoO18ucHVzaChuKSx0PWsoXyx0LFwicHJpdmF0ZUtleVwiKTt2YXIgYyxoPTB8ci5fY3J5cHRvX3NpZ25fc2VjcmV0a2V5Ynl0ZXMoKTt0Lmxlbmd0aCE9PWgmJmYoXyxcImludmFsaWQgcHJpdmF0ZUtleSBsZW5ndGhcIiksYz12KHQpLF8ucHVzaChjKTt2YXIgbz1uZXcgdShlLmxlbmd0aCtyLl9jcnlwdG9fc2lnbl9ieXRlcygpfDApLHA9by5hZGRyZXNzO2lmKF8ucHVzaChwKSwwPT0oMHxyLl9jcnlwdG9fc2lnbihwLG51bGwsbixzLDAsYykpKXt2YXIgaT15KG8sYSk7cmV0dXJuIGcoXyksaX1iKF8sXCJpbnZhbGlkIHVzYWdlXCIpfWZ1bmN0aW9uIGl0KGUsdCxhKXt2YXIgXz1bXTtsKGEpO3ZhciBuPXYoZT1rKF8sZSxcIm1lc3NhZ2VcIikpLHM9ZS5sZW5ndGg7Xy5wdXNoKG4pLHQ9ayhfLHQsXCJwcml2YXRlS2V5XCIpO3ZhciBjLGg9MHxyLl9jcnlwdG9fc2lnbl9zZWNyZXRrZXlieXRlcygpO3QubGVuZ3RoIT09aCYmZihfLFwiaW52YWxpZCBwcml2YXRlS2V5IGxlbmd0aFwiKSxjPXYodCksXy5wdXNoKGMpO3ZhciBvPW5ldyB1KDB8ci5fY3J5cHRvX3NpZ25fYnl0ZXMoKSkscD1vLmFkZHJlc3M7aWYoXy5wdXNoKHApLDA9PSgwfHIuX2NyeXB0b19zaWduX2RldGFjaGVkKHAsbnVsbCxuLHMsMCxjKSkpe3ZhciBpPXkobyxhKTtyZXR1cm4gZyhfKSxpfWIoXyxcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gbHQoZSx0KXt2YXIgYT1bXTtsKHQpLGU9ayhhLGUsXCJlZFBrXCIpO3ZhciBfLG49MHxyLl9jcnlwdG9fc2lnbl9wdWJsaWNrZXlieXRlcygpO2UubGVuZ3RoIT09biYmZihhLFwiaW52YWxpZCBlZFBrIGxlbmd0aFwiKSxfPXYoZSksYS5wdXNoKF8pO3ZhciBzPW5ldyB1KDB8ci5fY3J5cHRvX3NjYWxhcm11bHRfc2NhbGFyYnl0ZXMoKSksYz1zLmFkZHJlc3M7aWYoYS5wdXNoKGMpLDA9PSgwfHIuX2NyeXB0b19zaWduX2VkMjU1MTlfcGtfdG9fY3VydmUyNTUxOShjLF8pKSl7dmFyIGg9eShzLHQpO3JldHVybiBnKGEpLGh9YihhLFwiaW52YWxpZCBrZXlcIil9ZnVuY3Rpb24gdXQoZSx0KXt2YXIgYT1bXTtsKHQpLGU9ayhhLGUsXCJlZFNrXCIpO3ZhciBfLG49MHxyLl9jcnlwdG9fc2lnbl9zZWNyZXRrZXlieXRlcygpO2UubGVuZ3RoIT09biYmZihhLFwiaW52YWxpZCBlZFNrIGxlbmd0aFwiKSxfPXYoZSksYS5wdXNoKF8pO3ZhciBzPW5ldyB1KDB8ci5fY3J5cHRvX3NjYWxhcm11bHRfc2NhbGFyYnl0ZXMoKSksYz1zLmFkZHJlc3M7aWYoYS5wdXNoKGMpLDA9PSgwfHIuX2NyeXB0b19zaWduX2VkMjU1MTlfc2tfdG9fY3VydmUyNTUxOShjLF8pKSl7dmFyIGg9eShzLHQpO3JldHVybiBnKGEpLGh9YihhLFwiaW52YWxpZCBrZXlcIil9ZnVuY3Rpb24gdnQoZSx0KXt2YXIgYT1bXTtsKHQpLGU9ayhhLGUsXCJwcml2YXRlS2V5XCIpO3ZhciBfLG49MHxyLl9jcnlwdG9fc2lnbl9zZWNyZXRrZXlieXRlcygpO2UubGVuZ3RoIT09biYmZihhLFwiaW52YWxpZCBwcml2YXRlS2V5IGxlbmd0aFwiKSxfPXYoZSksYS5wdXNoKF8pO3ZhciBzPW5ldyB1KDB8ci5fY3J5cHRvX3NpZ25fcHVibGlja2V5Ynl0ZXMoKSksYz1zLmFkZHJlc3M7aWYoYS5wdXNoKGMpLDA9PSgwfHIuX2NyeXB0b19zaWduX2VkMjU1MTlfc2tfdG9fcGsoYyxfKSkpe3ZhciBoPXkocyx0KTtyZXR1cm4gZyhhKSxofWIoYSxcImludmFsaWQga2V5XCIpfWZ1bmN0aW9uIGR0KGUsdCl7dmFyIGE9W107bCh0KSxlPWsoYSxlLFwicHJpdmF0ZUtleVwiKTt2YXIgXyxuPTB8ci5fY3J5cHRvX3NpZ25fc2VjcmV0a2V5Ynl0ZXMoKTtlLmxlbmd0aCE9PW4mJmYoYSxcImludmFsaWQgcHJpdmF0ZUtleSBsZW5ndGhcIiksXz12KGUpLGEucHVzaChfKTt2YXIgcz1uZXcgdSgwfHIuX2NyeXB0b19zaWduX3NlZWRieXRlcygpKSxjPXMuYWRkcmVzcztpZihhLnB1c2goYyksMD09KDB8ci5fY3J5cHRvX3NpZ25fZWQyNTUxOV9za190b19zZWVkKGMsXykpKXt2YXIgaD15KHMsdCk7cmV0dXJuIGcoYSksaH1iKGEsXCJpbnZhbGlkIGtleVwiKX1mdW5jdGlvbiBndChlLHQsYSl7dmFyIF89W107bChhKSxtKF8sZSxcInN0YXRlX2FkZHJlc3NcIiksdD1rKF8sdCxcInByaXZhdGVLZXlcIik7dmFyIG4scz0wfHIuX2NyeXB0b19zaWduX3NlY3JldGtleWJ5dGVzKCk7dC5sZW5ndGghPT1zJiZmKF8sXCJpbnZhbGlkIHByaXZhdGVLZXkgbGVuZ3RoXCIpLG49dih0KSxfLnB1c2gobik7dmFyIGM9bmV3IHUoMHxyLl9jcnlwdG9fc2lnbl9ieXRlcygpKSxoPWMuYWRkcmVzcztpZihfLnB1c2goaCksMD09KDB8ci5fY3J5cHRvX3NpZ25fZmluYWxfY3JlYXRlKGUsaCxudWxsLG4pKSl7dmFyIG89KHIuX2ZyZWUoZSkseShjLGEpKTtyZXR1cm4gZyhfKSxvfWIoXyxcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gYnQoZSx0LGEsXyl7dmFyIG49W107bChfKSxtKG4sZSxcInN0YXRlX2FkZHJlc3NcIiksdD1rKG4sdCxcInNpZ25hdHVyZVwiKTt2YXIgcyxjPTB8ci5fY3J5cHRvX3NpZ25fYnl0ZXMoKTt0Lmxlbmd0aCE9PWMmJmYobixcImludmFsaWQgc2lnbmF0dXJlIGxlbmd0aFwiKSxzPXYodCksbi5wdXNoKHMpLGE9ayhuLGEsXCJwdWJsaWNLZXlcIik7dmFyIGgsbz0wfHIuX2NyeXB0b19zaWduX3B1YmxpY2tleWJ5dGVzKCk7YS5sZW5ndGghPT1vJiZmKG4sXCJpbnZhbGlkIHB1YmxpY0tleSBsZW5ndGhcIiksaD12KGEpLG4ucHVzaChoKTt2YXIgcD0wPT0oMHxyLl9jcnlwdG9fc2lnbl9maW5hbF92ZXJpZnkoZSxzLGgpKTtyZXR1cm4gZyhuKSxwfWZ1bmN0aW9uIGZ0KGUpe3ZhciB0PVtdO2woZSk7dmFyIGE9bmV3IHUoMjA4KS5hZGRyZXNzO2lmKDA9PSgwfHIuX2NyeXB0b19zaWduX2luaXQoYSkpKXt2YXIgXz1hO3JldHVybiBnKHQpLF99Yih0LFwiaW50ZXJuYWwgZXJyb3JcIil9ZnVuY3Rpb24gbXQoZSl7dmFyIHQ9W107bChlKTt2YXIgYT1uZXcgdSgwfHIuX2NyeXB0b19zaWduX3B1YmxpY2tleWJ5dGVzKCkpLF89YS5hZGRyZXNzO3QucHVzaChfKTt2YXIgbj1uZXcgdSgwfHIuX2NyeXB0b19zaWduX3NlY3JldGtleWJ5dGVzKCkpLHM9bi5hZGRyZXNzO2lmKHQucHVzaChzKSwwPT0oMHxyLl9jcnlwdG9fc2lnbl9rZXlwYWlyKF8scykpKXt2YXIgYz17cHVibGljS2V5OnkoYSxlKSxwcml2YXRlS2V5OnkobixlKSxrZXlUeXBlOlwiZWQyNTUxOVwifTtyZXR1cm4gZyh0KSxjfWIodCxcImludGVybmFsIGVycm9yXCIpfWZ1bmN0aW9uIGt0KGUsdCxhKXt2YXIgXz1bXTtsKGEpLGU9ayhfLGUsXCJzaWduZWRNZXNzYWdlXCIpO3ZhciBuLHM9ci5fY3J5cHRvX3NpZ25fYnl0ZXMoKSxjPWUubGVuZ3RoO2M8cyYmZihfLFwic2lnbmVkTWVzc2FnZSBpcyB0b28gc2hvcnRcIiksbj12KGUpLF8ucHVzaChuKSx0PWsoXyx0LFwicHVibGljS2V5XCIpO3ZhciBoLG89MHxyLl9jcnlwdG9fc2lnbl9wdWJsaWNrZXlieXRlcygpO3QubGVuZ3RoIT09byYmZihfLFwiaW52YWxpZCBwdWJsaWNLZXkgbGVuZ3RoXCIpLGg9dih0KSxfLnB1c2goaCk7dmFyIHA9bmV3IHUoYy1yLl9jcnlwdG9fc2lnbl9ieXRlcygpfDApLGk9cC5hZGRyZXNzO2lmKF8ucHVzaChpKSwwPT0oMHxyLl9jcnlwdG9fc2lnbl9vcGVuKGksbnVsbCxuLGMsMCxoKSkpe3ZhciBkPXkocCxhKTtyZXR1cm4gZyhfKSxkfWIoXyxcImluY29ycmVjdCBzaWduYXR1cmUgZm9yIHRoZSBnaXZlbiBwdWJsaWMga2V5XCIpfWZ1bmN0aW9uIHh0KGUsdCl7dmFyIGE9W107bCh0KSxlPWsoYSxlLFwic2VlZFwiKTt2YXIgXyxuPTB8ci5fY3J5cHRvX3NpZ25fc2VlZGJ5dGVzKCk7ZS5sZW5ndGghPT1uJiZmKGEsXCJpbnZhbGlkIHNlZWQgbGVuZ3RoXCIpLF89dihlKSxhLnB1c2goXyk7dmFyIHM9bmV3IHUoMHxyLl9jcnlwdG9fc2lnbl9wdWJsaWNrZXlieXRlcygpKSxjPXMuYWRkcmVzczthLnB1c2goYyk7dmFyIGg9bmV3IHUoMHxyLl9jcnlwdG9fc2lnbl9zZWNyZXRrZXlieXRlcygpKSxvPWguYWRkcmVzcztpZihhLnB1c2gobyksMD09KDB8ci5fY3J5cHRvX3NpZ25fc2VlZF9rZXlwYWlyKGMsbyxfKSkpe3ZhciBwPXtwdWJsaWNLZXk6eShzLHQpLHByaXZhdGVLZXk6eShoLHQpLGtleVR5cGU6XCJlZDI1NTE5XCJ9O3JldHVybiBnKGEpLHB9YihhLFwiaW52YWxpZCB1c2FnZVwiKX1mdW5jdGlvbiBFdChlLHQsYSl7dmFyIF89W107bChhKSxtKF8sZSxcInN0YXRlX2FkZHJlc3NcIik7dmFyIG49dih0PWsoXyx0LFwibWVzc2FnZV9jaHVua1wiKSkscz10Lmxlbmd0aDtfLnB1c2gobiksMCE9KDB8ci5fY3J5cHRvX3NpZ25fdXBkYXRlKGUsbixzKSkmJmIoXyxcImludmFsaWQgdXNhZ2VcIiksZyhfKX1mdW5jdGlvbiB3dChlLHQsYSl7dmFyIF89W107ZT1rKF8sZSxcInNpZ25hdHVyZVwiKTt2YXIgbixzPTB8ci5fY3J5cHRvX3NpZ25fYnl0ZXMoKTtlLmxlbmd0aCE9PXMmJmYoXyxcImludmFsaWQgc2lnbmF0dXJlIGxlbmd0aFwiKSxuPXYoZSksXy5wdXNoKG4pO3ZhciBjPXYodD1rKF8sdCxcIm1lc3NhZ2VcIikpLGg9dC5sZW5ndGg7Xy5wdXNoKGMpLGE9ayhfLGEsXCJwdWJsaWNLZXlcIik7dmFyIG8scD0wfHIuX2NyeXB0b19zaWduX3B1YmxpY2tleWJ5dGVzKCk7YS5sZW5ndGghPT1wJiZmKF8sXCJpbnZhbGlkIHB1YmxpY0tleSBsZW5ndGhcIiksbz12KGEpLF8ucHVzaChvKTt2YXIgeT0wPT0oMHxyLl9jcnlwdG9fc2lnbl92ZXJpZnlfZGV0YWNoZWQobixjLGgsMCxvKSk7cmV0dXJuIGcoXykseX1mdW5jdGlvbiBTdChlLHQsYSxfKXt2YXIgbj1bXTtsKF8pLG0obixlLFwib3V0TGVuZ3RoXCIpLChcIm51bWJlclwiIT10eXBlb2YgZXx8KDB8ZSkhPT1lfHxlPDApJiZmKG4sXCJvdXRMZW5ndGggbXVzdCBiZSBhbiB1bnNpZ25lZCBpbnRlZ2VyXCIpLHQ9ayhuLHQsXCJrZXlcIik7dmFyIHMsYz0wfHIuX2NyeXB0b19zdHJlYW1fY2hhY2hhMjBfa2V5Ynl0ZXMoKTt0Lmxlbmd0aCE9PWMmJmYobixcImludmFsaWQga2V5IGxlbmd0aFwiKSxzPXYodCksbi5wdXNoKHMpLGE9ayhuLGEsXCJub25jZVwiKTt2YXIgaCxvPTB8ci5fY3J5cHRvX3N0cmVhbV9jaGFjaGEyMF9ub25jZWJ5dGVzKCk7YS5sZW5ndGghPT1vJiZmKG4sXCJpbnZhbGlkIG5vbmNlIGxlbmd0aFwiKSxoPXYoYSksbi5wdXNoKGgpO3ZhciBwPW5ldyB1KDB8ZSksaT1wLmFkZHJlc3M7bi5wdXNoKGkpLHIuX2NyeXB0b19zdHJlYW1fY2hhY2hhMjAoaSxlLDAsaCxzKTt2YXIgZD15KHAsXyk7cmV0dXJuIGcobiksZH1mdW5jdGlvbiBUdChlLHQsYSxfKXt2YXIgbj1bXTtsKF8pO3ZhciBzPXYoZT1rKG4sZSxcImlucHV0X21lc3NhZ2VcIikpLGM9ZS5sZW5ndGg7bi5wdXNoKHMpLHQ9ayhuLHQsXCJub25jZVwiKTt2YXIgaCxvPTB8ci5fY3J5cHRvX3N0cmVhbV9jaGFjaGEyMF9pZXRmX25vbmNlYnl0ZXMoKTt0Lmxlbmd0aCE9PW8mJmYobixcImludmFsaWQgbm9uY2UgbGVuZ3RoXCIpLGg9dih0KSxuLnB1c2goaCksYT1rKG4sYSxcImtleVwiKTt2YXIgcCxpPTB8ci5fY3J5cHRvX3N0cmVhbV9jaGFjaGEyMF9pZXRmX2tleWJ5dGVzKCk7YS5sZW5ndGghPT1pJiZmKG4sXCJpbnZhbGlkIGtleSBsZW5ndGhcIikscD12KGEpLG4ucHVzaChwKTt2YXIgZD1uZXcgdSgwfGMpLG09ZC5hZGRyZXNzO2lmKG4ucHVzaChtKSwwPT09ci5fY3J5cHRvX3N0cmVhbV9jaGFjaGEyMF9pZXRmX3hvcihtLHMsYywwLGgscCkpe3ZhciB4PXkoZCxfKTtyZXR1cm4gZyhuKSx4fWIobixcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gWXQoZSx0LGEsXyxuKXt2YXIgcz1bXTtsKG4pO3ZhciBjPXYoZT1rKHMsZSxcImlucHV0X21lc3NhZ2VcIikpLGg9ZS5sZW5ndGg7cy5wdXNoKGMpLHQ9ayhzLHQsXCJub25jZVwiKTt2YXIgbyxwPTB8ci5fY3J5cHRvX3N0cmVhbV9jaGFjaGEyMF9pZXRmX25vbmNlYnl0ZXMoKTt0Lmxlbmd0aCE9PXAmJmYocyxcImludmFsaWQgbm9uY2UgbGVuZ3RoXCIpLG89dih0KSxzLnB1c2gobyksbShzLGEsXCJub25jZV9pbmNyZW1lbnRcIiksKFwibnVtYmVyXCIhPXR5cGVvZiBhfHwoMHxhKSE9PWF8fGE8MCkmJmYocyxcIm5vbmNlX2luY3JlbWVudCBtdXN0IGJlIGFuIHVuc2lnbmVkIGludGVnZXJcIiksXz1rKHMsXyxcImtleVwiKTt2YXIgaSxkPTB8ci5fY3J5cHRvX3N0cmVhbV9jaGFjaGEyMF9pZXRmX2tleWJ5dGVzKCk7Xy5sZW5ndGghPT1kJiZmKHMsXCJpbnZhbGlkIGtleSBsZW5ndGhcIiksaT12KF8pLHMucHVzaChpKTt2YXIgeD1uZXcgdSgwfGgpLEU9eC5hZGRyZXNzO2lmKHMucHVzaChFKSwwPT09ci5fY3J5cHRvX3N0cmVhbV9jaGFjaGEyMF9pZXRmX3hvcl9pYyhFLGMsaCwwLG8sYSwwLGkpKXt2YXIgdz15KHgsbik7cmV0dXJuIGcocyksd31iKHMsXCJpbnZhbGlkIHVzYWdlXCIpfWZ1bmN0aW9uIEF0KGUpe3ZhciB0PVtdO2woZSk7dmFyIGE9bmV3IHUoMHxyLl9jcnlwdG9fc3RyZWFtX2NoYWNoYTIwX2tleWJ5dGVzKCkpLF89YS5hZGRyZXNzO3QucHVzaChfKSxyLl9jcnlwdG9fc3RyZWFtX2NoYWNoYTIwX2tleWdlbihfKTt2YXIgbj15KGEsZSk7cmV0dXJuIGcodCksbn1mdW5jdGlvbiBCdChlLHQsYSxfKXt2YXIgbj1bXTtsKF8pO3ZhciBzPXYoZT1rKG4sZSxcImlucHV0X21lc3NhZ2VcIikpLGM9ZS5sZW5ndGg7bi5wdXNoKHMpLHQ9ayhuLHQsXCJub25jZVwiKTt2YXIgaCxvPTB8ci5fY3J5cHRvX3N0cmVhbV9jaGFjaGEyMF9ub25jZWJ5dGVzKCk7dC5sZW5ndGghPT1vJiZmKG4sXCJpbnZhbGlkIG5vbmNlIGxlbmd0aFwiKSxoPXYodCksbi5wdXNoKGgpLGE9ayhuLGEsXCJrZXlcIik7dmFyIHAsaT0wfHIuX2NyeXB0b19zdHJlYW1fY2hhY2hhMjBfa2V5Ynl0ZXMoKTthLmxlbmd0aCE9PWkmJmYobixcImludmFsaWQga2V5IGxlbmd0aFwiKSxwPXYoYSksbi5wdXNoKHApO3ZhciBkPW5ldyB1KDB8YyksbT1kLmFkZHJlc3M7aWYobi5wdXNoKG0pLDA9PT1yLl9jcnlwdG9fc3RyZWFtX2NoYWNoYTIwX3hvcihtLHMsYywwLGgscCkpe3ZhciB4PXkoZCxfKTtyZXR1cm4gZyhuKSx4fWIobixcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gS3QoZSx0LGEsXyxuKXt2YXIgcz1bXTtsKG4pO3ZhciBjPXYoZT1rKHMsZSxcImlucHV0X21lc3NhZ2VcIikpLGg9ZS5sZW5ndGg7cy5wdXNoKGMpLHQ9ayhzLHQsXCJub25jZVwiKTt2YXIgbyxwPTB8ci5fY3J5cHRvX3N0cmVhbV9jaGFjaGEyMF9ub25jZWJ5dGVzKCk7dC5sZW5ndGghPT1wJiZmKHMsXCJpbnZhbGlkIG5vbmNlIGxlbmd0aFwiKSxvPXYodCkscy5wdXNoKG8pLG0ocyxhLFwibm9uY2VfaW5jcmVtZW50XCIpLChcIm51bWJlclwiIT10eXBlb2YgYXx8KDB8YSkhPT1hfHxhPDApJiZmKHMsXCJub25jZV9pbmNyZW1lbnQgbXVzdCBiZSBhbiB1bnNpZ25lZCBpbnRlZ2VyXCIpLF89ayhzLF8sXCJrZXlcIik7dmFyIGksZD0wfHIuX2NyeXB0b19zdHJlYW1fY2hhY2hhMjBfa2V5Ynl0ZXMoKTtfLmxlbmd0aCE9PWQmJmYocyxcImludmFsaWQga2V5IGxlbmd0aFwiKSxpPXYoXykscy5wdXNoKGkpO3ZhciB4PW5ldyB1KDB8aCksRT14LmFkZHJlc3M7aWYocy5wdXNoKEUpLDA9PT1yLl9jcnlwdG9fc3RyZWFtX2NoYWNoYTIwX3hvcl9pYyhFLGMsaCwwLG8sYSwwLGkpKXt2YXIgdz15KHgsbik7cmV0dXJuIGcocyksd31iKHMsXCJpbnZhbGlkIHVzYWdlXCIpfWZ1bmN0aW9uIEl0KGUpe3ZhciB0PVtdO2woZSk7dmFyIGE9bmV3IHUoMHxyLl9jcnlwdG9fc3RyZWFtX2tleWJ5dGVzKCkpLF89YS5hZGRyZXNzO3QucHVzaChfKSxyLl9jcnlwdG9fc3RyZWFtX2tleWdlbihfKTt2YXIgbj15KGEsZSk7cmV0dXJuIGcodCksbn1mdW5jdGlvbiBNdChlKXt2YXIgdD1bXTtsKGUpO3ZhciBhPW5ldyB1KDB8ci5fY3J5cHRvX3N0cmVhbV94Y2hhY2hhMjBfa2V5Ynl0ZXMoKSksXz1hLmFkZHJlc3M7dC5wdXNoKF8pLHIuX2NyeXB0b19zdHJlYW1feGNoYWNoYTIwX2tleWdlbihfKTt2YXIgbj15KGEsZSk7cmV0dXJuIGcodCksbn1mdW5jdGlvbiBMdChlLHQsYSxfKXt2YXIgbj1bXTtsKF8pO3ZhciBzPXYoZT1rKG4sZSxcImlucHV0X21lc3NhZ2VcIikpLGM9ZS5sZW5ndGg7bi5wdXNoKHMpLHQ9ayhuLHQsXCJub25jZVwiKTt2YXIgaCxvPTB8ci5fY3J5cHRvX3N0cmVhbV94Y2hhY2hhMjBfbm9uY2VieXRlcygpO3QubGVuZ3RoIT09byYmZihuLFwiaW52YWxpZCBub25jZSBsZW5ndGhcIiksaD12KHQpLG4ucHVzaChoKSxhPWsobixhLFwia2V5XCIpO3ZhciBwLGk9MHxyLl9jcnlwdG9fc3RyZWFtX3hjaGFjaGEyMF9rZXlieXRlcygpO2EubGVuZ3RoIT09aSYmZihuLFwiaW52YWxpZCBrZXkgbGVuZ3RoXCIpLHA9dihhKSxuLnB1c2gocCk7dmFyIGQ9bmV3IHUoMHxjKSxtPWQuYWRkcmVzcztpZihuLnB1c2gobSksMD09PXIuX2NyeXB0b19zdHJlYW1feGNoYWNoYTIwX3hvcihtLHMsYywwLGgscCkpe3ZhciB4PXkoZCxfKTtyZXR1cm4gZyhuKSx4fWIobixcImludmFsaWQgdXNhZ2VcIil9ZnVuY3Rpb24gTnQoZSx0LGEsXyxuKXt2YXIgcz1bXTtsKG4pO3ZhciBjPXYoZT1rKHMsZSxcImlucHV0X21lc3NhZ2VcIikpLGg9ZS5sZW5ndGg7cy5wdXNoKGMpLHQ9ayhzLHQsXCJub25jZVwiKTt2YXIgbyxwPTB8ci5fY3J5cHRvX3N0cmVhbV94Y2hhY2hhMjBfbm9uY2VieXRlcygpO3QubGVuZ3RoIT09cCYmZihzLFwiaW52YWxpZCBub25jZSBsZW5ndGhcIiksbz12KHQpLHMucHVzaChvKSxtKHMsYSxcIm5vbmNlX2luY3JlbWVudFwiKSwoXCJudW1iZXJcIiE9dHlwZW9mIGF8fCgwfGEpIT09YXx8YTwwKSYmZihzLFwibm9uY2VfaW5jcmVtZW50IG11c3QgYmUgYW4gdW5zaWduZWQgaW50ZWdlclwiKSxfPWsocyxfLFwia2V5XCIpO3ZhciBpLGQ9MHxyLl9jcnlwdG9fc3RyZWFtX3hjaGFjaGEyMF9rZXlieXRlcygpO18ubGVuZ3RoIT09ZCYmZihzLFwiaW52YWxpZCBrZXkgbGVuZ3RoXCIpLGk9dihfKSxzLnB1c2goaSk7dmFyIHg9bmV3IHUoMHxoKSxFPXguYWRkcmVzcztpZihzLnB1c2goRSksMD09PXIuX2NyeXB0b19zdHJlYW1feGNoYWNoYTIwX3hvcl9pYyhFLGMsaCwwLG8sYSwwLGkpKXt2YXIgdz15KHgsbik7cmV0dXJuIGcocyksd31iKHMsXCJpbnZhbGlkIHVzYWdlXCIpfWZ1bmN0aW9uIFV0KGUsdCl7dmFyIGE9W107bCh0KSxtKGEsZSxcImxlbmd0aFwiKSwoXCJudW1iZXJcIiE9dHlwZW9mIGV8fCgwfGUpIT09ZXx8ZTwwKSYmZihhLFwibGVuZ3RoIG11c3QgYmUgYW4gdW5zaWduZWQgaW50ZWdlclwiKTt2YXIgXz1uZXcgdSgwfGUpLG49Xy5hZGRyZXNzO2EucHVzaChuKSxyLl9yYW5kb21ieXRlc19idWYobixlKTt2YXIgcz15KF8sdCk7cmV0dXJuIGcoYSksc31mdW5jdGlvbiBPdChlLHQsYSl7dmFyIF89W107bChhKSxtKF8sZSxcImxlbmd0aFwiKSwoXCJudW1iZXJcIiE9dHlwZW9mIGV8fCgwfGUpIT09ZXx8ZTwwKSYmZihfLFwibGVuZ3RoIG11c3QgYmUgYW4gdW5zaWduZWQgaW50ZWdlclwiKSx0PWsoXyx0LFwic2VlZFwiKTt2YXIgbixzPTB8ci5fcmFuZG9tYnl0ZXNfc2VlZGJ5dGVzKCk7dC5sZW5ndGghPT1zJiZmKF8sXCJpbnZhbGlkIHNlZWQgbGVuZ3RoXCIpLG49dih0KSxfLnB1c2gobik7dmFyIGM9bmV3IHUoMHxlKSxoPWMuYWRkcmVzcztfLnB1c2goaCksci5fcmFuZG9tYnl0ZXNfYnVmX2RldGVybWluaXN0aWMoaCxlLG4pO3ZhciBvPXkoYyxhKTtyZXR1cm4gZyhfKSxvfWZ1bmN0aW9uIFJ0KGUpe2woZSksci5fcmFuZG9tYnl0ZXNfY2xvc2UoKX1mdW5jdGlvbiBQdChlKXtsKGUpO3ZhciB0PXIuX3JhbmRvbWJ5dGVzX3JhbmRvbSgpPj4+MDtyZXR1cm4gZyhbXSksdH1mdW5jdGlvbiBDdChlLHQpe3ZhciBhPVtdO2wodCk7Zm9yKHZhciBfPXIuX21hbGxvYygyNCksbj0wO248NjtuKyspci5zZXRWYWx1ZShfKzQqbixyLlJ1bnRpbWUuYWRkRnVuY3Rpb24oZVtbXCJpbXBsZW1lbnRhdGlvbl9uYW1lXCIsXCJyYW5kb21cIixcInN0aXJcIixcInVuaWZvcm1cIixcImJ1ZlwiLFwiY2xvc2VcIl1bbl1dKSxcImkzMlwiKTswIT0oMHxyLl9yYW5kb21ieXRlc19zZXRfaW1wbGVtZW50YXRpb24oXykpJiZiKGEsXCJ1bnN1cHBvcnRlZCBpbXBsZW1lbnRhdGlvblwiKSxnKGEpfWZ1bmN0aW9uIEd0KGUpe2woZSksci5fcmFuZG9tYnl0ZXNfc3RpcigpfWZ1bmN0aW9uIER0KGUsdCl7dmFyIGE9W107bCh0KSxtKGEsZSxcInVwcGVyX2JvdW5kXCIpLChcIm51bWJlclwiIT10eXBlb2YgZXx8KDB8ZSkhPT1lfHxlPDApJiZmKGEsXCJ1cHBlcl9ib3VuZCBtdXN0IGJlIGFuIHVuc2lnbmVkIGludGVnZXJcIik7dmFyIF89ci5fcmFuZG9tYnl0ZXNfdW5pZm9ybShlKT4+PjA7cmV0dXJuIGcoYSksX31mdW5jdGlvbiBYdCgpe3ZhciBlPXIuX3NvZGl1bV92ZXJzaW9uX3N0cmluZygpLHQ9ci5VVEY4VG9TdHJpbmcoZSk7cmV0dXJuIGcoW10pLHR9cmV0dXJuIHUucHJvdG90eXBlLnRvX1VpbnQ4QXJyYXk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgVWludDhBcnJheSh0aGlzLmxlbmd0aCk7cmV0dXJuIGUuc2V0KHIuSEVBUFU4LnN1YmFycmF5KHRoaXMuYWRkcmVzcyx0aGlzLmFkZHJlc3MrdGhpcy5sZW5ndGgpKSxlfSxlLmFkZD1mdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkmJnQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiT25seSBVaW50OEFycmF5IGluc3RhbmNlcyBjYW4gYWRkZWRcIik7dmFyIHI9ZS5sZW5ndGgsYT0wLF89MDtpZih0Lmxlbmd0aCE9ZS5sZW5ndGgpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50cyBtdXN0IGhhdmUgdGhlIHNhbWUgbGVuZ3RoXCIpO2ZvcihfPTA7XzxyO18rKylhPj49OCxhKz1lW19dK3RbX10sZVtfXT0yNTUmYX0sZS5iYXNlNjRfdmFyaWFudHM9aCxlLmNvbXBhcmU9ZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiBVaW50OEFycmF5JiZ0IGluc3RhbmNlb2YgVWludDhBcnJheSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9ubHkgVWludDhBcnJheSBpbnN0YW5jZXMgY2FuIGJlIGNvbXBhcmVkXCIpO2lmKGUubGVuZ3RoIT09dC5sZW5ndGgpdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9ubHkgaW5zdGFuY2VzIG9mIGlkZW50aWNhbCBsZW5ndGggY2FuIGJlIGNvbXBhcmVkXCIpO2Zvcih2YXIgcj0wLGE9MSxfPWUubGVuZ3RoO18tLSA+MDspcnw9dFtfXS1lW19dPj44JmEsYSY9KHRbX11eZVtfXSktMT4+ODtyZXR1cm4gcityK2EtMX0sZS5mcm9tX2Jhc2U2ND1mdW5jdGlvbihlLHQpe3Q9byh0KTt2YXIgYSxfPVtdLG49bmV3IHUoMyooZT1rKF8sZSxcImlucHV0XCIpKS5sZW5ndGgvNCkscz12KGUpLGM9ZCg0KSxoPWQoNCk7cmV0dXJuIF8ucHVzaChzKSxfLnB1c2gobi5hZGRyZXNzKSxfLnB1c2gobi5yZXN1bHRfYmluX2xlbl9wKSxfLnB1c2gobi5iNjRfZW5kX3ApLDAhPT1yLl9zb2RpdW1fYmFzZTY0MmJpbihuLmFkZHJlc3Msbi5sZW5ndGgscyxlLmxlbmd0aCwwLGMsaCx0KSYmYihfLFwiaW52YWxpZCBpbnB1dFwiKSxyLmdldFZhbHVlKGgsXCJpMzJcIiktcyE9PWUubGVuZ3RoJiZiKF8sXCJpbmNvbXBsZXRlIGlucHV0XCIpLG4ubGVuZ3RoPXIuZ2V0VmFsdWUoYyxcImkzMlwiKSxhPW4udG9fVWludDhBcnJheSgpLGcoXyksYX0sZS5mcm9tX2hleD1mdW5jdGlvbihlKXt2YXIgdCxhPVtdLF89bmV3IHUoKGU9ayhhLGUsXCJpbnB1dFwiKSkubGVuZ3RoLzIpLG49dihlKSxzPWQoNCk7cmV0dXJuIGEucHVzaChuKSxhLnB1c2goXy5hZGRyZXNzKSxhLnB1c2goXy5oZXhfZW5kX3ApLDAhPT1yLl9zb2RpdW1faGV4MmJpbihfLmFkZHJlc3MsXy5sZW5ndGgsbixlLmxlbmd0aCwwLDAscykmJmIoYSxcImludmFsaWQgaW5wdXRcIiksci5nZXRWYWx1ZShzLFwiaTMyXCIpLW4hPT1lLmxlbmd0aCYmYihhLFwiaW5jb21wbGV0ZSBpbnB1dFwiKSx0PV8udG9fVWludDhBcnJheSgpLGcoYSksdH0sZS5mcm9tX3N0cmluZz1uLGUuaW5jcmVtZW50PWZ1bmN0aW9uKGUpe2lmKCEoZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJPbmx5IFVpbnQ4QXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBpbmNyZW1lbnRlZFwiKTtmb3IodmFyIHQ9MjU2LHI9MCxhPWUubGVuZ3RoO3I8YTtyKyspdD4+PTgsdCs9ZVtyXSxlW3JdPTI1NSZ0fSxlLmlzX3plcm89ZnVuY3Rpb24oZSl7aWYoIShlIGluc3RhbmNlb2YgVWludDhBcnJheSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9ubHkgVWludDhBcnJheSBpbnN0YW5jZXMgY2FuIGJlIGNoZWNrZWRcIik7Zm9yKHZhciB0PTAscj0wLGE9ZS5sZW5ndGg7cjxhO3IrKyl0fD1lW3JdO3JldHVybiAwPT09dH0sZS5saWJzb2RpdW09dCxlLm1lbWNtcD1mdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkmJnQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiT25seSBVaW50OEFycmF5IGluc3RhbmNlcyBjYW4gYmUgY29tcGFyZWRcIik7aWYoZS5sZW5ndGghPT10Lmxlbmd0aCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiT25seSBpbnN0YW5jZXMgb2YgaWRlbnRpY2FsIGxlbmd0aCBjYW4gYmUgY29tcGFyZWRcIik7Zm9yKHZhciByPTAsYT0wLF89ZS5sZW5ndGg7YTxfO2ErKylyfD1lW2FdXnRbYV07cmV0dXJuIDA9PT1yfSxlLm1lbXplcm89ZnVuY3Rpb24oZSl7aWYoIShlIGluc3RhbmNlb2YgVWludDhBcnJheSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9ubHkgVWludDhBcnJheSBpbnN0YW5jZXMgY2FuIGJlIHdpcGVkXCIpO2Zvcih2YXIgdD0wLHI9ZS5sZW5ndGg7dDxyO3QrKyllW3RdPTB9LGUub3V0cHV0X2Zvcm1hdHM9ZnVuY3Rpb24oKXtyZXR1cm5bXCJ1aW50OGFycmF5XCIsXCJ0ZXh0XCIsXCJoZXhcIixcImJhc2U2NFwiXX0sZS5wYWQ9ZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiBVaW50OEFycmF5KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiYnVmZmVyIG11c3QgYmUgYSBVaW50OEFycmF5XCIpO2lmKCh0fD0wKTw9MCl0aHJvdyBuZXcgRXJyb3IoXCJibG9jayBzaXplIG11c3QgYmUgPiAwXCIpO3ZhciBhLF89W10sbj1kKDQpLHM9MSxjPTAsaD0wfGUubGVuZ3RoLG89bmV3IHUoaCt0KTtfLnB1c2gobiksXy5wdXNoKG8uYWRkcmVzcyk7Zm9yKHZhciBwPW8uYWRkcmVzcyx5PW8uYWRkcmVzcytoK3Q7cDx5O3ArKylyLkhFQVBVOFtwXT1lW2NdLGMrPXM9MSZ+KCg2NTUzNSYoKGgtPXMpPj4+NDh8aD4+PjMyfGg+Pj4xNnxoKSktMT4+MTYpO3JldHVybiAwIT09ci5fc29kaXVtX3BhZChuLG8uYWRkcmVzcyxlLmxlbmd0aCx0LG8ubGVuZ3RoKSYmYihfLFwiaW50ZXJuYWwgZXJyb3JcIiksby5sZW5ndGg9ci5nZXRWYWx1ZShuLFwiaTMyXCIpLGE9by50b19VaW50OEFycmF5KCksZyhfKSxhfSxlLnVucGFkPWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgVWludDhBcnJheSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcImJ1ZmZlciBtdXN0IGJlIGEgVWludDhBcnJheVwiKTtpZigodHw9MCk8PTApdGhyb3cgbmV3IEVycm9yKFwiYmxvY2sgc2l6ZSBtdXN0IGJlID4gMFwiKTt2YXIgYT1bXSxfPXYoZSksbj1kKDQpO3JldHVybiBhLnB1c2goXyksYS5wdXNoKG4pLDAhPT1yLl9zb2RpdW1fdW5wYWQobixfLGUubGVuZ3RoLHQpJiZiKGEsXCJ1bnN1cHBvcnRlZC9pbnZhbGlkIHBhZGRpbmdcIiksZT0oZT1uZXcgVWludDhBcnJheShlKSkuc3ViYXJyYXkoMCxyLmdldFZhbHVlKG4sXCJpMzJcIikpLGcoYSksZX0sZS5yZWFkeT1fLGUuc3ltYm9scz1mdW5jdGlvbigpe3JldHVybiBPYmplY3Qua2V5cyhlKS5zb3J0KCl9LGUudG9fYmFzZTY0PXAsZS50b19oZXg9YyxlLnRvX3N0cmluZz1zLGV9dmFyIHI9XCJvYmplY3RcIj09dHlwZW9mIGUuc29kaXVtJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnNvZGl1bS5vbmxvYWQ/ZS5zb2RpdW0ub25sb2FkOm51bGw7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJleHBvcnRzXCIsXCJsaWJzb2RpdW1cIl0sdCk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwic3RyaW5nXCIhPXR5cGVvZiBleHBvcnRzLm5vZGVOYW1lP3QoZXhwb3J0cyxyZXF1aXJlKFwibGlic29kaXVtXCIpKTplLnNvZGl1bT10KGUuY29tbW9uSnNTdHJpY3Q9e30sZS5saWJzb2RpdW0pLHImJmUuc29kaXVtLnJlYWR5LnRoZW4oZnVuY3Rpb24oKXtyKGUuc29kaXVtKX0pfSh0aGlzKTtcbiIsIiFmdW5jdGlvbihBKXtmdW5jdGlvbiBJKEEpe1widXNlIHN0cmljdFwiO3ZhciBJO3ZvaWQgMD09PShJPUEpJiYoST17fSk7dmFyIGc9STtcIm9iamVjdFwiIT10eXBlb2YgZy5zb2RpdW0mJihcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsP2c9Z2xvYmFsOlwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJihnPXdpbmRvdykpLFwib2JqZWN0XCI9PXR5cGVvZiBnLnNvZGl1bSYmXCJudW1iZXJcIj09dHlwZW9mIGcuc29kaXVtLnRvdGFsTWVtb3J5JiYoSS5UT1RBTF9NRU1PUlk9Zy5zb2RpdW0udG90YWxNZW1vcnkpO3ZhciBCPUk7cmV0dXJuIEkucmVhZHk9bmV3IFByb21pc2UoZnVuY3Rpb24oQSxJKXsoQz1CKS5vbkFib3J0PUksQy5wcmludD1mdW5jdGlvbihBKXt9LEMucHJpbnRFcnI9ZnVuY3Rpb24oQSl7fSxDLm9uUnVudGltZUluaXRpYWxpemVkPWZ1bmN0aW9uKCl7dHJ5e0MuX2NyeXB0b19zZWNyZXRib3hfa2V5Ynl0ZXMoKSxBKCl9Y2F0Y2goQSl7SShBKX19LEMudXNlQmFja3VwTW9kdWxlPWZ1bmN0aW9uKCl7dmFyIEEsST12b2lkIDAhPT0oST17fSk/STp7fSxnPXt9O2ZvcihBIGluIEkpSS5oYXNPd25Qcm9wZXJ0eShBKSYmKGdbQV09SVtBXSk7dmFyIEMsUSxFLGksZT1bXSxvPSExO0M9XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyxRPVwiZnVuY3Rpb25cIj09dHlwZW9mIGltcG9ydFNjcmlwdHMsRT1cIm9iamVjdFwiPT10eXBlb2YgcHJvY2VzcyYmXCJvYmplY3RcIj09dHlwZW9mIHByb2Nlc3MudmVyc2lvbnMmJlwic3RyaW5nXCI9PXR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGUsbz1FJiYhQyYmIVEsaT0hQyYmIW8mJiFRO3ZhciBjLGEsbixyLHQsZj1cIlwiO28/KGY9X19kaXJuYW1lK1wiL1wiLGM9ZnVuY3Rpb24oQSxJKXt2YXIgZztyZXR1cm4oZz1pQShBKSl8fChyfHwocj1yZXF1aXJlKFwiZnNcIikpLHR8fCh0PXJlcXVpcmUoXCJwYXRoXCIpKSxBPXQubm9ybWFsaXplKEEpLGc9ci5yZWFkRmlsZVN5bmMoQSkpLEk/ZzpnLnRvU3RyaW5nKCl9LG49ZnVuY3Rpb24oQSl7dmFyIEk9YyhBLCEwKTtyZXR1cm4gSS5idWZmZXJ8fChJPW5ldyBVaW50OEFycmF5KEkpKSxEKEkuYnVmZmVyKSxJfSxwcm9jZXNzLmFyZ3YubGVuZ3RoPjEmJnByb2Nlc3MuYXJndlsxXS5yZXBsYWNlKC9cXFxcL2csXCIvXCIpLGU9cHJvY2Vzcy5hcmd2LnNsaWNlKDIpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJihtb2R1bGUuZXhwb3J0cz1JKSxwcm9jZXNzLm9uKFwidW5oYW5kbGVkUmVqZWN0aW9uXCIsaiksSS5pbnNwZWN0PWZ1bmN0aW9uKCl7cmV0dXJuXCJbRW1zY3JpcHRlbiBNb2R1bGUgb2JqZWN0XVwifSk6aT8oXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHJlYWQmJihjPWZ1bmN0aW9uKEEpe3ZhciBJPWlBKEEpO3JldHVybiBJP1FBKEkpOnJlYWQoQSl9KSxuPWZ1bmN0aW9uKEEpe3ZhciBJO3JldHVybihJPWlBKEEpKT9JOlwiZnVuY3Rpb25cIj09dHlwZW9mIHJlYWRidWZmZXI/bmV3IFVpbnQ4QXJyYXkocmVhZGJ1ZmZlcihBKSk6KEQoXCJvYmplY3RcIj09dHlwZW9mKEk9cmVhZChBLFwiYmluYXJ5XCIpKSksSSl9LFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzY3JpcHRBcmdzP2U9c2NyaXB0QXJnczp2b2lkIDAhPT1hcmd1bWVudHMmJihlPWFyZ3VtZW50cyksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHByaW50JiYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGNvbnNvbGUmJihjb25zb2xlPXt9KSxjb25zb2xlLmxvZz1wcmludCxjb25zb2xlLndhcm49Y29uc29sZS5lcnJvcj1cInVuZGVmaW5lZFwiIT10eXBlb2YgcHJpbnRFcnI/cHJpbnRFcnI6cHJpbnQpKTooQ3x8USkmJihRP2Y9c2VsZi5sb2NhdGlvbi5ocmVmOmRvY3VtZW50LmN1cnJlbnRTY3JpcHQmJihmPWRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjKSxmPTAhPT1mLmluZGV4T2YoXCJibG9iOlwiKT9mLnN1YnN0cigwLGYubGFzdEluZGV4T2YoXCIvXCIpKzEpOlwiXCIsYz1mdW5jdGlvbihBKXt0cnl7dmFyIEk9bmV3IFhNTEh0dHBSZXF1ZXN0O3JldHVybiBJLm9wZW4oXCJHRVRcIixBLCExKSxJLnNlbmQobnVsbCksSS5yZXNwb25zZVRleHR9Y2F0Y2goSSl7dmFyIGc9aUEoQSk7aWYoZylyZXR1cm4gUUEoZyk7dGhyb3cgSX19LFEmJihuPWZ1bmN0aW9uKEEpe3RyeXt2YXIgST1uZXcgWE1MSHR0cFJlcXVlc3Q7cmV0dXJuIEkub3BlbihcIkdFVFwiLEEsITEpLEkucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIixJLnNlbmQobnVsbCksbmV3IFVpbnQ4QXJyYXkoSS5yZXNwb25zZSl9Y2F0Y2goSSl7dmFyIGc9aUEoQSk7aWYoZylyZXR1cm4gZzt0aHJvdyBJfX0pLGE9ZnVuY3Rpb24oQSxJLGcpe3ZhciBCPW5ldyBYTUxIdHRwUmVxdWVzdDtCLm9wZW4oXCJHRVRcIixBLCEwKSxCLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCIsQi5vbmxvYWQ9ZnVuY3Rpb24oKXtpZigyMDA9PUIuc3RhdHVzfHwwPT1CLnN0YXR1cyYmQi5yZXNwb25zZSlJKEIucmVzcG9uc2UpO2Vsc2V7dmFyIEM9aUEoQSk7Qz9JKEMuYnVmZmVyKTpnKCl9fSxCLm9uZXJyb3I9ZyxCLnNlbmQobnVsbCl9KTt2YXIgdz1JLnByaW50fHx2b2lkIDAseT1JLnByaW50RXJyfHx2b2lkIDA7Zm9yKEEgaW4gZylnLmhhc093blByb3BlcnR5KEEpJiYoSVtBXT1nW0FdKTtnPW51bGwsSS5hcmd1bWVudHMmJihlPUkuYXJndW1lbnRzKSxJLnRoaXNQcm9ncmFtJiZJLnRoaXNQcm9ncmFtLEkucXVpdCYmSS5xdWl0LG5ldyBBcnJheSg4KTt2YXIgcz0wO0kud2FzbUJpbmFyeSYmSS53YXNtQmluYXJ5LEkubm9FeGl0UnVudGltZSYmSS5ub0V4aXRSdW50aW1lO3ZhciBoPSExO2Z1bmN0aW9uIEQoQSxJKXtBfHxqKFwiQXNzZXJ0aW9uIGZhaWxlZDogXCIrSSl9dmFyIEYscCx1LEgsayxsLF8sRz1cInVuZGVmaW5lZFwiIT10eXBlb2YgVGV4dERlY29kZXI/bmV3IFRleHREZWNvZGVyKFwidXRmOFwiKTp2b2lkIDA7ZnVuY3Rpb24gZChBLEkpe3JldHVybiBBP2Z1bmN0aW9uKEEsSSxnKXtmb3IodmFyIEI9SStnLEM9STtBW0NdJiYhKEM+PUIpOykrK0M7aWYoQy1JPjE2JiZBLnN1YmFycmF5JiZHKXJldHVybiBHLmRlY29kZShBLnN1YmFycmF5KEksQykpO2Zvcih2YXIgUT1cIlwiO0k8Qzspe3ZhciBFPUFbSSsrXTtpZigxMjgmRSl7dmFyIGk9NjMmQVtJKytdO2lmKDE5MiE9KDIyNCZFKSl7dmFyIGU9NjMmQVtJKytdO2lmKChFPTIyND09KDI0MCZFKT8oMTUmRSk8PDEyfGk8PDZ8ZTooNyZFKTw8MTh8aTw8MTJ8ZTw8Nnw2MyZBW0krK10pPDY1NTM2KVErPVN0cmluZy5mcm9tQ2hhckNvZGUoRSk7ZWxzZXt2YXIgbz1FLTY1NTM2O1ErPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8bz4+MTAsNTYzMjB8MTAyMyZvKX19ZWxzZSBRKz1TdHJpbmcuZnJvbUNoYXJDb2RlKCgzMSZFKTw8NnxpKX1lbHNlIFErPVN0cmluZy5mcm9tQ2hhckNvZGUoRSl9cmV0dXJuIFF9KHUsQSxJKTpcIlwifWZ1bmN0aW9uIFkoQSxJKXtyZXR1cm4gQSVJPjAmJihBKz1JLUElSSksQX1mdW5jdGlvbiBNKEEpe0Y9QSxJLkhFQVA4PXA9bmV3IEludDhBcnJheShBKSxJLkhFQVAxNj1IPW5ldyBJbnQxNkFycmF5KEEpLEkuSEVBUDMyPWs9bmV3IEludDMyQXJyYXkoQSksSS5IRUFQVTg9dT1uZXcgVWludDhBcnJheShBKSxJLkhFQVBVMTY9bmV3IFVpbnQxNkFycmF5KEEpLEkuSEVBUFUzMj1uZXcgVWludDMyQXJyYXkoQSksSS5IRUFQRjMyPWw9bmV3IEZsb2F0MzJBcnJheShBKSxJLkhFQVBGNjQ9Xz1uZXcgRmxvYXQ2NEFycmF5KEEpfVwidW5kZWZpbmVkXCIhPXR5cGVvZiBUZXh0RGVjb2RlciYmbmV3IFRleHREZWNvZGVyKFwidXRmLTE2bGVcIik7dmFyIFM9SS5UT1RBTF9NRU1PUll8fDE2Nzc3MjE2O2Z1bmN0aW9uIFUoQSl7Zm9yKDtBLmxlbmd0aD4wOyl7dmFyIGc9QS5zaGlmdCgpO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGcpe3ZhciBCPWcuZnVuYztcIm51bWJlclwiPT10eXBlb2YgQj92b2lkIDA9PT1nLmFyZz9JLmR5bkNhbGxfdihCKTpJLmR5bkNhbGxfdmkoQixnLmFyZyk6Qih2b2lkIDA9PT1nLmFyZz9udWxsOmcuYXJnKX1lbHNlIGcoKX19Uz0oRj1JLmJ1ZmZlcj9JLmJ1ZmZlcjpuZXcgQXJyYXlCdWZmZXIoUykpLmJ5dGVMZW5ndGgsTShGKSxrWzg4MDhdPTUyNzgzMDQ7dmFyIHY9W10sYj1bXSxKPVtdLFA9W10sUj1NYXRoLmFicyxOPU1hdGguY2VpbCxtPU1hdGguZmxvb3IsTD1NYXRoLm1pbix4PTAsSz1udWxsLFg9bnVsbDtmdW5jdGlvbiBqKEEpe3Rocm93IEkub25BYm9ydCYmSS5vbkFib3J0KEEpLHcoQSs9XCJcIikseShBKSxoPSEwLFwiYWJvcnQoXCIrQStcIikuIEJ1aWxkIHdpdGggLXMgQVNTRVJUSU9OUz0xIGZvciBtb3JlIGluZm8uXCJ9SS5wcmVsb2FkZWRJbWFnZXM9e30sSS5wcmVsb2FkZWRBdWRpb3M9e307dmFyIFQscSxWPW51bGwsej1cImRhdGE6YXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtO2Jhc2U2NCxcIjtmdW5jdGlvbiBXKEEpe3JldHVybiBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGg/QS5zdGFydHNXaXRoKHopOjA9PT1BLmluZGV4T2Yoeil9dmFyIE89W2Z1bmN0aW9uKCl7cmV0dXJuIEkuZ2V0UmFuZG9tVmFsdWUoKX0sZnVuY3Rpb24oKXtpZih2b2lkIDA9PT1JLmdldFJhbmRvbVZhbHVlKXRyeXt2YXIgQT1cIm9iamVjdFwiPT10eXBlb2Ygd2luZG93P3dpbmRvdzpzZWxmLGc9dm9pZCAwIT09QS5jcnlwdG8/QS5jcnlwdG86QS5tc0NyeXB0byxCPWZ1bmN0aW9uKCl7dmFyIEE9bmV3IFVpbnQzMkFycmF5KDEpO3JldHVybiBnLmdldFJhbmRvbVZhbHVlcyhBKSxBWzBdPj4+MH07QigpLEkuZ2V0UmFuZG9tVmFsdWU9Qn1jYXRjaChBKXt0cnl7dmFyIEM9cmVxdWlyZShcImNyeXB0b1wiKSxRPWZ1bmN0aW9uKCl7dmFyIEE9Qy5yYW5kb21CeXRlcyg0KTtyZXR1cm4oQVswXTw8MjR8QVsxXTw8MTZ8QVsyXTw8OHxBWzNdKT4+PjB9O1EoKSxJLmdldFJhbmRvbVZhbHVlPVF9Y2F0Y2goQSl7dGhyb3dcIk5vIHNlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRvciBmb3VuZFwifX19XTtmdW5jdGlvbiBaKEEpe3JldHVybiBBfWZ1bmN0aW9uICQoQSl7cmV0dXJuIEEucmVwbGFjZSgvXFxiX19aW1xcd1xcZF9dKy9nLGZ1bmN0aW9uKEEpe3ZhciBJPVooQSk7cmV0dXJuIEE9PT1JP0E6SStcIiBbXCIrQStcIl1cIn0pfWZ1bmN0aW9uIEFBKCl7dmFyIEE9bmV3IEVycm9yO2lmKCFBLnN0YWNrKXt0cnl7dGhyb3cgbmV3IEVycm9yKDApfWNhdGNoKEkpe0E9SX1pZighQS5zdGFjaylyZXR1cm5cIihubyBzdGFjayB0cmFjZSBhdmFpbGFibGUpXCJ9cmV0dXJuIEEuc3RhY2sudG9TdHJpbmcoKX1mdW5jdGlvbiBJQSgpe3JldHVybiBwLmxlbmd0aH1mdW5jdGlvbiBnQShBKXt0cnl7dmFyIEk9bmV3IEFycmF5QnVmZmVyKEEpO2lmKEkuYnl0ZUxlbmd0aCE9QSlyZXR1cm47cmV0dXJuIG5ldyBJbnQ4QXJyYXkoSSkuc2V0KHApLGFBKEkpLE0oSSksMX1jYXRjaChBKXt9fWZ1bmN0aW9uIEJBKEEpe3JldHVybiBJLl9fX2Vycm5vX2xvY2F0aW9uJiYoa1tJLl9fX2Vycm5vX2xvY2F0aW9uKCk+PjJdPUEpLEF9Vj1cImRhdGE6YXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtO2Jhc2U2NCxBQUFBQUFBQUFBQzJlRm4vaFhMVEFMMXVGZjhQQ21vQUtjQUJBSmpvZWYrOFBLRC9tWEhPL3dDMzR2NjBEVWovQUFBQUFBQUFBQUN3b0E3KzA4bUcvNTRZandCL2FUVUFZQXk5QUtmWCsvK2ZUSUQrYW1YaC94NzhCQUNTREs0QUFBQUFBQUFBQUFCWjhiTCtDdVdtLzN2ZEt2NGVGTlFBVW9BREFERFI4d0IzZVVEL011T2Mvd0J1eFFGbkc1QUFBQUFBQUFBQUFBQ0ZPNHdCdmZFay8vZ2x3d0ZnM0RjQXQwdysvOE5DUFFBeVRLUUI0YVJNLzB3OW8vOTFQaDhBVVpGQS8zWkJEZ0NpYzliL0Jvb3VBSHptOVA4S2lvOEFOQnJDQUxqMFRBQ0JqeWtCdnZRVC8zdXFldjlpZ1VRQWVkV1RBRlpsSHYraFo1c0FqRmxELysvbHZnRkRDN1VBeHZDSi91NUZ2UDlEbCs0QUV5cHMvK1ZWY1FFeVJJZi9FV29KQURKbkFmOVFBYWdCSTVnZS94Q291UUU0V2VqL1pkTDhBQ242UndETXFrLy9EaTd2LzFCTjd3Qzkxa3YvRVkzNUFDWlFUUCsrVlhVQVZ1U3FBSnpZMEFIRHo2VC9sa0pNLzYvaEVQK05VR0lCVE52eUFNYWljZ0F1MnBnQW15dngvcHVnYVA4enU2VUFBaEd2QUVKVW9BSDNPaDRBSTBFMS9rWHN2d0F0aHZVQm8zdmRBQ0J1RlA4MEY2VUF1dFpIQU9td1lBRHk3ellCT1ZtS0FGTUFWUCtJb0dRQVhJNTQvbWg4dmdDMXNUNy8raWxWQUppQ0tnRmcvUFlBbDVjLy91K0ZQZ0FnT0p3QUxhZTkvNDZGc3dHRFZ0TUF1N09XL3ZxcUR2L1NvMDRBSlRTWEFHTk5HZ0R1bk5YLzFjRFJBVWt1VkFBVVFTa0JOczVQQU1tRGt2NnFieGovc1NFeS9xc215LzlPOTNRQTBkMlpBSVdBc2dFNkxCa0F5U2M3QWIwVC9BQXg1ZElCZGJ0MUFMV3p1QUVBY3RzQU1GNlRBUFVwT0FCOURjeis5SzEzQUN6ZElQNVU2aFFBK2FER0FleCs2djh2WTZqK3F1S1ovMmF6MkFEaWpYci9la0taL3JiMWhnRGo1QmtCMWpuci85aXRPUCsxNTlJQWQ0Q2QvNEZmaVA5dWZqTUFBcW0zL3dlQ1l2NUZzRjcvZEFUakFkbnlrZi9LclI4QmFRRW4veTZ2UlFEa0x6ci8xK0JGL3M4NFJmOFEvb3YvRjgvVS84b1VmdjlmMVdEL0NiQWhBTWdGei8veEtvRCtJeUhBLy9qbHhBR0JFWGdBKzJlWC93YzBjUCtNT0VML0tPTDEvOWxHSmY2czFnbi9TRU9HQVpMQTF2OHNKbkFBUkxoTC84NWErd0NWNjQwQXRhbzZBSFQwN3dCY25RSUFacTFpQU9tSllBRi9NY3NBQlp1VUFCZVVDZi9UZWd3QUlvWWEvOXZNaUFDR0NDbi80Rk1yL2xVWjl3QnRmd0QrcVlnd0FPNTMyLy9ucmRVQXpoTCsvZ2k2Qi85K0NRY0JieXBJQUc4MDdQNWdQNDBBazc5Ly9zMU93UDhPYXUwQnU5dE1BSy96dS81cFdhMEFWUmxaQWFMemxBQUNkdEgrSVo0SkFJdWpMdjlkUmlnQWJDcU8vbS84anYrYjM1QUFNK1duLzBuOG0vOWVkQXovbUtEYS81enVKZit6NnMvL3hRQ3ovNXFralFEaHhHZ0FDaU1aL3RIVTh2OWgvZDcrdUdYbEFONFNmd0draUlmL0hzK00vcEpoOHdDQndCcit5VlFoLzI4S1R2K1RVYkwvQkFRWUFLSHUxLzhHalNFQU5kY08veW0xMFAvbmk1MEFzOHZkLy8rNWNRQzk0cXovY1VMVy84bytMZjltUUFqL1RxNFEvb1YxUlArRk80d0J2ZkVrLy9nbHd3RmczRGNBdDB3Ky84TkNQUUF5VEtRQjRhUk0vMHc5by85MVBoOEFVWkZBLzNaQkRnQ2ljOWIvQm9vdUFIem05UDhLaW84QU5CckNBTGowVEFDQmp5a0J2dlFULzN1cWV2OWlnVVFBZWRXVEFGWmxIditoWjVzQWpGbEQvKy9sdmdGREM3VUF4dkNKL3U1RnZQL3FjVHovSmY4NS8wV3l0djZBMExNQWRocDkvZ01IMXYveE1rMy9WY3ZGLzlPSCt2OFpNR1QvdTlXMC9oRllhUUJUMFo0QkJYTmlBQVN1UFA2ck4yNy8yYlVSL3hTOHFnQ1NuR2IrVjlhdS8zSjZtd0hwTEtvQWZ3anZBZGJzNmdDdkJkc0FNV285L3daQzBQOENhbTcvVWVvVC85ZHJ3UDlEbCs0QUV5cHMvK1ZWY1FFeVJJZi9FV29KQURKbkFmOVFBYWdCSTVnZS94Q291UUU0V2VqL1pkTDhBQ242UndETXFrLy9EaTd2LzFCTjd3Qzkxa3YvRVkzNUFDWlFUUCsrVlhVQVZ1U3FBSnpZMEFIRHo2VC9sa0pNLzYvaEVQK05VR0lCVE52eUFNYWljZ0F1MnBnQW15dngvcHVnYVAreUNmeitaRzdVQUE0RnB3RHA3NlAvSEplZEFXV1NDdi8rbmtiK1IvbmtBRmdlTWdCRU9xRC92eGhvQVlGQ2dmL0FNbFgvQ0xPSy95YjZ5UUJ6VUtBQWcrWnhBSDFZa3dCYVJNY0EvVXllQUJ6L2RnQngrdjRBUWtzdUFPYmFLd0RsZUxvQmxFUXJBSWg4N2dHN2E4WC9WRFgyL3pOMC92OHp1NlVBQWhHdkFFSlVvQUgzT2g0QUkwRTEva1hzdndBdGh2VUJvM3ZkQUNCdUZQODBGNlVBdXRaSEFPbXdZQUR5N3pZQk9WbUtBRk1BVlArSW9HUUFYSTU0L21oOHZnQzFzVDcvK2lsVkFKaUNLZ0ZnL1BZQWw1Yy8vdStGUGdBZ09Kd0FMYWU5LzQ2RnN3R0RWdE1BdTdPVy92cXFEdjlFY1JYLzNybzcvMElIOFFGRkJrZ0FWcHhzL2plbldRQnROTnYrRGJBWC84UXNhdi92bFVmL3BJeDkvNSt0QVFBektlY0FrVDRoQUlwdlhRRzVVMFVBa0hNdUFHR1hFUDhZNUJvQU1kbmlBSEZMNnY3Qm1Rei90akJnL3c0TkdnQ0F3L24rUmNFN0FJUWxVZjU5YWp3QTF2Q3BBYVRqUWdEU28wNEFKVFNYQUdOTkdnRHVuTlgvMWNEUkFVa3VWQUFVUVNrQk5zNVBBTW1Ea3Y2cWJ4ai9zU0V5L3FzbXkvOU85M1FBMGQyWkFJV0FzZ0U2TEJrQXlTYzdBYjBUL0FBeDVkSUJkYnQxQUxXenVBRUFjdHNBTUY2VEFQVXBPQUI5RGN6KzlLMTNBQ3pkSVA1VTZoUUErYURHQWV4KzZ2K1BQdDBBZ1ZuVy96ZUxCZjVFRkwvL0RzeXlBU1BEMlFBdk04NEJKdmFsQU00YkJ2NmVWeVFBMlRTUy8zMTcxLzlWUEIvL3F3MEhBTnIxV1A3OEl6d0FOOWFnLzRWbE9BRGdJQlArazBEcUFCcVJvZ0Z5ZG4wQStQejZBR1ZleFAvR2plTCtNeXEyQUljTUNmNXRyTkwveGV6Q0FmRkJtZ0F3bkMvL21VTTMvOXFsSXY1S3RMTUEya0pIQVZoNll3RFV0ZHYvWENybi8rOEFtZ0QxVGJmL1hsR3FBUkxWMkFDclhVY0FORjc0QUJLWG9mN0YwVUwvcnZRUC9xSXd0d0F4UGZEK3RsM0RBTWZrQmdISUJSSC9pUzN0LzJ5VUJBQmFUKzMvSno5Ti96VlN6d0dPRm5iL1plZ1NBVndhUXdBRnlGai9JYWlLLzVYaFNBQUMwUnYvTFBXb0FkenRFZjhlMDJuK2plN2RBSUJROWY1di9nNEEzbCsrQWQ4SjhRQ1NUTlQvYk0xby96OTFtUUNRUlRBQUkrUnZBTUFod2Y5dzFyNytjNWlYQUJkbVdBQXpTdmdBNHNlUC9zeWlaZi9RWWIwQjlXZ1NBT2IySHY4WGxFVUFibGcwL3VLMVdmL1FMMXIrY3FGUS95RjArQUN6bUZmL1JaQ3hBVmp1R3Y4NklIRUJBVTFGQUR0NU5QK1k3bE1BTkFqQkFPY242Zi9ISW9vQTNrU3RBRnM1OHY3YzBuLy93QWYyL3BjanV3REQ3S1VBYjEzT0FOVDNoUUdhaGRIL20rY0tBRUJPSmdCNitXUUJIaE5oL3o1YitRSDRoVTBBeFQrby9uUUtVZ0M0N0hIKzFNdkMvejFrL1A0a0Jjci9kMXVaLzRGUEhRQm5aNnYrN2Rkdi85ZzFSUUR2OEJjQXdwWGQveWJoM2dEby83VCtkbEtGL3puUnNRR0w2SVVBbnJBdS9zSnpMZ0JZOStVQkhHZS9BTjNlci82VjZ5d0FsK1FaL3RwcFp3Q09WZElBbFlHKy85VkJYdjUxaHVEL1VzWjFBSjNkM0FDalpTUUF4WElsQUdpc3B2NEx0Z0FBVVVpOC8yRzhFUDlGQmdvQXg1T1Ivd2dKY3dGQjFxLy8yYTNSQUZCL3BnRDM1UVQrcDdkOC8xb2N6UDZ2Ty9EL0N5bjRBV3dvTS8rUXNjUCtsdnArQUlwYlFRRjRQTjcvOWNIdkFCM1d2ZitBQWhrQVVKcWlBRTNjYXdIcXpVci9OcVpuLzNSSUNRRGtYaS8vSHNnWi95UFdXZjg5c0l6L1UrS2ovMHVDckFDQUpoRUFYNG1ZLzlkOG53RlBYUUFBbEZLZC9zT0MrLzhveWt6LyszN2dBSjFqUHY3UEIrSC9ZRVREQUl5Nm5mK0RFK2YvS29EK0FEVGJQZjVteTBnQWpRY0wvN3FrMVFBZmVuY0FoZktSQU5EODZQOWIxYmIvandUNi92blhTZ0NsSG04QnF3bmZBT1Y3SWdGY2doci9UWnN0QWNPTEhQODc0RTRBaUJIM0FHeDVJQUJQK3IzL1lPUDgvaWJ4UGdBK3JuMy9tMjlkL3dybXpnRmh4U2ovQURFNS9rSDZEUUFTKzViLzNHM1Mvd1d1cHY0c2diMEE2eU9UL3lYM2pmOUlqUVQvWjJ2L0FQZGFCQUExTENvQUFoN3dBQVE3UHdCWVRpUUFjYWUwQUw1SHdmL0hucVQvT2dpc0FFMGhEQUJCUHdNQW1VMGgvNnorWmdIazNRVC9WeDcrQVpJcFZ2K0t6Ty8rYkkwUi83dnlod0RTMEg4QVJDME8va2xnUGdCUlBCai9xZ1lrL3dQNUdnQWoxVzBBRm9FMi94VWo0Zi9xUFRqL090a0dBSTk4V0FEc2ZrSUEwU2EzL3lMdUJ2K3VrV1lBWHhiVEFNUVBtZjR1Vk9qL2RTS1NBZWY2U3Y4YmhtUUJYTHZELzZyR2NBQjRIQ29BMFVaREFCMVJId0FkcUdRQnFhMmdBR3NqZFFBK1lEdi9VUXhGQVlmdnZ2L2MvQklBbzl3Ni80bUp2UDlUWm0wQVlBWk1BT3JlMHYrNXJzMEJQSjdWL3czeDFnQ3NnWXdBWFdqeUFNQ2Mrd0FyZFI0QTRWR2VBSC9vMmdEaUhNc0E2UnVYLzNVckJmL3lEaS8vSVJRR0FJbjdMUDRiSC9YL3Q5WjkvaWg1bFFDNm50WC9XUWpqQUVWWUFQN0xoK0VBeWE3TEFKTkh1QUFTZVNuK1hnVk9BT0RXOFA0a0JiUUErNGZuQWFPSzFBRFMrWFQrV0lHN0FCTUlNZjQrRHBEL24welRBTll6VWdCdGRlVCtaOS9MLzB2OER3R2FSOXovRncxYkFZMm9ZUCsxdG9VQStqTTNBT3JxMVA2dlA1NEFKL0EwQVo2OUpQL1ZLRlVCSUxUMy94Tm1HZ0ZVR0dIL1JSWGVBSlNMZXYvYzFlc0I2TXYvQUhrNWt3RGpCNW9BTlJhVEFVZ0I0UUJTaGpEK1V6eWQvNUZJcVFBaVorOEF4dWt2QUhRVEJQKzRhZ24vdDRGVEFDU3c1Z0VpWjBnQTI2S0dBUFVxbmdBZ2xXRCtwU3lRQU1ydlNQN1hsZ1VBS2tJa0FZVFhyd0JXcmxiL0dzV2MvekhvaC81bnRsSUEvWUN3QVpteWVnRDErZ29BN0JpeUFJbHFoQUFvSFNrQU1oNlkvM3hwSmdEbXYwc0FqeXVxQUN5REZQOHNEUmYvN2YrYkFaOXRaUDl3dFJqL2FOeHNBRGZUZ3dCakROWC9tSmVSLys0Rm53Qmhtd2dBSVd4UkFBRURad0ErYlNMLytwdTBBQ0JIdy84bVJwRUJuMS8xQUVYbFpRR0lIUEFBVCtBWkFFNXVlZi80cUh3QXU0RDNBQUtUNi81UEM0UUFSam9NQWJVSW8vOVBpWVgvSmFvTC80M3pWZit3NTlmL3pKYWsvKy9YSi84dVY1eitDS05ZLzZ3aTZBQkNMR2IvR3pZcC91eGpWLzhwZTZrQk5ISXJBSFdHS0FDYmhob0E1ODliL2lPRUp2OFRabjMrSk9PRi8zWURjZjhkRFh3QW1HQktBVmlTenYrbnY5eitvaEpZLzdaa0Z3QWZkVFFBVVM1cUFRd0NCd0JGVU1rQjBmYXNBQXd3alFIZzAxZ0FkT0tmQUhwaWdnQkI3T29CNGVJSi84L2lld0ZaMWpzQWNJZFlBVnIweS84eEN5WUJnV3k2QUZsd0R3RmxMc3ovZjh3dC9rLy8zZjh6U1JML2Z5cGwvL0VWeWdDZzR3Y0FhVExzQUU4MHhmOW95dEFCdEE4UUFHWEZUdjlpVGNzQUtibnhBU1BCZkFBam14Zi96elhBQUF0OW93SDVucm4vQklNd0FCVmRiLzg5ZWVjQlJjZ2svN2t3dWY5djdoWC9KeklaLzJQWG8vOVgxQjcvcEpNRi80QUdJd0ZzMzI3L3dreXlBRXBsdEFEekx6QUFyaGtyLzFLdC9RRTJjc0QvS0RkYkFOZHNzUDhMT0FjQTRPbE1BTkZpeXY3eUdYMEFMTUZkL3NzSXNRQ0hzQk1BY0VmVi84NDdzQUVFUXhvQURvL1YvaW8zMFA4OFEzZ0F3UldqQUdPa2N3QUtGSFlBbk5UZS9xQUgyZjl5OVV3QmRUdDdBTERDVnY3VkQ3QUFUczdQL3RXQk93RHAreFlCWURlWS8rei9ELy9GV1ZUL1haV0ZBSzZnY1FEcVk2bi9tSFJZQUpDa1UvOWZIY2IvSWk4UC8yTjRodjhGN01FQStmZCsvNU83SGdBeTVuWC9iTm5iLzZOUnB2OUlHYW4rbTNsUC94eWJXZjRIZmhFQWswRWhBUy9xL1FBYU14SUFhVlBILzZQRTVnQngrS1FBNHY3YUFMM1J5LytrOTk3Ky95T2xBQVM4OHdGL3MwY0FKZTMrLzJTNjhBQUZPVWYrWjBoSi8vUVNVZjdsMG9ULzdnYTAvd3ZscnYvajNjQUJFVEVjQUtQWHhQNEpkZ1QvTS9CSEFIR0JiZjlNOE9jQXZMRi9BSDFITEFFYXIvTUFYcWtaL2h2bUhRQVBpM2NCcUtxNi82ekZUUC84Uzd3QWlYekVBRWdXWVA4dGwva0IzSkZrQUVEQW4vOTQ3K0lBZ2JLU0FBREFmUURyaXVvQXQ1MlNBRlBId1ArNHJFai9TZUdBQUUwRyt2KzZRVU1BYVBiUEFMd2dpdi9hR1BJQVE0cFIvdTJCZWY4VXo1WUJLY2NRL3dZVWdBQ2ZkZ1VBdFJDUC85d21Ed0FYUUpQK1NSb05BRmZrT1FITWZJQUFLeGpmQU50anh3QVdTeFQvRXh0K0FKMCsxd0J1SGVZQXM2Zi9BVGI4dmdEZHpMYitzNTVCLzFHZEF3REMycDhBcXQ4QUFPQUxJUDhteFdJQXFLUWxBQmRZQndHa3VtNEFZQ1NHQU9yeTVRRDZlUk1BOHY1dy93TXZYZ0VKN3diL1VZYVovdGI5cVA5RGZPQUE5VjlLQUJ3ZUxQNEJiZHovc2xsWkFQd2tUQUFZeGk3L1RFMXZBSWJxaVA4blhoMEF1VWpxLzBaRWgvL25aZ2YrVGVlTUFLY3ZPZ0dVWVhiL0VCdmhBYWJPai85dXN0Yi90SU9pQUkrTjRRRU4yazcvY3BraEFXSm96QUN2Y25VQnA4NUxBTXJFVXdFNlFFTUFpaTl2QWNUM2dQK0o0T0Qrbm5EUEFKcGsvd0dHSldzQXhvQlAvMy9SbS8rai9ybitQQTd6QUIvYmNQNGQyVUVBeUExMC9uczh4UC9nTzdqKzhsbkVBSHNRUy82VkVNNEFSZjR3QWVkMDMvL1JvRUVCeUZCaUFDWEN1UDZVUHlJQWkvQkIvOW1RaFA4NEppMyt4M2pTQUd5eHB2K2czZ1FBM0g1My9xVnJvUDlTM1BnQjhhK0lBSkNORi8rcGlsUUFvSWxPLytKMlVQODBHNFQvUDJDTC81ajZKd0M4bXc4QTZET1cvaWdQNlAvdzVRbi9pYThiLzB0SllRSGExQXNBaHdXaUFXdTUxUUFDK1d2L0tQSkdBTnZJR1FBWm5RMEFRMUpRLzhUNUYvK1JGSlVBTWtpU0FGNU1sQUVZKzBFQUg4QVhBTGpVeWY5NzZhSUI5NjFJQUtKWDIvNStobGtBbndzTS9xWnBIUUJKRytRQmNYaTMvMEtqYlFIVWp3di9uK2VvQWYrQVdnQTVEanIrV1RRSy8vMElvd0VBa2RML0NvRlZBUzYxR3dCbmlLRCtmcnpSL3lJamJ3RFgyeGovMUF2Vy9tVUZkZ0RveFlYLzM2ZHQvKzFRVnY5R2kxNEFuc0cvQVpzUE0vOFB2bk1BVG9mUC8va0tHd0cxZmVrQVg2d04vcXJWb2Y4bjdJci9YMTFYLzc2QVh3QjlEODRBcHBhZkFPTVBudi9Pbm5qL0tvMkFBR1d5ZUFHY2JZTUEyZzRzL3Zlb3p2L1VjQndBY0JIay8xb1FKUUhGM213QS9zOVQvd2xhOC8vejlLd0FHbGh6LzgxMGVnQy81c0VBdEdRTEFka2xZUCthVHB3QTYrb2YvODZ5c3YrVndQc0F0dnFIQVBZV2FRQjh3VzMvQXRLVi82a1JxZ0FBWUc3L2RRa0lBVEo3S1AvQnZXTUFJdU9nQURCUVJ2N1RNK3dBTFhyMS9peXVDQUN0SmVuL25rR3JBSHBGMS85YVVBTC9nMnBnL3VOeWh3RE5NWGYrc0Q1QS8xSXpFZi94RlBQL2dnMEkvb0RaOC8raUd3SCtXbmJ4QVBiRzl2ODNFSGIveUorZEFLTVJBUUNNYTNrQVZhRjIveVlBbFFDY0wrNEFDYWFtQVV0aXRmOHlTaGtBUWc4dkFJdmhud0JNQTQ3L0R1NjRBQXZQTmYrM3dMb0JxeUN1Lzc5TTNRSDNxdHNBR2F3eS90a0o2UURMZmtUL3Qxd3dBSCtudHdGQk1mNEFFRDkvQWY0VnF2ODc0SC8rRmpBLy94dE9ndjRvd3gwQStvUncvaVBMa0FCb3FhZ0F6LzBlLzJnb0p2NWU1RmdBemhDQS85UTNldi9mRnVvQTM4Vi9BUDIxdFFHUlpuWUE3SmtrLzlUWlNQOFVKaGoraWo0K0FKaU1CQURtM0dQL0FSWFUvNVRKNXdEMGV3bitBS3ZTQURNNkpmOEIvdzcvOUxlUi9nRHlwZ0FXU29RQWVkZ3BBRi9EY3Y2RkdKZi9uT0xuLy9jRlRmLzJsSFArNFZ4Ui85NVE5djZxZTFuL1NzZU5BQjBVQ1ArS2lFYi9YVXRjQU4yVE1mNDBmdUlBNVh3WEFDNEp0UUROUURRQmcvNGNBSmVlMUFDRFFFNEF6aG1yQUFEbWl3Qy8vVzcrWi9lbkFFQW9LQUVxcGZIL08wdmsvbnp6dmYvRVhMTC9nb3hXLzQxWk9BR1R4Z1gveS9pZS9wQ2lqUUFMck9JQWdpb1Yvd0duai8rUUpDVC9NRmlrL3FpcTNBQmlSOVlBVzlCUEFKOU15UUdtS3RiL1JmOEEvd2FBZmYrK0FZd0FrbFBhLzlmdVNBRjZmelVBdlhTbC8xUUlRdi9XQTlELzFXNkZBTU9vTEFHZTUwVUFva0RJL2xzNmFBQzJPcnYrK2VTSUFNdUdUUDVqM2VrQVMvN1cvbEJGbWdCQW1Qais3SWpLLzUxcG1mNlZyeFFBRmlNVC8zeDU2UUM2K3NiK2hPV0xBSWxRcnYrbGZVUUFrTXFVL3V2ditBQ0h1SFlBWlY0Ui8zcElSdjVGZ3BJQWY5NzRBVVYvZHY4ZVV0Zit2RW9ULytXbnd2NTFHVUwvUWVvNC90VVduQUNYTzEzK0xSd2IvN3ArcFA4Z0J1OEFmM0pqQWRzMEF2OWpZS2IrUHI1Ky8yemVxQUZMNHE0QTV1TEhBRHgxMnYvOCtCUUIxcnpNQUIvQ2h2NTdSY0QvcWEway9qZGlXd0RmS21iK2lRRm1BSjFhR1FEdmVrRC8vQWJwQUFjMkZQOVNkSzRBaHlVMi93KzZmUURqY0svL1pMVGgveXJ0OVAvMHJlTCsrQkloQUt0amx2OUs2ekwvZFZJZy9tcW83UURQYmRBQjVBbTZBSWM4cWY2elhJOEE5S3BvLytzdGZQOUdZN29BZFltM0FPQWYxd0FvQ1dRQUdoQmZBVVRaVndBSWx4VC9HbVE2LzdDbHl3RTBka1lBQnlEKy92VCs5Zitua01ML2ZYRVgvN0I1dFFDSVZORUFpZ1llLzFrd0hBQWhtdzcvR2ZDYUFJM05iUUZHY3o3L0ZDaHIvb3FheC85ZTMrTC9uYXNtQUtPeEdmNHRkZ1AvRHQ0WEFkRytVZjkyZStnQkRkVmwvM3MzZS80YjlxVUFNbU5NLzR6V0lQOWhRVVAvR0F3Y0FLNVdUZ0ZBOTJBQW9JZERBRUkzOC8rVHpHRC9HZ1loLzJJelV3R1oxZEQvQXJnMi94bmFDd0F4US9iK0VwVkkvdzBaU0FBcVQ5WUFLZ1FtQVJ1TGtQK1Z1eGNBRXFTRUFQVlV1UDU0eG1qL2Z0cGdBRGgxNnY4TkhkYitSQzhLLzZlYWhQNllKc1lBUXJKWi84Z3VxLzhOWTFQLzBydjkvNm90S2dHSzBYd0ExcUtOQUF6bW5BQm1KSEQrQTVOREFEVFhlLy9wcXpiL1lvaytBUGZhSi8vbjJ1d0E5NzkvQU1PU1ZBQ2xzRnovRTlSZS94Rks0d0JZS0prQnhwTUIvODVEOWY3d0E5ci9QWTNWLzJHM2FnREQ2T3YrWDFhYUFORXd6ZjUyMGZILzhIamZBZFVkbndDamY1UC9EZHBkQUZVWVJQNUdGRkQvdlFXTUFWSmgvdjlqWTcvL2hGU0YvMnZhZFA5d2VpNEFhUkVnQU1LZ1AvOUUzaWNCMlAxY0FMRnB6ZitWeWNNQUt1RUwveWlpY3dBSkIxRUFwZHJiQUxRV0FQNGRrdnova3MvaEFiU0hZQUFmbzNBQXNRdmIvNFVNd2Y0clRqSUFRWEY1QVR2WkJ2OXVYaGdCY0t4dkFBY1BZQUFrVlhzQVI1WVYvOUJKdkFEQUM2Y0IxZlVpQUFubVhBQ2lqaWYvMTFvYkFHSmhXUUJlVDlNQVdwM3dBRi9jZmdGbXNPSUFKQjdnL2lNZmZ3RG42SE1CVlZPQ0FOSko5Zjh2ajNML1JFSEZBRHRJUHYrM2hhMytYWGwyL3p1eFVmL3FSYTMvellDeEFOejBNd0FhOU5FQlNkNU4vNk1JWVA2V2xkTUFudjdMQVRaL2l3Q2g0RHNBQkcwVy85NHFMZi9Ra21iLzdJNjdBRExOOWY4S1NsbitNRStPQU41TWd2OGVwajhBN0F3Ti96RzQ5QUM3Y1dZQTJtWDlBSms1dHY0Z2xpb0FHY2FTQWUzeE9BQ01SQVVBVzZTcy8wNlJ1djVETk0wQTI4K0JBVzF6RVFBMmp6b0JGZmg0LzdQL0hnREI3RUwvQWY4SC8vM0FNUDhUUmRrQkE5WUEvMEJsa2dIZmZTUC82MG16Ly9tbjRnRGhyd29CWWFJNkFHcHdxd0ZVckFYL2hZeXkvNGIxamdCaFduMy91c3U1Lzk5TkYvL0FYR29BRDhaei85bVkrQUNyc25qLzVJWTFBTEEyd1FINit6VUExUXBrQVNMSGFnQ1hIL1Qrck9CWC93N3RGLy85VlJyL2Z5ZDAvNnhvWkFEN0RrYi8xTkNLLy8zVCtnQ3dNYVVBRDB4Ny95WGFvUDljaHhBQkNuNXkvMFlGNFAvMytZMEFSQlE4QWZIU3ZmL0QyYnNCbHdOeEFKZGNyZ0RuUHJMLzI3ZmhBQmNYSWYvTnRWQUFPYmo0LzBPMEFmOWFlMTMvSndDaS8yRDROUDlVUW93QUluL2svOEtLQndHbWJyd0FGUkdiQVpxK3h2L1dVRHYvRWdlUEFFZ2Q0Z0hIMmZrQTZLRkhBWlcreVFEWnIxLytjWk5ELzRxUHgvOS96QUVBSGJaVEFjN21tLys2ekR3QUNuMVYvK2hnR2YvL1dmZi8xZjZ2QWVqQlVRQWNLNXorREVVSUFKTVkrQUFTeGpFQWhqd2pBSGIyRXY4eFdQNys1Qlc2LzdaQmNBSGJGZ0gvRm40MC83MDFNZjl3R1k4QUpuODMvK0psby83UWhUMy9pVVd1QWI1MmtmODhZdHYvMlEzMS8vcUlDZ0JVL3VJQXlSOTlBZkF6Ky84Zmc0TC9Bb295LzlmWHNRSGZETzcvL0pVNC8zeGJSUDlJZnFyK2QvOWtBSUtINlA4T1Q3SUErb1BGQUlyRzBBQjUySXYrZHhJay94M0JlZ0FRS2kzLzFmRHJBZWErcWYvR0krVCticTFJQU5iZDhmODRsSWNBd0hWTy9vMWR6LytQUVpVQUZSSmkvMThzOUFGcXYwMEEvbFVJL3RadXNQOUpyUlArb01USC8rMWFrQURCckhIL3lKdUkvdVJhM1FDSk1Vb0JwTjNYLzlHOUJmOXA3RGYvS2grQkFjSC83QUF1MlR3QWlsaTcvK0pTN1A5UlJaZi9qcjRRQVEyR0NBQi9lakQvVVVDY0FLdnppd0R0SS9ZQWVvL0IvdFI2a2dCZktmOEJWNFJOQUFUVUh3QVJIMDRBSnkydC9oaU8yZjlmQ1FiLzQxTUdBR0k3Z3Y0K0hpRUFDSFBUQWFKaGdQOEh1QmYrZEJ5by8vaUtsLzlpOVBBQXVuYUNBSEw0Ni85cHJjZ0JvSHhILzE0a3BBR3ZRWkwvN3ZHcS9zckd4UURrUjRyK0xmWnQvOEkwbmdDRnU3QUFVL3lhL2xtOTNmK3FTZndBbERwOUFDUkVNLzRxUmJIL3FFeFcveVprelA4bU5TTUFyeE5oQU9IdS9mOVJVWWNBMGh2Ly91dEphd0FJejNNQVVuK0lBRlJqRmY3UEU0Z0FaS1JsQUZEUVRmK0V6KzMvRHdNUC95R21iZ0NjWDFYL0pibHZBWlpxSS8rbWwwd0FjbGVILzUvQ1FBQU1laC8vNkFkbC9xMTNZZ0NhUjl6K3Z6azEvNmpvb1AvZ0lHUC8ycHlsQUplWm93RFpEWlFCeFhGWkFKVWNvZjdQRng0QWFZVGovemJtWHYrRnJjei9YTGVkLzFpUS9QNW1JVm9BbjJFREFMWGFtLy93Y25jQWF0WTEvNlcrY3dHWVcrSC9XR29zLzlBOWNRQ1hOSHdBdnh1Yy8yNDI3QUVPSHFiL0ozL1BBZVhISEFDODVMeitaSjNyQVBiYXR3RnJGc0gvenFCZkFFenZrd0RQb1hVQU02WUMvelIxQ3Y1Sk9PUC9tTUhoQUlSZWlQOWx2OUVBSUd2bC84WXJ0QUZrMG5ZQWNrT1oveGRZR3Y5Wm1sd0IzSGlNLzVCeXovLzhjL3IvSXM1SUFJcUZmLzhJc253QlYwdGhBQS9sWFA3d1E0UC9kbnZqL3BKNGFQK1IxZjhCZ2J0Ry85dDNOZ0FCRTYwQUxaYVVBZmhUU0FETDZha0JqbXM0QVBmNUpnRXQ4bEQvSHVsbkFHQlNSZ0FYeVc4QVVTY2UvNkczVHYvQzZpSC9ST09NL3RqT2RBQkdHK3YvYUpCUEFLVG1YZjdXaDV3QW1ydnkvcndVZy84a2JhNEFuM0R4QUFWdWxRRWtwZG9BcGgwVEFiSXVTUUJkS3lEKytMM3RBR2FialFESlhjUC84WXY5L3c5dll2OXNRYVArbTArKy8wbXV3ZjcyS0REL2ExZ0wvc3BoVmYvOXpCTC9jZkpDQUc2Z3d2N1FFcm9BVVJVOEFMeG9wLzk4cG1IKzBvV09BRGp5aWY0cGI0SUFiNWM2QVcvVmpmKzNyUEgvSmdiRS83a0hlLzh1Qy9ZQTlXbDNBUThDb2Y4SXppMy9Fc3BLLzFOOGN3SFVqWjBBVXdqUi9vc1A2UCtzTnEzK012ZUVBTmE5MVFDUXVHa0EzLzc0QVArVDhQOFh2RWdBQnpNMkFMd1p0UDdjdEFEL1U2QVVBS085OC84NjBjTC9WMGs4QUdvWU1RRDErZHdBRnEybkFIWUx3LzhUZnUwQWJwOGwvenRTTHdDMHUxWUF2SlRRQVdRbGhmOEhjTUVBZ2J5Yy8xUnFnZitGNGNvQUR1eHYveWdVWlFDc3JESCtNelpLLy91NXVQOWRtK0QvdFBuZ0FlYXlrZ0JJT1RiK3NqNjRBSGZOU0FDNTcvMy9QUS9hQU1SRE9QL3FJS3NCTHR2a0FOQnM2djhVUCtqL3BUWEhBWVhrQmY4MHpXc0FTdTZNLzVhYzIvN3ZyTEwvKzczZi9pQ08wLy9hRDRvQjhjUlFBQndrWXY0VzZzY0FQZTNjLy9ZNUpRQ09FWTcvblQ0YUFDdnVYLzREMlFiLzFSbndBU2ZjcnYrYXpURCtFdzNBLy9RaU52Nk1FSnNBOExVRi9wdkJQQUNtZ0FUL0pKRTQvNWJ3MndCNE01RUFVcGtxQVl6c2tnQnJYUGdCdlFvREFEK0k4Z0RUSnhnQUU4cWhBYTBidXYvU3pPLytLZEdpLzdiK24vK3NkRFFBdzJmZS9zMUZPd0ExRmlrQjJqRENBRkRTOGdEU3ZNOEF1NkdoL3RnUkFRQ0k0WEVBK3JnL0FOOGVZdjVOcUtJQU96V3ZBQlBKQ3YrTDRNSUFrOEdhLzlTOURQNEJ5SzcvTW9WeEFWNnpXZ0N0dG9jQVhyRnhBQ3RaMS8rSS9Hci9lNFpUL2dYMVF2OVNNU2NCM0FMZ0FHR0JzUUJOTzFrQVBSMmJBY3VyM1A5Y1Rvc0FrU0cxLzZrWWpRRTNsck1BaXp4US85b25ZUUFDazJ2L1BQaElBSzNtTHdFR1U3Yi9FR21pL29uVVVmKzB1SVlCSjk2ay85MXArd0h2Y0gwQVB3ZGhBRDlvNC8rVU9nd0FXanpnLzFUVS9BQlAxNmdBK04zSEFYTjVBUUFrckhnQUlLSzcvemxyTWYrVEtoVUFhc1lyQVRsS1Z3Qit5MUgvZ1lmREFJd2ZzUURkaThJQUE5N1hBSU5FNXdDeFZyTCtmSmUwQUxoOEpnRkdveEVBK2Z1MUFTbzM0d0Rpb1N3QUYreHVBRE9WamdGZEJld0EycmRxL2tNWVRRQW85ZEgvM25tWkFLVTVIZ0JUZlR3QVJpWlNBZVVHdkFCdDNwMy9OM1kvLzgyWHVnRGpJWlgvL3JEMkFlT3g0d0FpYXFQK3NDdFBBR3BmVGdHNThYci91UTQ5QUNRQnlnQU5zcUwvOXd1RUFLSG1YQUZCQWJuLzFES2xBWTJTUVArZTh0b0FGYVI5QU5XTGVnRkRSMWNBeTU2eUFaZGNLd0NZYndYL0p3UHYvOW4vK3Yrd1AwZi9TdlZOQWZxdUV2OGlNZVAvOWk3Ny81b2pNQUY5blQzL2FpUk8vMkhzbVFDSXUzai9jWWFyL3hQVjJmN1lYdEgvL0FVOUFGNER5Z0FER3JmL1FMOHIveDRYRlFDQmpVMy9abmdIQWNKTWpBQzhyelQvRVZHVUFPaFdOd0hoTUt3QWhpb3EvKzR5THdDcEV2NEFGSk5YL3c3RDcvOUY5eGNBN3VXQS83RXhjQUNvWXZ2L2VVZjRBUE1Ja2Y3MjQ1bi8yNm14L3Z1THBmOE1vN24vcENpci81bWZHLzd6YlZ2LzNoaHdBUkxXNXdCcm5iWCt3NU1BLzhKamFQOVpqTDcvc1VKKy9tcTVRZ0F4Mmg4QS9LNmVBTHhQNWdIdUtlQUExT29JQVlnTHRRQ21kVlAvUk1OZUFDNkV5UUR3bUZnQXBEbEYvcURnS3Y4NzEwUC9kOE9OL3lTMGVmN1BMd2ovcnRMZkFHWEZSUC8vVW8wQitvbnBBR0ZXaFFFUVVFVUFoSU9mQUhSZFpBQXRqWXNBbUt5ZC8xb3JXd0JIbVM0QUp4QncvOW1JWWYvY3hobitzVFV4QU41WWh2K0FEendBejhDcC84QjAwZjlxVHRNQnlOVzMvd2NNZXY3ZXl6ei9JVzdIL3Z0cWRRRGs0UVFCZURvSC85M0JWUDV3aFJzQXZjakovNHVIbGdEcU43RC9QVEpCQUpoc3FmL2NWUUgvY0lmakFLSWF1Z0RQWUxuKzlJaHJBRjJaTWdIR1laY0FiZ3RXLzQ5MXJ2OXoxTWdBQmNxM0FPMmtDdjY1N3o0QTdIZ1MvbUo3WS8rb3ljTCtMdXJXQUwrRk1mOWpxWGNBdnJzakFYTVZMZi81ZzBnQWNBWjcvOVl4dGY2bTZTSUFYTVZtL3Yza3pmOERPOGtCS21JdUFOc2xJLytwd3lZQVhuekJBWndyM3dCZlNJWCtlTTYvQUhyRjcvK3h1MC8vL2k0Q0FmcW52Z0JVZ1JNQXkzR20vL2tmdmY1SW5jci8wRWRKLzg4WVNBQUtFQklCMGxGTS8xalF3UDkrODJ2LzdvMTQvOGQ1NnYrSkREdi9KTng3LzVTelBQN3dEQjBBUWdCaEFTUWVKdjl6QVYzL1lHZm4vOFdlT3dIQXBQQUF5c281L3hpdU1BQlpUWnNCS2t6WEFQU1g2UUFYTUZFQTczODAvdU9DSmYvNGRGMEJmSVIyQUszK3dBRUc2MVAvYnEvbkFmc2N0Z0NCK1YzK1ZMaUFBRXkxUGdDdmdMb0FaRFdJL20wZDRnRGQ2VG9CRkdOS0FBQVdvQUNHRFJVQUNUUTMveEZaakFDdklqc0FWS1YzLytEaTZ2OEhTS2IvZTNQL0FSTFc5Z0Q2QjBjQjJkeTVBTlFqVFA4bWZhOEF2V0hTQUhMdUxQOHB2S24rTGJxYUFGRmNGZ0NFb01FQWVkQmkvdzFSTFAvTG5GSUFSem9WLzlCeXYvNHlKcE1BbXRqREFHVVpFZ0E4K3RmLzZZVHIvMmV2amdFUURsd0FqUjl1L3U3eExmK1oyZThCWWFndi8vbFZFQUVjcno3L09mNDJBTjduZmdDbUxYWCtFcjFnLytSTU1nREk5RjRBeHBoNEFVUWlSZjhNUWFEK1pSTmFBS2ZGZVA5RU5ybi9LZHE4QUhHb01BQllhYjBCR2xJZy83bGRwQUhrOE8zL1FyWTFBS3ZGWFA5ckNla0J4M2lRLzA0eEN2OXRxbW4vV2dRZi94ejBjZjlLT2dzQVB0ejIvM21heVA2UTByTC9mam1CQVN2NkR2OWxieHdCTDFieC96MUdsdjgxU1FYL0hocWVBTkVhVmdDSzdVb0FwRis4QUk0OEhmNmlkUGovdTYrZ0FKY1NFQURSYjBIK3k0WW4vMWhzTWYrREdrZi8zUnZYL21ocFhmOGY3Qi8raHdEVC80OS9iZ0hVU2VVQTZVT24vc01CMFArRUVkMy9NOWxhQUVQck12L2YwbzhBc3pXQ0FlbHF4Z0RacmR6L2NPVVkvNithWGY1SHkvYi9NRUtGL3dPSTV2OFgzWEgrNjIvVkFLcDRYLzc3M1FJQUxZS2UvbWxlMmYveU5MVCsxVVF0LzJnbUhBRDBua3dBb2NoZy84ODFEZis3UTVRQXFqYjRBSGVpc3Y5VEZBc0FLaXJBQVpLZm8vKzM2RzhBVGVVVi8wYzFqd0FiVENJQTlvZ3YvOXNudHY5YzRNa0JFNDRPLzBXMjhmK2pkdlVBQ1cxcUFhcTE5LzlPTCs3L1ZOS3cvOVZyaXdBbkpnc0FTQldXQUVpQ1JRRE5UWnYram9VVkFFZHZyUDdpS2p2L3N3RFhBU0dBOFFEcS9BMEJ1RThJQUc0ZVNmLzJqYjBBcXMvYUFVcWFSZitLOWpIL215QmtBSDFLYWY5YVZUMy9JK1d4L3o1OXdmK1pWcndCU1hqVUFORjc5djZIMFNiL2x6b3NBVnhGMXY4T0RGai8vSm1tLy8zUGNQODhUbFAvNDN4dUFMUmcvUDgxZFNIK3BOeFMveWtCRy84bXBLYi9wR09wL2oyUVJ2L0FwaElBYS9wQ0FNVkJNZ0FCc3hMLy8yZ0IveXVaSS85UWI2Z0FicStvQUNscExmL2JEczMvcE9tTS9pc0JkZ0RwUThNQXNsS2YvNHBYZXYvVTdsci9rQ044L2htTXBBRDcxeXoraFVaci8yWGpVUDVjcVRjQTF5b3hBSEswVmY4aDZCc0JyTlVaQUQ2d2UvNGdoUmovNGI4K0FGMUdtUUMxS21nQkZyL2cvOGpJalAvNTZpVUFsVG1OQU1NNDBQLytna2IvSUszdy94M2N4d0J1WkhQL2hPWDVBT1RwMy84bDJOSCtzckhSLzdjdHBmN2dZWElBaVdHby8rSGVyQUNsRFRFQjB1dk0vL3dFSFA1R29KY0E2TDQwL2xQNFhmOCsxMDBCcjYrei82QXlRZ0I1TU5BQVA2blIvd0RTeUFEZ3V5d0JTYUpTQUFtd2ovOFRUTUgvSFR1bkFSZ3JtZ0FjdnI0QWpieUJBT2pyeS8vcUFHMy9Oa0dmQUR4WTZQOTUvWmIrL09tRC84WnVLUUZUVFVmL3lCWTcvbXI5OHY4VkRNLy83VUs5QUZyR3lnSGhySDhBTlJiS0FEam1oQUFCVnJjQWJiNHFBUE5FcmdGdDVKb0F5TEY2QVNPZ3QvK3hNRlgvV3RxcC8vaVlUZ0RLL200QUJqUXJBSTVpUWY4L2tSWUFSbXBkQU9pS2F3RnVzejMvMDRIYUFmTFJYQUFqV3RrQnRvOXEvM1JsMmY5eSt0My9yY3dHQUR5V293QkpyQ3ovNzI1US8rMU1tZjZoalBrQWxlamxBSVVmS1ArdXBIY0FjVFBXQUlIa0F2NUFJdk1BYStQMC82NXF5UDlVbVVZQk1pTVFBUHBLMlA3c3ZVTC9tZmtOQU9heUJQL2RLZTRBZHVONS8xNVhqUDcrZDF3QVNlLzIvblZYZ0FBVDA1SC9zUzc4QU9WYjlnRkZnUGYveWswMkFRZ0xDZitaWUtZQTJkYXQvNGJBQWdFQXp3QUF2YTVyQVl5R1pBQ2V3Zk1CdG1hckFPdWFNd0NPQlh2L1BLaFpBZGtPWFA4VDFnVUIwNmYrQUN3R3l2NTRFdXovRDNHNC83amZpd0Fvc1hmK3RudGEvN0Nsc0FEM1RjSUFHK3A0QU9jQTF2ODdKeDRBZldPUi81WkVSQUdOM3ZnQW1YdlMvMjUvbVAvbElkWUJoOTNGQUlsaEFnQU1qOHovVVNtOEFITlBndjllQTRRQW1LKzcvM3lOQ3Y5K3dMUC9DMmZHQUpVR0xRRGJWYnNCNWhLeS8waTJtQUFEeHJqL2dIRGdBV0doNWdEK1l5Yi9PcC9GQUpkQzJ3QTdSWS8vdVhENUFIZUlMLzk3Z29RQXFFZGYvM0d3S0FIb3VhMEF6MTExQVVTZGJQOW1CWlArTVdFaEFGbEJiLzczSHFQL2ZObmRBV2I2MkFER3JrditPVGNTQU9NRjdBSGwxYTBBeVczYUFUSHA3d0FlTjU0QkdiSnFBSnR2dkFGZWZvd0ExeC91QVUzd0VBRFY4aGtCSmtlb0FNMjZYZjR4MDR6LzJ3QzAvNFoycFFDZ2s0Yi9icm9qLzhiektnRHprbmNBaHV1akFRVHhoLy9CTHNIK1o3UlAvK0VFdVA3eWRvSUFrb2V3QWVwdkhnQkZRdFgrS1dCN0FIbGVLdit5djhQL0xvSXFBSFZVQ1AvcE1kYis3bnB0QUFaSFdRSHMwM3NBOUEwdy9uZVVEZ0J5SEZiL1MrMFovNUhsRVA2QlpEWC9ocFo0L3FpZE1nQVhTR2ovNERFT0FQOTdGditYdVpmL3FsQzRBWWEyRkFBcFpHVUJtU0VRQUV5YWJ3Rld6dXIvd0tDay9xVjdYZjhCMktUK1F4R3YvNmtMTy8rZUtUMy9TYndPLzhNR2lmOFdreDMvRkdjRC8vYUM0Lzk2S0lBQTRpOFkvaU1rSUFDWXVyZi9SY29VQU1PRnd3RGVNL2NBcWF0ZUFiY0FvUDlBelJJQm5GTVAvOFU2K2Y3N1dXNy9NZ3BZL2pNcjJBQmk4c1lCOVpkeEFLdnN3Z0hGSDhmLzVWRW1BU2s3RkFEOWFPWUFtRjBPLy9ieWt2N1dxZkQvOEdacy9xQ243QUNhMnJ3QWx1bksveHNUK2dFQ1I0WC9yd3cvQVpHM3hnQm9lSFAvZ3Z2M0FCSFVwLzgrZTRULzkyUzlBSnZmbUFDUHhTRUFtenNzLzVaZDhBRi9BMWYvWDBmUEFhZFZBZis4bUhUL0NoY1hBSW5EWFFFMlltRUE4QUNvLzVTOGZ3Q0dhNWNBVFAyckFGcUV3QUNTRmpZQTRFSTIvdWE2NWY4bnRzUUFsUHVDLzBHRGJQNkFBYUFBcVRHbi9zZitsUC83Qm9NQXUvNkIvMVZTUGdDeUZ6ci8vb1FGQUtUVkp3Q0cvSkwrSlRWUi81dUdVZ0ROcCs3L1hpMjAvNFFvb1FEK2IzQUJOa3ZaQUxQbTNRSHJYci8vRi9Nd0FjcVJ5LzhuZGlyL2RZMzlBUDRBM2dBcit6SUFOcW5xQVZCRTBBQ1V5L1Ara1FlSEFBYitBQUQ4dVg4QVlnaUIveVlqU1AvVEpOd0JLQnBaQUtoQXhmNEQzdS8vQWxQWC9yU2ZhUUE2YzhJQXVuUnEvK1gzMi8rQmRzRUF5cTYzQWFhaFNBREphNVArN1loS0FPbm1hZ0ZwYjZnQVFPQWVBUUhsQXdCbWw2Ly93dTdrLy83NjFBQzc3WGtBUS90Z0FjVWVDd0MzWDh3QXpWbUtBRURkSlFILzN4Ny9zakRULy9ISVd2K24wV0QvT1lMZEFDNXl5UDg5dUVJQU43WVkvbTYySVFDcnZ1ai9jbDRmQUJMZENBQXY1LzRBLzNCVEFIWVAxLyt0R1NqK3dNRWYvKzRWa3YrcndYYi9aZW8xL29QVWNBQlp3R3NCQ05BYkFMWFpELy9ubGVnQWpPeCtBSkFKeC84TVQ3WCtrN2JLL3hOdHR2OHgxT0VBU3FQTEFLL3BsQUFhY0RNQXdjRUovdytIK1FDVzQ0SUF6QURiQVJqeXpRRHUwSFgvRnZSd0FCcmxJZ0FsVUx6L0ppM08vdkJhNGY4ZEF5Ly9LdUJNQUxyenB3QWdoQS8vQlROOUFJdUhHQUFHOGRzQXJPV0YvL2JXTWdEbkM4Ly92MzVUQWJTanF2LzFPQmdCc3FUVC93TVF5Z0ZpT1hiL2pZTlovaUV6R0FEemxWdi8vVFFPQUNPcFEvNHhIbGovc3hzay82V010d0E2dlpjQVdCOEFBRXVwUWdCQ1pjZi9HTmpIQVhuRUd2OE9UOHYrOE9KUi8xNGNDdjlUd2ZEL3pNR0QvMTRQVmdEYUtKMEFNOEhSQUFEeXNRQm11ZmNBbm0xMEFDYUhXd0RmcjVVQTNFSUIvMVk4NkFBWllDWC80WHFpQWRlN3FQK2VuUzRBT0t1aUFPandaUUY2RmdrQU13a1YvelVaN3YvWkh1aitmYW1VQUEzb1pnQ1VDU1VBcFdHTkFlU0RLUURlRC9QLy9oSVJBQVk4N1FGcUEzRUFPNFM5QUZ4d0hnQnAwTlVBTUZTei83dDU1LzRiMkczL290MXIva252dy8vNkh6bi9sWWRaLzdrWGN3RURvNTMvRW5ENkFCazV1LytoWUtRQUx4RHpBQXlOKy81RDZyai9LUktoQUs4R1lQK2dyRFQrR0xDMy84YkJWUUY4ZVluL2x6SnkvOXpMUFAvUDd3VUJBQ1pyL3pmdVh2NUdtRjRBMWR4TkFYZ1JSZjlWcEw3L3krcFJBQ1l4SmY0OWtId0FpVTR4L3FqM01BQmZwUHdBYWFtSEFQM2toZ0JBcGtzQVVVa1UvOC9TQ2dEcWFwYi9YaUphLy82Zk9mN2NoV01BaTVPMC9oZ1h1UUFwT1I3L3ZXRk1BRUc3My8vZ3JDWC9JajVmQWVlUThBQk5hbjcrUUpoYkFCMWltd0RpK3pYLzZ0TUYvNURMM3Yra3NOMytCZWNZQUxONnpRQWtBWWIvZlVhWC9tSGsvQUNzZ1JmK01GclIvNWJnVWdGVWhoNEE4Y1F1QUdkeDZ2OHVaWG4rS0h6Ni80Y3Q4djRKK2FqL2pHeUQvNCtqcXdBeXJjZi9XTjZPLzhoZm5nQ093S1AvQjNXSEFHOThGZ0RzREVIK1JDWkIvK091L2dEMDlTWUE4RExRLzZFLytnQTgwZThBZWlNVEFBNGg1djRDbjNFQWFoUi8vK1ROWUFDSjBxNyt0TlNRLzFsaW1nRWlXSXNBcDZKd0FVRnV4UUR4SmFrQVFqaUQvd3JKVS82Ri9idi9zWEF0L3NUN0FBREUrcGYvN3VqVy81YlJ6UUFjOEhZQVIweFRBZXhqV3dBcStvTUJZQkpBLzNiZUl3Qngxc3YvZW5lNC8wSVRKQURNUVBrQWtsbUxBSVkraHdGbzZXVUF2RlFhQURINWdRRFExa3YvejRKTi8zT3Y2d0NyQW9uL3I1RzZBVGYxaC8rYVZyVUJaRHIyLzIzSFBQOVN6SWIvMXpIbUFZemx3UC9ld2Z2L1VZZ1AvN09Wb3Y4WEp4My9CMTlML3I5UjNnRHhVVnIvYXpISi8vVFRuUURlakpYL1FkczQvcjMyV3YreU81MEJNTnMwQUdJaTF3QWNFYnYvcjZrWUFGeFBvZi9zeU1JQms0L3FBT1hoQndIRnFBNEE2ek0xQWYxNHJnREZCcWoveW5XckFLTVZ6Z0J5VlZyL0R5a0svOElUWXdCQk45aitvcEowQURMTzFQOUFraDMvbnA2REFXU2xnditzRjRIL2ZUVUovdy9CRWdFYU1Rdi90YTdKQVlmSkR2OWtFNVVBMjJKUEFDcGpqLzVnQUREL3hmbFQvbWlWVC8vcmJvaitVb0FzLzBFcEpQNVkwd29BdTNtN0FHS0d4d0NydkxQKzBndnUvMEo3Z3Y0MDZqMEFNSEVYL2daV2VQOTNzdlVBVjRISkFQS04wUURLY2xVQWxCYWhBR2ZETUFBWk1hdi9pa09DQUxaSmV2NlVHSUlBMCtXYUFDQ2JuZ0JVYVQwQXNjSUovNlpaVmdFMlU3c0ErU2gxLzIwRDEvODFraXdCUHkrekFNTFlBLzRPVklnQWlMRU4vMGp6dXY5MUVYMy8wenJULzExUDN3QmFXUFgvaTlGdi8wYmVMd0FLOWsvL3h0bXlBT1BoQ3dGT2ZyUC9QaXQrQUdlVUl3Q0JDS1grOWZDVUFEMHpqZ0JSMElZQUQ0bHovOU4zN1ArZjlmai9Bb2FJLythTE9nR2dwUDRBY2xXTi96R210ditRUmxRQlZiWUhBQzQxWFFBSnBxSC9ONkt5L3kyNHZBQ1NIQ3orcVZveEFIaXk4UUVPZTMvL0IvSEhBYjFDTXYvR2oyWCt2Zk9ILzQwWUdQNUxZVmNBZHZ1YUFlMDJuQUNya3MvL2c4VDIvNGhBY1FHWDZEa0E4TnB6QURFOUcvOUFnVWtCL0trYi95aUVDZ0ZheWNILy9IbndBYnJPS1FBcnhtRUFrV1MzQU16WVVQNnNsa0VBK2VYRS9taDdTZjlOYUdEK2dyUUlBR2g3T1FEY3l1WC9adm5UQUZZTzZQKzJUdEVBNytHa0FHb05JUDk0U1JIL2hrUHBBRlArdFFDMzdIQUJNRUNELy9IWTgvOUJ3ZUlBenZGay9tU0dwdi90eXNVQU53MVJBQ0I4WnY4bzVMRUFkclVmQWVlZ2h2OTN1OG9BQUk0OC80QW12ZitteVpZQXozZ2FBVGE0ckFBTThzeitoVUxtQUNJbUh3RzRjRkFBSURPbC9yL3pOd0E2U1pMK202Zk4vMlJvbVAvRi9zLy9yUlAzQU80S3lnRHZsL0lBWGpzbi8vQWRadjhLWEpyLzVWVGIvNkdCVUFEUVdzd0I4TnV1LzU1bWtRRTFza3ovTkd5b0FWUGVhd0RUSkcwQWRqbzRBQWdkRmdEdG9NY0FxdEdkQUlsSEx3Q1BWaUFBeHZJQ0FOUXdpQUZjckxvQTVwZHBBV0MvNVFDS1VMLys4TmlDLzJJckJ2Nm94REVBL1JKYkFaQkplUUE5a2ljQlAyZ1kvN2lsY1A1KzYySUFVTlZpLzNzOFYvOVNqUFVCMzNpdC93L0doZ0hPUE84QTUrcGMveUh1RS8rbGNZNEJzSGNtQUtBcnB2N3ZXMmtBYXozQ0FSa0VSQUFQaXpNQXBJUnEveUowTHY2b1g4VUFpZFFYQUVpY09nQ0pjRVgrbG1tYS8rekpuUUFYMUpyL2lGTGovdUk3M2Y5ZmxjQUFVWFkwL3lFcjF3RU9rMHYvV1p4NS9nNFNUd0NUMElzQmw5bysvNXhZQ0FIU3VHTC9GSzk3LzJaVDVRRGNRWFFCbHZvRS8xeU8zUDhpOTBML3pPR3ovcGRSbHdCSEtPei9pajgrQUFaUDhQKzN1YlVBZGpJYkFEL2p3QUI3WXpvQk11Q2IveEhoMy83YzRFMy9EaXg3QVkyQXJ3RDQxTWdBbGp1My81TmhIUUNXekxVQS9TVkhBSkZWZHdDYXlMb0FBb0Q1LzFNWWZBQU9WNDhBcURQMUFYeVg1Ly9ROE1VQmZMNjVBREE2OWdBVTZlZ0FmUkppL3czK0gvLzFzWUwvYkk0akFLdDk4djZNRENML3BhR2lBTTdOWlFEM0dTSUJaSkU1QUNkR09RQjJ6TXYvOGdDaUFLWDBIZ0RHZE9JQWdHK1ovNHcydGdFOGVnLy9tem81QVRZeXhnQ3IweDMvYTRxbi82MXJ4Lzl0b2NFQVdVankvODV6V2YvNi9vNytzY3BlLzFGWk1nQUhhVUwvR2Y3Ly9zdEFGLzlQM216L0ovbExBUEY4TWdEdm1JVUEzZkZwQUpPWFlnRFZvWG4rOGpHSkFPa2wrZjRxdHhzQXVIZm0vOWtnby8vUSsrUUJpVDZELzA5QUNmNWVNSEVBRVlveS9zSC9GZ0QzRXNVQlF6ZG9BQkROWC84d0pVSUFONXcvQVVCU1N2L0lOVWYrNzBOOUFCcmczZ0RmaVYzL0h1REsvd25jaEFER0p1c0JabzFXQUR3clVRR0lIQm9BNlNRSS9zL3lsQUNrb2o4QU15N2cvM0l3VC84SnIrSUEzZ1BCL3krZzZQLy9YV24rRGlybUFCcUtVZ0hRSy9RQUd5Y20vMkxRZi85QWxiYi9CZnJSQUxzOEhQNHhHZHIvcVhUTi8zY1NlQUNjZEpQL2hEVnQvdzBLeWdCdVU2Y0FuZHVKL3dZRGd2OHlweDcvUEo4di80R0FuZjVlQTcwQUE2WkVBRlBmMXdDV1dzSUJENmhCQU9OVE0vL05xMEwvTnJzOEFaaG1MZjkzbXVFQThQZUlBR1RGc3YrTFI5Ly96RklRQVNuT0t2K2N3TjMvMkh2MC85cmF1Zis3dXUvLy9LeWcvOE0wRmdDUXJyWCt1MlJ6LzlOT3NQOGJCOEVBazlWby8xckpDdjlRZTBJQkZpRzZBQUVIWS80ZXpnb0E1ZW9GQURVZTBnQ0tDTnorUnplbkFFamhWZ0YydnJ3QS9zRmxBYXY1clA5ZW5yZitYUUpzLzdCZFRQOUpZMC8vU2tDQi92WXVRUUJqOFgvKzlwZG0veXcxMFA0N1p1b0FtcStrLzFqeUlBQnZKZ0VBLzdhKy8zT3dELzZwUElFQWV1M3hBRnBNUHdBK1Nuai9lc051QUhjRXNnRGU4dElBZ2lFdS9wd29LUUNua25BQk1hTnYvM213NndCTXp3Ny9BeG5HQVNucjFRQlZKTllCTVZ4dC84Z1lIdjZvN01NQWtTZDhBZXpEbFFCYUpMai9RMVdxL3lZakd2NkRmRVQvNzVzai96YkpwQURFRm5YL01RL05BQmpnSFFGK2NaQUFkUlcyQU11ZmpRRGZoMDBBc09hdy83N2wxLzlqSmJYL014V0sveG05V2Y4eE1LWCttQzMzQUtwczNnQlF5Z1VBRzBWbi9zd1dnZiswL0Q3KzBnRmIvNUp1L3YvYm9od0EzL3pWQVRzSUlRRE9FUFFBZ2RNd0FHdWcwQUJ3TzlFQWJVM1kvaUlWdWYvMll6ai9zNHNULzdrZE12OVVXUk1BU3ZwaS8rRXF5UC9BMmMzLzBoQ25BR09FWHdFcjVqa0EvZ3ZMLzJPOFAvOTN3ZnYrVUdrMkFPaTF2UUczUlhELzBLdWwveTl0dFA5N1U2VUFrcUkwLzVvTEJQK1g0MXIva29saC9qM3BLZjllS2pmL2JLVHNBSmhFL2dBS2pJUC9DbXBQL3ZPZWlRQkRza0wrc1h2Ry93OCtJZ0RGV0NyL2xWK3gvNWdBeHYrVi9uSC80VnFqLzMzWjl3QVNFZUFBZ0VKNC9zQVpDZjh5M2MwQU1kUkdBT24vcEFBQzBRa0EzVFRiL3F6ZzlQOWVPTTRCOHJNQy94OWJwQUhtTG9yL3ZlYmNBRGt2UGY5dkM1MEFzVnVZQUJ6bVlnQmhWMzRBeGxtUi82ZFBhd0Q1VGFBQkhlbm0vNVlWVnY0OEM4RUFseVVrL3JtVzgvL2sxRk1CckplMEFNbXBtd0QwUE9vQWp1c0VBVVBhUEFEQWNVc0JkUFBQLzBHc213QlJIcHovVUVnaC9oTG5iZitPYXhYK2ZScUUvN0FRTy8rV3lUb0F6cW5KQU5CNTRnQW9yQTcvbGoxZS96ZzVuUCtOUEpIL0xXeVYvKzZSbS8vUlZSLyt3QXpTQUdOaVhmNllFSmNBNGJuY0FJM3JMUCtnckJYK1J4b2YvdzFBWGY0Y09NWUFzVDc0QWJZSThRQ21aWlQvVGxHRi80SGUxd0c4cVlILzZBZGhBREZ3UFAvWjVmc0FkMnlLQUNjVGUvNkRNZXNBaEZTUkFJTG1sUDhaU3JzQUJmVTIvN25iOFFFU3d1VC84Y3BtQUdseHlnQ2I2MDhBRlFteS81d0I3d0RJbEQwQWMvZlMvekhkaHdBNnZRZ0JJeTRKQUZGQkJmODBucm4vZlhRdS8wcU1EZi9TWEt6K2t4ZEhBTm5nL2Y1emJMVC9rVG93L3R1eEdQK2MvendCbXBQeUFQMkdWd0ExUytVQU1NUGUveCt2TXYrYzBuai8wQ1BlL3hMNHN3RUNDbVgvbmNMNC81N01aZjlvL3NYL1R6NEVBTEtzWlFGZ2t2di9RUXFjQUFLSnBmOTBCT2NBOHRjQkFCTWpIZjhyb1U4QU81WDJBZnRDc0FESUlRUC9VRzZPLzhPaEVRSGtPRUwvZXkrUi9vUUVwQUJEcnF3QUdmMXlBRmRoVndINjNGUUFZRnZJL3lWOU93QVRRWFlBb1RUeC8rMnNCdit3di8vL0FVR0MvdCsrNWdCbC9lZi9raU50QVBvZFRRRXhBQk1BZTFxYkFSWldJUC9hMVVFQWIxMS9BRHhkcWY4SWY3WUFFYm9PL3YySjl2L1ZHVEQrVE80QS8vaGNSdjlqNElzQXVBbi9BUWVrMEFETmc4WUJWOWJIQUlMV1h3RGRsZDRBRnlhci9zVnUxUUFyYzR6KzE3RjJBR0EwUWdGMW51MEFEa0MyL3k0L3J2K2VYNzcvNGMyeC95c0ZqditzWTlULzlMdVRBQjB6bWYva2RCaitIbVhQQUJQMmx2K0c1d1VBZlliaUFVMUJZZ0RzZ2lIL0JXNCtBRVZzZi84SGNSWUFrUlJUL3NLaDUvK0R0VHdBMmRHeC8rV1UxUDREZzdnQWRiRzdBUndPSC8rd1psQUFNbFNYLzMwZk52OFZuWVgvRTdPTEFlRG9HZ0FpZGFyL3AveXIvMG1OenY2QitpTUFTRS9zQWR6bEZQOHB5cTMvWTB6dS84WVc0UDlzeHNQL0pJMWdBZXllTy85cVpGY0FidUlDQU9QcTNnQ2FYWGYvU25Day8wTmJBdjhWa1NIL1p0YUovNi9tWi82ajlxWUFYZmQwL3FmZ0hQL2NBamtCcTg1VUFIdmtFZjhiZUhjQWR3dVRBYlF2NGY5b3lMbitwUUp5QUUxTzFBQXRtckgvR01SNS9sS2R0Z0JhRUw0QkRKUEZBRi92bVA4TDYwY0FWcEozLzZ5RzFnQThnOFFBb2VHQkFCK0NlUDVmeURNQWFlZlMvem9KbFA4cnFOMy9mTzJPQU1iVE12NHU5V2NBcFBoVUFKaEcwUCswZGJFQVJrKzVBUE5LSUFDVm5NOEF4Y1NoQWZVMTd3QVBYZmIraS9BeC84UllKUCtpSm5zQWdNaWRBYTVNWi8rdHFTTCsyQUdyLzNJekVRQ0k1TUlBYnBZNC9tcjJud0FUdUUvL2xrM3cvNXRRb2dBQU5hbi9IWmRXQUVSZUVBQmNCMjcrWW5XVi8vbE41di85Q293QTFueGMvaU4yNndCWk1Ea0JGaldtQUxpUVBmK3ovOElBMXZnOS9qdHU5Z0I1RlZIK3BnUGtBR3BBR3Y5RjZJYi84dHcxL2k3Y1ZRQnhsZmYvWWJObi83NS9Dd0NIMGJZQVh6U0JBYXFRenY5NnlNei9xR1NTQUR5UWxmNUdQQ2dBZWpTeC8vYlRaZit1N1FnQUJ6TjRBQk1mclFCKzc1ei9qNzNMQU1TQVdQL3BoZUwvSG4ydC84bHNNZ0I3WkR2Ly9xTURBZDJVdGYvV2lEbiszclNKLzg5WU52OGNJZnYvUTlZMEFkTFFaQUJScWw0QWtTZzFBT0J2NS80akhQVC80c2ZEL3U0UjVnRFoyYVQrcVozZEFOb3VvZ0hIejZQL2JIT2lBUTVndS85MlBFd0F1SitZQU5IblIvNHFwTHIvdXBrei90MnJ0ditpanEwQTZ5L0JBQWVMRUFGZnBFRC9FTjJtQU52RkVBQ0VIU3ovWkVWMS96enJXUDRvVWEwQVI3NDkvN3RZblFEbkN4Y0E3WFdrQU9HbzMvK2FjblQvbzVqeUFSZ2dxZ0I5WW5IK3FCTk1BQkdkM1A2Yk5BVUFFMitoLzBkYS9QK3RidkFBQ3NaNS8vMy84UDlDZTlJQTNjTFgvbm1qRWYvaEIyTUF2akcyQUhNSmhRSG9Hb3IvMVVTRUFDeDNldit6WWpNQWxWcHFBRWN5NXY4S21YYi9zVVlaQUtWWHpRQTNpdW9BN2g1aEFIR2J6d0JpbVg4QUltdmIvblZ5clA5TXRQLys4am16LzkwaXJQNDRvakgvVXdQLy8zSGR2Zis4R2VUK0VGaFovMGNjeHY0V0VaWC84M24rLzJ2S1kvOEp6ZzRCM0MrWkFHdUpKd0ZoTWNML2xUUEYvcm82Qy85cksrZ0J5QVlPLzdXRlFmN2Q1S3YvZXo3bkFlUHFzLzhpdmRUKzlMdjVBTDROVUFHQ1dRRUEzNFd0QUFuZXh2OUNmMG9BcDloZC81dW94Z0ZDa1FBQVJHWXVBYXhhbWdEWWdFdi9vQ2d6QUo0Ukd3Rjg4REVBN01xdy81ZDh3UDhtd2I0QVg3WTlBS09UZlAvL3BUUC9IQ2dSL3RkZ1RnQldrZHIrSHlUSy8xWUpCUUJ2S2NqLzdXeGhBRGsrTEFCMXVBOEJMZkYwQUpnQjNQK2RwYndBK2crREFUd3NmZjlCM1B2L1N6SzRBRFZhZ1AvblVNTC9pSUYvQVJVU3UvOHRPcUgvUjVNaUFLNzVDLzRqalIwQTcwU3gvM051T2dEdXZyRUJWL1dtLzc0eDkvK1NVN2ovclE0bi81TFhhQUNPMzNnQWxjaWIvOVRQa1FFUXRka0FyU0JYLy84anRRQjMzNkVCeU45ZS8wWUd1di9BUTFYL01xbVlBSkFhZS84NDg3UCtGRVNJQUNlTXZQNzkwQVgveUhPSEFTdXM1ZitjYUxzQWwvdW5BRFNIRndDWG1VZ0FrOFZyL3BTZUJmL3VqODRBZnBtSi8xaVl4ZjRIUktjQS9KK2wvKzlPTnY4WVB6Zi9KdDVlQU8yM0RQL096TklBRXlmMi9oNUs1d0NIYkIwQnMzTUFBSFYyZEFHRUJ2ei9rWUdoQVdsRGpRQlNKZUwvN3VMay84eldnZjZpZTJUL3VYbnFBQzFzNXdCQ0NEai9oSWlBQUt6Z1F2NnZuYndBNXQvaS92TGJSUUM0RG5jQlVxSTRBSEo3RkFDaVoxWC9NZTlqL3B5SDF3QnYvNmYrSjhUV0FKQW1Ud0g1cUgwQW0yR2MveGMwMi8rV0ZwQUFMSldsL3loL3R3REVUZW4vZG9IUy82cUg1di9XZDhZQTZmQWpBUDAwQi85MVpqRC9GY3lhLzdPSXNmOFhBZ01CbFlKWi8vd1Jud0ZHUEJvQWtHc1JBTFMrUFA4NHRqdi9ia2MyLzhZU2dmK1Y0RmYvM3hXWS80b1d0di82bk0wQTdDM1EvMCtVOGdGbFJ0RUFaMDZ1QUdXUXJQK1lpTzBCdjhLSUFIRlFmUUdZQkkwQW01WTEvOFIwOVFEdmNrbitFMUlSLzN4OTZ2OG9OTDhBS3RLZS81dUVwUUN5QlNvQlFGd28veVJWVGYreTVIWUFpVUpnL25QaVFnQnU4RVgrbDI5UUFLZXU3UC9qYkd2L3ZQSkIvN2RSL3dBNXpyWC9MeUsxLzlYd25nRkhTMThBbkNnWS8yYlNVUUNyeCtUL21pSXBBT092U3dBVjc4TUFpdVZmQVV6QU1RQjFlMWNCNCtHQ0FIMCtQLzhDeHFzQS9pUU4vcEc2emdDVS8vVC9Jd0NtQUI2VzJ3RmM1TlFBWE1ZOC9qNkZ5UC9KS1RzQWZlNXQvN1NqN2dHTWVsSUFDUlpZLzhXZEwvK1pYamtBV0I2MkFGU2hWUUN5a253QXBxWUgveFhRM3dDY3R2SUFtM201QUZPY3J2NmFFSGIvdWxQb0FkODZlZjhkRjFnQUkzMS8vNm9GbGY2a0RJTC9tOFFkQUtGZ2lBQUhJeDBCb2lYN0FBTXU4djhBMmJ3QU9hN2lBYzdwQWdBNXU0aitlNzBKLzhsMWYvKzZKTXdBNXhuWUFGQk9hUUFUaG9IL2xNdEVBSTFSZmY3NHBjai8xcENIQUpjM3B2OG02MXNBRlM2YUFOLytsdjhqbWJUL2ZiQWRBU3RpSHYvWWV1Yi82YUFNQURtNURQN3djUWYvQlFrUS9ocGJiQUJ0eHNzQUNKTW9BSUdHNVA5OHVpai9jbUtFL3FhRUZ3QmpSU3dBQ2ZMdS83ZzFPd0NFZ1diL05DRHovcFBmeVA5N1U3UCtoNURKLzQwbE9BR1hQT1AvV2ttY0FjdXN1d0JRbHkvL1hvbm4veVMvTy8vaDBiWC9TdGZWL2daMnMvK1pOc0VCTWdEbkFHaWRTQUdNNDVyL3R1SVEvbURoWFA5ekZLcitCdnBPQVBoTHJmODFXUWIvQUxSMkFFaXRBUUJBQ000QnJvWGZBTGsraGYvV0MySUF4Ui9RQUt1bjlQOFc1N1VCbHRxNUFQZXBZUUdsaS9mL0wzaVZBV2Y0TXdBOFJSeitHYlBFQUh3SDJ2NDZhMUVBdU9tYy8veEtKQUIydkVNQWpWODEvOTVlcGY0dVBUVUF6anR6L3kvcyt2OUtCU0FCZ1pydS8yb2c0Z0I1dXozL0E2Yngva09xclA4ZDJMTC9GOG44QVAxdTh3RElmVGtBYmNCZy96Uno3Z0FtZWZQL3lUZ2hBTUoyZ2dCTFlCbi9xaDdtL2ljLy9RQWtMZnIvK3dIdkFLRFVYQUV0MGUwQTh5RlgvdTFVeWYvVUVwMysxR04vLzlsaUVQNkxyTzhBcU1tQy80L0JxZi91bDhFQjEyZ3BBTzg5cGY0Q0EvSUFGc3V4L3JITUZnQ1ZnZFgrSHdzcC93Q2ZlZjZnR1hML29sRElBSjJYQ3dDYWhrNEIyRGI4QURCbmhRQnAzTVVBL2FoTi9qV3pGd0FZZWZBQi95NWcvMnM4aC81aXpmbi9QL2wzLzNnNzAvOXl0RGYrVzFYdEFKWFVUUUU0U1RFQVZzYVdBRjNSb0FCRnpiYi85Rm9yQUJRa3NBQjZkTjBBTTZjbkFlY0JQLzhOeFlZQUE5RWkvNGM3eWdDblpFNEFMOTlNQUxrOFBnQ3lwbnNCaEF5aC96MnVLd0REUlpBQWZ5Ky9BU0lzVGdBNTZqUUIveFlvLy9aZWtnQlQ1SUFBUEU3Zy93Qmcwditacit3QW54VkpBTFJ6eFA2RDRXb0EvNmVHQUo4SWNQOTRSTUwvc01URy8zWXdxUDlkcVFFQWNNaG1BVW9ZL2dBVGpRVCtqajQvQUlPenUvOU5uSnYvZDFha0FLclFrdi9RaFpyL2xKczYvNko0NlA3ODFac0E4UTBxQUY0eWd3Q3pxbkFBakZPWC96ZDNWQUdNSSsvL21TMURBZXl2SndBMmwyZi9uaXBCLzhUdmgvNVdOY3NBbFdFdi90Z2pFZjlHQTBZQlp5UmEveWdhclFDNE1BMEFvOXZaLzFFR0FmL2RxbXorNmRCZEFHVEorZjVXSkNQLzBab2VBZVBKKy84Q3ZhZitaRGtEQUEyQUtRREZaRXNBbHN6ci81R3VPd0I0K0pYL1ZUZmhBSExTTmY3SHpIY0FEdmRLQVQvN2dRQkRhSmNCaDRKUUFFOVpOLzkxNXAzL0dXQ1BBTldSQlFCRjhYZ0JsZk5mLzNJcUZBQ0RTQUlBbWpVVS8waytiUURFWnBnQUtRek0vM29tQ3dINkNwRUF6MzJVQVBiMDN2OHBJRlVCY05WK0FLTDVWZ0ZIeG4vL1VRa1ZBV0luQlAvTVJ5MEJTMitKQU9vNzV3QWdNRi8vekI5eUFSM0V0Zjh6OGFmK1hXMk9BR2lRTFFEckRMWC9OSENrQUV6K3l2K3VEcUlBUGV1VC95dEF1ZjdwZmRrQTgxaW4va294Q0FDY3pFSUFmTlo3QUNiZGRnR1NjT3dBY21LeEFKZFp4d0JYeFhBQXVaV2hBQ3hncFFENHN4VC92TnZZL2lnK0RRRHpqbzBBNWVQTy82ektJLzkxc09IL1VtNG1BU3IxRHY4VVUyRUFNYXNLQVBKM2VBQVo2RDBBMVBDVC93UnpPUCtSRWUvK3loSDcvL2tTOWY5amRlOEF1QVN6Ly9idE0vOGw3NG4vcG5DbS8xRzhJZis1K283L05ydXRBTkJ3eVFEMksrUUJhTGhZLzlRMHhQOHpkV3ovL25XYkFDNWJELzlYRHBEL1YrUE1BRk1hVXdHZlRPTUFueHZWQVJpWGJBQjFrTFAraWRGU0FDYWZDZ0J6aGNrQTM3YWNBVzdFWGY4NVBPa0FCYWRwLzVyRnBBQmdJcnIvazRVbEFkeGp2Z0FCcDFUL0ZKR3JBTUxGKy81ZlRvWC8vUGp6LytGZGcvKzdoc1QvMkptcUFCUjJudjZNQVhZQVZwNFBBUzNUS2YrVEFXVCtjWFJNLzlOL2JBRm5EekFBd1JCbUFVVXpYLzlyZ0owQWlhdnBBRnA4a0FGcW9iWUFyMHpzQWNpTnJQK2pPbWdBNmJRMC8vRDlEditpY2Y3L0p1K0svalF1cGdEeFpTSCtnN3FjQUcvUVB2OThYcUQvSDZ6K0FIQ3VPUCs4WXh2L1E0cjdBSDA2Z0FHY21LNy9zZ3ozLy94VW5nQlN4UTcrck1oVC95VW5MZ0ZxejZjQUdMMGlBSU95a0FETzFRUUFvZUxTQUVnemFmOWhMYnYvVHJqZi83QWQrd0JQb0ZiL2RDV3lBRkpOMVFGU1ZJMy80bVhVQWE5WXgvLzFYdmNCckhadC82YTV2Z0NEdFhnQVYvNWQvNGJ3U2Y4ZzlZLy9pNkpuLzdOaUV2N1p6SEFBazk5NC96VUs4d0NtakpZQWZWREkvdzV0Mi85YjJnSC8vUHd2L20yY2RQOXpNWDhCekZmVC81VEsyZjhhVmZuL0R2V0dBVXhacWYveUxlWUFPMktzLzNKSmhQNU9tekgvbm41VUFER3ZLLzhRdGxUL25XY2pBR2pCYmY5RDNab0F5YXdCL2dpaVdBQ2xBUjMvZlp2bC94NmEzQUZuNzF3QTNBRnQvOHJHQVFCZUFvNEJKRFlzQU92aW52K3ErOWIvdVUwSkFHRks4Z0RibzVYLzhDTjIvOTl5V1A3QXh3TUFhaVVZLzhtaGR2OWhXV01CNERwbi8yWEhrLzdlUEdNQTZoazdBVFNIR3dCbUExditxTmpyQU9Yb2lBQm9QSUVBTHFqdUFDZS9Rd0JMb3k4QWoyRmkvempZcUFHbzZmei9JMjhXLzF4VUt3QWF5RmNCVy8yWUFNbzRSZ0NPQ0UwQVVBcXZBZnpIVEFBV2JsTC9nUUhDQUF1QVBRRlhEcEgvL2Q2K0FROUlyZ0JWbzFiK09tTXMveTBZdlA0YXpROEFFK1hTL3ZoRHd3QmpSN2dBbXNjbC81ZnplZjhtTTB2L3lWV0MvaXhCK2dBNWsvUCtraXM3LzFrY05RQWhWQmovc3pNUy9yMUdVd0FMbkxNQllvWjNBSjV2YndCM21rbi95RCtNL2kwTkRmK2F3QUwrVVVncUFDNmd1ZjRzY0FZQWt0ZVZBUnF3YUFCRUhGY0I3REtaLzdPQSt2N093Yi8vcGx5Si9qVW83d0RTQWN6K3FLMGpBSTN6TFFFa01tMy9EL0xDLytPZmV2K3dyOHIrUmpsSUFDamZPQURRb2pyL3QySmRBQTl2REFBZUNFei9oSC8yL3kzeVp3QkZ0US8vQ3RFZUFBT3plUUR4Nk5vQmU4ZFkvd0xTeWdHOGdsSC9YbVhRQVdja0xRQk13UmdCWHhyeC82V2l1d0FrY293QXlrSUYveVU0a3dDWUMvTUJmMVhvLy9xSDFBRzVzWEVBV3R4TC8wWDRrZ0F5YnpJQVhCWlFBUFFrYy82alpGTC9HY0VHQVg4OUpBRDlReDcrUWV5cS82RVIxLzQvcjR3QU4zOEVBRTl3NlFCdG9DZ0FqMU1ILzBFYTd2L1pxWXovVGw2OS93Q1R2ditUUjdyK2FrMS8vK21kNlFHSFYrMy8wQTNzQVp0dEpQKzBaTm9BdEtNU0FMNXVDUUVSUDN2L3M0aTAvNlY3ZS8rUXZGSCtSL0JzL3hsd0MvL2oyalAvcHpMcS8zSlBiUDhmRTNQL3QvQmpBT05Yai85STJmai9acWxmQVlHVmxRRHVoUXdCNDh3akFOQnpHZ0ZtQ09vQWNGaVBBWkQ1RGdEd25xeitaSEIzQU1LTm1mNG9PRlAvZWJBdUFDbzFUUCtldjVvQVc5RmNBSzBORUFFRlNPTC96UDZWQUZDNHp3QmtDWHIrZG1Xci8vekxBUDZnenpZQU9FajVBVGlNRGY4S1FHditXMlUwLytHMStBR0wvNFFBNXBFUkFPazRGd0IzQWZILzFhbVgvMk5qQ2Y2NUQ3Ly9yV2R0QWE0TisvK3lXQWYrR3p0RS93b2hBdi80WVRzQUdoNlNBYkNUQ2dCZmVjOEJ2RmdZQUxsZS92NXpOOGtBR0RKR0FIZzFCZ0NPUXBJQTVPTDUvMmpBM2dHdFJOc0FvcmdrLzQ5bWlmK2RDeGNBZlMxaUFPdGQ0ZjQ0Y0tEL1JuVHpBWm41Ti8rQkp4RUI4VkQwQUZkRkZRRmU1RW4vVGtKQi84TGo1d0E5a2xmL3Jac1gvM0IwMi83WUpndi9nN3FGQUY3VXV3QmtMMXNBelA2di85NFMxLzZ0Ukd6LzQrUlAveWJkMVFDajQ1YitINzRTQUtDekN3RUtXbDcvM0s1WUFLUFQ1Zi9IaURRQWdsL2QvNHk4NS82TGNZRC9kYXZzL2pIY0ZQODdGS3YvNUcyOEFCVGhJUDdERUs0QTQvNklBWWNuYVFDV1RjNy8wdTdpQURmVWhQN3ZPWHdBcXNKZC8va1E5LzhZbHo3L0NwY0tBRStMc3Y5NDhzb0FHdHZWQUQ1OUkvK1FBbXovNWlGVC8xRXQyQUhnUGhFQTF0bDlBR0tabWYrenNHcitnMTJLLzIwK0pQK3llU0QvZVB4R0FOejRKUURNV0djQmdOejcvK3pqQndGcU1jYi9QRGhyQUdOeTdnRGN6RjRCU2JzQkFGbWFJZ0JPMmFYL0RzUDUvd25tL2YvTmgvVUFHdndILzFUTkd3R0dBbkFBSlo0Z0FPZGI3ZisvcXN6L21BZmVBRzNBTVFEQnBwTC82Qk8xLzJtT05QOW5FQnNCL2NpbEFNUFpCUDgwdlpEL2U1dWcvbGVDTnY5T2VEMy9EamdwQUJrcGZmOVhxUFVBMXFWR0FOU3BCdi9iMDhMK1NGMmsvOFVoWi84cmpvMEFnK0dzQVBScEhBQkVST0VBaUZRTi80STVLUDZMVFRnQVZKWTFBRFpmblFDUURiSCtYM082QUhVWGR2LzBwdkgvQzdxSEFMSnF5LzloMmwwQUsvMHRBS1NZQkFDTGR1OEFZQUVZL3V1WjAvK29iaFQvTXUrd0FISXA2QURCK2pVQS9xQnYvb2g2S2Y5aGJFTUExNWdYLzR6UjFBQXF2YU1BeWlveS8ycHF2ZisrUk5uLzZUcDFBT1hjOHdIRkF3UUFKWGcyL2dTY2h2OGtQYXYrcFloay85VG9EZ0JhcmdvQTJNWkIvd3dEUUFCMGNYUC8rR2NJQU9kOUV2K2dITVVBSHJnakFkOUorZjk3RkM3K2h6Z2wvNjBONVFGM29TTC85VDFKQU0xOWNBQ0phSVlBMmZZZS8rMk9qd0JCbjJiL2JLUytBTnQxcmY4aUpYait5RVZRQUI5ODJ2NUtHNkQvdXBySC8wZkgvQUJvVVo4QkVjZ25BTk05d0FFYTdsc0FsTmtNQUR0YjFmOExVYmYvZ2VaNi8zTExrUUYzdEVML1NJcTBBT0NWYWdCM1Vtai8wSXdyQUdJSnR2L05aWWIvRW1VbUFGL0Zwdi9MOFpNQVB0Q1IvNFgyK3dBQ3FRNEFEZmU0QUk0SC9nQWt5QmYvV00zZkFGdUJOUDhWdWg0QWorVFNBZmZxK1AvbVJSLytzTHFILys3Tk5BR0xUeXNBRWJEWi9pRHpRd0R5YitrQUxDTUovK055VVFFRVJ3ei9KbW0vQUFkMU12OVJUeEFBUDBSQi81MGtidjlOOFFQLzRpMzdBWTRaemdCNGU5RUJIUDd1L3dXQWZ2OWIzdGYvb2crL0FGYndTUUNIdVZIK0xQR2pBTlRiMHY5d29wc0F6MlYyQUtoSU9QL0VCVFFBU0t6eS8zNFduZitTWUR2L29ubVkvb3dRWHdERC9zaitVcGFpQUhjcmtmN01yRTcvcHVDZkFHZ1Q3Zi8xZnRELzRqdlZBSFhaeFFDWVNPMEEzQjhYL2c1YTUvKzgxRUFCUEdYMi8xVVlWZ0FCc1cwQWtsTWdBVXUyd0FCMzhlQUF1ZTBiLzdobFVnSHJKVTMvL1lZVEFPajJlZ0E4YXJNQXd3c01BRzFDNndGOWNUc0FQU2lrQUs5bzhBQUNMN3YvTWd5TkFNS0x0ZitIK21nQVlWemUvOW1WeWYvTDhYYi9UNWREQUhxTzJ2K1Y5ZThBaWlySS9sQWxZZjk4Y0tmL0pJcFgvNElkay8veFYwNy96R0VUQWJIUkZ2LzM0My8rWTNkVC85UVp4Z0VRczdNQWtVMnMvbG1aRHYvYXZhY0FhK2s3L3lNaDgvNHNjSEQvb1g5UEFjeXZDZ0FvRllyK2FIVGtBTWRmaWYrRnZxai9rcVhxQWJkakp3QzMzRGIrLzk2RkFLTGJlZjQvN3dZQTRXWTIvL3NTOWdBRUlvRUJoeVNEQU00eU93RVBZYmNBcTlpSC8yV1lLLytXKzFzQUpwRmZBQ0xNSnY2eWpGUC9HWUh6LzB5UUpRQnFKQnIrZHBDcy8wUzY1Zjlyb2RYL0xxTkUvNVdxL1FDN0VROEEycUNsLzZzajlnRmdEUk1BcGN0MUFOWnJ3UC8wZTdFQlpBTm9BTEx5WWYvN1RJTC8wMDBxQWZwUFJ2OC85RkFCYVdYMkFEMklPZ0h1VzlVQURqdGkvNmRVVFFBUmhDNytPYS9GLzdrK3VBQk1RTThBcksvUS9xOUtKUUNLRzlQK2xIM0NBQXBaVVFDb3kyWC9LOVhSQWV2MU5nQWVJK0wvQ1g1R0FPSjlYdjZjZFJUL09maHdBZVl3UVAra1hLWUI0TmJtL3lSNGp3QTNDQ3YvK3dIMUFXcGlwUUJLYTJyK05RUTIvMXF5bGdFRGVIdi85QVZaQVhMNlBmLyttVklCVFE4UkFEbnVXZ0ZmMytZQTdEUXYvbWVVcFA5NXp5UUJFaEM1LzBzVVNnQzdDMlVBTGpDQi94YnYwdjlON0lIL2IwM00vejFJWWYvSDJmdi9LdGZNQUlXUnlmODU1cElCNjJUR0FKSkpJLzVzeGhUL3RrL1MvMUpuaUFEMmJMQUFJaEU4L3hOS2N2Nm9xazcvbmU4VS81VXBxQUE2ZVJ3QVQ3T0cvK2Q1aC8rdTBXTC84M3ErQUt1bXpRRFVkREFBSFd4Qy82TGV0Z0VPZHhVQTFTZjUvLzdmNVArM3BjWUFoYjR3QUh6UWJmOTNyMVgvQ2RGNUFUQ3J2Zi9EUjRZQmlOc3ovN1piamY0eG4wZ0FJM2IxLzNDNjQvODdpUjhBaVN5akFISm5QUDRJMVpZQW9ncHgvOEpvU0FEY2czVC9zazljQU12NjFmNWR3YjMvZ3Y4aS90Uzhsd0NJRVJUL0ZHVlQvOVRPcGdEbDdrbi9sMG9ELzZoWDF3Q2J2SVgvcG9GSkFQQlBoZit5MDFIL3kwaWovc0dvcFFBT3BNZitIdi9NQUVGSVd3R21TbWIveUNvQS84Sng0LzlDRjlBQTVkaGsveGp2R2dBSzZUNy9ld3F5QVJva3J2OTMyOGNCTGFPK0FCQ29LZ0NtT2NiL0hCb2FBSDZsNXdEN2JHVC9QZVY1L3pwMmlnQk16eEVBRFNKdy9sa1FxQUFsMEduL0k4blgveWhxWmY0RzczSUFLR2ZpL3ZaL2J2OC9wem9BaFBDT0FBV2VXUCtCU1o3L1hsbVNBT1kya2dBSUxhMEFUNmtCQUhPNjl3QlVRSU1BUStEOS84KzlRQUNhSEZFQkxiZzIvMWZVNFA4QVlFbi9nU0hyQVRSQ1VQLzdycHYvQkxNbEFPcWtYZjVkci8wQXhrVlgvK0JxTGdCakhkSUFQcnh5L3l6cUNBQ3ByL2YvRjIySi8rVzJKd0RBcFY3KzlXWFpBTDlZWUFERVhtUC9hdTRML2pWKzh3QmVBV1gvTHBNQ0FNbDhmUCtORE5vQURhYWRBVEQ3N2YrYituei9hcFNTLzdZTnlnQWNQYWNBMlpnSS90eUNMZi9JNXY4Qk4wRlgvMTIvWWY1eSt3NEFJR2xjQVJyUGpRQVl6dzMrRlRJdy83cVVkUC9USytFQUpTS2kvcVRTS3Y5RUYyRC90dFlJLy9WMWlmOUN3eklBU3d4VC9sQ01wQUFKcFNRQjVHN2pBUEVSV2dFWk5OUUFCdDhNLzR2ek9RQU1jVXNCOXJlLy85Vy9SZi9tRDQ0QUFjUEUvNHFyTC85QVAyb0JFS25XLzgrdU9BRllTWVgvdG9XTUFMRU9HZitUdURYL0N1T2gvM2pZOVA5SlRla0FuZTZMQVR0QjZRQkcrOWdCS2JpWi95RExjQUNTay8wQVYyVnRBU3hTaGYvMGxqWC9YcGpvL3p0ZEovOVlrOXovVGxFTkFTQXYvUCtnRTNML1hXc24vM1lRMHdHNWQ5SC80OXQvL2xocDdQK2liaGYvSktadS8xdnMzZjlDNm5RQWJ4UDAvZ3JwR2dBZ3R3YitBci95QU5xY05mNHBQRWIvcU94dkFIbTVmdi91anMvL04zNDBBTnlCMFA1UXpLVC9ReGVRL3Rvb2JQOS95cVFBeXlFRC93S2VBQUFsWUx6L3dERktBRzBFQUFCdnB3citXOXFILzh0Q3JmK1d3dUlBeWYwRy82NW1lUUROdjI0QU5jSUVBRkVvTGY0alpvLy9ER3pHL3hBYjZQLzhSN29Cc0c1eUFJNERkUUZ4VFk0QUU1ekZBVnd2L0FBMTZCWUJOaExyQUM0anZmL3MxSUVBQW1EUS9zanV4Lzg3cjZUL2tpdm5BTUxaTlA4RDN3d0FpamF5L2xYcnp3RG96eUlBTVRReS82WnhXZjhLTGRqL1BxMGNBRytsOWdCMmMxdi9nRlE4QUtlUXl3QlhEZk1BRmg3a0FiRnhrditCcXViKy9KbUIvNUhoS3dCRzV3WC9lbWwrL2xiMmxQOXVKWnIrMFFOYkFFU1JQZ0RrRUtYL045MzUvckxTV3dCVGt1TCtSWks2QUYzU2FQNFFHYTBBNTdvbUFMMTZqUC83RFhEL2FXNWRBUHRJcWdEQUY5Ly9HQVBLQWVGZDVBQ1prOGYrYmFvV0FQaGw5dit5ZkF6L3N2NW0vamNFUVFCOTFyUUF0MkNUQUMxMUYvNkV2L2tBajdETC9vaTNOditTNnJFQWttVlcveXg3andFaDBaZ0F3Rm9wL2xNUGZmL1ZyRklBMTZtUUFCQU5JZ0FnMFdUL1ZCTDVBY1VSN1AvWnV1WUFNYUN3LzI5MllmL3RhT3NBVHp0Yy9rWDVDLzhqckVvQkUzWkVBTjU4cGYrMFFpUC9WcTcyQUN0S2IvOStrRmIvNU9wYkFQTFZHUDVGTE92LzNMUWpBQWo0Qi85bUwxei84TTFtLzNIbXF3RWZ1Y24vd3ZaRy8zb1J1d0NHUnNmL2xRT1cvM1UvWndCQmFIdi8xRFlUQVFhTldBQlRodlAvaURWbkFLa2J0QUN4TVJnQWJ6YW5BTU05MS84ZkFXd0JQQ3BHQUxrRG92L0NsU2ovOW44bS9yNTNKdjg5ZHdnQllLSGIveXJMM1FHeDhxVC85WjhLQUhURUFBQUZYYzMrZ0grekFIM3Q5ditWb3RuL1Z5VVUvb3p1d0FBSkNjRUFZUUhpQUIwbUNnQUFpRC8vNVVqUy9pYUdYUDlPMnRBQmFDUlUvd3dGd2YveXJ6My92Nmt1QWJPVGsvOXh2b3YrZmF3ZkFBTkwvUDdYSkE4QXdSc1lBZjlGbGY5dWdYWUF5MTM1QUlxSlFQNG1SZ1lBbVhUZUFLRktld0RCWTAvL2RqdGUvejBNS3dHU3NaMEFMcE8vQUJEL0pnQUxNeDhCUERwaS8yL0NUUUdhVy9RQWpDaVFBYTBLK3dETDBUTCtiSUpPQU9TMFdnQ3VCL29BSDY0OEFDbXJIZ0IwWTFML2RzR0wvN3V0eHY3YWJ6Z0F1WHZZQVBtZU5BQTB0RjMveVFsYi96Z3RwdjZFbTh2L091aHVBRFRUV2YvOUFLSUJDVmUzQUpHSUxBRmVldlVBVmJ5ckFaTmN4Z0FBQ0dnQUhsK3VBTjNtTkFIMzkrdi9pYTQxL3lNVnpQOUg0OVlCNkZMQ0FBc3c0LytxU2JqL3h2djgvaXh3SWdDRFpZUC9TS2k3QUlTSGZmK0thR0gvN3Jpby8vTm9WUCtIMk9ML2k1RHRBTHlKbGdGUU9Jei9WcW1uLzhKT0dmL2NFYlQvRVEzQkFIV0oxUCtONEpjQU1mU3ZBTUZqci84VFk1b0IvMEUrLzV6U04vL3k5QVAvK2c2VkFKNVkyZitkejRiKysrZ2NBQzZjKy8rck9Mai83elBxQUk2S2cvOFovdk1CQ3NuQ0FEOWhTd0RTNzZJQXdNZ2ZBWFhXOHdBWVI5NytOaWpvLzB5M2IvNlFEbGYvMWsrSS85akUxQUNFRzR6K2d3WDlBSHhzRS84YzEwc0FUTjQzL3VtMlB3QkVxNy8rTkcvZS93cHBUZjlRcXVzQWp4aFkveTNuZVFDVWdlQUJQZlpVQVAwdTIvL3ZUQ0VBTVpRUy91WWxSUUJEaGhiK2pwdGVBQitkMC83VktoNy9CT1QzL3Z5d0RmOG5BQi8rOGZULy82b3RDdjc5M3ZrQTNuS0VBUDh2QnYrMG83TUJWRjZYLzFuUlV2N2xOS24vMWV3QUFkWTQ1UCtIZDVmL2NNbkJBRk9nTmY0R2wwSUFFcUlSQU9saFd3Q0RCVTRCdFhnMS8zVmZQLy90ZGJrQXYzNkkvNUIzNlFDM09XRUJMOG03LzZlbGR3RXRaSDRBRldJRy9wR1dYLzk0TnBnQTBXSm9BSTl2SHY2NGxQa0E2OWd1QVBqS2xQODVYeFlBOHVHakFPbjM2UDlIcXhQL1ovUXgvMVJuWGY5RWVmUUJVdUFOQUNsUEsvLzV6cWYvMXpRVi9zQWdGdi8zYnp3QVpVb20veFpiVlA0ZEhBMy94dWZYL3ZTYXlBRGZpZTBBMDRRT0FGOUF6djhSUHZmLzZZTjVBVjBYVFFETnpEVCtVYjJJQUxUYmlnR1BFbDRBekN1TS9yeXYyd0J2WW8vL2x6K2kvOU15Ui80VGtqVUFraTFUL3JKUzd2OFFoVlQvNHNaZC84bGhGUDk0ZGlQL2NqTG4vNkxsblAvVEdnd0FjaWR6Lzg3VWhnREYyYUQvZElGZS9zZlgyLzlMMy9rQi9YUzEvK2pYYVAva2d2Yi91WFZXQUE0RkNBRHZIVDBCN1ZlRi8zMlNpZjdNcU44QUxxajFBSnBwRmdEYzFLSC9hMFVZLzRuYXRmL3hWTWIvZ25yVC80MEltZisrc1hZQVlGbXlBUDhRTVA1NllHbi9kVGJvL3lKK2FmL01RNllBNkRTSy85T1REQUFaTmdjQUxBL1gvalBzTFFDK1JJRUJhcFBoQUJ4ZExmN3NqUS8vRVQyaEFOeHp3QURza1JqK2I2aXBBT0E2UC85L3BMd0FVdXBMQWVDZWhnRFJSRzRCMmFiWkFFYmhwZ0c3d1kvL0VBZFkvd3JOakFCMXdKd0JFVGdtQUJ0OGJBR3IxemYvWC8zVUFKdUhxUC8yc3BuK21rUktBT2c5WVA1cGhEc0FJVXpIQWIyd2d2OEphQm4rUzhabS8ra0JjQUJzM0JUL2N1WkdBSXpDaGY4NW5xVCtrZ1pRLzZuRVlRRlZ0NElBUnA3ZUFUdnQ2djlnR1JyLzZLOWgvd3Q1K1A1WUk4SUEyN1Q4L2tvSTR3REQ0MGtCdUc2aC96SHBwQUdBTlM4QVVnNTUvOEcrT2dBd3JuWC9oQmNnQUNnS2hnRVdNeG4vOEF1dy8yNDVrZ0Ixais4Qm5XVjIvelpVVEFETnVCTC9Md1JJLzA1d1ZmL0JNa0lCWFJBMC93aHBoZ0FNYlVqL09wejdBSkFqekFBc29IWCtNbXZDQUFGRXBmOXZicUlBbmxNby9relc2Z0E2Mk0zL3EyQ1QveWpqY2dHdzQvRUFSdm0zQVloVWkvODhldmYrandsMS83R3VpZjVKOTQ4QTdMbCsvejRaOS84dFFEai9vZlFHQUNJNU9BRnB5bE1BZ0pQUUFBWm5DdjlLaWtIL1lWQmsvOWF1SWY4eWhrci9icGVDL205VXJBQlV4MHYrK0R0dy93allzZ0VKdDE4QTdoc0kvcXJOM0FERDVZY0FZa3p0LytKYkdnRlMyeWYvNGI3SEFkbkllZjlSc3dqL2pFSE9BTExQVi83Ni9DNy9hRmx1QWYyOW52K1ExcDcvb1BVMi96VzNYQUVWeU1ML2tpRnhBZEVCL3dEcmFpdi9welRvQUozbDNRQXpIaGtBK3QwYkFVR1RWLzlQZThRQVFjVGYvMHdzRVFGVjhVUUF5cmY1LzBIVTFQOEpJWm9CUnp0UUFLL0NPLytOU0FrQVpLRDBBT2JRT0FBN0dVditVTUxDQUJJRHlQNmduM01BaEkvM0FXOWRPZjg2N1FzQmh0NkgvM3FqYkFGN0s3Ny8rNzNPL2xDMlNQL1E5dUFCRVR3SkFLSFBKZ0NOYlZzQTJBL1QvNGhPYmdCaW8yai9GVkI1LzYyeXR3Ri9qd1FBYUR4Uy90WVFEZjlnN2lFQm5wVG0vMytCUHY4ei85TC9QbzNzL3AwMzRQOXlKL1FBd0x6Ni8rUk1OUUJpVkZIL3JjczkvcE15Ti8vTTY3OEFOTVgwQUZncjAvNGJ2M2NBdk9lYUFFSlJvUUJjd2FBQit1TjRBSHMzNGdDNEVVZ0FoYWdLL2hhSG5QOHBHV2YvTU1vNkFMcVZVZis4aHU4QTY3VzkvdG1MdlA5S01GSUFMdHJsQUwzOSt3QXk1UXovMDQyL0FZRDBHZitwNTNyK1ZpKzkvNFMzRi84bHNwYi9NNG45QU1oT0h3QVdhVElBZ2p3QUFJU2pXLzRYNTdzQXdFL3ZBSjFtcFAvQVVoUUJHTFZuLy9BSjZnQUJlNlQvaGVrQS84cnk4Z0E4dXZVQThSREgvK0IwbnY2L2ZWdi80RmJQQUhrbDUvL2pDY2IvRDVudi8zbm8yZjVMY0ZJQVh3dzUvalBXYWYrVTNHRUJ4MklrQUp6UkRQNEsxRFFBMmJRMy90U3E2UC9ZRkZUL25mcUhBSjFqZi80Qnppa0FsU1JHQVRiRXlmOVhkQUQrNjZ1V0FCdWo2Z0RLaDdRQTBGOEEvbnVjWFFDM1Brc0FpZXUyQU16aC8vL1dpOUwvQW5NSS94ME1id0EwbkFFQS9SWDcveVdsSC80TWd0TUFhaEkxL2lwam1nQU8yVDMrMkF0Yy84akZjUDZUSnNjQUpQeDQvbXVwVFFBQmU1Ly96MHRtQUtPdnhBQXNBZkFBZUxxdy9nMWlUUC90ZlBILzZKSzgvOGhnNEFETUh5a0EwTWdOQUJYaFlQK3ZuTVFBOTlCK0FENjQ5UDRDcTFFQVZYT2VBRFpBTGY4VGluSUFoMGZOQU9Ndmt3SGE1MElBL2RFY0FQUVByZjhHRDNiK0VKYlEvN2tXTXY5V2NNLy9TM0hYQVQrU0svOEU0UlArNHhjKy93Ny8xdjR0Q00zL1Y4V1gvdEpTMS8vMStQZi9nUGhHQU9IM1Z3QmFlRVlBMWZWY0FBMkY0Z0F2dFFVQlhLTnAvd1llaGY3b3NqMy81cFVZL3hJeG5nRGtaRDMrZFBQNy8wMUxYQUZSMjVQL1RLUCsvbzNWOWdEb0paaitZU3hrQU1rbE1nSFU5RGtBcnF1My8vbEtjQUNtbkI0QTN0MWgvL05kU2Y3N1pXVC8yTmxkLy82S3UvK092alQvTzh1eC84aGVOQUJ6Y3A3L3BaaG9BWDVqNHY5Mm5mUUJhOGdRQU1GYTVRQjVCbGdBbkNCZC9uM3gwLzhPN1ozL3Bab1YvN2pnRnYvNkdKai9jVTBmQVBlckYvL3RzY3ovTkltUi84SzJjZ0RnNnBVQUNtOW5BY21CQkFEdWprNEFOQVlvLzI3VnBmNDh6LzBBUHRkRkFHQmhBUDh4TGNvQWVIa1cvK3VMTUFIR0xTTC90akliQVlQU1cvOHVOb0FBcjN0cC84YU5UdjVEOU8vLzlUWm4vazRtOHY4Q1hQbisrNjVYLzRzL2tBQVliQnYvSW1ZU0FTSVdtQUJDNVhiK01vOWpBSkNwbFFGMkhwZ0FzZ2g1QVFpZkVnQmFaZWIvZ1IxM0FFUWtDd0hvdHpjQUYvOWcvNkVwd2Y4L2k5NEFEN1B6QVA5a0QvOVNOWWNBaVRtVkFXUHdxdjhXNXVUK01iUlMvejFTS3dCdTlka0F4MzA5QUM3OU5BQ054ZHNBMDUvQkFEZDVhZjYzRklFQXFYZXEvOHV5aS8rSEtMYi9yQTNLLzBHeWxBQUl6eXNBZWpWL0FVcWhNQURqMW9EK1ZndnovMlJXQndIMVJJYi9QU3NWQVpoVVh2KytQUHIrNzNiby85YUlKUUZ4VEd2L1hXaGtBWkRPRi85dWxwb0I1R2U1QU5veE12NkhUWXYvdVFGT0FBQ2hsUDloSGVuL3o1U1YvNkNvQUFCYmdLdi9CaHdUL2d0djl3QW51NWIvaXVpVkFIVStSUDgvMkx6LzYrb2cvaDA1b1A4WkRQRUJxVHkvQUNDRGpmL3RuM3YvWHNWZS9uVCtBLzljczJIK2VXRmMvNnB3RGdBVmxmZ0ErT01EQUZCZ2JRQkx3RW9CREZyaS82RnFSQUhRY24vL2Npci8va29hU3YvM3M1YitlWXc4QUpOR3lQL1dLS0gvb2J6Si80MUJoLy95Yy93QVBpL0tBTFNWLy82Q04rMEFwUkc2L3dxcHdnQ2NiZHIvY0l4Ny8yaUEzLzZ4am16L2VTWGIvNEJORXY5dmJCY0JXOEJMQUs3MUZ2OEU3RDcvSzBDWkFlT3QvZ0R0ZW9RQmYxbTYvNDVTZ1A3OFZLNEFXck94QWZQV1YvOW5QS0wvMElJTy93dUNpd0RPZ2R2L1h0bWQvKy9tNXY5MGM1LytwR3RmQURQYUFnSFlmY2Ivak1xQS9ndGZSUDgzQ1YzK3Jwa0cvOHlzWUFCRm9HNEExU1l4L2h0UTFRQjJmWElBUmtaRC93K09TZitEZXJuLzh4UXkvb0x0S0FEU240d0J4WmRCLzFTWlFnRERmbG9BRU83c0FYYTdadjhER0lYL3UwWG1BRGpGWEFIVlJWNy9VSXJsQWM0SDVnRGViK1lCVytsMy93bFpCd0VDWWdFQWxFcUYvelAydFAva3NYQUJPcjFzLzhMTDdmNFYwY01Ba3dvakFWYWQ0Z0FmbzR2K09BZEwvejVhZEFDMVBLa0FpcUxVL2xHbkh3RE5XbkQvSVhEakFGT1hkUUd4NEVuL3JwRFovK2JNVC84V1Rlai9jazdxQU9BNWZ2NEpNWTBBOHBPbEFXaTJqUCtuaEF3QmUwUi9BT0ZYSndIN2JBZ0F4c0dQQVhtSHovK3NGa1lBTWtSMC8yV3ZLUC80YWVrQXBzc0hBRzdGMmdEWC9ocitxT0w5QUIrUFlBQUxaeWtBdDRITC9tVDNTdi9WZm9RQTBwTXNBTWZxR3dHVUw3VUFtMXVlQVRacHIvOENUcEgrWnBwZkFJRFBmLzQwZk96L2dsUkhBTjN6MHdDWXFzOEEzbXJIQUxkVVh2NWN5RGovaXJaekFZNWdrZ0NGaU9RQVlSS1dBRGY3UWdDTVpnUUF5bWVYQUI0VCtQOHp1TThBeXNaWkFEZkY0ZjZwWC9uL1FrRkUvN3pxZmdDbTMyUUJjTy8wQUpBWHdnQTZKN1lBOUN3WS9xOUVzLytZZHBvQnNLS0NBTmx5elA2dGZrNy9JZDRlL3lRQ1cvOENqL01BQ2V2WEFBT3Jsd0VZMS9YL3FDK2svdkdTendCRmdiUUFSUE54QUpBMVNQNzdMUTRBRjI2b0FFUkVULzl1UmwvK3JsdVEveUhPWC8rSktRZi9FN3VaL2lQL2NQOEprYm4rTXAwbEFBdHdNUUZtQ0w3LzZ2T3BBVHhWRndCS0o3MEFkREh2QUszVjBnQXVvV3ovbjVZbEFNUjR1ZjhpWWdiL21jTSsvMkhtUi85bVBVd0FHdFRzLzZSaEVBREdPNUlBb3hmRUFEZ1lQUUMxWXNFQSs1UGwvMks5R1A4dU5zNy82bEwyQUxkbkpnRnRQc3dBQ3ZEZ0FKSVdkZitPbW5nQVJkUWpBTkJqZGdGNS93UC9TQWJDQUhVUnhmOTlEeGNBbWsrWkFOWmV4Zis1TjVQL1B2NU8vbjlTbVFCdVpqLy9iRktoLzJtNzFBRlFpaWNBUFA5ZC8wZ011Z0RTK3g4QnZxZVEvK1FzRS82QVErZ0ExdmxyL29pUlZ2K0VMckFBdmJ2ai85QVdqQURaMDNRQU1sRzYvb3Y2SHdBZVFNWUJoNXRrQUtET0YvNjdvdFAvRUx3L0FQN1FNUUJWVkw4QThjRHkvNWwra1FIcW9xTC81bUhZQVVDSGZnQytsTjhCTkFBci94d252UUZBaU80QXI4UzVBR0xpMWY5L24vUUI0cTg4QUtEcGpnRzA4OC8vUlpoWkFSOWxGUUNRR2FUK2k3L1JBRnNaZVFBZ2t3VUFKN3A3L3o5ejV2OWRwOGIvajlYYy83T2NFLzhaUW5vQTFxRFovd0l0UHY5cVQ1TCtNNGxqLzFkazUvK3ZrZWovWmJnQi82NEpmUUJTSmFFQkpIS04vekRlanYvMXVwb0FCYTdkL2o5eW0vK0hONkFCVUIrSEFINzZzd0hzMmkwQUZCeVJBUkNUU1FENXZZUUJFYjNBLzkrT3h2OUlGQS8vK2pYdC9nOExFZ0FiMDNIKzFXczQvNjZUa3Y5Z2ZqQUFGOEZ0QVNXaVhnREhuZm4rR0lDNy84MHhzdjVkcENyL0szZnJBVmkzN2YvYTBnSC9hLzRxQU9ZS1kvK2lBT0lBMisxYkFJR3l5d0RRTWwvK3p0QmYvL2UvV2Y1dTZrLy9wVDN6QUJSNmNQLzI5cm4rWndSN0FPbGo1Z0hiVy96L3g5NFcvN1AxNmYvVDhlb0FiL3JBLzFWVWlBQmxPakwvZzYyYy9uY3RNLzkyNlJEKzhscldBRjZmMndFREErci9Za3hjL2xBMjVnQUY1T2YrTlJqZi8zRTRkZ0VVaEFIL3E5THNBRGp4bnYrNmN4UC9DT1d1QURBc0FBRnljcWIvQmtuaS84MVo5QUNKNDBzQitLMDRBRXA0OXY1M0F3di9VWGpHLzRoNll2K1M4ZDBCYmNKTy85L3hSZ0hXeUtuL1liNHYveTlucnY5alhFaitkdW0wLzhFajZmNGE1U0QvM3Z6R0FNd3JSLy9IVkt3QWhtYStBRy91WWY3bUtPWUE0ODFBL3NnTTRRQ21HZDRBY1VVei80K2ZHQUNudUVvQUhlQjAvcDdRNlFEQmRINy8xQXVGL3hZNmpBSE1KRFAvNkI0ckFPdEd0ZjlBT0pMK3FSSlUvK0lCRGYvSU1yRC9OTlgxL3FqUllRQy9SemNBSWs2Y0FPaVFPZ0c1U3IwQXVvNlYva0JGZi8raHk1UC9zSmUvQUlqbnkvNmp0b2tBb1g3Ny91a2dRZ0JFejBJQUhod2xBRjF5WUFIK1hQZi9MS3RGQU1wM0MvKzhkaklCLzFPSS8wZFNHZ0JHNHdJQUlPdDVBYlVwbWdCSGh1WCt5djhrQUNtWUJRQ2FQMG4vSXJaOEFIbmRsdjhhek5VQktheFhBRnFka3Y5dGdoUUFSMnZJLy9ObXZRQUJ3NUgrTGxoMUFBak80d0MvYnYzL2JZQVUvb1pWTS8rSnNYQUIyQ0lXLzRNUTBQOTVsYW9BY2hNWEFhWlFILzl4OEhvQTZMUDZBRVJ1dFA3U3FuY0EzMnlrLzg5UDZmOGI1ZUwrMFdKUi8wOUVCd0NEdVdRQXFoMmkveEdpYS84NUZRc0JaTWkxLzM5QnBnR2xoc3dBYUtlb0FBR2tUd0NTaHpzQlJqS0EvMlozRGY3akJvY0FvbzZ6LzZCazNnQWI0TnNCbmwzRC8rcU5pUUFRR0gzLzdzNHYvMkVSWXY5MGJnei9ZSE5OQUZ2ajZQLzQvay8vWE9VRy9sakdpd0RPUzRFQStrM08vNDMwZXdHS1Jkd0FJSmNHQVlPbkZ2L3RSS2YreDcyV0FLT3Jpdjh6dkFiL1h4MkovcFRpc3dDMWE5RC9oaDlTLzVkbExmK0J5dUVBNEVpVEFEQ0tsLy9EUU03KzdkcWVBR29kaWY3OXZlbi9adzhSLzhKaC93Q3lMYW4reHVHYkFDY3dkZitIYW5NQVlTYTFBSll2UWY5VGd1WCs5aWFCQUZ6dm12NWJZMzhBb1c4aC8rN1o4ditEdWNQLzFiK2UveW1XMmdDRXFZTUFXVlQ4QWF0R2dQK2orTXYrQVRLMC8zeE1WUUg3YjFBQVkwTHYvNXJ0dHYvZGZvWCtTc3hqLzBHVGQvOWpPS2YvVC9pVi8zU2I1UC90S3c3K1JZa0wveGI2OFFGYmVvLy96Zm56QU5RYVBQOHd0ckFCTUJlLy84dDVtUDR0U3RYL1Bsb1MvdldqNXYrNWFuVC9VeU9mQUF3aEF2OVFJajRBRUZldS82MWxWUURLSkZIK29FWE0vMERodXdBNnpsNEFWcEF2QU9WVzlRQS9rYjRCSlFVbkFHMzdHZ0NKaytvQW9ubVIvNUIwenYvRjZMbi90NzZNLzBrTS92K0xGUEwvcWxydi8yRkN1Ly8xdFlmKzNvZzBBUFVGTS83TEwwNEFtR1hZQUVrWGZRRCtZQ0VCNjlKSi95dlJXQUVIZ1cwQWVtamsvcXJ5eXdEeXpJZi95aHpwLzBFR2Z3Q2ZrRWNBWkl4ZkFFNldEUUQ3YTNZQnRqcDkvd0VtYlArTnZkSC9DSnQ5QVhHalcvOTVUNzcvaHU5cy8wd3YrQUNqNU84QUVXOEtBRmlWUy8vWDYrOEFwNThZL3krWGJQOXIwYndBNmVkai9oektsUCt1STRyL2JoaEUvd0pGdFFCclpsSUFadTBIQUZ3azdmL2RvbE1CTjhvRy80ZnFoLzhZK3Q0QVFWNm8vdlg0MHYrbmJNbisvNkZ2QU0wSS9nQ0lEWFFBWkxDRS95dlhmdit4aFlML25rK1VBRVBnSlFFTXpoWC9QaUp1QWUxb3IvOVFoRy8vanE1SUFGVGx0UDVwczR3QVFQZ1AvK21LRUFEMVEzdisybm5VL3o5ZjJnSFZoWW4vajdaUy96QWNDd0QwY28wQjBhOU0vNTIxbHYrNjVRUC9wSjF2QWVlOWl3QjN5cjcvMm1wQS8wVHJQLzVnR3F6L3V5OExBZGNTKy85UlZGa0FSRHFBQUY1eEJRRmNnZEQvWVE5VC9na2N2QUR2Q2FRQVBNMllBTUNqWXYrNEVqd0EyYmFMQUcwN2VQOEV3UHNBcWRMdy95V3NYUDZVMC9YL3MwRTBBUDBOY3dDNXJzNEJjcnlWLysxYXJRQXJ4OEQvV0d4eEFEUWpUQUJDR1pULzNRUUgvNWZ4Y3YrKzBlZ0FZakxIQUplVzFmOFNTaVFCTlNnSEFCT0hRZjhhckVVQXJ1MVZBR05mS1FBRE9CQUFKNkN4LzhocTJ2NjVSRlQvVzdvOS9rT1BqZjhOOUtiL1kzTEdBTWR1by8vQkVyb0FmTy8yQVc1RUZnQUM2eTRCMUR4ckFHa3FhUUVPNXBnQUJ3V0RBSTFvbXYvVkF3WUFnK1NpLzdOa0hBSG5lMVgvemc3ZkFmMWc1Z0FtbUpVQllvbDZBTmJOQS8vaW1MUC9Cb1dKQUo1RmpQOXhvcHIvdFBPcy94dTljLytQTHR6LzFZYmgvMzRkUlFDOEs0a0I4a1lKQUZyTS8vL25xcE1BRnpnVC9qaDluZjh3czlyL1Q3YjkveWJVdndFcDYzd0FZSmNjQUllVXZnRE4rU2YrTkdDSS85UXNpUDlEMFlQLy9JSVgvOXVBRlAvR2dYWUFiR1VMQUxJRmtnRStCMlQvdGV4ZS9od2FwQUJNRm5EL2VHWlBBTXJBNVFISXNOY0FLVUQwLzg2NFRnQ25MVDhCb0NNQS96c01qdi9NQ1pELzIxN2xBWG9iY0FDOWFXMy9RTkJLLy90L053RUM0c1lBTEV6UkFKZVlUZi9TRnk0QnlhdEYveXpUNXdDK0plRC85Y1ErLzZtMTN2OGkweEVBZC9IRi8rVWptQUVWUlNqL3N1S2hBSlN6d1FEYnd2NEJLTTR6LytkYytnRkRtYW9BRlpUeEFLcEZVdjk1RXVmL1hISURBTGcrNWdEaHlWZi9rbUNpLzdYeTNBQ3R1OTBCNGo2cS96aCsyUUYxRGVQL3N5enZBSjJObS8rUTNWTUE2OUhRQUNvUnBRSDdVWVVBZlBYSi9tSFRHUDlUMXFZQW1pUUovL2d2ZndCYTI0ei9vZGttL3RTVFAvOUNWSlFCendNQkFPYUdXUUYvVG5yLzRKc0IvMUtJU2dDeW5ORC91aGt4Lzk0RDBnSGxscjcvVmFJMC95bFVqZjlKZTFUK1hSR1dBSGNUSEFFZ0Z0Zi9IQmZNLzQ3eE5QL2tOSDBBSFV6UEFOZW4rdjZ2cE9ZQU44OXBBVzI3OWYraExOd0JLV1dBLzZjUVhnQmQxbXYvZGtnQS9sQTk2djk1cjMwQWk2bjdBR0Vuay83NnhESC9wYk51L3Q5R3UvOFdqbjBCbXJPSy8zYXdLZ0VLcnBrQW5GeG1BS2dOb2YrUEVDQUErc1cwLzh1akxBRlhJQ1FBb1prVS8zdjhEd0FaNDFBQVBGaU9BQkVXeVFHYXpVMy9Kejh2QUFoNmpRQ0FGN2IrekNjVC93UndIZjhYSkl6LzB1cDAvalV5UC85NXEyai9vTnRlQUZkU0R2N25LZ1VBcFl0Ly9sWk9KZ0NDUEVMK3l4NHQveTdFZWdINU5hTC9pSTluL3RmU2NnRG5CNkQrcVpncS8yOHQ5Z0NPZzRmL2cwZk0veVRpQ3dBQUhQTC80WXJWLy9jdTJQNzFBN2NBYlB4S0FjNGFNUC9OTnZiLzA4WWsvM2tqTWdBMDJNci9Kb3VCL3ZKSmxBQkQ1NDMvS2kvTUFFNTBHUUVFNGIvL0JwUGtBRHBZc1FCNnBlWC8vRlBKLytDbllBR3h1SjcvOG1tekFmakc4QUNGUXNzQi9pUXZBQzBZYy85M1B2NEF4T0c2L251TnJBQWFWU24vNG0rM0FOWG5sd0FFT3dmLzdvcVVBRUtUSWY4ZjlvMy8wWTEwLzJod0h3QllvYXdBVTlmbS9pOXZsd0F0SmpRQmhDM01BSXFBYmY3cGRZYi84NzZ0L3ZIczhBQlNmK3orS04raC8yNjI0Zjk3cnU4QWgvS1JBVFBSbWdDV0EzUCsyYVQ4L3plY1JRRlVYdi8vNkVrdEFSUVQxUDlneFR2K1lQc2hBQ2JIU1FGQXJQZi9kWFE0LytRUkVnQStpbWNCOXVXay8vUjJ5ZjVXSUovL2JTS0pBVlhUdWdBS3djSCtlc0t4QUhydVp2K2kycXNBYk5taEFaNnFJZ0N3TDVzQnRlUUwvd2ljQUFBUVMxMEF6bUwvQVRxYUl3QU04N2orUTNWQy8rYmxld0RKS200QWh1U3kvcnBzZHY4NkU1ci9VcWsrLzNLUGN3SHZ4REwvclREQi81TUNWUCtXaHBQK1graEpBRzNqTlA2L2lRb0FLTXdlL2t3MFlmK2s2MzRBL255OEFFcTJGUUY1SFNQLzhSNEgvbFhhMXY4SFZKYitVUnQxLzZDZm1QNUNHTjMvNHdvOEFZMkhaZ0RRdlpZQmRiTmNBSVFXaVA5NHh4d0FGWUZQL3JZSlFRRGFvNmtBOXBQRy8yc21rQUZPcjgzLzFnWDYvaTlZSGYra0w4ei9LemNHLzRPR3ovNTBaTllBWUl4TEFXcmNrQURESUJ3QnJGRUYvOGV6TlA4bFZNc0FxbkN1QUFzRVd3QkY5QnNCZFlOY0FDR1lyLytNbVd2Lys0Y3IvbGVLQlAvRzZwUCtlWmhVLzgxbG13R2RDUmtBU0dvUi9teVpBUCs5NWJvQXdRaXcvNjZWMFFEdWdoMEE2ZForQVQzaVpnQTVvd1FCeG04ei95MVBUZ0Z6MGdyLzJna1ovNTZMeHYvVFVyditVSVZUQUoyQjVnSHpoWWIvS0lnUUFFMXJULyszVlZ3QnNjektBS05Iay8rWVJiNEFyRE84QWZyU3JQL1Q4bkVCV1ZrYS8wQkNiLzUwbUNvQW9TY2IvelpRL2dCcTBYTUJaM3hoQU4zbVl2OGY1d1lBc3NCNC9nL1p5Lzk4bms4QWNKSDNBRno2TUFHanRjSC9KUytPL3BDOXBmOHVrdkFBQmt1QUFDbWR5UDVYZWRVQUFYSHNBQVV0K2dDUURGSUFIMnpuQU9IdmQvK25CNzMvdStTRS8yNjlJZ0JlTE13Qm9qVEZBRTY4OGY0NUZJMEE5Skl2QWM1a013QjlhNVQrRzhOTkFKajlXZ0VIajVEL015VWZBQ0ozSnY4SHhYWUFtYnpUQUpjVWRQNzFRVFQvdFAxdUFTK3gwUUNoWXhIL2R0N0tBSDJ6L0FGN05uNy9rVG0vQURlNmVRQUs4NG9BemRQbC8zMmM4ZjZVbkxuLzR4TzgvM3dwSVA4ZklzNytFVGxUQU13V0pmOHFZR0lBZDJhNEFRTytIQUJ1VXRyL3lNekEvOG1SZGdCMXpKSUFoQ0JpQWNEQ2VRQnFvZmdCN1ZoOEFCZlVHZ0ROcTFyLytERFlBWTBsNXY5OHl3RCtucWdlLzliNEZRQnd1d2YvUzRYdi8wcmo4Ly82azBZQTFuaWlBS2NKcy84V25oSUEyazNSQVdGdFVmLzBJYlAvT1RRNS8wR3Mwdi81UjlIL2pxbnVBSjY5bWYrdS9tZitZaUVPQUkxTTV2OXhpelQvRHpyVUFLalh5Zi80ek5jQjMwU2cvem1hdC80djUza0FhcWFKQUZHSWlnQ2xLek1BNTRzOUFEbGZPLzUyWWhuL2x6L3NBVjYrK3YrcHVYSUJCZm82LzB0cFlRSFgzNFlBY1dPakFZQStjQUJqYXBNQW84TUtBQ0hOdGdEV0RxNy9nU2JuL3pXMjN3QmlLcC8vOXcwb0FMelNzUUVHRlFELy96MlUvb2t0Z2Y5WkduVCtmaVp5QVBzeTh2NTVob0QvelBtbi9xWHIxd0RLc2ZNQWhZMCtBUENDdmdGdXIvOEFBQlNTQVNYU2VmOEhKNElBanZwVS80M0l6d0FKWDJqL0MvU3VBSWJvZmdDbkFYditFTUdWLytqcDd3SFZSbkQvL0hTZy92TGUzUC9OVmVNQUI3azZBSGIzUHdGMFRiSC9QdlhJL2o4U0pmOXJOZWorTXQzVEFLTGJCLzRDWGlzQXRqNjIvcUJPeVArSGpLb0E2N2prQUs4MWl2NVFPazMvbU1rQ0FUL0VJZ0FGSHJnQXE3Q2FBSGs3emdBbVl5Y0FyRkJOL2dDR2x3QzZJZkgrWHYzZi95eHkvQUJzZmpuL3lTZ04veWZsRy84bjd4Y0JsM2t6LzVtVytBQUs2cTcvZHZZRS9zajFKZ0JGb2ZJQkVMS1dBSEU0Z2dDckgya0FHbGhzL3pFcWFnRDdxVUlBUlYyVkFCUTUvZ0NrR1c4QVdyeGEvOHdFeFFBbzFUSUIxR0NFLzFpS3RQN2trbnovdVBiM0FFRjFWdi85WnRMKy9ua2tBSWx6QS84OEdOZ0FoaElkQUR2aVlRQ3dqa2NBQjlHaEFMMVVNLzZiK2tnQTFWVHIveTNlNEFEdWxJLy9xaW8xLzA2bmRRQzZBQ2ovZmJGbi8wWGhRZ0RqQjFnQlM2d0dBS2t0NHdFUUpFYi9NZ0lKLzR2QkZnQ1B0K2YrMmtVeUFPdzRvUUhWZ3lvQWlwRXMvb2psS1A4eFB5UC9QWkgxLzJYQUF2N29wM0VBbUdnbUFYbTUyZ0I1aTlQK2QvQWpBRUc5MmY2N3M2TC9vTHZtQUQ3NER2ODhUbUVBLy9lai8rRTdXLzlyUnpyLzhTOGhBVEoxN0FEYnNULys5RnF6QUNQQzEvKzlRekwvRjRlQkFHaTlKZis1T2NJQUl6N24vOXo0YkFBTTU3SUFqMUJiQVlOZFpmK1FKd0lCLy9xeUFBVVI3UDZMSUM0QXpMd20vdlZ6TlArL2NVbit2MnhGL3haRjlRRVh5N0lBcW1PcUFFSDRid0FsYkpuL1FDVkZBQUJZUHY1WmxKRC92MFRnQWZFbk5RQXB5KzMva1g3Qy85MHEvZjhaWTVjQVlmM2ZBVXB6TWY4R3Iwai9PN0RMQUh5MytRSGs1R01BZ1F6UC9xakF3Ly9Nc0JEK21PcXJBRTBsVmY4aGVJZi9qc0xqQVIvV09nRFZ1MzMvNkM0OC83NTBLdjZYc2hQL016N3Qvc3pzd1FEQzZEd0FyQ0tkLzcwUXVQNW5BMS8vamVray9pa1pDLzhWdzZZQWR2VXRBRVBWbGYrZkRCTC91NlRqQWFBWkJRQU1Uc01CSzhYaEFEQ09LZjdFbXp6LzM4Y1NBWkdJbkFEOGRhbitrZUx1QU84WGF3QnR0YnovNW5BeC9rbXE3Zi9udCtQL1VOd1VBTUpyZndGL3pXVUFMalRGQWRLckpQOVlBMXIvT0plTkFHQzcvLzhxVHNnQS9rWkdBZlI5cUFETVJJb0JmTmRHQUdaQ3lQNFJOT1FBZGR5UC9zdjRld0E0RXE3L3VwZWsvelBvMEFHZzVDdi8rUjBaQVVTK1B3QU5BQUFBQVA4QUFBQUE5UUFBQUFBQUFQc0FBQUFBQUFEOUFBQUFBUE1BQUFBQUJ3QUFBQUFBQXdBQUFBRHpBQUFBQUFVQUFBQUFBQUFBQUFzQUFBQUFBQXNBQUFBQTh3QUFBQUFBQVAwQUFBQUFBUDhBQUFBQUF3QUFBQUQxQUFBQUFBQUFBQThBQUFBQUFQOEFBQUFBL3dBQUFBQUhBQUFBQUFVQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUNib2xZL0NzaWV3UmNQMGlmTHZtUERWMzZ3RjA4WXpPYkU0QW9odFUvd0Z4eGRxY0QxTjJFKzZQQXQyRFJCbkR5b2dVL29zT2N6R1RzZjlkNUtzQTNycy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9mKzMvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy85Lzd2Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vMy90MC9WY0dtTVNXTmFjOTZMZStkNFVBQUFBQUFBQUFBQUFBQUFBQUFBQUVBakp2UE5uNWdscU82ZktoSVd1WjdzcitKVCtjdk51UFBFMkhWODY5VStsMFlMbXJYOVNEbEVmYkQ0cmpHZ0ZtMnU5UWZ1cjJZTWZlU0YrRXhuTjRGc2lyaWpYbUMrS1FzMWw3eU9SUkRkeEx6dE43TS83d0xXODI0bUJwZHUxNlRpMVNQTmJ3bFk1R2RBRnR2RVI4Vm1iVHhtdnBJSS9raGlCYmRyVlhoeXJRZ0lEbzVpcUI5aStiM0JGQVZ1REVveXk1RTYraFRFazRyVC8xY045REZWdmlYdnlkRjIrY3JHV0ZqditzZDZBTlJMSEphY0czSnVVSm1uUGRQR2J3ZEpLOFo3QmFadms0eVZQT0laSHZ1KzExWXlMeHAzQkQyV2NySGZNb1F3a2RRSXJXVzhzNlMyRDVLWnVxb1IwU3RUN1FiM2NxYkJjdFZNUmc5cUkrWGFyMzJidVVsRSttQkF5dEMxdHhqR29QeUg3bU1nbkE3RGtEdSsreDM5WnY4S1BxRDN6QytER0phY0trMGVScDlWdmdnUGdVV1BLQm5CdURncG5LU2tVL0MvU1JvVUt0eWNteVNaY09DRWJMdTBxeEZyOGJTeE4zN09WblJNTk9GUGVZNitMVkhNS1phaXlkenk3Q21wMjVxN3RSeTdKd29FN05ZSVVoU3h5a21RRDhVeWg2TCtpQVRCQ3ZFdG1HcWlSbC9qUWNJdEx3akMrVkFhalVXekhHRkx2MWhub2t0RVFxV1ZWSkFhWjFpb2djVmVGTlE3MHVORzdNbkNnYWhESTBOSzRGc0drR1ZPclFWRUliRGNlbWV1TzMweDNTQ2VvU0p2aHRieXdOR05heWNXekRCdzV5NHBCNDBxcTJFNXo0Mk4zVDhxY1c2TzRzdGJ6Ynk1by9MTHZYZTZDajNSZ0x4ZERiMk9sZUhLcjhLRVVlTWlFN0Rsa0dnZ0N4NHdvSG1Nait2KytrT205Z3Q3cmJGQ2tGWG5Hc3ZlaitiNHJVM0xqOG5oeHhweGhKdXJPUGlmS0I4TEFJY2U0aHRFZTYrRE4xbjNhNm5qUmJ1NS9UMzMxdW04WGNxcG44QWFtbU1paXhYMWpDcTROK2I0RW1EOFJHMGNjRXpVTGNSdUVmUVFqOVhmYktKTWt4MEI3cThveXZMN0pGUXErbmp4TURSQ2N4R2NkUTdaQ1BzdSsxTVZNS241bC9Kd3BmMW5zK3RZNnEyL0xYeGRZUjBxTUdVUnNnQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBNE90NmZEdEJ1SzRXVnVQNjhaL0VhdG9KamV1Y01ySDlobUlGRmw5SnVBQmZuSlc4bzFDTUpMSFFzVldjZys5YkJFUmN4Rmdjam9iWUlrN2QwSjhSVit6Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vOS83Zi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLzMvdS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9mMU5wWjBWa01qVTFNVGtnYm04Z1JXUXlOVFV4T1NCamIyeHNhWE5wYjI1ekFRQUFBQUFBQUFBQUFBQUFBQUFBQUZNdFBtSjFabXhsYmlBOFBTQkNURUZMUlRKQ1gwSk1UME5MUWxsVVJWTUFZM0o1Y0hSdlgyZGxibVZ5YVdOb1lYTm9MMkpzWVd0bE1tSXZjbVZtTDJKc1lXdGxNbUl0Y21WbUxtTUFZbXhoYTJVeVlsOW1hVzVoYkFCdmRYUnNaVzRnUEQwZ1ZVbE9WRGhmVFVGWUFHTnllWEIwYjE5blpXNWxjbWxqYUdGemFDOWliR0ZyWlRKaUwzSmxaaTluWlc1bGNtbGphR0Z6YUY5aWJHRnJaVEppTG1NQVkzSjVjSFJ2WDJkbGJtVnlhV05vWVhOb1gySnNZV3RsTW1KZlptbHVZV3dBSkdGeVoyOXVNbWxrQUNSaGNtZHZiakpwQUNSMlBRQWtiVDBBTEhROUFDeHdQUUFrWVhKbmIyNHlhV1FrZGowQUpHRnlaMjl1TW1ra2RqMEFKR0Z5WjI5dU1tbGtKQUFrWVhKbmIyNHlhU1FBSW5zZ2NtVjBkWEp1SUUxdlpIVnNaUzVuWlhSU1lXNWtiMjFXWVd4MVpTZ3BPeUI5SWdCN0lHbG1JQ2hOYjJSMWJHVXVaMlYwVW1GdVpHOXRWbUZzZFdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZXlCMGNua2dleUIyWVhJZ2QybHVaRzkzWHlBOUlDZHZZbXBsWTNRbklEMDlQU0IwZVhCbGIyWWdkMmx1Wkc5M0lEOGdkMmx1Wkc5M0lEb2djMlZzWmpzZ2RtRnlJR055ZVhCMGIxOGdQU0IwZVhCbGIyWWdkMmx1Wkc5M1h5NWpjbmx3ZEc4Z0lUMDlJQ2QxYm1SbFptbHVaV1FuSUQ4Z2QybHVaRzkzWHk1amNubHdkRzhnT2lCM2FXNWtiM2RmTG0xelEzSjVjSFJ2T3lCMllYSWdjbUZ1Wkc5dFZtRnNkV1Z6VTNSaGJtUmhjbVFnUFNCbWRXNWpkR2x2YmlncElIc2dkbUZ5SUdKMVppQTlJRzVsZHlCVmFXNTBNekpCY25KaGVTZ3hLVHNnWTNKNWNIUnZYeTVuWlhSU1lXNWtiMjFXWVd4MVpYTW9ZblZtS1RzZ2NtVjBkWEp1SUdKMVpsc3dYU0ErUGo0Z01Ec2dmVHNnY21GdVpHOXRWbUZzZFdWelUzUmhibVJoY21Rb0tUc2dUVzlrZFd4bExtZGxkRkpoYm1SdmJWWmhiSFZsSUQwZ2NtRnVaRzl0Vm1Gc2RXVnpVM1JoYm1SaGNtUTdJSDBnWTJGMFkyZ2dLR1VwSUhzZ2RISjVJSHNnZG1GeUlHTnllWEIwYnlBOUlISmxjWFZwY21Vb0oyTnllWEIwYnljcE95QjJZWElnY21GdVpHOXRWbUZzZFdWT2IyUmxTbE1nUFNCbWRXNWpkR2x2YmlncElIc2dkbUZ5SUdKMVppQTlJR055ZVhCMGIxc25jbUZ1Wkc5dFFubDBaWE1uWFNnMEtUc2djbVYwZFhKdUlDaGlkV1piTUYwZ1BEd2dNalFnZkNCaWRXWmJNVjBnUER3Z01UWWdmQ0JpZFdaYk1sMGdQRHdnT0NCOElHSjFabHN6WFNrZ1BqNCtJREE3SUgwN0lISmhibVJ2YlZaaGJIVmxUbTlrWlVwVEtDazdJRTF2WkhWc1pTNW5aWFJTWVc1a2IyMVdZV3gxWlNBOUlISmhibVJ2YlZaaGJIVmxUbTlrWlVwVE95QjlJR05oZEdOb0lDaGxLU0I3SUhSb2NtOTNJQ2RPYnlCelpXTjFjbVVnY21GdVpHOXRJRzUxYldKbGNpQm5aVzVsY21GMGIzSWdabTkxYm1Rbk95QjlJSDBnZlNCOUFFeHBZbk52WkdsMWJVUlNSMkoxWmw5c1pXNGdQRDBnVTBsYVJWOU5RVmdBY21GdVpHOXRZbmwwWlhNdmNtRnVaRzl0WW5sMFpYTXVZd0J5WVc1a2IyMWllWFJsY3dCaU5qUmZjRzl6SUR3OUlHSTJORjlzWlc0QWMyOWthWFZ0TDJOdlpHVmpjeTVqQUhOdlpHbDFiVjlpYVc0eVltRnpaVFkwQURFdU1DNHhPQT09XCI7dmFyIENBPSExO2Z1bmN0aW9uIFFBKEEpe2Zvcih2YXIgST1bXSxnPTA7ZzxBLmxlbmd0aDtnKyspe3ZhciBCPUFbZ107Qj4yNTUmJihDQSYmRCghMSxcIkNoYXJhY3RlciBjb2RlIFwiK0IrXCIgKFwiK1N0cmluZy5mcm9tQ2hhckNvZGUoQikrXCIpICBhdCBvZmZzZXQgXCIrZytcIiBub3QgaW4gMHgwMC0weEZGLlwiKSxCJj0yNTUpLEkucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKEIpKX1yZXR1cm4gSS5qb2luKFwiXCIpfXZhciBFQT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBhdG9iP2F0b2I6ZnVuY3Rpb24oQSl7dmFyIEksZyxCLEMsUSxFLGk9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiLGU9XCJcIixvPTA7QT1BLnJlcGxhY2UoL1teQS1aYS16MC05XFwrXFwvXFw9XS9nLFwiXCIpO2Rve0k9aS5pbmRleE9mKEEuY2hhckF0KG8rKykpPDwyfChDPWkuaW5kZXhPZihBLmNoYXJBdChvKyspKSk+PjQsZz0oMTUmQyk8PDR8KFE9aS5pbmRleE9mKEEuY2hhckF0KG8rKykpKT4+MixCPSgzJlEpPDw2fChFPWkuaW5kZXhPZihBLmNoYXJBdChvKyspKSksZSs9U3RyaW5nLmZyb21DaGFyQ29kZShJKSw2NCE9PVEmJihlKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGcpKSw2NCE9PUUmJihlKz1TdHJpbmcuZnJvbUNoYXJDb2RlKEIpKX13aGlsZShvPEEubGVuZ3RoKTtyZXR1cm4gZX07ZnVuY3Rpb24gaUEoQSl7aWYoVyhBKSlyZXR1cm4gZnVuY3Rpb24oQSl7aWYoXCJib29sZWFuXCI9PXR5cGVvZiBvJiZvKXt2YXIgSTt0cnl7ST1CdWZmZXIuZnJvbShBLFwiYmFzZTY0XCIpfWNhdGNoKGcpe0k9bmV3IEJ1ZmZlcihBLFwiYmFzZTY0XCIpfXJldHVybiBuZXcgVWludDhBcnJheShJLmJ1ZmZlcixJLmJ5dGVPZmZzZXQsSS5ieXRlTGVuZ3RoKX10cnl7Zm9yKHZhciBnPUVBKEEpLEI9bmV3IFVpbnQ4QXJyYXkoZy5sZW5ndGgpLEM9MDtDPGcubGVuZ3RoOysrQylCW0NdPWcuY2hhckNvZGVBdChDKTtyZXR1cm4gQn1jYXRjaChBKXt0aHJvdyBuZXcgRXJyb3IoXCJDb252ZXJ0aW5nIGJhc2U2NCBzdHJpbmcgdG8gYnl0ZXMgZmFpbGVkLlwiKX19KEEuc2xpY2Uoei5sZW5ndGgpKX12YXIgZUEsb0EsY0E9ZnVuY3Rpb24oQSxJLGcpe1wiYWxtb3N0IGFzbVwiO3ZhciBCPW5ldyBBLkludDhBcnJheShnKSxDPW5ldyBBLkludDMyQXJyYXkoZyksUT1uZXcgQS5VaW50OEFycmF5KGcpLEU9QS5NYXRoLmltdWwsaT1BLk1hdGguY2x6MzIsZT1JLmIsbz1JLmMsYz1JLmQsYT1JLmYsbj1JLmcscj1JLmgsdD1JLmksZj1JLmosdz1JLmsseT0zNTQyNDtmdW5jdGlvbiBzKEEsSSl7QXw9MCxJfD0wO3ZhciBnLEUsaSxlLGMsYSxuPTAscj0wLHQ9MCxmPTAsdz0wLHM9MCxoPTAsRD0wLEY9MCxwPTAsdT0wLEg9MCxrPTAsbD0wLF89MCxHPTAsZD0wLFk9MCxNPTAsUz0wLFU9MCx2PTAsYj0wLEo9MCxQPTAsUj0wLE49MCxtPTAsTD0wLHg9MCxLPTAsWD0wLGo9MCxUPTAscT0wLFY9MCx6PTAsVz0wLE89MCxaPTAsJD0wLEFBPTAsSUE9MCxnQT0wLEJBPTAsQ0E9MCxRQT0wLEVBPTAsaUE9MCxlQT0wLG9BPTAsY0E9MCxhQT0wLG5BPTAsckE9MCx0QT0wLGZBPTAsd0E9MCx5QT0wLHNBPTA7Zz15LEU9eT15KzYzJi02NCx5PXkrMjU2fDAsbj0wO2Rve2Y9MHxxSShJKyhuPDwzKXwwKSx0PTB8bygpLENbKHI9RSsxMjgrKG48PDMpfDApPj4yXT1mLENbcis0Pj4yXT10LG49bisxfDB9d2hpbGUoMTYhPSgwfG4pKTtuPUEscj0oST1FKSs2NHwwO2Rve0JbST4+MF09MHxCW24+PjBdLEk9SSsxfDAsbj1uKzF8MH13aGlsZSgoMHxJKTwoMHxyKSk7Zm9yKENbRSs4OD4+Ml09MTU5NTc1MDEyOSxDW0UrODgrND4+Ml09LTE1MjE0ODY1MzQsWD0tMTM3NzQwMjE1OV4oUVtBKzY0Pj4wXXxRW0ErNjQrMT4+MF08PDh8UVtBKzY0KzI+PjBdPDwxNnxRW0ErNjQrMz4+MF08PDI0KSxLPTEzNTk4OTMxMTleKFFbQSs2NCs0Pj4wXXxRW0ErNjQrNCsxPj4wXTw8OHxRW0ErNjQrNCsyPj4wXTw8MTZ8UVtBKzY0KzQrMz4+MF08PDI0KSxTPTcyNTUxMTE5OV4oUVtBKzcyPj4wXXxRW0ErNzIrMT4+MF08PDh8UVtBKzcyKzI+PjBdPDwxNnxRW0ErNzIrMz4+MF08PDI0KSxVPS0xNjk0MTQ0MzcyXihRW0ErNzIrND4+MF18UVtBKzcyKzQrMT4+MF08PDh8UVtBKzcyKzQrMj4+MF08PDE2fFFbQSs3Mis0KzM+PjBdPDwyNCksdT0tNzk1Nzc3NDleKFFbQSs4MD4+MF18UVtBKzgwKzE+PjBdPDw4fFFbQSs4MCsyPj4wXTw8MTZ8UVtBKzgwKzM+PjBdPDwyNCksSD01Mjg3MzQ2MzVeKFFbQSs4MCs0Pj4wXXxRW0ErODArNCsxPj4wXTw8OHxRW0ErODArNCsyPj4wXTw8MTZ8UVtBKzgwKzQrMz4+MF08PDI0KSxBQT0zMjcwMzMyMDleKFFbQSs4OD4+MF18UVtBKzg4KzE+PjBdPDw4fFFbQSs4OCsyPj4wXTw8MTZ8UVtBKzg4KzM+PjBdPDwyNCksJD0xNTQxNDU5MjI1XihRW0ErODgrND4+MF18UVtBKzg4KzQrMT4+MF08PDh8UVtBKzg4KzQrMj4+MF08PDE2fFFbQSs4OCs0KzM+PjBdPDwyNCksaD0wfENbRSszMj4+Ml0sRD0wfENbRSszMis0Pj4yXSxEPTB8WkkoKEk9MHx2ZygwfChLPTB8WkkoKHdBPTB8dmcoMHwoeUE9MHx2ZygwfChqPTB8Q1tFKzEyOD4+Ml0pLDB8KFQ9MHxDW0UrMTI4KzQ+PjJdKSwwfGgsMHxEKSksMHwod0E9MHxvKCkpLDB8Q1tFPj4yXSwwfENbRSs0Pj4yXSkpXlgsKHlBPTB8bygpKV5LLDMyKSksMHwoWD0wfG8oKSksLTIwNTczMTU3NiwxNzc5MDMzNzAzKSleaCwoZj0wfG8oKSleRCwyNCksaD0wfG8oKSxJQT0wfENbRSsxMjgrOD4+Ml0sZ0E9MHxDW0UrMTI4KzgrND4+Ml0sWD0wfFpJKCh5QT0wfHZnKDB8KHlBPTB8dmcoMHxELDB8aCwwfHdBLDB8eUEpKSwwfG8oKSwwfElBLDB8Z0EpKV5LLCh3QT0wfG8oKSleWCwxNiksSz0wfG8oKSxDW0UrOTY+PjJdPVgsQ1tFKzk2KzQ+PjJdPUssZj0wfHZnKDB8WCwwfEssMHxJLDB8ZiksST0wfG8oKSxDW0UrNjQ+PjJdPWYsQ1tFKzY0KzQ+PjJdPUksaD0wfFpJKGZeRCxJXmgsNjMpLEQ9MHxvKCksQ1tFKzMyPj4yXT1oLENbRSszMis0Pj4yXT1ELFc9MHxDW0UrNDA+PjJdLE89MHxDW0UrNDArND4+Ml0sTz0wfFpJKChzPTB8dmcoMHwoVT0wfFpJKChuQT0wfHZnKDB8KGFBPTB8dmcoMHwocj0wfENbRSsxMjgrMTY+PjJdKSwwfChuPTB8Q1tFKzEyOCsxNis0Pj4yXSksMHxXLDB8TykpLDB8KG5BPTB8bygpKSwwfENbRSs4Pj4yXSwwfENbRSs4KzQ+PjJdKSleUywoYUE9MHxvKCkpXlUsMzIpKSwwfChTPTB8bygpKSwtMjA2NzA5MzcwMSwtMTE1MDgzMzAxOSkpXlcsKEY9MHxvKCkpXk8sMjQpLFc9MHxvKCkscD0wfENbRSsxMjgrMjQ+PjJdLGs9MHxDW0UrMTI4KzI0KzQ+PjJdLFM9MHxaSSgoYUE9MHx2ZygwfChhQT0wfHZnKDB8TywwfFcsMHxuQSwwfGFBKSksMHxvKCksMHxwLDB8aykpXlUsKG5BPTB8bygpKV5TLDE2KSxVPTB8bygpLENbRSsxMDQ+PjJdPVMsQ1tFKzEwNCs0Pj4yXT1VLEY9MHx2ZygwfFMsMHxVLDB8cywwfEYpLHM9MHxvKCksQ1tFKzcyPj4yXT1GLENbRSs3Mis0Pj4yXT1zLFc9MHxaSShGXk8sc15XLDYzKSxPPTB8bygpLG09MHxDW0UrNDg+PjJdLEw9MHxDW0UrNDgrND4+Ml0sTD0wfFpJKCh6PTB8dmcoMHwoSD0wfFpJKChvQT0wfHZnKDB8KGVBPTB8dmcoMHwoYT0wfENbRSsxMjgrMzI+PjJdKSwwfChyQT0wfENbRSsxMjgrMzIrND4+Ml0pLDB8bSwwfEwpKSwwfChvQT0wfG8oKSksMHxDW0UrMTY+PjJdLDB8Q1tFKzE2KzQ+PjJdKSledSwoZUE9MHxvKCkpXkgsMzIpKSwwfCh1PTB8bygpKSwtMjM3OTE1NzMsMTAxMzkwNDI0MikpXm0sKFo9MHxvKCkpXkwsMjQpLG09MHxvKCksaT0wfENbRSsxMjgrNDA+PjJdLEc9MHxDW0UrMTI4KzQwKzQ+PjJdLG09MHxaSSgoWj0wfHZnKDB8KHU9MHxaSSgoZUE9MHx2ZygwfChlQT0wfHZnKDB8TCwwfG0sMHxvQSwwfGVBKSksMHxvKCksMHxpLDB8RykpXkgsKG9BPTB8bygpKV51LDE2KSksMHwoSD0wfG8oKSksMHx6LDB8WikpXkwsKHo9MHxvKCkpXm0sNjMpLEw9MHxvKCksWT0wfENbRSs1Nj4+Ml0sZD0wfENbRSs1Nis0Pj4yXSxkPTB8WkkoKE49MHx2ZygwfCgkPTB8WkkoKEVBPTB8dmcoMHwoUUE9MHx2ZygwfChfPTB8Q1tFKzEyOCs0OD4+Ml0pLDB8KGw9MHxDW0UrMTI4KzQ4KzQ+PjJdKSwwfFksMHxkKSksMHwoRUE9MHxvKCkpLDB8Q1tFKzI0Pj4yXSwwfENbRSsyNCs0Pj4yXSkpXkFBLChRQT0wfG8oKSleJCwzMikpLDB8KEFBPTB8bygpKSwxNTk1NzUwMTI5LC0xNTIxNDg2NTM0KSleWSwoeD0wfG8oKSleZCwyNCksWT0wfG8oKSxNPTB8Q1tFKzEyOCs1Nj4+Ml0sdj0wfENbRSsxMjgrNTYrND4+Ml0sWT0wfFpJKCh4PTB8dmcoMHwoQUE9MHxaSSgoUUE9MHx2ZygwfChRQT0wfHZnKDB8ZCwwfFksMHxFQSwwfFFBKSksMHxvKCksMHxNLDB8dikpXiQsKEVBPTB8bygpKV5BQSwxNikpLDB8KCQ9MHxvKCkpLDB8TiwwfHgpKV5kLChOPTB8bygpKV5ZLDYzKSxkPTB8bygpLHE9MHxDW0UrMTI4KzY0Pj4yXSxWPTB8Q1tFKzEyOCs2NCs0Pj4yXSxPPTB8WkkoKHo9MHx2ZygwfCgkPTB8WkkoKHdBPTB8dmcoMHwod0E9MHx2ZygwfFcsMHxPLDB8eUEsMHx3QSkpLDB8bygpLDB8cSwwfFYpKV5BQSwoeUE9MHxvKCkpXiQsMzIpKSwwfChBQT0wfG8oKSksMHxaLDB8eikpXlcsKFo9MHxvKCkpXk8sMjQpLFc9MHxvKCksYz0wfENbRSsxMjgrNzI+PjJdLGNBPTB8Q1tFKzEyOCs3Mis0Pj4yXSxBQT0wfFpJKCh5QT0wfHZnKDB8KHlBPTB8dmcoMHxPLDB8VywwfHdBLDB8eUEpKSwwfG8oKSwwfGMsMHxjQSkpXiQsKHdBPTB8bygpKV5BQSwxNiksJD0wfG8oKSxDW0UrMTIwPj4yXT1BQSxDW0UrMTIwKzQ+PjJdPSQsWj0wfHZnKDB8QUEsMHwkLDB8eiwwfFopLHo9MHxvKCksQ1tFKzgwPj4yXT1aLENbRSs4MCs0Pj4yXT16LFc9MHxaSShaXk8sel5XLDYzKSxPPTB8bygpLEJBPTB8Q1tFKzEyOCs4MD4+Ml0sQ0E9MHxDW0UrMTI4KzgwKzQ+PjJdLEw9MHxaSSgoTj0wfHZnKDB8KEs9MHxaSSgobkE9MHx2ZygwfChuQT0wfHZnKDB8bSwwfEwsMHxhQSwwfG5BKSksMHxvKCksMHxCQSwwfENBKSleWCwoYUE9MHxvKCkpXkssMzIpKSwwfChYPTB8bygpKSwwfHgsMHxOKSlebSwoeD0wfG8oKSleTCwyNCksbT0wfG8oKSxiPTB8Q1tFKzEyOCs4OD4+Ml0sSj0wfENbRSsxMjgrODgrND4+Ml0sbT0wfFpJKCh4PTB8dmcoMHwoWD0wfFpJKChhQT0wfHZnKDB8KGFBPTB8dmcoMHxMLDB8bSwwfG5BLDB8YUEpKSwwfG8oKSwwfGIsMHxKKSleSywobkE9MHxvKCkpXlgsMTYpKSwwfChLPTB8bygpKSwwfE4sMHx4KSleTCwoTj0wfG8oKSlebSw2MyksTD0wfG8oKSx0PTB8Q1tFKzEyOCs5Nj4+Ml0sdz0wfENbRSsxMjgrOTYrND4+Ml0sZD0wfFpJKChJPTB8dmcoMHwoVT0wfFpJKChvQT0wfHZnKDB8KG9BPTB8dmcoMHxZLDB8ZCwwfGVBLDB8b0EpKSwwfG8oKSwwfHQsMHx3KSleUywoZUE9MHxvKCkpXlUsMzIpKSwwfChTPTB8bygpKSwwfGYsMHxJKSleWSwoZj0wfG8oKSleZCwyNCksWT0wfG8oKSxlPTB8Q1tFKzEyOCsxMDQ+PjJdLGlBPTB8Q1tFKzEyOCsxMDQrND4+Ml0sWT0wfFpJKChmPTB8dmcoMHwoUz0wfFpJKChlQT0wfHZnKDB8KGVBPTB8dmcoMHxkLDB8WSwwfG9BLDB8ZUEpKSwwfG8oKSwwfGUsMHxpQSkpXlUsKG9BPTB8bygpKV5TLDE2KSksMHwoVT0wfG8oKSksMHxJLDB8ZikpXmQsKEk9MHxvKCkpXlksNjMpLGQ9MHxvKCksdEE9MHxDW0UrMTI4KzExMj4+Ml0sZkE9MHxDW0UrMTI4KzExMis0Pj4yXSxEPTB8WkkoKHM9MHx2ZygwfChIPTB8WkkoKEVBPTB8dmcoMHwoRUE9MHx2ZygwfFFBLDB8RUEsMHxoLDB8RCkpLDB8bygpLDB8dEEsMHxmQSkpXnUsKFFBPTB8bygpKV5ILDMyKSksMHwodT0wfG8oKSksMHxGLDB8cykpXmgsKEY9MHxvKCkpXkQsMjQpLGg9MHxvKCksUD0wfENbRSsxMjgrMTIwPj4yXSxSPTB8Q1tFKzEyOCsxMjArND4+Ml0saD0wfFpJKChGPTB8dmcoMHwodT0wfFpJKChRQT0wfHZnKDB8KFFBPTB8dmcoMHxELDB8aCwwfEVBLDB8UUEpKSwwfG8oKSwwfFAsMHxSKSleSCwoRUE9MHxvKCkpXnUsMTYpKSwwfChIPTB8bygpKSwwfHMsMHxGKSleRCwocz0wfG8oKSleaCw2MyksRD0wfG8oKSxEPTB8WkkoKEk9MHx2ZygwfChLPTB8WkkoKHdBPTB8dmcoMHwod0E9MHx2ZygwfHRBLDB8ZkEsMHx5QSwwfHdBKSksMHxvKCksMHxoLDB8RCkpXlgsKHlBPTB8bygpKV5LLDMyKSksMHwoWD0wfG8oKSksMHxmLDB8SSkpXmgsKGY9MHxvKCkpXkQsMjQpLGg9MHxvKCksaD0wfFpJKChmPTB8dmcoMHwoWD0wfFpJKCh5QT0wfHZnKDB8KHlBPTB8dmcoMHx3QSwwfHlBLDB8QkEsMHxDQSkpLDB8bygpLDB8RCwwfGgpKV5LLCh3QT0wfG8oKSleWCwxNikpLDB8KEs9MHxvKCkpLDB8SSwwfGYpKV5ELChJPTB8bygpKV5oLDYzKSxEPTB8bygpLENbRSszMj4+Ml09aCxDW0UrMzIrND4+Ml09RCxPPTB8WkkoKHM9MHx2ZygwfChVPTB8WkkoU14obkE9MHx2ZygwfChzQT0wfHZnKDB8VywwfE8sMHxhLDB8ckEpKSwwfG8oKSwwfGFBLDB8bkEpKSxVXihhQT0wfG8oKSksMzIpKSwwfChTPTB8bygpKSwwfEYsMHxzKSleVywoRj0wfG8oKSleTywyNCksVz0wfG8oKSxXPTB8WkkoKEY9MHx2ZygwfChTPTB8WkkoKGFBPTB8dmcoMHwoYUE9MHx2ZygwfG5BLDB8YUEsMHxxLDB8VikpLDB8bygpLDB8TywwfFcpKV5VLChuQT0wfG8oKSleUywxNikpLDB8KFU9MHxvKCkpLDB8cywwfEYpKV5PLChzPTB8bygpKV5XLDYzKSxPPTB8bygpLEw9MHxaSSgoej0wfHZnKDB8KEg9MHxaSSh1XihvQT0wfHZnKDB8KHNBPTB8dmcoMHxtLDB8TCwwfGMsMHxjQSkpLDB8bygpLDB8ZUEsMHxvQSkpLEheKGVBPTB8bygpKSwzMikpLDB8KHU9MHxvKCkpLDB8WiwwfHopKV5tLChaPTB8bygpKV5MLDI0KSxtPTB8bygpLG09MHxaSSgoWj0wfHZnKDB8KHU9MHxaSSgoZUE9MHx2ZygwfChlQT0wfHZnKDB8UCwwfFIsMHxvQSwwfGVBKSksMHxvKCksMHxMLDB8bSkpXkgsKG9BPTB8bygpKV51LDE2KSksMHwoSD0wfG8oKSksMHx6LDB8WikpXkwsKHo9MHxvKCkpXm0sNjMpLEw9MHxvKCksZD0wfFpJKChOPTB8dmcoMHwoJD0wfFpJKChFQT0wfHZnKDB8KHNBPTB8dmcoMHxZLDB8ZCwwfGUsMHxpQSkpLDB8bygpLDB8UUEsMHxFQSkpXkFBLChRQT0wfG8oKSleJCwzMikpLDB8KEFBPTB8bygpKSwwfHgsMHxOKSleWSwoeD0wfG8oKSleZCwyNCksWT0wfG8oKSxZPTB8WkkoKHg9MHx2ZygwfChBQT0wfFpJKChRQT0wfHZnKDB8KFFBPTB8dmcoMHxFQSwwfFFBLDB8XywwfGwpKSwwfG8oKSwwfGQsMHxZKSleJCwoRUE9MHxvKCkpXkFBLDE2KSksMHwoJD0wfG8oKSksMHxOLDB8eCkpXmQsKE49MHxvKCkpXlksNjMpLGQ9MHxvKCksTz0wfFpJKCh6PTB8dmcoMHwoJD0wfFpJKEFBXih3QT0wfHZnKDB8KHdBPTB8dmcoMHx5QSwwfHdBLDB8SUEsMHxnQSkpLDB8bygpLDB8VywwfE8pKSwkXih5QT0wfG8oKSksMzIpKSwwfChBQT0wfG8oKSksMHxaLDB8eikpXlcsKFo9MHxvKCkpXk8sMjQpLFc9MHxvKCksQUE9MHxaSSgoeUE9MHx2ZygwfCh5QT0wfHZnKDB8d0EsMHx5QSwwfHQsMHx3KSksMHxvKCksMHxPLDB8VykpXiQsKHdBPTB8bygpKV5BQSwxNiksJD0wfG8oKSxDW0UrMTIwPj4yXT1BQSxDW0UrMTIwKzQ+PjJdPSQsVz0wfFpJKChaPTB8dmcoMHxBQSwwfCQsMHx6LDB8WikpXk8sKHo9MHxvKCkpXlcsNjMpLE89MHxvKCksTD0wfFpJKChOPTB8dmcoMHwoSz0wfFpJKChuQT0wfHZnKDB8KG5BPTB8dmcoMHxhQSwwfG5BLDB8aiwwfFQpKSwwfG8oKSwwfG0sMHxMKSleWCwoYUE9MHxvKCkpXkssMzIpKSwwfChYPTB8bygpKSwwfHgsMHxOKSlebSwoeD0wfG8oKSleTCwyNCksbT0wfG8oKSxtPTB8WkkoKHg9MHx2ZygwfChYPTB8WkkoKGFBPTB8dmcoMHwoYUE9MHx2ZygwfG5BLDB8YUEsMHxyLDB8bikpLDB8bygpLDB8TCwwfG0pKV5LLChuQT0wfG8oKSleWCwxNikpLDB8KEs9MHxvKCkpLDB8TiwwfHgpKV5MLChOPTB8bygpKV5tLDYzKSxMPTB8bygpLGQ9MHxaSSgoST0wfHZnKDB8KFU9MHxaSSgob0E9MHx2ZygwfChvQT0wfHZnKDB8ZUEsMHxvQSwwfGIsMHxKKSksMHxvKCksMHxZLDB8ZCkpXlMsKGVBPTB8bygpKV5VLDMyKSksMHwoUz0wfG8oKSksMHxmLDB8SSkpXlksKGY9MHxvKCkpXmQsMjQpLFk9MHxvKCksWT0wfFpJKChmPTB8dmcoMHwoUz0wfFpJKChlQT0wfHZnKDB8KGVBPTB8dmcoMHxvQSwwfGVBLDB8TSwwfHYpKSwwfG8oKSwwfGQsMHxZKSleVSwob0E9MHxvKCkpXlMsMTYpKSwwfChVPTB8bygpKSwwfEksMHxmKSleZCwoST0wfG8oKSleWSw2MyksZD0wfG8oKSxEPTB8WkkoKHM9MHx2ZygwfChIPTB8WkkoKEVBPTB8dmcoMHwoc0E9MHx2ZygwfGgsMHxELDB8aSwwfEcpKSwwfG8oKSwwfFFBLDB8RUEpKV51LChRQT0wfG8oKSleSCwzMikpLDB8KHU9MHxvKCkpLDB8RiwwfHMpKV5oLChGPTB8bygpKV5ELDI0KSxoPTB8bygpLGg9MHxaSSgoRj0wfHZnKDB8KHU9MHxaSSgoUUE9MHx2ZygwfChRQT0wfHZnKDB8RUEsMHxRQSwwfHAsMHxrKSksMHxvKCksMHxELDB8aCkpXkgsKEVBPTB8bygpKV51LDE2KSksMHwoSD0wfG8oKSksMHxzLDB8RikpXkQsKHM9MHxvKCkpXmgsNjMpLEQ9MHxvKCksRD0wfFpJKChJPTB8dmcoMHwoSz0wfFpJKCh3QT0wfHZnKDB8KHdBPTB8dmcoMHx5QSwwfHdBLDB8YiwwfEopKSwwfG8oKSwwfGgsMHxEKSleWCwoeUE9MHxvKCkpXkssMzIpKSwwfChYPTB8bygpKSwwfGYsMHxJKSleaCwoZj0wfG8oKSleRCwyNCksaD0wfG8oKSxoPTB8WkkoKGY9MHx2ZygwfChYPTB8WkkoKHlBPTB8dmcoMHwoeUE9MHx2ZygwfHdBLDB8eUEsMHxxLDB8VikpLDB8bygpLDB8RCwwfGgpKV5LLCh3QT0wfG8oKSleWCwxNikpLDB8KEs9MHxvKCkpLDB8SSwwfGYpKV5ELChJPTB8bygpKV5oLDYzKSxEPTB8bygpLENbRSszMj4+Ml09aCxDW0UrMzIrND4+Ml09RCxPPTB8WkkoKHM9MHx2ZygwfChVPTB8WkkoU14obkE9MHx2ZygwfChzQT0wfHZnKDB8VywwfE8sMHx0LDB8dykpLDB8bygpLDB8YUEsMHxuQSkpLFVeKGFBPTB8bygpKSwzMikpLDB8KFM9MHxvKCkpLDB8RiwwfHMpKV5XLChGPTB8bygpKV5PLDI0KSxXPTB8bygpLFc9MHxaSSgoRj0wfHZnKDB8KFM9MHxaSSgoYUE9MHx2ZygwfChhQT0wfHZnKDB8bkEsMHxhQSwwfGosMHxUKSksMHxvKCksMHxPLDB8VykpXlUsKG5BPTB8bygpKV5TLDE2KSksMHwoVT0wfG8oKSksMHxzLDB8RikpXk8sKHM9MHxvKCkpXlcsNjMpLE89MHxvKCksTD0wfFpJKCh6PTB8dmcoMHwoSD0wfFpJKHVeKG9BPTB8dmcoMHwoc0E9MHx2ZygwfG0sMHxMLDB8aSwwfEcpKSwwfG8oKSwwfGVBLDB8b0EpKSxIXihlQT0wfG8oKSksMzIpKSwwfCh1PTB8bygpKSwwfFosMHx6KSlebSwoWj0wfG8oKSleTCwyNCksbT0wfG8oKSxtPTB8WkkoKFo9MHx2ZygwfCh1PTB8WkkoKGVBPTB8dmcoMHwoZUE9MHx2ZygwfG9BLDB8ZUEsMHxyLDB8bikpLDB8bygpLDB8TCwwfG0pKV5ILChvQT0wfG8oKSledSwxNikpLDB8KEg9MHxvKCkpLDB8eiwwfFopKV5MLCh6PTB8bygpKV5tLDYzKSxMPTB8bygpLGQ9MHxaSSgoTj0wfHZnKDB8KCQ9MHxaSSgoRUE9MHx2ZygwfChzQT0wfHZnKDB8WSwwfGQsMHxQLDB8UikpLDB8bygpLDB8UUEsMHxFQSkpXkFBLChRQT0wfG8oKSleJCwzMikpLDB8KEFBPTB8bygpKSwwfHgsMHxOKSleWSwoeD0wfG8oKSleZCwyNCksWT0wfG8oKSxZPTB8WkkoKHg9MHx2ZygwfChBQT0wfFpJKChRQT0wfHZnKDB8KFFBPTB8dmcoMHxFQSwwfFFBLDB8ZSwwfGlBKSksMHxvKCksMHxkLDB8WSkpXiQsKEVBPTB8bygpKV5BQSwxNikpLDB8KCQ9MHxvKCkpLDB8TiwwfHgpKV5kLChOPTB8bygpKV5ZLDYzKSxkPTB8bygpLE89MHxaSSgoej0wfHZnKDB8KCQ9MHxaSShBQV4od0E9MHx2ZygwfCh3QT0wfHZnKDB8eUEsMHx3QSwwfEJBLDB8Q0EpKSwwfG8oKSwwfFcsMHxPKSksJF4oeUE9MHxvKCkpLDMyKSksMHwoQUE9MHxvKCkpLDB8WiwwfHopKV5XLChaPTB8bygpKV5PLDI0KSxXPTB8bygpLEFBPTB8WkkoKHlBPTB8dmcoMHwoeUE9MHx2ZygwfHdBLDB8eUEsMHx0QSwwfGZBKSksMHxvKCksMHxPLDB8VykpXiQsKHdBPTB8bygpKV5BQSwxNiksJD0wfG8oKSxDW0UrMTIwPj4yXT1BQSxDW0UrMTIwKzQ+PjJdPSQsVz0wfFpJKChaPTB8dmcoMHxBQSwwfCQsMHx6LDB8WikpXk8sKHo9MHxvKCkpXlcsNjMpLE89MHxvKCksTD0wfFpJKChOPTB8dmcoMHwoSz0wfFpJKChuQT0wfHZnKDB8KG5BPTB8dmcoMHxhQSwwfG5BLDB8cCwwfGspKSwwfG8oKSwwfG0sMHxMKSleWCwoYUE9MHxvKCkpXkssMzIpKSwwfChYPTB8bygpKSwwfHgsMHxOKSlebSwoeD0wfG8oKSleTCwyNCksbT0wfG8oKSxtPTB8WkkoKHg9MHx2ZygwfChYPTB8WkkoKGFBPTB8dmcoMHwoYUE9MHx2ZygwfG5BLDB8YUEsMHxfLDB8bCkpLDB8bygpLDB8TCwwfG0pKV5LLChuQT0wfG8oKSleWCwxNikpLDB8KEs9MHxvKCkpLDB8TiwwfHgpKV5MLChOPTB8bygpKV5tLDYzKSxMPTB8bygpLGQ9MHxaSSgoST0wfHZnKDB8KFU9MHxaSSgob0E9MHx2ZygwfChvQT0wfHZnKDB8ZUEsMHxvQSwwfE0sMHx2KSksMHxvKCksMHxZLDB8ZCkpXlMsKGVBPTB8bygpKV5VLDMyKSksMHwoUz0wfG8oKSksMHxmLDB8SSkpXlksKGY9MHxvKCkpXmQsMjQpLFk9MHxvKCksWT0wfFpJKChmPTB8dmcoMHwoUz0wfFpJKChlQT0wfHZnKDB8KGVBPTB8dmcoMHxvQSwwfGVBLDB8SUEsMHxnQSkpLDB8bygpLDB8ZCwwfFkpKV5VLChvQT0wfG8oKSleUywxNikpLDB8KFU9MHxvKCkpLDB8SSwwfGYpKV5kLChJPTB8bygpKV5ZLDYzKSxkPTB8bygpLEQ9MHxaSSgocz0wfHZnKDB8KEg9MHxaSSgoRUE9MHx2ZygwfChzQT0wfHZnKDB8aCwwfEQsMHxjLDB8Y0EpKSwwfG8oKSwwfFFBLDB8RUEpKV51LChRQT0wfG8oKSleSCwzMikpLDB8KHU9MHxvKCkpLDB8RiwwfHMpKV5oLChGPTB8bygpKV5ELDI0KSxoPTB8bygpLGg9MHxaSSgoRj0wfHZnKDB8KHU9MHxaSSgoUUE9MHx2ZygwfChRQT0wfHZnKDB8RUEsMHxRQSwwfGEsMHxyQSkpLDB8bygpLDB8RCwwfGgpKV5ILChFQT0wfG8oKSledSwxNikpLDB8KEg9MHxvKCkpLDB8cywwfEYpKV5ELChzPTB8bygpKV5oLDYzKSxEPTB8bygpLEQ9MHxaSSgoST0wfHZnKDB8KEs9MHxaSSgod0E9MHx2ZygwfCh3QT0wfHZnKDB8eUEsMHx3QSwwfE0sMHx2KSksMHxvKCksMHxoLDB8RCkpXlgsKHlBPTB8bygpKV5LLDMyKSksMHwoWD0wfG8oKSksMHxmLDB8SSkpXmgsKGY9MHxvKCkpXkQsMjQpLGg9MHxvKCksaD0wfFpJKChmPTB8dmcoMHwoWD0wfFpJKCh5QT0wfHZnKDB8KHlBPTB8dmcoMHx3QSwwfHlBLDB8YywwfGNBKSksMHxvKCksMHxELDB8aCkpXkssKHdBPTB8bygpKV5YLDE2KSksMHwoSz0wfG8oKSksMHxJLDB8ZikpXkQsKEk9MHxvKCkpXmgsNjMpLEQ9MHxvKCksQ1tFKzMyPj4yXT1oLENbRSszMis0Pj4yXT1ELE89MHxaSSgocz0wfHZnKDB8KFU9MHxaSShTXihuQT0wfHZnKDB8KHNBPTB8dmcoMHxXLDB8TywwfHAsMHxrKSksMHxvKCksMHxhQSwwfG5BKSksVV4oYUE9MHxvKCkpLDMyKSksMHwoUz0wfG8oKSksMHxGLDB8cykpXlcsKEY9MHxvKCkpXk8sMjQpLFc9MHxvKCksVz0wfFpJKChGPTB8dmcoMHwoUz0wfFpJKChhQT0wfHZnKDB8KGFBPTB8dmcoMHxuQSwwfGFBLDB8SUEsMHxnQSkpLDB8bygpLDB8TywwfFcpKV5VLChuQT0wfG8oKSleUywxNikpLDB8KFU9MHxvKCkpLDB8cywwfEYpKV5PLChzPTB8bygpKV5XLDYzKSxPPTB8bygpLEw9MHxaSSgoej0wfHZnKDB8KEg9MHxaSSh1XihvQT0wfHZnKDB8KHNBPTB8dmcoMHxtLDB8TCwwfGUsMHxpQSkpLDB8bygpLDB8ZUEsMHxvQSkpLEheKGVBPTB8bygpKSwzMikpLDB8KHU9MHxvKCkpLDB8WiwwfHopKV5tLChaPTB8bygpKV5MLDI0KSxtPTB8bygpLG09MHxaSSgoWj0wfHZnKDB8KHU9MHxaSSgoZUE9MHx2ZygwfChlQT0wfHZnKDB8b0EsMHxlQSwwfHQsMHx3KSksMHxvKCksMHxMLDB8bSkpXkgsKG9BPTB8bygpKV51LDE2KSksMHwoSD0wfG8oKSksMHx6LDB8WikpXkwsKHo9MHxvKCkpXm0sNjMpLEw9MHxvKCksZD0wfFpJKChOPTB8dmcoMHwoJD0wfFpJKChFQT0wfHZnKDB8KHNBPTB8dmcoMHxZLDB8ZCwwfGIsMHxKKSksMHxvKCksMHxRQSwwfEVBKSleQUEsKFFBPTB8bygpKV4kLDMyKSksMHwoQUE9MHxvKCkpLDB8eCwwfE4pKV5ZLCh4PTB8bygpKV5kLDI0KSxZPTB8bygpLFk9MHxaSSgoeD0wfHZnKDB8KEFBPTB8WkkoKFFBPTB8dmcoMHwoUUE9MHx2ZygwfEVBLDB8UUEsMHx0QSwwfGZBKSksMHxvKCksMHxkLDB8WSkpXiQsKEVBPTB8bygpKV5BQSwxNikpLDB8KCQ9MHxvKCkpLDB8TiwwfHgpKV5kLChOPTB8bygpKV5ZLDYzKSxkPTB8bygpLE89MHxaSSgoej0wfHZnKDB8KCQ9MHxaSShBQV4od0E9MHx2ZygwfCh3QT0wfHZnKDB8eUEsMHx3QSwwfHIsMHxuKSksMHxvKCksMHxXLDB8TykpLCReKHlBPTB8bygpKSwzMikpLDB8KEFBPTB8bygpKSwwfFosMHx6KSleVywoWj0wfG8oKSleTywyNCksVz0wfG8oKSxBQT0wfFpJKCh5QT0wfHZnKDB8KHlBPTB8dmcoMHx3QSwwfHlBLDB8XywwfGwpKSwwfG8oKSwwfE8sMHxXKSleJCwod0E9MHxvKCkpXkFBLDE2KSwkPTB8bygpLENbRSsxMjA+PjJdPUFBLENbRSsxMjArND4+Ml09JCxXPTB8WkkoKFo9MHx2ZygwfEFBLDB8JCwwfHosMHxaKSleTywoej0wfG8oKSleVyw2MyksTz0wfG8oKSxMPTB8WkkoKE49MHx2ZygwfChLPTB8WkkoKG5BPTB8dmcoMHwobkE9MHx2ZygwfGFBLDB8bkEsMHxpLDB8RykpLDB8bygpLDB8bSwwfEwpKV5YLChhQT0wfG8oKSleSywzMikpLDB8KFg9MHxvKCkpLDB8eCwwfE4pKV5tLCh4PTB8bygpKV5MLDI0KSxtPTB8bygpLG09MHxaSSgoeD0wfHZnKDB8KFg9MHxaSSgoYUE9MHx2ZygwfChhQT0wfHZnKDB8bkEsMHxhQSwwfEJBLDB8Q0EpKSwwfG8oKSwwfEwsMHxtKSleSywobkE9MHxvKCkpXlgsMTYpKSwwfChLPTB8bygpKSwwfE4sMHx4KSleTCwoTj0wfG8oKSlebSw2MyksTD0wfG8oKSxkPTB8WkkoKEk9MHx2ZygwfChVPTB8WkkoKG9BPTB8dmcoMHwob0E9MHx2ZygwfGVBLDB8b0EsMHxhLDB8ckEpKSwwfG8oKSwwfFksMHxkKSleUywoZUE9MHxvKCkpXlUsMzIpKSwwfChTPTB8bygpKSwwfGYsMHxJKSleWSwoZj0wfG8oKSleZCwyNCksWT0wfG8oKSxZPTB8WkkoKGY9MHx2ZygwfChTPTB8WkkoKGVBPTB8dmcoMHwoZUE9MHx2ZygwfG9BLDB8ZUEsMHxqLDB8VCkpLDB8bygpLDB8ZCwwfFkpKV5VLChvQT0wfG8oKSleUywxNikpLDB8KFU9MHxvKCkpLDB8SSwwfGYpKV5kLChJPTB8bygpKV5ZLDYzKSxkPTB8bygpLEQ9MHxaSSgocz0wfHZnKDB8KEg9MHxaSSgoRUE9MHx2ZygwfChzQT0wfHZnKDB8aCwwfEQsMHxQLDB8UikpLDB8bygpLDB8UUEsMHxFQSkpXnUsKFFBPTB8bygpKV5ILDMyKSksMHwodT0wfG8oKSksMHxGLDB8cykpXmgsKEY9MHxvKCkpXkQsMjQpLGg9MHxvKCksaD0wfFpJKChGPTB8dmcoMHwodT0wfFpJKChRQT0wfHZnKDB8KFFBPTB8dmcoMHxFQSwwfFFBLDB8cSwwfFYpKSwwfG8oKSwwfEQsMHxoKSleSCwoRUE9MHxvKCkpXnUsMTYpKSwwfChIPTB8bygpKSwwfHMsMHxGKSleRCwocz0wfG8oKSleaCw2MyksRD0wfG8oKSxEPTB8WkkoKEk9MHx2ZygwfChLPTB8WkkoKHdBPTB8dmcoMHwod0E9MHx2ZygwfHlBLDB8d0EsMHxjLDB8Y0EpKSwwfG8oKSwwfGgsMHxEKSleWCwoeUE9MHxvKCkpXkssMzIpKSwwfChYPTB8bygpKSwwfGYsMHxJKSleaCwoZj0wfG8oKSleRCwyNCksaD0wfG8oKSxoPTB8WkkoKGY9MHx2ZygwfChYPTB8WkkoKHlBPTB8dmcoMHwoeUE9MHx2ZygwfHdBLDB8eUEsMHxqLDB8VCkpLDB8bygpLDB8RCwwfGgpKV5LLCh3QT0wfG8oKSleWCwxNikpLDB8KEs9MHxvKCkpLDB8SSwwfGYpKV5ELChJPTB8bygpKV5oLDYzKSxEPTB8bygpLENbRSszMj4+Ml09aCxDW0UrMzIrND4+Ml09RCxPPTB8WkkoKHM9MHx2ZygwfChVPTB8WkkoU14obkE9MHx2ZygwfChzQT0wfHZnKDB8VywwfE8sMHxpLDB8RykpLDB8bygpLDB8YUEsMHxuQSkpLFVeKGFBPTB8bygpKSwzMikpLDB8KFM9MHxvKCkpLDB8RiwwfHMpKV5XLChGPTB8bygpKV5PLDI0KSxXPTB8bygpLFc9MHxaSSgoRj0wfHZnKDB8KFM9MHxaSSgoYUE9MHx2ZygwfChhQT0wfHZnKDB8bkEsMHxhQSwwfE0sMHx2KSksMHxvKCksMHxPLDB8VykpXlUsKG5BPTB8bygpKV5TLDE2KSksMHwoVT0wfG8oKSksMHxzLDB8RikpXk8sKHM9MHxvKCkpXlcsNjMpLE89MHxvKCksTD0wfFpJKCh6PTB8dmcoMHwoSD0wfFpJKHVeKG9BPTB8dmcoMHwoc0E9MHx2ZygwfG0sMHxMLDB8ciwwfG4pKSwwfG8oKSwwfGVBLDB8b0EpKSxIXihlQT0wfG8oKSksMzIpKSwwfCh1PTB8bygpKSwwfFosMHx6KSlebSwoWj0wfG8oKSleTCwyNCksbT0wfG8oKSxtPTB8WkkoKFo9MHx2ZygwfCh1PTB8WkkoKGVBPTB8dmcoMHwoZUE9MHx2ZygwfG9BLDB8ZUEsMHxhLDB8ckEpKSwwfG8oKSwwfEwsMHxtKSleSCwob0E9MHxvKCkpXnUsMTYpKSwwfChIPTB8bygpKSwwfHosMHxaKSleTCwoej0wfG8oKSlebSw2MyksTD0wfG8oKSxkPTB8WkkoKE49MHx2ZygwfCgkPTB8WkkoKEVBPTB8dmcoMHwoc0E9MHx2ZygwfFksMHxkLDB8QkEsMHxDQSkpLDB8bygpLDB8UUEsMHxFQSkpXkFBLChRQT0wfG8oKSleJCwzMikpLDB8KEFBPTB8bygpKSwwfHgsMHxOKSleWSwoeD0wfG8oKSleZCwyNCksWT0wfG8oKSxZPTB8WkkoKHg9MHx2ZygwfChBQT0wfFpJKChRQT0wfHZnKDB8KFFBPTB8dmcoMHxFQSwwfFFBLDB8UCwwfFIpKSwwfG8oKSwwfGQsMHxZKSleJCwoRUE9MHxvKCkpXkFBLDE2KSksMHwoJD0wfG8oKSksMHxOLDB8eCkpXmQsKE49MHxvKCkpXlksNjMpLGQ9MHxvKCksTz0wfFpJKCh6PTB8dmcoMHwoJD0wfFpJKEFBXih3QT0wfHZnKDB8KHdBPTB8dmcoMHx5QSwwfHdBLDB8dEEsMHxmQSkpLDB8bygpLDB8VywwfE8pKSwkXih5QT0wfG8oKSksMzIpKSwwfChBQT0wfG8oKSksMHxaLDB8eikpXlcsKFo9MHxvKCkpXk8sMjQpLFc9MHxvKCksQUE9MHxaSSgoeUE9MHx2ZygwfCh5QT0wfHZnKDB8d0EsMHx5QSwwfElBLDB8Z0EpKSwwfG8oKSwwfE8sMHxXKSleJCwod0E9MHxvKCkpXkFBLDE2KSwkPTB8bygpLENbRSsxMjA+PjJdPUFBLENbRSsxMjArND4+Ml09JCxXPTB8WkkoKFo9MHx2ZygwfEFBLDB8JCwwfHosMHxaKSleTywoej0wfG8oKSleVyw2MyksTz0wfG8oKSxMPTB8WkkoKE49MHx2ZygwfChLPTB8WkkoKG5BPTB8dmcoMHwobkE9MHx2ZygwfGFBLDB8bkEsMHxiLDB8SikpLDB8bygpLDB8bSwwfEwpKV5YLChhQT0wfG8oKSleSywzMikpLDB8KFg9MHxvKCkpLDB8eCwwfE4pKV5tLCh4PTB8bygpKV5MLDI0KSxtPTB8bygpLG09MHxaSSgoeD0wfHZnKDB8KFg9MHxaSSgoYUE9MHx2ZygwfChhQT0wfHZnKDB8bkEsMHxhQSwwfHQsMHx3KSksMHxvKCksMHxMLDB8bSkpXkssKG5BPTB8bygpKV5YLDE2KSksMHwoSz0wfG8oKSksMHxOLDB8eCkpXkwsKE49MHxvKCkpXm0sNjMpLEw9MHxvKCksZD0wfFpJKChJPTB8dmcoMHwoVT0wfFpJKChvQT0wfHZnKDB8KG9BPTB8dmcoMHxlQSwwfG9BLDB8XywwfGwpKSwwfG8oKSwwfFksMHxkKSleUywoZUE9MHxvKCkpXlUsMzIpKSwwfChTPTB8bygpKSwwfGYsMHxJKSleWSwoZj0wfG8oKSleZCwyNCksWT0wfG8oKSxZPTB8WkkoKGY9MHx2ZygwfChTPTB8WkkoKGVBPTB8dmcoMHwoZUE9MHx2ZygwfG9BLDB8ZUEsMHxxLDB8VikpLDB8bygpLDB8ZCwwfFkpKV5VLChvQT0wfG8oKSleUywxNikpLDB8KFU9MHxvKCkpLDB8SSwwfGYpKV5kLChJPTB8bygpKV5ZLDYzKSxkPTB8bygpLEQ9MHxaSSgocz0wfHZnKDB8KEg9MHxaSSgoRUE9MHx2ZygwfChzQT0wfHZnKDB8aCwwfEQsMHxwLDB8aykpLDB8bygpLDB8UUEsMHxFQSkpXnUsKFFBPTB8bygpKV5ILDMyKSksMHwodT0wfG8oKSksMHxGLDB8cykpXmgsKEY9MHxvKCkpXkQsMjQpLGg9MHxvKCksaD0wfFpJKChGPTB8dmcoMHwodT0wfFpJKChRQT0wfHZnKDB8KFFBPTB8dmcoMHxFQSwwfFFBLDB8ZSwwfGlBKSksMHxvKCksMHxELDB8aCkpXkgsKEVBPTB8bygpKV51LDE2KSksMHwoSD0wfG8oKSksMHxzLDB8RikpXkQsKHM9MHxvKCkpXmgsNjMpLEQ9MHxvKCksRD0wfFpJKChJPTB8dmcoMHwoSz0wfFpJKCh3QT0wfHZnKDB8KHdBPTB8dmcoMHx5QSwwfHdBLDB8ciwwfG4pKSwwfG8oKSwwfGgsMHxEKSleWCwoeUE9MHxvKCkpXkssMzIpKSwwfChYPTB8bygpKSwwfGYsMHxJKSleaCwoZj0wfG8oKSleRCwyNCksaD0wfG8oKSxoPTB8WkkoKGY9MHx2ZygwfChYPTB8WkkoKHlBPTB8dmcoMHwoeUE9MHx2ZygwfHdBLDB8eUEsMHx0LDB8dykpLDB8bygpLDB8RCwwfGgpKV5LLCh3QT0wfG8oKSleWCwxNikpLDB8KEs9MHxvKCkpLDB8SSwwfGYpKV5ELChJPTB8bygpKV5oLDYzKSxEPTB8bygpLENbRSszMj4+Ml09aCxDW0UrMzIrND4+Ml09RCxPPTB8WkkoKHM9MHx2ZygwfChVPTB8WkkoU14obkE9MHx2ZygwfChzQT0wfHZnKDB8VywwfE8sMHxfLDB8bCkpLDB8bygpLDB8YUEsMHxuQSkpLFVeKGFBPTB8bygpKSwzMikpLDB8KFM9MHxvKCkpLDB8RiwwfHMpKV5XLChGPTB8bygpKV5PLDI0KSxXPTB8bygpLFc9MHxaSSgoRj0wfHZnKDB8KFM9MHxaSSgoYUE9MHx2ZygwfChhQT0wfHZnKDB8bkEsMHxhQSwwfEJBLDB8Q0EpKSwwfG8oKSwwfE8sMHxXKSleVSwobkE9MHxvKCkpXlMsMTYpKSwwfChVPTB8bygpKSwwfHMsMHxGKSleTywocz0wfG8oKSleVyw2MyksTz0wfG8oKSxMPTB8WkkoKHo9MHx2ZygwfChIPTB8WkkodV4ob0E9MHx2ZygwfChzQT0wfHZnKDB8bSwwfEwsMHxqLDB8VCkpLDB8bygpLDB8ZUEsMHxvQSkpLEheKGVBPTB8bygpKSwzMikpLDB8KHU9MHxvKCkpLDB8WiwwfHopKV5tLChaPTB8bygpKV5MLDI0KSxtPTB8bygpLG09MHxaSSgoWj0wfHZnKDB8KHU9MHxaSSgoZUE9MHx2ZygwfChlQT0wfHZnKDB8b0EsMHxlQSwwfGIsMHxKKSksMHxvKCksMHxMLDB8bSkpXkgsKG9BPTB8bygpKV51LDE2KSksMHwoSD0wfG8oKSksMHx6LDB8WikpXkwsKHo9MHxvKCkpXm0sNjMpLEw9MHxvKCksZD0wfFpJKChOPTB8dmcoMHwoJD0wfFpJKChFQT0wfHZnKDB8KHNBPTB8dmcoMHxZLDB8ZCwwfHEsMHxWKSksMHxvKCksMHxRQSwwfEVBKSleQUEsKFFBPTB8bygpKV4kLDMyKSksMHwoQUE9MHxvKCkpLDB8eCwwfE4pKV5ZLCh4PTB8bygpKV5kLDI0KSxZPTB8bygpLFk9MHxaSSgoeD0wfHZnKDB8KEFBPTB8WkkoKFFBPTB8dmcoMHwoUUE9MHx2ZygwfEVBLDB8UUEsMHxwLDB8aykpLDB8bygpLDB8ZCwwfFkpKV4kLChFQT0wfG8oKSleQUEsMTYpKSwwfCgkPTB8bygpKSwwfE4sMHx4KSleZCwoTj0wfG8oKSleWSw2MyksZD0wfG8oKSxPPTB8WkkoKHo9MHx2ZygwfCgkPTB8WkkoQUFeKHdBPTB8dmcoMHwod0E9MHx2ZygwfHlBLDB8d0EsMHxhLDB8ckEpKSwwfG8oKSwwfFcsMHxPKSksJF4oeUE9MHxvKCkpLDMyKSksMHwoQUE9MHxvKCkpLDB8WiwwfHopKV5XLChaPTB8bygpKV5PLDI0KSxXPTB8bygpLEFBPTB8WkkoKHlBPTB8dmcoMHwoeUE9MHx2ZygwfHdBLDB8eUEsMHxlLDB8aUEpKSwwfG8oKSwwfE8sMHxXKSleJCwod0E9MHxvKCkpXkFBLDE2KSwkPTB8bygpLENbRSsxMjA+PjJdPUFBLENbRSsxMjArND4+Ml09JCxXPTB8WkkoKFo9MHx2ZygwfEFBLDB8JCwwfHosMHxaKSleTywoej0wfG8oKSleVyw2MyksTz0wfG8oKSxMPTB8WkkoKE49MHx2ZygwfChLPTB8WkkoKG5BPTB8dmcoMHwobkE9MHx2ZygwfGFBLDB8bkEsMHxNLDB8dikpLDB8bygpLDB8bSwwfEwpKV5YLChhQT0wfG8oKSleSywzMikpLDB8KFg9MHxvKCkpLDB8eCwwfE4pKV5tLCh4PTB8bygpKV5MLDI0KSxtPTB8bygpLG09MHxaSSgoeD0wfHZnKDB8KFg9MHxaSSgoYUE9MHx2ZygwfChhQT0wfHZnKDB8bkEsMHxhQSwwfGksMHxHKSksMHxvKCksMHxMLDB8bSkpXkssKG5BPTB8bygpKV5YLDE2KSksMHwoSz0wfG8oKSksMHxOLDB8eCkpXkwsKE49MHxvKCkpXm0sNjMpLEw9MHxvKCksZD0wfFpJKChJPTB8dmcoMHwoVT0wfFpJKChvQT0wfHZnKDB8KG9BPTB8dmcoMHxlQSwwfG9BLDB8UCwwfFIpKSwwfG8oKSwwfFksMHxkKSleUywoZUE9MHxvKCkpXlUsMzIpKSwwfChTPTB8bygpKSwwfGYsMHxJKSleWSwoZj0wfG8oKSleZCwyNCksWT0wfG8oKSxZPTB8WkkoKGY9MHx2ZygwfChTPTB8WkkoKGVBPTB8dmcoMHwoZUE9MHx2ZygwfG9BLDB8ZUEsMHx0QSwwfGZBKSksMHxvKCksMHxkLDB8WSkpXlUsKG9BPTB8bygpKV5TLDE2KSksMHwoVT0wfG8oKSksMHxJLDB8ZikpXmQsKEk9MHxvKCkpXlksNjMpLGQ9MHxvKCksRD0wfFpJKChzPTB8dmcoMHwoSD0wfFpJKChFQT0wfHZnKDB8KHNBPTB8dmcoMHxoLDB8RCwwfElBLDB8Z0EpKSwwfG8oKSwwfFFBLDB8RUEpKV51LChRQT0wfG8oKSleSCwzMikpLDB8KHU9MHxvKCkpLDB8RiwwfHMpKV5oLChGPTB8bygpKV5ELDI0KSxoPTB8bygpLGg9MHxaSSgoRj0wfHZnKDB8KHU9MHxaSSgoUUE9MHx2ZygwfChRQT0wfHZnKDB8RUEsMHxRQSwwfGMsMHxjQSkpLDB8bygpLDB8RCwwfGgpKV5ILChFQT0wfG8oKSledSwxNikpLDB8KEg9MHxvKCkpLDB8cywwfEYpKV5ELChzPTB8bygpKV5oLDYzKSxEPTB8bygpLEQ9MHxaSSgoST0wfHZnKDB8KEs9MHxaSSgod0E9MHx2ZygwfCh3QT0wfHZnKDB8eUEsMHx3QSwwfHQsMHx3KSksMHxvKCksMHxoLDB8RCkpXlgsKHlBPTB8bygpKV5LLDMyKSksMHwoWD0wfG8oKSksMHxmLDB8SSkpXmgsKGY9MHxvKCkpXkQsMjQpLGg9MHxvKCksaD0wfFpJKChmPTB8dmcoMHwoWD0wfFpJKCh5QT0wfHZnKDB8KHlBPTB8dmcoMHx3QSwwfHlBLDB8aSwwfEcpKSwwfG8oKSwwfEQsMHxoKSleSywod0E9MHxvKCkpXlgsMTYpKSwwfChLPTB8bygpKSwwfEksMHxmKSleRCwoST0wfG8oKSleaCw2MyksRD0wfG8oKSxDW0UrMzI+PjJdPWgsQ1tFKzMyKzQ+PjJdPUQsTz0wfFpJKChzPTB8dmcoMHwoVT0wfFpJKFNeKG5BPTB8dmcoMHwoc0E9MHx2ZygwfFcsMHxPLDB8SUEsMHxnQSkpLDB8bygpLDB8YUEsMHxuQSkpLFVeKGFBPTB8bygpKSwzMikpLDB8KFM9MHxvKCkpLDB8RiwwfHMpKV5XLChGPTB8bygpKV5PLDI0KSxXPTB8bygpLFc9MHxaSSgoRj0wfHZnKDB8KFM9MHxaSSgoYUE9MHx2ZygwfChhQT0wfHZnKDB8bkEsMHxhQSwwfFAsMHxSKSksMHxvKCksMHxPLDB8VykpXlUsKG5BPTB8bygpKV5TLDE2KSksMHwoVT0wfG8oKSksMHxzLDB8RikpXk8sKHM9MHxvKCkpXlcsNjMpLE89MHxvKCksTD0wfFpJKCh6PTB8dmcoMHwoSD0wfFpJKHVeKG9BPTB8dmcoMHwoc0E9MHx2ZygwfG0sMHxMLDB8dEEsMHxmQSkpLDB8bygpLDB8ZUEsMHxvQSkpLEheKGVBPTB8bygpKSwzMikpLDB8KHU9MHxvKCkpLDB8WiwwfHopKV5tLChaPTB8bygpKV5MLDI0KSxtPTB8bygpLG09MHxaSSgoWj0wfHZnKDB8KHU9MHxaSSgoZUE9MHx2ZygwfChlQT0wfHZnKDB8b0EsMHxlQSwwfGUsMHxpQSkpLDB8bygpLDB8TCwwfG0pKV5ILChvQT0wfG8oKSledSwxNikpLDB8KEg9MHxvKCkpLDB8eiwwfFopKV5MLCh6PTB8bygpKV5tLDYzKSxMPTB8bygpLGQ9MHxaSSgoTj0wfHZnKDB8KCQ9MHxaSSgoRUE9MHx2ZygwfChzQT0wfHZnKDB8WSwwfGQsMHxhLDB8ckEpKSwwfG8oKSwwfFFBLDB8RUEpKV5BQSwoUUE9MHxvKCkpXiQsMzIpKSwwfChBQT0wfG8oKSksMHx4LDB8TikpXlksKHg9MHxvKCkpXmQsMjQpLFk9MHxvKCksWT0wfFpJKCh4PTB8dmcoMHwoQUE9MHxaSSgoUUE9MHx2ZygwfChRQT0wfHZnKDB8RUEsMHxRQSwwfEJBLDB8Q0EpKSwwfG8oKSwwfGQsMHxZKSleJCwoRUE9MHxvKCkpXkFBLDE2KSksMHwoJD0wfG8oKSksMHxOLDB8eCkpXmQsKE49MHxvKCkpXlksNjMpLGQ9MHxvKCksTz0wfFpJKCh6PTB8dmcoMHwoJD0wfFpJKEFBXih3QT0wfHZnKDB8KHdBPTB8dmcoMHx5QSwwfHdBLDB8aiwwfFQpKSwwfG8oKSwwfFcsMHxPKSksJF4oeUE9MHxvKCkpLDMyKSksMHwoQUE9MHxvKCkpLDB8WiwwfHopKV5XLChaPTB8bygpKV5PLDI0KSxXPTB8bygpLEFBPTB8WkkoKHlBPTB8dmcoMHwoeUE9MHx2ZygwfHdBLDB8eUEsMHxNLDB8dikpLDB8bygpLDB8TywwfFcpKV4kLCh3QT0wfG8oKSleQUEsMTYpLCQ9MHxvKCksQ1tFKzEyMD4+Ml09QUEsQ1tFKzEyMCs0Pj4yXT0kLFc9MHxaSSgoWj0wfHZnKDB8QUEsMHwkLDB8eiwwfFopKV5PLCh6PTB8bygpKV5XLDYzKSxPPTB8bygpLEw9MHxaSSgoTj0wfHZnKDB8KEs9MHxaSSgobkE9MHx2ZygwfChuQT0wfHZnKDB8YUEsMHxuQSwwfF8sMHxsKSksMHxvKCksMHxtLDB8TCkpXlgsKGFBPTB8bygpKV5LLDMyKSksMHwoWD0wfG8oKSksMHx4LDB8TikpXm0sKHg9MHxvKCkpXkwsMjQpLG09MHxvKCksbT0wfFpJKCh4PTB8dmcoMHwoWD0wfFpJKChhQT0wfHZnKDB8KGFBPTB8dmcoMHxuQSwwfGFBLDB8cCwwfGspKSwwfG8oKSwwfEwsMHxtKSleSywobkE9MHxvKCkpXlgsMTYpKSwwfChLPTB8bygpKSwwfE4sMHx4KSleTCwoTj0wfG8oKSlebSw2MyksTD0wfG8oKSxkPTB8WkkoKEk9MHx2ZygwfChVPTB8WkkoKG9BPTB8dmcoMHwob0E9MHx2ZygwfGVBLDB8b0EsMHxjLDB8Y0EpKSwwfG8oKSwwfFksMHxkKSleUywoZUE9MHxvKCkpXlUsMzIpKSwwfChTPTB8bygpKSwwfGYsMHxJKSleWSwoZj0wfG8oKSleZCwyNCksWT0wfG8oKSxZPTB8WkkoKGY9MHx2ZygwfChTPTB8WkkoKGVBPTB8dmcoMHwoZUE9MHx2ZygwfG9BLDB8ZUEsMHxyLDB8bikpLDB8bygpLDB8ZCwwfFkpKV5VLChvQT0wfG8oKSleUywxNikpLDB8KFU9MHxvKCkpLDB8SSwwfGYpKV5kLChJPTB8bygpKV5ZLDYzKSxkPTB8bygpLEQ9MHxaSSgocz0wfHZnKDB8KEg9MHxaSSgoRUE9MHx2ZygwfChzQT0wfHZnKDB8aCwwfEQsMHxxLDB8VikpLDB8bygpLDB8UUEsMHxFQSkpXnUsKFFBPTB8bygpKV5ILDMyKSksMHwodT0wfG8oKSksMHxGLDB8cykpXmgsKEY9MHxvKCkpXkQsMjQpLGg9MHxvKCksaD0wfFpJKChGPTB8dmcoMHwodT0wfFpJKChRQT0wfHZnKDB8KFFBPTB8dmcoMHxFQSwwfFFBLDB8YiwwfEopKSwwfG8oKSwwfEQsMHxoKSleSCwoRUE9MHxvKCkpXnUsMTYpKSwwfChIPTB8bygpKSwwfHMsMHxGKSleRCwocz0wfG8oKSleaCw2MyksRD0wfG8oKSxEPTB8WkkoKEk9MHx2ZygwfChLPTB8WkkoKHdBPTB8dmcoMHwod0E9MHx2ZygwfHlBLDB8d0EsMHxlLDB8aUEpKSwwfG8oKSwwfGgsMHxEKSleWCwoeUE9MHxvKCkpXkssMzIpKSwwfChYPTB8bygpKSwwfGYsMHxJKSleaCwoZj0wfG8oKSleRCwyNCksaD0wfG8oKSxoPTB8WkkoKGY9MHx2ZygwfChYPTB8WkkoKHlBPTB8dmcoMHwoeUE9MHx2ZygwfHdBLDB8eUEsMHxiLDB8SikpLDB8bygpLDB8RCwwfGgpKV5LLCh3QT0wfG8oKSleWCwxNikpLDB8KEs9MHxvKCkpLDB8SSwwfGYpKV5ELChJPTB8bygpKV5oLDYzKSxEPTB8bygpLENbRSszMj4+Ml09aCxDW0UrMzIrND4+Ml09RCxPPTB8WkkoKHM9MHx2ZygwfChVPTB8WkkoU14obkE9MHx2ZygwfChzQT0wfHZnKDB8VywwfE8sMHxNLDB8dikpLDB8bygpLDB8YUEsMHxuQSkpLFVeKGFBPTB8bygpKSwzMikpLDB8KFM9MHxvKCkpLDB8RiwwfHMpKV5XLChGPTB8bygpKV5PLDI0KSxXPTB8bygpLFc9MHxaSSgoRj0wfHZnKDB8KFM9MHxaSSgoYUE9MHx2ZygwfChhQT0wfHZnKDB8bkEsMHxhQSwwfHRBLDB8ZkEpKSwwfG8oKSwwfE8sMHxXKSleVSwobkE9MHxvKCkpXlMsMTYpKSwwfChVPTB8bygpKSwwfHMsMHxGKSleTywocz0wfG8oKSleVyw2MyksTz0wfG8oKSxMPTB8WkkoKHo9MHx2ZygwfChIPTB8WkkodV4ob0E9MHx2ZygwfChzQT0wfHZnKDB8bSwwfEwsMHx0LDB8dykpLDB8bygpLDB8ZUEsMHxvQSkpLEheKGVBPTB8bygpKSwzMikpLDB8KHU9MHxvKCkpLDB8WiwwfHopKV5tLChaPTB8bygpKV5MLDI0KSxtPTB8bygpLG09MHxaSSgoWj0wfHZnKDB8KHU9MHxaSSgoZUE9MHx2ZygwfChlQT0wfHZnKDB8b0EsMHxlQSwwfElBLDB8Z0EpKSwwfG8oKSwwfEwsMHxtKSleSCwob0E9MHxvKCkpXnUsMTYpKSwwfChIPTB8bygpKSwwfHosMHxaKSleTCwoej0wfG8oKSlebSw2MyksTD0wfG8oKSxkPTB8WkkoKE49MHx2ZygwfCgkPTB8WkkoKEVBPTB8dmcoMHwoc0E9MHx2ZygwfFksMHxkLDB8cCwwfGspKSwwfG8oKSwwfFFBLDB8RUEpKV5BQSwoUUE9MHxvKCkpXiQsMzIpKSwwfChBQT0wfG8oKSksMHx4LDB8TikpXlksKHg9MHxvKCkpXmQsMjQpLFk9MHxvKCksWT0wfFpJKCh4PTB8dmcoMHwoQUE9MHxaSSgoUUE9MHx2ZygwfChRQT0wfHZnKDB8RUEsMHxRQSwwfGMsMHxjQSkpLDB8bygpLDB8ZCwwfFkpKV4kLChFQT0wfG8oKSleQUEsMTYpKSwwfCgkPTB8bygpKSwwfE4sMHx4KSleZCwoTj0wfG8oKSleWSw2MyksZD0wfG8oKSxPPTB8WkkoKHo9MHx2ZygwfCgkPTB8WkkoQUFeKHdBPTB8dmcoMHwod0E9MHx2ZygwfHlBLDB8d0EsMHxpLDB8RykpLDB8bygpLDB8VywwfE8pKSwkXih5QT0wfG8oKSksMzIpKSwwfChBQT0wfG8oKSksMHxaLDB8eikpXlcsKFo9MHxvKCkpXk8sMjQpLFc9MHxvKCksQUE9MHxaSSgoeUE9MHx2ZygwfCh5QT0wfHZnKDB8d0EsMHx5QSwwfGosMHxUKSksMHxvKCksMHxPLDB8VykpXiQsKHdBPTB8bygpKV5BQSwxNiksJD0wfG8oKSxDW0UrMTIwPj4yXT1BQSxDW0UrMTIwKzQ+PjJdPSQsVz0wfFpJKChaPTB8dmcoMHxBQSwwfCQsMHx6LDB8WikpXk8sKHo9MHxvKCkpXlcsNjMpLE89MHxvKCksTD0wfFpJKChOPTB8dmcoMHwoSz0wfFpJKChuQT0wfHZnKDB8KG5BPTB8dmcoMHxhQSwwfG5BLDB8UCwwfFIpKSwwfG8oKSwwfG0sMHxMKSleWCwoYUE9MHxvKCkpXkssMzIpKSwwfChYPTB8bygpKSwwfHgsMHxOKSlebSwoeD0wfG8oKSleTCwyNCksbT0wfG8oKSxtPTB8WkkoKHg9MHx2ZygwfChYPTB8WkkoKGFBPTB8dmcoMHwoYUE9MHx2ZygwfG5BLDB8YUEsMHxhLDB8ckEpKSwwfG8oKSwwfEwsMHxtKSleSywobkE9MHxvKCkpXlgsMTYpKSwwfChLPTB8bygpKSwwfE4sMHx4KSleTCwoTj0wfG8oKSlebSw2MyksTD0wfG8oKSxkPTB8WkkoKEk9MHx2ZygwfChVPTB8WkkoKG9BPTB8dmcoMHwob0E9MHx2ZygwfGVBLDB8b0EsMHxxLDB8VikpLDB8bygpLDB8WSwwfGQpKV5TLChlQT0wfG8oKSleVSwzMikpLDB8KFM9MHxvKCkpLDB8ZiwwfEkpKV5ZLChmPTB8bygpKV5kLDI0KSxZPTB8bygpLFk9MHxaSSgoZj0wfHZnKDB8KFM9MHxaSSgoZUE9MHx2ZygwfChlQT0wfHZnKDB8b0EsMHxlQSwwfF8sMHxsKSksMHxvKCksMHxkLDB8WSkpXlUsKG9BPTB8bygpKV5TLDE2KSksMHwoVT0wfG8oKSksMHxJLDB8ZikpXmQsKEk9MHxvKCkpXlksNjMpLGQ9MHxvKCksRD0wfFpJKChzPTB8dmcoMHwoSD0wfFpJKChFQT0wfHZnKDB8KHNBPTB8dmcoMHxoLDB8RCwwfHIsMHxuKSksMHxvKCksMHxRQSwwfEVBKSledSwoUUE9MHxvKCkpXkgsMzIpKSwwfCh1PTB8bygpKSwwfEYsMHxzKSleaCwoRj0wfG8oKSleRCwyNCksaD0wfG8oKSxoPTB8WkkoKEY9MHx2ZygwfCh1PTB8WkkoKFFBPTB8dmcoMHwoUUE9MHx2ZygwfEVBLDB8UUEsMHxCQSwwfENBKSksMHxvKCksMHxELDB8aCkpXkgsKEVBPTB8bygpKV51LDE2KSksMHwoSD0wfG8oKSksMHxzLDB8RikpXkQsKHM9MHxvKCkpXmgsNjMpLEQ9MHxvKCksRD0wfFpJKChJPTB8dmcoMHwoSz0wfFpJKCh3QT0wfHZnKDB8KHdBPTB8dmcoMHx5QSwwfHdBLDB8XywwfGwpKSwwfG8oKSwwfGgsMHxEKSleWCwoeUE9MHxvKCkpXkssMzIpKSwwfChYPTB8bygpKSwwfGYsMHxJKSleaCwoZj0wfG8oKSleRCwyNCksaD0wfG8oKSxoPTB8WkkoKGY9MHx2ZygwfChYPTB8WkkoKHlBPTB8dmcoMHwoeUE9MHx2ZygwfHdBLDB8eUEsMHxQLDB8UikpLDB8bygpLDB8RCwwfGgpKV5LLCh3QT0wfG8oKSleWCwxNikpLDB8KEs9MHxvKCkpLDB8SSwwfGYpKV5ELChJPTB8bygpKV5oLDYzKSxEPTB8bygpLENbRSszMj4+Ml09aCxDW0UrMzIrND4+Ml09RCxPPTB8WkkoKHM9MHx2ZygwfChVPTB8WkkoU14obkE9MHx2ZygwfChzQT0wfHZnKDB8VywwfE8sMHx0QSwwfGZBKSksMHxvKCksMHxhQSwwfG5BKSksVV4oYUE9MHxvKCkpLDMyKSksMHwoUz0wfG8oKSksMHxGLDB8cykpXlcsKEY9MHxvKCkpXk8sMjQpLFc9MHxvKCksVz0wfFpJKChGPTB8dmcoMHwoUz0wfFpJKChhQT0wfHZnKDB8KGFBPTB8dmcoMHxuQSwwfGFBLDB8YywwfGNBKSksMHxvKCksMHxPLDB8VykpXlUsKG5BPTB8bygpKV5TLDE2KSksMHwoVT0wfG8oKSksMHxzLDB8RikpXk8sKHM9MHxvKCkpXlcsNjMpLE89MHxvKCksTD0wfFpJKCh6PTB8dmcoMHwoSD0wfFpJKHVeKG9BPTB8dmcoMHwoc0E9MHx2ZygwfG0sMHxMLDB8YiwwfEopKSwwfG8oKSwwfGVBLDB8b0EpKSxIXihlQT0wfG8oKSksMzIpKSwwfCh1PTB8bygpKSwwfFosMHx6KSlebSwoWj0wfG8oKSleTCwyNCksbT0wfG8oKSxtPTB8WkkoKFo9MHx2ZygwfCh1PTB8WkkoKGVBPTB8dmcoMHwoZUE9MHx2ZygwfG9BLDB8ZUEsMHxwLDB8aykpLDB8bygpLDB8TCwwfG0pKV5ILChvQT0wfG8oKSledSwxNikpLDB8KEg9MHxvKCkpLDB8eiwwfFopKV5MLCh6PTB8bygpKV5tLDYzKSxMPTB8bygpLGQ9MHxaSSgoTj0wfHZnKDB8KCQ9MHxaSSgoRUE9MHx2ZygwfChzQT0wfHZnKDB8WSwwfGQsMHxqLDB8VCkpLDB8bygpLDB8UUEsMHxFQSkpXkFBLChRQT0wfG8oKSleJCwzMikpLDB8KEFBPTB8bygpKSwwfHgsMHxOKSleWSwoeD0wfG8oKSleZCwyNCksWT0wfG8oKSxZPTB8WkkoKHg9MHx2ZygwfChBQT0wfFpJKChRQT0wfHZnKDB8KFFBPTB8dmcoMHxFQSwwfFFBLDB8cSwwfFYpKSwwfG8oKSwwfGQsMHxZKSleJCwoRUE9MHxvKCkpXkFBLDE2KSksMHwoJD0wfG8oKSksMHxOLDB8eCkpXmQsKE49MHxvKCkpXlksNjMpLGQ9MHxvKCksTz0wfFpJKCh6PTB8dmcoMHwoJD0wfFpJKEFBXih3QT0wfHZnKDB8KHdBPTB8dmcoMHx5QSwwfHdBLDB8dCwwfHcpKSwwfG8oKSwwfFcsMHxPKSksJF4oeUE9MHxvKCkpLDMyKSksMHwoQUE9MHxvKCkpLDB8WiwwfHopKV5XLChaPTB8bygpKV5PLDI0KSxXPTB8bygpLEFBPTB8WkkoKHlBPTB8dmcoMHwoeUE9MHx2ZygwfHdBLDB8eUEsMHxyLDB8bikpLDB8bygpLDB8TywwfFcpKV4kLCh3QT0wfG8oKSleQUEsMTYpLCQ9MHxvKCksQ1tFKzEyMD4+Ml09QUEsQ1tFKzEyMCs0Pj4yXT0kLFc9MHxaSSgoWj0wfHZnKDB8QUEsMHwkLDB8eiwwfFopKV5PLCh6PTB8bygpKV5XLDYzKSxPPTB8bygpLEw9MHxaSSgoTj0wfHZnKDB8KEs9MHxaSSgobkE9MHx2ZygwfChuQT0wfHZnKDB8YUEsMHxuQSwwfGUsMHxpQSkpLDB8bygpLDB8bSwwfEwpKV5YLChhQT0wfG8oKSleSywzMikpLDB8KFg9MHxvKCkpLDB8eCwwfE4pKV5tLCh4PTB8bygpKV5MLDI0KSxtPTB8bygpLG09MHxaSSgoeD0wfHZnKDB8KFg9MHxaSSgoYUE9MHx2ZygwfChhQT0wfHZnKDB8bkEsMHxhQSwwfE0sMHx2KSksMHxvKCksMHxMLDB8bSkpXkssKG5BPTB8bygpKV5YLDE2KSksMHwoSz0wfG8oKSksMHxOLDB8eCkpXkwsKE49MHxvKCkpXm0sNjMpLEw9MHxvKCksZD0wfFpJKChJPTB8dmcoMHwoVT0wfFpJKChvQT0wfHZnKDB8KG9BPTB8dmcoMHxlQSwwfG9BLDB8SUEsMHxnQSkpLDB8bygpLDB8WSwwfGQpKV5TLChlQT0wfG8oKSleVSwzMikpLDB8KFM9MHxvKCkpLDB8ZiwwfEkpKV5ZLChmPTB8bygpKV5kLDI0KSxZPTB8bygpLFk9MHxaSSgoZj0wfHZnKDB8KFM9MHxaSSgoZUE9MHx2ZygwfChlQT0wfHZnKDB8b0EsMHxlQSwwfGEsMHxyQSkpLDB8bygpLDB8ZCwwfFkpKV5VLChvQT0wfG8oKSleUywxNikpLDB8KFU9MHxvKCkpLDB8SSwwfGYpKV5kLChJPTB8bygpKV5ZLDYzKSxkPTB8bygpLEQ9MHxaSSgocz0wfHZnKDB8KEg9MHxaSSgoRUE9MHx2ZygwfChzQT0wfHZnKDB8aCwwfEQsMHxCQSwwfENBKSksMHxvKCksMHxRQSwwfEVBKSledSwoUUE9MHxvKCkpXkgsMzIpKSwwfCh1PTB8bygpKSwwfEYsMHxzKSleaCwoRj0wfG8oKSleRCwyNCksaD0wfG8oKSxoPTB8WkkoKEY9MHx2ZygwfCh1PTB8WkkoKFFBPTB8dmcoMHwoUUE9MHx2ZygwfEVBLDB8UUEsMHxpLDB8RykpLDB8bygpLDB8RCwwfGgpKV5ILChFQT0wfG8oKSledSwxNikpLDB8KEg9MHxvKCkpLDB8cywwfEYpKV5ELChzPTB8bygpKV5oLDYzKSxEPTB8bygpLEQ9MHxaSSgoST0wfHZnKDB8KEs9MHxaSSgod0E9MHx2ZygwfCh3QT0wfHZnKDB8eUEsMHx3QSwwfEJBLDB8Q0EpKSwwfG8oKSwwfGgsMHxEKSleWCwoeUE9MHxvKCkpXkssMzIpKSwwfChYPTB8bygpKSwwfGYsMHxJKSleaCwoZj0wfG8oKSleRCwyNCksaD0wfG8oKSxoPTB8WkkoKGY9MHx2ZygwfChYPTB8WkkoKHlBPTB8dmcoMHwoeUE9MHx2ZygwfHdBLDB8eUEsMHxyLDB8bikpLDB8bygpLDB8RCwwfGgpKV5LLCh3QT0wfG8oKSleWCwxNikpLDB8KEs9MHxvKCkpLDB8SSwwfGYpKV5ELChJPTB8bygpKV5oLDYzKSxEPTB8bygpLENbRSszMj4+Ml09aCxDW0UrMzIrND4+Ml09RCxPPTB8WkkoKHM9MHx2ZygwfChVPTB8WkkoU14obkE9MHx2ZygwfChzQT0wfHZnKDB8VywwfE8sMHxxLDB8VikpLDB8bygpLDB8YUEsMHxuQSkpLFVeKGFBPTB8bygpKSwzMikpLDB8KFM9MHxvKCkpLDB8RiwwfHMpKV5XLChGPTB8bygpKV5PLDI0KSxXPTB8bygpLFc9MHxaSSgoRj0wfHZnKDB8KFM9MHxaSSgoYUE9MHx2ZygwfChhQT0wfHZnKDB8bkEsMHxhQSwwfGEsMHxyQSkpLDB8bygpLDB8TywwfFcpKV5VLChuQT0wfG8oKSleUywxNikpLDB8KFU9MHxvKCkpLDB8cywwfEYpKV5PLChzPTB8bygpKV5XLDYzKSxPPTB8bygpLEw9MHxaSSgoej0wfHZnKDB8KEg9MHxaSSh1XihvQT0wfHZnKDB8KHNBPTB8dmcoMHxtLDB8TCwwfE0sMHx2KSksMHxvKCksMHxlQSwwfG9BKSksSF4oZUE9MHxvKCkpLDMyKSksMHwodT0wfG8oKSksMHxaLDB8eikpXm0sKFo9MHxvKCkpXkwsMjQpLG09MHxvKCksbT0wfFpJKChaPTB8dmcoMHwodT0wfFpJKChlQT0wfHZnKDB8KGVBPTB8dmcoMHxvQSwwfGVBLDB8XywwfGwpKSwwfG8oKSwwfEwsMHxtKSleSCwob0E9MHxvKCkpXnUsMTYpKSwwfChIPTB8bygpKSwwfHosMHxaKSleTCwoej0wfG8oKSlebSw2MyksTD0wfG8oKSxkPTB8WkkoKE49MHx2ZygwfCgkPTB8WkkoKEVBPTB8dmcoMHwoc0E9MHx2ZygwfFksMHxkLDB8SUEsMHxnQSkpLDB8bygpLDB8UUEsMHxFQSkpXkFBLChRQT0wfG8oKSleJCwzMikpLDB8KEFBPTB8bygpKSwwfHgsMHxOKSleWSwoeD0wfG8oKSleZCwyNCksWT0wfG8oKSxZPTB8WkkoKHg9MHx2ZygwfChBQT0wfFpJKChRQT0wfHZnKDB8KFFBPTB8dmcoMHxFQSwwfFFBLDB8aSwwfEcpKSwwfG8oKSwwfGQsMHxZKSleJCwoRUE9MHxvKCkpXkFBLDE2KSksMHwoJD0wfG8oKSksMHxOLDB8eCkpXmQsKE49MHxvKCkpXlksNjMpLGQ9MHxvKCksTz0wfFpJKCh6PTB8dmcoMHwoJD0wfFpJKEFBXih3QT0wfHZnKDB8KHdBPTB8dmcoMHx5QSwwfHdBLDB8UCwwfFIpKSwwfG8oKSwwfFcsMHxPKSksJF4oeUE9MHxvKCkpLDMyKSksMHwoQUE9MHxvKCkpLDB8WiwwfHopKV5XLChaPTB8bygpKV5PLDI0KSxXPTB8bygpLEFBPTB8WkkoKHlBPTB8dmcoMHwoeUE9MHx2ZygwfHdBLDB8eUEsMHxiLDB8SikpLDB8bygpLDB8TywwfFcpKV4kLCh3QT0wfG8oKSleQUEsMTYpLCQ9MHxvKCksQ1tFKzEyMD4+Ml09QUEsQ1tFKzEyMCs0Pj4yXT0kLFc9MHxaSSgoWj0wfHZnKDB8QUEsMHwkLDB8eiwwfFopKV5PLCh6PTB8bygpKV5XLDYzKSxPPTB8bygpLEw9MHxaSSgoTj0wfHZnKDB8KEs9MHxaSSgobkE9MHx2ZygwfChuQT0wfHZnKDB8YUEsMHxuQSwwfGMsMHxjQSkpLDB8bygpLDB8bSwwfEwpKV5YLChhQT0wfG8oKSleSywzMikpLDB8KFg9MHxvKCkpLDB8eCwwfE4pKV5tLCh4PTB8bygpKV5MLDI0KSxtPTB8bygpLG09MHxaSSgoeD0wfHZnKDB8KFg9MHxaSSgoYUE9MHx2ZygwfChhQT0wfHZnKDB8bkEsMHxhQSwwfHRBLDB8ZkEpKSwwfG8oKSwwfEwsMHxtKSleSywobkE9MHxvKCkpXlgsMTYpKSwwfChLPTB8bygpKSwwfE4sMHx4KSleTCwoTj0wfG8oKSlebSw2MyksTD0wfG8oKSxkPTB8WkkoKEk9MHx2ZygwfChVPTB8WkkoKG9BPTB8dmcoMHwob0E9MHx2ZygwfGVBLDB8b0EsMHxwLDB8aykpLDB8bygpLDB8WSwwfGQpKV5TLChlQT0wfG8oKSleVSwzMikpLDB8KFM9MHxvKCkpLDB8ZiwwfEkpKV5ZLChmPTB8bygpKV5kLDI0KSxZPTB8bygpLFk9MHxaSSgoZj0wfHZnKDB8KFM9MHxaSSgoZUE9MHx2ZygwfChlQT0wfHZnKDB8b0EsMHxlQSwwfHQsMHx3KSksMHxvKCksMHxkLDB8WSkpXlUsKG9BPTB8bygpKV5TLDE2KSksMHwoVT0wfG8oKSksMHxJLDB8ZikpXmQsKEk9MHxvKCkpXlksNjMpLGQ9MHxvKCksRD0wfFpJKChzPTB8dmcoMHwoSD0wfFpJKChFQT0wfHZnKDB8KHNBPTB8dmcoMHxoLDB8RCwwfGUsMHxpQSkpLDB8bygpLDB8UUEsMHxFQSkpXnUsKFFBPTB8bygpKV5ILDMyKSksMHwodT0wfG8oKSksMHxGLDB8cykpXmgsKEY9MHxvKCkpXkQsMjQpLGg9MHxvKCksaD0wfFpJKChGPTB8dmcoMHwodT0wfFpJKChRQT0wfHZnKDB8KFFBPTB8dmcoMHxFQSwwfFFBLDB8aiwwfFQpKSwwfG8oKSwwfEQsMHxoKSleSCwoRUE9MHxvKCkpXnUsMTYpKSwwfChIPTB8bygpKSwwfHMsMHxGKSleRCwocz0wfG8oKSleaCw2MyksRD0wfG8oKSxEPTB8WkkoKEk9MHx2ZygwfChLPTB8WkkoKHdBPTB8dmcoMHwod0E9MHx2ZygwfHlBLDB8d0EsMHxqLDB8VCkpLDB8bygpLDB8aCwwfEQpKV5YLCh5QT0wfG8oKSleSywzMikpLDB8KFg9MHxvKCkpLDB8ZiwwfEkpKV5oLChmPTB8bygpKV5ELDI0KSxoPTB8bygpLGg9MHxaSSgoZj0wfHZnKDB8KFg9MHxaSSgoeUE9MHx2ZygwfCh5QT0wfHZnKDB8d0EsMHx5QSwwfElBLDB8Z0EpKSwwfG8oKSwwfEQsMHxoKSleSywod0E9MHxvKCkpXlgsMTYpKSwwfChLPTB8bygpKSwwfEksMHxmKSleRCwoST0wfG8oKSleaCw2MyksRD0wfG8oKSxDW0UrMzI+PjJdPWgsQ1tFKzMyKzQ+PjJdPUQsTz0wfFpJKChzPTB8dmcoMHwoVT0wfFpJKFNeKG5BPTB8dmcoMHwoc0E9MHx2ZygwfFcsMHxPLDB8ciwwfG4pKSwwfG8oKSwwfGFBLDB8bkEpKSxVXihhQT0wfG8oKSksMzIpKSwwfChTPTB8bygpKSwwfEYsMHxzKSleVywoRj0wfG8oKSleTywyNCksVz0wfG8oKSxXPTB8WkkoKEY9MHx2ZygwfChTPTB8WkkoKGFBPTB8dmcoMHwoYUE9MHx2ZygwfG5BLDB8YUEsMHxwLDB8aykpLDB8bygpLDB8TywwfFcpKV5VLChuQT0wfG8oKSleUywxNikpLDB8KFU9MHxvKCkpLDB8cywwfEYpKV5PLChzPTB8bygpKV5XLDYzKSxPPTB8bygpLEw9MHxaSSgoej0wfHZnKDB8KEg9MHxaSSh1XihvQT0wfHZnKDB8KHNBPTB8dmcoMHxtLDB8TCwwfGEsMHxyQSkpLDB8bygpLDB8ZUEsMHxvQSkpLEheKGVBPTB8bygpKSwzMikpLDB8KHU9MHxvKCkpLDB8WiwwfHopKV5tLChaPTB8bygpKV5MLDI0KSxtPTB8bygpLG09MHxaSSgoWj0wfHZnKDB8KHU9MHxaSSgoZUE9MHx2ZygwfChlQT0wfHZnKDB8b0EsMHxlQSwwfGksMHxHKSksMHxvKCksMHxMLDB8bSkpXkgsKG9BPTB8bygpKV51LDE2KSksMHwoSD0wfG8oKSksMHx6LDB8WikpXkwsKHo9MHxvKCkpXm0sNjMpLEw9MHxvKCksZD0wfFpJKChOPTB8dmcoMHwoJD0wfFpJKChFQT0wfHZnKDB8KHNBPTB8dmcoMHxZLDB8ZCwwfF8sMHxsKSksMHxvKCksMHxRQSwwfEVBKSleQUEsKFFBPTB8bygpKV4kLDMyKSksMHwoQUE9MHxvKCkpLDB8eCwwfE4pKV5ZLCh4PTB8bygpKV5kLDI0KSxZPTB8bygpLFk9MHxaSSgoeD0wfHZnKDB8KEFBPTB8WkkoKFFBPTB8dmcoMHwoUUE9MHx2ZygwfEVBLDB8UUEsMHxNLDB8dikpLDB8bygpLDB8ZCwwfFkpKV4kLChFQT0wfG8oKSleQUEsMTYpKSwwfCgkPTB8bygpKSwwfE4sMHx4KSleZCwoTj0wfG8oKSleWSw2MyksZD0wfG8oKSxPPTB8WkkoKHo9MHx2ZygwfCgkPTB8WkkoQUFeKHdBPTB8dmcoMHwod0E9MHx2ZygwfHlBLDB8d0EsMHxxLDB8VikpLDB8bygpLDB8VywwfE8pKSwkXih5QT0wfG8oKSksMzIpKSwwfChBQT0wfG8oKSksMHxaLDB8eikpXlcsKFo9MHxvKCkpXk8sMjQpLFc9MHxvKCksQUE9MHxaSSgoeUE9MHx2ZygwfCh5QT0wfHZnKDB8d0EsMHx5QSwwfGMsMHxjQSkpLDB8bygpLDB8TywwfFcpKV4kLCh3QT0wfG8oKSleQUEsMTYpLCQ9MHxvKCksQ1tFKzEyMD4+Ml09QUEsQ1tFKzEyMCs0Pj4yXT0kLFc9MHxaSSgoWj0wfHZnKDB8QUEsMHwkLDB8eiwwfFopKV5PLCh6PTB8bygpKV5XLDYzKSxPPTB8bygpLEw9MHxaSSgoTj0wfHZnKDB8KEs9MHxaSSgobkE9MHx2ZygwfChuQT0wfHZnKDB8YUEsMHxuQSwwfEJBLDB8Q0EpKSwwfG8oKSwwfG0sMHxMKSleWCwoYUE9MHxvKCkpXkssMzIpKSwwfChYPTB8bygpKSwwfHgsMHxOKSlebSwoeD0wfG8oKSleTCwyNCksbT0wfG8oKSxtPTB8WkkoKHg9MHx2ZygwfChYPTB8WkkoKGFBPTB8dmcoMHwoYUE9MHx2ZygwfG5BLDB8YUEsMHxiLDB8SikpLDB8bygpLDB8TCwwfG0pKV5LLChuQT0wfG8oKSleWCwxNikpLDB8KEs9MHxvKCkpLDB8TiwwfHgpKV5MLChOPTB8bygpKV5tLDYzKSxMPTB8bygpLGQ9MHxaSSgoST0wfHZnKDB8KFU9MHxaSSgob0E9MHx2ZygwfChvQT0wfHZnKDB8ZUEsMHxvQSwwfHQsMHx3KSksMHxvKCksMHxZLDB8ZCkpXlMsKGVBPTB8bygpKV5VLDMyKSksMHwoUz0wfG8oKSksMHxmLDB8SSkpXlksKGY9MHxvKCkpXmQsMjQpLFk9MHxvKCksWT0wfFpJKChmPTB8dmcoMHwoUz0wfFpJKChlQT0wfHZnKDB8KGVBPTB8dmcoMHxvQSwwfGVBLDB8ZSwwfGlBKSksMHxvKCksMHxkLDB8WSkpXlUsKG9BPTB8bygpKV5TLDE2KSksMHwoVT0wfG8oKSksMHxJLDB8ZikpXmQsKEk9MHxvKCkpXlksNjMpLGQ9MHxvKCksRD0wfFpJKChzPTB8dmcoMHwoSD0wfFpJKChFQT0wfHZnKDB8KHNBPTB8dmcoMHxoLDB8RCwwfHRBLDB8ZkEpKSwwfG8oKSwwfFFBLDB8RUEpKV51LChRQT0wfG8oKSleSCwzMikpLDB8KHU9MHxvKCkpLDB8RiwwfHMpKV5oLChGPTB8bygpKV5ELDI0KSxoPTB8bygpLGg9MHxaSSgoRj0wfHZnKDB8KHU9MHxaSSgoUUE9MHx2ZygwfChRQT0wfHZnKDB8RUEsMHxRQSwwfFAsMHxSKSksMHxvKCksMHxELDB8aCkpXkgsKEVBPTB8bygpKV51LDE2KSksMHwoSD0wfG8oKSksMHxzLDB8RikpXkQsKHM9MHxvKCkpXmgsNjMpLEQ9MHxvKCksRD0wfFpJKChJPTB8dmcoMHwoSz0wfFpJKChmQT0wfHZnKDB8KGZBPTB8dmcoMHx5QSwwfHdBLDB8dEEsMHxmQSkpLDB8bygpLDB8aCwwfEQpKV5YLCh0QT0wfG8oKSleSywzMikpLDB8KFg9MHxvKCkpLDB8ZiwwfEkpKV5oLChmPTB8bygpKV5ELDI0KSxoPTB8bygpLGg9MHxaSSgoZj0wfHZnKDB8KFg9MHxaSSgoQ0E9MHx2ZygwfChDQT0wfHZnKDB8ZkEsMHx0QSwwfEJBLDB8Q0EpKSwwfG8oKSwwfEQsMHxoKSleSywoQkE9MHxvKCkpXlgsMTYpKSwwfChLPTB8bygpKSwwfEksMHxmKSleRCwoST0wfG8oKSleaCw2MyksRD0wfG8oKSxDW0UrMzI+PjJdPWgsQ1tFKzMyKzQ+PjJdPUQsTz0wfFpJKChzPTB8dmcoMHwoVT0wfFpJKFNeKG5BPTB8dmcoMHwockE9MHx2ZygwfFcsMHxPLDB8YSwwfHJBKSksMHxvKCksMHxhQSwwfG5BKSksVV4oYUE9MHxvKCkpLDMyKSksMHwoUz0wfG8oKSksMHxGLDB8cykpXlcsKEY9MHxvKCkpXk8sMjQpLFc9MHxvKCksVz0wfFpJKChGPTB8dmcoMHwoUz0wfFpJKChWPTB8dmcoMHwoVj0wfHZnKDB8bkEsMHxhQSwwfHEsMHxWKSksMHxvKCksMHxPLDB8VykpXlUsKHE9MHxvKCkpXlMsMTYpKSwwfChVPTB8bygpKSwwfHMsMHxGKSleTywocz0wfG8oKSleVyw2MyksTz0wfG8oKSxMPTB8WkkoKHo9MHx2ZygwfChIPTB8WkkodV4ob0E9MHx2ZygwfChjQT0wfHZnKDB8bSwwfEwsMHxjLDB8Y0EpKSwwfG8oKSwwfGVBLDB8b0EpKSxIXihlQT0wfG8oKSksMzIpKSwwfCh1PTB8bygpKSwwfFosMHx6KSlebSwoWj0wfG8oKSleTCwyNCksbT0wfG8oKSxtPTB8WkkoKFo9MHx2ZygwfCh1PTB8WkkoKFI9MHx2ZygwfChSPTB8dmcoMHxvQSwwfGVBLDB8UCwwfFIpKSwwfG8oKSwwfEwsMHxtKSleSCwoUD0wfG8oKSledSwxNikpLDB8KEg9MHxvKCkpLDB8eiwwfFopKV5MLCh6PTB8bygpKV5tLDYzKSxMPTB8bygpLGQ9MHxaSSgoTj0wfHZnKDB8KCQ9MHxaSSgoRUE9MHx2ZygwfChpQT0wfHZnKDB8WSwwfGQsMHxlLDB8aUEpKSwwfG8oKSwwfFFBLDB8RUEpKV5BQSwoUUE9MHxvKCkpXiQsMzIpKSwwfChBQT0wfG8oKSksMHx4LDB8TikpXlksKHg9MHxvKCkpXmQsMjQpLFk9MHxvKCksWT0wfFpJKCh4PTB8dmcoMHwoQUE9MHxaSSgobD0wfHZnKDB8KGw9MHx2ZygwfEVBLDB8UUEsMHxfLDB8bCkpLDB8bygpLDB8ZCwwfFkpKV4kLChfPTB8bygpKV5BQSwxNikpLDB8KCQ9MHxvKCkpLDB8TiwwfHgpKV5kLChOPTB8bygpKV5ZLDYzKSxkPTB8bygpLE89MHxaSSgoej0wfHZnKDB8KCQ9MHxaSShBQV4oZ0E9MHx2ZygwfChnQT0wfHZnKDB8Q0EsMHxCQSwwfElBLDB8Z0EpKSwwfG8oKSwwfFcsMHxPKSksJF4oSUE9MHxvKCkpLDMyKSksMHwoQUE9MHxvKCkpLDB8WiwwfHopKV5XLChaPTB8bygpKV5PLDI0KSxXPTB8bygpLHc9MHx2ZygwfCh3PTB8dmcoMHxnQSwwfElBLDB8dCwwfHcpKSwwfG8oKSwwfE8sMHxXKSx0PTB8bygpLENbRT4+Ml09dyxDW0UrND4+Ml09dCxBQT0wfFpJKHdeJCx0XkFBLDE2KSwkPTB8bygpLENbRSsxMjA+PjJdPUFBLENbRSsxMjArND4+Ml09JCxaPTB8dmcoMHxBQSwwfCQsMHx6LDB8Wiksej0wfG8oKSxDW0UrODA+PjJdPVosQ1tFKzgwKzQ+PjJdPXosVz0wfFpJKFpeTyx6XlcsNjMpLHo9MHxvKCksQ1tFKzQwPj4yXT1XLENbRSs0MCs0Pj4yXT16LEw9MHxaSSgoTj0wfHZnKDB8KEs9MHxaSSgoVD0wfHZnKDB8KFQ9MHx2ZygwfFYsMHxxLDB8aiwwfFQpKSwwfG8oKSwwfG0sMHxMKSleWCwoaj0wfG8oKSleSywzMikpLDB8KFg9MHxvKCkpLDB8eCwwfE4pKV5tLCh4PTB8bygpKV5MLDI0KSxtPTB8bygpLG49MHx2ZygwfChuPTB8dmcoMHxULDB8aiwwfHIsMHxuKSksMHxvKCksMHxMLDB8bSkscj0wfG8oKSxDW0UrOD4+Ml09bixDW0UrOCs0Pj4yXT1yLFg9MHxaSShuXksscl5YLDE2KSxLPTB8bygpLENbRSs5Nj4+Ml09WCxDW0UrOTYrND4+Ml09Syx4PTB8dmcoMHxYLDB8SywwfE4sMHx4KSxOPTB8bygpLENbRSs4OD4+Ml09eCxDW0UrODgrND4+Ml09TixtPTB8WkkoeF5MLE5ebSw2MyksTj0wfG8oKSxDW0UrNDg+PjJdPW0sQ1tFKzQ4KzQ+PjJdPU4sZD0wfFpJKChJPTB8dmcoMHwoVT0wfFpJKChKPTB8dmcoMHwoSj0wfHZnKDB8UiwwfFAsMHxiLDB8SikpLDB8bygpLDB8WSwwfGQpKV5TLChiPTB8bygpKV5VLDMyKSksMHwoUz0wfG8oKSksMHxmLDB8SSkpXlksKGY9MHxvKCkpXmQsMjQpLFk9MHxvKCksdj0wfHZnKDB8KHY9MHx2ZygwfEosMHxiLDB8TSwwfHYpKSwwfG8oKSwwfGQsMHxZKSxNPTB8bygpLENbRSsxNj4+Ml09dixDW0UrMTYrND4+Ml09TSxTPTB8Wkkodl5VLE1eUywxNiksTT0wfG8oKSxDW0UrMTA0Pj4yXT1TLENbRSsxMDQrND4+Ml09TSxmPTB8dmcoMHxTLDB8TSwwfEksMHxmKSxJPTB8bygpLENbRSs2ND4+Ml09ZixDW0UrNjQrND4+Ml09SSxZPTB8WkkoZl5kLEleWSw2MyksZD0wfG8oKSxDW0UrNTY+PjJdPVksQ1tFKzU2KzQ+PjJdPWQsRD0wfFpJKChzPTB8dmcoMHwoSD0wfFpJKChfPTB8dmcoMHwoRz0wfHZnKDB8aCwwfEQsMHxpLDB8RykpLDB8bygpLDB8bCwwfF8pKV51LChsPTB8bygpKV5ILDMyKSksMHwodT0wfG8oKSksMHxGLDB8cykpXmgsKEY9MHxvKCkpXkQsMjQpLGg9MHxvKCksaz0wfHZnKDB8KGs9MHx2ZygwfF8sMHxsLDB8cCwwfGspKSwwfG8oKSwwfEQsMHxoKSxwPTB8bygpLENbRSsyND4+Ml09ayxDW0UrMjQrND4+Ml09cCx1PTB8Wkkoa15ILHBedSwxNikscD0wfG8oKSxDW0UrMTEyPj4yXT11LENbRSsxMTIrND4+Ml09cCxGPTB8dmcoMHx1LDB8cCwwfHMsMHxGKSxzPTB8bygpLENbRSs3Mj4+Ml09RixDW0UrNzIrND4+Ml09cyxoPTB8WkkoRl5ELHNeaCw2Mykscz0wfG8oKSxDW0UrMzI+PjJdPWgsQ1tFKzMyKzQ+PjJdPXMsZj13XihRW0E+PjBdfFFbQSsxPj4wXTw8OHxRW0ErMj4+MF08PDE2fFFbQSszPj4wXTw8MjQpXmYsST10XihRW0ErND4+MF18UVtBKzQrMT4+MF08PDh8UVtBKzQrMj4+MF08PDE2fFFbQSs0KzM+PjBdPDwyNCleSSxCW0E+PjBdPWYsQltBKzE+PjBdPWY+PjgsQltBKzI+PjBdPWY+PjE2LEJbQSszPj4wXT1mPj4yNCxCW0ErND4+MF09SSxCW0ErNCsxPj4wXT1JPj44LEJbQSs0KzI+PjBdPUk+PjE2LEJbQSs0KzM+PjBdPUk+PjI0LEk9MTt5QT1FKyhJKzg8PDMpfDAsd0E9bl4oUVsoc0E9QSsoSTw8Myl8MCk+PjBdfFFbc0ErMT4+MF08PDh8UVtzQSsyPj4wXTw8MTZ8UVtzQSszPj4wXTw8MjQpXkNbeUE+PjJdLHlBPXJeKFFbc0ErND4+MF18UVtzQSs0KzE+PjBdPDw4fFFbc0ErNCsyPj4wXTw8MTZ8UVtzQSs0KzM+PjBdPDwyNCleQ1t5QSs0Pj4yXSxCW3NBPj4wXT13QSxCW3NBKzE+PjBdPXdBPj44LEJbc0ErMj4+MF09d0E+PjE2LEJbc0ErMz4+MF09d0E+PjI0LEJbc0ErND4+MF09eUEsQltzQSs0KzE+PjBdPXlBPj44LEJbc0ErNCsyPj4wXT15QT4+MTYsQltzQSs0KzM+PjBdPXlBPj4yNCw4IT0oMHwoST1JKzF8MCkpOyluPTB8Q1tFKyhJPDwzKT4+Ml0scj0wfENbRSsoSTw8MykrND4+Ml07eT1nfWZ1bmN0aW9uIGgoQSxJLGcsQyl7QXw9MCxnfD0wLEN8PTA7dmFyIFEsRSxpLGUsYyxhLG4scix0LGYsdyx5LHMsaCxELEYscCx1LEgsayxsLF89MCxHPTAsZD0wLFk9MCxNPTAsUz0wLFU9MCx2PTAsYj0wLEo9MCxQPTAsUj0wLE49MCxtPTAsTD0wLHg9MCxLPTAsWD0wLGo9MCxUPTAscT0wLFY9MCx6PTAsVz0wLE89MCxaPTAsJD0wLEFBPTAsSUE9MCxnQT0wLEJBPTAsQ0E9MCxRQT0wLEVBPTAsaUE9MCxlQT0wLG9BPTAsY0E9MCxhQT0wLG5BPTAsckE9MCx0QT0wLGZBPTAsd0E9MCx5QT0wLHNBPTAsaEE9MCxEQT0wLEZBPTAscEE9MCx1QT0wLEhBPTAsa0E9MCxsQT0wLF9BPTAsR0E9MCxkQT0wLFlBPTAsTUE9MCxTQT0wLFVBPTAsdkE9MCxiQT0wLEpBPTAsUEE9MCxSQT0wLE5BPTAsbUE9MCxMQT0wLHhBPTAsS0E9MCxYQT0wLGpBPTAsVEE9MCxxQT0wLFZBPTAsekE9MCxXQT0wLE9BPTAsWkE9MCwkQT0wLEFJPTAsSUk9MCxnST0wLEJJPTAsQ0k9MCxRST0wLEVJPTAsaUk9MCxlST0wLG9JPTAsY0k9MCxhST0wLG5JPTAsckk9MCx0ST0wLGZJPTAsd0k9MCx5ST0wLHNJPTAsaEk9MCxEST0wLEZJPTAscEk9MCx1ST0wLEhJPTAsbEk9MCxfST0wLEdJPTAsZEk9MCxZST0wLE1JPTAsU0k9MCxVST0wLHZJPTAsYkk9MCxKST0wLFBJPTAsUkk9MCxOST0wLG1JPTAsTEk9MCx4ST0wLEtJPTAsWEk9MCxqST0wLFRJPTAscUk9MCxWST0wLHpJPTAsV0k9MCxPST0wLFpJPTAsJEk9MCxBZz0wLElnPTAsZ2c9MCxDZz0wLEVnPTAsZWc9MCxvZz0wLGNnPTAsYWc9MCxuZz0wLHRnPTAsZmc9MCx3Zz0wLHNnPTAsaGc9MCxEZz0wLEZnPTAscGc9MCx1Zz0wO3dBPTB8QmcoMHxCWyhJfD0wKT4+MF0sMHxCW0krMT4+MF0sMHxCW0krMj4+MF0pLG8oKSxVST0wfHlnKDB8KFVJPTB8a0koSSsyfDApKSwwfG8oKSw1KSxvKCksdUk9MHx5ZygwfCh1ST0wfEJnKDB8QltJKzU+PjBdLDB8QltJKzY+PjBdLDB8QltJKzc+PjBdKSksMHxvKCksMiksbygpLFNJPTB8eWcoMHwoU0k9MHxrSShJKzd8MCkpLDB8bygpLDcpLG8oKSx5ST0wfHlnKDB8KHlJPTB8a0koSSsxMHwwKSksMHxvKCksNCksbygpLENBPTB8eWcoMHwoQ0E9MHxCZygwfEJbSSsxMz4+MF0sMHxCW0krMTQ+PjBdLDB8QltJKzE1Pj4wXSkpLDB8bygpLDEpLG8oKSxGQT0wfHlnKDB8KEZBPTB8a0koSSsxNXwwKSksMHxvKCksNiksbygpLF89MHx5ZygwfChfPTB8QmcoMHxCW0krMTg+PjBdLDB8QltJKzE5Pj4wXSwwfEJbSSsyMD4+MF0pKSwwfG8oKSwzKSxvKCksUUE9MHxCZygwfEJbSSsyMT4+MF0sMHxCW0krMjI+PjBdLDB8QltJKzIzPj4wXSksbygpLHE9MHx5ZygwfChxPTB8a0koSSsyM3wwKSksMHxvKCksNSksbygpLEhBPTB8eWcoMHwoSEE9MHxCZygwfEJbSSsyNj4+MF0sMHxCW0krMjc+PjBdLDB8QltJKzI4Pj4wXSkpLDB8bygpLDIpLG8oKSxHQT0wfHlnKDB8KEdBPTB8a0koSSsyOHwwKSksMHxvKCksNyksZEE9MHxvKCksWEk9MHxCZygwfEJbZz4+MF0sMHxCW2crMT4+MF0sMHxCW2crMj4+MF0pLG8oKSxoST0wfHlnKDB8KGhJPTB8a0koZysyfDApKSwwfG8oKSw1KSxvKCksZ0k9MHx5ZygwfChnST0wfEJnKDB8QltnKzU+PjBdLDB8QltnKzY+PjBdLDB8QltnKzc+PjBdKSksMHxvKCksMiksbygpLEc9MHx5ZygwfChHPTB8a0koZys3fDApKSwwfG8oKSw3KSxvKCksZD0wfHlnKDB8KGQ9MHxrSShnKzEwfDApKSwwfG8oKSw0KSxvKCkseD0wfHlnKDB8KHg9MHxCZygwfEJbZysxMz4+MF0sMHxCW2crMTQ+PjBdLDB8QltnKzE1Pj4wXSkpLDB8bygpLDEpLG8oKSx6QT0wfHlnKDB8KHpBPTB8a0koZysxNXwwKSksMHxvKCksNiksbygpLHNBPTB8eWcoMHwoc0E9MHxCZygwfEJbZysxOD4+MF0sMHxCW2crMTk+PjBdLDB8QltnKzIwPj4wXSkpLDB8bygpLDMpLG8oKSxSQT0wfEJnKDB8QltnKzIxPj4wXSwwfEJbZysyMj4+MF0sMHxCW2crMjM+PjBdKSxvKCksSUE9MHx5ZygwfChJQT0wfGtJKGcrMjN8MCkpLDB8bygpLDUpLG8oKSxOST0wfHlnKDB8KE5JPTB8QmcoMHxCW2crMjY+PjBdLDB8QltnKzI3Pj4wXSwwfEJbZysyOD4+MF0pKSwwfG8oKSwyKSxvKCksckE9MHx5ZygwfChyQT0wfGtJKGcrMjh8MCkpLDB8bygpLDcpLG5BPTB8bygpLExBPTB8QmcoMHxCW0M+PjBdLDB8QltDKzE+PjBdLDB8QltDKzI+PjBdKSxvKCksQkE9MHx5ZygwfChCQT0wfGtJKEMrMnwwKSksMHxvKCksNSksbygpLEtBPTB8eWcoMHwoS0E9MHxCZygwfEJbQys1Pj4wXSwwfEJbQys2Pj4wXSwwfEJbQys3Pj4wXSkpLDB8bygpLDIpLG8oKSxiQT0wfHlnKDB8KGJBPTB8a0koQys3fDApKSwwfG8oKSw3KSxvKCksUEE9MHx5ZygwfChQQT0wfGtJKEMrMTB8MCkpLDB8bygpLDQpLG8oKSxXQT0wfHlnKDB8KFdBPTB8QmcoMHxCW0MrMTM+PjBdLDB8QltDKzE0Pj4wXSwwfEJbQysxNT4+MF0pKSwwfG8oKSwxKSxvKCksX0k9MHx5ZygwfChfST0wfGtJKEMrMTV8MCkpLDB8bygpLDYpLG8oKSxVPTB8eWcoMHwoVT0wfEJnKDB8QltDKzE4Pj4wXSwwfEJbQysxOT4+MF0sMHxCW0MrMjA+PjBdKSksMHxvKCksMyksbygpLGNJPTB8QmcoMHxCW0MrMjE+PjBdLDB8QltDKzIyPj4wXSwwfEJbQysyMz4+MF0pLG8oKSxUQT0wfHlnKDB8KFRBPTB8a0koQysyM3wwKSksMHxvKCksNSksbygpLHRBPTB8eWcoMHwodEE9MHxCZygwfEJbQysyNj4+MF0sMHxCW0MrMjc+PjBdLDB8QltDKzI4Pj4wXSkpLDB8bygpLDIpLG8oKSxGST0wfHlnKDB8KEZJPTB8a0koQysyOHwwKSksMHxvKCksNyksR0k9MHxvKCksbUE9MHx2ZygyMDk3MTUxJkxBfDAsMCwwfChtQT0wfFFnKDIwOTcxNTEmWEl8MCwwLDIwOTcxNTEmd0F8MCwwKSksMHxvKCkpLExBPTB8bygpLEY9MHxRZygyMDk3MTUxJmhJfDAsMCwyMDk3MTUxJndBfDAsMCksRD0wfG8oKSxoPTB8UWcoMjA5NzE1MSZYSXwwLDAsMjA5NzE1MSZVSXwwLDApLCRBPTB8bygpLFo9MHxRZygyMDk3MTUxJmdJfDAsMCwyMDk3MTUxJndBfDAsMCkseEE9MHxvKCksS0E9MHx2ZygwfCh4QT0wfHZnKDB8KHZBPTB8dmcoMHwoTz0wfFFnKDIwOTcxNTEmaEl8MCwwLDIwOTcxNTEmVUl8MCwwKSksMHxvKCksMHwodkE9MHxRZygyMDk3MTUxJlhJfDAsMCwyMDk3MTUxJnVJfDAsMCkpLDB8bygpKSksMHxvKCksMHxaLDB8eEEpKSwwfG8oKSwyMDk3MTUxJktBfDAsMCkseEE9MHxvKCksWj0wfFFnKDIwOTcxNTEmR3wwLDAsMjA5NzE1MSZ3QXwwLDApLHZBPTB8bygpLGw9MHxRZygyMDk3MTUxJmdJfDAsMCwyMDk3MTUxJlVJfDAsMCksTz0wfG8oKSxzPTB8UWcoMjA5NzE1MSZoSXwwLDAsMjA5NzE1MSZ1SXwwLDApLHk9MHxvKCksdz0wfFFnKDIwOTcxNTEmWEl8MCwwLDIwOTcxNTEmU0l8MCwwKSx1Zz0wfG8oKSxhQT0wfFFnKDIwOTcxNTEmZHwwLDAsMjA5NzE1MSZ3QXwwLDApLEpBPTB8bygpLHNnPTB8UWcoMjA5NzE1MSZHfDAsMCwyMDk3MTUxJlVJfDAsMCksT0E9MHxvKCksRGc9MHxRZygyMDk3MTUxJmdJfDAsMCwyMDk3MTUxJnVJfDAsMCksUD0wfG8oKSxQQT0wfHZnKDB8KEpBPTB8dmcoMHwoT0E9MHx2ZygwfChQPTB8dmcoMHwoaGc9MHx2ZygwfChGZz0wfFFnKDIwOTcxNTEmaEl8MCwwLDIwOTcxNTEmU0l8MCwwKSksMHxvKCksMHwoaGc9MHxRZygyMDk3MTUxJlhJfDAsMCwyMDk3MTUxJnlJfDAsMCkpLDB8bygpKSksMHxvKCksMHxEZywwfFApKSwwfG8oKSwwfHNnLDB8T0EpKSwwfG8oKSwwfGFBLDB8SkEpKSwwfG8oKSwyMDk3MTUxJlBBfDAsMCksSkE9MHxvKCksYUE9MHxRZygyMDk3MTUxJnh8MCwwLDIwOTcxNTEmd0F8MCwwKSxPQT0wfG8oKSxzZz0wfFFnKDIwOTcxNTEmZHwwLDAsMjA5NzE1MSZVSXwwLDApLFA9MHxvKCksRGc9MHxRZygyMDk3MTUxJkd8MCwwLDIwOTcxNTEmdUl8MCwwKSxoZz0wfG8oKSxrPTB8UWcoMjA5NzE1MSZnSXwwLDAsMjA5NzE1MSZTSXwwLDApLEZnPTB8bygpLGY9MHxRZygyMDk3MTUxJmhJfDAsMCwyMDk3MTUxJnlJfDAsMCksdD0wfG8oKSxyPTB8UWcoMjA5NzE1MSZYSXwwLDAsMjA5NzE1MSZDQXwwLDApLHBnPTB8bygpLEk9MHxRZygyMDk3MTUxJnpBfDAsMCwyMDk3MTUxJndBfDAsMCksREk9MHxvKCksRWc9MHxRZygyMDk3MTUxJnh8MCwwLDIwOTcxNTEmVUl8MCwwKSxZPTB8bygpLG9nPTB8UWcoMjA5NzE1MSZkfDAsMCwyMDk3MTUxJnVJfDAsMCksUz0wfG8oKSxhZz0wfFFnKDIwOTcxNTEmR3wwLDAsMjA5NzE1MSZTSXwwLDApLGVnPTB8bygpLHRnPTB8UWcoMjA5NzE1MSZnSXwwLDAsMjA5NzE1MSZ5SXwwLDApLGNnPTB8bygpLF9JPTB8dmcoMHwoREk9MHx2ZygwfChZPTB8dmcoMHwoUz0wfHZnKDB8KGVnPTB8dmcoMHwoY2c9MHx2ZygwfChuZz0wfHZnKDB8KGZnPTB8UWcoMjA5NzE1MSZoSXwwLDAsMjA5NzE1MSZDQXwwLDApKSwwfG8oKSwwfChuZz0wfFFnKDIwOTcxNTEmWEl8MCwwLDIwOTcxNTEmRkF8MCwwKSksMHxvKCkpKSwwfG8oKSwwfHRnLDB8Y2cpKSwwfG8oKSwwfGFnLDB8ZWcpKSwwfG8oKSwwfG9nLDB8UykpLDB8bygpLDB8RWcsMHxZKSksMHxvKCksMHxJLDB8REkpKSwwfG8oKSwyMDk3MTUxJl9JfDAsMCksREk9MHxvKCksST0wfFFnKDIwOTcxNTEmc0F8MCwwLDIwOTcxNTEmd0F8MCwwKSxZPTB8bygpLEVnPTB8UWcoMjA5NzE1MSZ6QXwwLDAsMjA5NzE1MSZVSXwwLDApLFM9MHxvKCksb2c9MHxRZygyMDk3MTUxJnh8MCwwLDIwOTcxNTEmdUl8MCwwKSxlZz0wfG8oKSxhZz0wfFFnKDIwOTcxNTEmZHwwLDAsMjA5NzE1MSZTSXwwLDApLGNnPTB8bygpLHRnPTB8UWcoMjA5NzE1MSZHfDAsMCwyMDk3MTUxJnlJfDAsMCksbmc9MHxvKCksSD0wfFFnKDIwOTcxNTEmZ0l8MCwwLDIwOTcxNTEmQ0F8MCwwKSxmZz0wfG8oKSxuPTB8UWcoMjA5NzE1MSZoSXwwLDAsMjA5NzE1MSZGQXwwLDApLGE9MHxvKCksYz0wfFFnKDIwOTcxNTEmWEl8MCwwLDIwOTcxNTEmX3wwLDApLHdnPTB8bygpLHFJPTB8UWcoMjA5NzE1MSZSQXwwLDAsMjA5NzE1MSZ3QXwwLDApLE09MHxvKCksVD0wfFFnKDIwOTcxNTEmc0F8MCwwLDIwOTcxNTEmVUl8MCwwKSxhST0wfG8oKSxqST0wfFFnKDIwOTcxNTEmekF8MCwwLDIwOTcxNTEmdUl8MCwwKSxUST0wfG8oKSx6ST0wfFFnKDIwOTcxNTEmeHwwLDAsMjA5NzE1MSZTSXwwLDApLGo9MHxvKCksT0k9MHxRZygyMDk3MTUxJmR8MCwwLDIwOTcxNTEmeUl8MCwwKSxWST0wfG8oKSwkST0wfFFnKDIwOTcxNTEmR3wwLDAsMjA5NzE1MSZDQXwwLDApLFdJPTB8bygpLElnPTB8UWcoMjA5NzE1MSZnSXwwLDAsMjA5NzE1MSZGQXwwLDApLFpJPTB8bygpLGNJPTB8dmcoMHwoYUk9MHx2ZygwfChNPTB8dmcoMHwoVEk9MHx2ZygwfChqPTB8dmcoMHwoVkk9MHx2ZygwfChXST0wfHZnKDB8KFpJPTB8dmcoMHwoQWc9MHx2ZygwfChnZz0wfFFnKDIwOTcxNTEmaEl8MCwwLDIwOTcxNTEmX3wwLDApKSwwfG8oKSwwfChBZz0wfFFnKDIwOTcxNTEmWEl8MCwwLDIwOTcxNTEmUUF8MCwwKSksMHxvKCkpKSwwfG8oKSwwfElnLDB8WkkpKSwwfG8oKSwwfCRJLDB8V0kpKSwwfG8oKSwwfE9JLDB8VkkpKSwwfG8oKSwwfHpJLDB8aikpLDB8bygpLDB8akksMHxUSSkpLDB8bygpLDB8cUksMHxNKSksMHxvKCksMHxULDB8YUkpKSwwfG8oKSwyMDk3MTUxJmNJfDAsMCksYUk9MHxvKCksVD0wfFFnKDIwOTcxNTEmSUF8MCwwLDIwOTcxNTEmd0F8MCwwKSxNPTB8bygpLHFJPTB8UWcoMjA5NzE1MSZSQXwwLDAsMjA5NzE1MSZVSXwwLDApLFRJPTB8bygpLGpJPTB8UWcoMjA5NzE1MSZzQXwwLDAsMjA5NzE1MSZ1SXwwLDApLGo9MHxvKCksekk9MHxRZygyMDk3MTUxJnpBfDAsMCwyMDk3MTUxJlNJfDAsMCksVkk9MHxvKCksT0k9MHxRZygyMDk3MTUxJnh8MCwwLDIwOTcxNTEmeUl8MCwwKSxXST0wfG8oKSwkST0wfFFnKDIwOTcxNTEmZHwwLDAsMjA5NzE1MSZDQXwwLDApLFpJPTB8bygpLElnPTB8UWcoMjA5NzE1MSZHfDAsMCwyMDk3MTUxJkZBfDAsMCksQWc9MHxvKCksdT0wfFFnKDIwOTcxNTEmZ0l8MCwwLDIwOTcxNTEmX3wwLDApLGdnPTB8bygpLGU9MHxRZygyMDk3MTUxJmhJfDAsMCwyMDk3MTUxJlFBfDAsMCksaT0wfG8oKSxFPTB8UWcoMjA5NzE1MSZYSXwwLDAsMjA5NzE1MSZxfDAsMCksQ2c9MHxvKCkseUE9MHxRZygyMDk3MTUxJk5JfDAsMCwyMDk3MTUxJndBfDAsMCksZkE9MHxvKCksVz0wfFFnKDIwOTcxNTEmSUF8MCwwLDIwOTcxNTEmVUl8MCwwKSx6PTB8bygpLGlJPTB8UWcoMjA5NzE1MSZSQXwwLDAsMjA5NzE1MSZ1SXwwLDApLEVJPTB8bygpLEpJPTB8UWcoMjA5NzE1MSZzQXwwLDAsMjA5NzE1MSZTSXwwLDApLGJJPTB8bygpLEVBPTB8UWcoMjA5NzE1MSZ6QXwwLDAsMjA5NzE1MSZ5SXwwLDApLGI9MHxvKCksbEk9MHxRZygyMDk3MTUxJnh8MCwwLDIwOTcxNTEmQ0F8MCwwKSxIST0wfG8oKSxJST0wfFFnKDIwOTcxNTEmZHwwLDAsMjA5NzE1MSZGQXwwLDApLEFJPTB8bygpLHJJPTB8UWcoMjA5NzE1MSZHfDAsMCwyMDk3MTUxJl98MCwwKSxuST0wfG8oKSxWPTB8UWcoMjA5NzE1MSZnSXwwLDAsMjA5NzE1MSZRQXwwLDApLEM9MHxvKCksdEE9MHx2ZygwfChmQT0wfHZnKDB8KHo9MHx2ZygwfChiST0wfHZnKDB8KEVJPTB8dmcoMHwoYj0wfHZnKDB8KEhJPTB8dmcoMHwoQUk9MHx2ZygwfChuST0wfHZnKDB8KEM9MHx2ZygwfCh4ST0wfHZnKDB8UWcoMjA5NzE1MSZoSXwwLDAsMjA5NzE1MSZxfDAsMCksMHwoTEk9MHxvKCkpLDB8KHhJPTB8UWcoMjA5NzE1MSZYSXwwLDAsMjA5NzE1MSZIQXwwLDApKSwwfG8oKSkpLDB8bygpLDB8ViwwfEMpKSwwfG8oKSwwfHJJLDB8bkkpKSwwfG8oKSwwfElJLDB8QUkpKSwwfG8oKSwwfGxJLDB8SEkpKSwwfG8oKSwwfEVBLDB8YikpLDB8bygpLDB8aUksMHxFSSkpLDB8bygpLDB8SkksMHxiSSkpLDB8bygpLDB8VywwfHopKSwwfG8oKSwwfHlBLDB8ZkEpKSwwfG8oKSwyMDk3MTUxJnRBfDAsMCksZkE9MHxvKCksd0E9MHxRZygwfHJBLDB8bkEsMjA5NzE1MSZ3QXwwLDApLHlBPTB8bygpLHo9MHxRZygyMDk3MTUxJk5JfDAsMCwyMDk3MTUxJlVJfDAsMCksVz0wfG8oKSxiST0wfFFnKDIwOTcxNTEmSUF8MCwwLDIwOTcxNTEmdUl8MCwwKSxKST0wfG8oKSxFST0wfFFnKDIwOTcxNTEmUkF8MCwwLDIwOTcxNTEmU0l8MCwwKSxpST0wfG8oKSxiPTB8UWcoMjA5NzE1MSZzQXwwLDAsMjA5NzE1MSZ5SXwwLDApLEVBPTB8bygpLEhJPTB8UWcoMjA5NzE1MSZ6QXwwLDAsMjA5NzE1MSZDQXwwLDApLGxJPTB8bygpLEFJPTB8UWcoMjA5NzE1MSZ4fDAsMCwyMDk3MTUxJkZBfDAsMCksSUk9MHxvKCksbkk9MHxRZygyMDk3MTUxJmR8MCwwLDIwOTcxNTEmX3wwLDApLHJJPTB8bygpLEM9MHxRZygyMDk3MTUxJkd8MCwwLDIwOTcxNTEmUUF8MCwwKSxWPTB8bygpLHhJPTB8UWcoMjA5NzE1MSZnSXwwLDAsMjA5NzE1MSZxfDAsMCksTEk9MHxvKCkscD0wfFFnKDIwOTcxNTEmaEl8MCwwLDIwOTcxNTEmSEF8MCwwKSxRPTB8bygpLFhJPTB8UWcoMjA5NzE1MSZYSXwwLDAsMHxHQSwwfGRBKSxLST0wfG8oKSxVST0wfFFnKDB8ckEsMHxuQSwyMDk3MTUxJlVJfDAsMCksdkk9MHxvKCksaEE9MHxRZygyMDk3MTUxJk5JfDAsMCwyMDk3MTUxJnVJfDAsMCkscEk9MHxvKCksUEk9MHxRZygyMDk3MTUxJklBfDAsMCwyMDk3MTUxJlNJfDAsMCksTj0wfG8oKSx1QT0wfFFnKDIwOTcxNTEmUkF8MCwwLDIwOTcxNTEmeUl8MCwwKSxjQT0wfG8oKSxvQT0wfFFnKDIwOTcxNTEmc0F8MCwwLDIwOTcxNTEmQ0F8MCwwKSxSST0wfG8oKSxTQT0wfFFnKDIwOTcxNTEmekF8MCwwLDIwOTcxNTEmRkF8MCwwKSxMPTB8bygpLGtBPTB8UWcoMjA5NzE1MSZ4fDAsMCwyMDk3MTUxJl98MCwwKSxVQT0wfG8oKSxmST0wfFFnKDIwOTcxNTEmZHwwLDAsMjA5NzE1MSZRQXwwLDApLFlBPTB8bygpLHNJPTB8UWcoMjA5NzE1MSZHfDAsMCwyMDk3MTUxJnF8MCwwKSx0ST0wfG8oKSx2ST0wfHZnKDB8KHBJPTB8dmcoMHwoTj0wfHZnKDB8KFJJPTB8dmcoMHwoY0E9MHx2ZygwfChMPTB8dmcoMHwoVUE9MHx2ZygwfChZQT0wfHZnKDB8KHRJPTB8dmcoMHwoaEk9MHx2ZygwfChNST0wfFFnKDIwOTcxNTEmZ0l8MCwwLDIwOTcxNTEmSEF8MCwwKSksMHwoQkk9MHxvKCkpLDB8KGhJPTB8UWcoMjA5NzE1MSZoSXwwLDAsMHxHQSwwfGRBKSksMHxvKCkpKSwwfG8oKSwwfHNJLDB8dEkpKSwwfG8oKSwwfGZJLDB8WUEpKSwwfG8oKSwwfGtBLDB8VUEpKSwwfG8oKSwwfFNBLDB8TCkpLDB8bygpLDB8dUEsMHxjQSkpLDB8bygpLDB8b0EsMHxSSSkpLDB8bygpLDB8UEksMHxOKSksMHxvKCksMHxoQSwwfHBJKSksMHxvKCksMHxVSSwwfHZJKSxVST0wfG8oKSx1ST0wfFFnKDB8ckEsMHxuQSwyMDk3MTUxJnVJfDAsMCkscEk9MHxvKCksaEE9MHxRZygyMDk3MTUxJk5JfDAsMCwyMDk3MTUxJlNJfDAsMCksTj0wfG8oKSxQST0wfFFnKDIwOTcxNTEmSUF8MCwwLDIwOTcxNTEmeUl8MCwwKSxSST0wfG8oKSxvQT0wfFFnKDIwOTcxNTEmUkF8MCwwLDIwOTcxNTEmQ0F8MCwwKSxjQT0wfG8oKSx1QT0wfFFnKDIwOTcxNTEmc0F8MCwwLDIwOTcxNTEmRkF8MCwwKSxMPTB8bygpLFNBPTB8UWcoMjA5NzE1MSZ6QXwwLDAsMjA5NzE1MSZffDAsMCksVUE9MHxvKCksa0E9MHxRZygyMDk3MTUxJnh8MCwwLDIwOTcxNTEmUUF8MCwwKSxZQT0wfG8oKSxmST0wfFFnKDIwOTcxNTEmZHwwLDAsMjA5NzE1MSZxfDAsMCksdEk9MHxvKCksc0k9MHxRZygyMDk3MTUxJkd8MCwwLDIwOTcxNTEmSEF8MCwwKSxoST0wfG8oKSxnST0wfFFnKDIwOTcxNTEmZ0l8MCwwLDB8R0EsMHxkQSksQkk9MHxvKCksU0k9MHxRZygwfHJBLDB8bkEsMjA5NzE1MSZTSXwwLDApLE1JPTB8bygpLGRJPTB8UWcoMjA5NzE1MSZOSXwwLDAsMjA5NzE1MSZ5SXwwLDApLHdJPTB8bygpLEs9MHxRZygyMDk3MTUxJklBfDAsMCwyMDk3MTUxJkNBfDAsMCksWUk9MHxvKCkscUE9MHxRZygyMDk3MTUxJlJBfDAsMCwyMDk3MTUxJkZBfDAsMCksJD0wfG8oKSxKPTB8UWcoMjA5NzE1MSZzQXwwLDAsMjA5NzE1MSZffDAsMCksZz0wfG8oKSx2PTB8UWcoMjA5NzE1MSZ6QXwwLDAsMjA5NzE1MSZRQXwwLDApLFpBPTB8bygpLHBBPTB8UWcoMjA5NzE1MSZ4fDAsMCwyMDk3MTUxJnF8MCwwKSxEQT0wfG8oKSxNST0wfHZnKDB8KHdJPTB8dmcoMHwoWUk9MHx2ZygwfChnPTB8dmcoMHwoJD0wfHZnKDB8KFpBPTB8dmcoMHwoREE9MHx2ZygwfChHPTB8dmcoMHwobUk9MHxRZygyMDk3MTUxJmR8MCwwLDIwOTcxNTEmSEF8MCwwKSksMHwobT0wfG8oKSksMHwoRz0wfFFnKDIwOTcxNTEmR3wwLDAsMHxHQSwwfGRBKSksMHxvKCkpKSwwfG8oKSwwfHBBLDB8REEpKSwwfG8oKSwwfHYsMHxaQSkpLDB8bygpLDB8cUEsMHwkKSksMHxvKCksMHxKLDB8ZykpLDB8bygpLDB8SywwfFlJKSksMHxvKCksMHxkSSwwfHdJKSksMHxvKCksMHxTSSwwfE1JKSxTST0wfG8oKSx5ST0wfFFnKDB8ckEsMHxuQSwyMDk3MTUxJnlJfDAsMCksd0k9MHxvKCksZEk9MHxRZygyMDk3MTUxJk5JfDAsMCwyMDk3MTUxJkNBfDAsMCksWUk9MHxvKCksSz0wfFFnKDIwOTcxNTEmSUF8MCwwLDIwOTcxNTEmRkF8MCwwKSxnPTB8bygpLEo9MHxRZygyMDk3MTUxJlJBfDAsMCwyMDk3MTUxJl98MCwwKSwkPTB8bygpLHFBPTB8UWcoMjA5NzE1MSZzQXwwLDAsMjA5NzE1MSZRQXwwLDApLFpBPTB8bygpLHY9MHxRZygyMDk3MTUxJnpBfDAsMCwyMDk3MTUxJnF8MCwwKSxEQT0wfG8oKSxwQT0wfFFnKDIwOTcxNTEmeHwwLDAsMjA5NzE1MSZIQXwwLDApLEc9MHxvKCksZD0wfFFnKDIwOTcxNTEmZHwwLDAsMHxHQSwwfGRBKSxtPTB8bygpLENBPTB8UWcoMHxyQSwwfG5BLDIwOTcxNTEmQ0F8MCwwKSxtST0wfG8oKSxRST0wfFFnKDIwOTcxNTEmTkl8MCwwLDIwOTcxNTEmRkF8MCwwKSxnQT0wfG8oKSxfQT0wfFFnKDIwOTcxNTEmSUF8MCwwLDIwOTcxNTEmX3wwLDApLENJPTB8bygpLFg9MHxRZygyMDk3MTUxJlJBfDAsMCwyMDk3MTUxJlFBfDAsMCksaUE9MHxvKCksZUE9MHxRZygyMDk3MTUxJnNBfDAsMCwyMDk3MTUxJnF8MCwwKSxsQT0wfG8oKSxtST0wfHZnKDB8KGdBPTB8dmcoMHwoQ0k9MHx2ZygwfChsQT0wfHZnKDB8KGlBPTB8dmcoMHwoeD0wfHZnKDB8KFI9MHxRZygyMDk3MTUxJnpBfDAsMCwyMDk3MTUxJkhBfDAsMCkpLDB8KFZBPTB8bygpKSwwfCh4PTB8UWcoMjA5NzE1MSZ4fDAsMCwwfEdBLDB8ZEEpKSwwfG8oKSkpLDB8bygpLDB8WCwwfGlBKSksMHxvKCksMHxlQSwwfGxBKSksMHxvKCksMHxfQSwwfENJKSksMHxvKCksMHxRSSwwfGdBKSksMHxvKCksMHxDQSwwfG1JKSxDQT0wfG8oKSxGQT0wfFFnKDB8ckEsMHxuQSwyMDk3MTUxJkZBfDAsMCksZ0E9MHxvKCksUUk9MHxRZygyMDk3MTUxJk5JfDAsMCwyMDk3MTUxJl98MCwwKSxDST0wfG8oKSxfQT0wfFFnKDIwOTcxNTEmSUF8MCwwLDIwOTcxNTEmUUF8MCwwKSxsQT0wfG8oKSxlQT0wfFFnKDIwOTcxNTEmUkF8MCwwLDIwOTcxNTEmcXwwLDApLGlBPTB8bygpLFg9MHxRZygyMDk3MTUxJnNBfDAsMCwyMDk3MTUxJkhBfDAsMCkseD0wfG8oKSx6QT0wfFFnKDIwOTcxNTEmekF8MCwwLDB8R0EsMHxkQSksVkE9MHxvKCksXz0wfFFnKDB8ckEsMHxuQSwyMDk3MTUxJl98MCwwKSxSPTB8bygpLFhBPTB8UWcoMjA5NzE1MSZOSXwwLDAsMjA5NzE1MSZRQXwwLDApLEFBPTB8bygpLG9JPTB8UWcoMjA5NzE1MSZJQXwwLDAsMjA5NzE1MSZxfDAsMCksakE9MHxvKCksTkE9MHxRZygyMDk3MTUxJlJBfDAsMCwyMDk3MTUxJkhBfDAsMCksZUk9MHxvKCksUj0wfHZnKDB8KEFBPTB8dmcoMHwoakE9MHx2ZygwfChlST0wfHZnKDB8KHNBPTB8UWcoMjA5NzE1MSZzQXwwLDAsMHxHQSwwfGRBKSksMHxvKCksMHxOQSwwfGVJKSksMHxvKCksMHxvSSwwfGpBKSksMHxvKCksMHxYQSwwfEFBKSksMHxvKCksMHxfLDB8UiksXz0wfG8oKSxRQT0wfFFnKDB8ckEsMHxuQSwyMDk3MTUxJlFBfDAsMCksQUE9MHxvKCksWEE9MHxRZygyMDk3MTUxJk5JfDAsMCwyMDk3MTUxJnF8MCwwKSxqQT0wfG8oKSxvST0wfFFnKDIwOTcxNTEmSUF8MCwwLDIwOTcxNTEmSEF8MCwwKSxlST0wfG8oKSxSQT0wfFFnKDIwOTcxNTEmUkF8MCwwLDB8R0EsMHxkQSksTkE9MHxvKCkscT0wfFFnKDB8ckEsMHxuQSwyMDk3MTUxJnF8MCwwKSxzQT0wfG8oKSxzQT0wfHZnKDB8KElBPTB8dmcoMHxRZygyMDk3MTUxJk5JfDAsMCwyMDk3MTUxJkhBfDAsMCksMHwoTUE9MHxvKCkpLDB8KElBPTB8UWcoMjA5NzE1MSZJQXwwLDAsMHxHQSwwfGRBKSksMHxvKCkpKSwwfG8oKSwwfHEsMHxzQSkscT0wfG8oKSxOST0wfHZnKDB8KEhBPTB8UWcoMHxyQSwwfG5BLDIwOTcxNTEmSEF8MCwwKSksMHwoSUE9MHxvKCkpLDB8KE5JPTB8UWcoMjA5NzE1MSZOSXwwLDAsMHxHQSwwfGRBKSksMHxvKCkpLElBPTB8bygpLGRBPTB8UWcoMHxyQSwwfG5BLDB8R0EsMHxkQSksR0E9MHxvKCksSEE9MHx5ZygwfChuQT0wfHZnKDB8bUEsMHxMQSwxMDQ4NTc2LDApKSwwfChyQT0wfG8oKSksMjEpLE1BPTB8bygpLE1BPTB8dmcoMHwoQkE9MHx2ZygwfCgkQT0wfHZnKDB8RiwwfEQsMHxoLDB8JEEpKSwwfG8oKSwyMDk3MTUxJkJBfDAsMCkpLDB8bygpLDB8SEEsMHxNQSksSEE9MHxvKCksckE9MHxVZygwfG1BLDB8TEEsLTIwOTcxNTImbkF8MCw0MDk1JnJBfDApLG5BPTB8bygpLEJBPTB8eWcoMHwoTEE9MHx2ZygwfEtBLDB8eEEsMTA0ODU3NiwwKSksMHwobUE9MHxvKCkpLDIxKSwkQT0wfG8oKSwkQT0wfHZnKDB8KGJBPTB8dmcoMHwodkE9MHx2ZygwfChPPTB8dmcoMHwodWc9MHx2ZygwfHMsMHx5LDB8dywwfHVnKSksMHxvKCksMHxsLDB8TykpLDB8bygpLDB8WiwwfHZBKSksMHxvKCksMjA5NzE1MSZiQXwwLDApKSwwfG8oKSwwfEJBLDB8JEEpLEJBPTB8bygpLFo9MHxpZygwfChiQT0wfHZnKDB8UEEsMHxKQSwxMDQ4NTc2LDApKSwwfCh2QT0wfG8oKSksMjEpLE89MHxvKCksTz0wfHZnKDB8KFdBPTB8dmcoMHwoT0E9MHx2ZygwfChQPTB8dmcoMHwoaGc9MHx2ZygwfChGZz0wfHZnKDB8KHBnPTB8dmcoMHxmLDB8dCwwfHIsMHxwZykpLDB8bygpLDB8aywwfEZnKSksMHxvKCksMHxEZywwfGhnKSksMHxvKCksMHxzZywwfFApKSwwfG8oKSwwfGFBLDB8T0EpKSwwfG8oKSwyMDk3MTUxJldBfDAsMCkpLDB8bygpLDB8WiwwfE8pLFo9MHxvKCksYUE9MHxpZygwfChXQT0wfHZnKDB8X0ksMHxESSwxMDQ4NTc2LDApKSwwfChPQT0wfG8oKSksMjEpLFA9MHxvKCksUD0wfHZnKDB8KFU9MHx2ZygwfChZPTB8dmcoMHwoUz0wfHZnKDB8KGVnPTB8dmcoMHwoY2c9MHx2ZygwfChuZz0wfHZnKDB8KGZnPTB8dmcoMHwod2c9MHx2ZygwfG4sMHxhLDB8YywwfHdnKSksMHxvKCksMHxILDB8ZmcpKSwwfG8oKSwwfHRnLDB8bmcpKSwwfG8oKSwwfGFnLDB8Y2cpKSwwfG8oKSwwfG9nLDB8ZWcpKSwwfG8oKSwwfEVnLDB8UykpLDB8bygpLDB8SSwwfFkpKSwwfG8oKSwyMDk3MTUxJlV8MCwwKSksMHxvKCksMHxhQSwwfFApLGFBPTB8bygpLEk9MHxpZygwfChVPTB8dmcoMHxjSSwwfGFJLDEwNDg1NzYsMCkpLDB8KFk9MHxvKCkpLDIxKSxTPTB8bygpLFM9MHx2ZygwfChUQT0wfHZnKDB8KE09MHx2ZygwfChqPTB8dmcoMHwoVEk9MHx2ZygwfChWST0wfHZnKDB8KFdJPTB8dmcoMHwoWkk9MHx2ZygwfChBZz0wfHZnKDB8KGdnPTB8dmcoMHwoQ2c9MHx2ZygwfGUsMHxpLDB8RSwwfENnKSksMHxvKCksMHx1LDB8Z2cpKSwwfG8oKSwwfElnLDB8QWcpKSwwfG8oKSwwfCRJLDB8WkkpKSwwfG8oKSwwfE9JLDB8V0kpKSwwfG8oKSwwfHpJLDB8VkkpKSwwfG8oKSwwfHFJLDB8VEkpKSwwfG8oKSwwfGpJLDB8aikpLDB8bygpLDB8VCwwfE0pKSwwfG8oKSwyMDk3MTUxJlRBfDAsMCkpLDB8bygpLDB8SSwwfFMpLEk9MHxvKCksVD0wfGlnKDB8KFRBPTB8dmcoMHx0QSwwfGZBLDEwNDg1NzYsMCkpLDB8KE09MHxvKCkpLDIxKSxqPTB8bygpLGo9MHx2ZygwfChHST0wfHZnKDB8KFc9MHx2ZygwfCh5QT0wfHZnKDB8KEpJPTB8dmcoMHwoRUE9MHx2ZygwfChpST0wfHZnKDB8KGxJPTB8dmcoMHwoSUk9MHx2ZygwfChyST0wfHZnKDB8KFY9MHx2ZygwfChMST0wfHZnKDB8KEtJPTB8dmcoMHxwLDB8USwwfFhJLDB8S0kpKSwwfG8oKSwwfHhJLDB8TEkpKSwwfG8oKSwwfEMsMHxWKSksMHxvKCksMHxuSSwwfHJJKSksMHxvKCksMHxBSSwwfElJKSksMHxvKCksMHxISSwwfGxJKSksMHxvKCksMHxFSSwwfGlJKSksMHxvKCksMHxiLDB8RUEpKSwwfG8oKSwwfGJJLDB8SkkpKSwwfG8oKSwwfHdBLDB8eUEpKSwwfG8oKSwwfHosMHxXKSksMHxvKCksMHxGSSwwfEdJKSksMHxvKCksMHxULDB8aiksVD0wfG8oKSxXPTB8aWcoMHwoR0k9MHx2ZygwfHZJLDB8VUksMTA0ODU3NiwwKSksMHwoRkk9MHxvKCkpLDIxKSx6PTB8bygpLHo9MHx2ZygwfChwST0wfHZnKDB8KE49MHx2ZygwfChSST0wfHZnKDB8KEw9MHx2ZygwfChjQT0wfHZnKDB8KFVBPTB8dmcoMHwoWUE9MHx2ZygwfCh0ST0wfHZnKDB8KEJJPTB8dmcoMHxzSSwwfGhJLDB8Z0ksMHxCSSkpLDB8bygpLDB8ZkksMHx0SSkpLDB8bygpLDB8a0EsMHxZQSkpLDB8bygpLDB8U0EsMHxVQSkpLDB8bygpLDB8b0EsMHxjQSkpLDB8bygpLDB8dUEsMHxMKSksMHxvKCksMHxQSSwwfFJJKSksMHxvKCksMHxoQSwwfE4pKSwwfG8oKSwwfHVJLDB8cEkpKSwwfG8oKSwwfFcsMHx6KSxXPTB8bygpLE49MHxpZygwfChwST0wfHZnKDB8TUksMHxTSSwxMDQ4NTc2LDApKSwwfCh1ST0wfG8oKSksMjEpLGhBPTB8bygpLGhBPTB8dmcoMHwod0k9MHx2ZygwfChZST0wfHZnKDB8KGc9MHx2ZygwfChaQT0wfHZnKDB8KCQ9MHx2ZygwfChEQT0wfHZnKDB8KG09MHx2ZygwfHBBLDB8RywwfGQsMHxtKSksMHxvKCksMHx2LDB8REEpKSwwfG8oKSwwfEosMHwkKSksMHxvKCksMHxxQSwwfFpBKSksMHxvKCksMHxLLDB8ZykpLDB8bygpLDB8ZEksMHxZSSkpLDB8bygpLDB8eUksMHx3SSkpLDB8bygpLDB8TiwwfGhBKSxOPTB8bygpLFlJPTB8aWcoMHwod0k9MHx2ZygwfG1JLDB8Q0EsMTA0ODU3NiwwKSksMHwoeUk9MHxvKCkpLDIxKSxkST0wfG8oKSxkST0wfHZnKDB8KGdBPTB8dmcoMHwoQ0k9MHx2ZygwfChsQT0wfHZnKDB8KHg9MHx2ZygwfChWQT0wfHZnKDB8ZUEsMHxpQSwwfHpBLDB8VkEpKSwwfG8oKSwwfFgsMHx4KSksMHxvKCksMHxfQSwwfGxBKSksMHxvKCksMHxRSSwwfENJKSksMHxvKCksMHxGQSwwfGdBKSksMHxvKCksMHxZSSwwfGRJKSxZST0wfG8oKSxDST0wfGlnKDB8KGdBPTB8dmcoMHxSLDB8XywxMDQ4NTc2LDApKSwwfChGQT0wfG8oKSksMjEpLFFJPTB8bygpLFFJPTB8dmcoMHwoQUE9MHx2ZygwfChqQT0wfHZnKDB8KE5BPTB8dmcoMHxvSSwwfGVJLDB8UkEsMHxOQSkpLDB8bygpLDB8WEEsMHxqQSkpLDB8bygpLDB8UUEsMHxBQSkpLDB8bygpLDB8Q0ksMHxRSSksQ0k9MHxvKCksRkE9MHxVZygwfFIsMHxfLC0yMDk3MTUyJmdBfDAsMHxGQSksZ0E9MHxvKCksQUE9MHx2ZygwfE5JLDB8SUEsMHwoQUE9MHxpZygwfChfPTB8dmcoMHxzQSwwfHEsMTA0ODU3NiwwKSksMHwoUj0wfG8oKSksMjEpKSwwfG8oKSksSUE9MHxvKCksUj0wfFVnKDB8c0EsMHxxLC0yMDk3MTUyJl98MCwwfFIpLF89MHxvKCksTkk9MHxpZygwfChxPTB8dmcoMHxkQSwwfEdBLDEwNDg1NzYsMCkpLDB8KHNBPTB8bygpKSwyMSksUUE9MHxvKCksc0E9MHxVZygwfGRBLDB8R0EsLTIwOTcxNTImcXwwLDB8c0EpLHE9MHxvKCksakE9MHx5ZygwfChHQT0wfHZnKDB8TUEsMHxIQSwxMDQ4NTc2LDApKSwwfChkQT0wfG8oKSksMjEpLFhBPTB8bygpLGRBPTB8VWcoMHxNQSwwfEhBLC0yMDk3MTUyJkdBfDAsMHxkQSksR0E9MHxvKCksTkE9MHxpZygwfChIQT0wfHZnKDB8JEEsMHxCQSwxMDQ4NTc2LDApKSwwfChNQT0wfG8oKSksMjEpLFJBPTB8bygpLE1BPTB8VWcoMHwkQSwwfEJBLC0yMDk3MTUyJkhBfDAsMHxNQSksSEE9MHxvKCksZUk9MHxpZygwfChCQT0wfHZnKDB8TywwfFosMTA0ODU3NiwwKSksMHwoJEE9MHxvKCkpLDIxKSxvST0wfG8oKSwkQT0wfFVnKDB8TywwfFosLTIwOTcxNTImQkF8MCwwfCRBKSxCQT0wfG8oKSxsQT0wfGlnKDB8KFo9MHx2ZygwfFAsMHxhQSwxMDQ4NTc2LDApKSwwfChPPTB8bygpKSwyMSksX0E9MHxvKCksVkE9MHxpZygwfCh4PTB8dmcoMHxTLDB8SSwxMDQ4NTc2LDApKSwwfChYPTB8bygpKSwyMSksekE9MHxvKCksZz0wfGlnKDB8KGlBPTB8dmcoMHxqLDB8VCwxMDQ4NTc2LDApKSwwfChlQT0wfG8oKSksMjEpLEs9MHxvKCksJD0wfGlnKDB8KFpBPTB8dmcoMHx6LDB8VywxMDQ4NTc2LDApKSwwfChxQT0wfG8oKSksMjEpLEo9MHxvKCksbT0wfGlnKDB8KERBPTB8dmcoMHxoQSwwfE4sMTA0ODU3NiwwKSksMHwodj0wfG8oKSksMjEpLGQ9MHxvKCksZ0E9MHx2ZygwfChSST0wfGlnKDB8KEc9MHx2ZygwfGRJLDB8WUksMTA0ODU3NiwwKSksMHwocEE9MHxvKCkpLDIxKSksMHxvKCksMHxGQSwwfGdBKSxGQT0wfG8oKSxwQT0wfFVnKDB8ZEksMHxZSSwtMjA5NzE1MiZHfDAsMHxwQSksRz0wfG8oKSxfPTB8dmcoMHwoUkk9MHxpZygwfChZST0wfHZnKDB8UUksMHxDSSwxMDQ4NTc2LDApKSwwfChkST0wfG8oKSksMjEpKSwwfG8oKSwwfFIsMHxfKSxSPTB8bygpLGRJPTB8VWcoMHxRSSwwfENJLC0yMDk3MTUyJllJfDAsMHxkSSksWUk9MHxvKCkscT0wfHZnKDB8KFJJPTB8aWcoMHwoQ0k9MHx2ZygwfEFBLDB8SUEsMTA0ODU3NiwwKSksMHwoUUk9MHxvKCkpLDIxKSksMHxvKCksMHxzQSwwfHEpLHNBPTB8bygpLFFJPTB8VWcoMHxBQSwwfElBLC0yMDk3MTUyJkNJfDAsMHxRSSksQ0k9MHxvKCksSUE9MHxRZygwfE5JLDB8UUEsNjY2NjQzLDApLEFBPTB8bygpLFJJPTB8UWcoMHxOSSwwfFFBLDQ3MDI5NiwwKSxQST0wfG8oKSxMPTB8UWcoMHxOSSwwfFFBLDY1NDE4MywwKSx1QT0wfG8oKSxjQT0wfFFnKDB8TkksMHxRQSwtOTk3ODA1LC0xKSxvQT0wfG8oKSxVQT0wfFFnKDB8TkksMHxRQSwxMzY2NTcsMCksU0E9MHxvKCksZD0wfHZnKDB8KHlJPTB8VWcoMHwoUUE9MHx2ZygwfG1JLDB8Q0EsMHwoUUE9MHxRZygwfE5JLDB8UUEsLTY4MzkwMSwtMSkpLDB8bygpKSksMHxvKCksLTIwOTcxNTImd0l8MCwwfHlJKSksMHxvKCksMHxtLDB8ZCksbT0wfG8oKSx5ST0wfFFnKDB8cSwwfHNBLDY2NjY0MywwKSx3ST0wfG8oKSxRQT0wfFFnKDB8cSwwfHNBLDQ3MDI5NiwwKSxDQT0wfG8oKSxtST0wfFFnKDB8cSwwfHNBLDY1NDE4MywwKSxOST0wfG8oKSxZQT0wfFFnKDB8cSwwfHNBLC05OTc4MDUsLTEpLGtBPTB8bygpLHRJPTB8UWcoMHxxLDB8c0EsMTM2NjU3LDApLGZJPTB8bygpLHNBPTB8UWcoMHxxLDB8c0EsLTY4MzkwMSwtMSkscT0wfG8oKSxCST0wfFFnKDB8UUksMHxDSSw2NjY2NDMsMCksZ0k9MHxvKCksaEk9MHxRZygwfFFJLDB8Q0ksNDcwMjk2LDApLHNJPTB8bygpLHlBPTB8UWcoMHxRSSwwfENJLDY1NDE4MywwKSx3QT0wfG8oKSxKST0wfFFnKDB8UUksMHxDSSwtOTk3ODA1LC0xKSxiST0wfG8oKSxFQT0wfFFnKDB8UUksMHxDSSwxMzY2NTcsMCksYj0wfG8oKSxDST0wfFFnKDB8UUksMHxDSSwtNjgzOTAxLC0xKSxRST0wfG8oKSxKPTB8dmcoMHwodUk9MHxVZygwfChRST0wfHZnKDB8KGZJPTB8dmcoMHwob0E9MHx2ZygwfE1JLDB8U0ksMHxjQSwwfG9BKSksMHxvKCksMHx0SSwwfGZJKSksMHxvKCksMHxDSSwwfFFJKSksMHxvKCksLTIwOTcxNTImcEl8MCwwfHVJKSksMHxvKCksMHwkLDB8SiksJD0wfG8oKSx1ST0wfFFnKDB8XywwfFIsNjY2NjQzLDApLHBJPTB8bygpLFFJPTB8UWcoMHxfLDB8Uiw0NzAyOTYsMCksQ0k9MHxvKCksZkk9MHxRZygwfF8sMHxSLDY1NDE4MywwKSx0ST0wfG8oKSxvQT0wfFFnKDB8XywwfFIsLTk5NzgwNSwtMSksY0E9MHxvKCksU0k9MHxRZygwfF8sMHxSLDEzNjY1NywwKSxNST0wfG8oKSxSPTB8UWcoMHxfLDB8UiwtNjgzOTAxLC0xKSxfPTB8bygpLGlJPTB8UWcoMHxkSSwwfFlJLDY2NjY0MywwKSxFST0wfG8oKSxsST0wfFFnKDB8ZEksMHxZSSw0NzAyOTYsMCksSEk9MHxvKCksSUk9MHxRZygwfGRJLDB8WUksNjU0MTgzLDApLEFJPTB8bygpLHJJPTB8UWcoMHxkSSwwfFlJLC05OTc4MDUsLTEpLG5JPTB8bygpLFY9MHxRZygwfGRJLDB8WUksMTM2NjU3LDApLEM9MHxvKCksWUk9MHxRZygwfGRJLDB8WUksLTY4MzkwMSwtMSksZEk9MHxvKCksSz0wfHZnKDB8KEZJPTB8VWcoMHwoZEk9MHx2ZygwfChNST0wfHZnKDB8KFVJPTB8dmcoMHwoYkk9MHx2ZygwfChQST0wfHZnKDB8bUksMHxOSSwwfFJJLDB8UEkpKSwwfG8oKSwwfEpJLDB8YkkpKSwwfG8oKSwwfHZJLDB8VUkpKSwwfG8oKSwwfFNJLDB8TUkpKSwwfG8oKSwwfFlJLDB8ZEkpKSwwfG8oKSwtMjA5NzE1MiZHSXwwLDB8RkkpKSwwfG8oKSwwfGcsMHxLKSxnPTB8bygpLE9BPTB8VWcoMHwob0k9MHx2ZygwfChGST0wfHZnKDB8X0ksMHxESSwwfChGST0wfFFnKDB8Z0EsMHxGQSw2NjY2NDMsMCkpLDB8bygpKSksMHxvKCksMHxlSSwwfG9JKSksMHxvKCksLTIwOTcxNTImV0F8MCwwfE9BKSxXQT0wfG8oKSxvST0wfFFnKDB8Z0EsMHxGQSw0NzAyOTYsMCksZUk9MHxvKCksRkk9MHxRZygwfGdBLDB8RkEsNjU0MTgzLDApLERJPTB8bygpLF9BPTB8dmcoMHwoWT0wfFVnKDB8KGFJPTB8dmcoMHwoREk9MHx2ZygwfChwST0wfHZnKDB8bEksMHxISSwwfHVJLDB8cEkpKSwwfG8oKSwwfEZJLDB8REkpKSwwfG8oKSwwfGNJLDB8YUkpKSwwfG8oKSwtMjA5NzE1MiZVfDAsMHxZKSksMHxvKCksMHxsQSwwfF9BKSxsQT0wfG8oKSxZPTB8UWcoMHxnQSwwfEZBLC05OTc4MDUsLTEpLFU9MHxvKCksYUk9MHxRZygwfGdBLDB8RkEsMTM2NjU3LDApLGNJPTB8bygpLE09MHxVZygwfCh6QT0wfHZnKDB8KGZBPTB8dmcoMHwoY0k9MHx2ZygwfChuST0wfHZnKDB8KHRJPTB8dmcoMHwod0k9MHx2ZygwfGhJLDB8c0ksMHx5SSwwfHdJKSksMHxvKCksMHxmSSwwfHRJKSksMHxvKCksMHxySSwwfG5JKSksMHxvKCksMHxhSSwwfGNJKSksMHxvKCksMHx0QSwwfGZBKSksMHxvKCksMHxWQSwwfHpBKSksMHxvKCksLTIwOTcxNTImVEF8MCwwfE0pLFRBPTB8bygpLEZBPTB8UWcoMHxnQSwwfEZBLC02ODM5MDEsLTEpLGdBPTB8bygpLGZBPTB8aWcoMHwoekE9MHx2ZygwfE9BLDB8V0EsMTA0ODU3NiwwKSksMHwoVkE9MHxvKCkpLDIxKSx0QT0wfG8oKSx0QT0wfHZnKDB8KE89MHxVZygwfChhQT0wfHZnKDB8KEVJPTB8dmcoMHxvSSwwfGVJLDB8aUksMHxFSSkpLDB8bygpLDB8UCwwfGFBKSksMHxvKCksLTIwOTcxNTImWnwwLDB8TykpLDB8bygpLDB8ZkEsMHx0QSksZkE9MHxvKCksYUE9MHxpZygwfChPPTB8dmcoMHxfQSwwfGxBLDEwNDg1NzYsMCkpLDB8KFo9MHxvKCkpLDIxKSxQPTB8bygpLFA9MHx2ZygwfChYPTB8VWcoMHwoST0wfHZnKDB8KFU9MHx2ZygwfChBST0wfHZnKDB8KGdJPTB8dmcoMHxRSSwwfENJLDB8QkksMHxnSSkpLDB8bygpLDB8SUksMHxBSSkpLDB8bygpLDB8WSwwfFUpKSwwfG8oKSwwfFMsMHxJKSksMHxvKCksLTIwOTcxNTImeHwwLDB8WCkpLDB8bygpLDB8YUEsMHxQKSxhQT0wfG8oKSxJPTB8aWcoMHwoWD0wfHZnKDB8TSwwfFRBLDEwNDg1NzYsMCkpLDB8KHg9MHxvKCkpLDIxKSxTPTB8bygpLFM9MHx2ZygwfChlQT0wfFVnKDB8KFQ9MHx2ZygwfChnQT0wfHZnKDB8KEM9MHx2ZygwfChjQT0wfHZnKDB8KHdBPTB8dmcoMHwoQUE9MHx2ZygwfFFBLDB8Q0EsMHxJQSwwfEFBKSksMHxvKCksMHx5QSwwfHdBKSksMHxvKCksMHxvQSwwfGNBKSksMHxvKCksMHxWLDB8QykpLDB8bygpLDB8RkEsMHxnQSkpLDB8bygpLDB8aiwwfFQpKSwwfG8oKSwtMjA5NzE1MiZpQXwwLDB8ZUEpKSwwfG8oKSwwfEksMHxTKSxJPTB8bygpLFQ9MHxpZygwfChlQT0wfHZnKDB8SywwfGcsMTA0ODU3NiwwKSksMHwoaUE9MHxvKCkpLDIxKSxqPTB8bygpLGo9MHx2ZygwfChxQT0wfFVnKDB8KFc9MHx2ZygwfChfPTB8dmcoMHwoYj0wfHZnKDB8KHVBPTB8dmcoMHxZQSwwfGtBLDB8TCwwfHVBKSksMHxvKCksMHxFQSwwfGIpKSwwfG8oKSwwfFIsMHxfKSksMHxvKCksMHx6LDB8VykpLDB8bygpLC0yMDk3MTUyJlpBfDAsMHxxQSkpLDB8bygpLDB8VCwwfGopLFQ9MHxvKCksaUE9MHxVZygwfEssMHxnLC0yMDk3MTUyJmVBfDAsMHxpQSksZUE9MHxvKCkscUE9MHxpZygwfChnPTB8dmcoMHxKLDB8JCwxMDQ4NTc2LDApKSwwfChLPTB8bygpKSwyMSksWkE9MHxvKCksWkE9MHx2ZygwfCh2PTB8VWcoMHwoTj0wfHZnKDB8KFNBPTB8dmcoMHxzQSwwfHEsMHxVQSwwfFNBKSksMHxvKCksMHxoQSwwfE4pKSwwfG8oKSwtMjA5NzE1MiZEQXwwLDB8dikpLDB8bygpLDB8cUEsMHxaQSkscUE9MHxvKCksSz0wfFVnKDB8SiwwfCQsLTIwOTcxNTImZ3wwLDB8SyksZz0wfG8oKSxHPTB8dmcoMHwodj0wfGlnKDB8KCQ9MHx2ZygwfGQsMHxtLDEwNDg1NzYsMCkpLDB8KEo9MHxvKCkpLDIxKSksMHxvKCksMHxwQSwwfEcpLHBBPTB8bygpLEo9MHxVZygwfGQsMHxtLC0yMDk3MTUyJiR8MCwwfEopLCQ9MHxvKCksdj0wfGlnKDB8KG09MHx2ZygwfHRBLDB8ZkEsMTA0ODU3NiwwKSksMHwoZD0wfG8oKSksMjEpLERBPTB8bygpLFNBPTB8aWcoMHwoTj0wfHZnKDB8UCwwfGFBLDEwNDg1NzYsMCkpLDB8KGhBPTB8bygpKSwyMSksVUE9MHxvKCksZUE9MHx2ZygwfChXPTB8aWcoMHwocT0wfHZnKDB8UywwfEksMTA0ODU3NiwwKSksMHwoc0E9MHxvKCkpLDIxKSksMHxvKCksMHxpQSwwfGVBKSxpQT0wfG8oKSxzQT0wfFVnKDB8UywwfEksLTIwOTcxNTImcXwwLDB8c0EpLHE9MHxvKCksZz0wfHZnKDB8KFc9MHxpZygwfChJPTB8dmcoMHxqLDB8VCwxMDQ4NTc2LDApKSwwfChTPTB8bygpKSwyMSkpLDB8bygpLDB8SywwfGcpLEs9MHxvKCksUz0wfFVnKDB8aiwwfFQsLTIwOTcxNTImSXwwLDB8UyksST0wfG8oKSwkPTB8dmcoMHwoVz0wfGlnKDB8KFQ9MHx2ZygwfFpBLDB8cUEsMTA0ODU3NiwwKSksMHwoaj0wfG8oKSksMjEpKSwwfG8oKSwwfEosMHwkKSxKPTB8bygpLGo9MHxVZygwfFpBLDB8cUEsLTIwOTcxNTImVHwwLDB8aiksVD0wfG8oKSxxQT0wfHZnKDB8JEEsMHxCQSwwfChxQT0wfFFnKDB8RywwfHBBLDY2NjY0MywwKSksMHxvKCkpLEJBPTB8bygpLCRBPTB8UWcoMHxHLDB8cEEsNDcwMjk2LDApLFpBPTB8bygpLFc9MHxRZygwfEcsMHxwQSw2NTQxODMsMCksej0wfG8oKSxfPTB8UWcoMHxHLDB8cEEsLTk5NzgwNSwtMSksUj0wfG8oKSxiPTB8UWcoMHxHLDB8cEEsMTM2NjU3LDApLEVBPTB8bygpLHg9MHxVZygwfChVQT0wfHZnKDB8KHBBPTB8dmcoMHxNLDB8VEEsMHwocEE9MHxRZygwfEcsMHxwQSwtNjgzOTAxLC0xKSksMHxvKCkpKSwwfG8oKSwwfFNBLDB8VUEpKSwwfG8oKSwtMjA5NzE1MiZYfDAsMHx4KSxYPTB8bygpLFVBPTB8UWcoMHwkLDB8Siw2NjY2NDMsMCksU0E9MHxvKCkscEE9MHx2ZygwfHFBLDB8QkEsMHwocEE9MHxRZygwfCQsMHxKLDQ3MDI5NiwwKSksMHxvKCkpLEJBPTB8bygpLHFBPTB8UWcoMHwkLDB8Siw2NTQxODMsMCksVEE9MHxvKCksTT0wfFFnKDB8JCwwfEosLTk5NzgwNSwtMSksRz0wfG8oKSx1QT0wfFFnKDB8JCwwfEosMTM2NjU3LDApLEw9MHxvKCksSj0wfFFnKDB8JCwwfEosLTY4MzkwMSwtMSksJD0wfG8oKSxrQT0wfHZnKDB8TUEsMHxIQSwwfChrQT0wfFFnKDB8aiwwfFQsNjY2NjQzLDApKSwwfG8oKSksSEE9MHxvKCksTUE9MHxRZygwfGosMHxULDQ3MDI5NiwwKSxZQT0wfG8oKSxnQT0wfHZnKDB8cEEsMHxCQSwwfChnQT0wfFFnKDB8aiwwfFQsNjU0MTgzLDApKSwwfG8oKSksQkE9MHxvKCkscEE9MHxRZygwfGosMHxULC05OTc4MDUsLTEpLEZBPTB8bygpLEM9MHxRZygwfGosMHxULDEzNjY1NywwKSxWPTB8bygpLFQ9MHxRZygwfGosMHxULC02ODM5MDEsLTEpLGo9MHxvKCksaj0wfHZnKDB8KEw9MHx2ZygwfChaPTB8VWcoMHwoREE9MHx2ZygwfChSPTB8dmcoMHxfQSwwfGxBLDB8XywwfFIpKSwwfG8oKSwwfHYsMHxEQSkpLDB8bygpLC0yMDk3MTUyJk98MCwwfFopKSwwfG8oKSwwfHVBLDB8TCkpLDB8bygpLDB8VCwwfGopLFQ9MHxvKCksTD0wfFFnKDB8ZywwfEssNjY2NjQzLDApLHVBPTB8bygpLFo9MHxRZygwfGcsMHxLLDQ3MDI5NiwwKSxPPTB8bygpLERBPTB8UWcoMHxnLDB8Syw2NTQxODMsMCksdj0wfG8oKSxSPTB8UWcoMHxnLDB8SywtOTk3ODA1LC0xKSxfPTB8bygpLGxBPTB8UWcoMHxnLDB8SywxMzY2NTcsMCksX0E9MHxvKCksSz0wfFFnKDB8ZywwfEssLTY4MzkwMSwtMSksZz0wfG8oKSxjQT0wfFFnKDB8UywwfEksNjY2NjQzLDApLG9BPTB8bygpLHdBPTB8UWcoMHxTLDB8SSw0NzAyOTYsMCkseUE9MHxvKCksQUE9MHxRZygwfFMsMHxJLDY1NDE4MywwKSxJQT0wfG8oKSxDQT0wfFFnKDB8UywwfEksLTk5NzgwNSwtMSksUUE9MHxvKCksVT0wfFFnKDB8UywwfEksMTM2NjU3LDApLFk9MHxvKCksST0wfFFnKDB8UywwfEksLTY4MzkwMSwtMSksUz0wfG8oKSxTPTB8dmcoMHwoX0E9MHx2ZygwfChGQT0wfHZnKDB8KFRBPTB8dmcoMHwoVkE9MHxVZygwfChXQT0wfHZnKDB8JEEsMHxaQSwwfE9BLDB8V0EpKSwwfG8oKSwtMjA5NzE1MiZ6QXwwLDB8VkEpKSwwfG8oKSwwfHFBLDB8VEEpKSwwfG8oKSwwfHBBLDB8RkEpKSwwfG8oKSwwfGxBLDB8X0EpKSwwfG8oKSwwfEksMHxTKSxJPTB8bygpLG5BPTB8dmcoMHwoX0E9MHxRZygwfGVBLDB8aUEsNjY2NjQzLDApKSwwfG8oKSwwfHJBLDB8bkEpLHJBPTB8bygpLF9BPTB8UWcoMHxlQSwwfGlBLDQ3MDI5NiwwKSxsQT0wfG8oKSxGQT0wfFFnKDB8ZUEsMHxpQSw2NTQxODMsMCkscEE9MHxvKCkseUE9MHx2ZygwfCh1QT0wfHZnKDB8KHBBPTB8dmcoMHwobUE9MHxVZygwfCh4QT0wfHZnKDB8akEsMHxYQSwwfEtBLDB8eEEpKSwwfG8oKSwtMjA5NzE1MiZMQXwwLDB8bUEpKSwwfG8oKSwwfEZBLDB8cEEpKSwwfG8oKSwwfEwsMHx1QSkpLDB8bygpLDB8d0EsMHx5QSksd0E9MHxvKCksdUE9MHxRZygwfGVBLDB8aUEsLTk5NzgwNSwtMSksTD0wfG8oKSxwQT0wfFFnKDB8ZUEsMHxpQSwxMzY2NTcsMCksRkE9MHxvKCksUUE9MHx2ZygwfCh2PTB8dmcoMHwoRkE9MHx2ZygwfChZQT0wfHZnKDB8KFNBPTB8dmcoMHwodkE9MHxVZygwfChKQT0wfHZnKDB8TkEsMHxSQSwwfFBBLDB8SkEpKSwwfG8oKSwtMjA5NzE1MiZiQXwwLDB8dkEpKSwwfG8oKSwwfFVBLDB8U0EpKSwwfG8oKSwwfE1BLDB8WUEpKSwwfG8oKSwwfHBBLDB8RkEpKSwwfG8oKSwwfERBLDB8dikpLDB8bygpLDB8Q0EsMHxRQSksQ0E9MHxvKCksaUE9MHxRZygwfGVBLDB8aUEsLTY4MzkwMSwtMSksZUE9MHxvKCksRkE9MHxpZygwfCh2PTB8dmcoMHxuQSwwfHJBLDEwNDg1NzYsMCkpLDB8KERBPTB8bygpKSwyMSkscEE9MHxvKCkscEE9MHx2ZygwfChvQT0wfHZnKDB8KGxBPTB8dmcoMHxkQSwwfEdBLDB8X0EsMHxsQSkpLDB8bygpLDB8Y0EsMHxvQSkpLDB8bygpLDB8RkEsMHxwQSksRkE9MHxvKCksREE9MHxVZygwfG5BLDB8ckEsLTIwOTcxNTImdnwwLDB8REEpLHY9MHxvKCksb0E9MHxpZygwfChyQT0wfHZnKDB8eUEsMHx3QSwxMDQ4NTc2LDApKSwwfChuQT0wfG8oKSksMjEpLGNBPTB8bygpLGNBPTB8dmcoMHwoSUE9MHx2ZygwfChPPTB8dmcoMHwoTD0wfHZnKDB8a0EsMHxIQSwwfHVBLDB8TCkpLDB8bygpLDB8WiwwfE8pKSwwfG8oKSwwfEFBLDB8SUEpKSwwfG8oKSwwfG9BLDB8Y0EpLG9BPTB8bygpLE89MHxpZygwfChJQT0wfHZnKDB8UUEsMHxDQSwxMDQ4NTc2LDApKSwwfChBQT0wfG8oKSksMjEpLFo9MHxvKCksWj0wfHZnKDB8KFk9MHx2ZygwfChfPTB8dmcoMHwoZUE9MHx2ZygwfGdBLDB8QkEsMHxpQSwwfGVBKSksMHxvKCksMHxSLDB8XykpLDB8bygpLDB8VSwwfFkpKSwwfG8oKSwwfE8sMHxaKSxPPTB8bygpLF89MHxpZygwfChZPTB8dmcoMHxTLDB8SSwxMDQ4NTc2LDApKSwwfChVPTB8bygpKSwyMSksUj0wfG8oKSxSPTB8dmcoMHwoZz0wfHZnKDB8KFY9MHx2ZygwfChHPTB8dmcoMHwoZD0wfFVnKDB8KHo9MHx2ZygwfHRBLDB8ZkEsMHxXLDB8eikpLDB8bygpLC0yMDk3MTUyJm18MCwwfGQpKSwwfG8oKSwwfE0sMHxHKSksMHxvKCksMHxDLDB8VikpLDB8bygpLDB8SywwfGcpKSwwfG8oKSwwfF8sMHxSKSxfPTB8bygpLFU9MHxVZygwfFMsMHxJLC0yMDk3MTUyJll8MCwwfFUpLFk9MHxvKCksZz0wfGlnKDB8KEk9MHx2ZygwfGosMHxULDEwNDg1NzYsMCkpLDB8KFM9MHxvKCkpLDIxKSxLPTB8bygpLEs9MHx2ZygwfChoQT0wfFVnKDB8KGFBPTB8dmcoMHwoRUE9MHx2ZygwfEosMHwkLDB8YiwwfEVBKSksMHxvKCksMHxQLDB8YUEpKSwwfG8oKSwtMjA5NzE1MiZOfDAsMHxoQSkpLDB8bygpLDB8ZywwfEspLGc9MHxvKCksUz0wfFVnKDB8aiwwfFQsLTIwOTcxNTImSXwwLDB8UyksST0wfG8oKSxoQT0wfHZnKDB8c0EsMHxxLDB8KGhBPTB8aWcoMHwoVD0wfHZnKDB8eCwwfFgsMTA0ODU3NiwwKSksMHwoaj0wfG8oKSksMjEpKSwwfG8oKSkscT0wfG8oKSxhQT0wfGlnKDB8KHNBPTB8dmcoMHxwQSwwfEZBLDEwNDg1NzYsMCkpLDB8KE49MHxvKCkpLDIxKSxQPTB8bygpLCQ9MHxpZygwfChFQT0wfHZnKDB8Y0EsMHxvQSwxMDQ4NTc2LDApKSwwfChiPTB8bygpKSwyMSksSj0wfG8oKSxHPTB8dmcoMHxVLDB8WSwwfChHPTB8aWcoMHwoVj0wfHZnKDB8WiwwfE8sMTA0ODU3NiwwKSksMHwoQz0wfG8oKSksMjEpKSwwfG8oKSksWT0wfG8oKSxkPTB8dmcoMHxTLDB8SSwwfChkPTB8aWcoMHwoVT0wfHZnKDB8UiwwfF8sMTA0ODU3NiwwKSksMHwoTT0wfG8oKSksMjEpKSwwfG8oKSksST0wfG8oKSxNPTB8VWcoMHxSLDB8XywtMjA5NzE1MiZVfDAsMHxNKSxVPTB8bygpLFM9MHxpZygwfChfPTB8dmcoMHxLLDB8ZywxMDQ4NTc2LDApKSwwfChSPTB8bygpKSwyMSksbT0wfG8oKSxSPTB8VWcoMHxLLDB8ZywtMjA5NzE1MiZffDAsMHxSKSxfPTB8bygpLHo9MHxpZygwfChnPTB8dmcoMHxoQSwwfHEsMTA0ODU3NiwwKSksMHwoSz0wfG8oKSksMjEpLFc9MHxvKCksSz0wfFVnKDB8aEEsMHxxLC0yMDk3MTUyJmd8MCwwfEspLGc9MHxvKCkscT0wfHZnKDB8REEsMHx2LDB8KHE9MHxRZygwfHosMHxXLDY2NjY0MywwKSksMHxvKCkpLHY9MHxvKCksREE9MHxRZygwfHosMHxXLDQ3MDI5NiwwKSxoQT0wfG8oKSxmQT0wfFFnKDB8eiwwfFcsNjU0MTgzLDApLHRBPTB8bygpLGVBPTB8UWcoMHx6LDB8VywtOTk3ODA1LC0xKSxpQT0wfG8oKSxCQT0wfFFnKDB8eiwwfFcsMTM2NjU3LDApLGdBPTB8bygpLFc9MHxRZygwfHosMHxXLC02ODM5MDEsLTEpLHo9MHxvKCksdj0wfGlnKDB8cSwwfHYsMjEpLEw9MHxvKCksdj0wfGlnKDB8KEw9MHx2ZygwfChOPTB8VWcoMHwoaEE9MHx2ZygwfHBBLDB8RkEsMHxEQSwwfGhBKSksMHxvKCksLTIwOTcxNTImc0F8MCwwfE4pKSwwfG8oKSwwfHYsMHxMKSksMHxvKCksMjEpLE49MHxvKCksdj0wfGlnKDB8KE49MHx2ZygwfChQPTB8dmcoMHwobkE9MHxVZygwfCh0QT0wfHZnKDB8eUEsMHx3QSwwfGZBLDB8dEEpKSwwfG8oKSwtMjA5NzE1MiZyQXwwLDB8bkEpKSwwfG8oKSwwfGFBLDB8UCkpLDB8bygpLDB8diwwfE4pKSwwfG8oKSwyMSksUD0wfG8oKSx2PTB8aWcoMHwoUD0wfHZnKDB8KGI9MHxVZygwfChpQT0wfHZnKDB8Y0EsMHxvQSwwfGVBLDB8aUEpKSwwfG8oKSwtMjA5NzE1MiZFQXwwLDB8YikpLDB8bygpLDB8diwwfFApKSwwfG8oKSwyMSksYj0wfG8oKSx2PTB8aWcoMHwoYj0wfHZnKDB8KEo9MHx2ZygwfChBQT0wfFVnKDB8KGdBPTB8dmcoMHxRQSwwfENBLDB8QkEsMHxnQSkpLDB8bygpLC0yMDk3MTUyJklBfDAsMHxBQSkpLDB8bygpLDB8JCwwfEopKSwwfG8oKSwwfHYsMHxiKSksMHxvKCksMjEpLEo9MHxvKCksUj0wfGlnKDB8KF89MHx2ZygwfChJPTB8aWcoMHwoTT0wfHZnKDB8ZCwwfEksMHwoTT0wfGlnKDB8KFU9MHx2ZygwfChZPTB8aWcoMHwodj0wfHZnKDB8RywwfFksMHwodj0wfGlnKDB8KEo9MHx2ZygwfChDPTB8VWcoMHwoej0wfHZnKDB8WiwwfE8sMHxXLDB8eikpLDB8bygpLC0yMDk3MTUyJlZ8MCwwfEMpKSwwfG8oKSwwfHYsMHxKKSksMHxvKCksMjEpKSwwfG8oKSkpLDB8bygpLDIxKSksMHxvKCksMHxNLDB8VSkpLDB8bygpLDIxKSksMHxvKCkpKSwwfG8oKSwyMSkpLDB8bygpLDB8UiwwfF8pKSwwfG8oKSwyMSksST0wfG8oKSxxPTB8dmcoMHwoaj0wfFFnKDB8KEs9MHxpZygwfChnPTB8dmcoMHwoUj0wfGlnKDB8KEk9MHx2ZygwfChqPTB8VWcoMHwoWD0wfHZnKDB8UywwfG0sMHx4LDB8WCkpLDB8bygpLC0yMDk3MTUyJlR8MCwwfGopKSwwfG8oKSwwfFIsMHxJKSksMHxvKCksMjEpKSwwfG8oKSwwfEssMHxnKSksMHxvKCksMjEpKSwwfChSPTB8bygpKSw2NjY2NDMsMCkpLDB8bygpLDIwOTcxNTEmcXwwLDApLGo9MHxvKCksTD0wfHZnKDB8KFQ9MHxRZygwfEssMHxSLDQ3MDI5NiwwKSksMHxvKCksMjA5NzE1MSZMfDAsMCksVD0wfG8oKSxOPTB8dmcoMHwoWD0wfFFnKDB8SywwfFIsNjU0MTgzLDApKSwwfG8oKSwyMDk3MTUxJk58MCwwKSxYPTB8bygpLFA9MHx2ZygwfCh4PTB8UWcoMHxLLDB8UiwtOTk3ODA1LC0xKSksMHxvKCksMjA5NzE1MSZQfDAsMCkseD0wfG8oKSxiPTB8dmcoMHwobT0wfFFnKDB8SywwfFIsMTM2NjU3LDApKSwwfG8oKSwyMDk3MTUxJmJ8MCwwKSxtPTB8bygpLGc9MHx2ZygwfChDPTB8aWcoMHwoST0wfHZnKDB8KEc9MHxpZygwfChfPTB8dmcoMHwoWT0wfGlnKDB8KE09MHx2ZygwfChkPTB8aWcoMHwoVT0wfHZnKDB8KFM9MHxpZygwfCh2PTB8dmcoMHwoSj0wfGlnKDB8KGI9MHx2ZygwfChKPTB8dmcoMHwoUj0wfFFnKDB8SywwfFIsLTY4MzkwMSwtMSkpLDB8bygpLDIwOTcxNTEmSnwwLDApKSwwfChSPTB8bygpKSwwfChiPTB8aWcoMHwoUD0wfHZnKDB8YiwwfG0sMHwoUD0wfGlnKDB8KE49MHx2ZygwfFAsMHx4LDB8KE49MHxpZygwfChMPTB8dmcoMHxOLDB8WCwwfChMPTB8aWcoMHwoSz0wfHZnKDB8TCwwfFQsMHwoSz0wfGlnKDB8cSwwfGosMjEpKSwwfG8oKSkpLDB8KFQ9MHxvKCkpLDIxKSksMHxvKCkpKSwwfChYPTB8bygpKSwyMSkpLDB8bygpKSksMHwoeD0wfG8oKSksMjEpKSwwfG8oKSkpLDB8KG09MHxvKCkpLDIxKSksMHxvKCkpKSwwfChSPTB8bygpKSwyMSkpLDB8bygpLDIwOTcxNTEmdnwwLDApKSwwfChKPTB8bygpKSwyMSkpLDB8bygpLDIwOTcxNTEmVXwwLDApKSwwfChTPTB8bygpKSwyMSkpLDB8bygpLDIwOTcxNTEmTXwwLDApKSwwfChkPTB8bygpKSwyMSkpLDB8bygpLDIwOTcxNTEmX3wwLDApKSwwfChZPTB8bygpKSwyMSkpLDB8bygpLDIwOTcxNTEmSXwwLDApKSwwfChHPTB8bygpKSwyMSkpLDB8bygpLDIwOTcxNTEmZ3wwLDApLEM9MHxvKCksQltBPj4wXT1xLFY9MHx5ZygwfHEsMHxqLDgpLG8oKSxCW0ErMT4+MF09VixqPTB8eWcoMHxxLDB8aiwxNiksbygpLHE9MHxyZygyMDk3MTUxJkt8MCwwLDUpLG8oKSxCW0ErMj4+MF09cXwzMSZqLGo9MHx5ZygwfEssMHxULDMpLG8oKSxCW0ErMz4+MF09aixUPTB8eWcoMHxLLDB8VCwxMSksbygpLEJbQSs0Pj4wXT1ULEs9MHx5ZygyMDk3MTUxJkt8MCwwLDE5KSxUPTB8bygpLGo9MHxyZygyMDk3MTUxJkx8MCwwLDIpLG8oKSxCW0ErNT4+MF09anxLLFg9MHx5ZygwfEwsMHxYLDYpLG8oKSxCW0ErNj4+MF09WCxMPTB8eWcoMjA5NzE1MSZMfDAsMCwxNCksWD0wfG8oKSxLPTB8cmcoMjA5NzE1MSZOfDAsMCw3KSxvKCksQltBKzc+PjBdPUt8TCxMPTB8eWcoMHxOLDB8eCwxKSxvKCksQltBKzg+PjBdPUwseD0wfHlnKDB8TiwwfHgsOSksbygpLEJbQSs5Pj4wXT14LE49MHx5ZygyMDk3MTUxJk58MCwwLDE3KSx4PTB8bygpLEw9MHxyZygyMDk3MTUxJlB8MCwwLDQpLG8oKSxCW0ErMTA+PjBdPUx8TixOPTB8eWcoMHxQLDB8bSw0KSxvKCksQltBKzExPj4wXT1OLG09MHx5ZygwfFAsMHxtLDEyKSxvKCksQltBKzEyPj4wXT1tLFA9MHx5ZygyMDk3MTUxJlB8MCwwLDIwKSxtPTB8bygpLE49MHxyZygyMDk3MTUxJmJ8MCwwLDEpLG8oKSxCW0ErMTM+PjBdPU58UCxSPTB8eWcoMHxiLDB8Uiw3KSxvKCksQltBKzE0Pj4wXT1SLGI9MHx5ZygyMDk3MTUxJmJ8MCwwLDE1KSxSPTB8bygpLFA9MHxyZygyMDk3MTUxJnZ8MCwwLDYpLG8oKSxCW0ErMTU+PjBdPVB8YixiPTB8eWcoMHx2LDB8SiwyKSxvKCksQltBKzE2Pj4wXT1iLEo9MHx5ZygwfHYsMHxKLDEwKSxvKCksQltBKzE3Pj4wXT1KLHY9MHx5ZygyMDk3MTUxJnZ8MCwwLDE4KSxKPTB8bygpLGI9MHxyZygwfFUsMHxTLDMpLG8oKSxCW0ErMTg+PjBdPWJ8dix2PTB8eWcoMHxVLDB8Uyw1KSxvKCksQltBKzE5Pj4wXT12LFM9MHx5ZygwfFUsMHxTLDEzKSxvKCksQltBKzIwPj4wXT1TLEJbQSsyMT4+MF09TSxTPTB8eWcoMHxNLDB8ZCw4KSxvKCksQltBKzIyPj4wXT1TLGQ9MHx5ZygwfE0sMHxkLDE2KSxvKCksTT0wfHJnKDIwOTcxNTEmX3wwLDAsNSksbygpLEJbQSsyMz4+MF09TXwzMSZkLGQ9MHx5ZygwfF8sMHxZLDMpLG8oKSxCW0ErMjQ+PjBdPWQsWT0wfHlnKDB8XywwfFksMTEpLG8oKSxCW0ErMjU+PjBdPVksXz0wfHlnKDIwOTcxNTEmX3wwLDAsMTkpLFk9MHxvKCksZD0wfHJnKDIwOTcxNTEmSXwwLDAsMiksbygpLEJbQSsyNj4+MF09ZHxfLEc9MHx5ZygwfEksMHxHLDYpLG8oKSxCW0ErMjc+PjBdPUcsST0wfHlnKDIwOTcxNTEmSXwwLDAsMTQpLEc9MHxvKCksXz0wfHJnKDB8ZywwfEMsNyksbygpLEJbQSsyOD4+MF09X3xJLEk9MHx5ZygwfGcsMHxDLDEpLG8oKSxCW0ErMjk+PjBdPUksST0wfHlnKDB8ZywwfEMsOSksbygpLEJbQSszMD4+MF09SSxDPTB8aWcoMHxnLDB8QywxNyksbygpLEJbQSszMT4+MF09Q31mdW5jdGlvbiBEKEEsSSxnLEIpe0F8PTAsQnw9MDt2YXIgUT0wLEU9MCxpPTAsZT0wLGM9MCxhPTAsbj0wLHI9MCx0PTAsZj0wLHc9MCx5PTAscz0wLGg9MCxEPTAsRj0wLHA9MCx1PTAsSD0wLGs9MCxsPTAsXz0wLEc9MCxkPTAsWT0wLE09MCxTPTAsVT0wLHY9MCxiPTAsSj0wLFA9MCxSPTAsTj0wLG09MCxMPTAseD0wLEs9MCxYPTA7IWZ1bmN0aW9uKEEsSSl7QXw9MCxJfD0wO3ZhciBnPTAsQj0wLFE9MCxFPTA7Zz0wO2Rve0U9MHxqQShJKyhnPDwzKXwwKSxRPTB8bygpLENbKEI9QSsoZzw8Myl8MCk+PjJdPUUsQ1tCKzQ+PjJdPVEsZz1nKzF8MH13aGlsZSgxNiE9KDB8ZykpfShnfD0wLEl8PTApLFE9QSxFPShJPUIpKzY0fDA7ZG97Q1tJPj4yXT1DW1E+PjJdLEk9SSs0fDAsUT1RKzR8MH13aGlsZSgoMHxJKTwoMHxFKSk7ST0wfENbZz4+Ml0sUT0wfENbZys0Pj4yXSxEPTA7ZG97aWYoeT0wfFpJKEg9MHxDW0IrMzI+PjJdLGU9MHxDW0IrMzIrND4+Ml0sMTQpLHI9MHxvKCksRz0wfFpJKEgsZSwxOCkscj0oMHxvKCkpXnIsTD0wfFpJKEgsZSw0MSkscl49MHxvKCksYj0wfENbQis0MD4+Ml0saT0wfENbQis0MCs0Pj4yXSxoPTB8Q1tCKzQ4Pj4yXSxFPTB8Q1tCKzQ4KzQ+PjJdLGM9MHxDWyhQPTMyNDE2KyhEPDwzKXwwKT4+Ml0sUD0wfENbUCs0Pj4yXSx0PTB8Q1tCKzU2Pj4yXSx1PTB8Q1tCKzU2KzQ+PjJdLFA9MHx2ZygwfCh1PTB8dmcoMHwoUD0wfHZnKDB8KFA9MHx2ZygwfChyPTB8dmcoMHxJLDB8USxHXnleTHwwLDB8cikpLDB8bygpLDB8YywwfFApKSwwfG8oKSwoaF5iKSZIXmh8MCwoRV5pKSZlXkV8MCkpLDB8bygpLDB8dCwwfHUpKSwwfCh0PTB8bygpKSwwfENbQisyND4+Ml0sMHxDW0IrMjQrND4+Ml0pLGM9MHxvKCksQ1tCKzI0Pj4yXT1QLENbQisyNCs0Pj4yXT1jLHk9MHxaSShyPTB8Q1tCPj4yXSxMPTB8Q1tCKzQ+PjJdLDI4KSxJPTB8bygpLEc9MHxaSShyLEwsMzQpLEk9KDB8bygpKV5JLFU9MHxaSShyLEwsMzkpLElePTB8bygpLG49MHxDW0IrOD4+Ml0sbT0wfENbQis4KzQ+PjJdLGE9MHxDW0IrMTY+PjJdLE49MHxDW0IrMTYrND4+Ml0sdD0wfHZnKDB8KHQ9MHx2ZyhHXnleVXwwLDB8SSwwfHUsMHx0KSksMHxvKCksKGF8bikmcnxhJm58MCwoTnxtKSZMfE4mbXwwKSx1PTB8bygpLENbQis1Nj4+Ml09dCxDW0IrNTYrND4+Ml09dSxJPTB8WkkoUCxjLDE0KSxVPTB8bygpLHk9MHxaSShQLGMsMTgpLFU9KDB8bygpKV5VLEc9MHxaSShQLGMsNDEpLFVePTB8bygpLGY9MHxDW2crKCh3PTF8RCk8PDMpPj4yXSxRPTB8Q1tnKyh3PDwzKSs0Pj4yXSxzPTB8Q1szMjQxNisodzw8Myk+PjJdLGQ9MHxDWzMyNDE2Kyh3PDwzKSs0Pj4yXSxOPTB8dmcoMHwoZD0wfHZnKDB8KFE9MHx2ZygwfChVPTB8dmcoMHwoRT0wfHZnKFAmKGJeSCleYnwwLGMmKGleZSleaXwwLDB8aCwwfEUpKSwwfG8oKSx5XkleR3wwLDB8VSkpLDB8bygpLDB8ZiwwfFEpKSwwfG8oKSwwfHMsMHxkKSksMHwocz0wfG8oKSksMHxhLDB8TiksYT0wfG8oKSxDW0IrMTY+PjJdPU4sQ1tCKzE2KzQ+PjJdPWEsUT0wfFpJKHQsdSwyOCksZj0wfG8oKSxVPTB8WkkodCx1LDM0KSxmPSgwfG8oKSleZixHPTB8WkkodCx1LDM5KSxmXj0wfG8oKSxmPTB8dmcoMHwocz0wfHZnKDB8ZCwwfHMsdCYobnxyKXxuJnJ8MCx1JihtfEwpfG0mTHwwKSksMHxvKCksVV5RXkd8MCwwfGYpLEc9MHxvKCksQ1tCKzQ4Pj4yXT1mLENbQis0OCs0Pj4yXT1HLFE9MHxaSShOLGEsMTQpLFU9MHxvKCkscz0wfFpJKE4sYSwxOCksVT0oMHxvKCkpXlUsZD0wfFpJKE4sYSw0MSksVV49MHxvKCkseT0wfENbZysoKEk9MnxEKTw8Myk+PjJdLEU9MHxDW2crKEk8PDMpKzQ+PjJdLGg9MHxDWzMyNDE2KyhJPDwzKT4+Ml0sWT0wfENbMzI0MTYrKEk8PDMpKzQ+PjJdLG09MHx2ZygwfChZPTB8dmcoMHwoRT0wfHZnKDB8KFU9MHx2ZygwfChpPTB8dmcoTiYoUF5IKV5IfDAsYSYoY15lKV5lfDAsMHxiLDB8aSkpLDB8bygpLHNeUV5kfDAsMHxVKSksMHxvKCksMHx5LDB8RSkpLDB8bygpLDB8aCwwfFkpKSwwfChoPTB8bygpKSwwfG4sMHxtKSxuPTB8bygpLENbQis4Pj4yXT1tLENbQis4KzQ+PjJdPW4sRT0wfFpJKGYsRywyOCkseT0wfG8oKSxVPTB8WkkoZixHLDM0KSx5PSgwfG8oKSleeSxkPTB8WkkoZixHLDM5KSx5Xj0wfG8oKSx5PTB8dmcoMHwoaD0wfHZnKDB8WSwwfGgsZiYodHxyKXx0JnJ8MCxHJih1fEwpfHUmTHwwKSksMHxvKCksVV5FXmR8MCwwfHkpLGQ9MHxvKCksQ1tCKzQwPj4yXT15LENbQis0MCs0Pj4yXT1kLEU9MHxaSShtLG4sMTQpLFU9MHxvKCksaD0wfFpJKG0sbiwxOCksVT0oMHxvKCkpXlUsWT0wfFpJKG0sbiw0MSksVV49MHxvKCkscz0wfENbZysoKFE9M3xEKTw8Myk+PjJdLGk9MHxDW2crKFE8PDMpKzQ+PjJdLGI9MHxDWzMyNDE2KyhRPDwzKT4+Ml0sRj0wfENbMzI0MTYrKFE8PDMpKzQ+PjJdLEw9MHx2ZygwfChGPTB8dmcoMHwoaT0wfHZnKDB8KFU9MHx2ZygwfChlPTB8dmcobSYoTl5QKV5QfDAsbiYoYV5jKV5jfDAsMHxILDB8ZSkpLDB8bygpLGheRV5ZfDAsMHxVKSksMHxvKCksMHxzLDB8aSkpLDB8bygpLDB8YiwwfEYpKSwwfChiPTB8bygpKSwwfHIsMHxMKSxyPTB8bygpLENbQj4+Ml09TCxDW0IrND4+Ml09cixpPTB8WkkoeSxkLDI4KSxzPTB8bygpLFU9MHxaSSh5LGQsMzQpLHM9KDB8bygpKV5zLFk9MHxaSSh5LGQsMzkpLHNePTB8bygpLHM9MHx2ZygwfChiPTB8dmcoMHxGLDB8Yix5JihmfHQpfGYmdHwwLGQmKEd8dSl8RyZ1fDApKSwwfG8oKSxVXmleWXwwLDB8cyksWT0wfG8oKSxDW0IrMzI+PjJdPXMsQ1tCKzMyKzQ+PjJdPVksaT0wfFpJKEwsciwxNCksVT0wfG8oKSxiPTB8WkkoTCxyLDE4KSxVPSgwfG8oKSleVSxGPTB8WkkoTCxyLDQxKSxVXj0wfG8oKSxoPTB8Q1tnKygoRT00fEQpPDwzKT4+Ml0sZT0wfENbZysoRTw8MykrND4+Ml0sSD0wfENbMzI0MTYrKEU8PDMpPj4yXSxKPTB8Q1szMjQxNisoRTw8MykrND4+Ml0sdT0wfHZnKDB8KEo9MHx2ZygwfChlPTB8dmcoMHwoVT0wfHZnKDB8KGM9MHx2ZyhMJihtXk4pXk58MCxyJihuXmEpXmF8MCwwfFAsMHxjKSksMHxvKCksYl5pXkZ8MCwwfFUpKSwwfG8oKSwwfGgsMHxlKSksMHxvKCksMHxILDB8SikpLDB8KEg9MHxvKCkpLDB8dCwwfHUpLHQ9MHxvKCksQ1tCKzU2Pj4yXT11LENbQis1Nis0Pj4yXT10LGU9MHxaSShzLFksMjgpLGg9MHxvKCksVT0wfFpJKHMsWSwzNCksaD0oMHxvKCkpXmgsRj0wfFpJKHMsWSwzOSksaF49MHxvKCksaD0wfHZnKDB8KEg9MHx2ZygwfEosMHxILHMmKHl8Zil8eSZmfDAsWSYoZHxHKXxkJkd8MCkpLDB8bygpLFVeZV5GfDAsMHxoKSxGPTB8bygpLENbQisyND4+Ml09aCxDW0IrMjQrND4+Ml09RixlPTB8WkkodSx0LDE0KSxVPTB8bygpLEg9MHxaSSh1LHQsMTgpLFU9KDB8bygpKV5VLEo9MHxaSSh1LHQsNDEpLFVePTB8bygpLGI9MHxDW2crKChpPTV8RCk8PDMpPj4yXSxjPTB8Q1tnKyhpPDwzKSs0Pj4yXSxQPTB8Q1szMjQxNisoaTw8Myk+PjJdLE09MHxDWzMyNDE2KyhpPDwzKSs0Pj4yXSxHPTB8dmcoMHwoTT0wfHZnKDB8KGM9MHx2ZygwfChVPTB8dmcoMHwoYT0wfHZnKHUmKExebSlebXwwLHQmKHJebilebnwwLDB8TiwwfGEpKSwwfG8oKSxIXmVeSnwwLDB8VSkpLDB8bygpLDB8YiwwfGMpKSwwfG8oKSwwfFAsMHxNKSksMHwoUD0wfG8oKSksMHxmLDB8RyksZj0wfG8oKSxDW0IrNDg+PjJdPUcsQ1tCKzQ4KzQ+PjJdPWYsYz0wfFpJKGgsRiwyOCksYj0wfG8oKSxVPTB8WkkoaCxGLDM0KSxiPSgwfG8oKSleYixKPTB8WkkoaCxGLDM5KSxiXj0wfG8oKSxiPTB8dmcoMHwoUD0wfHZnKDB8TSwwfFAsaCYoc3x5KXxzJnl8MCxGJihZfGQpfFkmZHwwKSksMHxvKCksVV5jXkp8MCwwfGIpLEo9MHxvKCksQ1tCKzE2Pj4yXT1iLENbQisxNis0Pj4yXT1KLGM9MHxaSShHLGYsMTQpLFU9MHxvKCksUD0wfFpJKEcsZiwxOCksVT0oMHxvKCkpXlUsTT0wfFpJKEcsZiw0MSksVV49MHxvKCksSD0wfENbZysoKGU9NnxEKTw8Myk+PjJdLGE9MHxDW2crKGU8PDMpKzQ+PjJdLE49MHxDWzMyNDE2KyhlPDwzKT4+Ml0sUj0wfENbMzI0MTYrKGU8PDMpKzQ+PjJdLGQ9MHx2ZygwfChSPTB8dmcoMHwoYT0wfHZnKDB8KFU9MHx2ZygwfChuPTB8dmcoRyYodV5MKV5MfDAsZiYodF5yKV5yfDAsMHxtLDB8bikpLDB8bygpLFBeY15NfDAsMHxVKSksMHxvKCksMHxILDB8YSkpLDB8bygpLDB8TiwwfFIpKSwwfChOPTB8bygpKSwwfHksMHxkKSx5PTB8bygpLENbQis0MD4+Ml09ZCxDW0IrNDArND4+Ml09eSxhPTB8WkkoYixKLDI4KSxIPTB8bygpLFU9MHxaSShiLEosMzQpLEg9KDB8bygpKV5ILE09MHxaSShiLEosMzkpLEhePTB8bygpLEg9MHx2ZygwfChOPTB8dmcoMHxSLDB8TixiJihofHMpfGgmc3wwLEomKEZ8WSl8RiZZfDApKSwwfG8oKSxVXmFeTXwwLDB8SCksTT0wfG8oKSxDW0IrOD4+Ml09SCxDW0IrOCs0Pj4yXT1NLGE9MHxaSShkLHksMTQpLFU9MHxvKCksTj0wfFpJKGQseSwxOCksVT0oMHxvKCkpXlUsUj0wfFpJKGQseSw0MSksVV49MHxvKCksUD0wfENbZysoKGM9N3xEKTw8Myk+PjJdLG49MHxDW2crKGM8PDMpKzQ+PjJdLG09MHxDWzMyNDE2KyhjPDwzKT4+Ml0seD0wfENbMzI0MTYrKGM8PDMpKzQ+PjJdLFk9MHx2ZygwfCh4PTB8dmcoMHwobj0wfHZnKDB8KFU9MHx2ZygwfChyPTB8dmcoZCYoR151KV51fDAseSYoZl50KV50fDAsMHxMLDB8cikpLDB8bygpLE5eYV5SfDAsMHxVKSksMHxvKCksMHxQLDB8bikpLDB8bygpLDB8bSwwfHgpKSwwfChtPTB8bygpKSwwfHMsMHxZKSxzPTB8bygpLENbQiszMj4+Ml09WSxDW0IrMzIrND4+Ml09cyxuPTB8WkkoSCxNLDI4KSxQPTB8bygpLFU9MHxaSShILE0sMzQpLFA9KDB8bygpKV5QLFI9MHxaSShILE0sMzkpLFBePTB8bygpLFA9MHx2ZygwfChtPTB8dmcoMHx4LDB8bSxIJihifGgpfGImaHwwLE0mKEp8Ril8SiZGfDApKSwwfG8oKSxVXm5eUnwwLDB8UCksUj0wfG8oKSxDW0I+PjJdPVAsQ1tCKzQ+PjJdPVIsbj0wfFpJKFkscywxNCksVT0wfG8oKSxtPTB8WkkoWSxzLDE4KSxVPSgwfG8oKSleVSx4PTB8WkkoWSxzLDQxKSxVXj0wfG8oKSxOPTB8Q1tnKygoYT04fEQpPDwzKT4+Ml0scj0wfENbZysoYTw8MykrND4+Ml0sTD0wfENbMzI0MTYrKGE8PDMpPj4yXSxLPTB8Q1szMjQxNisoYTw8MykrND4+Ml0sRj0wfHZnKDB8KEs9MHx2ZygwfChyPTB8dmcoMHwoVT0wfHZnKDB8KHQ9MHx2ZyhZJihkXkcpXkd8MCxzJih5XmYpXmZ8MCwwfHUsMHx0KSksMHxvKCksbV5uXnh8MCwwfFUpKSwwfG8oKSwwfE4sMHxyKSksMHxvKCksMHxMLDB8SykpLDB8KEw9MHxvKCkpLDB8aCwwfEYpLGg9MHxvKCksQ1tCKzI0Pj4yXT1GLENbQisyNCs0Pj4yXT1oLHI9MHxaSShQLFIsMjgpLE49MHxvKCksVT0wfFpJKFAsUiwzNCksTj0oMHxvKCkpXk4seD0wfFpJKFAsUiwzOSksTl49MHxvKCksTj0wfHZnKDB8KEw9MHx2ZygwfEssMHxMLFAmKEh8Yil8SCZifDAsUiYoTXxKKXxNJkp8MCkpLDB8bygpLFVecl54fDAsMHxOKSx4PTB8bygpLENbQis1Nj4+Ml09TixDW0IrNTYrND4+Ml09eCxyPTB8WkkoRixoLDE0KSxVPTB8bygpLEw9MHxaSShGLGgsMTgpLFU9KDB8bygpKV5VLEs9MHxaSShGLGgsNDEpLFVePTB8bygpLG09MHxDW2crKChuPTl8RCk8PDMpPj4yXSx0PTB8Q1tnKyhuPDwzKSs0Pj4yXSx1PTB8Q1szMjQxNisobjw8Myk+PjJdLFg9MHxDWzMyNDE2KyhuPDwzKSs0Pj4yXSxKPTB8dmcoMHwoWD0wfHZnKDB8KHQ9MHx2ZygwfChVPTB8dmcoMHwoZj0wfHZnKEYmKFleZCleZHwwLGgmKHNeeSleeXwwLDB8RywwfGYpKSwwfG8oKSxMXnJeS3wwLDB8VSkpLDB8bygpLDB8bSwwfHQpKSwwfG8oKSwwfHUsMHxYKSksMHwodT0wfG8oKSksMHxiLDB8SiksYj0wfG8oKSxDW0IrMTY+PjJdPUosQ1tCKzE2KzQ+PjJdPWIsdD0wfFpJKE4seCwyOCksbT0wfG8oKSxVPTB8WkkoTix4LDM0KSxtPSgwfG8oKSlebSxLPTB8WkkoTix4LDM5KSxtXj0wfG8oKSxtPTB8dmcoMHwodT0wfHZnKDB8WCwwfHUsTiYoUHxIKXxQJkh8MCx4JihSfE0pfFImTXwwKSksMHxvKCksVV50Xkt8MCwwfG0pLEs9MHxvKCksQ1tCKzQ4Pj4yXT1tLENbQis0OCs0Pj4yXT1LLHQ9MHxaSShKLGIsMTQpLFU9MHxvKCksdT0wfFpJKEosYiwxOCksVT0oMHxvKCkpXlUsWD0wfFpJKEosYiw0MSksVV49MHxvKCksTD0wfENbZysoKHI9MTB8RCk8PDMpPj4yXSxmPTB8Q1tnKyhyPDwzKSs0Pj4yXSxHPTB8Q1szMjQxNisocjw8Myk+PjJdLHA9MHxDWzMyNDE2KyhyPDwzKSs0Pj4yXSxNPTB8dmcoMHwocD0wfHZnKDB8KGY9MHx2ZygwfChVPTB8dmcoMHwoeT0wfHZnKEomKEZeWSleWXwwLGImKGhecylec3wwLDB8ZCwwfHkpKSwwfG8oKSx1XnReWHwwLDB8VSkpLDB8bygpLDB8TCwwfGYpKSwwfG8oKSwwfEcsMHxwKSksMHwoRz0wfG8oKSksMHxILDB8TSksSD0wfG8oKSxDW0IrOD4+Ml09TSxDW0IrOCs0Pj4yXT1ILGY9MHxaSShtLEssMjgpLEw9MHxvKCksVT0wfFpJKG0sSywzNCksTD0oMHxvKCkpXkwsWD0wfFpJKG0sSywzOSksTF49MHxvKCksTD0wfHZnKDB8KEc9MHx2ZygwfHAsMHxHLG0mKE58UCl8TiZQfDAsSyYoeHxSKXx4JlJ8MCkpLDB8bygpLFVeZl5YfDAsMHxMKSxYPTB8bygpLENbQis0MD4+Ml09TCxDW0IrNDArND4+Ml09WCxmPTB8WkkoTSxILDE0KSxVPTB8bygpLEc9MHxaSShNLEgsMTgpLFU9KDB8bygpKV5VLHA9MHxaSShNLEgsNDEpLFVePTB8bygpLHU9MHxDW2crKCh0PTExfEQpPDwzKT4+Ml0seT0wfENbZysodDw8MykrND4+Ml0sZD0wfENbMzI0MTYrKHQ8PDMpPj4yXSxrPTB8Q1szMjQxNisodDw8MykrND4+Ml0sUj0wfHZnKDB8KGs9MHx2ZygwfCh5PTB8dmcoMHwoVT0wfHZnKDB8KHM9MHx2ZyhNJihKXkYpXkZ8MCxIJihiXmgpXmh8MCwwfFksMHxzKSksMHxvKCksR15mXnB8MCwwfFUpKSwwfG8oKSwwfHUsMHx5KSksMHxvKCksMHxkLDB8aykpLDB8KGQ9MHxvKCkpLDB8UCwwfFIpLFA9MHxvKCksQ1tCPj4yXT1SLENbQis0Pj4yXT1QLHk9MHxaSShMLFgsMjgpLHU9MHxvKCksVT0wfFpJKEwsWCwzNCksdT0oMHxvKCkpXnUscD0wfFpJKEwsWCwzOSksdV49MHxvKCksdT0wfHZnKDB8KGQ9MHx2ZygwfGssMHxkLEwmKG18Til8bSZOfDAsWCYoS3x4KXxLJnh8MCkpLDB8bygpLFVeeV5wfDAsMHx1KSxwPTB8bygpLENbQiszMj4+Ml09dSxDW0IrMzIrND4+Ml09cCx5PTB8WkkoUixQLDE0KSxVPTB8bygpLGQ9MHxaSShSLFAsMTgpLFU9KDB8bygpKV5VLGs9MHxaSShSLFAsNDEpLFVePTB8bygpLEc9MHxDW2crKChmPTEyfEQpPDwzKT4+Ml0scz0wfENbZysoZjw8MykrND4+Ml0sWT0wfENbMzI0MTYrKGY8PDMpPj4yXSxsPTB8Q1szMjQxNisoZjw8MykrND4+Ml0seD0wfHZnKDB8KGw9MHx2ZygwfChzPTB8dmcoMHwoVT0wfHZnKDB8KGg9MHx2ZyhSJihNXkopXkp8MCxQJihIXmIpXmJ8MCwwfEYsMHxoKSksMHxvKCksZF55Xmt8MCwwfFUpKSwwfG8oKSwwfEcsMHxzKSksMHxvKCksMHxZLDB8bCkpLDB8KFk9MHxvKCkpLDB8TiwwfHgpLE49MHxvKCksQ1tCKzU2Pj4yXT14LENbQis1Nis0Pj4yXT1OLHM9MHxaSSh1LHAsMjgpLEc9MHxvKCksVT0wfFpJKHUscCwzNCksRz0oMHxvKCkpXkcsaz0wfFpJKHUscCwzOSksR149MHxvKCksRz0wfHZnKDB8KFk9MHx2ZygwfGwsMHxZLHUmKEx8bSl8TCZtfDAscCYoWHxLKXxYJkt8MCkpLDB8bygpLFVec15rfDAsMHxHKSxrPTB8bygpLENbQisyND4+Ml09RyxDW0IrMjQrND4+Ml09ayxzPTB8WkkoeCxOLDE0KSxVPTB8bygpLFk9MHxaSSh4LE4sMTgpLFU9KDB8bygpKV5VLGw9MHxaSSh4LE4sNDEpLFVePTB8bygpLGQ9MHxDW2crKCh5PTEzfEQpPDwzKT4+Ml0saD0wfENbZysoeTw8MykrND4+Ml0sRj0wfENbMzI0MTYrKHk8PDMpPj4yXSxfPTB8Q1szMjQxNisoeTw8MykrND4+Ml0sSz0wfHZnKDB8KF89MHx2ZygwfChoPTB8dmcoMHwoVT0wfHZnKDB8KGI9MHx2Zyh4JihSXk0pXk18MCxOJihQXkgpXkh8MCwwfEosMHxiKSksMHxvKCksWV5zXmx8MCwwfFUpKSwwfG8oKSwwfGQsMHxoKSksMHxvKCksMHxGLDB8XykpLDB8KEY9MHxvKCkpLDB8bSwwfEspLG09MHxvKCksQ1tCKzQ4Pj4yXT1LLENbQis0OCs0Pj4yXT1tLGg9MHxaSShHLGssMjgpLGQ9MHxvKCksVT0wfFpJKEcsaywzNCksZD0oMHxvKCkpXmQsbD0wfFpJKEcsaywzOSksZF49MHxvKCksZD0wfHZnKDB8KEY9MHx2ZygwfF8sMHxGLEcmKHV8TCl8dSZMfDAsayYocHxYKXxwJlh8MCkpLDB8bygpLFVeaF5sfDAsMHxkKSxsPTB8bygpLENbQisxNj4+Ml09ZCxDW0IrMTYrND4+Ml09bCxoPTB8WkkoSyxtLDE0KSxVPTB8bygpLEY9MHxaSShLLG0sMTgpLFU9KDB8bygpKV5VLF89MHxaSShLLG0sNDEpLFVePTB8bygpLFk9MHxDW2crKChzPTE0fEQpPDwzKT4+Ml0sYj0wfENbZysoczw8MykrND4+Ml0sSj0wfENbMzI0MTYrKHM8PDMpPj4yXSx2PTB8Q1szMjQxNisoczw8MykrND4+Ml0sWD0wfHZnKDB8KHY9MHx2ZygwfChiPTB8dmcoMHwoVT0wfHZnKDB8KEg9MHx2ZyhLJih4XlIpXlJ8MCxtJihOXlApXlB8MCwwfE0sMHxIKSksMHxvKCksRl5oXl98MCwwfFUpKSwwfG8oKSwwfFksMHxiKSksMHxvKCksMHxKLDB8dikpLDB8KEo9MHxvKCkpLDB8TCwwfFgpLEw9MHxvKCksQ1tCKzQwPj4yXT1YLENbQis0MCs0Pj4yXT1MLGI9MHxaSShkLGwsMjgpLFk9MHxvKCksVT0wfFpJKGQsbCwzNCksWT0oMHxvKCkpXlksXz0wfFpJKGQsbCwzOSksWV49MHxvKCksWT0wfHZnKDB8KEo9MHx2ZygwfHYsMHxKLGQmKEd8dSl8RyZ1fDAsbCYoa3xwKXxrJnB8MCkpLDB8bygpLFVeYl5ffDAsMHxZKSxfPTB8bygpLENbQis4Pj4yXT1ZLENbQis4KzQ+PjJdPV8sYj0wfFpJKFgsTCwxNCksVT0wfG8oKSxKPTB8WkkoWCxMLDE4KSxVPSgwfG8oKSleVSx2PTB8WkkoWCxMLDQxKSxVXj0wfG8oKSxGPTB8Q1tnKygoaD0xNXxEKTw8Myk+PjJdLEg9MHxDW2crKGg8PDMpKzQ+PjJdLE09MHxDWzMyNDE2KyhoPDwzKT4+Ml0sUz0wfENbMzI0MTYrKGg8PDMpKzQ+PjJdLHA9MHx2ZygwfChTPTB8dmcoMHwoSD0wfHZnKDB8KFU9MHx2ZygwfChQPTB8dmcoWCYoS154KV54fDAsTCYobV5OKV5OfDAsMHxSLDB8UCkpLDB8bygpLEpeYl52fDAsMHxVKSksMHxvKCksMHxGLDB8SCkpLDB8bygpLDB8TSwwfFMpKSwwfChNPTB8bygpKSwwfHUsMHxwKSx1PTB8bygpLENbQiszMj4+Ml09cCxDW0IrMzIrND4+Ml09dSx1PTB8WkkoWSxfLDI4KSxwPTB8bygpLEg9MHxaSShZLF8sMzQpLHA9KDB8bygpKV5wLEY9MHxaSShZLF8sMzkpLHBePTB8bygpLHA9MHx2ZygwfChrPTB8dmcoMHxTLDB8TSxZJihkfEcpfGQmR3wwLF8mKGx8ayl8bCZrfDApKSwwfG8oKSxIXnVeRnwwLDB8cCksRj0wfG8oKSxDW0I+PjJdPXAsQ1tCKzQ+PjJdPUYsNjQ9PSgwfEQpKWJyZWFrO2Q9MHxaSShLPTB8Q1tnKyhzPDwzKT4+Ml0sWD0wfENbZysoczw8MykrND4+Ml0sMTkpLE49MHxvKCksSD0wfFpJKEssWCw2MSksaz0wfG8oKSxrPTB8dmcoKFI9MHx5ZygwfEssMHxYLDYpKV5kXkh8MCwwfChrPSgwfG8oKSleTl5rKSwwfChOPTB8Q1tnKyhuPDwzKT4+Ml0pLDB8KFk9MHxDW2crKG48PDMpKzQ+PjJdKSksSD0wfG8oKSxiPTB8WkkoZD0wfENbZysodzw8Myk+PjJdLFI9MHxDW2crKHc8PDMpKzQ+PjJdLDEpLHA9MHxvKCksbT0wfFpJKGQsUiw4KSxQPTB8bygpLEo9MHx5ZygwfGQsMHxSLDcpLFA9KDB8bygpKV5wXlAsUD0wfHZnKDB8KHA9MHx2ZygwfGssMHxILDB8Q1socD1nKyhEPDwzKXwwKT4+Ml0sMHxDW3ArND4+Ml0pKSwwfG8oKSxKXmJebXwwLDB8UCksbT0wfG8oKSxDWyhiPWcrKChEPUQrMTZ8MCk8PDMpfDApPj4yXT1QLENbYis0Pj4yXT1tLHA9MHxaSShiPTB8Q1tnKyhoPDwzKT4+Ml0sSj0wfENbZysoaDw8MykrND4+Ml0sMTkpLEg9MHxvKCksaz0wfFpJKGIsSiw2MSksbD0wfG8oKSxGPTB8eWcoMHxiLDB8Siw2KSxsPSgwfG8oKSleSF5sLEg9MHxDW2crKHcrOTw8Myk+PjJdLEw9MHxDW2crKHcrOTw8MykrND4+Ml0sdT0wfFpJKF89MHxDW2crKHcrMTw8Myk+PjJdLE09MHxDW2crKHcrMTw8MykrND4+Ml0sMSksVT0wfG8oKSxHPTB8WkkoXyxNLDgpLFM9MHxvKCksdj0wfHlnKDB8XywwfE0sNyksUz0oMHxvKCkpXlVeUyxTPTB8dmcoMHwobD0wfHZnKDB8KFI9MHx2ZygwfEgsMHxMLDB8ZCwwfFIpKSwwfG8oKSxGXnBea3wwLDB8bCkpLDB8bygpLHZedV5HfDAsMHxTKSxHPTB8bygpLENbZysodysxNjw8Myk+PjJdPVMsQ1tnKyh3KzE2PDwzKSs0Pj4yXT1HLHU9MHxaSShQLG0sMTkpLHY9MHxvKCksbD0wfFpJKFAsbSw2MSksdz0wfG8oKSx3PTB8dmcoKG09MHx5ZygwfFAsMHxtLDYpKV51Xmx8MCwwfCh3PSgwfG8oKSledl53KSwwfCh2PTB8Q1tnKyh0PDwzKT4+Ml0pLDB8KFA9MHxDW2crKHQ8PDMpKzQ+PjJdKSksbD0wfG8oKSxrPTB8WkkodT0wfENbZysoUTw8Myk+PjJdLG09MHxDW2crKFE8PDMpKzQ+PjJdLDEpLHA9MHxvKCksRj0wfFpJKHUsbSw4KSxSPTB8bygpLGQ9MHx5ZygwfHUsMHxtLDcpLFI9KDB8bygpKV5wXlIsUj0wfHZnKDB8KE09MHx2ZygwfHcsMHxsLDB8XywwfE0pKSwwfG8oKSxkXmteRnwwLDB8UiksRj0wfG8oKSxDW2crKEkrMTY8PDMpPj4yXT1SLENbZysoSSsxNjw8MykrND4+Ml09RixrPTB8WkkoUyxHLDE5KSxkPTB8bygpLE09MHxaSShTLEcsNjEpLF89MHxvKCksRz0wfHlnKDB8UywwfEcsNiksXz0oMHxvKCkpXmReXyxkPTB8Q1tnKyhRKzk8PDMpPj4yXSxTPTB8Q1tnKyhRKzk8PDMpKzQ+PjJdLHc9MHxaSShsPTB8Q1tnKyhRKzE8PDMpPj4yXSxJPTB8Q1tnKyhRKzE8PDMpKzQ+PjJdLDEpLHA9MHxvKCksTD0wfFpJKGwsSSw4KSxIPTB8bygpLFU9MHx5ZygwfGwsMHxJLDcpLEg9KDB8bygpKV5wXkgsSD0wfHZnKDB8KF89MHx2ZygwfChtPTB8dmcoMHxkLDB8UywwfHUsMHxtKSksMHxvKCksR15rXk18MCwwfF8pKSwwfG8oKSxVXndeTHwwLDB8SCksTD0wfG8oKSxDW2crKFErMTY8PDMpPj4yXT1ILENbZysoUSsxNjw8MykrND4+Ml09TCx3PTB8WkkoUixGLDE5KSxVPTB8bygpLF89MHxaSShSLEYsNjEpLE09MHxvKCksTT0wfHZnKChGPTB8eWcoMHxSLDB8Riw2KSled15ffDAsMHwoTT0oMHxvKCkpXlVeTSksMHwoVT0wfENbZysoeTw8Myk+PjJdKSwwfChSPTB8Q1tnKyh5PDwzKSs0Pj4yXSkpLF89MHxvKCksaz0wfFpJKHc9MHxDW2crKGk8PDMpPj4yXSxGPTB8Q1tnKyhpPDwzKSs0Pj4yXSwxKSxHPTB8bygpLG09MHxaSSh3LEYsOCksdT0wfG8oKSxTPTB8eWcoMHx3LDB8Riw3KSx1PSgwfG8oKSleR151LHU9MHx2ZygwfChJPTB8dmcoMHxNLDB8XywwfGwsMHxJKSksMHxvKCksU15rXm18MCwwfHUpLG09MHxvKCksQ1tnKyhFKzE2PDwzKT4+Ml09dSxDW2crKEUrMTY8PDMpKzQ+PjJdPW0saz0wfFpJKEgsTCwxOSksUz0wfG8oKSxJPTB8WkkoSCxMLDYxKSxsPTB8bygpLEw9MHx5ZygwfEgsMHxMLDYpLGw9KDB8bygpKV5TXmwsUz0wfENbZysoaSs5PDwzKT4+Ml0sSD0wfENbZysoaSs5PDwzKSs0Pj4yXSxHPTB8WkkoXz0wfENbZysoaSsxPDwzKT4+Ml0sTT0wfENbZysoaSsxPDwzKSs0Pj4yXSwxKSxkPTB8bygpLHA9MHxaSShfLE0sOCkseD0wfG8oKSxRPTB8eWcoMHxfLDB8TSw3KSx4PSgwfG8oKSleZF54LHg9MHx2ZygwfChsPTB8dmcoMHwoRj0wfHZnKDB8UywwfEgsMHx3LDB8RikpLDB8bygpLExea15JfDAsMHxsKSksMHxvKCksUV5HXnB8MCwwfHgpLHA9MHxvKCksQ1tnKyhpKzE2PDwzKT4+Ml09eCxDW2crKGkrMTY8PDMpKzQ+PjJdPXAsRz0wfFpJKHUsbSwxOSksUT0wfG8oKSxsPTB8WkkodSxtLDYxKSxJPTB8bygpLEk9MHx2ZygobT0wfHlnKDB8dSwwfG0sNikpXkdebHwwLCgwfG8oKSleUV5JfDAsMHxiLDB8SiksUT0wfG8oKSxtPTB8WkkobD0wfENbZysoYzw8Myk+PjJdLEc9MHxDW2crKGM8PDMpKzQ+PjJdLDEpLHU9MHxvKCksaz0wfFpJKGwsRyw4KSxMPTB8bygpLEY9MHx5ZygwfGwsMHxHLDcpLEw9KDB8bygpKV51XkwsTD0wfHZnKDB8KE09MHx2ZygwfEksMHxRLDB8XywwfE0pKSwwfG8oKSxGXm1ea3wwLDB8TCksaz0wfG8oKSxDW2crKGUrMTY8PDMpPj4yXT1MLENbZysoZSsxNjw8MykrND4+Ml09ayxtPTB8WkkoeCxwLDE5KSxGPTB8bygpLE09MHxaSSh4LHAsNjEpLF89MHxvKCkscD0wfHlnKDB8eCwwfHAsNiksXz0oMHxvKCkpXkZeXyxGPTB8Q1tnKyhjKzk8PDMpPj4yXSx4PTB8Q1tnKyhjKzk8PDMpKzQ+PjJdLHU9MHxaSShRPTB8Q1tnKyhjKzE8PDMpPj4yXSxJPTB8Q1tnKyhjKzE8PDMpKzQ+PjJdLDEpLHc9MHxvKCksSD0wfFpJKFEsSSw4KSxTPTB8bygpLGQ9MHx5ZygwfFEsMHxJLDcpLFM9KDB8bygpKV53XlMsUz0wfHZnKDB8KF89MHx2ZygwfChHPTB8dmcoMHxGLDB8eCwwfGwsMHxHKSksMHxvKCkscF5tXk18MCwwfF8pKSwwfG8oKSxkXnVeSHwwLDB8UyksSD0wfG8oKSxDW2crKGMrMTY8PDMpPj4yXT1TLENbZysoYysxNjw8MykrND4+Ml09SCx1PTB8WkkoTCxrLDE5KSxkPTB8bygpLF89MHxaSShMLGssNjEpLE09MHxvKCksTT0wfHZnKChrPTB8eWcoMHxMLDB8ayw2KSledV5ffDAsMHwoTT0oMHxvKCkpXmReTSksMHxDW2crKGErOTw8Myk+PjJdLDB8Q1tnKyhhKzk8PDMpKzQ+PjJdKSxfPTB8bygpLHU9MHxaSShOLFksMSksaz0wfG8oKSxkPTB8WkkoTixZLDgpLEw9MHxvKCksbT0wfHlnKDB8TiwwfFksNyksTD1rXigwfG8oKSleTCxMPTB8dmcoMHwoST0wfHZnKDB8TSwwfF8sMHxRLDB8SSkpLDB8bygpLHVebV5kfDAsMHxMKSxkPTB8bygpLENbZysoYSsxNjw8Myk+PjJdPUwsQ1tnKyhhKzE2PDwzKSs0Pj4yXT1kLG09MHxaSShTLEgsMTkpLHU9MHxvKCksST0wfFpJKFMsSCw2MSksUT0wfG8oKSxIPTB8eWcoMHxTLDB8SCw2KSxRPSgwfG8oKSledV5RLHU9MHxDW2crKG4rOTw8Myk+PjJdLFM9MHxDW2crKG4rOTw8MykrND4+Ml0saz0wfFpJKF89MHxDW2crKG4rMTw8Myk+PjJdLE09MHxDW2crKG4rMTw8MykrND4+Ml0sMSkscD0wfG8oKSxHPTB8WkkoXyxNLDgpLGw9MHxvKCkseD0wfHlnKDB8XywwfE0sNyksbD0oMHxvKCkpXnBebCxsPTB8dmcoMHwoUT0wfHZnKDB8KFk9MHx2ZygwfHUsMHxTLDB8TiwwfFkpKSwwfG8oKSxIXm1eSXwwLDB8USkpLDB8bygpLHhea15HfDAsMHxsKSxHPTB8bygpLENbZysobisxNjw8Myk+PjJdPWwsQ1tnKyhuKzE2PDwzKSs0Pj4yXT1HLGs9MHxaSShMLGQsMTkpLHg9MHxvKCksUT0wfFpJKEwsZCw2MSksST0wfG8oKSxJPTB8dmcoKGQ9MHx5ZygwfEwsMHxkLDYpKV5rXlF8MCwwfChJPSgwfG8oKSleeF5JKSwwfENbZysocis5PDwzKT4+Ml0sMHxDW2crKHIrOTw8MykrND4+Ml0pLFE9MHxvKCksaz0wfFpJKHYsUCwxKSxkPTB8bygpLHg9MHxaSSh2LFAsOCksTD0wfG8oKSxtPTB8eWcoMHx2LDB8UCw3KSxMPWReKDB8bygpKV5MLEw9MHx2ZygwfChNPTB8dmcoMHxJLDB8USwwfF8sMHxNKSksMHxvKCksa15tXnh8MCwwfEwpLHg9MHxvKCksQ1tnKyhyKzE2PDwzKT4+Ml09TCxDW2crKHIrMTY8PDMpKzQ+PjJdPXgsbT0wfFpJKGwsRywxOSksaz0wfG8oKSxNPTB8WkkobCxHLDYxKSxfPTB8bygpLEc9MHx5ZygwfGwsMHxHLDYpLF89KDB8bygpKV5rXl8saz0wfENbZysodCs5PDwzKT4+Ml0sbD0wfENbZysodCs5PDwzKSs0Pj4yXSxkPTB8WkkoUT0wfENbZysodCsxPDwzKT4+Ml0sST0wfENbZysodCsxPDwzKSs0Pj4yXSwxKSxIPTB8bygpLFk9MHxaSShRLEksOCksTj0wfG8oKSxTPTB8eWcoMHxRLDB8SSw3KSxOPSgwfG8oKSleSF5OLE49MHx2ZygwfChfPTB8dmcoMHwoUD0wfHZnKDB8aywwfGwsMHx2LDB8UCkpLDB8bygpLEdebV5NfDAsMHxfKSksMHxvKCksU15kXll8MCwwfE4pLFk9MHxvKCksQ1tnKyh0KzE2PDwzKT4+Ml09TixDW2crKHQrMTY8PDMpKzQ+PjJdPVksZD0wfFpJKEwseCwxOSksUz0wfG8oKSxfPTB8WkkoTCx4LDYxKSxNPTB8bygpLE09MHx2ZygoeD0wfHlnKDB8TCwwfHgsNikpXmReX3wwLDB8KE09KDB8bygpKV5TXk0pLDB8Q1tnKyhmKzk8PDMpPj4yXSwwfENbZysoZis5PDwzKSs0Pj4yXSksXz0wfG8oKSxkPTB8WkkoVSxSLDEpLHg9MHxvKCksUz0wfFpJKFUsUiw4KSxMPTB8bygpLG09MHx5ZygwfFUsMHxSLDcpLEw9eF4oMHxvKCkpXkwsTD0wfHZnKDB8KEk9MHx2ZygwfE0sMHxfLDB8USwwfEkpKSwwfG8oKSxkXm1eU3wwLDB8TCksUz0wfG8oKSxDW2crKGYrMTY8PDMpPj4yXT1MLENbZysoZisxNjw8MykrND4+Ml09UyxtPTB8WkkoTixZLDE5KSxkPTB8bygpLEk9MHxaSShOLFksNjEpLFE9MHxvKCksWT0wfHlnKDB8TiwwfFksNiksUT0oMHxvKCkpXmReUSxkPTB8Q1tnKyh5Kzk8PDMpPj4yXSxOPTB8Q1tnKyh5Kzk8PDMpKzQ+PjJdLHg9MHxaSShfPTB8Q1tnKyh5KzE8PDMpPj4yXSxNPTB8Q1tnKyh5KzE8PDMpKzQ+PjJdLDEpLEc9MHxvKCksUD0wfFpJKF8sTSw4KSx2PTB8bygpLE09MHx5ZygwfF8sMHxNLDcpLHY9KDB8bygpKV5HXnYsdj0wfHZnKDB8KFE9MHx2ZygwfChSPTB8dmcoMHxkLDB8TiwwfFUsMHxSKSksMHxvKCksWV5tXkl8MCwwfFEpKSwwfG8oKSxNXnheUHwwLDB8diksUD0wfG8oKSxDW2crKHkrMTY8PDMpPj4yXT12LENbZysoeSsxNjw8MykrND4+Ml09UCx4PTB8WkkoTCxTLDE5KSxNPTB8bygpLFE9MHxaSShMLFMsNjEpLEk9MHxvKCksUz0wfHlnKDB8TCwwfFMsNiksST0oMHxvKCkpXk1eSSxNPTB8Q1tnKyhzKzk8PDMpPj4yXSxMPTB8Q1tnKyhzKzk8PDMpKzQ+PjJdLG09MHxaSShiLEosMSksWT0wfG8oKSxSPTB8WkkoYixKLDgpLFU9MHxvKCksTj0wfHlnKDB8YiwwfEosNyksVT1ZXigwfG8oKSleVSxVPTB8dmcoMHwoST0wfHZnKDB8KFg9MHx2ZygwfE0sMHxMLDB8SywwfFgpKSwwfG8oKSxTXnheUXwwLDB8SSkpLDB8bygpLG1eTl5SfDAsMHxVKSxSPTB8bygpLENbZysocysxNjw8Myk+PjJdPVUsQ1tnKyhzKzE2PDwzKSs0Pj4yXT1SLFI9MHxaSSh2LFAsMTkpLFU9MHxvKCksTj0wfFpJKHYsUCw2MSksbT0wfG8oKSxQPTB8eWcoMHx2LDB8UCw2KSxtPSgwfG8oKSleVV5tLFU9MHxDW2crKGgrOTw8Myk+PjJdLHY9MHxDW2crKGgrOTw8MykrND4+Ml0seD0wfFpJKEk9MHxDW2crKGgrMTw8Myk+PjJdLFE9MHxDW2crKGgrMTw8MykrND4+Ml0sMSksUz0wfG8oKSxYPTB8WkkoSSxRLDgpLEs9MHxvKCksTD0wfHlnKDB8SSwwfFEsNyksSz0oMHxvKCkpXlNeSyxLPTB8dmcoMHwobT0wfHZnKDB8KEo9MHx2ZygwfFUsMHx2LDB8YiwwfEopKSwwfG8oKSxQXlJeTnwwLDB8bSkpLDB8bygpLExeeF5YfDAsMHxLKSxYPTB8bygpLENbZysoaCsxNjw8Myk+PjJdPUssQ1tnKyhoKzE2PDwzKSs0Pj4yXT1YfXdoaWxlKEQ+Pj4wPDgwKTtJPTA7ZG97eD1CKyhJPDwzKXwwLHg9MHx2ZygwfENbKFg9QSsoSTw8Myl8MCk+PjJdLDB8Q1tYKzQ+PjJdLDB8Q1t4Pj4yXSwwfENbeCs0Pj4yXSksSz0wfG8oKSxDW1g+PjJdPXgsQ1tYKzQ+PjJdPUssST1JKzF8MH13aGlsZSg4IT0oMHxJKSl9ZnVuY3Rpb24gRihBKXtBfD0wO3ZhciBJLGc9MCxCPTAsUT0wLEU9MCxpPTAsZT0wLG89MCxjPTAsYT0wLG49MCxyPTAsdD0wLGY9MCx3PTAscz0wLGg9MCxEPTAsRj0wLHA9MCx1PTA7ST15LGY9eT15KzYzJi02NCx5PXkrMTZ8MDtkb3tpZihBPj4+MDwyNDUpe2lmKHQ9QT4+PjA8MTE/MTY6QSsxMSYtOCwobj0wfENbODY3OV0pPj4+KHQ+Pj4zKSYzfDApcmV0dXJuIEE9MHxDWzgrKEI9MzQ3NTYrKChuPj4+KHQ+Pj4zKSYxXjEpKyh0Pj4+Myk8PDE8PDIpfDApPj4yXSwoMHwoZz0wfENbQSs4Pj4yXSkpPT0oMHxCKT9DWzg2NzldPW4mfigxPDwobj4+Pih0Pj4+MykmMV4xKSsodD4+PjMpKTooQ1tnKzEyPj4yXT1CLENbQis4Pj4yXT1nKSx1PShuPj4+KHQ+Pj4zKSYxXjEpKyh0Pj4+Myk8PDMsQ1tBKzQ+PjJdPTN8dSxDW0ErdSs0Pj4yXT0xfENbQSt1KzQ+PjJdLHk9SSwwfEErODtpZih0Pj4+MD4ocj0wfENbODY4MV0pPj4+MCl7aWYobj4+Pih0Pj4+Myl8MClyZXR1cm4gUT0wfENbMzQ3NTYrKChFPSgoUT0oKChBPW4+Pj4odD4+PjMpPDwodD4+PjMpJigyPDwodD4+PjMpfDAtKDI8PCh0Pj4+MykpKSkmMC1BKS0xfDApPj4+KCgoQSYwLUEpLTF8MCk+Pj4xMiYxNikpPj4+NSY4fCgoQSYwLUEpLTF8MCk+Pj4xMiYxNnxRPj4+KFE+Pj41JjgpPj4+MiY0fChFPVE+Pj4oUT4+PjUmOCk+Pj4oUT4+PihRPj4+NSY4KT4+PjImNCkpPj4+MSYyfEU+Pj4oRT4+PjEmMik+Pj4xJjEpKyhFPj4+KEU+Pj4xJjIpPj4+KEU+Pj4oRT4+PjEmMik+Pj4xJjEpKXwwKTw8MTw8MikrOD4+Ml0sKDB8KEE9MHxDW1ErOD4+Ml0pKT09KDM0NzU2KyhFPDwxPDwyKXwwKT8oQ1s4Njc5XT1uJn4oMTw8RSksQT1uJn4oMTw8RSkpOihDW0ErMTI+PjJdPTM0NzU2KyhFPDwxPDwyKSxDWzM0NzU2KyhFPDwxPDwyKSs4Pj4yXT1BLEE9biksQ1tRKzQ+PjJdPTN8dCxDW1ErdCs0Pj4yXT0oRTw8MyktdHwxLENbUSsoRTw8Myk+PjJdPShFPDwzKS10LDB8ciYmKEI9MHxDWzg2ODRdLEEmMTw8KHI+Pj4zKT8oQT0zNDc1Nisocj4+PjM8PDE8PDIpKzh8MCxnPTB8Q1szNDc1Nisocj4+PjM8PDE8PDIpKzg+PjJdKTooQ1s4Njc5XT1BfDE8PChyPj4+MyksQT0zNDc1Nisocj4+PjM8PDE8PDIpKzh8MCxnPTM0NzU2KyhyPj4+Mzw8MTw8Mil8MCksQ1tBPj4yXT1CLENbZysxMj4+Ml09QixDW0IrOD4+Ml09ZyxDW0IrMTI+PjJdPTM0NzU2KyhyPj4+Mzw8MTw8MikpLENbODY4MV09KEU8PDMpLXQsQ1s4Njg0XT1RK3QseT1JLDB8USs4O2lmKGU9MHxDWzg2ODBdKXtmb3IoYT0wfENbMzUwMjArKCgoYz0oKGUmMC1lKS0xfDApPj4+KCgoZSYwLWUpLTF8MCk+Pj4xMiYxNikpPj4+NSY4fCgoZSYwLWUpLTF8MCk+Pj4xMiYxNnxjPj4+KGM+Pj41JjgpPj4+MiY0fChhPWM+Pj4oYz4+PjUmOCk+Pj4oYz4+PihjPj4+NSY4KT4+PjImNCkpPj4+MSYyfGE+Pj4oYT4+PjEmMik+Pj4xJjEpKyhhPj4+KGE+Pj4xJjIpPj4+KGE+Pj4oYT4+PjEmMik+Pj4xJjEpKTw8Mik+PjJdLGM9KC04JkNbYSs0Pj4yXSktdHwwLGc9YTsoQT0wfENbZysxNj4+Ml0pfHwoQT0wfENbZysyMD4+Ml0pOyljPShvPShnPSgtOCZDW0ErND4+Ml0pLXR8MCk+Pj4wPGM+Pj4wKT9nOmMsZz1BLGE9bz9BOmE7aWYoKG89YSt0fDApPj4+MD5hPj4+MCl7RT0wfENbYSsyND4+Ml0sQT0wfENbYSsxMj4+Ml07ZG97aWYoKDB8QSk9PSgwfGEpKXtpZighKEE9MHxDWyhnPWErMjB8MCk+PjJdKSYmIShBPTB8Q1soZz1hKzE2fDApPj4yXSkpe2c9MDticmVha31mb3IoOzspaWYoQj0wfENbKFE9QSsyMHwwKT4+Ml0pQT1CLGc9UTtlbHNle2lmKCEoQj0wfENbKFE9QSsxNnwwKT4+Ml0pKWJyZWFrO0E9QixnPVF9Q1tnPj4yXT0wLGc9QX1lbHNlIGc9MHxDW2ErOD4+Ml0sQ1tnKzEyPj4yXT1BLENbQSs4Pj4yXT1nLGc9QX13aGlsZSgwKTtkb3tpZigwfEUpe2lmKEE9MHxDW2ErMjg+PjJdLCgwfGEpPT0oMHxDWzM1MDIwKyhBPDwyKT4+Ml0pKXtpZihDWzM1MDIwKyhBPDwyKT4+Ml09ZywhZyl7Q1s4NjgwXT1lJn4oMTw8QSk7YnJlYWt9fWVsc2UgaWYoQ1soKDB8Q1tFKzE2Pj4yXSk9PSgwfGEpP0UrMTZ8MDpFKzIwfDApPj4yXT1nLCFnKWJyZWFrO0NbZysyND4+Ml09RSwwfChBPTB8Q1thKzE2Pj4yXSkmJihDW2crMTY+PjJdPUEsQ1tBKzI0Pj4yXT1nKSwwfChBPTB8Q1thKzIwPj4yXSkmJihDW2crMjA+PjJdPUEsQ1tBKzI0Pj4yXT1nKX19d2hpbGUoMCk7cmV0dXJuIGM+Pj4wPDE2Pyh1PWMrdHwwLENbYSs0Pj4yXT0zfHUsQ1sodT1hK3UrNHwwKT4+Ml09MXxDW3U+PjJdKTooQ1thKzQ+PjJdPTN8dCxDW28rND4+Ml09MXxjLENbbytjPj4yXT1jLDB8ciYmKEI9MHxDWzg2ODRdLDE8PChyPj4+Mykmbj8oQT0zNDc1Nisocj4+PjM8PDE8PDIpKzh8MCxnPTB8Q1szNDc1Nisocj4+PjM8PDE8PDIpKzg+PjJdKTooQ1s4Njc5XT0xPDwocj4+PjMpfG4sQT0zNDc1Nisocj4+PjM8PDE8PDIpKzh8MCxnPTM0NzU2KyhyPj4+Mzw8MTw8Mil8MCksQ1tBPj4yXT1CLENbZysxMj4+Ml09QixDW0IrOD4+Ml09ZyxDW0IrMTI+PjJdPTM0NzU2KyhyPj4+Mzw8MTw8MikpLENbODY4MV09YyxDWzg2ODRdPW8pLHk9SSwwfGErOH19fX1lbHNlIGlmKEE+Pj4wPD00Mjk0OTY3MjMxKXtpZih0PUErMTEmLTgsUT0wfENbODY4MF0pe2M9KEErMTF8MCk+Pj44P3Q+Pj4wPjE2Nzc3MjE1PzMxOnQ+Pj4oNysoYz0xNC0oKDUyMDE5MisoYz0oQSsxMXwwKT4+Pjg8PCgoMTA0ODMyMCsoKEErMTF8MCk+Pj44KXwwKT4+PjE2JjgpKXwwKT4+PjE2JjR8KDEwNDgzMjArKChBKzExfDApPj4+OCl8MCk+Pj4xNiY4fCgyNDU3NjArKGM8PCgoYys1MjAxOTJ8MCk+Pj4xNiY0KSl8MCk+Pj4xNiYyKSsoYzw8KChjKzUyMDE5MnwwKT4+PjE2JjQpPDwoKDI0NTc2MCsoYzw8KChjKzUyMDE5MnwwKT4+PjE2JjQpKXwwKT4+PjE2JjIpPj4+MTUpfDApfDApJjF8Yzw8MTowLEE9MHxDWzM1MDIwKyhjPDwyKT4+Ml07QTpkb3tpZihBKWZvcihCPTAtdHwwLGc9MCxvPXQ8PCgzMT09KDB8Yyk/MDoyNS0oYz4+PjEpfDApLGU9MDs7KXtpZigoRT0oLTgmQ1tBKzQ+PjJdKS10fDApPj4+MDxCPj4+MCl7aWYoIUUpe0I9MCxnPUEsaD02NTticmVhayBBfUI9RSxlPUF9aWYoZz0wPT0oMHwoaD0wfENbQSsyMD4+Ml0pKXwoMHxoKT09KDB8KEE9MHxDW0ErMTYrKG8+Pj4zMTw8Mik+PjJdKSk/ZzpoLCFBKXtBPWUsaD02MTticmVha31vPDw9MX1lbHNlIEI9MC10fDAsZz0wLEE9MCxoPTYxfXdoaWxlKDApO2lmKDYxPT0oMHxoKSl7aWYoMD09KDB8ZykmMD09KDB8QSkpe2lmKCEoKChBPTI8PGMpfDAtQSkmUSkpYnJlYWs7Zz0wfENbMzUwMjArKCgocj0oKEF8MC1BKSZRJjAtKChBfDAtQSkmUSkpLTF8MCk+Pj4ocj4+PjEyJjE2KT4+PjUmOHxyPj4+MTImMTZ8KEE9cj4+PihyPj4+MTImMTYpPj4+KHI+Pj4ocj4+PjEyJjE2KT4+PjUmOCkpPj4+MiY0fEE+Pj4oQT4+PjImNCk+Pj4xJjJ8KGc9QT4+PihBPj4+MiY0KT4+PihBPj4+KEE+Pj4yJjQpPj4+MSYyKSk+Pj4xJjEpKyhnPj4+KGc+Pj4xJjEpKTw8Mik+PjJdLEE9MH1nP2g9NjU6KGU9QixvPUEpfWlmKDY1PT0oMHxoKSlmb3IoOzspe2lmKEI9KEU9KHI9KC04JkNbZys0Pj4yXSktdHwwKT4+PjA8Qj4+PjApP3I6QixFPUU/ZzpBLChBPTB8Q1tnKzE2Pj4yXSl8fChBPTB8Q1tnKzIwPj4yXSksIUEpe2U9QixvPUU7YnJlYWt9Zz1BLEE9RX1pZigwIT0oMHxvKSYmZT4+PjA8KCgwfENbODY4MV0pLXR8MCk+Pj4wJiYoYT1vK3R8MCk+Pj4wPm8+Pj4wKXtpPTB8Q1tvKzI0Pj4yXSxBPTB8Q1tvKzEyPj4yXTtkb3tpZigoMHxBKT09KDB8bykpe2lmKCEoQT0wfENbKGc9bysyMHwwKT4+Ml0pJiYhKEE9MHxDWyhnPW8rMTZ8MCk+PjJdKSl7QT0wO2JyZWFrfWZvcig7OylpZihCPTB8Q1soRT1BKzIwfDApPj4yXSlBPUIsZz1FO2Vsc2V7aWYoIShCPTB8Q1soRT1BKzE2fDApPj4yXSkpYnJlYWs7QT1CLGc9RX1DW2c+PjJdPTB9ZWxzZSB1PTB8Q1tvKzg+PjJdLENbdSsxMj4+Ml09QSxDW0ErOD4+Ml09dX13aGlsZSgwKTtkb3tpZihpKXtpZihnPTB8Q1tvKzI4Pj4yXSwoMHxvKT09KDB8Q1szNTAyMCsoZzw8Mik+PjJdKSl7aWYoQ1szNTAyMCsoZzw8Mik+PjJdPUEsIUEpe0NbODY4MF09USZ+KDE8PGcpLFEmPX4oMTw8Zyk7YnJlYWt9fWVsc2UgaWYoQ1soKDB8Q1tpKzE2Pj4yXSk9PSgwfG8pP2krMTZ8MDppKzIwfDApPj4yXT1BLCFBKWJyZWFrO0NbQSsyND4+Ml09aSwwfChnPTB8Q1tvKzE2Pj4yXSkmJihDW0ErMTY+PjJdPWcsQ1tnKzI0Pj4yXT1BKSwoZz0wfENbbysyMD4+Ml0pJiYoQ1tBKzIwPj4yXT1nLENbZysyND4+Ml09QSl9fXdoaWxlKDApO0E6ZG97aWYoZT4+PjA8MTYpdT1lK3R8MCxDW28rND4+Ml09M3x1LENbKHU9byt1KzR8MCk+PjJdPTF8Q1t1Pj4yXTtlbHNle2lmKENbbys0Pj4yXT0zfHQsQ1thKzQ+PjJdPTF8ZSxDW2ErZT4+Ml09ZSxCPWU+Pj4zLGU+Pj4wPDI1Nil7KEE9MHxDWzg2NzldKSYxPDxCPyhBPTM0NzU2KyhCPDwxPDwyKSs4fDAsZz0wfENbMzQ3NTYrKEI8PDE8PDIpKzg+PjJdKTooQ1s4Njc5XT1BfDE8PEIsQT0zNDc1NisoQjw8MTw8MikrOHwwLGc9MzQ3NTYrKEI8PDE8PDIpfDApLENbQT4+Ml09YSxDW2crMTI+PjJdPWEsQ1thKzg+PjJdPWcsQ1thKzEyPj4yXT0zNDc1NisoQjw8MTw8Mik7YnJlYWt9aWYoQT0zNTAyMCsoKEI9KEE9ZT4+PjgpP2U+Pj4wPjE2Nzc3MjE1PzMxOmU+Pj4oNysoQj0xNC0oKDUyMDE5MisoQTw8KChBKzEwNDgzMjB8MCk+Pj4xNiY4KSl8MCk+Pj4xNiY0fChBKzEwNDgzMjB8MCk+Pj4xNiY4fCgyNDU3NjArKEI9QTw8KChBKzEwNDgzMjB8MCk+Pj4xNiY4KTw8KCg1MjAxOTIrKEE8PCgoQSsxMDQ4MzIwfDApPj4+MTYmOCkpfDApPj4+MTYmNCkpfDApPj4+MTYmMikrKEI8PCgoQisyNDU3NjB8MCk+Pj4xNiYyKT4+PjE1KXwwKXwwKSYxfEI8PDE6MCk8PDIpfDAsQ1thKzI4Pj4yXT1CLENbYSsxNis0Pj4yXT0wLENbYSsxNj4+Ml09MCwhKFEmKGc9MTw8QikpKXtDWzg2ODBdPVF8ZyxDW0E+PjJdPWEsQ1thKzI0Pj4yXT1BLENbYSsxMj4+Ml09YSxDW2ErOD4+Ml09YTticmVha31BPTB8Q1tBPj4yXTtJOmRve2lmKCgtOCZDW0ErND4+Ml18MCkhPSgwfGUpKXtmb3IoUT1lPDwoMzE9PSgwfEIpPzA6MjUtKEI+Pj4xKXwwKTtnPTB8Q1soQj1BKzE2KyhRPj4+MzE8PDIpfDApPj4yXTspe2lmKCgtOCZDW2crND4+Ml18MCk9PSgwfGUpKXtBPWc7YnJlYWsgSX1RPDw9MSxBPWd9Q1tCPj4yXT1hLENbYSsyND4+Ml09QSxDW2ErMTI+PjJdPWEsQ1thKzg+PjJdPWE7YnJlYWsgQX19d2hpbGUoMCk7dT0wfENbKHA9QSs4fDApPj4yXSxDW3UrMTI+PjJdPWEsQ1twPj4yXT1hLENbYSs4Pj4yXT11LENbYSsxMj4+Ml09QSxDW2ErMjQ+PjJdPTB9fXdoaWxlKDApO3JldHVybiB5PUksMHxvKzh9fX1lbHNlIHQ9LTF9d2hpbGUoMCk7aWYoKEI9MHxDWzg2ODFdKT4+PjA+PXQ+Pj4wKXJldHVybiBnPUItdHwwLEE9MHxDWzg2ODRdLGc+Pj4wPjE1Pyh1PUErdHwwLENbODY4NF09dSxDWzg2ODFdPWcsQ1t1KzQ+PjJdPTF8ZyxDW0ErQj4+Ml09ZyxDW0ErND4+Ml09M3x0KTooQ1s4NjgxXT0wLENbODY4NF09MCxDW0ErND4+Ml09M3xCLENbQStCKzQ+PjJdPTF8Q1tBK0IrND4+Ml0pLHk9SSwwfEErODtpZigoRT0wfENbODY4Ml0pPj4+MD50Pj4+MClyZXR1cm4gRj1FLXR8MCxDWzg2ODJdPUYscD0odT0wfENbODY4NV0pK3R8MCxDWzg2ODVdPXAsQ1twKzQ+PjJdPTF8RixDW3UrND4+Ml09M3x0LHk9SSwwfHUrODtpZigwfENbODc5N10/QT0wfENbODc5OV06KENbODc5OV09NDA5NixDWzg3OThdPTQwOTYsQ1s4ODAwXT0tMSxDWzg4MDFdPS0xLENbODgwMl09MCxDWzg3OTBdPTAsQ1s4Nzk3XT0tMTYmZl4xNDMxNjU1NzY4LEE9NDA5NiksZT10KzQ4fDAsKChhPUErKG89dCs0N3wwKXwwKSYoYz0wLUF8MCkpPj4+MDw9dD4+PjApcmV0dXJuIHk9SSwwO2lmKDB8KEE9MHxDWzg3ODldKSYmKCgoZj0wfENbODc4N10pKyhhJmMpfDApPj4+MDw9Zj4+PjB8fChmKyhhJmMpfDApPj4+MD5BPj4+MCkpcmV0dXJuIHk9SSwwO0E6ZG97aWYoNCZDWzg3OTBdKUE9MCxoPTE0MztlbHNle2c9MHxDWzg2ODVdO0k6ZG97aWYoZyl7Zm9yKEI9MzUxNjQ7ISgoQT0wfENbQj4+Ml0pPj4+MDw9Zz4+PjAmJihBKygwfENbKHM9Qis0fDApPj4yXSl8MCk+Pj4wPmc+Pj4wKTspe2lmKCEoQT0wfENbQis4Pj4yXSkpe2g9MTI4O2JyZWFrIEl9Qj1BfWlmKChhLUUmYyk+Pj4wPDIxNDc0ODM2NDcpaWYoKDB8KEE9MHxiSShhLUUmYykpKT09KCgwfENbQj4+Ml0pKygwfENbcz4+Ml0pfDApKXtpZigtMSE9KDB8QSkpe2U9QSxpPWEtRSZjLGg9MTQ1O2JyZWFrIEF9QT1hLUUmY31lbHNlIFE9QSxCPWEtRSZjLGg9MTM2O2Vsc2UgQT0wfWVsc2UgaD0xMjh9d2hpbGUoMCk7ZG97aWYoMTI4PT0oMHxoKSlpZigtMSE9KDB8KGc9MHxiSSgwKSkpJiYoaT0oMD09KChpPTB8Q1s4Nzk4XSktMSZnfDApPzA6KGkrLTErZyYwLWkpLWd8MCkrKGEmYyl8MCx3PTB8Q1s4Nzg3XSxpPj4+MD50Pj4+MCZpPj4+MDwyMTQ3NDgzNjQ3KSl7aWYoMHwocz0wfENbODc4OV0pJiYoaSt3fDApPj4+MDw9dz4+PjB8KGkrd3wwKT4+PjA+cz4+PjApe0E9MDticmVha31pZigoMHwoQT0wfGJJKGkpKSk9PSgwfGcpKXtlPWcsaD0xNDU7YnJlYWsgQX1RPUEsQj1pLGg9MTM2fWVsc2UgQT0wfXdoaWxlKDApO2Rve2lmKDEzNj09KDB8aCkpe2lmKGc9MC1CfDAsIShlPj4+MD5CPj4+MCZCPj4+MDwyMTQ3NDgzNjQ3Ji0xIT0oMHxRKSkpe2lmKC0xPT0oMHxRKSl7QT0wO2JyZWFrfWU9USxpPUIsaD0xNDU7YnJlYWsgQX1pZigoQT1vLUIrKEE9MHxDWzg3OTldKSYwLUEpPj4+MD49MjE0NzQ4MzY0Nyl7ZT1RLGk9QixoPTE0NTticmVhayBBfWlmKC0xPT0oMHxiSShBKSkpe2JJKGcpLEE9MDticmVha31lPVEsaT1BK0J8MCxoPTE0NTticmVhayBBfX13aGlsZSgwKTtDWzg3OTBdPTR8Q1s4NzkwXSxoPTE0M319d2hpbGUoMCk7aWYoMTQzPT0oMHxoKSYmKGEmYyk+Pj4wPDIxNDc0ODM2NDcmJiEoLTE9PSgwfChEPTB8YkkoYSZjKSkpfDFeKHA9KChGPTB8YkkoMCkpLUR8MCk+Pj4wPih0KzQwfDApPj4+MCl8RD4+PjA8Rj4+PjAmLTEhPSgwfEQpJi0xIT0oMHxGKV4xKSYmKGU9RCxpPXA/Ri1EfDA6QSxoPTE0NSksMTQ1PT0oMHxoKSl7QT0oMHxDWzg3ODddKStpfDAsQ1s4Nzg3XT1BLEE+Pj4wPigwfENbODc4OF0pPj4+MCYmKENbODc4OF09QSksYz0wfENbODY4NV07QTpkb3tpZihjKXtmb3IoRT0zNTE2NDs7KXtpZigoMHxlKT09KChBPTB8Q1tFPj4yXSkrKGc9MHxDWyhRPUUrNHwwKT4+Ml0pfDApKXtoPTE1NDticmVha31pZighKEI9MHxDW0UrOD4+Ml0pKWJyZWFrO0U9Qn1pZigxNTQ9PSgwfGgpJiYwPT0oOCZDW0UrMTI+PjJdfDApJiZlPj4+MD5jPj4+MCZBPj4+MDw9Yz4+PjApe0NbUT4+Ml09ZytpLHU9KDB8Q1s4NjgyXSkraXwwLHA9MD09KGMrOCY3fDApPzA6MC0oYys4KSY3LENbODY4NV09YytwLENbODY4Ml09dS1wLENbYytwKzQ+PjJdPXUtcHwxLENbYyt1KzQ+PjJdPTQwLENbODY4Nl09Q1s4ODAxXTticmVha31mb3IoZT4+PjA8KDB8Q1s4NjgzXSk+Pj4wJiYoQ1s4NjgzXT1lKSxCPWUraXwwLGc9MzUxNjQ7Oyl7aWYoKDB8Q1tnPj4yXSk9PSgwfEIpKXtoPTE2MjticmVha31pZighKEE9MHxDW2crOD4+Ml0pKWJyZWFrO2c9QX1pZigxNjI9PSgwfGgpJiYwPT0oOCZDW2crMTI+PjJdfDApKXtDW2c+PjJdPWUsQ1sobj1nKzR8MCk+PjJdPSgwfENbbj4+Ml0pK2ksYT0obj1lKygwPT0oNyYobj1lKzh8MCl8MCk/MDowLW4mNyl8MCkrdHwwLG89KEE9QisoMD09KEIrOCY3fDApPzA6MC0oQis4KSY3KXwwKS1uLXR8MCxDW24rND4+Ml09M3x0O0k6ZG97aWYoKDB8Yyk9PSgwfEEpKXU9KDB8Q1s4NjgyXSkrb3wwLENbODY4Ml09dSxDWzg2ODVdPWEsQ1thKzQ+PjJdPTF8dTtlbHNle2lmKCgwfENbODY4NF0pPT0oMHxBKSl7dT0oMHxDWzg2ODFdKStvfDAsQ1s4NjgxXT11LENbODY4NF09YSxDW2ErND4+Ml09MXx1LENbYSt1Pj4yXT11O2JyZWFrfWlmKDE9PSgzJihlPTB8Q1tBKzQ+PjJdKXwwKSl7Zzpkb3tpZihlPj4+MDwyNTYpe2lmKGc9MHxDW0ErOD4+Ml0sKDB8KEI9MHxDW0ErMTI+PjJdKSk9PSgwfGcpKXtDWzg2NzldPUNbODY3OV0mfigxPDwoZT4+PjMpKTticmVha31DW2crMTI+PjJdPUIsQ1tCKzg+PjJdPWc7YnJlYWt9aT0wfENbQSsyND4+Ml0sZz0wfENbQSsxMj4+Ml07ZG97aWYoKDB8Zyk9PSgwfEEpKXtpZihnPTB8Q1tBKzE2KzQ+PjJdKUI9QSsxNis0fDA7ZWxzZXtpZighKGc9MHxDW0ErMTY+PjJdKSl7Zz0wO2JyZWFrfUI9QSsxNnwwfWZvcig7OylpZihRPTB8Q1soRT1nKzIwfDApPj4yXSlnPVEsQj1FO2Vsc2V7aWYoIShRPTB8Q1soRT1nKzE2fDApPj4yXSkpYnJlYWs7Zz1RLEI9RX1DW0I+PjJdPTB9ZWxzZSB1PTB8Q1tBKzg+PjJdLENbdSsxMj4+Ml09ZyxDW2crOD4+Ml09dX13aGlsZSgwKTtpZighaSlicmVhaztCPTB8Q1tBKzI4Pj4yXTtkb3tpZigoMHxDWzM1MDIwKyhCPDwyKT4+Ml0pPT0oMHxBKSl7aWYoQ1szNTAyMCsoQjw8Mik+PjJdPWcsMHxnKWJyZWFrO0NbODY4MF09Q1s4NjgwXSZ+KDE8PEIpO2JyZWFrIGd9aWYoQ1soKDB8Q1tpKzE2Pj4yXSk9PSgwfEEpP2krMTZ8MDppKzIwfDApPj4yXT1nLCFnKWJyZWFrIGd9d2hpbGUoMCk7aWYoQ1tnKzI0Pj4yXT1pLDB8KEI9MHxDW0ErMTY+PjJdKSYmKENbZysxNj4+Ml09QixDW0IrMjQ+PjJdPWcpLCEoQj0wfENbQSsxNis0Pj4yXSkpYnJlYWs7Q1tnKzIwPj4yXT1CLENbQisyND4+Ml09Z313aGlsZSgwKTtBPUErKC04JmUpfDAsRT0oLTgmZSkrb3wwfWVsc2UgRT1vO2lmKENbKEI9QSs0fDApPj4yXT0tMiZDW0I+PjJdLENbYSs0Pj4yXT0xfEUsQ1thK0U+PjJdPUUsQj1FPj4+MyxFPj4+MDwyNTYpeyhBPTB8Q1s4Njc5XSkmMTw8Qj8oQT0zNDc1NisoQjw8MTw8MikrOHwwLGc9MHxDWzM0NzU2KyhCPDwxPDwyKSs4Pj4yXSk6KENbODY3OV09QXwxPDxCLEE9MzQ3NTYrKEI8PDE8PDIpKzh8MCxnPTM0NzU2KyhCPDwxPDwyKXwwKSxDW0E+PjJdPWEsQ1tnKzEyPj4yXT1hLENbYSs4Pj4yXT1nLENbYSsxMj4+Ml09MzQ3NTYrKEI8PDE8PDIpO2JyZWFrfUE9RT4+Pjg7ZG97aWYoQSl7aWYoRT4+PjA+MTY3NzcyMTUpe1E9MzE7YnJlYWt9UT1FPj4+KDcrKFE9MTQtKCg1MjAxOTIrKEE8PCgoQSsxMDQ4MzIwfDApPj4+MTYmOCkpfDApPj4+MTYmNHwoQSsxMDQ4MzIwfDApPj4+MTYmOHwoMjQ1NzYwKyhRPUE8PCgoQSsxMDQ4MzIwfDApPj4+MTYmOCk8PCgoNTIwMTkyKyhBPDwoKEErMTA0ODMyMHwwKT4+PjE2JjgpKXwwKT4+PjE2JjQpKXwwKT4+PjE2JjIpKyhRPDwoKFErMjQ1NzYwfDApPj4+MTYmMik+Pj4xNSl8MCl8MCkmMXxRPDwxfWVsc2UgUT0wfXdoaWxlKDApO2lmKGc9MzUwMjArKFE8PDIpfDAsQ1thKzI4Pj4yXT1RLENbYSsxNis0Pj4yXT0wLENbYSsxNj4+Ml09MCwhKChBPTB8Q1s4NjgwXSkmKEI9MTw8USkpKXtDWzg2ODBdPUF8QixDW2c+PjJdPWEsQ1thKzI0Pj4yXT1nLENbYSsxMj4+Ml09YSxDW2ErOD4+Ml09YTticmVha31BPTB8Q1tnPj4yXTtnOmRve2lmKCgtOCZDW0ErND4+Ml18MCkhPSgwfEUpKXtmb3IoUT1FPDwoMzE9PSgwfFEpPzA6MjUtKFE+Pj4xKXwwKTtnPTB8Q1soQj1BKzE2KyhRPj4+MzE8PDIpfDApPj4yXTspe2lmKCgtOCZDW2crND4+Ml18MCk9PSgwfEUpKXtBPWc7YnJlYWsgZ31RPDw9MSxBPWd9Q1tCPj4yXT1hLENbYSsyND4+Ml09QSxDW2ErMTI+PjJdPWEsQ1thKzg+PjJdPWE7YnJlYWsgSX19d2hpbGUoMCk7dT0wfENbKHA9QSs4fDApPj4yXSxDW3UrMTI+PjJdPWEsQ1twPj4yXT1hLENbYSs4Pj4yXT11LENbYSsxMj4+Ml09QSxDW2ErMjQ+PjJdPTB9fXdoaWxlKDApO3JldHVybiB5PUksMHxuKzh9Zm9yKGc9MzUxNjQ7ISgoQT0wfENbZz4+Ml0pPj4+MDw9Yz4+PjAmJih1PUErKDB8Q1tnKzQ+PjJdKXwwKT4+PjA+Yz4+PjApOylnPTB8Q1tnKzg+PjJdO0U9KEU9dSstNDcrKDA9PSh1Ky00Nys4Jjd8MCk/MDowLSh1Ky00Nys4KSY3KXwwKT4+PjA8KGMrMTZ8MCk+Pj4wP2M6RSxBPWkrLTQwfDAscD1lKyhGPTA9PSg3JihGPWUrOHwwKXwwKT8wOjAtRiY3KXwwLENbODY4NV09cCxDWzg2ODJdPUEtRixDW3ArND4+Ml09QS1GfDEsQ1tlK0ErND4+Ml09NDAsQ1s4Njg2XT1DWzg4MDFdLENbRSs0Pj4yXT0yNyxDW0UrOD4+Ml09Q1s4NzkxXSxDW0UrOCs0Pj4yXT1DWzg3OTJdLENbRSs4Kzg+PjJdPUNbODc5M10sQ1tFKzgrMTI+PjJdPUNbODc5NF0sQ1s4NzkxXT1lLENbODc5Ml09aSxDWzg3OTRdPTAsQ1s4NzkzXT1FKzgsQT1FKzI0fDA7ZG97cD1BLENbKEE9QSs0fDApPj4yXT03fXdoaWxlKChwKzh8MCk+Pj4wPHU+Pj4wKTtpZigoMHxFKSE9KDB8Yykpe2lmKENbRSs0Pj4yXT0tMiZDW0UrND4+Ml0sQ1tjKzQ+PjJdPUUtY3wxLENbRT4+Ml09RS1jLChFLWN8MCk+Pj4wPDI1Nil7Qj0zNDc1NisoKEUtY3wwKT4+PjM8PDE8PDIpfDAsKEE9MHxDWzg2NzldKSYxPDwoKEUtY3wwKT4+PjMpPyhBPUIrOHwwLGc9MHxDW0IrOD4+Ml0pOihDWzg2NzldPUF8MTw8KChFLWN8MCk+Pj4zKSxBPUIrOHwwLGc9QiksQ1tBPj4yXT1jLENbZysxMj4+Ml09YyxDW2MrOD4+Ml09ZyxDW2MrMTI+PjJdPUI7YnJlYWt9aWYoZz0zNTAyMCsoKFE9KEUtY3wwKT4+Pjg/KEUtY3wwKT4+PjA+MTY3NzcyMTU/MzE6KEUtY3wwKT4+Pig3KyhRPTE0LSgoNTIwMTkyKyhRPShFLWN8MCk+Pj44PDwoKDEwNDgzMjArKChFLWN8MCk+Pj44KXwwKT4+PjE2JjgpKXwwKT4+PjE2JjR8KDEwNDgzMjArKChFLWN8MCk+Pj44KXwwKT4+PjE2Jjh8KDI0NTc2MCsoUTw8KChRKzUyMDE5MnwwKT4+PjE2JjQpKXwwKT4+PjE2JjIpKyhRPDwoKFErNTIwMTkyfDApPj4+MTYmNCk8PCgoMjQ1NzYwKyhRPDwoKFErNTIwMTkyfDApPj4+MTYmNCkpfDApPj4+MTYmMik+Pj4xNSl8MCl8MCkmMXxRPDwxOjApPDwyKXwwLENbYysyOD4+Ml09USxDW2MrMjA+PjJdPTAsQ1tjKzE2Pj4yXT0wLCEoKEE9MHxDWzg2ODBdKSYoQj0xPDxRKSkpe0NbODY4MF09QXxCLENbZz4+Ml09YyxDW2MrMjQ+PjJdPWcsQ1tjKzEyPj4yXT1jLENbYys4Pj4yXT1jO2JyZWFrfUE9MHxDW2c+PjJdO0k6ZG97aWYoKC04JkNbQSs0Pj4yXXwwKSE9KEUtY3wwKSl7Zm9yKFE9RS1jPDwoMzE9PSgwfFEpPzA6MjUtKFE+Pj4xKXwwKTtnPTB8Q1soQj1BKzE2KyhRPj4+MzE8PDIpfDApPj4yXTspe2lmKCgtOCZDW2crND4+Ml18MCk9PShFLWN8MCkpe0E9ZzticmVhayBJfVE8PD0xLEE9Z31DW0I+PjJdPWMsQ1tjKzI0Pj4yXT1BLENbYysxMj4+Ml09YyxDW2MrOD4+Ml09YzticmVhayBBfX13aGlsZSgwKTt1PTB8Q1socD1BKzh8MCk+PjJdLENbdSsxMj4+Ml09YyxDW3A+PjJdPWMsQ1tjKzg+PjJdPXUsQ1tjKzEyPj4yXT1BLENbYysyND4+Ml09MH19ZWxzZSAwPT0oMHwodT0wfENbODY4M10pKXxlPj4+MDx1Pj4+MCYmKENbODY4M109ZSksQ1s4NzkxXT1lLENbODc5Ml09aSxDWzg3OTRdPTAsQ1s4Njg4XT1DWzg3OTddLENbODY4N109LTEsQ1s4NjkyXT0zNDc1NixDWzg2OTFdPTM0NzU2LENbODY5NF09MzQ3NjQsQ1s4NjkzXT0zNDc2NCxDWzg2OTZdPTM0NzcyLENbODY5NV09MzQ3NzIsQ1s4Njk4XT0zNDc4MCxDWzg2OTddPTM0NzgwLENbODcwMF09MzQ3ODgsQ1s4Njk5XT0zNDc4OCxDWzg3MDJdPTM0Nzk2LENbODcwMV09MzQ3OTYsQ1s4NzA0XT0zNDgwNCxDWzg3MDNdPTM0ODA0LENbODcwNl09MzQ4MTIsQ1s4NzA1XT0zNDgxMixDWzg3MDhdPTM0ODIwLENbODcwN109MzQ4MjAsQ1s4NzEwXT0zNDgyOCxDWzg3MDldPTM0ODI4LENbODcxMl09MzQ4MzYsQ1s4NzExXT0zNDgzNixDWzg3MTRdPTM0ODQ0LENbODcxM109MzQ4NDQsQ1s4NzE2XT0zNDg1MixDWzg3MTVdPTM0ODUyLENbODcxOF09MzQ4NjAsQ1s4NzE3XT0zNDg2MCxDWzg3MjBdPTM0ODY4LENbODcxOV09MzQ4NjgsQ1s4NzIyXT0zNDg3NixDWzg3MjFdPTM0ODc2LENbODcyNF09MzQ4ODQsQ1s4NzIzXT0zNDg4NCxDWzg3MjZdPTM0ODkyLENbODcyNV09MzQ4OTIsQ1s4NzI4XT0zNDkwMCxDWzg3MjddPTM0OTAwLENbODczMF09MzQ5MDgsQ1s4NzI5XT0zNDkwOCxDWzg3MzJdPTM0OTE2LENbODczMV09MzQ5MTYsQ1s4NzM0XT0zNDkyNCxDWzg3MzNdPTM0OTI0LENbODczNl09MzQ5MzIsQ1s4NzM1XT0zNDkzMixDWzg3MzhdPTM0OTQwLENbODczN109MzQ5NDAsQ1s4NzQwXT0zNDk0OCxDWzg3MzldPTM0OTQ4LENbODc0Ml09MzQ5NTYsQ1s4NzQxXT0zNDk1NixDWzg3NDRdPTM0OTY0LENbODc0M109MzQ5NjQsQ1s4NzQ2XT0zNDk3MixDWzg3NDVdPTM0OTcyLENbODc0OF09MzQ5ODAsQ1s4NzQ3XT0zNDk4MCxDWzg3NTBdPTM0OTg4LENbODc0OV09MzQ5ODgsQ1s4NzUyXT0zNDk5NixDWzg3NTFdPTM0OTk2LENbODc1NF09MzUwMDQsQ1s4NzUzXT0zNTAwNCx1PWkrLTQwfDAscD1lKyhGPTA9PSg3JihGPWUrOHwwKXwwKT8wOjAtRiY3KXwwLENbODY4NV09cCxDWzg2ODJdPXUtRixDW3ArND4+Ml09dS1GfDEsQ1tlK3UrND4+Ml09NDAsQ1s4Njg2XT1DWzg4MDFdfXdoaWxlKDApO2lmKChBPTB8Q1s4NjgyXSk+Pj4wPnQ+Pj4wKXJldHVybiBGPUEtdHwwLENbODY4Ml09RixwPSh1PTB8Q1s4Njg1XSkrdHwwLENbODY4NV09cCxDW3ArND4+Ml09MXxGLENbdSs0Pj4yXT0zfHQseT1JLDB8dSs4fXJldHVybiBDWzg2NzhdPTQ4LHk9SSwwfWZ1bmN0aW9uIHAoQSl7dmFyIEksZyxDLFEsRT0wLGk9MCxlPTAsYz0wLGE9MCxuPTAscj0wLHQ9MCxmPTAsdz0wLHk9MCxzPTAsaD0wLEQ9MCxGPTAscD0wLHU9MCxIPTAsaz0wLGw9MCxfPTAsRz0wLGQ9MCxZPTAsTT0wLFM9MCxVPTAsdj0wLGI9MCxKPTAsUD0wLFI9MCxOPTAsbT0wLEw9MCx4PTAsSz0wLFg9MCxqPTAsVD0wLHE9MCxWPTAsej0wLFc9MCxPPTAsWj0wLCQ9MCxBQT0wLElBPTAsZ0E9MCxCQT0wLENBPTAsUUE9MCxFQT0wLGlBPTAsZUE9MCxvQT0wLGNBPTAsYUE9MCxuQT0wLHJBPTAsdEE9MCxmQT0wLHdBPTAseUE9MDtqPTB8QmcoMHxCWyhBfD0wKT4+MF0sMHxCW0ErMT4+MF0sMHxCW0ErMj4+MF0pLG8oKSxWPTB8eWcoMHwoVj0wfGtJKEErMnwwKSksMHxvKCksNSksbygpLEo9MHx5ZygwfChKPTB8QmcoMHxCW0ErNT4+MF0sMHxCW0ErNj4+MF0sMHxCW0ErNz4+MF0pKSwwfG8oKSwyKSxvKCkseT0wfHlnKDB8KHk9MHxrSShBKzd8MCkpLDB8bygpLDcpLG8oKSxUPTB8eWcoMHwoVD0wfGtJKEErMTB8MCkpLDB8bygpLDQpLG8oKSxaPTB8eWcoMHwoWj0wfEJnKDB8QltBKzEzPj4wXSwwfEJbQSsxND4+MF0sMHxCW0ErMTU+PjBdKSksMHxvKCksMSksbygpLGw9MHx5ZygwfChsPTB8a0koQSsxNXwwKSksMHxvKCksNiksbygpLG9BPTB8eWcoMHwob0E9MHxCZygwfEJbQSsxOD4+MF0sMHxCW0ErMTk+PjBdLDB8QltBKzIwPj4wXSkpLDB8bygpLDMpLG8oKSxyQT0wfEJnKDB8QltBKzIxPj4wXSwwfEJbQSsyMj4+MF0sMHxCW0ErMjM+PjBdKSxvKCksRUE9MHx5ZygwfChFQT0wfGtJKEErMjN8MCkpLDB8bygpLDUpLG8oKSxuQT0wfHlnKDB8KG5BPTB8QmcoMHxCW0ErMjY+PjBdLDB8QltBKzI3Pj4wXSwwfEJbQSsyOD4+MF0pKSwwfG8oKSwyKSxvKCksZ0E9MHx5ZygwfChnQT0wfGtJKEErMjh8MCkpLDB8bygpLDcpLG8oKSx3QT0wfHlnKDB8KHdBPTB8a0koQSszMXwwKSksMHxvKCksNCksbygpLFk9MHx5ZygwfChZPTB8QmcoMHxCW0ErMzQ+PjBdLDB8QltBKzM1Pj4wXSwwfEJbQSszNj4+MF0pKSwwfG8oKSwxKSxvKCksSz0wfHlnKDB8KEs9MHxrSShBKzM2fDApKSwwfG8oKSw2KSxvKCkscD0wfHlnKDB8KHA9MHxCZygwfEJbQSszOT4+MF0sMHxCW0ErNDA+PjBdLDB8QltBKzQxPj4wXSkpLDB8bygpLDMpLG8oKSxlPTB8QmcoMHxCW0ErNDI+PjBdLDB8QltBKzQzPj4wXSwwfEJbQSs0ND4+MF0pLG8oKSxMPTB8eWcoMHwoTD0wfGtJKEErNDR8MCkpLDB8bygpLDUpLG8oKSxDQT0wfHlnKDB8KENBPTB8QmcoMHxCW0ErNDc+PjBdLDB8QltBKzQ4Pj4wXSwwfEJbQSs0OT4+MF0pKSwwfG8oKSwyKSxvKCkseUE9MHx5ZygwfCh5QT0wfGtJKEErNDl8MCkpLDB8bygpLDcpLG8oKSxmPTB8eWcoMHwoZj0wfGtJKEErNTJ8MCkpLDB8bygpLDQpLG8oKSxHPTB8eWcoMHwoRz0wfEJnKDB8QltBKzU1Pj4wXSwwfEJbQSs1Nj4+MF0sMHxCW0ErNTc+PjBdKSksMHxvKCksMSksbygpLFU9MHx5ZygwfChVPTB8a0koQSs1N3wwKSksMHxvKCksNiksbygpLHI9MHxRZygwfChxPTB8eWcoMHwocT0wfGtJKEErNjB8MCkpLDB8bygpLDMpKSwwfChjPTB8bygpKSw2NjY2NDMsMCksRj0wfG8oKSxhQT0wfFFnKDB8cSwwfGMsNDcwMjk2LDApLHU9MHxvKCksTT0wfFFnKDB8cSwwfGMsNjU0MTgzLDApLGE9MHxvKCksXz0wfFFnKDB8cSwwfGMsLTk5NzgwNSwtMSksdD0wfG8oKSxwPTB8dmcoMHwoRT0wfFFnKDB8cSwwfGMsMTM2NjU3LDApKSwwfG8oKSwyMDk3MTUxJnB8MCwwKSxFPTB8bygpLGU9MHx2ZygwfChjPTB8UWcoMHxxLDB8YywtNjgzOTAxLC0xKSksMHxvKCksMjA5NzE1MSZlfDAsMCksYz0wfG8oKSxxPTB8UWcoMjA5NzE1MSZVfDAsMCw2NjY2NDMsMCkseD0wfG8oKSxrPTB8UWcoMjA5NzE1MSZVfDAsMCw0NzAyOTYsMCksSUE9MHxvKCksdj0wfFFnKDIwOTcxNTEmVXwwLDAsNjU0MTgzLDApLGk9MHxvKCksVz0wfFFnKDIwOTcxNTEmVXwwLDAsLTk5NzgwNSwtMSksej0wfG8oKSxYPTB8UWcoMjA5NzE1MSZVfDAsMCwxMzY2NTcsMCksRD0wfG8oKSxVPTB8dmcoMHxwLDB8RSwwfChVPTB8UWcoMjA5NzE1MSZVfDAsMCwtNjgzOTAxLC0xKSksMHxvKCkpLEU9MHxvKCkscD0wfFFnKDIwOTcxNTEmR3wwLDAsNjY2NjQzLDApLE89MHxvKCksZD0wfFFnKDIwOTcxNTEmR3wwLDAsNDcwMjk2LDApLEJBPTB8bygpLG09MHxRZygyMDk3MTUxJkd8MCwwLDY1NDE4MywwKSxuPTB8bygpLHRBPTB8UWcoMjA5NzE1MSZHfDAsMCwtOTk3ODA1LC0xKSxjQT0wfG8oKSxBQT0wfFFnKDIwOTcxNTEmR3wwLDAsMTM2NjU3LDApLGI9MHxvKCksRD0wfHZnKDB8KHQ9MHx2ZygwfChLPTB8dmcoMHwoRz0wfFFnKDIwOTcxNTEmR3wwLDAsLTY4MzkwMSwtMSkpLDB8bygpLDIwOTcxNTEmS3wwLDApKSwwfG8oKSwwfF8sMHx0KSksMHxvKCksMHxYLDB8RCksWD0wfG8oKSx0PTB8UWcoMjA5NzE1MSZmfDAsMCw2NjY2NDMsMCksXz0wfG8oKSxLPTB8UWcoMjA5NzE1MSZmfDAsMCw0NzAyOTYsMCksRz0wfG8oKSxzPTB8UWcoMjA5NzE1MSZmfDAsMCw2NTQxODMsMCksJD0wfG8oKSxQPTB8UWcoMjA5NzE1MSZmfDAsMCwtOTk3ODA1LC0xKSxSPTB8bygpLFE9MHxRZygyMDk3MTUxJmZ8MCwwLDEzNjY1NywwKSxmQT0wfG8oKSxmPTB8UWcoMjA5NzE1MSZmfDAsMCwtNjgzOTAxLC0xKSx3PTB8bygpLGg9MHxRZygyMDk3MTUxJnlBfDAsMCw2NjY2NDMsMCksUz0wfG8oKSxpQT0wfFFnKDIwOTcxNTEmeUF8MCwwLDQ3MDI5NiwwKSxlQT0wfG8oKSxnPTB8UWcoMjA5NzE1MSZ5QXwwLDAsNjU0MTgzLDApLFFBPTB8bygpLEM9MHxRZygyMDk3MTUxJnlBfDAsMCwtOTk3ODA1LC0xKSxOPTB8bygpLEk9MHxRZygyMDk3MTUxJnlBfDAsMCwxMzY2NTcsMCksSD0wfG8oKSxpPTB8dmcoMHwodT0wfHZnKDB8KGNBPTB8dmcoMHwoZkE9MHx2ZygwfCh3QT0wfHZnKDB8KHlBPTB8UWcoMjA5NzE1MSZ5QXwwLDAsLTY4MzkwMSwtMSkpLDB8bygpLDIwOTcxNTEmd0F8MCwwKSksMHxvKCksMHxRLDB8ZkEpKSwwfG8oKSwwfHRBLDB8Y0EpKSwwfG8oKSwwfGFBLDB8dSkpLDB8bygpLDB8diwwfGkpLHY9MHxvKCksbD0wfHZnKDB8KHU9MHxRZygyMDk3MTUxJkNBfDAsMCw2NjY2NDMsMCkpLDB8bygpLDIwOTcxNTEmbHwwLDApLHU9MHxvKCksYUE9MHxRZygyMDk3MTUxJkNBfDAsMCw0NzAyOTYsMCksY0E9MHxvKCksXz0wfHZnKDB8KGVBPTB8dmcoMHwockE9MHx2ZygwfCh0QT0wfFFnKDIwOTcxNTEmQ0F8MCwwLDY1NDE4MywwKSksMHxvKCksMjA5NzE1MSZyQXwwLDApKSwwfG8oKSwwfGlBLDB8ZUEpKSwwfG8oKSwwfHQsMHxfKSx0PTB8bygpLGVBPTB8UWcoMjA5NzE1MSZDQXwwLDAsLTk5NzgwNSwtMSksaUE9MHxvKCkseD0wfHZnKDB8KEJBPTB8dmcoMHwoJD0wfHZnKDB8KE49MHx2ZygwfChuQT0wfHZnKDB8KHJBPTB8UWcoMjA5NzE1MSZDQXwwLDAsMTM2NjU3LDApKSwwfG8oKSwyMDk3MTUxJm5BfDAsMCkpLDB8bygpLDB8QywwfE4pKSwwfG8oKSwwfHMsMHwkKSksMHxvKCksMHxkLDB8QkEpKSwwfG8oKSwwfHEsMHx4KSxxPTB8bygpLENBPTB8UWcoMjA5NzE1MSZDQXwwLDAsLTY4MzkwMSwtMSksQkE9MHxvKCkscz0wfHlnKDB8KGQ9MHx2ZygwfGwsMHx1LDEwNDg1NzYsMCkpLDB8KCQ9MHxvKCkpLDIxKSxOPTB8bygpLE49MHx2ZygwfChTPTB8dmcoMHwob0E9MHx2ZygwfGFBLDB8Y0EsMjA5NzE1MSZvQXwwLDApKSwwfG8oKSwwfGgsMHxTKSksMHxvKCksMHxzLDB8Tikscz0wfG8oKSwkPTB8VWcoMHxsLDB8dSwtMjA5NzE1MiZkfDAsMjA0NyYkfDApLGQ9MHxvKCksUz0wfHlnKDB8KHU9MHx2ZygwfF8sMHx0LDEwNDg1NzYsMCkpLDB8KGw9MHxvKCkpLDIxKSxoPTB8bygpLGg9MHx2ZygwfChPPTB8dmcoMHwoRz0wfHZnKDB8KFFBPTB8dmcoMHwoRUE9MHx2ZygwfGVBLDB8aUEsMjA5NzE1MSZFQXwwLDApKSwwfG8oKSwwfGcsMHxRQSkpLDB8bygpLDB8SywwfEcpKSwwfG8oKSwwfHAsMHxPKSksMHxvKCksMHxTLDB8aCksUz0wfG8oKSxHPTB8aWcoMHwoTz0wfHZnKDB8eCwwfHEsMTA0ODU3NiwwKSksMHwocD0wfG8oKSksMjEpLEs9MHxvKCksSz0wfHZnKDB8KElBPTB8dmcoMHwoRj0wfHZnKDB8KG49MHx2ZygwfChSPTB8dmcoMHwoSD0wfHZnKDB8KGdBPTB8dmcoMHxDQSwwfEJBLDIwOTcxNTEmZ0F8MCwwKSksMHxvKCksMHxJLDB8SCkpLDB8bygpLDB8UCwwfFIpKSwwfG8oKSwwfG0sMHxuKSksMHxvKCksMHxyLDB8RikpLDB8bygpLDB8aywwfElBKSksMHxvKCksMHxHLDB8SyksRz0wfG8oKSxGPTB8aWcoMHwoSUE9MHx2ZygwfGksMHx2LDEwNDg1NzYsMCkpLDB8KGs9MHxvKCkpLDIxKSxyPTB8bygpLHI9MHx2ZygwfCh6PTB8dmcoMHwoYT0wfHZnKDB8KGI9MHx2ZygwfChZPTB8dmcoMHxmLDB8dywyMDk3MTUxJll8MCwwKSksMHxvKCksMHxBQSwwfGIpKSwwfG8oKSwwfE0sMHxhKSksMHxvKCksMHxXLDB8eikpLDB8bygpLDB8RiwwfHIpLEY9MHxvKCksaz0wfFVnKDB8aSwwfHYsLTIwOTcxNTImSUF8MCwwfGspLElBPTB8bygpLHo9MHx2ZygwfFUsMHxFLDB8KHo9MHxpZygwfCh2PTB8dmcoMHxELDB8WCwxMDQ4NTc2LDApKSwwfChpPTB8bygpKSwyMSkpLDB8bygpKSxFPTB8bygpLGk9MHxVZygwfEQsMHxYLC0yMDk3MTUyJnZ8MCwwfGkpLHY9MHxvKCksTD0wfHZnKDB8KFU9MHxpZygwfChYPTB8dmcoMHxlLDB8YywxMDQ4NTc2LDApKSwwfChEPTB8bygpKSwyMSkpLDB8bygpLDIwOTcxNTEmTHwwLDApLFU9MHxvKCksRD0wfFVnKDB8ZSwwfGMsLTIwOTcxNTImWHwwLDB8RCksWD0wfG8oKSxXPTB8eWcoMHwoYz0wfHZnKDB8TiwwfHMsMTA0ODU3NiwwKSksMHwoZT0wfG8oKSksMjEpLGE9MHxvKCksZT0wfFVnKDB8TiwwfHMsLTIwOTcxNTImY3wwLDB8ZSksYz0wfG8oKSxNPTB8aWcoMHwocz0wfHZnKDB8aCwwfFMsMTA0ODU3NiwwKSksMHwoTj0wfG8oKSksMjEpLGI9MHxvKCksSUE9MHx2ZygwfCh3PTB8aWcoMHwoQUE9MHx2ZygwfEssMHxHLDEwNDg1NzYsMCkpLDB8KFk9MHxvKCkpLDIxKSksMHxvKCksMHxrLDB8SUEpLGs9MHxvKCksWT0wfFVnKDB8SywwfEcsLTIwOTcxNTImQUF8MCwwfFkpLEFBPTB8bygpLHY9MHx2ZygwfCh3PTB8aWcoMHwoRz0wfHZnKDB8ciwwfEYsMTA0ODU3NiwwKSksMHwoSz0wfG8oKSksMjEpKSwwfG8oKSwwfGksMHx2KSxpPTB8bygpLEs9MHxVZygwfHIsMHxGLC0yMDk3MTUyJkd8MCwwfEspLEc9MHxvKCksWD0wfHZnKDB8KHc9MHxpZygwfChGPTB8dmcoMHx6LDB8RSwxMDQ4NTc2LDApKSwwfChyPTB8bygpKSwyMSkpLDB8bygpLDB8RCwwfFgpLEQ9MHxvKCkscj0wfFVnKDB8eiwwfEUsLTIwOTcxNTImRnwwLDB8ciksRj0wfG8oKSxaPTB8dmcoMHwoRT0wfFFnKDB8TCwwfFUsNjY2NjQzLDApKSwwfG8oKSwyMDk3MTUxJlp8MCwwKSxFPTB8bygpLHo9MHx2ZygwfCQsMHxkLDB8KHo9MHxRZygwfEwsMHxVLDQ3MDI5NiwwKSksMHxvKCkpLGQ9MHxvKCksJD0wfHZnKDB8ZSwwfGMsMHwoJD0wfFFnKDB8TCwwfFUsNjU0MTgzLDApKSwwfG8oKSksYz0wfG8oKSxlPTB8UWcoMHxMLDB8VSwtOTk3ODA1LC0xKSx3PTB8bygpLGY9MHxRZygwfEwsMHxVLDEzNjY1NywwKSxuPTB8bygpLHA9MHxVZygwfChiPTB8dmcoMHwocT0wfHZnKDB8KFU9MHxRZygwfEwsMHxVLC02ODM5MDEsLTEpKSwwfG8oKSwwfHgsMHxxKSksMHxvKCksMHxNLDB8YikpLDB8bygpLC0yMDk3MTUyJk98MCwwfHApLE89MHxvKCksVD0wfHZnKDB8KGI9MHxRZygwfFgsMHxELDY2NjY0MywwKSksMHxvKCksMjA5NzE1MSZUfDAsMCksYj0wfG8oKSxNPTB8dmcoMHxaLDB8RSwwfChNPTB8UWcoMHxYLDB8RCw0NzAyOTYsMCkpLDB8bygpKSxFPTB8bygpLFo9MHx2ZygwfHosMHxkLDB8KFo9MHxRZygwfFgsMHxELDY1NDE4MywwKSksMHxvKCkpLGQ9MHxvKCksej0wfHZnKDB8JCwwfGMsMHwoej0wfFFnKDB8WCwwfEQsLTk5NzgwNSwtMSkpLDB8bygpKSxjPTB8bygpLCQ9MHxRZygwfFgsMHxELDEzNjY1NywwKSxxPTB8bygpLEQ9MHxRZygwfFgsMHxELC02ODM5MDEsLTEpLFg9MHxvKCkseT0wfHZnKDB8KHg9MHxRZygwfHIsMHxGLDY2NjY0MywwKSksMHxvKCksMjA5NzE1MSZ5fDAsMCkseD0wfG8oKSxVPTB8dmcoMHxULDB8YiwwfChVPTB8UWcoMHxyLDB8Riw0NzAyOTYsMCkpLDB8bygpKSxiPTB8bygpLFQ9MHx2ZygwfE0sMHxFLDB8KFQ9MHxRZygwfHIsMHxGLDY1NDE4MywwKSksMHxvKCkpLEU9MHxvKCksTT0wfHZnKDB8WiwwfGQsMHwoTT0wfFFnKDB8ciwwfEYsLTk5NzgwNSwtMSkpLDB8bygpKSxkPTB8bygpLFo9MHx2ZygwfHosMHxjLDB8KFo9MHxRZygwfHIsMHxGLDEzNjY1NywwKSksMHxvKCkpLGM9MHxvKCksRj0wfFFnKDB8ciwwfEYsLTY4MzkwMSwtMSkscj0wfG8oKSxyPTB8dmcoMHwocT0wfHZnKDB8KHc9MHx2ZygwfChsPTB8VWcoMHwodD0wfHZnKDB8VywwfGEsMHxfLDB8dCkpLDB8bygpLC0yMDk3MTUyJnV8MCwwfGwpKSwwfG8oKSwwfGUsMHx3KSksMHxvKCksMHwkLDB8cSkpLDB8bygpLDB8RiwwfHIpLEY9MHxvKCksSj0wfHZnKDB8KHE9MHxRZygwfHYsMHxpLDY2NjY0MywwKSksMHxvKCksMjA5NzE1MSZKfDAsMCkscT0wfG8oKSwkPTB8dmcoMHx5LDB8eCwwfCgkPTB8UWcoMHx2LDB8aSw0NzAyOTYsMCkpLDB8bygpKSx4PTB8bygpLHk9MHx2ZygwfFUsMHxiLDB8KHk9MHxRZygwfHYsMHxpLDY1NDE4MywwKSksMHxvKCkpLGI9MHxvKCksVT0wfHZnKDB8VCwwfEUsMHwoVT0wfFFnKDB8diwwfGksLTk5NzgwNSwtMSkpLDB8bygpKSxFPTB8bygpLFQ9MHx2ZygwfE0sMHxkLDB8KFQ9MHxRZygwfHYsMHxpLDEzNjY1NywwKSksMHxvKCkpLGQ9MHxvKCksaT0wfHZnKDB8WiwwfGMsMHwoaT0wfFFnKDB8diwwfGksLTY4MzkwMSwtMSkpLDB8bygpKSxjPTB8bygpLFY9MHx2ZygwfChaPTB8UWcoMHxLLDB8Ryw2NjY2NDMsMCkpLDB8bygpLDIwOTcxNTEmVnwwLDApLFo9MHxvKCksdj0wfHZnKDB8SiwwfHEsMHwodj0wfFFnKDB8SywwfEcsNDcwMjk2LDApKSwwfG8oKSkscT0wfG8oKSxKPTB8dmcoMHwkLDB8eCwwfChKPTB8UWcoMHxLLDB8Ryw2NTQxODMsMCkpLDB8bygpKSx4PTB8bygpLCQ9MHx2ZygwfHksMHxiLDB8KCQ9MHxRZygwfEssMHxHLC05OTc4MDUsLTEpKSwwfG8oKSksYj0wfG8oKSx5PTB8dmcoMHxVLDB8RSwwfCh5PTB8UWcoMHxLLDB8RywxMzY2NTcsMCkpLDB8bygpKSxFPTB8bygpLEc9MHx2ZygwfFQsMHxkLDB8KEc9MHxRZygwfEssMHxHLC02ODM5MDEsLTEpKSwwfG8oKSksZD0wfG8oKSxqPTB8dmcoMHwoVD0wfFFnKDB8SUEsMHxrLDY2NjY0MywwKSksMHxvKCksMjA5NzE1MSZqfDAsMCksVD0wfG8oKSxLPTB8dmcoMHxWLDB8WiwwfChLPTB8UWcoMHxJQSwwfGssNDcwMjk2LDApKSwwfG8oKSksWj0wfG8oKSxWPTB8dmcoMHx2LDB8cSwwfChWPTB8UWcoMHxJQSwwfGssNjU0MTgzLDApKSwwfG8oKSkscT0wfG8oKSx2PTB8dmcoMHxKLDB8eCwwfCh2PTB8UWcoMHxJQSwwfGssLTk5NzgwNSwtMSkpLDB8bygpKSx4PTB8bygpLEo9MHx2ZygwfCQsMHxiLDB8KEo9MHxRZygwfElBLDB8aywxMzY2NTcsMCkpLDB8bygpKSxiPTB8bygpLGs9MHx2ZygwfHksMHxFLDB8KGs9MHxRZygwfElBLDB8aywtNjgzOTAxLC0xKSksMHxvKCkpLEU9MHxvKCksJD0wfHZnKDB8SywwfFosMHwoJD0wfGlnKDB8KHk9MHx2ZygwfGosMHxULDEwNDg1NzYsMCkpLDB8KElBPTB8bygpKSwyMSkpLDB8bygpKSxaPTB8bygpLElBPTB8VWcoMHxqLDB8VCwtMjA5NzE1MiZ5fDAsMHxJQSkseT0wfG8oKSxLPTB8dmcoMHx2LDB8eCwwfChLPTB8aWcoMHwoVD0wfHZnKDB8ViwwfHEsMTA0ODU3NiwwKSksMHwoaj0wfG8oKSksMjEpKSwwfG8oKSkseD0wfG8oKSxNPTB8dmcoMHxrLDB8RSwwfChNPTB8aWcoMHwodj0wfHZnKDB8SiwwfGIsMTA0ODU3NiwwKSksMHwoVT0wfG8oKSksMjEpKSwwfG8oKSksRT0wfG8oKSxlPTB8dmcoMHxpLDB8YywwfChlPTB8aWcoMHwoaz0wfHZnKDB8RywwfGQsMTA0ODU3NiwwKSksMHwodz0wfG8oKSksMjEpKSwwfG8oKSksYz0wfG8oKSx3PTB8VWcoMHxHLDB8ZCwtMjA5NzE1MiZrfDAsMHx3KSxrPTB8bygpLGk9MHxpZygwfChkPTB8dmcoMHxyLDB8RiwxMDQ4NTc2LDApKSwwfChHPTB8bygpKSwyMSksbD0wfG8oKSxsPTB8dmcoMHwoWD0wfHZnKDB8KE49MHxVZygwfChTPTB8dmcoMHxmLDB8biwwfGgsMHxTKSksMHxvKCksLTIwOTcxNTImc3wwLDB8TikpLDB8bygpLDB8RCwwfFgpKSwwfG8oKSwwfGksMHxsKSxpPTB8bygpLEc9MHxVZygwfHIsMHxGLC0yMDk3MTUyJmR8MCwwfEcpLGQ9MHxvKCksQUE9MHx2ZygwfChYPTB8aWcoMHwoRj0wfHZnKDB8cCwwfE8sMTA0ODU3NiwwKSksMHwocj0wfG8oKSksMjEpKSwwfG8oKSwwfFksMHxBQSksWT0wfG8oKSxyPTB8VWcoMHxwLDB8TywtMjA5NzE1MiZGfDAsMHxyKSxGPTB8bygpLFg9MHxpZygwfChPPTB8dmcoMHwkLDB8WiwxMDQ4NTc2LDApKSwwfChwPTB8bygpKSwyMSksRD0wfG8oKSxTPTB8aWcoMHwoTj0wfHZnKDB8SywwfHgsMTA0ODU3NiwwKSksMHwocz0wfG8oKSksMjEpLGg9MHxvKCksdT0wfHZnKDB8dywwfGssMHwodT0wfGlnKDB8KG49MHx2ZygwfE0sMHxFLDEwNDg1NzYsMCkpLDB8KGY9MHxvKCkpLDIxKSksMHxvKCkpLGs9MHxvKCksXz0wfHZnKDB8RywwfGQsMHwoXz0wfGlnKDB8KHc9MHx2ZygwfGUsMHxjLDEwNDg1NzYsMCkpLDB8KHQ9MHxvKCkpLDIxKSksMHxvKCkpLGQ9MHxvKCksdD0wfFVnKDB8ZSwwfGMsLTIwOTcxNTImd3wwLDB8dCksdz0wfG8oKSxHPTB8dmcoMHxyLDB8RiwwfChHPTB8aWcoMHwoYz0wfHZnKDB8bCwwfGksMTA0ODU3NiwwKSksMHwoZT0wfG8oKSksMjEpKSwwfG8oKSksRj0wfG8oKSxlPTB8VWcoMHxsLDB8aSwtMjA5NzE1MiZjfDAsMHxlKSxjPTB8bygpLHI9MHxpZygwfChpPTB8dmcoMHxBQSwwfFksMTA0ODU3NiwwKSksMHwobD0wfG8oKSksMjEpLGE9MHxvKCksbD0wfFVnKDB8QUEsMHxZLC0yMDk3MTUyJml8MCwwfGwpLGk9MHxvKCksWT0wfHZnKDB8SUEsMHx5LDB8KFk9MHxRZygwfHIsMHxhLDY2NjY0MywwKSksMHxvKCkpLHk9MHxvKCksSUE9MHxRZygwfHIsMHxhLDQ3MDI5NiwwKSxBQT0wfG8oKSxXPTB8UWcoMHxyLDB8YSw2NTQxODMsMCksej0wfG8oKSxMPTB8UWcoMHxyLDB8YSwtOTk3ODA1LC0xKSxtPTB8bygpLFI9MHxRZygwfHIsMHxhLDEzNjY1NywwKSxQPTB8bygpLGE9MHxRZygwfHIsMHxhLC02ODM5MDEsLTEpLHI9MHxvKCkseT0wfGlnKDB8WSwwfHksMjEpLEg9MHxvKCkseT0wfGlnKDB8KEg9MHx2ZygwfChwPTB8VWcoMHwoWj0wfHZnKDB8SUEsMHxBQSwwfCQsMHxaKSksMHxvKCksLTIwOTcxNTImT3wwLDB8cCkpLDB8bygpLDB8eSwwfEgpKSwwfG8oKSwyMSkscD0wfG8oKSx5PTB8aWcoMHwocD0wfHZnKDB8KEQ9MHx2ZygwfChqPTB8VWcoMHwocT0wfHZnKDB8VywwfHosMHxWLDB8cSkpLDB8bygpLC0yMDk3MTUyJlR8MCwwfGopKSwwfG8oKSwwfFgsMHxEKSksMHxvKCksMHx5LDB8cCkpLDB8bygpLDIxKSxEPTB8bygpLHk9MHxpZygwfChEPTB8dmcoMHwocz0wfFVnKDB8KG09MHx2ZygwfEssMHx4LDB8TCwwfG0pKSwwfG8oKSwtMjA5NzE1MiZOfDAsMHxzKSksMHxvKCksMHx5LDB8RCkpLDB8bygpLDIxKSxzPTB8bygpLHk9MHxpZygwfChzPTB8dmcoMHwoaD0wfHZnKDB8KFU9MHxVZygwfChiPTB8dmcoMHxSLDB8UCwwfEosMHxiKSksMHxvKCksLTIwOTcxNTImdnwwLDB8VSkpLDB8bygpLDB8UywwfGgpKSwwfG8oKSwwfHksMHxzKSksMHxvKCksMjEpLGg9MHxvKCksWT0wfHZnKDB8KEc9MHxRZygwfChsPTB8aWcoMHwoaT0wfHZnKDB8KEY9MHxpZygwfChlPTB8dmcoMHxHLDB8RiwwfChlPTB8aWcoMHwoYz0wfHZnKDB8KGQ9MHxpZygwfCh0PTB8dmcoMHxfLDB8ZCwwfCh0PTB8aWcoMHwodz0wfHZnKDB8KGs9MHxpZygwfCh5PTB8dmcoMHx1LDB8aywwfCh5PTB8aWcoMHwoaD0wfHZnKDB8KGY9MHxVZygwfChyPTB8dmcoMHxNLDB8RSwwfGEsMHxyKSksMHxvKCksLTIwOTcxNTImbnwwLDB8ZikpLDB8bygpLDB8eSwwfGgpKSwwfG8oKSwyMSkpLDB8bygpKSksMHxvKCksMjEpKSwwfG8oKSwwfHQsMHx3KSksMHxvKCksMjEpKSwwfG8oKSkpLDB8bygpLDIxKSksMHxvKCksMHxlLDB8YykpLDB8bygpLDIxKSksMHxvKCkpKSwwfG8oKSwyMSkpLDB8bygpLDB8bCwwfGkpKSwwfG8oKSwyMSkpLDB8KEY9MHxvKCkpLDY2NjY0MywwKSksMHxvKCksMjA5NzE1MSZZfDAsMCksRz0wfG8oKSxIPTB8dmcoMHwoZD0wfFFnKDB8bCwwfEYsNDcwMjk2LDApKSwwfG8oKSwyMDk3MTUxJkh8MCwwKSxkPTB8bygpLHA9MHx2ZygwfChfPTB8UWcoMHxsLDB8Riw2NTQxODMsMCkpLDB8bygpLDIwOTcxNTEmcHwwLDApLF89MHxvKCksRD0wfHZnKDB8KGs9MHxRZygwfGwsMHxGLC05OTc4MDUsLTEpKSwwfG8oKSwyMDk3MTUxJkR8MCwwKSxrPTB8bygpLHM9MHx2ZygwfCh1PTB8UWcoMHxsLDB8RiwxMzY2NTcsMCkpLDB8bygpLDIwOTcxNTEmc3wwLDApLHU9MHxvKCksaT0wfHZnKDB8KEU9MHxpZygwfChlPTB8dmcoMHwoYT0wfGlnKDB8KGM9MHx2ZygwfChyPTB8aWcoMHwodD0wfHZnKDB8KG49MHxpZygwfCh3PTB8dmcoMHwoZj0wfGlnKDB8KHk9MHx2ZygwfChoPTB8aWcoMHwocz0wfHZnKDB8KGg9MHx2ZygwfChGPTB8UWcoMHxsLDB8RiwtNjgzOTAxLC0xKSksMHxvKCksMjA5NzE1MSZofDAsMCkpLDB8KEY9MHxvKCkpLDB8KHM9MHxpZygwfChEPTB8dmcoMHxzLDB8dSwwfChEPTB8aWcoMHwocD0wfHZnKDB8RCwwfGssMHwocD0wfGlnKDB8KEg9MHx2ZygwfHAsMHxfLDB8KEg9MHxpZygwfChsPTB8dmcoMHxILDB8ZCwwfChsPTB8aWcoMHxZLDB8RywyMSkpLDB8bygpKSksMHwoZD0wfG8oKSksMjEpKSwwfG8oKSkpLDB8KF89MHxvKCkpLDIxKSksMHxvKCkpKSwwfChrPTB8bygpKSwyMSkpLDB8bygpKSksMHwodT0wfG8oKSksMjEpKSwwfG8oKSkpLDB8KEY9MHxvKCkpLDIxKSksMHxvKCksMjA5NzE1MSZ5fDAsMCkpLDB8KGg9MHxvKCkpLDIxKSksMHxvKCksMjA5NzE1MSZ3fDAsMCkpLDB8KGY9MHxvKCkpLDIxKSksMHxvKCksMjA5NzE1MSZ0fDAsMCkpLDB8KG49MHxvKCkpLDIxKSksMHxvKCksMjA5NzE1MSZjfDAsMCkpLDB8KHI9MHxvKCkpLDIxKSksMHxvKCksMjA5NzE1MSZlfDAsMCkpLDB8KGE9MHxvKCkpLDIxKSksMHxvKCksMjA5NzE1MSZpfDAsMCksRT0wfG8oKSxCW0E+PjBdPVksTT0wfHlnKDB8WSwwfEcsOCksbygpLEJbQSsxPj4wXT1NLEc9MHx5ZygwfFksMHxHLDE2KSxvKCksWT0wfHJnKDIwOTcxNTEmbHwwLDAsNSksbygpLEJbQSsyPj4wXT1ZfDMxJkcsRz0wfHlnKDB8bCwwfGQsMyksbygpLEJbQSszPj4wXT1HLGQ9MHx5ZygwfGwsMHxkLDExKSxvKCksQltBKzQ+PjBdPWQsbD0wfHlnKDIwOTcxNTEmbHwwLDAsMTkpLGQ9MHxvKCksRz0wfHJnKDIwOTcxNTEmSHwwLDAsMiksbygpLEJbQSs1Pj4wXT1HfGwsXz0wfHlnKDB8SCwwfF8sNiksbygpLEJbQSs2Pj4wXT1fLEg9MHx5ZygyMDk3MTUxJkh8MCwwLDE0KSxfPTB8bygpLGw9MHxyZygyMDk3MTUxJnB8MCwwLDcpLG8oKSxCW0ErNz4+MF09bHxILEg9MHx5ZygwfHAsMHxrLDEpLG8oKSxCW0ErOD4+MF09SCxrPTB8eWcoMHxwLDB8ayw5KSxvKCksQltBKzk+PjBdPWsscD0wfHlnKDIwOTcxNTEmcHwwLDAsMTcpLGs9MHxvKCksSD0wfHJnKDIwOTcxNTEmRHwwLDAsNCksbygpLEJbQSsxMD4+MF09SHxwLHA9MHx5ZygwfEQsMHx1LDQpLG8oKSxCW0ErMTE+PjBdPXAsdT0wfHlnKDB8RCwwfHUsMTIpLG8oKSxCW0ErMTI+PjBdPXUsRD0wfHlnKDIwOTcxNTEmRHwwLDAsMjApLHU9MHxvKCkscD0wfHJnKDIwOTcxNTEmc3wwLDAsMSksbygpLEJbQSsxMz4+MF09cHxELEY9MHx5ZygwfHMsMHxGLDcpLG8oKSxCW0ErMTQ+PjBdPUYscz0wfHlnKDIwOTcxNTEmc3wwLDAsMTUpLEY9MHxvKCksRD0wfHJnKDIwOTcxNTEmeXwwLDAsNiksbygpLEJbQSsxNT4+MF09RHxzLHM9MHx5ZygwfHksMHxoLDIpLG8oKSxCW0ErMTY+PjBdPXMsaD0wfHlnKDB8eSwwfGgsMTApLG8oKSxCW0ErMTc+PjBdPWgseT0wfHlnKDIwOTcxNTEmeXwwLDAsMTgpLGg9MHxvKCkscz0wfHJnKDB8dywwfGYsMyksbygpLEJbQSsxOD4+MF09c3x5LHk9MHx5ZygwfHcsMHxmLDUpLG8oKSxCW0ErMTk+PjBdPXksZj0wfHlnKDB8dywwfGYsMTMpLG8oKSxCW0ErMjA+PjBdPWYsQltBKzIxPj4wXT10LGY9MHx5ZygwfHQsMHxuLDgpLG8oKSxCW0ErMjI+PjBdPWYsbj0wfHlnKDB8dCwwfG4sMTYpLG8oKSx0PTB8cmcoMjA5NzE1MSZjfDAsMCw1KSxvKCksQltBKzIzPj4wXT10fDMxJm4sbj0wfHlnKDB8YywwfHIsMyksbygpLEJbQSsyND4+MF09bixyPTB8eWcoMHxjLDB8ciwxMSksbygpLEJbQSsyNT4+MF09cixjPTB8eWcoMjA5NzE1MSZjfDAsMCwxOSkscj0wfG8oKSxuPTB8cmcoMjA5NzE1MSZlfDAsMCwyKSxvKCksQltBKzI2Pj4wXT1ufGMsYT0wfHlnKDB8ZSwwfGEsNiksbygpLEJbQSsyNz4+MF09YSxlPTB8eWcoMjA5NzE1MSZlfDAsMCwxNCksYT0wfG8oKSxjPTB8cmcoMHxpLDB8RSw3KSxvKCksQltBKzI4Pj4wXT1jfGUsZT0wfHlnKDB8aSwwfEUsMSksbygpLEJbQSsyOT4+MF09ZSxlPTB8eWcoMHxpLDB8RSw5KSxvKCksQltBKzMwPj4wXT1lLEU9MHxpZygwfGksMHxFLDE3KSxvKCksQltBKzMxPj4wXT1FfWZ1bmN0aW9uIHUoQSxJLGcpe0F8PTAsZ3w9MDt2YXIgQixRLEUsaSxlLGMsYSxuLHIsdCxmLHcseSxzLGgsRCxGLHAsdSxILGssbCxfLEcsZCxZLE0sUyxVLHYsYixKLFAsUixOLG0sTCx4LEssWCxqLFQscSxWLHosVyxPLFosJCxBQSxJQSxnQSxCQSxDQSxRQSxFQSxpQSxlQSxvQSxjQSxhQSxuQSxyQSx0QSxmQSx3QSx5QSxzQSxoQSxEQSxGQSxwQSx1QSxIQSxrQSxsQSxfQSxHQSxkQSxZQSxNQSxTQSxVQSx2QSxiQSxKQSxQQSxSQSxOQSxtQT0wLExBPTAseEE9MCxLQT0wLFhBPTAsakE9MCxUQT0wLHFBPTAsVkE9MCx6QT0wLFdBPTAsT0E9MCxaQT0wLCRBPTAsQUk9MCxJST0wLGdJPTAsQkk9MCxDST0wLFFJPTAsRUk9MCxpST0wLGVJPTAsb0k9MCxjST0wLGFJPTAsbkk9MCxyST0wLHRJPTAsZkk9MCx3ST0wLHlJPTAsc0k9MCxoST0wLERJPTAsRkk9MCxwST0wLHVJPTAsSEk9MCxrST0wLGxJPTAsX0k9MCxHST0wLGRJPTAsWUk9MCxNST0wLFNJPTAsVUk9MCx2ST0wLGJJPTAsSkk9MCxQST0wLFJJPTAsTkk9MCxtST0wLExJPTAseEk9MCxLST0wLFhJPTAsakk9MCxUST0wLHFJPTAsVkk9MCx6ST0wLFdJPTAsT0k9MCxaST0wLCRJPTAsQWc9MCxJZz0wLGdnPTAsQmc9MCxDZz0wLEVnPTAsZWc9MCxvZz0wLGNnPTAsYWc9MCxuZz0wLHJnPTAsdGc9MCxmZz0wLHdnPTAsc2c9MCxoZz0wLERnPTAsRmc9MCxwZz0wLHVnPTAsSGc9MCxrZz0wLGxnPTAsX2c9MCxHZz0wLGRnPTAsWWc9MCxNZz0wLFNnPTAsYmc9MCxKZz0wLFBnPTAsUmc9MCxOZz0wLG1nPTAsTGc9MCx4Zz0wLEtnPTAsWGc9MCxqZz0wLFRnPTA7QUk9MHxDWyhJfD0wKT4+Ml0scUE9MHxDW0krND4+Ml0sakE9MHxDW0krOD4+Ml0sWkE9MHxDW0krMTI+PjJdLFNJPTB8Q1tJKzE2Pj4yXSxPQT0wfENbSSsyMD4+Ml0sZWc9MHxDW0krMjQ+PjJdLG1BPTB8Q1tJKzI4Pj4yXSxwST0wfENbSSszMj4+Ml0sbkk9MHxDW0krMzY+PjJdLG9JPTB8Q1tnPj4yXSxUZz0wfENbZys0Pj4yXSxsZz0wfENbZys4Pj4yXSxCZz0wfENbZysxMj4+Ml0sUkk9MHxDW2crMTY+PjJdLFlnPTB8Q1tnKzIwPj4yXSxhZz0wfENbZysyND4+Ml0sS0k9MHxDW2crMjg+PjJdLHVJPTB8Q1tnKzMyPj4yXSxOQT0wfENbZyszNj4+Ml0sUEE9MHxRZygwfG9JLCgoMHxvSSk8MCk8PDMxPj4zMXwwLDB8QUksKCgwfEFJKTwwKTw8MzE+PjMxfDApLGpnPTB8bygpLGRBPTB8UWcoMHxUZywoKDB8VGcpPDApPDwzMT4+MzF8MCwwfEFJLCgoMHxBSSk8MCk8PDMxPj4zMXwwKSxHQT0wfG8oKSxnQT0wfFFnKDB8bGcsKCgwfGxnKTwwKTw8MzE+PjMxfDAsMHxBSSwoKDB8QUkpPDApPDwzMT4+MzF8MCksQ2c9MHxvKCksUD0wfFFnKDB8QmcsKCgwfEJnKTwwKTw8MzE+PjMxfDAsMHxBSSwoKDB8QUkpPDApPDwzMT4+MzF8MCksTkk9MHxvKCkscEE9MHxRZygwfFJJLCgoMHxSSSk8MCk8PDMxPj4zMXwwLDB8QUksKCgwfEFJKTwwKTw8MzE+PjMxfDApLFNnPTB8bygpLGVBPTB8UWcoMHxZZywoKDB8WWcpPDApPDwzMT4+MzF8MCwwfEFJLCgoMHxBSSk8MCk8PDMxPj4zMXwwKSxyZz0wfG8oKSxLPTB8UWcoMHxhZywoKDB8YWcpPDApPDwzMT4+MzF8MCwwfEFJLCgoMHxBSSk8MCk8PDMxPj4zMXwwKSxqST0wfG8oKSxIPTB8UWcoMHxLSSwoKDB8S0kpPDApPDwzMT4+MzF8MCwwfEFJLCgoMHxBSSk8MCk8PDMxPj4zMXwwKSxrST0wfG8oKSx0PTB8UWcoMHx1SSwoKDB8dUkpPDApPDwzMT4+MzF8MCwwfEFJLCgoMHxBSSk8MCk8PDMxPj4zMXwwKSxyST0wfG8oKSxBST0wfFFnKDB8TkEsKCgwfE5BKTwwKTw8MzE+PjMxfDAsMHxBSSwoKDB8QUkpPDApPDwzMT4+MzF8MCksJEE9MHxvKCksX2c9MHxRZygwfG9JLCgoMHxvSSk8MCk8PDMxPj4zMXwwLDB8cUEsKCgwfHFBKTwwKTw8MzE+PjMxfDApLEdnPTB8bygpLFFBPTB8UWcoMHxUZywoKDB8VGcpPDApPDwzMT4+MzF8MCxxQTw8MXwwLCgocUE8PDF8MCk8MCk8PDMxPj4zMXwwKSxDQT0wfG8oKSxSPTB8UWcoMHxsZywoKDB8bGcpPDApPDwzMT4+MzF8MCwwfHFBLCgoMHxxQSk8MCk8PDMxPj4zMXwwKSxtST0wfG8oKSx1QT0wfFFnKDB8QmcsKCgwfEJnKTwwKTw8MzE+PjMxfDAscUE8PDF8MCwoKHFBPDwxfDApPDApPDwzMT4+MzF8MCksYmc9MHxvKCksb0E9MHxRZygwfFJJLCgoMHxSSSk8MCk8PDMxPj4zMXwwLDB8cUEsKCgwfHFBKTwwKTw8MzE+PjMxfDApLHRnPTB8bygpLFg9MHxRZygwfFlnLCgoMHxZZyk8MCk8PDMxPj4zMXwwLHFBPDwxfDAsKChxQTw8MXwwKTwwKTw8MzE+PjMxfDApLFRJPTB8bygpLGs9MHxRZygwfGFnLCgoMHxhZyk8MCk8PDMxPj4zMXwwLDB8cUEsKCgwfHFBKTwwKTw8MzE+PjMxfDApLGxJPTB8bygpLGY9MHxRZygwfEtJLCgoMHxLSSk8MCk8PDMxPj4zMXwwLHFBPDwxfDAsKChxQTw8MXwwKTwwKTw8MzE+PjMxfDApLHRJPTB8bygpLEI9MHxRZygwfHVJLCgoMHx1SSk8MCk8PDMxPj4zMXwwLDB8cUEsKCgwfHFBKTwwKTw8MzE+PjMxfDApLElJPTB8bygpLHFBPTB8UWcoMTkqTkF8MCwwfChhST0oKDE5Kk5BfDApPDApPDwzMT4+MzEpLHFBPDwxfDAsKChxQTw8MXwwKTwwKTw8MzE+PjMxfDApLEk9MHxvKCksQkE9MHxRZygwfG9JLCgoMHxvSSk8MCk8PDMxPj4zMXwwLDB8akEsKCgwfGpBKTwwKTw8MzE+PjMxfDApLEVnPTB8bygpLEw9MHxRZygwfFRnLCgoMHxUZyk8MCk8PDMxPj4zMXwwLDB8akEsKCgwfGpBKTwwKTw8MzE+PjMxfDApLG09MHxvKCksSEE9MHxRZygwfGxnLCgoMHxsZyk8MCk8PDMxPj4zMXwwLDB8akEsKCgwfGpBKTwwKTw8MzE+PjMxfDApLEpnPTB8bygpLGNBPTB8UWcoMHxCZywoKDB8QmcpPDApPDwzMT4+MzF8MCwwfGpBLCgoMHxqQSk8MCk8PDMxPj4zMXwwKSxmZz0wfG8oKSxqPTB8UWcoMHxSSSwoKDB8UkkpPDApPDwzMT4+MzF8MCwwfGpBLCgoMHxqQSk8MCk8PDMxPj4zMXwwKSxxST0wfG8oKSxsPTB8UWcoMHxZZywoKDB8WWcpPDApPDwzMT4+MzF8MCwwfGpBLCgoMHxqQSk8MCk8PDMxPj4zMXwwKSxfST0wfG8oKSx3PTB8UWcoMHxhZywoKDB8YWcpPDApPDwzMT4+MzF8MCwwfGpBLCgoMHxqQSk8MCk8PDMxPj4zMXwwKSxmST0wfG8oKSxRPTB8UWcoMHxLSSwoKDB8S0kpPDApPDwzMT4+MzF8MCwwfGpBLCgoMHxqQSk8MCk8PDMxPj4zMXwwKSxnST0wfG8oKSxZQT0wfFFnKDE5KnVJfDAsMHwoSEk9KCgxOSp1SXwwKTwwKTw8MzE+PjMxKSwwfGpBLCgoMHxqQSk8MCk8PDMxPj4zMXwwKSxSZz0wfG8oKSxqQT0wfFFnKDE5Kk5BfDAsMHxhSSwwfGpBLCgoMHxqQSk8MCk8PDMxPj4zMXwwKSxUQT0wfG8oKSxOPTB8UWcoMHxvSSwoKDB8b0kpPDApPDwzMT4+MzF8MCwwfFpBLCgoMHxaQSk8MCk8PDMxPj4zMXwwKSxMST0wfG8oKSxfQT0wfFFnKDB8VGcsKCgwfFRnKTwwKTw8MzE+PjMxfDAsWkE8PDF8MCwoKFpBPDwxfDApPDApPDwzMT4+MzF8MCksbEE9MHxvKCksYUE9MHxRZygwfGxnLCgoMHxsZyk8MCk8PDMxPj4zMXwwLDB8WkEsKCgwfFpBKTwwKTw8MzE+PjMxfDApLHdnPTB8bygpLFQ9MHxRZygwfEJnLCgoMHxCZyk8MCk8PDMxPj4zMXwwLFpBPDwxfDAsKChaQTw8MXwwKTwwKTw8MzE+PjMxfDApLFZJPTB8bygpLF89MHxRZygwfFJJLCgoMHxSSSk8MCk8PDMxPj4zMXwwLDB8WkEsKCgwfFpBKTwwKTw8MzE+PjMxfDApLEdJPTB8bygpLHk9MHxRZygwfFlnLCgoMHxZZyk8MCk8PDMxPj4zMXwwLFpBPDwxfDAsKChaQTw8MXwwKTwwKTw8MzE+PjMxfDApLHdJPTB8bygpLEU9MHxRZygwfGFnLCgoMHxhZyk8MCk8PDMxPj4zMXwwLDB8WkEsKCgwfFpBKTwwKTw8MzE+PjMxfDApLEJJPTB8bygpLE1BPTB8UWcoMTkqS0l8MCwwfChYST0oKDE5KktJfDApPDApPDwzMT4+MzEpLFpBPDwxfDAsKChaQTw8MXwwKTwwKTw8MzE+PjMxfDApLE5nPTB8bygpLGZBPTB8UWcoMTkqdUl8MCwwfEhJLDB8WkEsKCgwfFpBKTwwKTw8MzE+PjMxfDApLGhnPTB8bygpLFpBPTB8UWcoMTkqTkF8MCwwfGFJLFpBPDwxfDAsKChaQTw8MXwwKTwwKTw8MzE+PjMxfDApLFhBPTB8bygpLGtBPTB8UWcoMHxvSSwoKDB8b0kpPDApPDwzMT4+MzF8MCwwfFNJLCgoMHxTSSk8MCk8PDMxPj4zMXwwKSxQZz0wfG8oKSx0QT0wfFFnKDB8VGcsKCgwfFRnKTwwKTw8MzE+PjMxfDAsMHxTSSwoKDB8U0kpPDApPDwzMT4+MzF8MCksckE9MHxvKCkscT0wfFFnKDB8bGcsKCgwfGxnKTwwKTw8MzE+PjMxfDAsMHxTSSwoKDB8U0kpPDApPDwzMT4+MzF8MCksekk9MHxvKCksRz0wfFFnKDB8QmcsKCgwfEJnKTwwKTw8MzE+PjMxfDAsMHxTSSwoKDB8U0kpPDApPDwzMT4+MzF8MCksZEk9MHxvKCkscz0wfFFnKDB8UkksKCgwfFJJKTwwKTw8MzE+PjMxfDAsMHxTSSwoKDB8U0kpPDApPDwzMT4+MzF8MCkseUk9MHxvKCksaT0wfFFnKDB8WWcsKCgwfFlnKTwwKTw8MzE+PjMxfDAsMHxTSSwoKDB8U0kpPDApPDwzMT4+MzF8MCksQ0k9MHxvKCksU0E9MHxRZygxOSphZ3wwLDB8KG5nPSgoMTkqYWd8MCk8MCk8PDMxPj4zMSksMHxTSSwoKDB8U0kpPDApPDwzMT4+MzF8MCksbWc9MHxvKCksd0E9MHxRZygxOSpLSXwwLDB8WEksMHxTSSwoKDB8U0kpPDApPDwzMT4+MzF8MCksRGc9MHxvKCksTz0wfFFnKDE5KnVJfDAsMHxISSwwfFNJLCgoMHxTSSk8MCk8PDMxPj4zMXwwKSxPST0wfG8oKSxTST0wfFFnKDE5Kk5BfDAsMHxhSSwwfFNJLCgoMHxTSSk8MCk8PDMxPj4zMXwwKSx4QT0wfG8oKSxuQT0wfFFnKDB8b0ksKCgwfG9JKTwwKTw8MzE+PjMxfDAsMHxPQSwoKDB8T0EpPDApPDwzMT4+MzF8MCksc2c9MHxvKCksVz0wfFFnKDB8VGcsKCgwfFRnKTwwKTw8MzE+PjMxfDAsT0E8PDF8MCwoKE9BPDwxfDApPDApPDwzMT4+MzF8MCksej0wfG8oKSxkPTB8UWcoMHxsZywoKDB8bGcpPDApPDwzMT4+MzF8MCwwfE9BLCgoMHxPQSk8MCk8PDMxPj4zMXwwKSxZST0wfG8oKSxoPTB8UWcoMHxCZywoKDB8QmcpPDApPDwzMT4+MzF8MCxPQTw8MXwwLCgoT0E8PDF8MCk8MCk8PDMxPj4zMXwwKSxzST0wfG8oKSxlPTB8UWcoMHxSSSwoKDB8UkkpPDApPDwzMT4+MzF8MCwwfE9BLCgoMHxPQSk8MCk8PDMxPj4zMXwwKSxRST0wfG8oKSxVQT0wfFFnKDE5KllnfDAsMHwoTWc9KCgxOSpZZ3wwKTwwKTw8MzE+PjMxKSxPQTw8MXwwLCgoT0E8PDF8MCk8MCk8PDMxPj4zMXwwKSxMZz0wfG8oKSx5QT0wfFFnKDE5KmFnfDAsMHxuZywwfE9BLCgoMHxPQSk8MCk8PDMxPj4zMXwwKSxGZz0wfG8oKSxaPTB8UWcoMTkqS0l8MCwwfFhJLE9BPDwxfDAsKChPQTw8MXwwKTwwKTw8MzE+PjMxfDApLFpJPTB8bygpLFU9MHxRZygxOSp1SXwwLDB8SEksMHxPQSwoKDB8T0EpPDApPDwzMT4+MzF8MCksVUk9MHxvKCksT0E9MHxRZygxOSpOQXwwLDB8YUksT0E8PDF8MCwoKE9BPDwxfDApPDApPDwzMT4+MzF8MCksTEE9MHxvKCksVj0wfFFnKDB8b0ksKCgwfG9JKTwwKTw8MzE+PjMxfDAsMHxlZywoKDB8ZWcpPDApPDwzMT4+MzF8MCksV0k9MHxvKCksUz0wfFFnKDB8VGcsKCgwfFRnKTwwKTw8MzE+PjMxfDAsMHxlZywoKDB8ZWcpPDApPDwzMT4+MzF8MCksTT0wfG8oKSxEPTB8UWcoMHxsZywoKDB8bGcpPDApPDwzMT4+MzF8MCwwfGVnLCgoMHxlZyk8MCk8PDMxPj4zMXwwKSxoST0wfG8oKSxjPTB8UWcoMHxCZywoKDB8QmcpPDApPDwzMT4+MzF8MCwwfGVnLCgoMHxlZyk8MCk8PDMxPj4zMXwwKSxFST0wfG8oKSx2QT0wfFFnKDE5KlJJfDAsKCgxOSpSSXwwKTwwKTw8MzE+PjMxfDAsMHxlZywoKDB8ZWcpPDApPDwzMT4+MzF8MCkseGc9MHxvKCksc0E9MHxRZygxOSpZZ3wwLDB8TWcsMHxlZywoKDB8ZWcpPDApPDwzMT4+MzF8MCkscGc9MHxvKCksJD0wfFFnKDE5KmFnfDAsMHxuZywwfGVnLCgoMHxlZyk8MCk8PDMxPj4zMXwwKSwkST0wfG8oKSx2PTB8UWcoMTkqS0l8MCwwfFhJLDB8ZWcsKCgwfGVnKTwwKTw8MzE+PjMxfDApLHZJPTB8bygpLFZBPTB8UWcoMTkqdUl8MCwwfEhJLDB8ZWcsKCgwfGVnKTwwKTw8MzE+PjMxfDApLHpBPTB8bygpLGVnPTB8UWcoMTkqTkF8MCwwfGFJLDB8ZWcsKCgwfGVnKTwwKTw8MzE+PjMxfDApLEtBPTB8bygpLFk9MHxRZygwfG9JLCgoMHxvSSk8MCk8PDMxPj4zMXwwLDB8bUEsKCgwfG1BKTwwKTw8MzE+PjMxfDApLE1JPTB8bygpLHU9MHxRZygwfFRnLCgoMHxUZyk8MCk8PDMxPj4zMXwwLG1BPDwxfDAsKChtQTw8MXwwKTwwKTw8MzE+PjMxfDApLHA9MHxvKCksYT0wfFFnKDB8bGcsKCgwfGxnKTwwKTw8MzE+PjMxfDAsMHxtQSwoKDB8bUEpPDApPDwzMT4+MzF8MCksaUk9MHxvKCksYkE9MHxRZygxOSpCZ3wwLCgoMTkqQmd8MCk8MCk8PDMxPj4zMXwwLG1BPDwxfDAsKChtQTw8MXwwKTwwKTw8MzE+PjMxfDApLEtnPTB8bygpLGhBPTB8UWcoMTkqUkl8MCwoKDE5KlJJfDApPDApPDwzMT4+MzF8MCwwfG1BLCgoMHxtQSk8MCk8PDMxPj4zMXwwKSx1Zz0wfG8oKSxBQT0wfFFnKDE5KllnfDAsMHxNZyxtQTw8MXwwLCgobUE8PDF8MCk8MCk8PDMxPj4zMXwwKSxBZz0wfG8oKSxiPTB8UWcoMTkqYWd8MCwwfG5nLDB8bUEsKCgwfG1BKTwwKTw8MzE+PjMxfDApLGJJPTB8bygpLGNJPTB8UWcoMTkqS0l8MCwwfFhJLG1BPDwxfDAsKChtQTw8MXwwKTwwKTw8MzE+PjMxfDApLFdBPTB8bygpLEVBPTB8UWcoMTkqdUl8MCwwfEhJLDB8bUEsKCgwfG1BKTwwKTw8MzE+PjMxfDApLG9nPTB8bygpLGc9MHxRZygxOSpOQXwwLDB8YUksbUE8PDF8MCwoKG1BPDwxfDApPDApPDwzMT4+MzF8MCksbUE9MHxvKCksRj0wfFFnKDB8b0ksKCgwfG9JKTwwKTw8MzE+PjMxfDAsMHxwSSwoKDB8cEkpPDApPDwzMT4+MzF8MCksREk9MHxvKCkscj0wfFFnKDB8VGcsKCgwfFRnKTwwKTw8MzE+PjMxfDAsMHxwSSwoKDB8cEkpPDApPDwzMT4+MzF8MCksbj0wfG8oKSxKQT0wfFFnKDE5KmxnfDAsKCgxOSpsZ3wwKTwwKTw8MzE+PjMxfDAsMHxwSSwoKDB8cEkpPDApPDwzMT4+MzF8MCksWGc9MHxvKCksREE9MHxRZygxOSpCZ3wwLCgoMTkqQmd8MCk8MCk8PDMxPj4zMXwwLDB8cEksKCgwfHBJKTwwKTw8MzE+PjMxfDApLEhnPTB8bygpLElBPTB8UWcoMTkqUkl8MCwoKDE5KlJJfDApPDApPDwzMT4+MzF8MCwwfHBJLCgoMHxwSSk8MCk8PDMxPj4zMXwwKSxJZz0wfG8oKSxKPTB8UWcoMTkqWWd8MCwwfE1nLDB8cEksKCgwfHBJKTwwKTw8MzE+PjMxfDApLEpJPTB8bygpLEZBPTB8UWcoMTkqYWd8MCwwfG5nLDB8cEksKCgwfHBJKTwwKTw8MzE+PjMxfDApLGRnPTB8bygpLGlBPTB8UWcoMTkqS0l8MCwwfFhJLDB8cEksKCgwfHBJKTwwKTw8MzE+PjMxfDApLGNnPTB8bygpLHg9MHxRZygxOSp1SXwwLDB8SEksMHxwSSwoKDB8cEkpPDApPDwzMT4+MzF8MCkseEk9MHxvKCkscEk9MHxRZygxOSpOQXwwLDB8YUksMHxwSSwoKDB8cEkpPDApPDwzMT4+MzF8MCksRkk9MHxvKCksb0k9MHxRZygwfG9JLCgoMHxvSSk8MCk8PDMxPj4zMXwwLDB8bkksKCgwfG5JKTwwKTw8MzE+PjMxfDApLGVJPTB8bygpLFRnPTB8UWcoMTkqVGd8MCwoKDE5KlRnfDApPDApPDwzMT4+MzF8MCxuSTw8MXwwLCgobkk8PDF8MCk8MCk8PDMxPj4zMXwwKSxSQT0wfG8oKSxsZz0wfFFnKDE5KmxnfDAsKCgxOSpsZ3wwKTwwKTw8MzE+PjMxfDAsMHxuSSwoKDB8bkkpPDApPDwzMT4+MzF8MCksa2c9MHxvKCksQmc9MHxRZygxOSpCZ3wwLCgoMTkqQmd8MCk8MCk8PDMxPj4zMXwwLG5JPDwxfDAsKChuSTw8MXwwKTwwKTw8MzE+PjMxfDApLGdnPTB8bygpLFJJPTB8UWcoMTkqUkl8MCwoKDE5KlJJfDApPDApPDwzMT4+MzF8MCwwfG5JLCgoMHxuSSk8MCk8PDMxPj4zMXwwKSxQST0wfG8oKSxNZz0wfFFnKDE5KllnfDAsMHxNZyxuSTw8MXwwLCgobkk8PDF8MCk8MCk8PDMxPj4zMXwwKSxZZz0wfG8oKSxuZz0wfFFnKDE5KmFnfDAsMHxuZywwfG5JLCgoMHxuSSk8MCk8PDMxPj4zMXwwKSxhZz0wfG8oKSxYST0wfFFnKDE5KktJfDAsMHxYSSxuSTw8MXwwLCgobkk8PDF8MCk8MCk8PDMxPj4zMXwwKSxLST0wfG8oKSxIST0wfFFnKDE5KnVJfDAsMHxISSwwfG5JLCgoMHxuSSk8MCk8PDMxPj4zMXwwKSx1ST0wfG8oKSxuST0wfFFnKDE5Kk5BfDAsMHxhSSxuSTw8MXwwLCgobkk8PDF8MCk8MCk8PDMxPj4zMXwwKSxhST0wfG8oKSxJPTB8dmcoMHwoUmc9MHx2ZygwfChOZz0wfHZnKDB8KG1nPTB8dmcoMHwoTGc9MHx2ZygwfCh4Zz0wfHZnKDB8KEtnPTB8dmcoMHwoWGc9MHx2ZygwfChqZz0wfHZnKDB8VGcsMHxSQSwwfFBBLDB8amcpKSwwfG8oKSwwfEpBLDB8WGcpKSwwfG8oKSwwfGJBLDB8S2cpKSwwfG8oKSwwfHZBLDB8eGcpKSwwfG8oKSwwfFVBLDB8TGcpKSwwfG8oKSwwfFNBLDB8bWcpKSwwfG8oKSwwfE1BLDB8TmcpKSwwfG8oKSwwfFlBLDB8UmcpKSwwfG8oKSwwfHFBLDB8SSkscUE9MHxvKCksR2c9MHx2ZygwfGRBLDB8R0EsMHxfZywwfEdnKSxfZz0wfG8oKSxMQT0wfHZnKDB8KHpBPTB8dmcoMHwoV0E9MHx2ZygwfChkZz0wfHZnKDB8KFlnPTB8dmcoMHwoU2c9MHx2ZygwfChiZz0wfHZnKDB8KEpnPTB8dmcoMHwoUGc9MHx2ZygwfF9BLDB8bEEsMHxrQSwwfFBnKSksMHxvKCksMHxIQSwwfEpnKSksMHxvKCksMHx1QSwwfGJnKSksMHxvKCksMHxwQSwwfFNnKSksMHxvKCksMHxNZywwfFlnKSksMHxvKCksMHxGQSwwfGRnKSksMHxvKCksMHxjSSwwfFdBKSksMHxvKCksMHxWQSwwfHpBKSksMHxvKCksMHxPQSwwfExBKSxPQT0wfG8oKSxXQT0wfGlnKDB8KHpBPTB8dmcoMHxJLDB8cUEsMzM1NTQ0MzIsMCkpLDB8KFZBPTB8bygpKSwyNiksY0k9MHxvKCksY0k9MHx2ZygwfChUQT0wfHZnKDB8KGhnPTB8dmcoMHwoRGc9MHx2ZygwfChGZz0wfHZnKDB8KHBnPTB8dmcoMHwodWc9MHx2ZygwfChIZz0wfHZnKDB8KGtnPTB8dmcoMHxHZywwfF9nLDB8bGcsMHxrZykpLDB8bygpLDB8REEsMHxIZykpLDB8bygpLDB8aEEsMHx1ZykpLDB8bygpLDB8c0EsMHxwZykpLDB8bygpLDB8eUEsMHxGZykpLDB8bygpLDB8d0EsMHxEZykpLDB8bygpLDB8ZkEsMHxoZykpLDB8bygpLDB8akEsMHxUQSkpLDB8bygpLDB8V0EsMHxjSSksV0E9MHxvKCksVkE9MHxVZygwfEksMHxxQSwtNjcxMDg4NjQmekF8MCwwfFZBKSx6QT0wfG8oKSxUQT0wfGlnKDB8KHFBPTB8dmcoMHxMQSwwfE9BLDMzNTU0NDMyLDApKSwwfChJPTB8bygpKSwyNiksakE9MHxvKCksakE9MHx2ZygwfChLQT0wfHZnKDB8KG9nPTB8dmcoMHwoY2c9MHx2ZygwfChhZz0wfHZnKDB8KHJnPTB8dmcoMHwodGc9MHx2ZygwfChmZz0wfHZnKDB8KHdnPTB8dmcoMHwoc2c9MHx2ZygwfHRBLDB8ckEsMHxuQSwwfHNnKSksMHxvKCksMHxhQSwwfHdnKSksMHxvKCksMHxjQSwwfGZnKSksMHxvKCksMHxvQSwwfHRnKSksMHxvKCksMHxlQSwwfHJnKSksMHxvKCksMHxuZywwfGFnKSksMHxvKCksMHxpQSwwfGNnKSksMHxvKCksMHxFQSwwfG9nKSksMHxvKCksMHxlZywwfEtBKSksMHxvKCksMHxUQSwwfGpBKSxUQT0wfG8oKSxJPTB8VWcoMHxMQSwwfE9BLC02NzEwODg2NCZxQXwwLDB8SSkscUE9MHxvKCksTEE9MHxpZygwfChPQT0wfHZnKDB8Y0ksMHxXQSwxNjc3NzIxNiwwKSksMHxvKCksMjUpLEtBPTB8bygpLEtBPTB8dmcoMHwoWEE9MHx2ZygwfChPST0wfHZnKDB8KFpJPTB8dmcoMHwoJEk9MHx2ZygwfChBZz0wfHZnKDB8KElnPTB8dmcoMHwoZ2c9MHx2ZygwfChDZz0wfHZnKDB8KEVnPTB8dmcoMHxRQSwwfENBLDB8QkEsMHxFZykpLDB8bygpLDB8Z0EsMHxDZykpLDB8bygpLDB8QmcsMHxnZykpLDB8bygpLDB8SUEsMHxJZykpLDB8bygpLDB8QUEsMHxBZykpLDB8bygpLDB8JCwwfCRJKSksMHxvKCksMHxaLDB8WkkpKSwwfG8oKSwwfE8sMHxPSSkpLDB8bygpLDB8WkEsMHxYQSkpLDB8bygpLDB8TEEsMHxLQSksTEE9MHxvKCksT0E9MHxVZygwfGNJLDB8V0EsLTMzNTU0NDMyJk9BfDAsMCksV0E9MHxvKCksWEE9MHxpZygwfChjST0wfHZnKDB8akEsMHxUQSwxNjc3NzIxNiwwKSksMHxvKCksMjUpLFpBPTB8bygpLFpBPTB8dmcoMHwobUE9MHx2ZygwfCh4ST0wfHZnKDB8KEtJPTB8dmcoMHwoakk9MHx2ZygwfChUST0wfHZnKDB8KHFJPTB8dmcoMHwoVkk9MHx2ZygwfCh6ST0wfHZnKDB8KFdJPTB8dmcoMHxXLDB8eiwwfFYsMHxXSSkpLDB8bygpLDB8cSwwfHpJKSksMHxvKCksMHxULDB8VkkpKSwwfG8oKSwwfGosMHxxSSkpLDB8bygpLDB8WCwwfFRJKSksMHxvKCksMHxLLDB8akkpKSwwfG8oKSwwfFhJLDB8S0kpKSwwfG8oKSwwfHgsMHx4SSkpLDB8bygpLDB8ZywwfG1BKSksMHxvKCksMHxYQSwwfFpBKSxYQT0wfG8oKSxjST0wfFVnKDB8akEsMHxUQSwtMzM1NTQ0MzImY0l8MCwwKSxUQT0wfG8oKSxtQT0wfGlnKDB8KGpBPTB8dmcoMHxLQSwwfExBLDMzNTU0NDMyLDApKSwwfG8oKSwyNiksZz0wfG8oKSxnPTB8dmcoMHwoeEE9MHx2ZygwfChVST0wfHZnKDB8KHZJPTB8dmcoMHwoYkk9MHx2ZygwfChKST0wfHZnKDB8KFBJPTB8dmcoMHwoTkk9MHx2ZygwfChtST0wfHZnKDB8KExJPTB8dmcoMHxMLDB8bSwwfE4sMHxMSSkpLDB8bygpLDB8UiwwfG1JKSksMHxvKCksMHxQLDB8TkkpKSwwfG8oKSwwfFJJLDB8UEkpKSwwfG8oKSwwfEosMHxKSSkpLDB8bygpLDB8YiwwfGJJKSksMHxvKCksMHx2LDB8dkkpKSwwfG8oKSwwfFUsMHxVSSkpLDB8bygpLDB8U0ksMHx4QSkpLDB8bygpLDB8bUEsMHxnKSxtQT0wfG8oKSxqQT0wfFVnKDB8S0EsMHxMQSwtNjcxMDg4NjQmakF8MCwwKSxvKCksS0E9MHxpZygwfChMQT0wfHZnKDB8WkEsMHxYQSwzMzU1NDQzMiwwKSksMHxvKCksMjYpLHhBPTB8bygpLHhBPTB8dmcoMHwoRkk9MHx2ZygwfCh1ST0wfHZnKDB8KGtJPTB8dmcoMHwobEk9MHx2ZygwfChfST0wfHZnKDB8KEdJPTB8dmcoMHwoZEk9MHx2ZygwfChZST0wfHZnKDB8KE1JPTB8dmcoMHxTLDB8TSwwfFksMHxNSSkpLDB8bygpLDB8ZCwwfFlJKSksMHxvKCksMHxHLDB8ZEkpKSwwfG8oKSwwfF8sMHxHSSkpLDB8bygpLDB8bCwwfF9JKSksMHxvKCksMHxrLDB8bEkpKSwwfG8oKSwwfEgsMHxrSSkpLDB8bygpLDB8SEksMHx1SSkpLDB8bygpLDB8cEksMHxGSSkpLDB8bygpLDB8S0EsMHx4QSksS0E9MHxvKCksTEE9MHxVZygwfFpBLDB8WEEsLTY3MTA4ODY0JkxBfDAsMCksbygpLHFBPTB8dmcoMHwoWkE9MHxpZygwfChYQT0wfHZnKDB8ZywwfG1BLDE2Nzc3MjE2LDApKSwwfG8oKSwyNSkpLDB8bygpLDB8SSwwfHFBKSxJPTB8bygpLFhBPTB8VWcoMHxnLDB8bUEsLTMzNTU0NDMyJlhBfDAsMCksbygpLGc9MHxpZygwfChtQT0wfHZnKDB8eEEsMHxLQSwxNjc3NzIxNiwwKSksMHxvKCksMjUpLFpBPTB8bygpLFpBPTB8dmcoMHwoYUk9MHx2ZygwfChyST0wfHZnKDB8KHRJPTB8dmcoMHwoZkk9MHx2ZygwfCh3ST0wfHZnKDB8KHlJPTB8dmcoMHwoc0k9MHx2ZygwfChoST0wfHZnKDB8KERJPTB8dmcoMHx1LDB8cCwwfEYsMHxESSkpLDB8bygpLDB8RCwwfGhJKSksMHxvKCksMHxoLDB8c0kpKSwwfG8oKSwwfHMsMHx5SSkpLDB8bygpLDB8eSwwfHdJKSksMHxvKCksMHx3LDB8ZkkpKSwwfG8oKSwwfGYsMHx0SSkpLDB8bygpLDB8dCwwfHJJKSksMHxvKCksMHxuSSwwfGFJKSksMHxvKCksMHxnLDB8WkEpLGc9MHxvKCksbUE9MHxVZygwfHhBLDB8S0EsLTMzNTU0NDMyJm1BfDAsMCksbygpLHhBPTB8dmcoMHxjSSwwfFRBLDB8KHhBPTB8eWcoMHwoS0E9MHx2ZygwfHFBLDB8SSwzMzU1NDQzMiwwKSksMHxvKCksMjYpKSwwfG8oKSksbygpLEtBPTB8VWcoMHxxQSwwfEksLTY3MTA4ODY0JktBfDAsMCksbygpLHFBPTB8aWcoMHwoST0wfHZnKDB8WkEsMHxnLDMzNTU0NDMyLDApKSwwfG8oKSwyNiksVEE9MHxvKCksVEE9MHx2ZygwfCgkQT0wfHZnKDB8KElJPTB8dmcoMHwoZ0k9MHx2ZygwfChCST0wfHZnKDB8KENJPTB8dmcoMHwoUUk9MHx2ZygwfChFST0wfHZnKDB8KGlJPTB8dmcoMHwoZUk9MHx2ZygwfHIsMHxuLDB8b0ksMHxlSSkpLDB8bygpLDB8YSwwfGlJKSksMHxvKCksMHxjLDB8RUkpKSwwfG8oKSwwfGUsMHxRSSkpLDB8bygpLDB8aSwwfENJKSksMHxvKCksMHxFLDB8QkkpKSwwfG8oKSwwfFEsMHxnSSkpLDB8bygpLDB8QiwwfElJKSksMHxvKCksMHxBSSwwfCRBKSksMHxvKCksMHxxQSwwfFRBKSxxQT0wfG8oKSxJPTB8VWcoMHxaQSwwfGcsLTY3MTA4ODY0Jkl8MCwwKSxvKCksekE9MHx2ZygwfChaQT0wfFFnKDB8KFpBPTB8aWcoMHwoZz0wfHZnKDB8VEEsMHxxQSwxNjc3NzIxNiwwKSksMHxvKCksMjUpKSwwfG8oKSwxOSwwKSksMHxvKCksMHxWQSwwfHpBKSxWQT0wfG8oKSxnPTB8VWcoMHxUQSwwfHFBLC0zMzU1NDQzMiZnfDAsMCksbygpLFRBPTB8dmcoMHxPQSwwfFdBLDB8KFRBPTB8eWcoMHwocUE9MHx2ZygwfHpBLDB8VkEsMzM1NTQ0MzIsMCkpLDB8bygpLDI2KSksMHxvKCkpLG8oKSxxQT0wfFVnKDB8ekEsMHxWQSwtNjcxMDg4NjQmcUF8MCwwKSxvKCksQ1tBPj4yXT1xQSxDW0ErND4+Ml09VEEsQ1tBKzg+PjJdPWpBLENbQSsxMj4+Ml09WEEsQ1tBKzE2Pj4yXT1LQSxDW0ErMjA+PjJdPXhBLENbQSsyND4+Ml09TEEsQ1tBKzI4Pj4yXT1tQSxDW0ErMzI+PjJdPUksQ1tBKzM2Pj4yXT1nfWZ1bmN0aW9uIEgoQSxJLGcpe0F8PTAsZ3w9MDt2YXIgQixRLEU9MCxpPTAsZT0wLGM9MCxhPTAsbj0wLHI9MCx0PTAsZj0wLHc9MCxzPTAsaD0wLEQ9MCxGPTAscD0wLHU9MCxIPTAsaz0wLGw9MCxfPTAsRz0wLGQ9MCxZPTAsTT0wLFM9MCxVPTAsdj0wLGI9MCxKPTAsUD0wLFI9MCxOPTA7Qj15LFE9eT15KzYzJi02NCx5PXkrMjA0OHwwLGZCKFErMTAyNHwwLEl8PTApLFNJKFErMTAyNHwwLEEpLGZCKFEsUSsxMDI0fDApLFNJKFEsZyksQT0wO2Rve2k9MHxDW1ErMTAyNCsoKDR8KEk9QTw8NCkpPDwzKT4+Ml0sZT0wfENbUSsxMDI0KygoNHxJKTw8MykrND4+Ml0sYj0wfHVJKDB8Q1tRKzEwMjQrKEk8PDMpPj4yXSwwfENbUSsxMDI0KyhJPDwzKSs0Pj4yXSxpLGUpLE49MHxvKCksWT0wfFpJKENbUSsxMDI0KygoMTJ8SSk8PDMpPj4yXV5iLENbUSsxMDI0KygoMTJ8SSk8PDMpKzQ+PjJdXk4sMzIpLEg9MHxvKCksSD0wfFpJKChOPTB8dUkoYixOLGU9MHxaSSgoRj0wfHVJKDB8Q1tRKzEwMjQrKCg4fEkpPDwzKT4+Ml0sMHxDW1ErMTAyNCsoKDh8SSk8PDMpKzQ+PjJdLFksSCkpXmksKEQ9MHxvKCkpXmUsMjQpLGk9MHxvKCkpKV5ZLChiPTB8bygpKV5ILDE2KSxZPTB8bygpLENbUSsxMDI0KygoMTJ8SSk8PDMpPj4yXT1ILENbUSsxMDI0KygoMTJ8SSk8PDMpKzQ+PjJdPVksRD0wfHVJKEYsRCxILFkpLEY9MHxvKCksQ1tRKzEwMjQrKCg4fEkpPDwzKT4+Ml09RCxDW1ErMTAyNCsoKDh8SSk8PDMpKzQ+PjJdPUYsaT0wfFpJKEReZSxGXmksNjMpLGU9MHxvKCksQ1tRKzEwMjQrKCg0fEkpPDwzKT4+Ml09aSxDW1ErMTAyNCsoKDR8SSk8PDMpKzQ+PjJdPWUsVT0wfENbUSsxMDI0KygoNXxJKTw8Myk+PjJdLHY9MHxDW1ErMTAyNCsoKDV8SSk8PDMpKzQ+PjJdLF89MHx1SSgwfENbUSsxMDI0KygoMXxJKTw8Myk+PjJdLDB8Q1tRKzEwMjQrKCgxfEkpPDwzKSs0Pj4yXSxVLHYpLE09MHxvKCkscD0wfFpJKENbUSsxMDI0KygoMTN8SSk8PDMpPj4yXV5fLENbUSsxMDI0KygoMTN8SSk8PDMpKzQ+PjJdXk0sMzIpLGY9MHxvKCksYT0wfHVJKG49MHx1SSgwfENbUSsxMDI0KygoOXxJKTw8Myk+PjJdLDB8Q1tRKzEwMjQrKCg5fEkpPDwzKSs0Pj4yXSxwLGYpLGE9MHxvKCksZj0wfFpJKChNPTB8dUkoXyxNLHY9MHxaSShuXlUsYV52LDI0KSxVPTB8bygpKSlecCwoXz0wfG8oKSleZiwxNikscD0wfG8oKSksbj0wfG8oKSxDW1ErMTAyNCsoKDl8SSk8PDMpPj4yXT1hLENbUSsxMDI0KygoOXxJKTw8MykrND4+Ml09bixVPTB8WkkoYV52LG5eVSw2Myksdj0wfG8oKSxrPTB8Q1tRKzEwMjQrKCg2fEkpPDwzKT4+Ml0sbD0wfENbUSsxMDI0KygoNnxJKTw8MykrND4+Ml0saD0wfHVJKDB8Q1tRKzEwMjQrKCgyfEkpPDwzKT4+Ml0sMHxDW1ErMTAyNCsoKDJ8SSk8PDMpKzQ+PjJdLGssbCksdT0wfG8oKSxyPTB8WkkoQ1tRKzEwMjQrKCgxNHxJKTw8Myk+PjJdXmgsQ1tRKzEwMjQrKCgxNHxJKTw8MykrND4+Ml1edSwzMiksRT0wfG8oKSxrPTB8WkkoKEo9MHx1SShQPTB8dUkoMHxDW1ErMTAyNCsoKDEwfEkpPDwzKT4+Ml0sMHxDW1ErMTAyNCsoKDEwfEkpPDwzKSs0Pj4yXSxyLEUpLEo9MHxvKCksRT0wfFpJKCh1PTB8dUkoaCx1LGw9MHxaSShQXmssSl5sLDI0KSxrPTB8bygpKSleciwoaD0wfG8oKSleRSwxNikscj0wfG8oKSkpXmwsKFA9MHxvKCkpXmssNjMpLGw9MHxvKCksdz0wfENbUSsxMDI0KygoN3xJKTw8Myk+PjJdLHM9MHxDW1ErMTAyNCsoKDd8SSk8PDMpKzQ+PjJdLGM9MHx1SSgwfENbUSsxMDI0KygoM3xJKTw8Myk+PjJdLDB8Q1tRKzEwMjQrKCgzfEkpPDwzKSs0Pj4yXSx3LHMpLHQ9MHxvKCksUj0wfFpJKENbUSsxMDI0KygoMTV8SSk8PDMpPj4yXV5jLENbUSsxMDI0KygoMTV8SSk8PDMpKzQ+PjJdXnQsMzIpLFM9MHxvKCksdz0wfFpJKChHPTB8dUkoZD0wfHVJKDB8Q1tRKzEwMjQrKCgxMXxJKTw8Myk+PjJdLDB8Q1tRKzEwMjQrKCgxMXxJKTw8MykrND4+Ml0sUixTKSxHPTB8bygpLFM9MHxaSSgodD0wfHVJKGMsdCxzPTB8WkkoZF53LEdecywyNCksdz0wfG8oKSkpXlIsKGM9MHxvKCkpXlMsMTYpLFI9MHxvKCkpKV5zLChkPTB8bygpKV53LDYzKSxzPTB8bygpLE49MHx1SShiPTB8dUkoTixiLFUsdiksTj0wfG8oKSx2PTB8WkkoKFA9MHx1SShKLFAsUj0wfFpJKGJeUyxOXlIsMzIpLFM9MHxvKCkpKV5VLChKPTB8bygpKV52LDI0KSxVPTB8bygpKSxiPTB8bygpLENbUSsxMDI0KyhJPDwzKT4+Ml09TixDW1ErMTAyNCsoSTw8MykrND4+Ml09YixTPTB8WkkoTl5SLGJeUywxNiksYj0wfG8oKSxDW1ErMTAyNCsoKDE1fEkpPDwzKT4+Ml09UyxDW1ErMTAyNCsoKDE1fEkpPDwzKSs0Pj4yXT1iLGI9MHx1SShQLEosUyxiKSxTPTB8bygpLENbUSsxMDI0KygoMTB8SSk8PDMpPj4yXT1iLENbUSsxMDI0KygoMTB8SSk8PDMpKzQ+PjJdPVMsVT0wfFpJKGJedixTXlUsNjMpLFM9MHxvKCksQ1tRKzEwMjQrKCg1fEkpPDwzKT4+Ml09VSxDW1ErMTAyNCsoKDV8SSk8PDMpKzQ+PjJdPVMsTT0wfHVJKF89MHx1SShNLF8sayxsKSxNPTB8bygpLGw9MHxaSSgoZD0wfHVJKEcsZCxZPTB8WkkoX15ILE1eWSwzMiksSD0wfG8oKSkpXmssKEc9MHxvKCkpXmwsMjQpLGs9MHxvKCkpLF89MHxvKCksQ1tRKzEwMjQrKCgxfEkpPDwzKT4+Ml09TSxDW1ErMTAyNCsoKDF8SSk8PDMpKzQ+PjJdPV8sSD0wfFpJKE1eWSxfXkgsMTYpLF89MHxvKCksQ1tRKzEwMjQrKCgxMnxJKTw8Myk+PjJdPUgsQ1tRKzEwMjQrKCgxMnxJKTw8MykrND4+Ml09XyxfPTB8dUkoZCxHLEgsXyksSD0wfG8oKSxDW1ErMTAyNCsoKDExfEkpPDwzKT4+Ml09XyxDW1ErMTAyNCsoKDExfEkpPDwzKSs0Pj4yXT1ILGs9MHxaSShfXmwsSF5rLDYzKSxIPTB8bygpLENbUSsxMDI0KygoNnxJKTw8Myk+PjJdPWssQ1tRKzEwMjQrKCg2fEkpPDwzKSs0Pj4yXT1ILHU9MHx1SShoPTB8dUkodSxoLHcscyksdT0wfG8oKSxzPTB8WkkoKEY9MHx1SShELEYscD0wfFpJKGheZix1XnAsMzIpLGY9MHxvKCkpKV53LChEPTB8bygpKV5zLDI0KSx3PTB8bygpKSxoPTB8bygpLENbUSsxMDI0KygoMnxJKTw8Myk+PjJdPXUsQ1tRKzEwMjQrKCgyfEkpPDwzKSs0Pj4yXT1oLGY9MHxaSSh1XnAsaF5mLDE2KSxoPTB8bygpLENbUSsxMDI0KygoMTN8SSk8PDMpPj4yXT1mLENbUSsxMDI0KygoMTN8SSk8PDMpKzQ+PjJdPWgsaD0wfHVJKEYsRCxmLGgpLGY9MHxvKCksQ1tRKzEwMjQrKCg4fEkpPDwzKT4+Ml09aCxDW1ErMTAyNCsoKDh8SSk8PDMpKzQ+PjJdPWYsdz0wfFpJKGhecyxmXncsNjMpLGY9MHxvKCksQ1tRKzEwMjQrKCg3fEkpPDwzKT4+Ml09dyxDW1ErMTAyNCsoKDd8SSk8PDMpKzQ+PjJdPWYsdD0wfHVJKGM9MHx1SSh0LGMsaSxlKSx0PTB8bygpLGU9MHxaSSgobj0wfHVJKGEsbixyPTB8WkkoY15FLHReciwzMiksRT0wfG8oKSkpXmksKGE9MHxvKCkpXmUsMjQpLGk9MHxvKCkpLGM9MHxvKCksQ1tRKzEwMjQrKCgzfEkpPDwzKT4+Ml09dCxDW1ErMTAyNCsoKDN8SSk8PDMpKzQ+PjJdPWMsRT0wfFpJKHRecixjXkUsMTYpLGM9MHxvKCksQ1tRKzEwMjQrKCgxNHxJKTw8Myk+PjJdPUUsQ1tRKzEwMjQrKCgxNHxJKTw8MykrND4+Ml09YyxjPTB8dUkobixhLEUsYyksRT0wfG8oKSxDW1ErMTAyNCsoKDl8SSk8PDMpPj4yXT1jLENbUSsxMDI0KygoOXxJKTw8MykrND4+Ml09RSxpPTB8WkkoY15lLEVeaSw2MyksRT0wfG8oKSxDW1ErMTAyNCsoKDR8SSk8PDMpPj4yXT1pLENbUSsxMDI0KygoNHxJKTw8MykrND4+Ml09RSxBPUErMXwwfXdoaWxlKDghPSgwfEEpKTtBPTA7ZG97UD0wfENbKEo9USsxMDI0KygzMisoTj1BPDwxKTw8Myl8MCk+PjJdLEo9MHxDW0orND4+Ml0sYz0wfHVJKDB8Q1tRKzEwMjQrKE48PDMpPj4yXSwwfENbUSsxMDI0KyhOPDwzKSs0Pj4yXSxQLEopLEk9MHxvKCksZj0wfFpJKENbKGY9USsxMDI0KyhOKzk2PDwzKXwwKT4+Ml1eYyxDW2YrND4+Ml1eSSwzMiksRj0wfG8oKSxGPTB8WkkoKEk9MHx1SShjLEksSj0wfFpJKChrPTB8dUkoMHxDWyhrPVErMTAyNCsoTis2NDw8Myl8MCk+PjJdLDB8Q1trKzQ+PjJdLGYsRikpXlAsKGw9MHxvKCkpXkosMjQpLFA9MHxvKCkpKV5mLChjPTB8bygpKV5GLDE2KSxmPTB8bygpLENbKHI9USsxMDI0KyhOKzk2PDwzKXwwKT4+Ml09RixDW3IrND4+Ml09ZixsPTB8dUkoayxsLEYsZiksaz0wfG8oKSxDWyhyPVErMTAyNCsoTis2NDw8Myl8MCk+PjJdPWwsQ1tyKzQ+PjJdPWssUD0wfFpJKGxeSixrXlAsNjMpLEo9MHxvKCksQ1socj1RKzEwMjQrKE4rMzI8PDMpfDApPj4yXT1QLENbcis0Pj4yXT1KLGE9MHxDWyhyPVErMTAyNCsoTiszMzw8Myl8MCk+PjJdLHI9MHxDW3IrND4+Ml0saD0wfHVJKDB8Q1tRKzEwMjQrKCgxfE4pPDwzKT4+Ml0sMHxDW1ErMTAyNCsoKDF8Tik8PDMpKzQ+PjJdLGEsciksdD0wfG8oKSxIPTB8WkkoQ1soSD1RKzEwMjQrKE4rOTc8PDMpfDApPj4yXV5oLENbSCs0Pj4yXV50LDMyKSxkPTB8bygpLHY9MHx1SShVPTB8dUkoMHxDWyhVPVErMTAyNCsoTis2NTw8Myl8MCk+PjJdLDB8Q1tVKzQ+PjJdLEgsZCksdj0wfG8oKSxkPTB8WkkoKHQ9MHx1SShoLHQscj0wfFpJKFVeYSx2XnIsMjQpLGE9MHxvKCkpKV5ILChoPTB8bygpKV5kLDE2KSxIPTB8bygpKSxVPTB8bygpLENbKF89USsxMDI0KyhOKzY1PDwzKXwwKT4+Ml09dixDW18rND4+Ml09VSxhPTB8Wkkodl5yLFVeYSw2Mykscj0wfG8oKSxfPVErMTAyNCsoTisxNjw8Myl8MCxEPTB8Q1socD1RKzEwMjQrKE4rNDg8PDMpfDApPj4yXSxwPTB8Q1twKzQ+PjJdLF89MHx1SSgwfENbXz4+Ml0sMHxDW18rND4+Ml0sRCxwKSx1PTB8bygpLFM9MHxaSShDWyhTPVErMTAyNCsoTisxMTI8PDMpfDApPj4yXV5fLENbUys0Pj4yXV51LDMyKSxSPTB8bygpLEQ9MHxaSSgoZT0wfHVJKGk9MHx1SSgwfENbKGk9USsxMDI0KyhOKzgwPDwzKXwwKT4+Ml0sMHxDW2krND4+Ml0sUyxSKSxlPTB8bygpLFI9MHxaSSgodT0wfHVJKF8sdSxwPTB8WkkoaV5ELGVecCwyNCksRD0wfG8oKSkpXlMsKF89MHxvKCkpXlIsMTYpLFM9MHxvKCkpKV5wLChpPTB8bygpKV5ELDYzKSxwPTB8bygpLGI9USsxMDI0KyhOKzE3PDwzKXwwLEc9MHxDWyhZPVErMTAyNCsoTis0OTw8Myl8MCk+PjJdLFk9MHxDW1krND4+Ml0sYj0wfHVJKDB8Q1tiPj4yXSwwfENbYis0Pj4yXSxHLFkpLE09MHxvKCksRT0wfFpJKENbKEU9USsxMDI0KyhOKzExMzw8Myl8MCk+PjJdXmIsQ1tFKzQ+PjJdXk0sMzIpLG49MHxvKCksRz0wfFpJKChzPTB8dUkodz0wfHVJKDB8Q1sodz1RKzEwMjQrKE4rODE8PDMpfDApPj4yXSwwfENbdys0Pj4yXSxFLG4pLHM9MHxvKCksbj0wfFpJKChNPTB8dUkoYixNLFk9MHxaSSh3Xkcsc15ZLDI0KSxHPTB8bygpKSleRSwoYj0wfG8oKSlebiwxNiksRT0wfG8oKSkpXlksKHc9MHxvKCkpXkcsNjMpLFk9MHxvKCksST0wfHVJKGM9MHx1SShJLGMsYSxyKSxJPTB8bygpLHI9MHxaSSgoaT0wfHVJKGUsaSxFPTB8WkkoY15uLEleRSwzMiksbj0wfG8oKSkpXmEsKGU9MHxvKCkpXnIsMjQpLGE9MHxvKCkpLGM9MHxvKCksQ1tRKzEwMjQrKE48PDMpPj4yXT1JLENbUSsxMDI0KyhOPDwzKSs0Pj4yXT1jLG49MHxaSShJXkUsY15uLDE2KSxjPTB8bygpLENbKEU9USsxMDI0KyhOKzExMzw8Myl8MCk+PjJdPW4sQ1tFKzQ+PjJdPWMsYz0wfHVJKGksZSxuLGMpLG49MHxvKCksQ1soZT1RKzEwMjQrKE4rODA8PDMpfDApPj4yXT1jLENbZSs0Pj4yXT1uLGE9MHxaSShjXnIsbl5hLDYzKSxuPTB8bygpLENbKHI9USsxMDI0KyhOKzMzPDwzKXwwKT4+Ml09YSxDW3IrND4+Ml09bix0PTB8dUkoaD0wfHVJKHQsaCxELHApLHQ9MHxvKCkscD0wfFpJKCh3PTB8dUkocyx3LGY9MHxaSShoXkYsdF5mLDMyKSxGPTB8bygpKSleRCwocz0wfG8oKSlecCwyNCksRD0wfG8oKSksaD0wfG8oKSxDW1ErMTAyNCsoKDF8Tik8PDMpPj4yXT10LENbUSsxMDI0KygoMXxOKTw8MykrND4+Ml09aCxGPTB8WkkodF5mLGheRiwxNiksaD0wfG8oKSxDWyhmPVErMTAyNCsoTis5Njw8Myl8MCk+PjJdPUYsQ1tmKzQ+PjJdPWgsaD0wfHVJKHcscyxGLGgpLEY9MHxvKCksQ1socz1RKzEwMjQrKE4rODE8PDMpfDApPj4yXT1oLENbcys0Pj4yXT1GLEQ9MHxaSShoXnAsRl5ELDYzKSxGPTB8bygpLENbKHA9USsxMDI0KyhOKzQ4PDwzKXwwKT4+Ml09RCxDW3ArND4+Ml09Rix1PTB8dUkoXz0wfHVJKHUsXyxHLFkpLHU9MHxvKCksWT0wfFpJKChrPTB8dUkobCxrLEg9MHxaSShfXmQsdV5ILDMyKSxkPTB8bygpKSleRywobD0wfG8oKSleWSwyNCksRz0wfG8oKSksXz0wfG8oKSxDWyhwPVErMTAyNCsoTisxNjw8Myl8MCk+PjJdPXUsQ1twKzQ+PjJdPV8sZD0wfFpJKHVeSCxfXmQsMTYpLF89MHxvKCksQ1soSD1RKzEwMjQrKE4rOTc8PDMpfDApPj4yXT1kLENbSCs0Pj4yXT1fLF89MHx1SShrLGwsZCxfKSxkPTB8bygpLENbKGw9USsxMDI0KyhOKzY0PDwzKXwwKT4+Ml09XyxDW2wrND4+Ml09ZCxHPTB8WkkoX15ZLGReRyw2MyksZD0wfG8oKSxDWyhZPVErMTAyNCsoTis0OTw8Myl8MCk+PjJdPUcsQ1tZKzQ+PjJdPWQsTT0wfHVJKGI9MHx1SShNLGIsUCxKKSxNPTB8bygpLEo9MHxaSSgoVT0wfHVJKHYsVSxTPTB8WkkoYl5SLE1eUywzMiksUj0wfG8oKSkpXlAsKHY9MHxvKCkpXkosMjQpLFA9MHxvKCkpLGI9MHxvKCksQ1soWT1RKzEwMjQrKE4rMTc8PDMpfDApPj4yXT1NLENbWSs0Pj4yXT1iLFI9MHxaSShNXlMsYl5SLDE2KSxiPTB8bygpLENbKFM9USsxMDI0KyhOKzExMjw8Myl8MCk+PjJdPVIsQ1tTKzQ+PjJdPWIsYj0wfHVJKFUsdixSLGIpLFI9MHxvKCksQ1sodj1RKzEwMjQrKE4rNjU8PDMpfDApPj4yXT1iLENbdis0Pj4yXT1SLFA9MHxaSShiXkosUl5QLDYzKSxSPTB8bygpLENbKE49USsxMDI0KyhOKzMyPDwzKXwwKT4+Ml09UCxDW04rND4+Ml09UixBPUErMXwwfXdoaWxlKDghPSgwfEEpKTtmQihnLFEpLFNJKGcsUSsxMDI0fDApLHk9Qn1mdW5jdGlvbiBrKEEsSSxnKXtBfD0wLGd8PTA7dmFyIEIsUSxFPTAsaT0wLGU9MCxjPTAsYT0wLG49MCxyPTAsdD0wLGY9MCx3PTAscz0wLGg9MCxEPTAsRj0wLHA9MCx1PTAsSD0wLGs9MCxsPTAsXz0wLEc9MCxkPTAsWT0wLE09MCxTPTAsVT0wLHY9MCxiPTAsSj0wLFA9MCxSPTAsTj0wO0I9eSxRPXk9eSs2MyYtNjQseT15KzIwNDh8MCxmQihRKzEwMjR8MCxJfD0wKSxTSShRKzEwMjR8MCxBKSxmQihRLFErMTAyNHwwKSxBPTA7ZG97aT0wfENbUSsxMDI0KygoNHwoST1BPDw0KSk8PDMpPj4yXSxlPTB8Q1tRKzEwMjQrKCg0fEkpPDwzKSs0Pj4yXSxiPTB8dUkoMHxDW1ErMTAyNCsoSTw8Myk+PjJdLDB8Q1tRKzEwMjQrKEk8PDMpKzQ+PjJdLGksZSksTj0wfG8oKSxZPTB8WkkoQ1tRKzEwMjQrKCgxMnxJKTw8Myk+PjJdXmIsQ1tRKzEwMjQrKCgxMnxJKTw8MykrND4+Ml1eTiwzMiksSD0wfG8oKSxIPTB8WkkoKE49MHx1SShiLE4sZT0wfFpJKChGPTB8dUkoMHxDW1ErMTAyNCsoKDh8SSk8PDMpPj4yXSwwfENbUSsxMDI0KygoOHxJKTw8MykrND4+Ml0sWSxIKSleaSwoRD0wfG8oKSleZSwyNCksaT0wfG8oKSkpXlksKGI9MHxvKCkpXkgsMTYpLFk9MHxvKCksQ1tRKzEwMjQrKCgxMnxJKTw8Myk+PjJdPUgsQ1tRKzEwMjQrKCgxMnxJKTw8MykrND4+Ml09WSxEPTB8dUkoRixELEgsWSksRj0wfG8oKSxDW1ErMTAyNCsoKDh8SSk8PDMpPj4yXT1ELENbUSsxMDI0KygoOHxJKTw8MykrND4+Ml09RixpPTB8WkkoRF5lLEZeaSw2MyksZT0wfG8oKSxDW1ErMTAyNCsoKDR8SSk8PDMpPj4yXT1pLENbUSsxMDI0KygoNHxJKTw8MykrND4+Ml09ZSxVPTB8Q1tRKzEwMjQrKCg1fEkpPDwzKT4+Ml0sdj0wfENbUSsxMDI0KygoNXxJKTw8MykrND4+Ml0sXz0wfHVJKDB8Q1tRKzEwMjQrKCgxfEkpPDwzKT4+Ml0sMHxDW1ErMTAyNCsoKDF8SSk8PDMpKzQ+PjJdLFUsdiksTT0wfG8oKSxwPTB8WkkoQ1tRKzEwMjQrKCgxM3xJKTw8Myk+PjJdXl8sQ1tRKzEwMjQrKCgxM3xJKTw8MykrND4+Ml1eTSwzMiksZj0wfG8oKSxhPTB8dUkobj0wfHVJKDB8Q1tRKzEwMjQrKCg5fEkpPDwzKT4+Ml0sMHxDW1ErMTAyNCsoKDl8SSk8PDMpKzQ+PjJdLHAsZiksYT0wfG8oKSxmPTB8WkkoKE09MHx1SShfLE0sdj0wfFpJKG5eVSxhXnYsMjQpLFU9MHxvKCkpKV5wLChfPTB8bygpKV5mLDE2KSxwPTB8bygpKSxuPTB8bygpLENbUSsxMDI0KygoOXxJKTw8Myk+PjJdPWEsQ1tRKzEwMjQrKCg5fEkpPDwzKSs0Pj4yXT1uLFU9MHxaSShhXnYsbl5VLDYzKSx2PTB8bygpLGs9MHxDW1ErMTAyNCsoKDZ8SSk8PDMpPj4yXSxsPTB8Q1tRKzEwMjQrKCg2fEkpPDwzKSs0Pj4yXSxoPTB8dUkoMHxDW1ErMTAyNCsoKDJ8SSk8PDMpPj4yXSwwfENbUSsxMDI0KygoMnxJKTw8MykrND4+Ml0sayxsKSx1PTB8bygpLHI9MHxaSShDW1ErMTAyNCsoKDE0fEkpPDwzKT4+Ml1eaCxDW1ErMTAyNCsoKDE0fEkpPDwzKSs0Pj4yXV51LDMyKSxFPTB8bygpLGs9MHxaSSgoSj0wfHVJKFA9MHx1SSgwfENbUSsxMDI0KygoMTB8SSk8PDMpPj4yXSwwfENbUSsxMDI0KygoMTB8SSk8PDMpKzQ+PjJdLHIsRSksSj0wfG8oKSxFPTB8WkkoKHU9MHx1SShoLHUsbD0wfFpJKFBeayxKXmwsMjQpLGs9MHxvKCkpKV5yLChoPTB8bygpKV5FLDE2KSxyPTB8bygpKSlebCwoUD0wfG8oKSleayw2MyksbD0wfG8oKSx3PTB8Q1tRKzEwMjQrKCg3fEkpPDwzKT4+Ml0scz0wfENbUSsxMDI0KygoN3xJKTw8MykrND4+Ml0sYz0wfHVJKDB8Q1tRKzEwMjQrKCgzfEkpPDwzKT4+Ml0sMHxDW1ErMTAyNCsoKDN8SSk8PDMpKzQ+PjJdLHcscyksdD0wfG8oKSxSPTB8WkkoQ1tRKzEwMjQrKCgxNXxJKTw8Myk+PjJdXmMsQ1tRKzEwMjQrKCgxNXxJKTw8MykrND4+Ml1edCwzMiksUz0wfG8oKSx3PTB8WkkoKEc9MHx1SShkPTB8dUkoMHxDW1ErMTAyNCsoKDExfEkpPDwzKT4+Ml0sMHxDW1ErMTAyNCsoKDExfEkpPDwzKSs0Pj4yXSxSLFMpLEc9MHxvKCksUz0wfFpJKCh0PTB8dUkoYyx0LHM9MHxaSShkXncsR15zLDI0KSx3PTB8bygpKSleUiwoYz0wfG8oKSleUywxNiksUj0wfG8oKSkpXnMsKGQ9MHxvKCkpXncsNjMpLHM9MHxvKCksTj0wfHVJKGI9MHx1SShOLGIsVSx2KSxOPTB8bygpLHY9MHxaSSgoUD0wfHVJKEosUCxSPTB8WkkoYl5TLE5eUiwzMiksUz0wfG8oKSkpXlUsKEo9MHxvKCkpXnYsMjQpLFU9MHxvKCkpLGI9MHxvKCksQ1tRKzEwMjQrKEk8PDMpPj4yXT1OLENbUSsxMDI0KyhJPDwzKSs0Pj4yXT1iLFM9MHxaSShOXlIsYl5TLDE2KSxiPTB8bygpLENbUSsxMDI0KygoMTV8SSk8PDMpPj4yXT1TLENbUSsxMDI0KygoMTV8SSk8PDMpKzQ+PjJdPWIsYj0wfHVJKFAsSixTLGIpLFM9MHxvKCksQ1tRKzEwMjQrKCgxMHxJKTw8Myk+PjJdPWIsQ1tRKzEwMjQrKCgxMHxJKTw8MykrND4+Ml09UyxVPTB8WkkoYl52LFNeVSw2MyksUz0wfG8oKSxDW1ErMTAyNCsoKDV8SSk8PDMpPj4yXT1VLENbUSsxMDI0KygoNXxJKTw8MykrND4+Ml09UyxNPTB8dUkoXz0wfHVJKE0sXyxrLGwpLE09MHxvKCksbD0wfFpJKChkPTB8dUkoRyxkLFk9MHxaSShfXkgsTV5ZLDMyKSxIPTB8bygpKSleaywoRz0wfG8oKSlebCwyNCksaz0wfG8oKSksXz0wfG8oKSxDW1ErMTAyNCsoKDF8SSk8PDMpPj4yXT1NLENbUSsxMDI0KygoMXxJKTw8MykrND4+Ml09XyxIPTB8WkkoTV5ZLF9eSCwxNiksXz0wfG8oKSxDW1ErMTAyNCsoKDEyfEkpPDwzKT4+Ml09SCxDW1ErMTAyNCsoKDEyfEkpPDwzKSs0Pj4yXT1fLF89MHx1SShkLEcsSCxfKSxIPTB8bygpLENbUSsxMDI0KygoMTF8SSk8PDMpPj4yXT1fLENbUSsxMDI0KygoMTF8SSk8PDMpKzQ+PjJdPUgsaz0wfFpJKF9ebCxIXmssNjMpLEg9MHxvKCksQ1tRKzEwMjQrKCg2fEkpPDwzKT4+Ml09ayxDW1ErMTAyNCsoKDZ8SSk8PDMpKzQ+PjJdPUgsdT0wfHVJKGg9MHx1SSh1LGgsdyxzKSx1PTB8bygpLHM9MHxaSSgoRj0wfHVJKEQsRixwPTB8WkkoaF5mLHVecCwzMiksZj0wfG8oKSkpXncsKEQ9MHxvKCkpXnMsMjQpLHc9MHxvKCkpLGg9MHxvKCksQ1tRKzEwMjQrKCgyfEkpPDwzKT4+Ml09dSxDW1ErMTAyNCsoKDJ8SSk8PDMpKzQ+PjJdPWgsZj0wfFpJKHVecCxoXmYsMTYpLGg9MHxvKCksQ1tRKzEwMjQrKCgxM3xJKTw8Myk+PjJdPWYsQ1tRKzEwMjQrKCgxM3xJKTw8MykrND4+Ml09aCxoPTB8dUkoRixELGYsaCksZj0wfG8oKSxDW1ErMTAyNCsoKDh8SSk8PDMpPj4yXT1oLENbUSsxMDI0KygoOHxJKTw8MykrND4+Ml09Zix3PTB8WkkoaF5zLGZedyw2MyksZj0wfG8oKSxDW1ErMTAyNCsoKDd8SSk8PDMpPj4yXT13LENbUSsxMDI0KygoN3xJKTw8MykrND4+Ml09Zix0PTB8dUkoYz0wfHVJKHQsYyxpLGUpLHQ9MHxvKCksZT0wfFpJKChuPTB8dUkoYSxuLHI9MHxaSShjXkUsdF5yLDMyKSxFPTB8bygpKSleaSwoYT0wfG8oKSleZSwyNCksaT0wfG8oKSksYz0wfG8oKSxDW1ErMTAyNCsoKDN8SSk8PDMpPj4yXT10LENbUSsxMDI0KygoM3xJKTw8MykrND4+Ml09YyxFPTB8WkkodF5yLGNeRSwxNiksYz0wfG8oKSxDW1ErMTAyNCsoKDE0fEkpPDwzKT4+Ml09RSxDW1ErMTAyNCsoKDE0fEkpPDwzKSs0Pj4yXT1jLGM9MHx1SShuLGEsRSxjKSxFPTB8bygpLENbUSsxMDI0KygoOXxJKTw8Myk+PjJdPWMsQ1tRKzEwMjQrKCg5fEkpPDwzKSs0Pj4yXT1FLGk9MHxaSShjXmUsRV5pLDYzKSxFPTB8bygpLENbUSsxMDI0KygoNHxJKTw8Myk+PjJdPWksQ1tRKzEwMjQrKCg0fEkpPDwzKSs0Pj4yXT1FLEE9QSsxfDB9d2hpbGUoOCE9KDB8QSkpO0E9MDtkb3tQPTB8Q1soSj1RKzEwMjQrKDMyKyhOPUE8PDEpPDwzKXwwKT4+Ml0sSj0wfENbSis0Pj4yXSxjPTB8dUkoMHxDW1ErMTAyNCsoTjw8Myk+PjJdLDB8Q1tRKzEwMjQrKE48PDMpKzQ+PjJdLFAsSiksST0wfG8oKSxmPTB8WkkoQ1soZj1RKzEwMjQrKE4rOTY8PDMpfDApPj4yXV5jLENbZis0Pj4yXV5JLDMyKSxGPTB8bygpLEY9MHxaSSgoST0wfHVJKGMsSSxKPTB8WkkoKGs9MHx1SSgwfENbKGs9USsxMDI0KyhOKzY0PDwzKXwwKT4+Ml0sMHxDW2srND4+Ml0sZixGKSleUCwobD0wfG8oKSleSiwyNCksUD0wfG8oKSkpXmYsKGM9MHxvKCkpXkYsMTYpLGY9MHxvKCksQ1socj1RKzEwMjQrKE4rOTY8PDMpfDApPj4yXT1GLENbcis0Pj4yXT1mLGw9MHx1SShrLGwsRixmKSxrPTB8bygpLENbKHI9USsxMDI0KyhOKzY0PDwzKXwwKT4+Ml09bCxDW3IrND4+Ml09ayxQPTB8WkkobF5KLGteUCw2MyksSj0wfG8oKSxDWyhyPVErMTAyNCsoTiszMjw8Myl8MCk+PjJdPVAsQ1tyKzQ+PjJdPUosYT0wfENbKHI9USsxMDI0KyhOKzMzPDwzKXwwKT4+Ml0scj0wfENbcis0Pj4yXSxoPTB8dUkoMHxDW1ErMTAyNCsoKDF8Tik8PDMpPj4yXSwwfENbUSsxMDI0KygoMXxOKTw8MykrND4+Ml0sYSxyKSx0PTB8bygpLEg9MHxaSShDWyhIPVErMTAyNCsoTis5Nzw8Myl8MCk+PjJdXmgsQ1tIKzQ+PjJdXnQsMzIpLGQ9MHxvKCksdj0wfHVJKFU9MHx1SSgwfENbKFU9USsxMDI0KyhOKzY1PDwzKXwwKT4+Ml0sMHxDW1UrND4+Ml0sSCxkKSx2PTB8bygpLGQ9MHxaSSgodD0wfHVJKGgsdCxyPTB8WkkoVV5hLHZeciwyNCksYT0wfG8oKSkpXkgsKGg9MHxvKCkpXmQsMTYpLEg9MHxvKCkpLFU9MHxvKCksQ1soXz1RKzEwMjQrKE4rNjU8PDMpfDApPj4yXT12LENbXys0Pj4yXT1VLGE9MHxaSSh2XnIsVV5hLDYzKSxyPTB8bygpLF89USsxMDI0KyhOKzE2PDwzKXwwLEQ9MHxDWyhwPVErMTAyNCsoTis0ODw8Myl8MCk+PjJdLHA9MHxDW3ArND4+Ml0sXz0wfHVJKDB8Q1tfPj4yXSwwfENbXys0Pj4yXSxELHApLHU9MHxvKCksUz0wfFpJKENbKFM9USsxMDI0KyhOKzExMjw8Myl8MCk+PjJdXl8sQ1tTKzQ+PjJdXnUsMzIpLFI9MHxvKCksRD0wfFpJKChlPTB8dUkoaT0wfHVJKDB8Q1soaT1RKzEwMjQrKE4rODA8PDMpfDApPj4yXSwwfENbaSs0Pj4yXSxTLFIpLGU9MHxvKCksUj0wfFpJKCh1PTB8dUkoXyx1LHA9MHxaSShpXkQsZV5wLDI0KSxEPTB8bygpKSleUywoXz0wfG8oKSleUiwxNiksUz0wfG8oKSkpXnAsKGk9MHxvKCkpXkQsNjMpLHA9MHxvKCksYj1RKzEwMjQrKE4rMTc8PDMpfDAsRz0wfENbKFk9USsxMDI0KyhOKzQ5PDwzKXwwKT4+Ml0sWT0wfENbWSs0Pj4yXSxiPTB8dUkoMHxDW2I+PjJdLDB8Q1tiKzQ+PjJdLEcsWSksTT0wfG8oKSxFPTB8WkkoQ1soRT1RKzEwMjQrKE4rMTEzPDwzKXwwKT4+Ml1eYixDW0UrND4+Ml1eTSwzMiksbj0wfG8oKSxHPTB8WkkoKHM9MHx1SSh3PTB8dUkoMHxDWyh3PVErMTAyNCsoTis4MTw8Myl8MCk+PjJdLDB8Q1t3KzQ+PjJdLEUsbikscz0wfG8oKSxuPTB8WkkoKE09MHx1SShiLE0sWT0wfFpJKHdeRyxzXlksMjQpLEc9MHxvKCkpKV5FLChiPTB8bygpKV5uLDE2KSxFPTB8bygpKSleWSwodz0wfG8oKSleRyw2MyksWT0wfG8oKSxJPTB8dUkoYz0wfHVJKEksYyxhLHIpLEk9MHxvKCkscj0wfFpJKChpPTB8dUkoZSxpLEU9MHxaSShjXm4sSV5FLDMyKSxuPTB8bygpKSleYSwoZT0wfG8oKSleciwyNCksYT0wfG8oKSksYz0wfG8oKSxDW1ErMTAyNCsoTjw8Myk+PjJdPUksQ1tRKzEwMjQrKE48PDMpKzQ+PjJdPWMsbj0wfFpJKEleRSxjXm4sMTYpLGM9MHxvKCksQ1soRT1RKzEwMjQrKE4rMTEzPDwzKXwwKT4+Ml09bixDW0UrND4+Ml09YyxjPTB8dUkoaSxlLG4sYyksbj0wfG8oKSxDWyhlPVErMTAyNCsoTis4MDw8Myl8MCk+PjJdPWMsQ1tlKzQ+PjJdPW4sYT0wfFpJKGNecixuXmEsNjMpLG49MHxvKCksQ1socj1RKzEwMjQrKE4rMzM8PDMpfDApPj4yXT1hLENbcis0Pj4yXT1uLHQ9MHx1SShoPTB8dUkodCxoLEQscCksdD0wfG8oKSxwPTB8WkkoKHc9MHx1SShzLHcsZj0wfFpJKGheRix0XmYsMzIpLEY9MHxvKCkpKV5ELChzPTB8bygpKV5wLDI0KSxEPTB8bygpKSxoPTB8bygpLENbUSsxMDI0KygoMXxOKTw8Myk+PjJdPXQsQ1tRKzEwMjQrKCgxfE4pPDwzKSs0Pj4yXT1oLEY9MHxaSSh0XmYsaF5GLDE2KSxoPTB8bygpLENbKGY9USsxMDI0KyhOKzk2PDwzKXwwKT4+Ml09RixDW2YrND4+Ml09aCxoPTB8dUkodyxzLEYsaCksRj0wfG8oKSxDWyhzPVErMTAyNCsoTis4MTw8Myl8MCk+PjJdPWgsQ1tzKzQ+PjJdPUYsRD0wfFpJKGhecCxGXkQsNjMpLEY9MHxvKCksQ1socD1RKzEwMjQrKE4rNDg8PDMpfDApPj4yXT1ELENbcCs0Pj4yXT1GLHU9MHx1SShfPTB8dUkodSxfLEcsWSksdT0wfG8oKSxZPTB8WkkoKGs9MHx1SShsLGssSD0wfFpJKF9eZCx1XkgsMzIpLGQ9MHxvKCkpKV5HLChsPTB8bygpKV5ZLDI0KSxHPTB8bygpKSxfPTB8bygpLENbKHA9USsxMDI0KyhOKzE2PDwzKXwwKT4+Ml09dSxDW3ArND4+Ml09XyxkPTB8WkkodV5ILF9eZCwxNiksXz0wfG8oKSxDWyhIPVErMTAyNCsoTis5Nzw8Myl8MCk+PjJdPWQsQ1tIKzQ+PjJdPV8sXz0wfHVJKGssbCxkLF8pLGQ9MHxvKCksQ1sobD1RKzEwMjQrKE4rNjQ8PDMpfDApPj4yXT1fLENbbCs0Pj4yXT1kLEc9MHxaSShfXlksZF5HLDYzKSxkPTB8bygpLENbKFk9USsxMDI0KyhOKzQ5PDwzKXwwKT4+Ml09RyxDW1krND4+Ml09ZCxNPTB8dUkoYj0wfHVJKE0sYixQLEopLE09MHxvKCksSj0wfFpJKChVPTB8dUkodixVLFM9MHxaSShiXlIsTV5TLDMyKSxSPTB8bygpKSleUCwodj0wfG8oKSleSiwyNCksUD0wfG8oKSksYj0wfG8oKSxDWyhZPVErMTAyNCsoTisxNzw8Myl8MCk+PjJdPU0sQ1tZKzQ+PjJdPWIsUj0wfFpJKE1eUyxiXlIsMTYpLGI9MHxvKCksQ1soUz1RKzEwMjQrKE4rMTEyPDwzKXwwKT4+Ml09UixDW1MrND4+Ml09YixiPTB8dUkoVSx2LFIsYiksUj0wfG8oKSxDWyh2PVErMTAyNCsoTis2NTw8Myl8MCk+PjJdPWIsQ1t2KzQ+PjJdPVIsUD0wfFpJKGJeSixSXlAsNjMpLFI9MHxvKCksQ1soTj1RKzEwMjQrKE4rMzI8PDMpfDApPj4yXT1QLENbTis0Pj4yXT1SLEE9QSsxfDB9d2hpbGUoOCE9KDB8QSkpO2ZCKGcsUSksU0koZyxRKzEwMjR8MCkseT1CfWZ1bmN0aW9uIGwoQSxJKXtBfD0wO3ZhciBnLEIsUSxFLGksZSxjLGEsbixyLHQsZix3LHkscyxoLEQsRixwLHUsSCxrLGwsXyxHLGQsWSxNLFMsVSx2LGIsSixQLFIsTixtLEwseCxLLFgsaixULHEsVix6LFcsTyxaLCQsQUEsSUEsZ0E9MCxCQT0wLENBPTAsUUE9MCxFQT0wLGlBPTAsZUE9MCxvQT0wLGNBPTAsYUE9MCxuQT0wLHJBPTAsdEE9MCxmQT0wLHdBPTAseUE9MCxzQT0wLGhBPTAsREE9MCxGQT0wLHBBPTAsdUE9MCxIQT0wLGtBPTAsbEE9MCxfQT0wLEdBPTAsZEE9MCxZQT0wLE1BPTAsU0E9MCxVQT0wLHZBPTAsYkE9MCxKQT0wLFBBPTAsUkE9MCxOQT0wLG1BPTAsTEE9MCx4QT0wLEtBPTAsWEE9MCxqQT0wLFRBPTAscUE9MCxWQT0wLHpBPTAsV0E9MCxPQT0wLFpBPTAsJEE9MCxBST0wLElJPTAsZ0k9MCxCST0wLENJPTA7b0E9MHxDWyhJfD0wKT4+Ml0sd0E9MHxDW0krND4+Ml0sckE9MHxDW0krOD4+Ml0sRkE9MHxDW0krMTI+PjJdLEJBPTB8Q1tJKzE2Pj4yXSxwQT0wfENbSSsyMD4+Ml0seUE9MHxDW0krMjQ+PjJdLGlBPTB8Q1tJKzI4Pj4yXSxFQT0wfENbSSszMj4+Ml0sST0wfENbSSszNj4+Ml0sJD0wfFFnKDB8b0EsKCgwfG9BKTwwKTw8MzE+PjMxfDAsMHxvQSwoKDB8b0EpPDApPDwzMT4+MzF8MCksQ0k9MHxvKCkscT0wfFFnKG9BPDwxfDAsMHwoY0E9KChvQTw8MXwwKTwwKTw8MzE+PjMxKSwwfHdBLCgoMHx3QSk8MCk8PDMxPj4zMXwwKSxBST0wfG8oKSxYPTB8UWcoMHxyQSwoKDB8ckEpPDApPDwzMT4+MzF8MCxvQTw8MXwwLDB8Y0EpLEs9MHxvKCksUj0wfFFnKDB8RkEsKCgwfEZBKTwwKTw8MzE+PjMxfDAsb0E8PDF8MCwwfGNBKSxQPTB8bygpLFk9MHxRZygwfEJBLCgoMHxCQSk8MCk8PDMxPj4zMXwwLG9BPDwxfDAsMHxjQSksS0E9MHxvKCksaz0wfFFnKDB8cEEsKCgwfHBBKTwwKTw8MzE+PjMxfDAsb0E8PDF8MCwwfGNBKSxSQT0wfG8oKSxoPTB8UWcoMHx5QSwoKDB8eUEpPDApPDwzMT4+MzF8MCxvQTw8MXwwLDB8Y0EpLHZBPTB8bygpLHQ9MHxRZygwfGlBLCgoMHxpQSk8MCk8PDMxPj4zMXwwLG9BPDwxfDAsMHxjQSksZEE9MHxvKCksaT0wfFFnKDB8RUEsKCgwfEVBKTwwKTw8MzE+PjMxfDAsb0E8PDF8MCwwfGNBKSxrQT0wfG8oKSxjQT0wfFFnKDB8SSwoKDB8SSk8MCk8PDMxPj4zMXwwLG9BPDwxfDAsMHxjQSksb0E9MHxvKCkseD0wfFFnKHdBPDwxfDAsMHwoZ0E9KCh3QTw8MXwwKTwwKTw8MzE+PjMxKSwwfHdBLCgoMHx3QSk8MCk8PDMxPj4zMXwwKSxPQT0wfG8oKSxKPTB8UWcod0E8PDF8MCwwfGdBLDB8ckEsKCgwfHJBKTwwKTw8MzE+PjMxfDApLHFBPTB8bygpLFU9MHxRZyhGQTw8MXwwLDB8KENBPSgoRkE8PDF8MCk8MCk8PDMxPj4zMSksd0E8PDF8MCwwfGdBKSxTPTB8bygpLEc9MHxRZygwfEJBLCgoMHxCQSk8MCk8PDMxPj4zMXwwLHdBPDwxfDAsMHxnQSksXz0wfG8oKSxEPTB8UWcocEE8PDF8MCwoKHBBPDwxfDApPDApPDwzMT4+MzF8MCx3QTw8MXwwLDB8Z0EpLGJBPTB8bygpLGY9MHxRZygwfHlBLCgoMHx5QSk8MCk8PDMxPj4zMXwwLHdBPDwxfDAsMHxnQSksWUE9MHxvKCksZT0wfFFnKGlBPDwxfDAsKChpQTw8MXwwKTwwKTw8MzE+PjMxfDAsd0E8PDF8MCwwfGdBKSxsQT0wfG8oKSxhQT0wfFFnKDB8RUEsKCgwfEVBKTwwKTw8MzE+PjMxfDAsd0E8PDF8MCwwfGdBKSxuQT0wfG8oKSxnQT0wfFFnKDM4Kkl8MCwwfChmQT0oKDM4Kkl8MCk8MCk8PDMxPj4zMSksd0E8PDF8MCwwfGdBKSx3QT0wfG8oKSxNPTB8UWcoMHxyQSwoKDB8ckEpPDApPDwzMT4+MzF8MCwwfHJBLCgoMHxyQSk8MCk8PDMxPj4zMXwwKSxYQT0wfG8oKSxsPTB8UWcockE8PDF8MCwoKHJBPDwxfDApPDApPDwzMT4+MzF8MCwwfEZBLCgoMHxGQSk8MCk8PDMxPj4zMXwwKSxOQT0wfG8oKSxGPTB8UWcoMHxCQSwoKDB8QkEpPDApPDwzMT4+MzF8MCxyQTw8MXwwLCgockE8PDF8MCk8MCk8PDMxPj4zMXwwKSxKQT0wfG8oKSxzPTB8UWcoMHxwQSwoKDB8cEEpPDApPDwzMT4+MzF8MCxyQTw8MXwwLCgockE8PDF8MCk8MCk8PDMxPj4zMXwwKSx5PTB8bygpLHI9MHxRZygwfHlBLCgoMHx5QSk8MCk8PDMxPj4zMXwwLHJBPDwxfDAsKChyQTw8MXwwKTwwKTw8MzE+PjMxfDApLG49MHxvKCksZz0wfFFnKDB8aUEsKCgwfGlBKTwwKTw8MzE+PjMxfDAsckE8PDF8MCwoKHJBPDwxfDApPDApPDwzMT4+MzF8MCksdUE9MHxvKCksVz0wfFFnKDE5KkVBfDAsMHwoVUE9KCgxOSpFQXwwKTwwKTw8MzE+PjMxKSxyQTw8MXwwLCgockE8PDF8MCk8MCk8PDMxPj4zMXwwKSxJST0wfG8oKSxyQT0wfFFnKDM4Kkl8MCwwfGZBLDB8ckEsKCgwfHJBKTwwKTw8MzE+PjMxfDApLHNBPTB8bygpLHU9MHxRZyhGQTw8MXwwLDB8Q0EsMHxGQSwoKDB8RkEpPDApPDwzMT4+MzF8MCkscD0wfG8oKSx3PTB8UWcoRkE8PDF8MCwwfENBLDB8QkEsKCgwfEJBKTwwKTw8MzE+PjMxfDApLE1BPTB8bygpLGM9MHxRZyhwQTw8MXwwLCgocEE8PDF8MCk8MCk8PDMxPj4zMXwwLEZBPDwxfDAsMHxDQSksX0E9MHxvKCksRT0wfFFnKDB8eUEsKCgwfHlBKTwwKTw8MzE+PjMxfDAsRkE8PDF8MCwwfENBKSxRPTB8bygpLE89MHxRZygzOCppQXwwLDB8KHhBPSgoMzgqaUF8MCk8MCk8PDMxPj4zMSksRkE8PDF8MCwwfENBKSxnST0wfG8oKSxqPTB8UWcoMTkqRUF8MCwwfFVBLEZBPDwxfDAsMHxDQSksWkE9MHxvKCksQ0E9MHxRZygzOCpJfDAsMHxmQSxGQTw8MXwwLDB8Q0EpLEZBPTB8bygpLGE9MHxRZygwfEJBLCgoMHxCQSk8MCk8PDMxPj4zMXwwLDB8QkEsKCgwfEJBKTwwKTw8MzE+PjMxfDApLEdBPTB8bygpLEI9MHxRZyhCQTw8MXwwLCgoQkE8PDF8MCk8MCk8PDMxPj4zMXwwLDB8cEEsKCgwfHBBKTwwKTw8MzE+PjMxfDApLEhBPTB8bygpLFo9MHxRZygxOSp5QXwwLCgoMTkqeUF8MCk8MCk8PDMxPj4zMXwwLEJBPDwxfDAsKChCQTw8MXwwKTwwKTw8MzE+PjMxfDApLEJJPTB8bygpLFQ9MHxRZygzOCppQXwwLDB8eEEsMHxCQSwoKDB8QkEpPDApPDwzMT4+MzF8MCksJEE9MHxvKCksTj0wfFFnKDE5KkVBfDAsMHxVQSxCQTw8MXwwLCgoQkE8PDF8MCk8MCk8PDMxPj4zMXwwKSxWQT0wfG8oKSxCQT0wfFFnKDM4Kkl8MCwwfGZBLDB8QkEsKCgwfEJBKTwwKTw8MzE+PjMxfDApLGhBPTB8bygpLElBPTB8UWcoMzgqcEF8MCwoKDM4KnBBfDApPDApPDwzMT4+MzF8MCwwfHBBLCgoMHxwQSk8MCk8PDMxPj4zMXwwKSxBQT0wfG8oKSx6PTB8UWcoMTkqeUF8MCwoKDE5KnlBfDApPDApPDwzMT4+MzF8MCxwQTw8MXwwLCgocEE8PDF8MCk8MCk8PDMxPj4zMXwwKSxWPTB8bygpLG09MHxRZygzOCppQXwwLDB8eEEscEE8PDF8MCwoKHBBPDwxfDApPDApPDwzMT4+MzF8MCksekE9MHxvKCksdj0wfFFnKDE5KkVBfDAsMHxVQSxwQTw8MXwwLCgocEE8PDF8MCk8MCk8PDMxPj4zMXwwKSxqQT0wfG8oKSxwQT0wfFFnKDM4Kkl8MCwwfGZBLHBBPDwxfDAsKChwQTw8MXwwKTwwKTw8MzE+PjMxfDApLHRBPTB8bygpLEw9MHxRZygxOSp5QXwwLCgoMTkqeUF8MCk8MCk8PDMxPj4zMXwwLDB8eUEsKCgwfHlBKTwwKTw8MzE+PjMxfDApLFdBPTB8bygpLGI9MHxRZygzOCppQXwwLDB8eEEsMHx5QSwoKDB8eUEpPDApPDwzMT4+MzF8MCksVEE9MHxvKCksZD0wfFFnKDE5KkVBfDAsMHxVQSx5QTw8MXwwLCgoeUE8PDF8MCk8MCk8PDMxPj4zMXwwKSxtQT0wfG8oKSx5QT0wfFFnKDM4Kkl8MCwwfGZBLDB8eUEsKCgwfHlBKTwwKTw8MzE+PjMxfDApLGVBPTB8bygpLHhBPTB8UWcoMzgqaUF8MCwwfHhBLDB8aUEsKCgwfGlBKTwwKTw8MzE+PjMxfDApLExBPTB8bygpLEg9MHxRZygxOSpFQXwwLDB8VUEsaUE8PDF8MCwoKGlBPDwxfDApPDApPDwzMT4+MzF8MCksUEE9MHxvKCksaUE9MHxRZygzOCpJfDAsMHxmQSxpQTw8MXwwLCgoaUE8PDF8MCk8MCk8PDMxPj4zMXwwKSxEQT0wfG8oKSxVQT0wfFFnKDE5KkVBfDAsMHxVQSwwfEVBLCgoMHxFQSk8MCk8PDMxPj4zMXwwKSxTQT0wfG8oKSxFQT0wfFFnKDM4Kkl8MCwwfGZBLDB8RUEsKCgwfEVBKTwwKTw8MzE+PjMxfDApLFFBPTB8bygpLEk9MHxRZygzOCpJfDAsMHxmQSwwfEksKCgwfEkpPDApPDwzMT4+MzF8MCksZkE9MHxvKCksd0E9MHx2ZygwfChJST0wfHZnKDB8KGdJPTB8dmcoMHwoQkk9MHx2ZygwfChDST0wfHZnKDB8SUEsMHxBQSwwfCQsMHxDSSkpLDB8bygpLDB8WiwwfEJJKSksMHxvKCksMHxPLDB8Z0kpKSwwfG8oKSwwfFcsMHxJSSkpLDB8bygpLDB8Z0EsMHx3QSksZ0E9MHxvKCksc0E9MHx2ZygwfChaQT0wfHZnKDB8KCRBPTB8dmcoMHwoQUk9MHx2ZygwfHosMHxWLDB8cSwwfEFJKSksMHxvKCksMHxULDB8JEEpKSwwfG8oKSwwfGosMHxaQSkpLDB8bygpLDB8ckEsMHxzQSksckE9MHxvKCksRkE9MHx2ZygwfChWQT0wfHZnKDB8KHpBPTB8dmcoMHwoV0E9MHx2ZygwfChPQT0wfHZnKDB8WCwwfEssMHx4LDB8T0EpKSwwfG8oKSwwfEwsMHxXQSkpLDB8bygpLDB8bSwwfHpBKSksMHxvKCksMHxOLDB8VkEpKSwwfG8oKSwwfENBLDB8RkEpLENBPTB8bygpLGhBPTB8dmcoMHwoakE9MHx2ZygwfChUQT0wfHZnKDB8KHFBPTB8dmcoMHxSLDB8UCwwfEosMHxxQSkpLDB8bygpLDB8YiwwfFRBKSksMHxvKCksMHx2LDB8akEpKSwwfG8oKSwwfEJBLDB8aEEpLEJBPTB8bygpLHRBPTB8dmcoMHwobUE9MHx2ZygwfChMQT0wfHZnKDB8KEtBPTB8dmcoMHwoWEE9MHx2ZygwfFUsMHxTLDB8TSwwfFhBKSksMHxvKCksMHxZLDB8S0EpKSwwfG8oKSwwfHhBLDB8TEEpKSwwfG8oKSwwfGQsMHxtQSkpLDB8bygpLDB8cEEsMHx0QSkscEE9MHxvKCksZUE9MHx2ZygwfChQQT0wfHZnKDB8KFJBPTB8dmcoMHwoTkE9MHx2ZygwfEcsMHxfLDB8bCwwfE5BKSksMHxvKCksMHxrLDB8UkEpKSwwfG8oKSwwfEgsMHxQQSkpLDB8bygpLDB8eUEsMHxlQSkseUE9MHxvKCksREE9MHx2ZygwfChTQT0wfHZnKDB8KHZBPTB8dmcoMHwoYkE9MHx2ZygwfChKQT0wfHZnKDB8dSwwfHAsMHxGLDB8SkEpKSwwfG8oKSwwfEQsMHxiQSkpLDB8bygpLDB8aCwwfHZBKSksMHxvKCksMHxVQSwwfFNBKSksMHxvKCksMHxpQSwwfERBKSxpQT0wfG8oKSxRQT0wfHZnKDB8KGRBPTB8dmcoMHwoWUE9MHx2ZygwfChNQT0wfHZnKDB8cywwfHksMHx3LDB8TUEpKSwwfG8oKSwwfGYsMHxZQSkpLDB8bygpLDB8dCwwfGRBKSksMHxvKCksMHxFQSwwfFFBKSxFQT0wfG8oKSxmQT0wfHZnKDB8KGtBPTB8dmcoMHwobEE9MHx2ZygwfChfQT0wfHZnKDB8KEdBPTB8dmcoMHxyLDB8biwwfGEsMHxHQSkpLDB8bygpLDB8YywwfF9BKSksMHxvKCksMHxlLDB8bEEpKSwwfG8oKSwwfGksMHxrQSkpLDB8bygpLDB8SSwwfGZBKSxJPTB8bygpLG9BPTB8dmcoMHwobkE9MHx2ZygwfCh1QT0wfHZnKDB8KEhBPTB8dmcoMHxFLDB8USwwfEIsMHxIQSkpLDB8bygpLDB8ZywwfHVBKSksMHxvKCksMHxhQSwwfG5BKSksMHxvKCksMHxjQSwwfG9BKSxjQT0wfG8oKSxnQT0wfHJnKDB8d0EsMHxnQSwxKSx3QT0wfG8oKSxyQT0wfHJnKDB8c0EsMHxyQSwxKSxzQT0wfG8oKSxDQT0wfHJnKDB8RkEsMHxDQSwxKSxGQT0wfG8oKSxCQT0wfHJnKDB8aEEsMHxCQSwxKSxoQT0wfG8oKSxwQT0wfHJnKDB8dEEsMHxwQSwxKSx0QT0wfG8oKSx5QT0wfHJnKDB8ZUEsMHx5QSwxKSxlQT0wfG8oKSxpQT0wfHJnKDB8REEsMHxpQSwxKSxEQT0wfG8oKSxFQT0wfHJnKDB8UUEsMHxFQSwxKSxRQT0wfG8oKSxJPTB8cmcoMHxmQSwwfEksMSksZkE9MHxvKCksY0E9MHxyZygwfG9BLDB8Y0EsMSksb0E9MHxvKCksc0E9MHx2ZygwfCh1QT0wfGlnKDB8KG5BPTB8dmcoMHxnQSwwfHdBLDMzNTU0NDMyLDApKSwwfChhQT0wfG8oKSksMjYpKSwwfG8oKSwwfHJBLDB8c0EpLHJBPTB8bygpLGFBPTB8VWcoMHxnQSwwfHdBLC02NzEwODg2NCZuQXwwLDB8YUEpLG5BPTB8bygpLGVBPTB8dmcoMHwodUE9MHxpZygwfCh3QT0wfHZnKDB8cEEsMHx0QSwzMzU1NDQzMiwwKSksMHwoZ0E9MHxvKCkpLDI2KSksMHxvKCksMHx5QSwwfGVBKSx5QT0wfG8oKSxnQT0wfFVnKDB8cEEsMHx0QSwtNjcxMDg4NjQmd0F8MCwwfGdBKSx3QT0wfG8oKSxGQT0wfHZnKDB8KHBBPTB8aWcoMHwodEE9MHx2ZygwfHNBLDB8ckEsMTY3NzcyMTYsMCkpLDB8bygpLDI1KSksMHxvKCksMHxDQSwwfEZBKSxDQT0wfG8oKSx0QT0wfFVnKDB8c0EsMHxyQSwtMzM1NTQ0MzImdEF8MCwwKSxyQT0wfG8oKSxEQT0wfHZnKDB8KHBBPTB8aWcoMHwoc0E9MHx2ZygwfGVBLDB8eUEsMTY3NzcyMTYsMCkpLDB8bygpLDI1KSksMHxvKCksMHxpQSwwfERBKSxpQT0wfG8oKSxzQT0wfFVnKDB8ZUEsMHx5QSwtMzM1NTQ0MzImc0F8MCwwKSx5QT0wfG8oKSxoQT0wfHZnKDB8KHBBPTB8aWcoMHwoZUE9MHx2ZygwfEZBLDB8Q0EsMzM1NTQ0MzIsMCkpLDB8bygpLDI2KSksMHxvKCksMHxCQSwwfGhBKSxCQT0wfG8oKSxlQT0wfFVnKDB8RkEsMHxDQSwtNjcxMDg4NjQmZUF8MCwwKSxvKCksUUE9MHx2ZygwfChGQT0wfGlnKDB8KENBPTB8dmcoMHxEQSwwfGlBLDMzNTU0NDMyLDApKSwwfG8oKSwyNikpLDB8bygpLDB8RUEsMHxRQSksRUE9MHxvKCksQ0E9MHxVZygwfERBLDB8aUEsLTY3MTA4ODY0JkNBfDAsMCksbygpLHdBPTB8dmcoMHwoREE9MHxpZygwfChpQT0wfHZnKDB8aEEsMHxCQSwxNjc3NzIxNiwwKSksMHxvKCksMjUpKSwwfG8oKSwwfGdBLDB8d0EpLGdBPTB8bygpLGlBPTB8VWcoMHxoQSwwfEJBLC0zMzU1NDQzMiZpQXwwLDApLG8oKSxmQT0wfHZnKDB8KGhBPTB8aWcoMHwoQkE9MHx2ZygwfFFBLDB8RUEsMTY3NzcyMTYsMCkpLDB8bygpLDI1KSksMHxvKCksMHxJLDB8ZkEpLEk9MHxvKCksQkE9MHxVZygwfFFBLDB8RUEsLTMzNTU0NDMyJkJBfDAsMCksbygpLFFBPTB8dmcoMHxzQSwwfHlBLDB8KFFBPTB8eWcoMHwoRUE9MHx2ZygwfHdBLDB8Z0EsMzM1NTQ0MzIsMCkpLDB8bygpLDI2KSksMHxvKCkpLG8oKSxFQT0wfFVnKDB8d0EsMHxnQSwtNjcxMDg4NjQmRUF8MCwwKSxvKCksb0E9MHx2ZygwfCh3QT0wfGlnKDB8KGdBPTB8dmcoMHxmQSwwfEksMzM1NTQ0MzIsMCkpLDB8bygpLDI2KSksMHxvKCksMHxjQSwwfG9BKSxjQT0wfG8oKSxnQT0wfFVnKDB8ZkEsMHxJLC02NzEwODg2NCZnQXwwLDApLG8oKSxuQT0wfHZnKDB8KGZBPTB8UWcoMHwoZkE9MHxpZygwfChJPTB8dmcoMHxvQSwwfGNBLDE2Nzc3MjE2LDApKSwwfG8oKSwyNSkpLDB8bygpLDE5LDApKSwwfG8oKSwwfGFBLDB8bkEpLGFBPTB8bygpLEk9MHxVZygwfG9BLDB8Y0EsLTMzNTU0NDMyJkl8MCwwKSxvKCksb0E9MHx2ZygwfHRBLDB8ckEsMHwob0E9MHx5ZygwfChjQT0wfHZnKDB8bkEsMHxhQSwzMzU1NDQzMiwwKSksMHxvKCksMjYpKSwwfG8oKSksbygpLGNBPTB8VWcoMHxuQSwwfGFBLC02NzEwODg2NCZjQXwwLDApLG8oKSxDW0E+PjJdPWNBLENbQSs0Pj4yXT1vQSxDW0ErOD4+Ml09ZUEsQ1tBKzEyPj4yXT1pQSxDW0ErMTY+PjJdPUVBLENbQSsyMD4+Ml09UUEsQ1tBKzI0Pj4yXT1DQSxDW0ErMjg+PjJdPUJBLENbQSszMj4+Ml09Z0EsQ1tBKzM2Pj4yXT1JfWZ1bmN0aW9uIF8oQSxJKXtBfD0wO3ZhciBnLEIsUSxFLGksZSxjLGEsbixyLHQsZix3LHkscyxoLEQsRixwLHUsSCxrLGwsXyxHLGQsWSxNLFMsVSx2LGIsSixQLFIsTixtLEwseCxLLFgsaixULHEsVix6LFcsTyxaLCQsQUE9MCxJQT0wLGdBPTAsQkE9MCxDQT0wLFFBPTAsRUE9MCxpQT0wLGVBPTAsb0E9MCxjQT0wLGFBPTAsbkE9MCxyQT0wLHRBPTAsZkE9MCx3QT0wLHlBPTAsc0E9MCxoQT0wLERBPTAsRkE9MCxwQT0wLHVBPTAsSEE9MCxrQT0wLGxBPTAsX0E9MCxHQT0wLGRBPTAsWUE9MCxNQT0wLFNBPTAsVUE9MCx2QT0wLGJBPTAsSkE9MCxQQT0wLFJBPTAsTkE9MCxtQT0wLExBPTAseEE9MCxLQT0wLFhBPTAsakE9MCxUQT0wLHFBPTAsVkE9MCx6QT0wLFdBPTAsT0E9MCxaQT0wLCRBPTAsQUk9MCxJST0wLGdJPTAsQkk9MCxDST0wO3RBPTB8Q1soSXw9MCk+PjJdLEFBPTB8Q1tJKzQ+PjJdLEVBPTB8Q1tJKzg+PjJdLFFBPTB8Q1tJKzEyPj4yXSxNQT0wfENbSSsxNj4+Ml0sbkE9MHxDW0krMjA+PjJdLFRBPTB8Q1tJKzI0Pj4yXSxJQT0wfENbSSsyOD4+Ml0sX0E9MHxDW0krMzI+PjJdLEZBPTB8Q1tJKzM2Pj4yXSxPPTB8UWcoMHx0QSwoKDB8dEEpPDApPDwzMT4+MzF8MCwwfHRBLCgoMHx0QSk8MCk8PDMxPj4zMXwwKSxDST0wfG8oKSxQPTB8UWcodEE8PDF8MCwwfChmQT0oKHRBPDwxfDApPDApPDwzMT4+MzEpLDB8QUEsKCgwfEFBKTwwKTw8MzE+PjMxfDApLFpBPTB8bygpLHE9MHxRZygwfEVBLCgoMHxFQSk8MCk8PDMxPj4zMXwwLHRBPDwxfDAsMHxmQSksVD0wfG8oKSxqPTB8UWcoMHxRQSwoKDB8UUEpPDApPDwzMT4+MzF8MCx0QTw8MXwwLDB8ZkEpLFg9MHxvKCksbT0wfFFnKDB8TUEsKCgwfE1BKTwwKTw8MzE+PjMxfDAsdEE8PDF8MCwwfGZBKSwkQT0wfG8oKSxNPTB8UWcoMHxuQSwoKDB8bkEpPDApPDwzMT4+MzF8MCx0QTw8MXwwLDB8ZkEpLFZBPTB8bygpLHA9MHxRZygwfFRBLCgoMHxUQSk8MCk8PDMxPj4zMXwwLHRBPDwxfDAsMHxmQSksUkE9MHxvKCksZj0wfFFnKDB8SUEsKCgwfElBKTwwKTw8MzE+PjMxfDAsdEE8PDF8MCwwfGZBKSxHQT0wfG8oKSxlPTB8UWcoMHxfQSwoKDB8X0EpPDApPDwzMT4+MzF8MCx0QTw8MXwwLDB8ZkEpLHBBPTB8bygpLGZBPTB8UWcoMHxGQSwoKDB8RkEpPDApPDwzMT4+MzF8MCx0QTw8MXwwLDB8ZkEpLHRBPTB8bygpLFhBPTB8UWcoQUE8PDF8MCwwfChlQT0oKEFBPDwxfDApPDApPDwzMT4+MzEpLDB8QUEsKCgwfEFBKTwwKTw8MzE+PjMxfDApLGpBPTB8bygpLHZBPTB8UWcoQUE8PDF8MCwwfGVBLDB8RUEsKCgwfEVBKTwwKTw8MzE+PjMxfDApLGJBPTB8bygpLEs9MHxRZyhRQTw8MXwwLDB8KHJBPSgoUUE8PDF8MCk8MCk8PDMxPj4zMSksQUE8PDF8MCwwfGVBKSx4PTB8bygpLHY9MHxRZygwfE1BLCgoMHxNQSk8MCk8PDMxPj4zMXwwLEFBPDwxfDAsMHxlQSksVT0wfG8oKSx1PTB8UWcobkE8PDF8MCwoKG5BPDwxfDApPDApPDwzMT4+MzF8MCxBQTw8MXwwLDB8ZUEpLE5BPTB8bygpLHc9MHxRZygwfFRBLCgoMHxUQSk8MCk8PDMxPj4zMXwwLEFBPDwxfDAsMHxlQSksZEE9MHxvKCksYz0wfFFnKElBPDwxfDAsKChJQTw8MXwwKTwwKTw8MzE+PjMxfDAsQUE8PDF8MCwwfGVBKSx1QT0wfG8oKSxnPTB8UWcoMHxfQSwoKDB8X0EpPDApPDwzMT4+MzF8MCxBQTw8MXwwLDB8ZUEpLHdBPTB8bygpLGVBPTB8UWcoMzgqRkF8MCwwfChEQT0oKDM4KkZBfDApPDApPDwzMT4+MzEpLEFBPDwxfDAsMHxlQSksQUE9MHxvKCksTD0wfFFnKDB8RUEsKCgwfEVBKTwwKTw8MzE+PjMxfDAsMHxFQSwoKDB8RUEpPDApPDwzMT4+MzF8MCksQUk9MHxvKCksUz0wfFFnKEVBPDwxfDAsKChFQTw8MXwwKTwwKTw8MzE+PjMxfDAsMHxRQSwoKDB8UUEpPDApPDwzMT4+MzF8MCksekE9MHxvKCksSD0wfFFnKDB8TUEsKCgwfE1BKTwwKTw8MzE+PjMxfDAsRUE8PDF8MCwoKEVBPDwxfDApPDApPDwzMT4+MzF8MCksbUE9MHxvKCksaD0wfFFnKDB8bkEsKCgwfG5BKTwwKTw8MzE+PjMxfDAsRUE8PDF8MCwoKEVBPDwxfDApPDApPDwzMT4+MzF8MCkscz0wfG8oKSx0PTB8UWcoMHxUQSwoKDB8VEEpPDApPDwzMT4+MzF8MCxFQTw8MXwwLCgoRUE8PDF8MCk8MCk8PDMxPj4zMXwwKSxyPTB8bygpLEI9MHxRZygwfElBLCgoMHxJQSk8MCk8PDMxPj4zMXwwLEVBPDwxfDAsKChFQTw8MXwwKTwwKTw8MzE+PjMxfDApLHlBPTB8bygpLFY9MHxRZygxOSpfQXwwLDB8KFBBPSgoMTkqX0F8MCk8MCk8PDMxPj4zMSksRUE8PDF8MCwoKEVBPDwxfDApPDApPDwzMT4+MzF8MCksSUk9MHxvKCksRUE9MHxRZygzOCpGQXwwLDB8REEsMHxFQSwoKDB8RUEpPDApPDwzMT4+MzF8MCksaUE9MHxvKCksbD0wfFFnKFFBPDwxfDAsMHxyQSwwfFFBLCgoMHxRQSk8MCk8PDMxPj4zMXwwKSxrPTB8bygpLHk9MHxRZyhRQTw8MXwwLDB8ckEsMHxNQSwoKDB8TUEpPDApPDwzMT4+MzF8MCksWUE9MHxvKCksYT0wfFFnKG5BPDwxfDAsKChuQTw8MXwwKTwwKTw8MzE+PjMxfDAsUUE8PDF8MCwwfHJBKSxIQT0wfG8oKSxpPTB8UWcoMHxUQSwoKDB8VEEpPDApPDwzMT4+MzF8MCxRQTw8MXwwLDB8ckEpLEU9MHxvKCksej0wfFFnKDM4KklBfDAsMHwoaEE9KCgzOCpJQXwwKTwwKTw8MzE+PjMxKSxRQTw8MXwwLDB8ckEpLGdJPTB8bygpLGI9MHxRZygxOSpfQXwwLDB8UEEsUUE8PDF8MCwwfHJBKSxXQT0wfG8oKSxyQT0wfFFnKDM4KkZBfDAsMHxEQSxRQTw8MXwwLDB8ckEpLFFBPTB8bygpLG49MHxRZygwfE1BLCgoMHxNQSk8MCk8PDMxPj4zMXwwLDB8TUEsKCgwfE1BKTwwKTw8MzE+PjMxfDApLGtBPTB8bygpLFE9MHxRZyhNQTw8MXwwLCgoTUE8PDF8MCk8MCk8PDMxPj4zMXwwLDB8bkEsKCgwfG5BKTwwKTw8MzE+PjMxfDApLHNBPTB8bygpLFc9MHxRZygxOSpUQXwwLCgoMTkqVEF8MCk8MCk8PDMxPj4zMXwwLE1BPDwxfDAsKChNQTw8MXwwKTwwKTw8MzE+PjMxfDApLEJJPTB8bygpLEo9MHxRZygzOCpJQXwwLDB8aEEsMHxNQSwoKDB8TUEpPDApPDwzMT4+MzF8MCksT0E9MHxvKCksXz0wfFFnKDE5Kl9BfDAsMHxQQSxNQTw8MXwwLCgoTUE8PDF8MCk8MCk8PDMxPj4zMXwwKSxMQT0wfG8oKSxNQT0wfFFnKDM4KkZBfDAsMHxEQSwwfE1BLCgoMHxNQSk8MCk8PDMxPj4zMXwwKSxCQT0wfG8oKSwkPTB8UWcoMzgqbkF8MCwoKDM4Km5BfDApPDApPDwzMT4+MzF8MCwwfG5BLCgoMHxuQSk8MCk8PDMxPj4zMXwwKSxaPTB8bygpLE49MHxRZygxOSpUQXwwLCgoMTkqVEF8MCk8MCk8PDMxPj4zMXwwLG5BPDwxfDAsKChuQTw8MXwwKTwwKTw8MzE+PjMxfDApLFI9MHxvKCksRz0wfFFnKDM4KklBfDAsMHxoQSxuQTw8MXwwLCgobkE8PDF8MCk8MCk8PDMxPj4zMXwwKSx4QT0wfG8oKSxEPTB8UWcoMTkqX0F8MCwwfFBBLG5BPDwxfDAsKChuQTw8MXwwKTwwKTw8MzE+PjMxfDApLFNBPTB8bygpLG5BPTB8UWcoMzgqRkF8MCwwfERBLG5BPDwxfDAsKChuQTw8MXwwKTwwKTw8MzE+PjMxfDApLGdBPTB8bygpLGQ9MHxRZygxOSpUQXwwLCgoMTkqVEF8MCk8MCk8PDMxPj4zMXwwLDB8VEEsKCgwfFRBKTwwKTw8MzE+PjMxfDApLEtBPTB8bygpLEY9MHxRZygzOCpJQXwwLDB8aEEsMHxUQSwoKDB8VEEpPDApPDwzMT4+MzF8MCksVUE9MHxvKCksb0E9MHxRZygxOSpfQXwwLDB8UEEsVEE8PDF8MCwoKFRBPDwxfDApPDApPDwzMT4+MzF8MCksY0E9MHxvKCksVEE9MHxRZygzOCpGQXwwLDB8REEsMHxUQSwoKDB8VEEpPDApPDwzMT4+MzF8MCksQ0E9MHxvKCksaEE9MHxRZygzOCpJQXwwLDB8aEEsMHxJQSwoKDB8SUEpPDApPDwzMT4+MzF8MCksYUE9MHxvKCksWT0wfFFnKDE5Kl9BfDAsMHxQQSxJQTw8MXwwLCgoSUE8PDF8MCk8MCk8PDMxPj4zMXwwKSxxQT0wfG8oKSxJPTB8UWcoMzgqRkF8MCwwfERBLElBPDwxfDAsKChJQTw8MXwwKTwwKTw8MzE+PjMxfDApLElBPTB8bygpLFBBPTB8UWcoMTkqX0F8MCwwfFBBLDB8X0EsKCgwfF9BKTwwKTw8MzE+PjMxfDApLEpBPTB8bygpLF9BPTB8UWcoMzgqRkF8MCwwfERBLDB8X0EsKCgwfF9BKTwwKTw8MzE+PjMxfDApLGxBPTB8bygpLEZBPTB8UWcoMzgqRkF8MCwwfERBLDB8RkEsKCgwfEZBKTwwKTw8MzE+PjMxfDApLERBPTB8bygpLEFBPTB8dmcoMHwoSUk9MHx2ZygwfChnST0wfHZnKDB8KEJJPTB8dmcoMHwoQ0k9MHx2ZygwfCQsMHxaLDB8TywwfENJKSksMHxvKCksMHxXLDB8QkkpKSwwfG8oKSwwfHosMHxnSSkpLDB8bygpLDB8ViwwfElJKSksMHxvKCksMHxlQSwwfEFBKSxlQT0wfG8oKSxqQT0wfHZnKDB8cSwwfFQsMHxYQSwwfGpBKSxYQT0wfG8oKSxiQT0wfHZnKDB8aiwwfFgsMHx2QSwwfGJBKSx2QT0wfG8oKSxnQT0wfHZnKDB8KGNBPTB8dmcoMHwoYUE9MHx2ZygwfCgkQT0wfHZnKDB8KEFJPTB8dmcoMHxLLDB8eCwwfEwsMHxBSSkpLDB8bygpLDB8bSwwfCRBKSksMHxvKCksMHxoQSwwfGFBKSksMHxvKCksMHxvQSwwfGNBKSksMHxvKCksMHxuQSwwfGdBKSxuQT0wfG8oKSxhQT0wfGlnKDB8KGNBPTB8dmcoMHxBQSwwfGVBLDMzNTU0NDMyLDApKSwwfChvQT0wfG8oKSksMjYpLGhBPTB8bygpLGhBPTB8dmcoMHwoaUE9MHx2ZygwfChXQT0wfHZnKDB8KE9BPTB8dmcoMHwoWkE9MHx2ZygwfE4sMHxSLDB8UCwwfFpBKSksMHxvKCksMHxKLDB8T0EpKSwwfG8oKSwwfGIsMHxXQSkpLDB8bygpLDB8RUEsMHxpQSkpLDB8bygpLDB8YUEsMHxoQSksYUE9MHxvKCksb0E9MHxVZygwfEFBLDB8ZUEsLTY3MTA4ODY0JmNBfDAsMHxvQSksY0E9MHxvKCksaUE9MHxpZygwfChlQT0wfHZnKDB8Z0EsMHxuQSwzMzU1NDQzMiwwKSksMHwoQUE9MHxvKCkpLDI2KSxFQT0wfG8oKSxFQT0wfHZnKDB8KENBPTB8dmcoMHwocUE9MHx2ZygwfChWQT0wfHZnKDB8KHpBPTB8dmcoMHx2LDB8VSwwfFMsMHx6QSkpLDB8bygpLDB8TSwwfFZBKSksMHxvKCksMHxZLDB8cUEpKSwwfG8oKSwwfFRBLDB8Q0EpKSwwfG8oKSwwfGlBLDB8RUEpLGlBPTB8bygpLEFBPTB8VWcoMHxnQSwwfG5BLC02NzEwODg2NCZlQXwwLDB8QUEpLGVBPTB8bygpLGdBPTB8aWcoMHwobkE9MHx2ZygwfGhBLDB8YUEsMTY3NzcyMTYsMCkpLDB8bygpLDI1KSxDQT0wfG8oKSxDQT0wfHZnKDB8KFFBPTB8dmcoMHwoTEE9MHx2ZygwfCh4QT0wfHZnKDB8KEtBPTB8dmcoMHxqQSwwfFhBLDB8ZCwwfEtBKSksMHxvKCksMHxHLDB8eEEpKSwwfG8oKSwwfF8sMHxMQSkpLDB8bygpLDB8ckEsMHxRQSkpLDB8bygpLDB8Z0EsMHxDQSksZ0E9MHxvKCksbkE9MHxVZygwfGhBLDB8YUEsLTMzNTU0NDMyJm5BfDAsMCksYUE9MHxvKCksUUE9MHxpZygwfChoQT0wfHZnKDB8RUEsMHxpQSwxNjc3NzIxNiwwKSksMHxvKCksMjUpLHJBPTB8bygpLHJBPTB8dmcoMHwoSUE9MHx2ZygwfChKQT0wfHZnKDB8KFJBPTB8dmcoMHwoTkE9MHx2ZygwfChtQT0wfHZnKDB8bCwwfGssMHxILDB8bUEpKSwwfG8oKSwwfHUsMHxOQSkpLDB8bygpLDB8cCwwfFJBKSksMHxvKCksMHxQQSwwfEpBKSksMHxvKCksMHxJLDB8SUEpKSwwfG8oKSwwfFFBLDB8ckEpLFFBPTB8bygpLGhBPTB8VWcoMHxFQSwwfGlBLC0zMzU1NDQzMiZoQXwwLDApLGlBPTB8bygpLElBPTB8aWcoMHwoRUE9MHx2ZygwfENBLDB8Z0EsMzM1NTQ0MzIsMCkpLDB8bygpLDI2KSxJPTB8bygpLEk9MHx2ZygwfChCQT0wfHZnKDB8KFNBPTB8dmcoMHwoVUE9MHx2ZygwfGJBLDB8dkEsMHxGLDB8VUEpKSwwfG8oKSwwfEQsMHxTQSkpLDB8bygpLDB8TUEsMHxCQSkpLDB8bygpLDB8SUEsMHxJKSxJQT0wfG8oKSxFQT0wfFVnKDB8Q0EsMHxnQSwtNjcxMDg4NjQmRUF8MCwwKSxvKCksQ0E9MHxpZygwfChnQT0wfHZnKDB8ckEsMHxRQSwzMzU1NDQzMiwwKSksMHxvKCksMjYpLEJBPTB8bygpLEJBPTB8dmcoMHwobEE9MHx2ZygwfChHQT0wfHZnKDB8KGRBPTB8dmcoMHwoWUE9MHx2ZygwfGgsMHxzLDB8eSwwfFlBKSksMHxvKCksMHx3LDB8ZEEpKSwwfG8oKSwwfGYsMHxHQSkpLDB8bygpLDB8X0EsMHxsQSkpLDB8bygpLDB8Q0EsMHxCQSksQ0E9MHxvKCksZ0E9MHxVZygwfHJBLDB8UUEsLTY3MTA4ODY0JmdBfDAsMCksbygpLGVBPTB8dmcoMHwockE9MHxpZygwfChRQT0wfHZnKDB8SSwwfElBLDE2Nzc3MjE2LDApKSwwfG8oKSwyNSkpLDB8bygpLDB8QUEsMHxlQSksQUE9MHxvKCksUUE9MHxVZygwfEksMHxJQSwtMzM1NTQ0MzImUUF8MCwwKSxvKCksST0wfGlnKDB8KElBPTB8dmcoMHxCQSwwfENBLDE2Nzc3MjE2LDApKSwwfG8oKSwyNSksckE9MHxvKCksckE9MHx2ZygwfChEQT0wfHZnKDB8KHBBPTB8dmcoMHwodUE9MHx2ZygwfChIQT0wfHZnKDB8KGtBPTB8dmcoMHx0LDB8ciwwfG4sMHxrQSkpLDB8bygpLDB8YSwwfEhBKSksMHxvKCksMHxjLDB8dUEpKSwwfG8oKSwwfGUsMHxwQSkpLDB8bygpLDB8RkEsMHxEQSkpLDB8bygpLDB8SSwwfHJBKSxJPTB8bygpLElBPTB8VWcoMHxCQSwwfENBLC0zMzU1NDQzMiZJQXwwLDApLG8oKSxCQT0wfHZnKDB8aEEsMHxpQSwwfChCQT0wfHlnKDB8KENBPTB8dmcoMHxlQSwwfEFBLDMzNTU0NDMyLDApKSwwfG8oKSwyNikpLDB8bygpKSxvKCksQ0E9MHxVZygwfGVBLDB8QUEsLTY3MTA4ODY0JkNBfDAsMCksbygpLGVBPTB8aWcoMHwoQUE9MHx2ZygwfHJBLDB8SSwzMzU1NDQzMiwwKSksMHxvKCksMjYpLGlBPTB8bygpLGlBPTB8dmcoMHwodEE9MHx2ZygwfCh3QT0wfHZnKDB8KHlBPTB8dmcoMHwoc0E9MHx2ZygwfGksMHxFLDB8USwwfHNBKSksMHxvKCksMHxCLDB8eUEpKSwwfG8oKSwwfGcsMHx3QSkpLDB8bygpLDB8ZkEsMHx0QSkpLDB8bygpLDB8ZUEsMHxpQSksZUE9MHxvKCksQUE9MHxVZygwfHJBLDB8SSwtNjcxMDg4NjQmQUF8MCwwKSxvKCksY0E9MHx2ZygwfChyQT0wfFFnKDB8KHJBPTB8aWcoMHwoST0wfHZnKDB8aUEsMHxlQSwxNjc3NzIxNiwwKSksMHxvKCksMjUpKSwwfG8oKSwxOSwwKSksMHxvKCksMHxvQSwwfGNBKSxvQT0wfG8oKSxJPTB8VWcoMHxpQSwwfGVBLC0zMzU1NDQzMiZJfDAsMCksbygpLGlBPTB8dmcoMHxuQSwwfGFBLDB8KGlBPTB8eWcoMHwoZUE9MHx2ZygwfGNBLDB8b0EsMzM1NTQ0MzIsMCkpLDB8bygpLDI2KSksMHxvKCkpLG8oKSxlQT0wfFVnKDB8Y0EsMHxvQSwtNjcxMDg4NjQmZUF8MCwwKSxvKCksQ1tBPj4yXT1lQSxDW0ErND4+Ml09aUEsQ1tBKzg+PjJdPUVBLENbQSsxMj4+Ml09UUEsQ1tBKzE2Pj4yXT1DQSxDW0ErMjA+PjJdPUJBLENbQSsyND4+Ml09Z0EsQ1tBKzI4Pj4yXT1JQSxDW0ErMzI+PjJdPUFBLENbQSszNj4+Ml09SX1mdW5jdGlvbiBHKEEsSSxnLEIsQyl7QXw9MCxJfD0wLGd8PTAsQnw9MDt2YXIgRT0wLGk9MCxlPTAsYz0wLGE9MCxuPTAscj0wLHQ9MCxmPTAsdz0wLHk9MCxzPTAsaD0wLEQ9MCxGPTAscD0wLHU9MDtpZihuPTB8cUkoQ3w9MCksdD0wfG8oKSxFPTB8cUkoQys4fDApLGk9MHxvKCksQj0wfHJnKDB8ZywwfEIsNTYpLEM9MHxvKCksKEkrZysoMC0oNyZnKSl8MCk9PSgwfEkpKXk9MjAzNzY3MTI4M15FLGU9MTk1MjgwMTg5MF5pLHc9MTg4NjYxMDgwNV5uLHI9MTkzNjY4MjM0MV50LGE9MTg1MjA3NTg4NV5FLGM9MTY4NTAyNTM3N15pLEY9MTg1MjE0MjE3N15uLEU9MTgxOTg5NTY1M150LGk9STtlbHNlIGZvcihEPTIwMzc2NzEyODNeRSxlPTE5NTI4MDE4OTBeaSx5PTE4ODY2MTA4MDVebixyPTE5MzY2ODIzNDFedCxhPTE4NTIwNzU4ODVeRSxjPTE2ODUwMjUzNzdeaSxpPTE4NTIxNDIxNzdebixFPTE4MTk4OTU2NTNedCx3PUk7Oyl7aWYodT0ocz0wfHFJKHcpKV5ELGVePWg9MHxvKCksRj0wfHZnKDB8eSwwfHIsMHxhLDB8YyksRD0wfG8oKSxuPTB8JEkoYSxjLDEzKSxhPSgwfG8oKSleRCxjPTB8JEkoRixELDMyKSxEPTB8bygpLHQ9MHx2ZygwfHUsMHxlLDB8aSwwfEUpLGY9MHxvKCksRD0wfHZnKChlPTB8JEkodSxlLDE2KSledHwwLDB8KGk9KDB8bygpKV5mKSwwfGMsMHxEKSxjPTB8bygpLGk9MHwkSShlXnQsaSwyMSksZT1jXigwfG8oKSksZj0wfHZnKDB8dCwwfGYsbl5GfDAsMHxhKSx0PTB8bygpLGE9MHwkSShuXkYsYSwxNyksRT0oMHxvKCkpXnQsdD0wfCRJKGYsdCwzMiksRj0wfG8oKSxjPTB8dmcoYV5mfDAsMHxFLDB8RCwwfGMpLG49MHxvKCksRT0wfCRJKGFeZixFLDEzKSxmPSgwfG8oKSlebixuPTB8JEkoYyxuLDMyKSxhPTB8bygpLEY9MHx2ZygwfHQsMHxGLEReaXwwLDB8ZSksdD0wfG8oKSxhPTB8dmcoKGU9MHwkSShEXmksZSwxNikpXkZ8MCwwfChpPSgwfG8oKSledCksMHxuLDB8YSksbj0wfG8oKSxpPTB8JEkoZV5GLGksMjEpLGU9bl4oMHxvKCkpLHQ9MHx2ZyhFXmN8MCwwfGYsMHxGLDB8dCksRj0wfG8oKSxmPTB8JEkoRV5jLGYsMTcpLGM9KDB8bygpKV5GLEY9MHwkSSh0LEYsMzIpLEU9MHxvKCksKDB8KHc9dys4fDApKT09KEkrZysoMC0oNyZnKSl8MCkpe3k9YV5pLHc9YV5zLHI9bl5oLGE9Zl50LGk9SStnKygwLSg3JmcpKXwwO2JyZWFrfUQ9YV5pLHk9YV5zLHI9bl5oLGE9Zl50LGk9Rn1zd2l0Y2goNyZnKXtjYXNlIDc6cD0wfHJnKDB8UVtpKzY+PjBdLDAsNDgpLEM9MHxvKCl8QyxCfD1wLHA9NjticmVhaztjYXNlIDY6cD02O2JyZWFrO2Nhc2UgNTpwPTc7YnJlYWs7Y2FzZSA0OnA9ODticmVhaztjYXNlIDM6cD05O2JyZWFrO2Nhc2UgMjpwPTEwO2JyZWFrO2Nhc2UgMTpwPTExfTY9PSgwfHApJiYodT0wfHJnKDB8UVtpKzU+PjBdLDAsNDApLEM9MHxvKCl8QyxCfD11LHA9NyksNz09KDB8cCkmJihDPTB8UVtpKzQ+PjBdfEMscD04KSw4PT0oMHxwKSYmKEJ8PXU9MHxyZygwfFFbaSszPj4wXSwwLDI0KSxDPTB8bygpfEMscD05KSw5PT0oMHxwKSYmKEJ8PXU9MHxyZygwfFFbaSsyPj4wXSwwLDE2KSxDPTB8bygpfEMscD0xMCksMTA9PSgwfHApJiYoQnw9dT0wfHJnKDB8UVtpKzE+PjBdLDAsOCksQz0wfG8oKXxDLHA9MTEpLDExPT0oMHxwKSYmKEI9MHxCfFFbaT4+MF0pLGc9Ql55LGg9Q15lLHc9MHx2ZygwfHcsMHxyLDB8YSwwfGMpLHk9MHxvKCkscz0wfCRJKGEsYywxMyksST0oMHxvKCkpXnkseT0wfCRJKHcseSwzMikscD0wfG8oKSxGPTB8dmcoMHxnLDB8aCwwfEYsMHxFKSx1PTB8bygpLHA9MHx2ZygoaD0wfCRJKGcsaCwxNikpXkZ8MCwwfChnPSgwfG8oKSledSksMHx5LDB8cCkseT0wfG8oKSxnPTB8JEkoaF5GLGcsMjEpLGg9eV4oMHxvKCkpLHU9MHx2ZygwfEYsMHx1LHNed3wwLDB8SSksRj0wfG8oKSxJPTB8JEkoc153LEksMTcpLHc9KDB8bygpKV5GLEY9MHwkSSh1LEYsMzIpLHM9MHxvKCkseT0wfHZnKEledXwwLDB8dywwfHAsMHx5KSxEPTB8bygpLHc9MHwkSShJXnUsdywxMyksdT0oMHxvKCkpXkQsRD0wfCRJKHksRCwzMiksST0wfG8oKSxzPTB8dmcoMHxGLDB8cyxwXmd8MCwwfGgpLEY9MHxvKCksST0wfHZnKChoPTB8JEkocF5nLGgsMTYpKV5zfDAsMHwoZz0oMHxvKCkpXkYpLDB8RCwwfEkpLEQ9MHxvKCksZz0wfCRJKGhecyxnLDIxKSxoPUReKDB8bygpKSxGPTB8dmcod155fDAsMHx1LDB8cywwfEYpLHM9MHxvKCksdT0wfCRJKHdeeSx1LDE3KSx5PSgwfG8oKSlecyxzPTB8JEkoRixzLDMyKSx3PTB8bygpLEQ9MHx2ZyhJXkJ8MCxEXkN8MCx1XkZ8MCwwfHkpLHA9MHxvKCkseT0wfCRJKHVeRix5LDEzKSxGPSgwfG8oKSlecCxwPTB8JEkoRCxwLDMyKSx1PTB8bygpLHc9MHx2ZygyNTVec3wwLDB8dyxJXmd8MCwwfGgpLHM9MHxvKCksdT0wfHZnKChoPTB8JEkoSV5nLGgsMTYpKV53fDAsMHwoZz0oMHxvKCkpXnMpLDB8cCwwfHUpLHA9MHxvKCksZz0wfCRJKGhedyxnLDIxKSxoPXBeKDB8bygpKSxzPTB8dmcoMHx3LDB8cyx5XkR8MCwwfEYpLHc9MHxvKCksRj0wfCRJKHleRCxGLDE3KSxEPSgwfG8oKSledyx3PTB8JEkocyx3LDMyKSx5PTB8bygpLHA9MHx2ZyhGXnN8MCwwfEQsMHx1LDB8cCksST0wfG8oKSxEPTB8JEkoRl5zLEQsMTMpLHM9KDB8bygpKV5JLEk9MHwkSShwLEksMzIpLEY9MHxvKCkseT0wfHZnKDB8dywwfHksdV5nfDAsMHxoKSx3PTB8bygpLEY9MHx2ZygoaD0wfCRJKHVeZyxoLDE2KSleeXwwLDB8KGc9KDB8bygpKV53KSwwfEksMHxGKSxJPTB8bygpLGc9MHwkSShoXnksZywyMSksaD1JXigwfG8oKSksdz0wfHZnKERecHwwLDB8cywwfHksMHx3KSx5PTB8bygpLHM9MHwkSShEXnAscywxNykscD0oMHxvKCkpXnkseT0wfCRJKHcseSwzMiksRD0wfG8oKSxJPTB8dmcoc153fDAsMHxwLDB8RiwwfEkpLHU9MHxvKCkscD0wfCRJKHNedyxwLDEzKSx3PSgwfG8oKSledSx1PTB8JEkoSSx1LDMyKSxzPTB8bygpLEQ9MHx2ZygwfHksMHxELEZeZ3wwLDB8aCkseT0wfG8oKSxzPTB8dmcoKGg9MHwkSShGXmcsaCwxNikpXkR8MCwwfChnPSgwfG8oKSleeSksMHx1LDB8cyksdT0wfG8oKSxnPTB8JEkoaF5ELGcsMjEpLGg9dV4oMHxvKCkpLHk9MHx2ZyhwXkl8MCwwfHcsMHxELDB8eSksRD0wfG8oKSx3PTB8JEkocF5JLHcsMTcpLEk9KDB8bygpKV5ELEQ9MHwkSSh5LEQsMzIpLHA9MHxvKCksdT0wfHZnKHdeeXwwLDB8SSwwfHMsMHx1KSxGPTB8bygpLEk9MHwkSSh3XnksSSwxMyksRj0oMHxvKCkpXkYscD0wfHZnKDB8RCwwfHAsc15nfDAsMHxoKSxEPTB8bygpLGg9MHwkSSgoaD0wfCRJKHNeZyxoLDE2KSlecCwoMHxvKCkpXkQsMjEpLGc9MHxvKCksRD0wfHZnKEledXwwLDB8RiwwfHAsMHxEKSxwPTB8bygpLEY9MHwkSShJXnUsRiwxNyksdT0wfG8oKSxMSShBLGheRF5GXihJPTB8JEkoRCxwLDMyKSksZ15wXnVeKDB8bygpKSl9ZnVuY3Rpb24gZChBKXt2YXIgST0wLGc9MCxCPTAsUT0wLEU9MCxpPTAsZT0wLG89MCxjPTA7aWYoQXw9MCl7ST0wfENbODY4M10sYz1BKy04KygtOCYoZz0wfENbQSstND4+Ml0pKXwwO2Rve2lmKDEmZyllPUErLTh8MCxvPUErLTh8MCxBPS04Jmc7ZWxzZXtpZihCPTB8Q1tBKy04Pj4yXSwhKDMmZykpcmV0dXJuO2lmKGk9QisoLTgmZyl8MCwoRT1BKy04KygwLUIpfDApPj4+MDxJPj4+MClyZXR1cm47aWYoKDB8Q1s4Njg0XSk9PSgwfEUpKXtpZigzIT0oMyYoQT0wfENbYys0Pj4yXSl8MCkpe2U9RSxvPUUsQT1pO2JyZWFrfXJldHVybiBDWzg2ODFdPWksQ1tjKzQ+PjJdPS0yJkEsQ1tFKzQ+PjJdPTF8aSx2b2lkKENbRStpPj4yXT1pKX1pZihCPj4+MDwyNTYpe2lmKEE9MHxDW0UrOD4+Ml0sKDB8KEk9MHxDW0UrMTI+PjJdKSk9PSgwfEEpKXtDWzg2NzldPUNbODY3OV0mfigxPDwoQj4+PjMpKSxlPUUsbz1FLEE9aTticmVha31DW0ErMTI+PjJdPUksQ1tJKzg+PjJdPUEsZT1FLG89RSxBPWk7YnJlYWt9UT0wfENbRSsyND4+Ml0sQT0wfENbRSsxMj4+Ml07ZG97aWYoKDB8QSk9PSgwfEUpKXtpZihBPTB8Q1tFKzE2KzQ+PjJdKUk9RSsxNis0fDA7ZWxzZXtpZighKEE9MHxDW0UrMTY+PjJdKSl7QT0wO2JyZWFrfUk9RSsxNnwwfWZvcig7OylpZihnPTB8Q1soQj1BKzIwfDApPj4yXSlBPWcsST1CO2Vsc2V7aWYoIShnPTB8Q1soQj1BKzE2fDApPj4yXSkpYnJlYWs7QT1nLEk9Qn1DW0k+PjJdPTB9ZWxzZSBvPTB8Q1tFKzg+PjJdLENbbysxMj4+Ml09QSxDW0ErOD4+Ml09b313aGlsZSgwKTtpZihRKXtpZihJPTB8Q1tFKzI4Pj4yXSwoMHxDWzM1MDIwKyhJPDwyKT4+Ml0pPT0oMHxFKSl7aWYoQ1szNTAyMCsoSTw8Mik+PjJdPUEsIUEpe0NbODY4MF09Q1s4NjgwXSZ+KDE8PEkpLGU9RSxvPUUsQT1pO2JyZWFrfX1lbHNlIGlmKENbKCgwfENbUSsxNj4+Ml0pPT0oMHxFKT9RKzE2fDA6USsyMHwwKT4+Ml09QSwhQSl7ZT1FLG89RSxBPWk7YnJlYWt9Q1tBKzI0Pj4yXT1RLDB8KEk9MHxDW0UrMTY+PjJdKSYmKENbQSsxNj4+Ml09SSxDW0krMjQ+PjJdPUEpLChJPTB8Q1tFKzE2KzQ+PjJdKT8oQ1tBKzIwPj4yXT1JLENbSSsyND4+Ml09QSxlPUUsbz1FLEE9aSk6KGU9RSxvPUUsQT1pKX1lbHNlIGU9RSxvPUUsQT1pfX13aGlsZSgwKTtpZighKGU+Pj4wPj1jPj4+MCkmJjEmKGc9MHxDW2MrND4+Ml0pKXtpZigyJmcpQ1tjKzQ+PjJdPS0yJmcsQ1tvKzQ+PjJdPTF8QSxDW2UrQT4+Ml09QSxRPUE7ZWxzZXtpZigoMHxDWzg2ODVdKT09KDB8Yykpe2lmKGM9KDB8Q1s4NjgyXSkrQXwwLENbODY4Ml09YyxDWzg2ODVdPW8sQ1tvKzQ+PjJdPTF8YywoMHxvKSE9KDB8Q1s4Njg0XSkpcmV0dXJuO3JldHVybiBDWzg2ODRdPTAsdm9pZChDWzg2ODFdPTApfWlmKCgwfENbODY4NF0pPT0oMHxjKSlyZXR1cm4gYz0oMHxDWzg2ODFdKStBfDAsQ1s4NjgxXT1jLENbODY4NF09ZSxDW28rND4+Ml09MXxjLHZvaWQoQ1tlK2M+PjJdPWMpO1E9KC04JmcpK0F8MDtkb3tpZihnPj4+MDwyNTYpe2lmKEk9MHxDW2MrOD4+Ml0sKDB8KEE9MHxDW2MrMTI+PjJdKSk9PSgwfEkpKXtDWzg2NzldPUNbODY3OV0mfigxPDwoZz4+PjMpKTticmVha31DW0krMTI+PjJdPUEsQ1tBKzg+PjJdPUk7YnJlYWt9RT0wfENbYysyND4+Ml0sQT0wfENbYysxMj4+Ml07ZG97aWYoKDB8QSk9PSgwfGMpKXtpZihBPTB8Q1tjKzE2KzQ+PjJdKUk9YysxNis0fDA7ZWxzZXtpZighKEE9MHxDW2MrMTY+PjJdKSl7ST0wO2JyZWFrfUk9YysxNnwwfWZvcig7OylpZihnPTB8Q1soQj1BKzIwfDApPj4yXSlBPWcsST1CO2Vsc2V7aWYoIShnPTB8Q1soQj1BKzE2fDApPj4yXSkpYnJlYWs7QT1nLEk9Qn1DW0k+PjJdPTAsST1BfWVsc2UgST0wfENbYys4Pj4yXSxDW0krMTI+PjJdPUEsQ1tBKzg+PjJdPUksST1BfXdoaWxlKDApO2lmKDB8RSl7aWYoQT0wfENbYysyOD4+Ml0sKDB8Q1szNTAyMCsoQTw8Mik+PjJdKT09KDB8Yykpe2lmKENbMzUwMjArKEE8PDIpPj4yXT1JLCFJKXtDWzg2ODBdPUNbODY4MF0mfigxPDxBKTticmVha319ZWxzZSBpZihDWygoMHxDW0UrMTY+PjJdKT09KDB8Yyk/RSsxNnwwOkUrMjB8MCk+PjJdPUksIUkpYnJlYWs7Q1tJKzI0Pj4yXT1FLDB8KEE9MHxDW2MrMTY+PjJdKSYmKENbSSsxNj4+Ml09QSxDW0ErMjQ+PjJdPUkpLDB8KEE9MHxDW2MrMTYrND4+Ml0pJiYoQ1tJKzIwPj4yXT1BLENbQSsyND4+Ml09SSl9fXdoaWxlKDApO2lmKENbbys0Pj4yXT0xfFEsQ1tlK1E+PjJdPVEsKDB8byk9PSgwfENbODY4NF0pKXJldHVybiB2b2lkKENbODY4MV09USl9aWYoZz1RPj4+MyxRPj4+MDwyNTYpcmV0dXJuKEE9MHxDWzg2NzldKSYxPDxnPyhBPTM0NzU2KyhnPDwxPDwyKSs4fDAsST0wfENbMzQ3NTYrKGc8PDE8PDIpKzg+PjJdKTooQ1s4Njc5XT1BfDE8PGcsQT0zNDc1NisoZzw8MTw8MikrOHwwLEk9MzQ3NTYrKGc8PDE8PDIpfDApLENbQT4+Ml09byxDW0krMTI+PjJdPW8sQ1tvKzg+PjJdPUksdm9pZChDW28rMTI+PjJdPTM0NzU2KyhnPDwxPDwyKSk7ST0zNTAyMCsoKEI9KEE9UT4+PjgpP1E+Pj4wPjE2Nzc3MjE1PzMxOlE+Pj4oNysoQj0xNC0oKDUyMDE5MisoQTw8KChBKzEwNDgzMjB8MCk+Pj4xNiY4KSl8MCk+Pj4xNiY0fChBKzEwNDgzMjB8MCk+Pj4xNiY4fCgyNDU3NjArKEI9QTw8KChBKzEwNDgzMjB8MCk+Pj4xNiY4KTw8KCg1MjAxOTIrKEE8PCgoQSsxMDQ4MzIwfDApPj4+MTYmOCkpfDApPj4+MTYmNCkpfDApPj4+MTYmMikrKEI8PCgoQisyNDU3NjB8MCk+Pj4xNiYyKT4+PjE1KXwwKXwwKSYxfEI8PDE6MCk8PDIpfDAsQ1tvKzI4Pj4yXT1CLENbbysyMD4+Ml09MCxDW28rMTY+PjJdPTAsQT0wfENbODY4MF0sZz0xPDxCO0E6ZG97aWYoQSZnKXtBPTB8Q1tJPj4yXTtJOmRve2lmKCgtOCZDW0ErND4+Ml18MCkhPSgwfFEpKXtmb3IoQj1RPDwoMzE9PSgwfEIpPzA6MjUtKEI+Pj4xKXwwKTtJPTB8Q1soZz1BKzE2KyhCPj4+MzE8PDIpfDApPj4yXTspe2lmKCgtOCZDW0krND4+Ml18MCk9PSgwfFEpKXtBPUk7YnJlYWsgSX1CPDw9MSxBPUl9Q1tnPj4yXT1vLENbbysyND4+Ml09QSxDW28rMTI+PjJdPW8sQ1tvKzg+PjJdPW87YnJlYWsgQX19d2hpbGUoMCk7Yz0wfENbKGU9QSs4fDApPj4yXSxDW2MrMTI+PjJdPW8sQ1tlPj4yXT1vLENbbys4Pj4yXT1jLENbbysxMj4+Ml09QSxDW28rMjQ+PjJdPTB9ZWxzZSBDWzg2ODBdPUF8ZyxDW0k+PjJdPW8sQ1tvKzI0Pj4yXT1JLENbbysxMj4+Ml09byxDW28rOD4+Ml09b313aGlsZSgwKTtpZihjPSgwfENbODY4N10pLTF8MCxDWzg2ODddPWMsISgwfGMpKXtmb3IoQT0zNTE3MjtBPTB8Q1tBPj4yXTspQT1BKzh8MDtDWzg2ODddPS0xfX19fWZ1bmN0aW9uIFkoQSxJKXtJfD0wO3ZhciBnPTAsQj0wLFE9MCxFPTAsaT0wLGU9MCxvPTA7Zz0wfENbNCsoQXw9MCk+PjJdO2Rve2lmKDEmZylvPUEsZz1JO2Vsc2V7aWYoZT0wfENbQT4+Ml0sISgzJmcpKXJldHVybjtpZigoMHxDWzg2ODRdKT09KEErKDAtZSl8MCkpe2lmKDMhPSgzJihnPTB8Q1tBK0krND4+Ml0pfDApKXtvPUErKDAtZSl8MCxnPWUrSXwwO2JyZWFrfXJldHVybiBDWzg2ODFdPWUrSSxDW0ErSSs0Pj4yXT0tMiZnLENbQSsoMC1lKSs0Pj4yXT1lK0l8MSx2b2lkKENbQStJPj4yXT1lK0kpfWlmKGU+Pj4wPDI1Nil7aWYoZz0wfENbQSsoMC1lKSs4Pj4yXSwoMHwoQj0wfENbQSsoMC1lKSsxMj4+Ml0pKT09KDB8Zykpe0NbODY3OV09Q1s4Njc5XSZ+KDE8PChlPj4+MykpLG89QSsoMC1lKXwwLGc9ZStJfDA7YnJlYWt9Q1tnKzEyPj4yXT1CLENbQis4Pj4yXT1nLG89QSsoMC1lKXwwLGc9ZStJfDA7YnJlYWt9aT0wfENbQSsoMC1lKSsyND4+Ml0sZz0wfENbQSsoMC1lKSsxMj4+Ml07ZG97aWYoKDB8Zyk9PShBKygwLWUpfDApKXtpZihnPTB8Q1s0KyhCPUErKDAtZSkrMTZ8MCk+PjJdKUI9Qis0fDA7ZWxzZSBpZighKGc9MHxDW0I+PjJdKSl7Qj0wO2JyZWFrfWZvcig7OylpZihRPTB8Q1soRT1nKzIwfDApPj4yXSlnPVEsQj1FO2Vsc2V7aWYoIShRPTB8Q1soRT1nKzE2fDApPj4yXSkpYnJlYWs7Zz1RLEI9RX1DW0I+PjJdPTAsQj1nfWVsc2UgQj0wfENbQSsoMC1lKSs4Pj4yXSxDW0IrMTI+PjJdPWcsQ1tnKzg+PjJdPUIsQj1nfXdoaWxlKDApO2lmKGkpe2lmKGc9MHxDW0ErKDAtZSkrMjg+PjJdLCgwfENbMzUwMjArKGc8PDIpPj4yXSk9PShBKygwLWUpfDApKXtpZihDWzM1MDIwKyhnPDwyKT4+Ml09QiwhQil7Q1s4NjgwXT1DWzg2ODBdJn4oMTw8Zyksbz1BKygwLWUpfDAsZz1lK0l8MDticmVha319ZWxzZSBpZihDWygoMHxDW2krMTY+PjJdKT09KEErKDAtZSl8MCk/aSsxNnwwOmkrMjB8MCk+PjJdPUIsIUIpe289QSsoMC1lKXwwLGc9ZStJfDA7YnJlYWt9Q1tCKzI0Pj4yXT1pLDB8KGc9MHxDW0ErKDAtZSkrMTY+PjJdKSYmKENbQisxNj4+Ml09ZyxDW2crMjQ+PjJdPUIpLChnPTB8Q1tBKygwLWUpKzE2KzQ+PjJdKT8oQ1tCKzIwPj4yXT1nLENbZysyND4+Ml09QixvPUErKDAtZSl8MCxnPWUrSXwwKToobz1BKygwLWUpfDAsZz1lK0l8MCl9ZWxzZSBvPUErKDAtZSl8MCxnPWUrSXwwfX13aGlsZSgwKTtpZigyJihRPTB8Q1tBK0krND4+Ml0pKUNbQStJKzQ+PjJdPS0yJlEsQ1tvKzQ+PjJdPTF8ZyxDW28rZz4+Ml09ZyxpPWc7ZWxzZXtpZigoMHxDWzg2ODVdKT09KEErSXwwKSl7aWYoST0oMHxDWzg2ODJdKStnfDAsQ1s4NjgyXT1JLENbODY4NV09byxDW28rND4+Ml09MXxJLCgwfG8pIT0oMHxDWzg2ODRdKSlyZXR1cm47cmV0dXJuIENbODY4NF09MCx2b2lkKENbODY4MV09MCl9aWYoKDB8Q1s4Njg0XSk9PShBK0l8MCkpcmV0dXJuIEk9KDB8Q1s4NjgxXSkrZ3wwLENbODY4MV09SSxDWzg2ODRdPW8sQ1tvKzQ+PjJdPTF8SSx2b2lkKENbbytJPj4yXT1JKTtpPSgtOCZRKStnfDA7ZG97aWYoUT4+PjA8MjU2KXtpZihCPTB8Q1tBK0krOD4+Ml0sKDB8KGc9MHxDW0ErSSsxMj4+Ml0pKT09KDB8Qikpe0NbODY3OV09Q1s4Njc5XSZ+KDE8PChRPj4+MykpO2JyZWFrfUNbQisxMj4+Ml09ZyxDW2crOD4+Ml09QjticmVha31lPTB8Q1tBK0krMjQ+PjJdLGc9MHxDW0ErSSsxMj4+Ml07ZG97aWYoKDB8Zyk9PShBK0l8MCkpe2lmKGc9MHxDW0ErSSsxNis0Pj4yXSlCPUErSSsxNis0fDA7ZWxzZXtpZighKGc9MHxDW0ErSSsxNj4+Ml0pKXtCPTA7YnJlYWt9Qj1BK0krMTZ8MH1mb3IoOzspaWYoUT0wfENbKEU9ZysyMHwwKT4+Ml0pZz1RLEI9RTtlbHNle2lmKCEoUT0wfENbKEU9ZysxNnwwKT4+Ml0pKWJyZWFrO2c9USxCPUV9Q1tCPj4yXT0wLEI9Z31lbHNlIEI9MHxDW0ErSSs4Pj4yXSxDW0IrMTI+PjJdPWcsQ1tnKzg+PjJdPUIsQj1nfXdoaWxlKDApO2lmKDB8ZSl7aWYoZz0wfENbQStJKzI4Pj4yXSwoMHxDWzM1MDIwKyhnPDwyKT4+Ml0pPT0oQStJfDApKXtpZihDWzM1MDIwKyhnPDwyKT4+Ml09QiwhQil7Q1s4NjgwXT1DWzg2ODBdJn4oMTw8Zyk7YnJlYWt9fWVsc2UgaWYoQ1soKDB8Q1tlKzE2Pj4yXSk9PShBK0l8MCk/ZSsxNnwwOmUrMjB8MCk+PjJdPUIsIUIpYnJlYWs7Q1tCKzI0Pj4yXT1lLDB8KGc9MHxDW0ErSSsxNj4+Ml0pJiYoQ1tCKzE2Pj4yXT1nLENbZysyND4+Ml09QiksMHwoZz0wfENbQStJKzE2KzQ+PjJdKSYmKENbQisyMD4+Ml09ZyxDW2crMjQ+PjJdPUIpfX13aGlsZSgwKTtpZihDW28rND4+Ml09MXxpLENbbytpPj4yXT1pLCgwfG8pPT0oMHxDWzg2ODRdKSlyZXR1cm4gdm9pZChDWzg2ODFdPWkpfWlmKFE9aT4+PjMsaT4+PjA8MjU2KXJldHVybihnPTB8Q1s4Njc5XSkmMTw8UT8oZz0zNDc1NisoUTw8MTw8MikrOHwwLEI9MHxDWzM0NzU2KyhRPDwxPDwyKSs4Pj4yXSk6KENbODY3OV09Z3wxPDxRLGc9MzQ3NTYrKFE8PDE8PDIpKzh8MCxCPTM0NzU2KyhRPDwxPDwyKXwwKSxDW2c+PjJdPW8sQ1tCKzEyPj4yXT1vLENbbys4Pj4yXT1CLHZvaWQoQ1tvKzEyPj4yXT0zNDc1NisoUTw8MTw8MikpO2lmKEI9MzUwMjArKChFPShnPWk+Pj44KT9pPj4+MD4xNjc3NzIxNT8zMTppPj4+KDcrKEU9MTQtKCg1MjAxOTIrKGc8PCgoZysxMDQ4MzIwfDApPj4+MTYmOCkpfDApPj4+MTYmNHwoZysxMDQ4MzIwfDApPj4+MTYmOHwoMjQ1NzYwKyhFPWc8PCgoZysxMDQ4MzIwfDApPj4+MTYmOCk8PCgoNTIwMTkyKyhnPDwoKGcrMTA0ODMyMHwwKT4+PjE2JjgpKXwwKT4+PjE2JjQpKXwwKT4+PjE2JjIpKyhFPDwoKEUrMjQ1NzYwfDApPj4+MTYmMik+Pj4xNSl8MCl8MCkmMXxFPDwxOjApPDwyKXwwLENbbysyOD4+Ml09RSxDW28rMjA+PjJdPTAsQ1tvKzE2Pj4yXT0wLCEoKGc9MHxDWzg2ODBdKSYoUT0xPDxFKSkpcmV0dXJuIENbODY4MF09Z3xRLENbQj4+Ml09byxDW28rMjQ+PjJdPUIsQ1tvKzEyPj4yXT1vLHZvaWQoQ1tvKzg+PjJdPW8pO2c9MHxDW0I+PjJdO0E6ZG97aWYoKC04JkNbZys0Pj4yXXwwKSE9KDB8aSkpe2ZvcihFPWk8PCgzMT09KDB8RSk/MDoyNS0oRT4+PjEpfDApO0I9MHxDWyhRPWcrMTYrKEU+Pj4zMTw8Mil8MCk+PjJdOyl7aWYoKC04JkNbQis0Pj4yXXwwKT09KDB8aSkpe2c9QjticmVhayBBfUU8PD0xLGc9Qn1yZXR1cm4gQ1tRPj4yXT1vLENbbysyND4+Ml09ZyxDW28rMTI+PjJdPW8sdm9pZChDW28rOD4+Ml09byl9fXdoaWxlKDApO0k9MHxDWyhBPWcrOHwwKT4+Ml0sQ1tJKzEyPj4yXT1vLENbQT4+Ml09byxDW28rOD4+Ml09SSxDW28rMTI+PjJdPWcsQ1tvKzI0Pj4yXT0wfWZ1bmN0aW9uIE0oQSxJLGcsUSxFKXtBfD0wLEl8PTAsZ3w9MDt2YXIgaSxlLGM9MCxhPTAsbj0wLHI9MCx0PTAsZj0wLHc9MCxzPTAsaD0wLEQ9MCxGPTAscD0wLHU9MCxIPTAsaz0wLGw9MCxfPTAsRz0wLGQ9MCxZPTAsTT0wLFM9MCxVPTAsdj0wLGI9MCxKPTAsUD0wLFI9MCxOPTAsbT0wLEw9MCx4PTAsSz0wLFg9MCxqPTAsVD0wLHE9MCxWPTAsej0wLFc9MCxPPTAsWj0wLCQ9MCxBQT0wLElBPTAsZ0E9MCxCQT0wLENBPTAsUUE9MCxFQT0wLGlBPTAsZUE9MCxvQT0wLGNBPTAsYUE9MCxuQT0wLHJBPTA7aWYoZT15LGk9eT15KzYzJi02NCx5PXkrNjR8MCwhKDA9PSgwfChRfD0wKSkmMD09KDB8KEV8PTApKSkpe2ZvcihMPTB8Q1tBPj4yXSx4PTB8Q1tBKzQ+PjJdLEs9MHxDW0ErOD4+Ml0sWD0wfENbQSsxMj4+Ml0saj0wfENbQSsxNj4+Ml0sUz0wfENbQSsyMD4+Ml0sVT0wfENbQSsyND4+Ml0sdj0wfENbQSsyOD4+Ml0sYj0wfENbQSszMj4+Ml0sSj0wfENbQSszNj4+Ml0sUD0wfENbQSs0MD4+Ml0sUj0wfENbQSs0ND4+Ml0sTj0wfENbQSs1Nj4+Ml0sbT0wfENbQSs2MD4+Ml0sYT0wLFk9MHxDW0ErNDg+PjJdLE09MHxDW0ErNTI+PjJdLG49STs7KXtpZihkPUU+Pj4wPDB8MD09KDB8RSkmUT4+PjA8NjQpe2M9KEk9aSkrNjR8MDtkb3tDW0k+PjJdPTAsST1JKzR8MH13aGlsZSgoMHxJKTwoMHxjKSk7ST0wO2Rve0JbaStJPj4wXT0wfEJbbitJPj4wXSxJPUkrMXwwfXdoaWxlKEU+Pj4wPjB8MD09KDB8RSkmUT4+PjA+ST4+PjApO0c9aSxhPWcsbj1pfWVsc2UgRz1nO2c9MjAsST1MLGM9eCxyPVAsdD1SLGY9WSx3PU0scz1OLGg9bSxEPUssRj1YLHA9aix1PVMsSD1VLGs9dixsPWIsXz1KO2Rve1c9MHx3QigoQUE9MHx3QigobkE9MHx3QigoJD0oQUE9MHx3QigoYUE9SStwfDApXmYsMTYpKStsfDApXnAsMTIpKSthQV5BQSw4KSkrJF5uQSw3KSxyQT0wfHdCKChWPTB8d0IoKGVBPTB8d0IoKHE9KFY9MHx3QigoaUE9Yyt1fDApXncsMTYpKStffDApXnUsMTIpKStpQV5WLDgpKStxXmVBLDcpLG9BPTB8d0IoKHo9MHx3QigoQkE9MHx3QigoSUE9KHo9MHx3QigoZ0E9RCtIfDApXnMsMTYpKStyfDApXkgsMTIpKStnQV56LDgpKStJQV5CQSw3KSxDQT0wfHdCKChRQT0wfHdCKChaPTB8d0IoKFQ9KFFBPTB8d0IoKE89RitrfDApXmgsMTYpKSt0fDApXmssMTIpKStPXlFBLDgpKStUXlosNyksdT0wfHdCKChyPShoPTB8d0IoKEk9KEVBPTB8d0IoKGNBPTB8d0IoUUFeckErKG5BK2FBKSwxNikpKyh6K0lBKV5yQSwxMikpKyhyQSsobkErYUEpKXwwKV5jQSw4KSkrKGNBKyh6K0lBKSl8MCleRUEsNyksSD0wfHdCKCh0PShmPTB8d0IoKGM9KElBPTB8d0IoKEVBPTB8d0Iob0ErKGVBK2lBKV5BQSwxNikpKyhRQStUKV5vQSwxMikpKyhvQSsoZUEraUEpKXwwKV5FQSw4KSkrKEVBKyhRQStUKSl8MCleSUEsNyksaz0wfHdCKChsPSh3PTB8d0IoKEQ9KFQ9MHx3QigoSUE9MHx3QihDQSsoQkErZ0EpXlYsMTYpKSsoQUErJCleQ0EsMTIpKSsoQ0ErKEJBK2dBKSl8MCleSUEsOCkpKyhJQSsoQUErJCkpfDApXlQsNykscD0wfHdCKChfPShzPTB8d0IoKEY9KFQ9MHx3Qigoej0wfHdCKForTytXXnosMTYpKSsoVitxKV5XLDEyKSkrKForTytXKXwwKV56LDgpKSsoeisoVitxKSl8MCleVCw3KSxnPWcrLTJ8MH13aGlsZSgwIT0oMHxnKSk7aWYoWj0oMHxWZyhuKSleSStMLCQ9KDB8Vmcobis0fDApKV5jK3gsQUE9KDB8Vmcobis4fDApKV5EK0ssSUE9KDB8VmcobisxMnwwKSleRitYLGdBPSgwfFZnKG4rMTZ8MCkpXnAraixCQT0oMHxWZyhuKzIwfDApKV51K1MsQ0E9KDB8VmcobisyNHwwKSleSCtVLFFBPSgwfFZnKG4rMjh8MCkpXmsrdixFQT0oMHxWZyhuKzMyfDApKV5sK2IsaUE9KDB8VmcobiszNnwwKSleXytKLGVBPSgwfFZnKG4rNDB8MCkpXnIrUCxvQT0oMHxWZyhuKzQ0fDApKV50K1IsY0E9KDB8Vmcobis0OHwwKSleZitZLGFBPSgwfFZnKG4rNTJ8MCkpXncrTSxuQT0oMHxWZyhuKzU2fDApKV5zK04sckE9KDB8Vmcobis2MHwwKSleaCttLGM9TSsoMD09KDB8KEk9WSsxfDApKSYxKXwwLFBnKEcsWiksUGcoRys0fDAsJCksUGcoRys4fDAsQUEpLFBnKEcrMTJ8MCxJQSksUGcoRysxNnwwLGdBKSxQZyhHKzIwfDAsQkEpLFBnKEcrMjR8MCxDQSksUGcoRysyOHwwLFFBKSxQZyhHKzMyfDAsRUEpLFBnKEcrMzZ8MCxpQSksUGcoRys0MHwwLGVBKSxQZyhHKzQ0fDAsb0EpLFBnKEcrNDh8MCxjQSksUGcoRys1MnwwLGFBKSxQZyhHKzU2fDAsbkEpLFBnKEcrNjB8MCxyQSksRT4+PjA8MHwwPT0oMHxFKSZRPj4+MDw2NSlicmVhaztnPTB8dmcoMHxRLDB8RSwtNjQsLTEpLEU9MHxvKCksUT1nLGc9Rys2NHwwLFk9SSxNPWMsbj1uKzY0fDB9aWYoZCYmMHxRKXtFPTA7ZG97QlthK0U+PjBdPTB8QltHK0U+PjBdLEU9RSsxfDB9d2hpbGUoKDB8RSkhPSgwfFEpKX1DW0ErNDg+PjJdPUksQ1tBKzUyPj4yXT1jfXk9ZX1mdW5jdGlvbiBTKEEsSSxnLFEpe0l8PTAsZ3w9MCxRfD0wO3ZhciBFLGksZSxjLGEsbj0wLHI9MCx0PTAsZj0wLHc9MCx5PTAscz0wLGg9MCxEPTAsRj0wLHA9MCx1PTAsSD0wLGs9MCxsPTA7aWYoYT0wPT0oMHxCWzgwKyhBfD0wKT4+MF0pPzE2Nzc3MjE2OjAsRT0wfENbQSs0Pj4yXSxpPTB8Q1tBKzg+PjJdLGU9MHxDW0ErMTI+PjJdLGM9MHxDW0ErMTY+PjJdLHc9MHxDW0ErMjA+PjJdLGY9MHxDW0ErMjQ+PjJdLHQ9MHxDW0ErMjg+PjJdLHI9MHxDW0ErMzI+PjJdLG49MHxDW0ErMzY+PjJdLFE+Pj4wPjB8MD09KDB8USkmZz4+PjA+MTUpZm9yKEQ9MHxDW0E+PjJdOzspe2lmKGs9KDY3MTA4ODYzJigwfFZnKEkpKSkrd3wwLGw9KCgwfFZnKEkrM3wwKSk+Pj4yJjY3MTA4ODYzKStmfDAsSD0oKDB8VmcoSSs2fDApKT4+PjQmNjcxMDg4NjMpK3R8MCx1PSgoMHxWZyhJKzl8MCkpPj4+NikrcnwwLHc9KCgwfFZnKEkrMTJ8MCkpPj4+OHxhKStufDAsbj0wfFFnKDB8aywwLDB8RCwwKSx5PTB8bygpLHQ9MHx2ZygwfCh5PTB8dmcoMHwodD0wfHZnKDB8KHk9MHx2ZygwfCh0PTB8UWcoMHxsLDAsNSpjfDAsMCkpLDB8bygpLDB8biwwfHkpKSwwfChuPTB8bygpKSwwfCh0PTB8UWcoMHxILDAsNSplfDAsMCkpLDB8bygpKSksMHwobj0wfG8oKSksMHwoeT0wfFFnKDB8dSwwLDUqaXwwLDApKSwwfG8oKSkpLDB8KG49MHxvKCkpLDB8KHQ9MHxRZygwfHcsMCw1KkV8MCwwKSksMHxvKCkpLG49MHxvKCkseT0wfFFnKDB8aywwLDB8RSwwKSxzPTB8bygpLHA9MHx2ZygwfChzPTB8dmcoMHwocD0wfHZnKDB8KHM9MHx2ZygwfChwPTB8UWcoMHxsLDAsMHxELDApKSwwfG8oKSwwfHksMHxzKSksMHwoeT0wfG8oKSksMHwocD0wfFFnKDB8SCwwLDUqY3wwLDApKSwwfG8oKSkpLDB8KHk9MHxvKCkpLDB8KHM9MHxRZygwfHUsMCw1KmV8MCwwKSksMHxvKCkpKSwwfCh5PTB8bygpKSwwfChwPTB8UWcoMHx3LDAsNSppfDAsMCkpLDB8bygpKSx5PTB8bygpLHM9MHxRZygwfGssMCwwfGksMCksaD0wfG8oKSxGPTB8dmcoMHwoaD0wfHZnKDB8KEY9MHx2ZygwfChoPTB8dmcoMHwoRj0wfFFnKDB8bCwwLDB8RSwwKSksMHxvKCksMHxzLDB8aCkpLDB8KHM9MHxvKCkpLDB8KEY9MHxRZygwfEgsMCwwfEQsMCkpLDB8bygpKSksMHwocz0wfG8oKSksMHwoaD0wfFFnKDB8dSwwLDUqY3wwLDApKSwwfG8oKSkpLDB8KHM9MHxvKCkpLDB8KEY9MHxRZygwfHcsMCw1KmV8MCwwKSksMHxvKCkpLHM9MHxvKCksaD0wfFFnKDB8aywwLDB8ZSwwKSxyPTB8bygpLGY9MHx2ZygwfChyPTB8dmcoMHwoZj0wfHZnKDB8KHI9MHx2ZygwfChmPTB8UWcoMHxsLDAsMHxpLDApKSwwfG8oKSwwfGgsMHxyKSksMHwoaD0wfG8oKSksMHwoZj0wfFFnKDB8SCwwLDB8RSwwKSksMHxvKCkpKSwwfChoPTB8bygpKSwwfChyPTB8UWcoMHx1LDAsMHxELDApKSwwfG8oKSkpLDB8KGg9MHxvKCkpLDB8KGY9MHxRZygwfHcsMCw1KmN8MCwwKSksMHxvKCkpLGg9MHxvKCkscj0wfFFnKDB8aywwLDB8YywwKSxrPTB8bygpLHc9MHx2ZygwfCh1PTB8dmcoMHwoSD0wfHZnKDB8KGs9MHx2ZygwfChsPTB8UWcoMHxsLDAsMHxlLDApKSwwfG8oKSwwfHIsMHxrKSksMHwocj0wfG8oKSksMHwoSD0wfFFnKDB8SCwwLDB8aSwwKSksMHxvKCkpKSwwfChyPTB8bygpKSwwfCh1PTB8UWcoMHx1LDAsMHxFLDApKSwwfG8oKSkpLDB8KHI9MHxvKCkpLDB8KHc9MHxRZygwfHcsMCwwfEQsMCkpLDB8bygpKSxyPTB8bygpLG49MHx5ZygwfHQsMHxuLDI2KSxvKCkseT0wfHlnKDB8KG49MHx2ZygwfHAsMHx5LDB8biwwKSksMHxvKCksMjYpLG8oKSxzPTB8eWcoMHwoeT0wfHZnKDB8RiwwfHMsMHx5LDApKSwwfG8oKSwyNiksbygpLGg9MHx5ZygwfChzPTB8dmcoMHxmLDB8aCwwfHMsMCkpLDB8bygpLDI2KSxvKCkscj0wfHlnKDB8KGg9MHx2ZygwfHcsMHxyLDB8aCwwKSksMHxvKCksMjYpLG8oKSxnPTB8dmcoMHxnLDB8USwtMTYsLTEpLCEoKFE9MHxvKCkpPj4+MD4wfDA9PSgwfFEpJmc+Pj4wPjE1KSl7Zz0oNSpyfDApKyg2NzEwODg2MyZ0KSY2NzEwODg2MyxmPSgoKDUqcnwwKSsoNjcxMDg4NjMmdCl8MCk+Pj4yNikrKDY3MTA4ODYzJm4pfDAsdD02NzEwODg2MyZ5LHI9NjcxMDg4NjMmcyxuPTY3MTA4ODYzJmg7YnJlYWt9dz0oNSpyfDApKyg2NzEwODg2MyZ0KSY2NzEwODg2MyxmPSgoKDUqcnwwKSsoNjcxMDg4NjMmdCl8MCk+Pj4yNikrKDY3MTA4ODYzJm4pfDAsdD02NzEwODg2MyZ5LHI9NjcxMDg4NjMmcyxuPTY3MTA4ODYzJmgsST1JKzE2fDB9ZWxzZSBnPXc7Q1tBKzIwPj4yXT1nLENbQSsyND4+Ml09ZixDW0ErMjg+PjJdPXQsQ1tBKzMyPj4yXT1yLENbQSszNj4+Ml09bn1mdW5jdGlvbiBVKEEsSSl7QXw9MDt2YXIgZz0wLFE9MCxFPTAsaT0wLGU9MCxjPTAsYT0wLG49MCxyPTAsdD0wLGY9MCx3PTAseT0wLHM9MCxoPTAsRD0wLEY9MCxwPTAsdT0wLEg9MCxrPTA7YT0wfGtJKEl8PTApLGM9MHxvKCksdT0wfHJnKDB8KHU9MHxCZygwfEJbSSs0Pj4wXSwwfEJbSSs1Pj4wXSwwfEJbSSs2Pj4wXSkpLDB8bygpLDYpLEg9MHxvKCksZT0wfHJnKDB8KGU9MHxCZygwfEJbSSs3Pj4wXSwwfEJbSSs4Pj4wXSwwfEJbSSs5Pj4wXSkpLDB8bygpLDUpLGk9MHxvKCksRj0wfHJnKDB8KEY9MHxCZygwfEJbSSsxMD4+MF0sMHxCW0krMTE+PjBdLDB8QltJKzEyPj4wXSkpLDB8bygpLDMpLHA9MHxvKCksRT0wfHJnKDB8KEU9MHxCZygwfEJbSSsxMz4+MF0sMHxCW0krMTQ+PjBdLDB8QltJKzE1Pj4wXSkpLDB8bygpLDIpLFE9MHxvKCksaD0wfGtJKEkrMTZ8MCksRD0wfG8oKSxuPTB8cmcoMHwobj0wfEJnKDB8QltJKzIwPj4wXSwwfEJbSSsyMT4+MF0sMHxCW0krMjI+PjBdKSksMHxvKCksNyksZz0wfG8oKSxyPTB8cmcoMHwocj0wfEJnKDB8QltJKzIzPj4wXSwwfEJbSSsyND4+MF0sMHxCW0krMjU+PjBdKSksMHxvKCksNSkscz0wfG8oKSx0PTB8cmcoMHwodD0wfEJnKDB8QltJKzI2Pj4wXSwwfEJbSSsyNz4+MF0sMHxCW0krMjg+PjBdKSksMHxvKCksNCksZj0wfG8oKSx3PTB8cmcoMHwodz0wfEJnKDB8QltJKzI5Pj4wXSwwfEJbSSszMD4+MF0sMHxCW0krMzE+PjBdKSksMHxvKCksMiksbygpLGs9MHxVZygwLDAsMHwoaz0wfHlnKDB8KHk9MHx2ZygzMzU1NDQyOCZ3fDAsMCwxNjc3NzIxNiwwKSksMHxvKCksMjUpKSwwfG8oKSksbygpLGM9MHx2ZygxOSZrfDAsMCwwfGEsMHxjKSxhPTB8bygpLHk9MHxVZygzMzU1NDQyOCZ3fDAsMCwzMzU1NDQzMiZ5fDAsMCksdz0wfG8oKSxpPTB8dmcoMHwoST0wfGlnKDB8KGs9MHx2ZygwfHUsMHxILDE2Nzc3MjE2LDApKSwwfG8oKSwyNSkpLDB8bygpLDB8ZSwwfGkpLGU9MHxvKCksaz0wfFVnKDB8dSwwfEgsLTMzNTU0NDMyJmt8MCwwKSxIPTB8bygpLFE9MHx2ZygwfChJPTB8aWcoMHwodT0wfHZnKDB8RiwwfHAsMTY3NzcyMTYsMCkpLDB8bygpLDI1KSksMHxvKCksMHxFLDB8USksRT0wfG8oKSx1PTB8VWcoMHxGLDB8cCwtMzM1NTQ0MzImdXwwLDApLHA9MHxvKCksST0wfHZnKDB8biwwfGcsMHwoST0wfGlnKDB8KEY9MHx2ZygwfGgsMHxELDE2Nzc3MjE2LDApKSwwfG8oKSwyNSkpLDB8bygpKSxnPTB8bygpLEY9MHxVZygwfGgsMHxELC0zMzU1NDQzMiZGfDAsMCksRD0wfG8oKSxmPTB8dmcoMHwobj0wfGlnKDB8KGg9MHx2ZygwfHIsMHxzLDE2Nzc3MjE2LDApKSwwfG8oKSwyNSkpLDB8bygpLDB8dCwwfGYpLHQ9MHxvKCksaD0wfFVnKDB8ciwwfHMsLTMzNTU0NDMyJmh8MCwwKSxzPTB8bygpLG49MHx2ZygwfGssMHxILDB8KG49MHx5ZygwfChyPTB8dmcoMHxjLDB8YSwzMzU1NDQzMiwwKSksMHxvKCksMjYpKSwwfG8oKSksbygpLHI9MHxVZygwfGMsMHxhLC02NzEwODg2NCZyfDAsMCksbygpLGM9MHx2ZygwfHUsMHxwLDB8KGM9MHx5ZygwfChhPTB8dmcoMHxpLDB8ZSwzMzU1NDQzMiwwKSksMHxvKCksMjYpKSwwfG8oKSksbygpLGE9MHxVZygwfGksMHxlLC02NzEwODg2NCZhfDAsMCksbygpLGk9MHx2ZygwfEYsMHxELDB8KGk9MHx5ZygwfChlPTB8dmcoMHxRLDB8RSwzMzU1NDQzMiwwKSksMHxvKCksMjYpKSwwfG8oKSksbygpLGU9MHxVZygwfFEsMHxFLC02NzEwODg2NCZlfDAsMCksbygpLFE9MHx2ZygwfGgsMHxzLDB8KFE9MHx5ZygwfChFPTB8dmcoMHxJLDB8ZywzMzU1NDQzMiwwKSksMHxvKCksMjYpKSwwfG8oKSksbygpLEU9MHxVZygwfEksMHxnLC02NzEwODg2NCZFfDAsMCksbygpLEk9MHx2ZygwfHksMHx3LDB8KEk9MHx5ZygwfChnPTB8dmcoMHxmLDB8dCwzMzU1NDQzMiwwKSksMHxvKCksMjYpKSwwfG8oKSksbygpLGc9MHxVZygwfGYsMHx0LC02NzEwODg2NCZnfDAsMCksbygpLENbQT4+Ml09cixDW0ErND4+Ml09bixDW0ErOD4+Ml09YSxDW0ErMTI+PjJdPWMsQ1tBKzE2Pj4yXT1lLENbQSsyMD4+Ml09aSxDW0ErMjQ+PjJdPUUsQ1tBKzI4Pj4yXT1RLENbQSszMj4+Ml09ZyxDW0ErMzY+PjJdPUl9ZnVuY3Rpb24gdihBLEkpe0F8PTA7dmFyIGc9MCxCPTAsUT0wLEU9MCxpPTAsZT0wLGM9MCxhPTAsbj0wLHI9MCx0PTAsZj0wLHc9MCx5PTAscz0wLGg9MCxEPTAsRj0wLHA9MCx1PTAsSD0wO2M9MHxDWyhJfD0wKT4+Ml0scD0wfENbSSs0Pj4yXSxpPTB8Q1tJKzg+PjJdLEQ9MHxDW0krMTI+PjJdLFE9MHxDW0krMTY+PjJdLHM9MHxDW0krMjA+PjJdLGc9MHxDW0krMjQ+PjJdLG49MHxDW0krMjg+PjJdLHI9MHxDW0krMzI+PjJdLEg9MHxDW0krMzY+PjJdLGM9MHxRZygwfGMsKCgwfGMpPDApPDwzMT4+MzF8MCwxMjE2NjYsMCksZT0wfG8oKSxwPTB8UWcoMHxwLCgoMHxwKTwwKTw8MzE+PjMxfDAsMTIxNjY2LDApLHU9MHxvKCksaT0wfFFnKDB8aSwoKDB8aSk8MCk8PDMxPj4zMXwwLDEyMTY2NiwwKSxFPTB8bygpLEQ9MHxRZygwfEQsKCgwfEQpPDApPDwzMT4+MzF8MCwxMjE2NjYsMCksRj0wfG8oKSxRPTB8UWcoMHxRLCgoMHxRKTwwKTw8MzE+PjMxfDAsMTIxNjY2LDApLEI9MHxvKCkscz0wfFFnKDB8cywoKDB8cyk8MCk8PDMxPj4zMXwwLDEyMTY2NiwwKSxoPTB8bygpLGc9MHxRZygwfGcsKCgwfGcpPDApPDwzMT4+MzF8MCwxMjE2NjYsMCksST0wfG8oKSxuPTB8UWcoMHxuLCgoMHxuKTwwKTw8MzE+PjMxfDAsMTIxNjY2LDApLHk9MHxvKCkscj0wfFFnKDB8ciwoKDB8cik8MCk8PDMxPj4zMXwwLDEyMTY2NiwwKSx0PTB8bygpLGU9MHx2ZygwfChhPTB8UWcoMHwoYT0wfGlnKDB8KHc9MHx2ZygwfChIPTB8UWcoMHxILCgoMHxIKTwwKTw8MzE+PjMxfDAsMTIxNjY2LDApKSwwfChmPTB8bygpKSwxNjc3NzIxNiwwKSksMHxvKCksMjUpKSwwfG8oKSwxOSwwKSksMHxvKCksMHxjLDB8ZSksYz0wfG8oKSx3PTB8VWcoMHxILDB8ZiwtMzM1NTQ0MzImd3wwLDApLGY9MHxvKCksRT0wfHZnKDB8KGE9MHxpZygwfChIPTB8dmcoMHxwLDB8dSwxNjc3NzIxNiwwKSksMHxvKCksMjUpKSwwfG8oKSwwfGksMHxFKSxpPTB8bygpLEg9MHxVZygwfHAsMHx1LC0zMzU1NDQzMiZIfDAsMCksdT0wfG8oKSxCPTB8dmcoMHwoYT0wfGlnKDB8KHA9MHx2ZygwfEQsMHxGLDE2Nzc3MjE2LDApKSwwfG8oKSwyNSkpLDB8bygpLDB8USwwfEIpLFE9MHxvKCkscD0wfFVnKDB8RCwwfEYsLTMzNTU0NDMyJnB8MCwwKSxGPTB8bygpLEk9MHx2ZygwfChhPTB8aWcoMHwoRD0wfHZnKDB8cywwfGgsMTY3NzcyMTYsMCkpLDB8bygpLDI1KSksMHxvKCksMHxnLDB8SSksZz0wfG8oKSxEPTB8VWcoMHxzLDB8aCwtMzM1NTQ0MzImRHwwLDApLGg9MHxvKCksdD0wfHZnKDB8KGE9MHxpZygwfChzPTB8dmcoMHxuLDB8eSwxNjc3NzIxNiwwKSksMHxvKCksMjUpKSwwfG8oKSwwfHIsMHx0KSxyPTB8bygpLHM9MHxVZygwfG4sMHx5LC0zMzU1NDQzMiZzfDAsMCkseT0wfG8oKSxhPTB8dmcoMHxILDB8dSwwfChhPTB8eWcoMHwobj0wfHZnKDB8ZSwwfGMsMzM1NTQ0MzIsMCkpLDB8bygpLDI2KSksMHxvKCkpLG8oKSxuPTB8VWcoMHxlLDB8YywtNjcxMDg4NjQmbnwwLDApLG8oKSxlPTB8dmcoMHxwLDB8RiwwfChlPTB8eWcoMHwoYz0wfHZnKDB8RSwwfGksMzM1NTQ0MzIsMCkpLDB8bygpLDI2KSksMHxvKCkpLG8oKSxjPTB8VWcoMHxFLDB8aSwtNjcxMDg4NjQmY3wwLDApLG8oKSxFPTB8dmcoMHxELDB8aCwwfChFPTB8eWcoMHwoaT0wfHZnKDB8QiwwfFEsMzM1NTQ0MzIsMCkpLDB8bygpLDI2KSksMHxvKCkpLG8oKSxpPTB8VWcoMHxCLDB8USwtNjcxMDg4NjQmaXwwLDApLG8oKSxCPTB8dmcoMHxzLDB8eSwwfChCPTB8eWcoMHwoUT0wfHZnKDB8SSwwfGcsMzM1NTQ0MzIsMCkpLDB8bygpLDI2KSksMHxvKCkpLG8oKSxRPTB8VWcoMHxJLDB8ZywtNjcxMDg4NjQmUXwwLDApLG8oKSxJPTB8dmcoMHx3LDB8ZiwwfChJPTB8eWcoMHwoZz0wfHZnKDB8dCwwfHIsMzM1NTQ0MzIsMCkpLDB8bygpLDI2KSksMHxvKCkpLG8oKSxnPTB8VWcoMHx0LDB8ciwtNjcxMDg4NjQmZ3wwLDApLG8oKSxDW0E+PjJdPW4sQ1tBKzQ+PjJdPWEsQ1tBKzg+PjJdPWMsQ1tBKzEyPj4yXT1lLENbQSsxNj4+Ml09aSxDW0ErMjA+PjJdPUUsQ1tBKzI0Pj4yXT1RLENbQSsyOD4+Ml09QixDW0ErMzI+PjJdPWcsQ1tBKzM2Pj4yXT1JfWZ1bmN0aW9uIGIoQSxJLGcpe0F8PTAsSXw9MDt2YXIgQyxFLGk9MCxlPTAsbz0wO2lmKEU9eSxDPXk9eSs2MyYtNjQseT15KzY0fDAsKGd8PTApPDwyND4+MjQmJigyNTUmZyk8PTY0KXtpZigwfGZ1bmN0aW9uKEEsSSl7cmV0dXJuIDEmKDAhPSgwfChBfD0wKSl8MCE9KDB8KEl8PTApKSl8MH0oUVtBKzgwPj4wXXxRW0ErODArMT4+MF08PDh8UVtBKzgwKzI+PjBdPDwxNnxRW0ErODArMz4+MF08PDI0LFFbQSs4MCs0Pj4wXXxRW0ErODArNCsxPj4wXTw8OHxRW0ErODArNCsyPj4wXTw8MTZ8UVtBKzgwKzQrMz4+MF08PDI0KSlpPS0xO2Vsc2V7aT1RW0ErMzUyPj4wXXxRW0ErMzUyKzE+PjBdPDw4fFFbQSszNTIrMj4+MF08PDE2fFFbQSszNTIrMz4+MF08PDI0O2Rve2lmKGk+Pj4wPjEyOCl7aWYoYUEoQSwxMjgsMCkscyhBLEErOTZ8MCksaT0oUVtBKzM1Mj4+MF18UVtBKzM1MisxPj4wXTw8OHxRW0ErMzUyKzI+PjBdPDwxNnxRW0ErMzUyKzM+PjBdPDwyNCktMTI4fDAsQltBKzM1Mj4+MF09aSxCW0ErMzUyKzE+PjBdPWk+PjgsQltBKzM1MisyPj4wXT1pPj4xNixCW0ErMzUyKzM+PjBdPWk+PjI0LGk+Pj4wPDEyOSl7QkEoQSs5NnwwLEErMjI0fDAsMHxpKSxlPVFbQSszNTI+PjBdfFFbQSszNTIrMT4+MF08PDh8UVtBKzM1MisyPj4wXTw8MTZ8UVtBKzM1MiszPj4wXTw8MjQsbz1BKzk2fDA7YnJlYWt9YygzMzQ1NiwzMzQ4OCwzMDYsMzM1MzMpfWVsc2UgZT1pLG89QSs5NnwwfXdoaWxlKDApO2FBKEEsZSwwKSxmdW5jdGlvbihBKXswfEJbMzU2KyhBfD0wKT4+MF0mJmZ1bmN0aW9uKEEpe0JbODgrKEF8PTApPj4wXT0tMSxCW0ErODgrMT4+MF09LTEsQltBKzg4KzI+PjBdPS0xLEJbQSs4OCszPj4wXT0tMSxCW0ErODgrND4+MF09LTEsQltBKzg4KzQrMT4+MF09LTEsQltBKzg4KzQrMj4+MF09LTEsQltBKzg4KzQrMz4+MF09LTF9KEEpLEJbQSs4MD4+MF09LTEsQltBKzgwKzE+PjBdPS0xLEJbQSs4MCsyPj4wXT0tMSxCW0ErODArMz4+MF09LTEsQltBKzgwKzQ+PjBdPS0xLEJbQSs4MCs0KzE+PjBdPS0xLEJbQSs4MCs0KzI+PjBdPS0xLEJbQSs4MCs0KzM+PjBdPS0xfShBKSxZQShBKzk2KyhpPVFbQSszNTI+PjBdfFFbQSszNTIrMT4+MF08PDh8UVtBKzM1MisyPj4wXTw8MTZ8UVtBKzM1MiszPj4wXTw8MjQpfDAsMCwyNTYtaXwwKSxzKEEsbyksTEkoQyxRW0E+PjBdfFFbQSsxPj4wXTw8OHxRW0ErMj4+MF08PDE2fFFbQSszPj4wXTw8MjQsUVtBKzQ+PjBdfFFbQSs0KzE+PjBdPDw4fFFbQSs0KzI+PjBdPDwxNnxRW0ErNCszPj4wXTw8MjQpLExJKEMrOHwwLFFbQSs4Pj4wXXxRW0ErOCsxPj4wXTw8OHxRW0ErOCsyPj4wXTw8MTZ8UVtBKzgrMz4+MF08PDI0LFFbQSs4KzQ+PjBdfFFbQSs4KzQrMT4+MF08PDh8UVtBKzgrNCsyPj4wXTw8MTZ8UVtBKzgrNCszPj4wXTw8MjQpLExJKEMrMTZ8MCxRW0ErMTY+PjBdfFFbQSsxNisxPj4wXTw8OHxRW0ErMTYrMj4+MF08PDE2fFFbQSsxNiszPj4wXTw8MjQsUVtBKzE2KzQ+PjBdfFFbQSsxNis0KzE+PjBdPDw4fFFbQSsxNis0KzI+PjBdPDwxNnxRW0ErMTYrNCszPj4wXTw8MjQpLExJKEMrMjR8MCxRW0ErMjQ+PjBdfFFbQSsyNCsxPj4wXTw8OHxRW0ErMjQrMj4+MF08PDE2fFFbQSsyNCszPj4wXTw8MjQsUVtBKzI0KzQ+PjBdfFFbQSsyNCs0KzE+PjBdPDw4fFFbQSsyNCs0KzI+PjBdPDwxNnxRW0ErMjQrNCszPj4wXTw8MjQpLExJKEMrMzJ8MCxRW0ErMzI+PjBdfFFbQSszMisxPj4wXTw8OHxRW0ErMzIrMj4+MF08PDE2fFFbQSszMiszPj4wXTw8MjQsUVtBKzMyKzQ+PjBdfFFbQSszMis0KzE+PjBdPDw4fFFbQSszMis0KzI+PjBdPDwxNnxRW0ErMzIrNCszPj4wXTw8MjQpLExJKEMrNDB8MCxRW0ErNDA+PjBdfFFbQSs0MCsxPj4wXTw8OHxRW0ErNDArMj4+MF08PDE2fFFbQSs0MCszPj4wXTw8MjQsUVtBKzQwKzQ+PjBdfFFbQSs0MCs0KzE+PjBdPDw4fFFbQSs0MCs0KzI+PjBdPDwxNnxRW0ErNDArNCszPj4wXTw8MjQpLExJKEMrNDh8MCxRW0ErNDg+PjBdfFFbQSs0OCsxPj4wXTw8OHxRW0ErNDgrMj4+MF08PDE2fFFbQSs0OCszPj4wXTw8MjQsUVtBKzQ4KzQ+PjBdfFFbQSs0OCs0KzE+PjBdPDw4fFFbQSs0OCs0KzI+PjBdPDwxNnxRW0ErNDgrNCszPj4wXTw8MjQpLExJKEMrNTZ8MCxRW0ErNTY+PjBdfFFbQSs1NisxPj4wXTw8OHxRW0ErNTYrMj4+MF08PDE2fFFbQSs1NiszPj4wXTw8MjQsUVtBKzU2KzQ+PjBdfFFbQSs1Nis0KzE+PjBdPDw4fFFbQSs1Nis0KzI+PjBdPDwxNnxRW0ErNTYrNCszPj4wXTw8MjQpLEJBKDB8SSwwfEMsMjU1Jmd8MCksTUkoQSw2NCksTUkobywyNTYpLGk9MH1yZXR1cm4geT1FLDB8aX1yZXR1cm4gU0IoKSwwfWZ1bmN0aW9uIEooQSxJLGcsUSl7QXw9MCxJfD0wLGd8PTA7dmFyIEUsaSxlPTAsbz0wLGM9MCxhPTAsbj0wLHI9MDtzd2l0Y2goaT15LEU9eT15KzYzJi02NCx5PXkrMTZ8MCwwfChRfD0wKSl7Y2FzZSAyOmlmKEk+Pj4wPDEzKVE9LTMxO2Vsc2V7ZT0zMzY4OCxvPShRPUEpKzEzfDA7ZG97QltRPj4wXT0wfEJbZT4+MF0sUT1RKzF8MCxlPWUrMXwwfXdoaWxlKCgwfFEpPCgwfG8pKTtBPUErMTJ8MCxvPUkrLTEyfDAsZT02fWJyZWFrO2Nhc2UgMTppZihJPj4+MDwxMilRPS0zMTtlbHNle2U9MzM3MDEsbz0oUT1BKSsxMnwwO2Rve0JbUT4+MF09MHxCW2U+PjBdLFE9USsxfDAsZT1lKzF8MH13aGlsZSgoMHxRKTwoMHxvKSk7QT1BKzExfDAsbz1JKy0xMXwwLGU9Nn1icmVhaztkZWZhdWx0OlE9LTMxfWRve2lmKDY9PSgwfGUpJiYhKFE9MHxvQShnKSkpe2lmKGNJKEUsMTkpLGU9QSsoUT0wfFpBKEUpKXwwLGE9by1RfDAsbz4+PjA8PVE+Pj4wKXtRPS0zMTticmVha31pZihCQSgwfEEsMHxFLFErMXwwKSxhPj4+MD49NCl7aWYoQltlPj4wXT0zNixCW2UrMT4+MF09MTA5LEJbZSsyPj4wXT02MSxCW2UrMz4+MF09MCxjSShFLDB8Q1tnKzQ0Pj4yXSksbz1lKzMrKEE9MHxaQShFKSl8MCwoYSstM3wwKT4+PjA8PUE+Pj4wKXtRPS0zMTticmVha31pZihCQShlKzN8MCwwfEUsQSsxfDApLChhKy0zLUF8MCk+Pj4wPj00KXtpZihCW28+PjBdPTQ0LEJbbysxPj4wXT0xMTYsQltvKzI+PjBdPTYxLEJbbyszPj4wXT0wLGNJKEUsMHxDW2crNDA+PjJdKSxJPW8rMysoUT0wfFpBKEUpKXwwLGM9YSstMy1BLTMtUXwwLChhKy0zLUEtM3wwKT4+PjA8PVE+Pj4wKXtRPS0zMTticmVha31pZihCQShvKzN8MCwwfEUsUSsxfDApLGM+Pj4wPj00KXtpZihCW0k+PjBdPTQ0LEJbSSsxPj4wXT0xMTIsQltJKzI+PjBdPTYxLEJbSSszPj4wXT0wLGNJKEUsMHxDW2crNDg+PjJdKSwoYystM3wwKT4+PjA8PShlPTB8WkEoRSkpPj4+MCl7UT0tMzE7YnJlYWt9aWYoQkEoSSszfDAsMHxFLGUrMXwwKSxRPUkrMytlKzF8MCwoYystMy1lfDApPj4+MD49MiYmKEJbSSszK2U+PjBdPTM2LEJbSSszK2UrMT4+MF09MCxxKFEsYystMy1lLTF8MCwwfENbZysxNj4+Ml0sMHxDW2crMjA+PjJdLDMpLChyPWMrLTMtZS0xLShuPTB8WkEoUSkpfDApPj4+MD49MikpcmV0dXJuIEJbUStuPj4wXT0zNixCW1ErbisxPj4wXT0wLHEoUStuKzF8MCxyKy0xfDAsMHxDW2c+PjJdLDB8Q1tnKzQ+PjJdLDMpLHk9aSwwO1E9LTMxfWVsc2UgUT0tMzF9ZWxzZSBRPS0zMX1lbHNlIFE9LTMxfX13aGlsZSgwKTtyZXR1cm4geT1pLDB8UX1mdW5jdGlvbiBQKEEsSSxnLFEpe0F8PTAsSXw9MCxnfD0wLFF8PTA7dmFyIEUsaSxlPTAsYz0wLGE9MCxuPTAscj0wLHQ9MCxmPTAsdz0wLHM9MDtpPXksRT15PXkrNjMmLTY0LHk9eSs3MDR8MDtBOmRve2lmKCEoMD09KDB8ZykmMD09KDB8USkpKXtpZihyPTB8eWcoMHwocz0wfENbQSs3Mj4+Ml0pLDB8KGY9MHxDW0ErNzIrND4+Ml0pLDMpLG8oKSx0PTB8cmcoMHxnLDB8USwzKSx3PTB8bygpLGE9MHx5ZygwfGcsMHxRLDYxKSxuPTB8bygpLGY9MHx2ZygwfHMsMHxmLDB8dCwwfHcpLHM9MHxvKCksQ1tBKzcyPj4yXT1mLENbQSs3Mis0Pj4yXT1zLGU9MHxDW0ErNjQ+PjJdLGM9MHxDW0ErNjQrND4+Ml0scz4+PjA8dz4+PjB8KDB8cyk9PSgwfHcpJmY+Pj4wPHQ+Pj4wJiYoZT0wfHZnKDB8ZSwwfGMsMSwwKSxjPTB8bygpLENbQSs2ND4+Ml09ZSxDW0ErNjQrND4+Ml09YyksZT0wfHZnKDB8ZSwwfGMsMHxhLDB8biksbj0wfG8oKSxDW0ErNjQ+PjJdPWUsQ1tBKzY0KzQ+PjJdPW4sbj0wfFVnKDEyOCwwLDEyNyZyfDAsMCksKGU9MHxvKCkpPj4+MD5RPj4+MHwoMHxlKT09KDB8USkmbj4+PjA+Zz4+PjApZm9yKGU9MCxjPTA7OylpZih3PTB8QltJK2U+PjBdLHM9MHx2ZygwfGUsMHxjLDEyNyZyfDAsMCksbygpLEJbQSs4MCtzPj4wXT13LGU9MHx2ZygwfGUsMHxjLDEsMCksISgoYz0wfG8oKSk+Pj4wPFE+Pj4wfCgwfGMpPT0oMHxRKSZlPj4+MDxnPj4+MCkpYnJlYWsgQTtpZighKDA9PSgwfG4pJjA9PSgwfGUpKSl7Yz0wLGE9MDtkb3t3PTB8QltJK2M+PjBdLHM9MHx2ZygwfGMsMHxhLDEyNyZyfDAsMCksbygpLEJbQSs4MCtzPj4wXT13LGM9MHx2ZygwfGMsMHxhLDEsMCksYT0wfG8oKX13aGlsZShhPj4+MDxlPj4+MHwoMHxhKT09KDB8ZSkmYz4+PjA8bj4+PjApfWlmKEQoQSxBKzgwfDAsRSxFKzY0MHwwKSxlPTB8VWcoMHxnLDB8USwwfG4sMHxlKSwoYT0wfG8oKSk+Pj4wPjB8MD09KDB8YSkmZT4+PjA+MTI3KXtjPUkrbnwwO2Rve0QoQSxjLEUsRSs2NDB8MCksYz1jKzEyOHwwLGU9MHx2ZygwfGUsMHxhLC0xMjgsLTEpLGE9MHxvKCl9d2hpbGUoYT4+PjA+MHwwPT0oMHxhKSZlPj4+MD4xMjcpfWVsc2UgYz1JK258MDtpZighKDA9PSgwfChuPTEyNyZlKSkmITApKXtlPTAsYT0wO2Rve0JbQSs4MCtlPj4wXT0wfEJbYytlPj4wXSxlPTB8dmcoMHxlLDB8YSwxLDApLGE9MHxvKCl9d2hpbGUoYT4+PjA8MHwwPT0oMHxhKSZlPj4+MDxuPj4+MCl9TUkoRSw3MDQpfX13aGlsZSgwKTt5PWl9ZnVuY3Rpb24gUihBLEksZyl7QXw9MCxJfD0wO3ZhciBCPTAsQz0wLFE9MCxFPTAsaT0wLGU9MCxvPTAsYz0wLGE9MCxuPTAscj0wLHQ9MCxmPTAsdz0wLHk9MCxzPTAsaD0wLEQ9MCxGPTAscD0wLHU9MCxIPTAsaz0wLGw9MCxfPTAsRz0wLGQ9MCxZPTAsTT0wLFM9MCxVPTAsdj0wLGI9MCxKPTAsUD0wLFI9MCxOPTA7Qz0wfFZnKGd8PTApLFE9MHxWZyhnKzR8MCksRT0wfFZnKGcrOHwwKSxpPTB8VmcoZysxMnwwKSxlPTB8VmcoZysxNnwwKSxvPTB8VmcoZysyMHwwKSxyPTB8VmcoZysyNHwwKSx0PTB8VmcoZysyOHwwKSxmPTB8VmcoSSksdz0wfFZnKEkrNHwwKSx5PTB8VmcoSSs4fDApLGM9MCxhPTE2MzQ3NjA4MDUsbj04NTc3NjA4NzgsZz0wfFZnKEkrMTJ8MCksST0yMDM2NDc3MjM0LEI9MTc5NzI4NTIzNjtkb3twPTB8d0IoKGw9MHx3QigoUj0wfHdCKChrPShsPTB8d0IoZl4oUD1DK2F8MCksMTYpKStlfDApXkMsMTIpKStQXmwsOCkpK2teUiw3KSxOPTB8d0IoKEQ9MHx3Qigodj0wfHdCKChoPShEPTB8d0Iod14oVT1RK258MCksMTYpKStvfDApXlEsMTIpKStVXkQsOCkpK2hediw3KSxiPTB8d0IoKEY9MHx3QigoZD0wfHdCKChfPShGPTB8d0IoeV4oRz1FK0l8MCksMTYpKStyfDApXkUsMTIpKStHXkYsOCkpK19eZCw3KSxZPTB8d0IoKE09MHx3QigoSD0wfHdCKChzPShNPTB8d0IoZ14odT1pK0J8MCksMTYpKSt0fDApXmksMTIpKSt1Xk0sOCkpK3NeSCw3KSxRPTB8d0IoKHI9KGc9MHx3QigoYT0oUz0wfHdCKChKPTB8d0IoTV5OKyhSK1ApLDE2KSkrKEYrXyleTiwxMikpKyhOKyhSK1ApKXwwKV5KLDgpKSsoSisoRitfKSl8MCleUyw3KSxFPTB8d0IoKHQ9KGY9MHx3Qigobj0oXz0wfHdCKChTPTB8d0IoYisoditVKV5sLDE2KSkrKE0rcyleYiwxMikpKyhiKyh2K1UpKXwwKV5TLDgpKSsoUysoTStzKSl8MCleXyw3KSxpPTB8d0IoKGU9KHc9MHx3QigoST0ocz0wfHdCKChfPTB8d0IoWSsoZCtHKV5ELDE2KSkrKGwrayleWSwxMikpKyhZKyhkK0cpKXwwKV5fLDgpKSsoXysobCtrKSl8MClecyw3KSxDPTB8d0IoKG89KHk9MHx3QigoQj0ocz0wfHdCKChGPTB8d0IoSCt1K3BeRiwxNikpKyhEK2gpXnAsMTIpKSsoSCt1K3ApfDApXkYsOCkpKyhGKyhEK2gpKXwwKV5zLDcpLGM9YysxfDB9d2hpbGUoMTAhPSgwfGMpKTtQZyhBLGEpLFBnKEErNHwwLG4pLFBnKEErOHwwLEkpLFBnKEErMTJ8MCxCKSxQZyhBKzE2fDAsZiksUGcoQSsyMHwwLHcpLFBnKEErMjR8MCx5KSxQZyhBKzI4fDAsZyl9ZnVuY3Rpb24gTihBLEksZyxDKXtBfD0wLGd8PTAsQ3w9MDt2YXIgUSxFLGk9MCxlPTA7Zm9yKFE9eSxFPXk9eSs2MyYtNjQseT15KzIyNzJ8MCx5QShFKzE1MzZ8MCxJfD0wKSx5QShFKzEyODB8MCxDKSxlZyhFLGcpLG9nKEUrMjExMnwwLGcpLEVnKEUrMTc5MnwwLEUrMjExMnwwKSxnSShFKzIxMTJ8MCxFKzE3OTJ8MCxFKSxFZyhFKzE5NTJ8MCxFKzIxMTJ8MCksZWcoRSsxNjB8MCxFKzE5NTJ8MCksZ0koRSsyMTEyfDAsRSsxNzkyfDAsRSsxNjB8MCksRWcoRSsxOTUyfDAsRSsyMTEyfDApLGVnKEUrMzIwfDAsRSsxOTUyfDApLGdJKEUrMjExMnwwLEUrMTc5MnwwLEUrMzIwfDApLEVnKEUrMTk1MnwwLEUrMjExMnwwKSxlZyhFKzQ4MHwwLEUrMTk1MnwwKSxnSShFKzIxMTJ8MCxFKzE3OTJ8MCxFKzQ4MHwwKSxFZyhFKzE5NTJ8MCxFKzIxMTJ8MCksZWcoRSs2NDB8MCxFKzE5NTJ8MCksZ0koRSsyMTEyfDAsRSsxNzkyfDAsRSs2NDB8MCksRWcoRSsxOTUyfDAsRSsyMTEyfDApLGVnKEUrODAwfDAsRSsxOTUyfDApLGdJKEUrMjExMnwwLEUrMTc5MnwwLEUrODAwfDApLEVnKEUrMTk1MnwwLEUrMjExMnwwKSxlZyhFKzk2MHwwLEUrMTk1MnwwKSxnSShFKzIxMTJ8MCxFKzE3OTJ8MCxFKzk2MHwwKSxFZyhFKzE5NTJ8MCxFKzIxMTJ8MCksZWcoRSsxMTIwfDAsRSsxOTUyfDApLGZ1bmN0aW9uKEEpe0tnKEF8PTApLFNnKEErNDB8MCksU2coQSs4MHwwKX0oQSksZz0yNTU7Oyl7aWYoMHxCW0UrMTUzNitnPj4wXSl7aT1nLGU9NTticmVha31pZigwfEJbRSsxMjgwK2c+PjBdKXtpPWcsZT01O2JyZWFrfWlmKCFnKWJyZWFrO2c9ZystMXwwfWlmKDU9PSgwfGUpJiYoMHxpKT4tMSlmb3IoO2FJKEUrMjExMnwwLEEpLChnPTB8QltFKzE1MzYraT4+MF0pPDwyND4+MjQ8PTA/Zzw8MjQ+PjI0PDAmJihFZyhFKzE5NTJ8MCxFKzIxMTJ8MCksSUkoRSsyMTEyfDAsRSsxOTUyfDAsRSsoMTYwKigoKGc8PDI0Pj4yNCkvLTJ8MCk8PDI0Pj4yNCl8MCl8MCkpOihFZyhFKzE5NTJ8MCxFKzIxMTJ8MCksZ0koRSsyMTEyfDAsRSsxOTUyfDAsRSsoMTYwKigoMjU1JmcpPj4+MSYyNTUpfDApfDApKSwoZz0wfEJbRSsxMjgwK2k+PjBdKTw8MjQ+PjI0PD0wP2c8PDI0Pj4yNDwwJiYoRWcoRSsxOTUyfDAsRSsyMTEyfDApLEJJKEUrMjExMnwwLEUrMTk1MnwwLDE2MCsoMTIwKigoKGc8PDI0Pj4yNCkvLTJ8MCk8PDI0Pj4yNCl8MCl8MCkpOihFZyhFKzE5NTJ8MCxFKzIxMTJ8MCksQ0koRSsyMTEyfDAsRSsxOTUyfDAsMTYwKygxMjAqKCgyNTUmZyk+Pj4xJjI1NSl8MCl8MCkpLEhnKEEsRSsyMTEyfDApLCgwfGkpPjA7KWk9aSstMXwwO3k9UX1mdW5jdGlvbiBtKEEsSSxnLFEsRSxpLGUsbyl7QXw9MCxJfD0wLGd8PTAsUXw9MCxFfD0wLGl8PTAsZXw9MCxvfD0wO3ZhciBjLGEsbj0wLHI9MCx0PTAsZj0wLHc9MCxzPTAsaD0wO2lmKGE9eSxjPXk9eSs2MyYtNjQseT15KzE2fDAsQ1tjPj4yXT0wLEVCKG8pLFEpe2Y9MCxyPTAsdD0wLG49MDtBOmZvcig7Oyl7Zm9yKHM9bjtuPTB8QltnK3M+PjBdLDI1NT09KDB8KHc9NCZvPzB8VkEobik6MHx6QShuKSkpOyl7aWYoIUUpe3c9MTg7YnJlYWsgQX1pZighKDB8cWcoRSxuKSkpe3c9MTk7YnJlYWsgQX1pZighKChuPXMrMXwwKT4+PjA8UT4+PjApKXt3PTE3O2JyZWFrIEF9cz1ufWlmKGY9dysoZjw8Nil8MCwobj1yKzZ8MCk+Pj4wPjcpe2lmKHI9cistMnwwLHQ+Pj4wPj1JPj4+MCl7dz0xMzticmVha31CW0ErdD4+MF09Zj4+PnIsdD10KzF8MH1lbHNlIHI9bjtpZigobj1zKzF8MCk+Pj4wPj1RPj4+MCl7dz0xNjticmVha319MTM9PSgwfHcpPyhDW2M+PjJdPXMsQ1s4Njc4XT02OCxuPS0xKToxNj09KDB8dyk/KENbYz4+Ml09bixuPTApOjE3PT0oMHx3KT8oQ1tjPj4yXT1uLG49MCk6MTg9PSgwfHcpPyhDW2M+PjJdPXMsbj0wKToxOT09KDB8dykmJihDW2M+PjJdPXMsbj0wKSxyPj4+MD40Pyh0PTAsbj0tMSk6dz0yMX1lbHNlIGY9MCxyPTAsdD0wLG49MCx3PTIxO2Rve2lmKDIxPT0oMHx3KSlpZigoMTw8ciktMSZmKXQ9MCxuPS0xO2Vsc2UgaWYobnwyJm98fChuPTB8bUEoZyxRLGMsRSxyPj4+MSkpLG4pdD0wO2Vsc2UgaWYoMCE9KDB8RSkmJihoPTB8Q1tjPj4yXSk+Pj4wPFE+Pj4wKXtmb3Iobj1oOzspe2lmKCEoMHxxZyhFLDB8QltnK24+PjBdKSkpe3c9MzE7YnJlYWt9aWYoKG49bisxfDApPj4+MD49UT4+PjApe3c9MzA7YnJlYWt9fWlmKDMwPT0oMHx3KSl7Q1tjPj4yXT1uLG49MDticmVha31pZigzMT09KDB8dykpe0NbYz4+Ml09bixuPTA7YnJlYWt9fWVsc2Ugbj0wfXdoaWxlKDApO3JldHVybiByPTB8Q1tjPj4yXSxlP0NbZT4+Ml09ZytyOigwfHIpIT0oMHxRKSYmKENbODY3OF09Mjgsbj0tMSksMHxpJiYoQ1tpPj4yXT10KSx5PWEsMHxufWZ1bmN0aW9uIEwoQSxJLGcpe0l8PTAsZ3w9MDt2YXIgUSxFLGksZT0wLG89MCxjPTA7c3dpdGNoKGk9eSxFPXk9eSs2MyYtNjQseT15KzE2fDAsYz0wfENbMjArKEF8PTApPj4yXSxRPTB8Q1tBKzQ+PjJdLENbQSsyMD4+Ml09MCxDW0ErND4+Ml09MCwwfGcpe2Nhc2UgMjowfG9JKEksMzM2NTMsOSk/ST0tMzI6KEk9SSs5fDAsbz00KTticmVhaztjYXNlIDE6MHxvSShJLDMzNjYzLDgpP0k9LTMyOihJPUkrOHwwLG89NCk7YnJlYWs7ZGVmYXVsdDpJPS0yNn1kb3tpZig0PT0oMHxvKSlpZigwPT0oMHxvSShJLDMzNjcyLDMpKSYmMCE9KDB8KGU9MHxxQShJKzN8MCxFKzR8MCkpKSlpZigxOT09KDB8Q1tFKzQ+PjJdKSlpZigwfG9JKGUsMzM2NzYsMykpST0tMzI7ZWxzZXtpZighKEk9MHxxQShlKzN8MCxFKzR8MCkpKXtJPS0zMjticmVha31pZihDW0ErNDQ+PjJdPUNbRSs0Pj4yXSwwfG9JKEksMzM2ODAsMykpST0tMzI7ZWxzZXtpZighKEk9MHxxQShJKzN8MCxFKzR8MCkpKXtJPS0zMjticmVha31pZihDW0ErNDA+PjJdPUNbRSs0Pj4yXSwwfG9JKEksMzM2ODQsMykpST0tMzI7ZWxzZXtpZighKEk9MHxxQShJKzN8MCxFKzR8MCkpKXtJPS0zMjticmVha31pZihvPTB8Q1tFKzQ+PjJdLENbQSs0OD4+Ml09byxDW0ErNTI+PjJdPW8sST0obz0zNj09KDB8QltJPj4wXSkpP0krMXwwOkksbyl7aWYoQ1tFKzQ+PjJdPWMsMHxtKG89MHxDW0ErMTY+PjJdLGMsSSwwfFpBKEkpLDAsRSs0fDAsRSwzKSl7ST0tMzI7YnJlYWt9aWYoQ1tBKzIwPj4yXT1DW0UrND4+Ml0sST0wfENbRT4+Ml0sST0oYz0zNj09KDB8QltJPj4wXSkpP0krMXwwOkksYyl7aWYoQ1tFKzQ+PjJdPVEsMHxtKGM9MHxDW0E+PjJdLFEsSSwwfFpBKEkpLDAsRSs0fDAsRSwzKSl7ST0tMzI7YnJlYWt9Q1tBKzQ+PjJdPUNbRSs0Pj4yXSxnPTB8Q1tFPj4yXSwoST0wfG9BKEEpKXx8KEk9MD09KDB8QltnPj4wXSk/MDotMzIpfWVsc2UgST0tMzJ9ZWxzZSBJPS0zMn19fWVsc2UgST0tMjY7ZWxzZSBJPS0zMn13aGlsZSgwKTtyZXR1cm4geT1pLDB8SX1mdW5jdGlvbiB4KEEsSSxnKXtBfD0wLEl8PTA7dmFyIEI9MCxDPTAsUT0wLEU9MCxpPTAsZT0wLG89MCxjPTAsYT0wLG49MCxyPTAsdD0wLGY9MCx3PTAseT0wLHM9MCxoPTAsRD0wLEY9MCxwPTAsdT0wLEg9MCxrPTAsbD0wLF89MCxHPTAsZD0wLFk9MCxNPTAsUz0wLFU9MDtRPTB8VmcoZ3w9MCksbj0wfFZnKGcrNHwwKSxyPTB8VmcoZys4fDApLHQ9MHxWZyhnKzEyfDApLGk9MHxWZyhnKzE2fDApLGU9MHxWZyhnKzIwfDApLG89MHxWZyhnKzI0fDApLGM9MHxWZyhnKzI4fDApLHc9MHxWZyhJKSx5PTB8VmcoSSs0fDApLHM9MHxWZyhJKzh8MCksQj0yMCxDPTE2MzQ3NjA4MDUsRT0yMDM2NDc3MjM0LGE9MTc5NzI4NTIzNixmPTg1Nzc2MDg3OCxnPTB8VmcoSSsxMnwwKTtkb3tZPSgwfHdCKChGPSgwfHdCKChIPSgwfHdCKChfPSgwfHdCKGUrQ3wwLDcpKV50KStDfDAsOSkpXnMpK198MCwxMykpXmUpK0h8MCwxOCkpXkMsbD0oMHx3QigoVT0oMHx3QigoRD0oMHx3QigodT0oMHx3QihmK1F8MCw3KSleZykrZnwwLDkpKV5vKSt1fDAsMTMpKV5RKStEfDAsMTgpKV5mLHA9KDB8d0IoKGQ9KDB8d0IoKFM9KDB8d0IoKGg9KDB8d0IoRSt3fDAsNykpXmMpK0V8MCw5KSlebikraHwwLDEzKSledykrU3wwLDE4KSleRSxJPSgwfHdCKChrPSgwfHdCKChHPSgwfHdCKChNPSgwfHdCKGEraXwwLDcpKV5yKSthfDAsOSkpXnkpK018MCwxMykpXmkpK0d8MCwxOCkpXmEsQz0oMHx3Qigocj0oMHx3Qigobj0oMHx3QigoUT0oMHx3QihNK1l8MCw3KSleVSkrWXwwLDkpKV5TKStRfDAsMTMpKV5NKStufDAsMTgpKV5ZLGY9KDB8d0IoKHQ9KDB8d0IoKHk9KDB8d0IoKHc9KDB8d0IobCtffDAsNykpXmQpK2x8MCw5KSleRykrd3wwLDEzKSleXykreXwwLDE4KSlebCxFPSgwfHdCKChnPSgwfHdCKChzPSgwfHdCKChpPSgwfHdCKHArdXwwLDcpKV5rKStwfDAsOSkpXkgpK2l8MCwxMykpXnUpK3N8MCwxOCkpXnAsYT0oMHx3QigoYz0oMHx3Qigobz0oMHx3QigoZT0oMHx3QihJK2h8MCw3KSleRikrSXwwLDkpKV5EKStlfDAsMTMpKV5oKStvfDAsMTgpKV5JLEI9QistMnwwfXdoaWxlKDAhPSgwfEIpKTtQZyhBLEMpLFBnKEErNHwwLGYpLFBnKEErOHwwLEUpLFBnKEErMTJ8MCxhKSxQZyhBKzE2fDAsdyksUGcoQSsyMHwwLHkpLFBnKEErMjR8MCxzKSxQZyhBKzI4fDAsZyl9ZnVuY3Rpb24gSyhBLEksZyxRKXtJfD0wLGd8PTAsUXw9MDt2YXIgRT0wLGk9MCxlPTAsYz0wLGE9MCxuPTAscj0wLHQ9MDtpZigwPT0oMHwoaT0wfENbNTYrKEF8PTApPj4yXSkpJjA9PSgwfChFPTB8Q1tBKzU2KzQ+PjJdKSkpcj03O2Vsc2V7aWYoYz0wfFVnKDE2LDAsMHxpLDB8RSksISgwPT0oMHwobj0oYT0wfG8oKSk+Pj4wPlE+Pj4wfCgwfGEpPT0oMHxRKSZjPj4+MD5nPj4+MD9nOmMpKSYwPT0oMHwoYT1hPj4+MD5RPj4+MHwoMHxhKT09KDB8USkmYz4+PjA+Zz4+PjA/UTphKSkpKXtjPTAsZT0wO2Rve3Q9MHxCW0krYz4+MF0saT0wfHZnKDB8aSwwfEUsMHxjLDB8ZSksbygpLEJbQSs2NCtpPj4wXT10LGM9MHx2ZygwfGMsMHxlLDEsMCksZT0wfG8oKSxpPTB8Q1tBKzU2Pj4yXSxFPTB8Q1tBKzU2KzQ+PjJdfXdoaWxlKGU+Pj4wPGE+Pj4wfCgwfGUpPT0oMHxhKSZjPj4+MDxuPj4+MCl9dD0wfHZnKDB8aSwwfEUsMHxuLDB8YSksYz0wfG8oKSxDW0ErNTY+PjJdPXQsQ1tBKzU2KzQ+PjJdPWMsYz4+PjA8MHwwPT0oMHxjKSZ0Pj4+MDwxNnx8KGc9MHxVZygwfGcsMHxRLDB8biwwfGEpLFE9MHxvKCksUyhBLEErNjR8MCwxNiwwKSxDW0ErNTY+PjJdPTAsQ1tBKzU2KzQ+PjJdPTAsST1JK258MCxyPTcpfWlmKDc9PSgwfHIpJiYoRT0tMTYmZyxRPj4+MD4wfDA9PSgwfFEpJmc+Pj4wPjE1PyhpPTB8VWcoMHxnLDB8USwwfEUsMHxRKSx0PTB8bygpLFMoQSxJLEUsUSksUT10LEk9SStFfDApOmk9ZywhKDA9PSgwfGkpJjA9PSgwfFEpKSkpe0U9MCxnPTA7ZG97cj0wfEJbSStFPj4wXSx0PTB8dmcoMHxDW0ErNTY+PjJdLDB8Q1tBKzU2KzQ+PjJdLDB8RSwwfGcpLG8oKSxCW0ErNjQrdD4+MF09cixFPTB8dmcoMHxFLDB8ZywxLDApLGc9MHxvKCl9d2hpbGUoZz4+PjA8UT4+PjB8KDB8Zyk9PSgwfFEpJkU+Pj4wPGk+Pj4wKTtyPTB8dmcoMHxDW0ErNTY+PjJdLDB8Q1tBKzU2KzQ+PjJdLDB8aSwwfFEpLHQ9MHxvKCksQ1tBKzU2Pj4yXT1yLENbQSs1Nis0Pj4yXT10fX1mdW5jdGlvbiBYKEEsSSl7QXw9MCxJfD0wO3ZhciBnPTAsaT0wLGU9MCxjPTAsYT0wLG49MCxyPTAsdD0wLGY9MCx3PTAseT0wO0E6ZG97aWYoMHxBKXtkb3tpZigyPT0oMHxDW0ErMzY+PjJdKSl7aWYoMD09KDB8KGc9MHxDW0k+PjJdKSkmJigwfFFbSSs4Pj4wXSk8PTEpe2k9NjticmVha310PTB8Q1tBKzQ+PjJdLHI9MH1lbHNlIGk9Nn13aGlsZSgwKTtpZig2PT0oMHxpKSYmKFFBKEEsSSx0PTB8Q1tBKzQ+PjJdKSxnPTB8Q1tJPj4yXSxyPTEpLGc9MD09KDB8ZykmKGU9MHxCW0krOD4+MF0pPDwyND4+MjQ9PTA/MjowLGk9MHxDW0ErMjQ+PjJdLGE9MHxFKGksMHxDW0krND4+Ml0pLG49MHxDW0ErMjA+PjJdLGU9YStnKygwfEUobiwyNTUmZSkpfDAsZz4+PjA8bj4+PjApZm9yKGM9aSxuPWUsaT0oMD09KDB8KGU+Pj4wKSUoaT4+PjApKT9pKy0xfDA6LTEpK2V8MDs7KXtpZihhPTE9PSgwfChuPj4+MCklKGM+Pj4wKSk/bistMXwwOmksaT1yP3QrKGc8PDMpfDA6KDB8Q1s0KygwfENbQT4+Ml0pPj4yXSkrKGE8PDEwKXwwLHk9MHxDWyhjPWkpPj4yXSxjPTB8QWcoMHxDW2MrND4+Ml0sMCwwfENbQSsyOD4+Ml0sMCksZT0wfG8oKSxmPTB8Q1tJPj4yXSxpPTB8QltJKzg+PjBdLHc9MHxDW0krND4+Ml0sYz0wPT0oMHxmKSZpPDwyND4+MjQ9PTA/dzpjLENbSSsxMj4+Ml09ZyxlPTB8REEoQSxmLGksZyx5LDEmKCgwfGMpPT0oMHx3KT8wPT0oMHwoMD09KDB8ZikmaTw8MjQ+PjI0PT0wPzA6ZSkpOjApKSxlPShpPTB8Q1s0KygwfENbQT4+Ml0pPj4yXSkrKCgwfEUoMHxDW0ErMjQ+PjJdLGMpKTw8MTApKyhlPDwxMCl8MCxjPWkrKG48PDEwKXwwLGY/SChpKyhhPDwxMCl8MCxlLGMpOmsoaSsoYTw8MTApfDAsZSxjKSwoZz1nKzF8MCk+Pj4wPj0oMHxDW0ErMjA+PjJdKT4+PjApYnJlYWsgQTtjPTB8Q1tBKzI0Pj4yXSxuPW4rMXwwLGk9YSsxfDB9fX13aGlsZSgwKX1mdW5jdGlvbiBqKEEsSSxnKXt2YXIgQixRO2d8PTAsQj15LFE9eT15KzYzJi02NCx5PXkrNDAwfDAsMD09KDB8KEF8PTApKXwwPT0oMHwoSXw9MCkpfHwoSEkoUSwwLDAsNjQpLFBnKFErMzg0fDAsMHxDW0krNDg+PjJdKSxYZyhRLFErMzg0fDAsNCwwKSxQZyhRKzM4NHwwLDB8Q1tJKzQ+PjJdKSxYZyhRLFErMzg0fDAsNCwwKSxQZyhRKzM4NHwwLDB8Q1tJKzQ0Pj4yXSksWGcoUSxRKzM4NHwwLDQsMCksUGcoUSszODR8MCwwfENbSSs0MD4+Ml0pLFhnKFEsUSszODR8MCw0LDApLFBnKFErMzg0fDAsMTkpLFhnKFEsUSszODR8MCw0LDApLFBnKFErMzg0fDAsZyksWGcoUSxRKzM4NHwwLDQsMCksUGcoUSszODR8MCwwfENbSSsxMj4+Ml0pLFhnKFEsUSszODR8MCw0LDApLDB8KGc9MHxDW0krOD4+Ml0pJiYoWGcoUSxnLDB8Q1tJKzEyPj4yXSwwKSwxJkNbSSs1Nj4+Ml18MCkmJihNSSgwfENbSSs4Pj4yXSwwfENbSSsxMj4+Ml0pLENbSSsxMj4+Ml09MCksUGcoUSszODR8MCwwfENbSSsyMD4+Ml0pLFhnKFEsUSszODR8MCw0LDApLDB8KGc9MHxDW0krMTY+PjJdKSYmWGcoUSxnLDB8Q1tJKzIwPj4yXSwwKSxQZyhRKzM4NHwwLDB8Q1tJKzI4Pj4yXSksWGcoUSxRKzM4NHwwLDQsMCksMHwoZz0wfENbSSsyND4+Ml0pJiYoWGcoUSxnLDB8Q1tJKzI4Pj4yXSwwKSwyJkNbSSs1Nj4+Ml18MCkmJihNSSgwfENbSSsyND4+Ml0sMHxDW0krMjg+PjJdKSxDW0krMjg+PjJdPTApLFBnKFErMzg0fDAsMHxDW0krMzY+PjJdKSxYZyhRLFErMzg0fDAsNCwwKSwwfChnPTB8Q1tJKzMyPj4yXSkmJlhnKFEsZywwfENbSSszNj4+Ml0sMCksZmcoUSxBLDY0KSkseT1CfWZ1bmN0aW9uIFQoQSxJLGcsUSl7QXw9MCxJfD0wLGd8PTAsUXw9MDt2YXIgRSxpLGU9MCxvPTAsYz0wO2lmKEU9eSxpPXk9eSs2MyYtNjQseT15KzUyOHwwLENbaSs1MTI+PjJdPTAsUGcoaSs1MTJ8MCxJKSxJPj4+MDw2NSkoMHxISShpLDAsMCxJKSk+PTAmJihYZyhpLGkrNTEyfDAsNCwwKSxYZyhpLGcsUSwwKSxmZyhpLEEsSSkpO2Vsc2UgQTpkb3tpZigoMHxISShpLDAsMCw2NCkpPj0wJiYoWGcoaSxpKzUxMnwwLDQsMCksWGcoaSxnLFEsMCksKDB8ZmcoaSxpKzQ0OHwwLDY0KSk+PTApKXtvPWkrNDQ4fDAsYz0oZT1BKSszMnwwO2Rve0JbZT4+MF09MHxCW28+PjBdLGU9ZSsxfDAsbz1vKzF8MH13aGlsZSgoMHxlKTwoMHxjKSk7bz1pKzQ0OHwwLGM9NjQrKGU9aSszODR8MCl8MDtkb3tDW2U+PjJdPUNbbz4+Ml0sZT1lKzR8MCxvPW8rNHwwfXdoaWxlKCgwfGUpPCgwfGMpKTtpZigoSSstMzJ8MCk+Pj4wPjY0KXtRPUErMzJ8MCxnPUkrLTMyfDA7ZG97aWYoKDB8VEkoaSs0NDh8MCw2NCxpKzM4NHwwLDY0LDAsMCwwKSk8MClicmVhayBBO289aSs0NDh8MCxjPShlPVEpKzMyfDA7ZG97QltlPj4wXT0wfEJbbz4+MF0sZT1lKzF8MCxvPW8rMXwwfXdoaWxlKCgwfGUpPCgwfGMpKTtnPWcrLTMyfDAsUT1RKzMyfDAsbz1pKzQ0OHwwLGM9NjQrKGU9aSszODR8MCl8MDtkb3tDW2U+PjJdPUNbbz4+Ml0sZT1lKzR8MCxvPW8rNHwwfXdoaWxlKCgwfGUpPCgwfGMpKX13aGlsZShnPj4+MD42NCl9ZWxzZSBRPUErMzJ8MCxnPUkrLTMyfDA7KDB8VEkoaSs0NDh8MCxnLGkrMzg0fDAsNjQsMCwwLDApKT49MCYmQkEoMHxRLGkrNDQ4fDAsMHxnKX19d2hpbGUoMCk7TUkoaSwzODQpLHk9RX1mdW5jdGlvbiBxKEEsSSxnLEMsaSl7QXw9MCxJfD0wLGd8PTAsQ3w9MDt2YXIgZT0wLG89MCxhPTAsbj0wLHI9MCx0PTA7RUIoaXw9MCksbz0oMHxFKChDPj4+MCkvM3wwLC0zKSkrQ3wwLGU9KChDPj4+MCkvM3wwKTw8Mjtkb3tpZihvKXtpZigyJmkpe2U9KDJ8ZSkrKG8+Pj4xKXwwO2JyZWFrfWU9ZSs0fDA7YnJlYWt9fXdoaWxlKDApO2lmKGU+Pj4wPj1JPj4+MCYmU0IoKSw0JmkpaWYoMHxDKXtuPTAsaT0wLG89MCxyPTA7ZG97aWYodD1yLHI9cisxfDAsbj1uPDw4fDB8UVtnK3Q+PjBdLChpPWkrOHwwKT4+PjA+NSlmb3IoOzspe2lmKHQ9MjU1JigwfFhJKG4+Pj4oaT1pKy02fDApJjYzKSksYT1vKzF8MCxCW0Erbz4+MF09dCwhKGk+Pj4wPjUpKXtvPWE7YnJlYWt9bz1hfX13aGlsZSgoMHxyKSE9KDB8QykpO2kmJih0PTI1NSYoMHxYSShuPDw2LWkmNjMpKSxCW0Erbz4+MF09dCxvPW8rMXwwKX1lbHNlIG89MDtlbHNlIGlmKDB8Qyl7bj0wLGk9MCxvPTAscj0wO2Rve2lmKGE9cixyPXIrMXwwLG49bjw8OHwwfFFbZythPj4wXSwoaT1pKzh8MCk+Pj4wPjUpZm9yKDs7KXtpZih0PTI1NSYoMHxqSShuPj4+KGk9aSstNnwwKSY2MykpLGE9bysxfDAsQltBK28+PjBdPXQsIShpPj4+MD41KSl7bz1hO2JyZWFrfW89YX19d2hpbGUoKDB8cikhPSgwfEMpKTtpJiYodD0yNTUmKDB8akkobjw8Ni1pJjYzKSksQltBK28+PjBdPXQsbz1vKzF8MCl9ZWxzZSBvPTA7cmV0dXJuIGU+Pj4wPG8+Pj4wJiZjKDM0NTY0LDM0NTgzLDIzMCwzNDU5OSksZT4+PjA+bz4+PjA/WUEoQStvfDAsNjEsZS1vfDApOmU9byxZQShBK2V8MCwwLCgodD1lKzF8MCk+Pj4wPEk+Pj4wP0k6dCktZXwwKSwwfEF9ZnVuY3Rpb24gVihBLEksZyxFLGksZSxjLGEpe0F8PTAsSXw9MCxpfD0wLGV8PTAsY3w9MCxhfD0wO3ZhciBuLHIsdD0wLGY9MDtpZihuPXkscj15PXkrNjMmLTY0LHk9eSsxMTJ8MCwhKDA9PSgwfChnfD0wKSkmMD09KDB8KEV8PTApKSkpe3Q9KGY9cikrMzJ8MDtkb3tCW2Y+PjBdPTB8QlthPj4wXSxmPWYrMXwwLGE9YSsxfDB9d2hpbGUoKDB8Zik8KDB8dCkpO2E9UVtpKzQ+PjBdfFFbaSs0KzE+PjBdPDw4fFFbaSs0KzI+PjBdPDwxNnxRW2krNCszPj4wXTw8MjQsQ1tyKzk2Pj4yXT1RW2k+PjBdfFFbaSsxPj4wXTw8OHxRW2krMj4+MF08PDE2fFFbaSszPj4wXTw8MjQsQ1tyKzk2KzQ+PjJdPWEsYT04O2Rve0Jbcis5NithPj4wXT1lLGU9MHx5ZygwfGUsMHxjLDgpLGM9MHxvKCksYT1hKzF8MH13aGlsZSgxNiE9KDB8YSkpO2lmKEU+Pj4wPjB8MD09KDB8RSkmZz4+PjA+NjMpZm9yKGU9RTs7KXtpQihyKzMyfDAscis5NnwwLHIpLGM9MDtkb3tCW0ErYz4+MF09QltyKzMyK2M+PjBdXkJbSStjPj4wXSxjPWMrMXwwfXdoaWxlKDY0IT0oMHxjKSk7Zm9yKGE9OCxjPTE7Yz1jKygwfFFbKEU9cis5NithfDApPj4wXSl8MCxCW0U+PjBdPWMsMTYhPSgwfChhPWErMXwwKSk7KWM+Pj49ODtpZihjPTB8dmcoMHxnLDB8ZSwtNjQsLTEpLEE9QSs2NHwwLEk9SSs2NHwwLCEoKGE9MHxvKCkpPj4+MD4wfDA9PSgwfGEpJmM+Pj4wPjYzKSl7ZT1jO2JyZWFrfWc9YyxlPWF9ZWxzZSBlPWcsYT1FO2lmKCEoMD09KDB8ZSkmMD09KDB8YSkpJiYoaUIociszMnwwLHIrOTZ8MCxyKSwwfGUpKXtjPTA7ZG97QltBK2M+PjBdPUJbciszMitjPj4wXV5CW0krYz4+MF0sYz1jKzF8MH13aGlsZSgoMHxjKSE9KDB8ZSkpfU1JKHIrMzJ8MCw2NCksTUkociwzMil9eT1ufWZ1bmN0aW9uIHooQSxJKXtJfD0wO3ZhciBnLFEsRSxpLGUsYyxhPTAsbj0wLHI9MCx0PTA7MD09KDB8KG49MHxDWzU2KyhBfD0wKT4+Ml0pKSYwPT0oMHwoYT0wfENbQSs1Nis0Pj4yXSkpfHwoQltBKzY0K24+PjBdPTEsYT0wfHZnKDB8biwwfGEsMSwwKSwocj0wfG8oKSk+Pj4wPDB8MD09KDB8cikmYT4+PjA8MTYmJllBKEErNjQrYXwwLDAsMTQtbisxfDApLEJbQSs4MD4+MF09MSxTKEEsQSs2NHwwLDE2LDApKSxuPTB8Q1tBKzI0Pj4yXSx0PShFPSgtNjcxMDg4NjR8KFE9KCh0PSgocj0oMHxDW0ErMjg+PjJdKSsobj4+PjI2KXwwKT4+PjI2KSsoMHxDW0ErMzI+PjJdKXwwKT4+PjI2KSsoMHxDW0ErMzY+PjJdKXwwKSkrKCgoKCgoaT0oKGM9KDUqKFE+Pj4yNil8MCkrKDB8Q1tBKzIwPj4yXSl8MCk+Pj4yNikrKDY3MTA4ODYzJm4pKygoNSsoNjcxMDg4NjMmYyl8MCk+Pj4yNil8MCk+Pj4yNikrKDY3MTA4ODYzJnIpfDApPj4+MjYpKyg2NzEwODg2MyZ0KXwwKT4+PjI2KXwwKT4+MzEmNjcxMDg4NjMmdHwoZT0oRT4+PjMxKS0xJjY3MTA4ODYzKSYoKChpPj4+MjYpKyg2NzEwODg2MyZyKXwwKT4+PjI2KSsoNjcxMDg4NjMmdCksZz0wfHZnKEU+PjMxJjY3MTA4ODYzJmN8ZSY1Kyg2NzEwODg2MyZjKXwoRT4+MzEmKGM+Pj4yNikrKDY3MTA4ODYzJm4pfGUmaSk8PDI2fDAsMCwwfENbQSs0MD4+Ml0sMCksYT0wfG8oKSxhPTB8dmcoMHwobj0wfHZnKChFPj4zMSYoYz4+PjI2KSsoNjcxMDg4NjMmbil8ZSZpKT4+PjZ8KEU+PjMxJjY3MTA4ODYzJnJ8ZSYoaT4+PjI2KSsoNjcxMDg4NjMmcikpPDwyMHwwLDAsMHxDW0ErNDQ+PjJdLDApKSwwfG8oKSwwfGEsMCksbj0wfG8oKSxuPTB8dmcoMHwocj0wfHZnKChFPj4zMSY2NzEwODg2MyZyfGUmKGk+Pj4yNikrKDY3MTA4ODYzJnIpKT4+PjEyfHQ8PDE0fDAsMCwwfENbQSs0OD4+Ml0sMCkpLDB8bygpLDB8biwwKSxyPTB8bygpLHI9MHx2ZygwfCh0PTB8dmcoKChFPj4+MzEpLTEmRXxFPj4zMSZRKTw8OHx0Pj4+MTh8MCwwLDB8Q1tBKzUyPj4yXSwwKSksMHxvKCksMHxyLDApLG8oKSxQZyhJLGcpLFBnKEkrNHwwLGEpLFBnKEkrOHwwLG4pLFBnKEkrMTJ8MCxyKSxNSShBLDg4KX1mdW5jdGlvbiBXKEEsSSl7dmFyIGcsQjtBfD0wLGc9eSxCPXk9eSs2MyYtNjQseT15KzE5MnwwLF8oQisxNDR8MCxJfD0wKSxfKEIrOTZ8MCxCKzE0NHwwKSxfKEIrOTZ8MCxCKzk2fDApLHUoQis5NnwwLEksQis5NnwwKSx1KEIrMTQ0fDAsQisxNDR8MCxCKzk2fDApLF8oQis0OHwwLEIrMTQ0fDApLHUoQis5NnwwLEIrOTZ8MCxCKzQ4fDApLF8oQis0OHwwLEIrOTZ8MCksST0xO2Rve18oQis0OHwwLEIrNDh8MCksST1JKzF8MH13aGlsZSg1IT0oMHxJKSk7dShCKzk2fDAsQis0OHwwLEIrOTZ8MCksXyhCKzQ4fDAsQis5NnwwKSxJPTE7ZG97XyhCKzQ4fDAsQis0OHwwKSxJPUkrMXwwfXdoaWxlKDEwIT0oMHxJKSk7dShCKzQ4fDAsQis0OHwwLEIrOTZ8MCksXyhCLEIrNDh8MCksST0xO2Rve18oQixCKSxJPUkrMXwwfXdoaWxlKDIwIT0oMHxJKSk7dShCKzQ4fDAsQixCKzQ4fDApLF8oQis0OHwwLEIrNDh8MCksST0xO2Rve18oQis0OHwwLEIrNDh8MCksST1JKzF8MH13aGlsZSgxMCE9KDB8SSkpO3UoQis5NnwwLEIrNDh8MCxCKzk2fDApLF8oQis0OHwwLEIrOTZ8MCksST0xO2Rve18oQis0OHwwLEIrNDh8MCksST1JKzF8MH13aGlsZSg1MCE9KDB8SSkpO3UoQis0OHwwLEIrNDh8MCxCKzk2fDApLF8oQixCKzQ4fDApLEk9MTtkb3tfKEIsQiksST1JKzF8MH13aGlsZSgxMDAhPSgwfEkpKTt1KEIrNDh8MCxCLEIrNDh8MCksXyhCKzQ4fDAsQis0OHwwKSxJPTE7ZG97XyhCKzQ4fDAsQis0OHwwKSxJPUkrMXwwfXdoaWxlKDUwIT0oMHxJKSk7dShCKzk2fDAsQis0OHwwLEIrOTZ8MCksXyhCKzk2fDAsQis5NnwwKSxJPTE7ZG97XyhCKzk2fDAsQis5NnwwKSxJPUkrMXwwfXdoaWxlKDUhPSgwfEkpKTt1KEEsQis5NnwwLEIrMTQ0fDApLHk9Z31mdW5jdGlvbiBPKEEsSSl7QXw9MDt2YXIgZyxDLFE9MDtmb3IoZz15LEM9eT15KzYzJi02NCx5PXkrMTc2MHwwLGVnKEMsSXw9MCksb2coQysxNjAwfDAsSSksRWcoQysxMjgwfDAsQysxNjAwfDApLGdJKEMrMTYwMHwwLEMrMTI4MHwwLEMpLEVnKEMrMTQ0MHwwLEMrMTYwMHwwKSxlZyhDKzE2MHwwLEMrMTQ0MHwwKSxnSShDKzE2MDB8MCxDKzEyODB8MCxDKzE2MHwwKSxFZyhDKzE0NDB8MCxDKzE2MDB8MCksZWcoQyszMjB8MCxDKzE0NDB8MCksZ0koQysxNjAwfDAsQysxMjgwfDAsQyszMjB8MCksRWcoQysxNDQwfDAsQysxNjAwfDApLGVnKEMrNDgwfDAsQysxNDQwfDApLGdJKEMrMTYwMHwwLEMrMTI4MHwwLEMrNDgwfDApLEVnKEMrMTQ0MHwwLEMrMTYwMHwwKSxlZyhDKzY0MHwwLEMrMTQ0MHwwKSxnSShDKzE2MDB8MCxDKzEyODB8MCxDKzY0MHwwKSxFZyhDKzE0NDB8MCxDKzE2MDB8MCksZWcoQys4MDB8MCxDKzE0NDB8MCksZ0koQysxNjAwfDAsQysxMjgwfDAsQys4MDB8MCksRWcoQysxNDQwfDAsQysxNjAwfDApLGVnKEMrOTYwfDAsQysxNDQwfDApLGdJKEMrMTYwMHwwLEMrMTI4MHwwLEMrOTYwfDApLEVnKEMrMTQ0MHwwLEMrMTYwMHwwKSxlZyhDKzExMjB8MCxDKzE0NDB8MCksT2coQSksUT0yNTI7b2coQysxNjAwfDAsQSksKEk9MHxCWzMxODQwK1E+PjBdKTw8MjQ+PjI0PD0wP0k8PDI0Pj4yNDwwJiYoRWcoQysxNDQwfDAsQysxNjAwfDApLElJKEMrMTYwMHwwLEMrMTQ0MHwwLEMrKDE2MCooKChJPDwyND4+MjQpLy0yfDApPDwyND4+MjQpfDApfDApKTooRWcoQysxNDQwfDAsQysxNjAwfDApLGdJKEMrMTYwMHwwLEMrMTQ0MHwwLEMrKDE2MCooKDI1NSZJKT4+PjEmMjU1KXwwKXwwKSksRWcoQSxDKzE2MDB8MCksUTspUT1RKy0xfDA7eT1nfWZ1bmN0aW9uIFooQSxJLGcsQixRLEUsaSl7QXw9MCxJfD0wLGd8PTAsQnw9MCxRfD0wO3ZhciBlLGMsYT0wLG49MDtyZXR1cm4gZT15LGM9eT15KzYzJi02NCx5PXkrMzUyfDAseChjLEV8PTAsaXw9MCksQT4+PjA+Zz4+PjAmJjA8UT4+PjB8MD09KDB8USkmKEEtZ3wwKT4+PjA8Qj4+PjA/bj01Omc+Pj4wPkE+Pj4wJiYwPFE+Pj4wfDA9PSgwfFEpJihnLUF8MCk+Pj4wPEI+Pj4wP249NTphPWcsNT09KDB8bikmJihZSSgwfEEsMHxnLDB8QiksYT1BKSxDW2MrMzI+PjJdPTAsQ1tjKzMyKzQ+PjJdPTAsQ1tjKzMyKzg+PjJdPTAsQ1tjKzMyKzEyPj4yXT0wLENbYyszMisxNj4+Ml09MCxDW2MrMzIrMjA+PjJdPTAsQ1tjKzMyKzI0Pj4yXT0wLENbYyszMisyOD4+Ml09MCwwPT0oMHwoaT1RPj4+MD4wfDA9PSgwfFEpJkI+Pj4wPjMyPzMyOkIpKSYwPT0oMHwoZz1RPj4+MD4wfDA9PSgwfFEpJkI+Pj4wPjMyPzA6USkpfHxCQShjKzMyKzMyfDAsMHxhLC0yLShuPX5RPj4+MD40Mjk0OTY3Mjk1fC0xPT0oMHx+USkmfkI+Pj4wPjQyOTQ5NjcyNjM/fkI6LTMzKSsxfDApLFlnKGMrMzJ8MCxjKzMyfDAsbj0wfHZnKDB8aSwwfGcsMzIsMCksMHxvKCksRSsxNnwwLGMpLGdCKGMrOTZ8MCxjKzMyfDApLDA9PSgwfGkpJjA9PSgwfGcpfHxCQSgwfEEsYyszMiszMnwwLC0yLShuPX5RPj4+MD40Mjk0OTY3Mjk1fC0xPT0oMHx+USkmfkI+Pj4wPjQyOTQ5NjcyNjM/fkI6LTMzKSsxfDApLE1JKGMrMzJ8MCw2NCksUT4+PjA+MHwwPT0oMHxRKSZCPj4+MD4zMiYmX2coQStpfDAsYStpfDAsbj0wfFVnKDB8QiwwfFEsMHxpLDB8ZyksMHxvKCksRSsxNnwwLGMpLE1JKGMsMzIpLGJnKGMrOTZ8MCxBLEIsUSksSUIoYys5NnwwLEkpLE1JKGMrOTZ8MCwyNTYpLHk9ZSwwfWZ1bmN0aW9uICQoQSxJLGcsQyl7QXw9MCxJfD0wLGd8PTAsQ3w9MDt2YXIgRT0wLGk9MCxlPTAsYz0wO0E6ZG97aWYoISgwPT0oMHxnKSYwPT0oMHxDKSkpe2ZvcihFPVFbQSszNTI+PjBdfFFbQSszNTIrMT4+MF08PDh8UVtBKzM1MisyPj4wXTw8MTZ8UVtBKzM1MiszPj4wXTw8MjQsZT1JO0k9QSs5NitFfDAsQz4+PjA+MHwwPT0oMHxDKSZnPj4+MD4oYz0yNTYtRXwwKT4+PjA7KXtCQSgwfEksMHxlLDB8YyksST0oUVtBKzM1Mj4+MF18UVtBKzM1MisxPj4wXTw8OHxRW0ErMzUyKzI+PjBdPDwxNnxRW0ErMzUyKzM+PjBdPDwyNCkrY3wwLEJbQSszNTI+PjBdPUksQltBKzM1MisxPj4wXT1JPj44LEJbQSszNTIrMj4+MF09ST4+MTYsQltBKzM1MiszPj4wXT1JPj4yNCxhQShBLDEyOCwwKSxzKEEsQSs5NnwwKSxFPUErMjI0fDAsaT0xMjgrKEk9QSs5NnwwKXwwO2Rve0JbST4+MF09MHxCW0U+PjBdLEk9SSsxfDAsRT1FKzF8MH13aGlsZSgoMHxJKTwoMHxpKSk7aWYoRT0oUVtBKzM1Mj4+MF18UVtBKzM1MisxPj4wXTw8OHxRW0ErMzUyKzI+PjBdPDwxNnxRW0ErMzUyKzM+PjBdPDwyNCktMTI4fDAsQltBKzM1Mj4+MF09RSxCW0ErMzUyKzE+PjBdPUU+PjgsQltBKzM1MisyPj4wXT1FPj4xNixCW0ErMzUyKzM+PjBdPUU+PjI0LDA9PSgwfChnPTB8VWcoMHxnLDB8QywwfGMsMCkpKSYwPT0oMHwoQz0wfG8oKSkpKWJyZWFrIEE7ZT1lK2N8MH1CQSgwfEksMHxlLDB8ZyksYz0oUVtBKzM1Mj4+MF18UVtBKzM1MisxPj4wXTw8OHxRW0ErMzUyKzI+PjBdPDwxNnxRW0ErMzUyKzM+PjBdPDwyNCkrZ3wwLEJbQSszNTI+PjBdPWMsQltBKzM1MisxPj4wXT1jPj44LEJbQSszNTIrMj4+MF09Yz4+MTYsQltBKzM1MiszPj4wXT1jPj4yNH19d2hpbGUoMCl9ZnVuY3Rpb24gQUEoQSxJLGcpe3ZhciBCLFEsRSxpLGUsbyxjLGEsbixyLHQsZix3LHkscyxoLEQsRixwLHU7SXw9MCxnfD0wLHU9MHxDWyhBfD0wKT4+Ml0sRj0wfENbQSs0Pj4yXSxoPTB8Q1tBKzg+PjJdLHk9MHxDW0ErMTI+PjJdLGY9MHxDW0ErMTY+PjJdLHI9MHxDW0ErMjA+PjJdLGE9MHxDW0ErMjQ+PjJdLG89MHxDW0ErMjg+PjJdLGk9MHxDW0ErMzI+PjJdLFE9MHxDW0ErMzY+PjJdLHA9MHxDW0k+PjJdLEQ9MHxDW0krND4+Ml0scz0wfENbSSs4Pj4yXSx3PTB8Q1tJKzEyPj4yXSx0PTB8Q1tJKzE2Pj4yXSxuPTB8Q1tJKzIwPj4yXSxjPTB8Q1tJKzI0Pj4yXSxlPTB8Q1tJKzI4Pj4yXSxFPTB8Q1tJKzMyPj4yXSxCPTB8Q1tJKzM2Pj4yXSxDW0E+PjJdPShwXnUpJjAtZ151LENbQSs0Pj4yXT0oRF5GKSYwLWdeRixDW0ErOD4+Ml09KHNeaCkmMC1nXmgsQ1tBKzEyPj4yXT0od155KSYwLWdeeSxDW0ErMTY+PjJdPSh0XmYpJjAtZ15mLENbQSsyMD4+Ml09KG5ecikmMC1nXnIsQ1tBKzI0Pj4yXT0oY15hKSYwLWdeYSxDW0ErMjg+PjJdPShlXm8pJjAtZ15vLENbQSszMj4+Ml09KEVeaSkmMC1nXmksQ1tBKzM2Pj4yXT0oQl5RKSYwLWdeUSxDW0k+PjJdPShwXnUpJjAtZ15wLENbSSs0Pj4yXT0oRF5GKSYwLWdeRCxDW0krOD4+Ml09KHNeaCkmMC1nXnMsQ1tJKzEyPj4yXT0od155KSYwLWdedyxDW0krMTY+PjJdPSh0XmYpJjAtZ150LENbSSsyMD4+Ml09KG5ecikmMC1nXm4sQ1tJKzI0Pj4yXT0oY15hKSYwLWdeYyxDW0krMjg+PjJdPShlXm8pJjAtZ15lLENbSSszMj4+Ml09KEVeaSkmMC1nXkUsQ1tJKzM2Pj4yXT0oQl5RKSYwLWdeQn1mdW5jdGlvbiBJQShBLEksZyxFLGkpe0F8PTAsRXw9MCxpfD0wO3ZhciBlLGMsYT0wLG49MCxyPTAsdD0wLGY9MDtpZihlPXksYz15PXkrNjMmLTY0LHk9eSsxMTJ8MCwhKDA9PSgwfChJfD0wKSkmMD09KDB8KGd8PTApKSkpe2E9KG49YykrMzJ8MDtkb3tCW24+PjBdPTB8QltpPj4wXSxuPW4rMXwwLGk9aSsxfDB9d2hpbGUoKDB8bik8KDB8YSkpO2lmKG49UVtFKzQ+PjBdfFFbRSs0KzE+PjBdPDw4fFFbRSs0KzI+PjBdPDwxNnxRW0UrNCszPj4wXTw8MjQsQ1tjKzk2Pj4yXT1RW0U+PjBdfFFbRSsxPj4wXTw8OHxRW0UrMj4+MF08PDE2fFFbRSszPj4wXTw8MjQsQ1tjKzk2KzQ+PjJdPW4sQ1tjKzk2Kzg+PjJdPTAsQ1tjKzk2KzgrND4+Ml09MCxnPj4+MD4wfDA9PSgwfGcpJkk+Pj4wPjYzKXtkb3tmb3IoaUIoQSxjKzk2fDAsYyksYT04LGk9MTtpPWkrKDB8UVsobj1jKzk2K2F8MCk+PjBdKXwwLEJbbj4+MF09aSwxNiE9KDB8KGE9YSsxfDApKTspaT4+Pj04O0k9MHx2ZygwfEksMHxnLC02NCwtMSksZz0wfG8oKSxBPUErNjR8MH13aGlsZShnPj4+MD4wfDA9PSgwfGcpJkk+Pj4wPjYzKTswPT0oMHxJKSYwPT0oMHxnKXx8KHQ9QSxmPUkscj04KX1lbHNlIHQ9QSxmPUkscj04O2lmKDg9PSgwfHIpJiYoaUIoYyszMnwwLGMrOTZ8MCxjKSwwfGYpKXtpPTA7ZG97Qlt0K2k+PjBdPTB8QltjKzMyK2k+PjBdLGk9aSsxfDB9d2hpbGUoKDB8aSkhPSgwfGYpKX1NSShjKzMyfDAsNjQpLE1JKGMsMzIpfXk9ZX1mdW5jdGlvbiBnQShBLEksZyxCLEMsUSxFKXtBfD0wLEl8PTAsZ3w9MCxCfD0wLEN8PTA7dmFyIGksZSxjPTA7cmV0dXJuIGU9eSxpPXk9eSs2MyYtNjQseT15Kzk2fDAseChpLFF8PTAsRXw9MCksZnVuY3Rpb24oQSxJLGcpe0lBKEF8PTAsMzIsMCxJfD0wLGd8PTApfShpKzMyfDAsUSsxNnwwLGkpLDB8ZnVuY3Rpb24oQSxJLGcsQixDKXtyZXR1cm4gMHxmdW5jdGlvbihBLEksZyxCLEMpe3ZhciBRLEU7cmV0dXJuIEF8PTAsUT15LEU9eT15KzYzJi02NCx5PXkrMTZ8MCxmdW5jdGlvbihBLEksZyxCLEMpe3ZhciBRLEU7QXw9MCxJfD0wLGd8PTAsQnw9MCxRPXksRT15PXkrNjMmLTY0LHk9eSs5NnwwLE1BKEUsQ3w9MCksSyhFLEksZyxCKSx6KEUsQSkseT1RfShFLEl8PTAsZ3w9MCxCfD0wLEN8PTApLEM9MHx0QihBLEUpLHk9USwwfEN9KEF8PTAsSXw9MCxnfD0wLEJ8PTAsQ3w9MCl9KGcsSSxCLEMsaSszMnwwKT8oTUkoaSwzMiksST0tMSk6QT8oST4+PjA+PUE+Pj4wJiYwPEM+Pj4wfDA9PSgwfEMpJihJLUF8MCk+Pj4wPEI+Pj4wP2M9ODpBPj4+MD49ST4+PjAmJjA8Qz4+PjB8MD09KDB8QykmKEEtSXwwKT4+PjA8Qj4+PjA/Yz04Omc9SSw4PT0oMHxjKSYmKFlJKDB8QSwwfEksMHxCKSxnPUEpLDA9PSgwfChJPUM+Pj4wPjB8MD09KDB8QykmQj4+PjA+MzI/MzI6QikpJjA9PSgwfChFPUM+Pj4wPjB8MD09KDB8QykmQj4+PjA+MzI/MDpDKSk/WWcoaSszMnwwLGkrMzJ8MCwzMiwwLFErMTZ8MCxpKTooQkEoaSszMiszMnwwLDB8ZywtMi0oYz1+Qz4+PjA+NDI5NDk2NzI5NXwtMT09KDB8fkMpJn5CPj4+MD40Mjk0OTY3MjYzP35COi0zMykrMXwwKSxZZyhpKzMyfDAsaSszMnwwLDB8dmcoMHxJLDB8RSwzMiwwKSwwfG8oKSxRKzE2fDAsaSksQkEoMHxBLGkrMzIrMzJ8MCwtMi1jKzF8MCkpLEM+Pj4wPjB8MD09KDB8QykmQj4+PjA+MzImJl9nKEErSXwwLGcrSXwwLDB8VWcoMHxCLDB8QywwfEksMHxFKSwwfG8oKSxRKzE2fDAsaSksTUkoaSwzMiksST0wKTpJPTAseT1lLDB8SX1mdW5jdGlvbiBCQShBLEksZyl7QXw9MCxJfD0wO3ZhciBRLEUsaT0wO2lmKCgwfChnfD0wKSk+PTgxOTIpcmV0dXJuIHQoMHxBLDB8SSwwfGcpLDB8QTtpZihFPTB8QSxRPUErZ3wwLCgzJkEpPT0oMyZJKSl7Zm9yKDszJkE7KXtpZighZylyZXR1cm4gMHxFO0JbQT4+MF09MHxCW0k+PjBdLEE9QSsxfDAsST1JKzF8MCxnPWctMXwwfWZvcihpPShnPS00JlF8MCktNjR8MDsoMHxBKTw9KDB8aSk7KUNbQT4+Ml09Q1tJPj4yXSxDW0ErND4+Ml09Q1tJKzQ+PjJdLENbQSs4Pj4yXT1DW0krOD4+Ml0sQ1tBKzEyPj4yXT1DW0krMTI+PjJdLENbQSsxNj4+Ml09Q1tJKzE2Pj4yXSxDW0ErMjA+PjJdPUNbSSsyMD4+Ml0sQ1tBKzI0Pj4yXT1DW0krMjQ+PjJdLENbQSsyOD4+Ml09Q1tJKzI4Pj4yXSxDW0ErMzI+PjJdPUNbSSszMj4+Ml0sQ1tBKzM2Pj4yXT1DW0krMzY+PjJdLENbQSs0MD4+Ml09Q1tJKzQwPj4yXSxDW0ErNDQ+PjJdPUNbSSs0ND4+Ml0sQ1tBKzQ4Pj4yXT1DW0krNDg+PjJdLENbQSs1Mj4+Ml09Q1tJKzUyPj4yXSxDW0ErNTY+PjJdPUNbSSs1Nj4+Ml0sQ1tBKzYwPj4yXT1DW0krNjA+PjJdLEE9QSs2NHwwLEk9SSs2NHwwO2Zvcig7KDB8QSk8KDB8Zyk7KUNbQT4+Ml09Q1tJPj4yXSxBPUErNHwwLEk9SSs0fDB9ZWxzZSBmb3IoZz1RLTR8MDsoMHxBKTwoMHxnKTspQltBPj4wXT0wfEJbST4+MF0sQltBKzE+PjBdPTB8QltJKzE+PjBdLEJbQSsyPj4wXT0wfEJbSSsyPj4wXSxCW0ErMz4+MF09MHxCW0krMz4+MF0sQT1BKzR8MCxJPUkrNHwwO2Zvcig7KDB8QSk8KDB8USk7KUJbQT4+MF09MHxCW0k+PjBdLEE9QSsxfDAsST1JKzF8MDtyZXR1cm4gMHxFfWZ1bmN0aW9uIENBKEEsSSl7QXw9MDt2YXIgZyxRLEU9MDtnPXksUT15PXkrNjMmLTY0LHk9eSs0OHwwLGZ1bmN0aW9uKEEsSSl7dmFyIGcsQixRLEUsaSxlLG8sYyxhLG4scjtBfD0wLGE9MHxDWyhJfD0wKT4+Ml0scj0wfENbSSs0Pj4yXSxvPTB8Q1tJKzg+PjJdLGU9MHxDW0krMTI+PjJdLGk9MHxDW0krMTY+PjJdLG49MHxDW0krMjA+PjJdLFE9MHxDW0krMjQ+PjJdLEI9MHxDW0krMjg+PjJdLGc9MHxDW0krMzI+PjJdLEU9KCgoKChjPSgoMTkqKCgoKCgoKCgoKCgoMTY3NzcyMTYrKDE5KihJPTB8Q1tJKzM2Pj4yXSl8MCl8MCk+Pj4yNSkrYT4+MjYpK3I+PjI1KStvPj4yNikrZT4+MjUpK2k+PjI2KStuPj4yNSkrUT4+MjYpK0I+PjI1KStnPj4yNikrST4+MjUpfDApK2E+PjI2KStyfDApPj4yNSkrbz4+MjYpK2U+PjI1KStpPj4yNikrbnwwLENbQT4+Ml09KDE5KigoKCgoKCgoKCgoKDE2Nzc3MjE2KygxOSpJfDApfDApPj4+MjUpK2E+PjI2KStyPj4yNSkrbz4+MjYpK2U+PjI1KStpPj4yNikrbj4+MjUpK1E+PjI2KStCPj4yNSkrZz4+MjYpK0k+PjI1KXwwKSthJjY3MTA4ODYzLENbQSs0Pj4yXT0zMzU1NDQzMSZjLENbQSs4Pj4yXT0oYz4+MjUpK28mNjcxMDg4NjMsQ1tBKzEyPj4yXT0oKGM+PjI1KStvPj4yNikrZSYzMzU1NDQzMSxDW0ErMTY+PjJdPSgoKGM+PjI1KStvPj4yNikrZT4+MjUpK2kmNjcxMDg4NjMsQ1tBKzIwPj4yXT0zMzU1NDQzMSZFLENbQSsyND4+Ml09KEU+PjI1KStRJjY3MTA4ODYzLENbQSsyOD4+Ml09KChFPj4yNSkrUT4+MjYpK0ImMzM1NTQ0MzEsQ1tBKzMyPj4yXT0oKChFPj4yNSkrUT4+MjYpK0I+PjI1KStnJjY3MTA4ODYzLENbQSszNj4+Ml09KCgoKEU+PjI1KStRPj4yNikrQj4+MjUpK2c+PjI2KStJJjMzNTU0NDMxfShRLEl8PTApLEk9MHxDW1E+PjJdLEJbQT4+MF09SSxCW0ErMT4+MF09ST4+PjgsQltBKzI+PjBdPUk+Pj4xNixFPTB8Q1tRKzQ+PjJdLEJbQSszPj4wXT1FPDwyfEk+Pj4yNCxCW0ErND4+MF09RT4+PjYsQltBKzU+PjBdPUU+Pj4xNCxJPTB8Q1tRKzg+PjJdLEJbQSs2Pj4wXT1JPDwzfEU+Pj4yMixCW0ErNz4+MF09ST4+PjUsQltBKzg+PjBdPUk+Pj4xMyxFPTB8Q1tRKzEyPj4yXSxCW0ErOT4+MF09RTw8NXxJPj4+MjEsQltBKzEwPj4wXT1FPj4+MyxCW0ErMTE+PjBdPUU+Pj4xMSxJPTB8Q1tRKzE2Pj4yXSxCW0ErMTI+PjBdPUk8PDZ8RT4+PjE5LEJbQSsxMz4+MF09ST4+PjIsQltBKzE0Pj4wXT1JPj4+MTAsQltBKzE1Pj4wXT1JPj4+MTgsST0wfENbUSsyMD4+Ml0sQltBKzE2Pj4wXT1JLEJbQSsxNz4+MF09ST4+PjgsQltBKzE4Pj4wXT1JPj4+MTYsRT0wfENbUSsyND4+Ml0sQltBKzE5Pj4wXT1FPDwxfEk+Pj4yNCxCW0ErMjA+PjBdPUU+Pj43LEJbQSsyMT4+MF09RT4+PjE1LEk9MHxDW1ErMjg+PjJdLEJbQSsyMj4+MF09STw8M3xFPj4+MjMsQltBKzIzPj4wXT1JPj4+NSxCW0ErMjQ+PjBdPUk+Pj4xMyxFPTB8Q1tRKzMyPj4yXSxCW0ErMjU+PjBdPUU8PDR8ST4+PjIxLEJbQSsyNj4+MF09RT4+PjQsQltBKzI3Pj4wXT1FPj4+MTIsST0wfENbUSszNj4+Ml0sQltBKzI4Pj4wXT1JPDw2fEU+Pj4yMCxCW0ErMjk+PjBdPUk+Pj4yLEJbQSszMD4+MF09ST4+PjEwLEJbQSszMT4+MF09ST4+PjE4LHk9Z31mdW5jdGlvbiBRQShBLEksZyl7QXw9MCxJfD0wLGd8PTA7dmFyIEIsRSxpPTAsZT0wLGM9MDtpZihCPXksRT15PXkrNjMmLTY0LHk9eSs0MDk2fDAseUIoRSszMDcyfDApLHlCKEUrMjA0OHwwKSwwIT0oMHxBKSYwIT0oMHxJKSYmKENbRSsyMDQ4Pj4yXT1DW0k+PjJdLENbRSsyMDQ4KzQ+PjJdPTAsQ1tFKzIwNDgrOD4+Ml09Q1tJKzQ+PjJdLENbRSsyMDQ4KzgrND4+Ml09MCxDW0UrMjA0OCsxNj4+Ml09UVtJKzg+PjBdLENbRSsyMDQ4KzE2KzQ+PjJdPTAsQ1tFKzIwNDgrMjQ+PjJdPUNbQSsxNj4+Ml0sQ1tFKzIwNDgrMjQrND4+Ml09MCxDW0UrMjA0OCszMj4+Ml09Q1tBKzg+PjJdLENbRSsyMDQ4KzMyKzQ+PjJdPTAsQ1tFKzIwNDgrNDA+PjJdPUNbQSszNj4+Ml0sQ1tFKzIwNDgrNDArND4+Ml09MCwwfENbQSsyMD4+Ml0pKXtJPTA7ZG97KGk9MTI3JkkpfHwoYz0wfHZnKDB8Q1tFKzIwNDgrNDg+PjJdLDB8Q1tFKzIwNDgrNDgrND4+Ml0sMSwwKSxlPTB8bygpLENbRSsyMDQ4KzQ4Pj4yXT1jLENbRSsyMDQ4KzQ4KzQ+PjJdPWUseUIoRSkseUIoRSsxMDI0fDApLEgoRSszMDcyfDAsRSsyMDQ4fDAsRSksSChFKzMwNzJ8MCxFLEUrMTAyNHwwKSksZT0wfENbRSsxMDI0KyhpPDwzKSs0Pj4yXSxDWyhjPWcrKEk8PDMpfDApPj4yXT1DW0UrMTAyNCsoaTw8Myk+PjJdLENbYys0Pj4yXT1lLEk9SSsxfDB9d2hpbGUoST4+PjA8KDB8Q1tBKzIwPj4yXSk+Pj4wKX15PUJ9ZnVuY3Rpb24gRUEoQSxJLGcsQil7QXw9MCxJfD0wLGd8PTAsQnw9MDt2YXIgUSxFLGksZSxvPTAsYz0wLGE9MDtlPXksaT15PXkrNjMmLTY0LHk9eSs2NHwwLGM9NTIrKG89aSs4fDApfDA7ZG97Q1tvPj4yXT0wLG89bys0fDB9d2hpbGUoKDB8byk8KDB8YykpO289MHxaQShBKSxDW2krMzY+PjJdPW8sQ1tpKzIwPj4yXT1vLENbaSs0Pj4yXT1vLGM9MHxGKG8pLENbaSszMj4+Ml09YyxRPTB8RihvKSxDW2krMTY+PjJdPVEsRT0wfEYobyksQ1tpPj4yXT1FO2Rve2lmKDA9PSgwfGMpfDA9PSgwfFEpfDA9PSgwfEUpKWQoYyksZChRKSxkKEUpLG89LTIyO2Vsc2V7aWYoIShhPTB8RihvKSkpe2QoYyksZChRKSxkKEUpLG89LTIyO2JyZWFrfWlmKDB8KG89MHxMKGksQSxCKSkpe2QoMHxDW2krMzI+PjJdKSxkKDB8Q1tpKzE2Pj4yXSksZCgwfENbaT4+Ml0pLGQoYSk7YnJlYWt9Qj0wfG5BKDB8Q1tpKzQwPj4yXSwwfENbaSs0ND4+Ml0sMHxDW2krNTI+PjJdLEksZywwfENbaSsxNj4+Ml0sMHxDW2krMjA+PjJdLGEsMHxDW2krND4+Ml0sMCwwLEIpLGQoMHxDW2krMzI+PjJdKSxkKDB8Q1tpKzE2Pj4yXSksbz0wPT0oMHxCKSYmMD09KDB8RUkoYSwwfENbaT4+Ml0sMHxDW2krND4+Ml0pKT8wOi0zNSxkKGEpLGQoMHxDW2k+PjJdKX19d2hpbGUoMCk7cmV0dXJuIHk9ZSwwfG99ZnVuY3Rpb24gaUEoQSxJKXtBfD0wLEl8PTA7dmFyIGcsQyxFPTAsaT0wLGU9MDtnPXksQz15PXkrNjMmLTY0LHk9eSs0NjR8MCxFPTA7ZG97ZT0wfEJbSStFPj4wXSxCW0MrKGk9RTw8MSk+PjBdPTE1JmUsQltDKygxfGkpPj4wXT0oMjU1JmUpPj4+NCxFPUUrMXwwfXdoaWxlKDMyIT0oMHxFKSk7ST0wLEU9MDtkb3tJPTEzNDIxNzcyOCsoKGk9SSsoMHxRWyhlPUMrRXwwKT4+MF0pfDApPDwyNCk+PjI4LEJbZT4+MF09aS0oSTw8NCksRT1FKzF8MH13aGlsZSg2MyE9KDB8RSkpO0JbQys2Mz4+MF09SSsoMHxRW0MrNjM+PjBdKSxPZyhBKSxJPTE7ZG97JGcoQys2NHwwLEk+Pj4xLDB8QltDK0k+PjBdKSxDSShDKzMwNHwwLEEsQys2NHwwKSxFZyhBLEMrMzA0fDApLEk9SSsyfDB9d2hpbGUoST4+PjA8NjQpO29nKEMrMzA0fDAsQSksSGcoQysxODR8MCxDKzMwNHwwKSxhSShDKzMwNHwwLEMrMTg0fDApLEhnKEMrMTg0fDAsQyszMDR8MCksYUkoQyszMDR8MCxDKzE4NHwwKSxIZyhDKzE4NHwwLEMrMzA0fDApLGFJKEMrMzA0fDAsQysxODR8MCksRWcoQSxDKzMwNHwwKSxJPTA7ZG97JGcoQys2NHwwLEk+Pj4xLDB8QltDK0k+PjBdKSxDSShDKzMwNHwwLEEsQys2NHwwKSxFZyhBLEMrMzA0fDApLEk9SSsyfDB9d2hpbGUoST4+PjA8NjQpO3k9Z31mdW5jdGlvbiBlQShBLEksZyxCLEMsUSxFLGksZSxjLGEpe3ZhciBuO0F8PTAsSXw9MCxnfD0wLEJ8PTAsQ3w9MCxRfD0wLEV8PTAsaXw9MCxlfD0wLG49eSx5PXkrMzUyfDAsT0kobisxNnwwLDY0LDAsY3w9MCxhfD0wKSxnQihuKzgwfDAsbisxNnwwKSxNSShuKzE2fDAsNjQpLGJnKG4rODB8MCxFLGksZSksST0wfFVnKDAsMCwwfGksMHxlKSxvKCksYmcobis4MHwwLDM0NjI0LDE1JkksMCksYmcobis4MHwwLGcsQixDKSxJPTB8VWcoMCwwLDB8QiwwfEMpLG8oKSxiZyhuKzgwfDAsMzQ2MjQsMTUmSSwwKSxMSShuKzMzNnwwLGksZSksYmcobis4MHwwLG4rMzM2fDAsOCwwKSxMSShuKzMzNnwwLEIsQyksYmcobis4MHwwLG4rMzM2fDAsOCwwKSxJQihuKzgwfDAsbiksTUkobis4MHwwLDI1NiksST0wfHRCKG4sUSksTUkobiwxNik7ZG97aWYoQSl7aWYoSSl7WUEoMHxBLDAsMHxCKSxJPS0xO2JyZWFrfXJJKEEsZyxCLEMsYywxLGEpLEk9MDticmVha319d2hpbGUoMCk7cmV0dXJuIHk9biwwfEl9ZnVuY3Rpb24gb0EoQSl7QXw9MDt2YXIgST0wLGc9MDtkb3tpZihBKWlmKDB8Q1tBPj4yXSlpZigoMHxDW0ErND4+Ml0pPj4+MD49MTYpe2lmKDA9PSgwfENbQSs4Pj4yXSkmJjB8Q1tBKzEyPj4yXSl7ST0tMTg7YnJlYWt9aWYoST0wfENbQSsyMD4+Ml0sISgwfENbQSsxNj4+Ml0pKXJldHVybiAwfCgwPT0oMHxJKT8tNjotMTkpO2lmKEk+Pj4wPj04KXtpZigwPT0oMHxDW0ErMjQ+PjJdKSYmMHxDW0ErMjg+PjJdKXtJPS0yMDticmVha31pZigwPT0oMHxDW0ErMzI+PjJdKSYmMHxDW0ErMzY+PjJdKXtJPS0yMTticmVha31pZigoST0wfENbQSs0ND4+Ml0pPj4+MD49OClpZihJPj4+MDw9MjA5NzE1MilpZihJPj4+MD49KGc9MHxDW0ErNDg+PjJdKTw8Mz4+PjApaWYoMHxDW0ErNDA+PjJdKWlmKGcpe2lmKCEoZz4+PjA+MTY3NzcyMTUpKXJldHVybiAwfCgwPT0oMHwoQT0wfENbQSs1Mj4+Ml0pKT8tMjg6QT4+PjA+MTY3NzcyMTU/LTI5OjApO0k9LTE3fWVsc2UgST0tMTY7ZWxzZSBJPS0xMjtlbHNlIEk9LTE0O2Vsc2UgST0tMTU7ZWxzZSBJPS0xNH1lbHNlIEk9LTZ9ZWxzZSBJPS0yO2Vsc2UgST0tMTtlbHNlIEk9LTI1fXdoaWxlKDApO3JldHVybiAwfEl9ZnVuY3Rpb24gY0EoQSxJLGcsUSxFKXt2YXIgaSxlO0F8PTAsZ3w9MCxRfD0wLEV8PTAsaT15LGU9eT15KzYzJi02NCx5PXkrMTkyfDAsKChJfD0wKS0xJjI1NSk+NjMmJlNCKCksZ3x8U0IoKSxCW2UrMTI4Pj4wXT1JLEJbZSsxMjgrMT4+MF09MzIsQltlKzEyOCsyPj4wXT0xLEJbZSsxMjgrMz4+MF09MSxXZyhlKzEyOCs0fDApLExJKGUrMTI4Kzh8MCwwLDApLENbZSsxMjgrMTY+PjJdPTAsQ1tlKzEyOCsxNis0Pj4yXT0wLENbZSsxMjgrMTYrOD4+Ml09MCxDW2UrMTI4KzE2KzEyPj4yXT0wLFE/ZnVuY3Rpb24oQSxJKXtJfD0wO3ZhciBnPTA7QT0xNisoZz0zMisoQXw9MCl8MCl8MDtkb3tCW2c+PjBdPTB8QltJPj4wXSxnPWcrMXwwLEk9SSsxfDB9d2hpbGUoKDB8Zyk8KDB8QSkpfShlKzEyOHwwLFEpOihDW2UrMTI4KzMyPj4yXT0wLENbZSsxMjgrMzIrND4+Ml09MCxDW2UrMTI4KzMyKzg+PjJdPTAsQ1tlKzEyOCszMisxMj4+Ml09MCksRT9mdW5jdGlvbihBLEkpe0l8PTA7dmFyIGc9MDtBPTE2KyhnPTQ4KyhBfD0wKXwwKXwwO2Rve0JbZz4+MF09MHxCW0k+PjBdLGc9ZysxfDAsST1JKzF8MH13aGlsZSgoMHxnKTwoMHxBKSl9KGUrMTI4fDAsRSk6KENbZSsxMjgrNDg+PjJdPTAsQ1tlKzEyOCs0OCs0Pj4yXT0wLENbZSsxMjgrNDgrOD4+Ml09MCxDW2UrMTI4KzQ4KzEyPj4yXT0wKSxYQShBLGUrMTI4fDApLEU9OTYrKEk9ZSszMnwwKXwwO2Rve0NbST4+Ml09MCxJPUkrNHwwfXdoaWxlKCgwfEkpPCgwfEUpKTtFPShJPWUpKzMyfDA7ZG97QltJPj4wXT0wfEJbZz4+MF0sST1JKzF8MCxnPWcrMXwwfXdoaWxlKCgwfEkpPCgwfEUpKTskKEEsZSwxMjgsMCksTUkoZSwxMjgpLHk9aX1mdW5jdGlvbiBhQShBLEksZyl7dmFyIEMsRTtJfD0wLGd8PTAsQz0wfHZnKFFbNjQrKEF8PTApPj4wXXxRW0ErNjQrMT4+MF08PDh8UVtBKzY0KzI+PjBdPDwxNnxRW0ErNjQrMz4+MF08PDI0fDAsUVtBKzY0KzQ+PjBdfFFbQSs2NCs0KzE+PjBdPDw4fFFbQSs2NCs0KzI+PjBdPDwxNnxRW0ErNjQrNCszPj4wXTw8MjR8MCwwfEksMHxnKSxFPTB8bygpLEJbQSs2ND4+MF09QyxCW0ErNjQrMT4+MF09Qz4+OCxCW0ErNjQrMj4+MF09Qz4+MTYsQltBKzY0KzM+PjBdPUM+PjI0LEJbQSs2NCs0Pj4wXT1FLEJbQSs2NCs0KzE+PjBdPUU+PjgsQltBKzY0KzQrMj4+MF09RT4+MTYsQltBKzY0KzQrMz4+MF09RT4+MjQsST0wfHZnKFFbQSs3Mj4+MF18UVtBKzcyKzE+PjBdPDw4fFFbQSs3MisyPj4wXTw8MTZ8UVtBKzcyKzM+PjBdPDwyNHwwLFFbQSs3Mis0Pj4wXXxRW0ErNzIrNCsxPj4wXTw8OHxRW0ErNzIrNCsyPj4wXTw8MTZ8UVtBKzcyKzQrMz4+MF08PDI0fDAsMSYoRT4+PjA8Zz4+PjB8KDB8RSk9PSgwfGcpJkM+Pj4wPEk+Pj4wKXwwLDApLGc9MHxvKCksQltBKzcyPj4wXT1JLEJbQSs3MisxPj4wXT1JPj44LEJbQSs3MisyPj4wXT1JPj4xNixCW0ErNzIrMz4+MF09ST4+MjQsQltBKzcyKzQ+PjBdPWcsQltBKzcyKzQrMT4+MF09Zz4+OCxCW0ErNzIrNCsyPj4wXT1nPj4xNixCW0ErNzIrNCszPj4wXT1nPj4yNH1mdW5jdGlvbiBuQShBLEksZyxCLFEsRSxpLGUsbyxjLGEsbil7dmFyIHIsdCxmO0F8PTAsSXw9MCxnfD0wLEJ8PTAsUXw9MCxFfD0wLGl8PTAsZXw9MCxjfD0wLGF8PTAsbnw9MCxmPXksdD15PXkrNjMmLTY0LHk9eSs2NHwwLHI9MHxGKG98PTApO2Rve2lmKHIpe2lmKENbdD4+Ml09cixDW3QrND4+Ml09byxDW3QrOD4+Ml09QixDW3QrMTI+PjJdPVEsQ1t0KzE2Pj4yXT1FLENbdCsyMD4+Ml09aSxDW3QrMjQ+PjJdPTAsQ1t0KzI0KzQ+PjJdPTAsQ1t0KzI0Kzg+PjJdPTAsQ1t0KzI0KzEyPj4yXT0wLENbdCs0MD4+Ml09QSxDW3QrNDQ+PjJdPUksQ1t0KzQ4Pj4yXT1nLENbdCs1Mj4+Ml09ZyxDW3QrNTY+PjJdPTAsMHwoST0wfHBBKHQsbikpKXtNSShyLG8pLGQocik7YnJlYWt9aWYoMHxlJiZCQSgwfGUsMHxyLDB8byksMCE9KDB8YykmMCE9KDB8YSkmJjB8SihjLGEsdCxuKSl7TUkocixvKSxNSShjLGEpLGQociksST0tMzE7YnJlYWt9TUkocixvKSxkKHIpLEk9MH1lbHNlIEk9LTIyfXdoaWxlKDApO3JldHVybiB5PWYsMHxJfWZ1bmN0aW9uIHJBKEEsSSl7dmFyIGcsQixDPTA7cmV0dXJuIEI9eSxnPXk9eSs2MyYtNjQseT15KzI4OHwwLFUoNDArKEF8PTApfDAsSXw9MCksU2coQSs4MHwwKSxfKGcrMjQwfDAsQSs0MHwwKSx1KGcrMTkyfDAsZysyNDB8MCwxNiksbEEoZysyNDB8MCxnKzI0MHwwLEErODB8MCksX0EoZysxOTJ8MCxnKzE5MnwwLEErODB8MCksXyhnKzE0NHwwLGcrMTkyfDApLHUoZysxNDR8MCxnKzE0NHwwLGcrMTkyfDApLF8oQSxnKzE0NHwwKSx1KEEsQSxnKzE5MnwwKSx1KEEsQSxnKzI0MHwwKSxmdW5jdGlvbihBLEkpe0F8PTA7dmFyIGcsQixDPTA7Zz15LEI9eT15KzYzJi02NCx5PXkrMTQ0fDAsXyhCKzk2fDAsSXw9MCksXyhCKzQ4fDAsQis5NnwwKSxfKEIrNDh8MCxCKzQ4fDApLHUoQis0OHwwLEksQis0OHwwKSx1KEIrOTZ8MCxCKzk2fDAsQis0OHwwKSxfKEIrOTZ8MCxCKzk2fDApLHUoQis5NnwwLEIrNDh8MCxCKzk2fDApLF8oQis0OHwwLEIrOTZ8MCksQz0xO2Rve18oQis0OHwwLEIrNDh8MCksQz1DKzF8MH13aGlsZSg1IT0oMHxDKSk7dShCKzk2fDAsQis0OHwwLEIrOTZ8MCksXyhCKzQ4fDAsQis5NnwwKSxDPTE7ZG97XyhCKzQ4fDAsQis0OHwwKSxDPUMrMXwwfXdoaWxlKDEwIT0oMHxDKSk7dShCKzQ4fDAsQis0OHwwLEIrOTZ8MCksXyhCLEIrNDh8MCksQz0xO2Rve18oQixCKSxDPUMrMXwwfXdoaWxlKDIwIT0oMHxDKSk7dShCKzQ4fDAsQixCKzQ4fDApLF8oQis0OHwwLEIrNDh8MCksQz0xO2Rve18oQis0OHwwLEIrNDh8MCksQz1DKzF8MH13aGlsZSgxMCE9KDB8QykpO3UoQis5NnwwLEIrNDh8MCxCKzk2fDApLF8oQis0OHwwLEIrOTZ8MCksQz0xO2Rve18oQis0OHwwLEIrNDh8MCksQz1DKzF8MH13aGlsZSg1MCE9KDB8QykpO3UoQis0OHwwLEIrNDh8MCxCKzk2fDApLF8oQixCKzQ4fDApLEM9MTtkb3tfKEIsQiksQz1DKzF8MH13aGlsZSgxMDAhPSgwfEMpKTt1KEIrNDh8MCxCLEIrNDh8MCksXyhCKzQ4fDAsQis0OHwwKSxDPTE7ZG97XyhCKzQ4fDAsQis0OHwwKSxDPUMrMXwwfXdoaWxlKDUwIT0oMHxDKSk7dShCKzk2fDAsQis0OHwwLEIrOTZ8MCksXyhCKzk2fDAsQis5NnwwKSxfKEIrOTZ8MCxCKzk2fDApLHUoQSxCKzk2fDAsSSkseT1nfShBLEEpLHUoQSxBLGcrMTQ0fDApLHUoQSxBLGcrMjQwfDApLF8oZys5NnwwLEEpLHUoZys5NnwwLGcrOTZ8MCxnKzE5MnwwKSxsQShnKzQ4fDAsZys5NnwwLGcrMjQwfDApLDB8Y2coZys0OHwwKT9DPTQ6KF9BKGcsZys5NnwwLGcrMjQwfDApLDB8Y2coZyk/KHUoQSxBLDY0KSxDPTQpOkE9LTEpLDQ9PSgwfEMpJiYoKDB8KEM9MHxzZyhBKSkpPT0oKDB8UVtJKzMxPj4wXSk+Pj43fDApJiZ4QShBLEEpLHUoQSsxMjB8MCxBLEErNDB8MCksQT0wKSx5PUIsMHxBfWZ1bmN0aW9uIHRBKEEsSSxnKXt2YXIgQixRLEUsaSxlLG8sYyxhLG4scix0LGYsdyx5LHMsaCxELEYscDtJfD0wLGd8PTAscD0wfENbKEF8PTApPj4yXSxEPTB8Q1tBKzQ+PjJdLHM9MHxDW0ErOD4+Ml0sdz0wfENbQSsxMj4+Ml0sdD0wfENbQSsxNj4+Ml0sbj0wfENbQSsyMD4+Ml0sYz0wfENbQSsyND4+Ml0sZT0wfENbQSsyOD4+Ml0sRT0wfENbQSszMj4+Ml0sQj0wfENbQSszNj4+Ml0sRj0oQ1tJKzQ+PjJdXkQpJjAtZyxoPShDW0krOD4+Ml1ecykmMC1nLHk9KENbSSsxMj4+Ml1edykmMC1nLGY9KENbSSsxNj4+Ml1edCkmMC1nLHI9KENbSSsyMD4+Ml1ebikmMC1nLGE9KENbSSsyND4+Ml1eYykmMC1nLG89KENbSSsyOD4+Ml1eZSkmMC1nLGk9KENbSSszMj4+Ml1eRSkmMC1nLFE9KENbSSszNj4+Ml1eQikmMC1nLENbQT4+Ml09KENbST4+Ml1ecCkmMC1nXnAsQ1tBKzQ+PjJdPUZeRCxDW0ErOD4+Ml09aF5zLENbQSsxMj4+Ml09eV53LENbQSsxNj4+Ml09Zl50LENbQSsyMD4+Ml09cl5uLENbQSsyND4+Ml09YV5jLENbQSsyOD4+Ml09b15lLENbQSszMj4+Ml09aV5FLENbQSszNj4+Ml09UV5CfWZ1bmN0aW9uIGZBKEEsSSxnLEIsUSxFLGksZSxjLGEsbixyKXtyZXR1cm4gQXw9MCxJfD0wLGd8PTAsQnw9MCxRfD0wLEV8PTAsaXw9MCxlfD0wLGN8PTAsYXw9MCxhPXkseT15KzMzNnwwLE9JKGEsNjQsMCxufD0wLHJ8PTApLGdCKGErNjR8MCxhKSxNSShhLDY0KSxiZyhhKzY0fDAsaSxlLGMpLGk9MHxVZygwLDAsMHxlLDB8YyksbygpLGJnKGErNjR8MCwzNDYyNCwxNSZpLDApLHJJKEEsQixRLEUsbiwxLHIpLGJnKGErNjR8MCxBLFEsRSksbj0wfFVnKDAsMCwwfFEsMHxFKSxvKCksYmcoYSs2NHwwLDM0NjI0LDE1Jm4sMCksTEkoYSszMjB8MCxlLGMpLGJnKGErNjR8MCxhKzMyMHwwLDgsMCksTEkoYSszMjB8MCxRLEUpLGJnKGErNjR8MCxhKzMyMHwwLDgsMCksSUIoYSs2NHwwLEkpLE1JKGErNjR8MCwyNTYpLDB8ZyYmKENbZz4+Ml09MTYsQ1tnKzQ+PjJdPTApLHk9YSwwfWZ1bmN0aW9uIHdBKEEpe3ZhciBJLGcsRT0wLGk9MCxlPTA7ST15LGc9eT15KzYzJi02NCx5PXkrNDh8MCxpPUF8PTAsZT0oRT1nKSszMnwwO2Rve0JbRT4+MF09MHxCW2k+PjBdLEU9RSsxfDAsaT1pKzF8MH13aGlsZSgoMHxFKTwoMHxlKSk7RT1RW0ErMzYrND4+MF18UVtBKzM2KzQrMT4+MF08PDh8UVtBKzM2KzQrMj4+MF08PDE2fFFbQSszNis0KzM+PjBdPDwyNCxDW2crMzI+PjJdPVFbQSszNj4+MF18UVtBKzM2KzE+PjBdPDw4fFFbQSszNisyPj4wXTw8MTZ8UVtBKzM2KzM+PjBdPDwyNCxDW2crMzIrND4+Ml09RSxmdW5jdGlvbihBLEksZyxCKXshZnVuY3Rpb24oQSxJLGcsQil7ZkkoQXw9MCxJfD0wLDQwLDAsZ3w9MCwwLEJ8PTApfShBfD0wLEl8PTAsZ3w9MCxCfD0wKX0oZyxnLEErMzJ8MCxBKSxpPWcsZT0oRT1BKSszMnwwO2Rve0JbRT4+MF09MHxCW2k+PjBdLEU9RSsxfDAsaT1pKzF8MH13aGlsZSgoMHxFKTwoMHxlKSk7aT0wfENbZyszMj4+Ml0sZT0wfENbZyszMis0Pj4yXSxCW0ErMzY+PjBdPWksQltBKzM2KzE+PjBdPWk+PjgsQltBKzM2KzI+PjBdPWk+PjE2LEJbQSszNiszPj4wXT1pPj4yNCxCW0ErMzYrND4+MF09ZSxCW0ErMzYrNCsxPj4wXT1lPj44LEJbQSszNis0KzI+PjBdPWU+PjE2LEJbQSszNis0KzM+PjBdPWU+PjI0LE1nKEEpLHk9SX1mdW5jdGlvbiB5QShBLEkpe0F8PTAsSXw9MDt2YXIgZz0wLEM9MCxFPTAsaT0wLGU9MDtnPTA7ZG97QltBK2c+PjBdPSgwfFFbSSsoZz4+PjMpPj4wXSk+Pj4oNyZnKSYxLGc9ZysxfDB9d2hpbGUoMjU2IT0oMHxnKSk7ZT0wO2Rve0U9QStlfDA7QTpkb3tpZigwfEJbRT4+MF0pe2k9MTtkb3tpZigoZz1pK2V8MCk+Pj4wPj0yNTYpYnJlYWsgQTtJPTB8QltBK2c+PjBdO0k6ZG97aWYoSTw8MjQ+PjI0KXtpZigoKEM9STw8MjQ+PjI0PDxpKSsoST0wfEJbRT4+MF0pfDApPDE2KXtCW0U+PjBdPUMrSSxCW0ErZz4+MF09MDticmVha31pZigoSS1DfDApPC0xNSlicmVhayBBO2ZvcihCW0U+PjBdPUktQzswfEJbKEk9QStnfDApPj4wXTspaWYoQltJPj4wXT0wLChnPWcrMXwwKT4+PjA+PTI1NilicmVhayBJO0JbST4+MF09MX19d2hpbGUoMCk7aT1pKzF8MH13aGlsZShpPj4+MDw3KX19d2hpbGUoMCk7ZT1lKzF8MH13aGlsZSgyNTYhPSgwfGUpKX1mdW5jdGlvbiBzQShBLEksZyxCLEMsUSxFLGksZSxvLGMpe3ZhciBhO0F8PTAsSXw9MCxnfD0wLEJ8PTAsQ3w9MCxRfD0wLEV8PTAsaXw9MCxlfD0wLGE9eSx5PXkrMzUyfDAsUUIoYSsxNnwwLG98PTAsY3w9MCksZ0IoYSs4MHwwLGErMTZ8MCksTUkoYSsxNnwwLDY0KSxiZyhhKzgwfDAsRSxpLGUpLExJKGErMzM2fDAsaSxlKSxiZyhhKzgwfDAsYSszMzZ8MCw4LDApLGJnKGErODB8MCxnLEIsQyksTEkoYSszMzZ8MCxCLEMpLGJnKGErODB8MCxhKzMzNnwwLDgsMCksSUIoYSs4MHwwLGEpLE1JKGErODB8MCwyNTYpLEk9MHx0QihhLFEpLE1JKGEsMTYpO2Rve2lmKEEpe2lmKEkpe1lBKDB8QSwwLDB8QiksST0tMTticmVha316SShBLGcsQixDLG8sYyksST0wO2JyZWFrfX13aGlsZSgwKTtyZXR1cm4geT1hLDB8SX1mdW5jdGlvbiBoQShBLEksZyxCLFEsRSxpKXt2YXIgZSxvO0F8PTAsSXw9MCxnfD0wLEJ8PTAsUXw9MCxFfD0wLGU9eSxvPXk9eSs2MyYtNjQseT15KzU2MHwwLEpnKG8rMTkyfDAsaXw9MCksUkkobysxMjh8MCxFLDMyLDApLFAobysxOTJ8MCxvKzEyOCszMnwwLDMyLDApLFAobysxOTJ8MCxnLEIsUSksVkkobysxOTJ8MCxvKzY0fDApLFlJKEErMzJ8MCxFKzMyfDAsMzIpLHAobys2NHwwKSxpQShvKzQwMHwwLG8rNjR8MCksc0koQSxvKzQwMHwwKSxKZyhvKzE5MnwwLGkpLFAobysxOTJ8MCxBLDY0LDApLFAobysxOTJ8MCxnLEIsUSksVkkobysxOTJ8MCxvKSxwKG8pLFRnKG8rMTI4fDApLGgoQSszMnwwLG8sbysxMjh8MCxvKzY0fDApLE1JKG8rMTI4fDAsNjQpLE1JKG8rNjR8MCw2NCksMHxJJiYoQ1tJPj4yXT02NCxDW0krND4+Ml09MCkseT1lfWZ1bmN0aW9uIERBKEEsSSxnLEIsUSxpKXtBfD0wLEl8PTAsZ3w9MCxCfD0wLFF8PTAsaXw9MDt2YXIgZT0wO2Rve2lmKEkpe2lmKGU9KDB8Q1tBKzI0Pj4yXSktKDB8Q1tBKzIwPj4yXSl8MCxpKXtlPUIrLTErZXwwO2JyZWFrfWU9ZSsoKDA9PSgwfEIpKTw8MzE+PjMxKXwwO2JyZWFrfWlmKCEoZzw8MjQ+PjI0KSl7ZT1CKy0xfDA7YnJlYWt9aWYoZT0wfEUoMHxDW0ErMjA+PjJdLDI1NSZnKSxpKXtlPUIrLTErZXwwO2JyZWFrfWU9ZSsoKDA9PSgwfEIpKTw8MzE+PjMxKXwwO2JyZWFrfXdoaWxlKDApO3JldHVybiBRZygwfFEsMCwwfFEsMCksUWcoMHxvKCksMCwwfGUsMCksaT0wfFVnKGUrLTF8MCwwLDB8bygpLDApLFE9MHxvKCksMD09KDB8SSl8Zzw8MjQ+PjI0PT0zPyhlPTAsQj0wKTooZT0wfEUoMHxDW0ErMjA+PjJdLDErKDI1NSZnKXwwKSxCPTApLEE9MHxBZygwfChJPTB8dmcoMHxpLDB8USwwfGUsMHxCKSksMHwoZz0wfG8oKSksMHxDW0ErMjQ+PjJdLDApLG8oKSwwfEF9ZnVuY3Rpb24gRkEoQSxJLGcsQixRKXtCfD0wLFF8PTA7dmFyIEUsaSxlLG89MDtpZihlPXksaT15PXkrNjMmLTY0LHk9eSs2NHwwLChnfD0wKT4+PjA+MHwwPT0oMHxnKSYoSXw9MCk+Pj4wPjQyOTQ5NjcyOTV8KEU9MHxaQShBfD0wKSk+Pj4wPjEyNylDWzg2NzhdPTI4LGc9LTE7ZWxzZXtvPShnPWkpKzYwfDA7ZG97Q1tnPj4yXT0wLGc9Zys0fDB9d2hpbGUoKDB8Zyk8KDB8bykpOyhvPTB8ZnVuY3Rpb24oQSl7dmFyIEk7cmV0dXJuKEk9MHxGKEF8PTApKSYmMyZDW0krLTQ+PjJdPyhZQSgwfEksMCwwfEEpLDB8SSk6MHxJfShFKSk/KENbaSsxNj4+Ml09byxDW2krOD4+Ml09byxDW2k+PjJdPW8sQ1tpKzIwPj4yXT1FLENbaSsxMj4+Ml09RSxDW2krND4+Ml09RSxDW2krMjQ+PjJdPTAsQ1tpKzI0KzQ+PjJdPTAsQ1tpKzI0Kzg+PjJdPTAsQ1tpKzI0KzEyPj4yXT0wLDB8TChpLEEsUSk/KENbODY3OF09MjgsZz0tMSk6Zz0oMHxDW2krNDA+PjJdKT09KDB8SSk/KDB8Q1tpKzQ0Pj4yXSkhPShCPj4+MTB8MCkmMToxLGQobykpOmc9LTF9cmV0dXJuIHk9ZSwwfGd9ZnVuY3Rpb24gcEEoQSxJKXtJfD0wO3ZhciBnLEIsUT0wLGk9MCxlPTA7aWYoQj15LGc9eT15KzYzJi02NCx5PXkrNDh8MCwhKFE9MHxvQShBfD0wKSkpaWYoKEkrLTF8MCk+Pj4wPD0xKXtpZihpPTB8Q1tBKzQ0Pj4yXSxRPTB8Q1tBKzQ4Pj4yXSxlPTB8RShpPSgoaT4+PjA8UTw8Mz4+PjA/UTw8MzppKT4+PjApLyhRPDwyPj4+MCl8MCxRPDwyKSxDW2c+PjJdPTAsQ1tnKzg+PjJdPUNbQSs0MD4+Ml0sQ1tnKzEyPj4yXT0tMSxDW2crMTY+PjJdPWUsQ1tnKzIwPj4yXT1pLENbZysyND4+Ml09aTw8MixDW2crMjg+PjJdPVEsQ1tnKzMyPj4yXT1DW0ErNTI+PjJdLENbZyszNj4+Ml09SSwhKFE9MHxmdW5jdGlvbihBLEkpe0F8PTAsSXw9MDt2YXIgZyxCLFE9MDtCPXksZz15PXkrNjMmLTY0LHk9eSs4MHwwO2Rve2lmKDA9PSgwfEEpfDA9PSgwfEkpKVE9LTI1O2Vsc2V7aWYoUT0wfEYoQ1tBKzIwPj4yXTw8MyksQ1tBKzQ+PjJdPVEsUSl7aWYoUT0wfGJBKEEsMHxDW0ErMTY+PjJdKSl7dWcoQSwwfENbSSs1Nj4+Ml0pO2JyZWFrfWooZyxJLDB8Q1tBKzM2Pj4yXSksTUkoZys2NHwwLDgpLEtBKGcsQSksTUkoZyw3MiksUT0wO2JyZWFrfVE9LTIyfX13aGlsZSgwKTtyZXR1cm4geT1CLDB8UX0oZyxBKSkpe2lmKDB8Q1tnKzg+PjJdKXtRPTA7ZG97VUEoZyxRKSxRPVErMXwwfXdoaWxlKFE+Pj4wPCgwfENbZys4Pj4yXSk+Pj4wKX0hZnVuY3Rpb24oQSxJKXt2YXIgZyxCLFE9MCxpPTA7aWYoZz15LEI9eT15KzYzJi02NCx5PXkrMjA0OHwwLDAhPSgwfChBfD0wKSkmMCE9KDB8KEl8PTApKSl7aWYoZkIoQisxMDI0fDAsKDB8Q1s0KygwfENbST4+Ml0pPj4yXSkrKENbSSsyND4+Ml08PDEwKS0xMDI0fDApLCgwfENbSSsyOD4+Ml0pPj4+MD4xKXtRPTE7ZG97aT0oaT0wfENbSSsyND4+Ml0pLTErKDB8RShpLFEpKXwwLFNJKEIrMTAyNHwwLCgwfENbNCsoMHxDW0k+PjJdKT4+Ml0pKyhpPDwxMCl8MCksUT1RKzF8MH13aGlsZShRPj4+MDwoMHxDW0krMjg+PjJdKT4+PjApfSFmdW5jdGlvbihBLEkpe0F8PTAsSXw9MDt2YXIgZz0wLEI9MDtnPTA7ZG97TEkoQSsoZzw8Myl8MCwwfENbKEI9SSsoZzw8Myl8MCk+PjJdLDB8Q1tCKzQ+PjJdKSxnPWcrMXwwfXdoaWxlKDEyOCE9KDB8ZykpfShCLEIrMTAyNHwwKSxUKDB8Q1tBPj4yXSwwfENbQSs0Pj4yXSxCLDEwMjQpLE1JKEIrMTAyNHwwLDEwMjQpLE1JKEIsMTAyNCksdWcoSSwwfENbQSs1Nj4+Ml0pfXk9Z30oQSxnKSxRPTB9fWVsc2UgUT0tMjY7cmV0dXJuIHk9QiwwfFF9ZnVuY3Rpb24gdUEoQSxJLGcsQixDLFEpe3ZhciBFLGk7cmV0dXJuIEl8PTAsZ3w9MCxCfD0wLEN8PTAsUXw9MCxpPXksRT15PXkrNjMmLTY0LHk9eSs1OTJ8MCwwIT0oMHxwSSgzMisoQXw9MCl8MCkpJiYwPT0oMHxHQShBKSkmJjAhPSgwfFdJKEMpKSYmMD09KDB8R0EoQykpJiYwPT0oMHxyQShFKzQyNHwwLEMpKT8oSmcoRSs5NnwwLFEpLFAoRSs5NnwwLEEsMzIsMCksUChFKzk2fDAsQywzMiwwKSxQKEUrOTZ8MCxJLGcsQiksVkkoRSs5NnwwLEUrMzJ8MCkscChFKzMyfDApLE4oRSszMDR8MCxFKzMyfDAsRSs0MjR8MCxBKzMyfDApLHNJKEUsRSszMDR8MCksZz0wfHJCKEUsQSksZz0wfCgoMHxFKT09KDB8QSk/LTE6Zyl8RUkoQSxFLDMyKSk6Zz0tMSx5PWksMHxnfWZ1bmN0aW9uIEhBKEEsSSl7QXw9MCxJfD0wO3ZhciBnPTAsUT0wO0E6ZG97aWYoMjU1Jkkpe2lmKDMmQSlkb3tpZigoUT0wfEJbQT4+MF0pPDwyND4+MjQ9PTB8fFE8PDI0Pj4yND09KDI1NSZJKTw8MjQ+PjI0KWJyZWFrIEE7QT1BKzF8MH13aGlsZSgwIT0oMyZBfDApKTtRPTB8RSgyNTUmSSwxNjg0MzAwOSksZz0wfENbQT4+Ml07STpkb3tpZighKCgtMjEzOTA2MjE0NCZnXi0yMTM5MDYyMTQ0KSZnKy0xNjg0MzAwOSkpZG97aWYoKC0yMTM5MDYyMTQ0JihnXj1RKV4tMjEzOTA2MjE0NCkmZystMTY4NDMwMDl8MClicmVhayBJO2c9MHxDWyhBPUErNHwwKT4+Ml19d2hpbGUoISgoLTIxMzkwNjIxNDQmZ14tMjEzOTA2MjE0NCkmZystMTY4NDMwMDl8MCkpfXdoaWxlKDApO2Zvcig7KFE9MHxCW0E+PjBdKTw8MjQ+PjI0IT0wJiZRPDwyND4+MjQhPSgyNTUmSSk8PDI0Pj4yNDspQT1BKzF8MH1lbHNlIEE9QSsoMHxaQShBKSl8MH13aGlsZSgwKTtyZXR1cm4gMHxBfWZ1bmN0aW9uIGtBKEEsSSl7SXw9MDt2YXIgZyxRPTAsRT0wO2c9eSx5PXkrMTkyfDAsUEkoQXw9MCksRT0xMjgrKFE9Zys2NHwwKXwwO2Rve0NbUT4+Ml09OTA5NTIyNDg2LFE9USs0fDB9d2hpbGUoKDB8USk8KDB8RSkpO0JbZys2ND4+MF09NTReQltJPj4wXSxRPTE7ZG97QlsoRT1nKzY0K1F8MCk+PjBdPUJbRT4+MF1eQltJK1E+PjBdLFE9USsxfDB9d2hpbGUoMzIhPSgwfFEpKTtQKEEsZys2NHwwLDEyOCwwKSxQSShBKzIwOHwwKSxFPTEyOCsoUT1nKzY0fDApfDA7ZG97Q1tRPj4yXT0xNTQ5NTU2ODI4LFE9USs0fDB9d2hpbGUoKDB8USk8KDB8RSkpO0JbZys2ND4+MF09OTJeQltJPj4wXSxRPTE7ZG97QlsoRT1nKzY0K1F8MCk+PjBdPUJbRT4+MF1eQltJK1E+PjBdLFE9USsxfDB9d2hpbGUoMzIhPSgwfFEpKTtQKEErMjA4fDAsZys2NHwwLDEyOCwwKSxNSShnKzY0fDAsMTI4KSxNSShnLDY0KSx5PWd9ZnVuY3Rpb24gbEEoQSxJLGcpe3ZhciBCLFEsRSxpLGUsbyxjLGEsbjtBfD0wLGd8PTAsbj0oMHxDWzQrKEl8PTApPj4yXSktKDB8Q1tnKzQ+PjJdKXwwLGE9KDB8Q1tJKzg+PjJdKS0oMHxDW2crOD4+Ml0pfDAsYz0oMHxDW0krMTI+PjJdKS0oMHxDW2crMTI+PjJdKXwwLG89KDB8Q1tJKzE2Pj4yXSktKDB8Q1tnKzE2Pj4yXSl8MCxlPSgwfENbSSsyMD4+Ml0pLSgwfENbZysyMD4+Ml0pfDAsaT0oMHxDW0krMjQ+PjJdKS0oMHxDW2crMjQ+PjJdKXwwLEU9KDB8Q1tJKzI4Pj4yXSktKDB8Q1tnKzI4Pj4yXSl8MCxRPSgwfENbSSszMj4+Ml0pLSgwfENbZyszMj4+Ml0pfDAsQj0oMHxDW0krMzY+PjJdKS0oMHxDW2crMzY+PjJdKXwwLENbQT4+Ml09KDB8Q1tJPj4yXSktKDB8Q1tnPj4yXSksQ1tBKzQ+PjJdPW4sQ1tBKzg+PjJdPWEsQ1tBKzEyPj4yXT1jLENbQSsxNj4+Ml09byxDW0ErMjA+PjJdPWUsQ1tBKzI0Pj4yXT1pLENbQSsyOD4+Ml09RSxDW0ErMzI+PjJdPVEsQ1tBKzM2Pj4yXT1CfWZ1bmN0aW9uIF9BKEEsSSxnKXt2YXIgQixRLEUsaSxlLG8sYyxhLG47QXw9MCxJfD0wLG49KDB8Q1s0KyhnfD0wKT4+Ml0pKygwfENbSSs0Pj4yXSl8MCxhPSgwfENbZys4Pj4yXSkrKDB8Q1tJKzg+PjJdKXwwLGM9KDB8Q1tnKzEyPj4yXSkrKDB8Q1tJKzEyPj4yXSl8MCxvPSgwfENbZysxNj4+Ml0pKygwfENbSSsxNj4+Ml0pfDAsZT0oMHxDW2crMjA+PjJdKSsoMHxDW0krMjA+PjJdKXwwLGk9KDB8Q1tnKzI0Pj4yXSkrKDB8Q1tJKzI0Pj4yXSl8MCxFPSgwfENbZysyOD4+Ml0pKygwfENbSSsyOD4+Ml0pfDAsUT0oMHxDW2crMzI+PjJdKSsoMHxDW0krMzI+PjJdKXwwLEI9KDB8Q1tnKzM2Pj4yXSkrKDB8Q1tJKzM2Pj4yXSl8MCxDW0E+PjJdPSgwfENbZz4+Ml0pKygwfENbST4+Ml0pLENbQSs0Pj4yXT1uLENbQSs4Pj4yXT1hLENbQSsxMj4+Ml09YyxDW0ErMTY+PjJdPW8sQ1tBKzIwPj4yXT1lLENbQSsyND4+Ml09aSxDW0ErMjg+PjJdPUUsQ1tBKzMyPj4yXT1RLENbQSszNj4+Ml09Qn1mdW5jdGlvbiBHQShBKXtBfD0wO3ZhciBJLGcsQz0wLEU9MCxpPTAsZT0wO0k9eSxnPXk9eSs2MyYtNjQseT15KzE2fDAsQltnPj4wXT0wLEJbZysxPj4wXT0wLEJbZysyPj4wXT0wLEJbZyszPj4wXT0wLEJbZys0Pj4wXT0wLEJbZys1Pj4wXT0wLEJbZys2Pj4wXT0wLGk9MDtkb3tDPTB8QltBK2k+PjBdLEU9MDtkb3tCWyhlPWcrRXwwKT4+MF09QltlPj4wXXxCWzMyMDk2KyhFPDw1KStpPj4wXV5DLEU9RSsxfDB9d2hpbGUoNyE9KDB8RSkpO2k9aSsxfDB9d2hpbGUoMzEhPSgwfGkpKTtDPTEyNyZCW0ErMzE+PjBdLEU9MDtkb3tCWyhlPWcrRXwwKT4+MF09QltlPj4wXXxDXkJbMzIwOTYrKEU8PDUpKzMxPj4wXSxFPUUrMXwwfXdoaWxlKDchPSgwfEUpKTtDPTAsRT0wO2Rve0U9KDB8UVtnK0M+PjBdKS0xfEUsQz1DKzF8MH13aGlsZSg3IT0oMHxDKSk7cmV0dXJuIHk9SSxFPj4+OCYxfDB9ZnVuY3Rpb24gZEEoQSxJLGcsQixRLEUsaSxlLG8sYyxhLG4pe3JldHVybiBBfD0wLEl8PTAsZ3w9MCxCfD0wLFF8PTAsRXw9MCxpfD0wLGV8PTAsb3w9MCxjfD0wLGM9eSx5PXkrMzM2fDAsUUIoYyxhfD0wLG58PTApLGdCKGMrNjR8MCxjKSxNSShjLDY0KSxiZyhjKzY0fDAsaSxlLG8pLExJKGMrMzIwfDAsZSxvKSxiZyhjKzY0fDAsYyszMjB8MCw4LDApLHpJKEEsQixRLEUsYSxuKSxiZyhjKzY0fDAsQSxRLEUpLExJKGMrMzIwfDAsUSxFKSxiZyhjKzY0fDAsYyszMjB8MCw4LDApLElCKGMrNjR8MCxJKSxNSShjKzY0fDAsMjU2KSwwfGcmJihDW2c+PjJdPTE2LENbZys0Pj4yXT0wKSx5PWMsMH1mdW5jdGlvbiBZQShBLEksZyl7SXw9MDt2YXIgUSxFPTA7aWYoUT0oQXw9MCkrKGd8PTApfDAsSSY9MjU1LCgwfGcpPj02Nyl7Zm9yKDszJkE7KUJbQT4+MF09SSxBPUErMXwwO2ZvcihFPUl8STw8OHxJPDwxNnxJPDwyNDsoMHxBKTw9KCgtNCZRKS02NHwwKTspQ1tBPj4yXT1FLENbQSs0Pj4yXT1FLENbQSs4Pj4yXT1FLENbQSsxMj4+Ml09RSxDW0ErMTY+PjJdPUUsQ1tBKzIwPj4yXT1FLENbQSsyND4+Ml09RSxDW0ErMjg+PjJdPUUsQ1tBKzMyPj4yXT1FLENbQSszNj4+Ml09RSxDW0ErNDA+PjJdPUUsQ1tBKzQ0Pj4yXT1FLENbQSs0OD4+Ml09RSxDW0ErNTI+PjJdPUUsQ1tBKzU2Pj4yXT1FLENbQSs2MD4+Ml09RSxBPUErNjR8MDtmb3IoOygwfEEpPCgtNCZRfDApOylDW0E+PjJdPUUsQT1BKzR8MH1mb3IoOygwfEEpPCgwfFEpOylCW0E+PjBdPUksQT1BKzF8MDtyZXR1cm4gUS1nfDB9ZnVuY3Rpb24gTUEoQSxJKXtBfD0wO3ZhciBnPTA7Zz02NzEwODg2MyYoMHxWZyhJfD0wKSksQ1tBPj4yXT1nLGc9KDB8VmcoSSszfDApKT4+PjImNjcxMDg2MTEsQ1tBKzQ+PjJdPWcsZz0oMHxWZyhJKzZ8MCkpPj4+NCY2NzA5MjczNSxDW0ErOD4+Ml09ZyxnPSgwfFZnKEkrOXwwKSk+Pj42JjY2MDc2NjcxLENbQSsxMj4+Ml09ZyxnPSgwfFZnKEkrMTJ8MCkpPj4+OCYxMDQ4NTc1LENbQSsxNj4+Ml09ZyxDW0ErMjA+PjJdPTAsQ1tBKzIwKzQ+PjJdPTAsQ1tBKzIwKzg+PjJdPTAsQ1tBKzIwKzEyPj4yXT0wLENbQSsyMCsxNj4+Ml09MCxnPTB8VmcoSSsxNnwwKSxDW0ErNDA+PjJdPWcsZz0wfFZnKEkrMjB8MCksQ1tBKzQ0Pj4yXT1nLGc9MHxWZyhJKzI0fDApLENbQSs0OD4+Ml09ZyxJPTB8VmcoSSsyOHwwKSxDW0ErNTI+PjJdPUksQ1tBKzU2Pj4yXT0wLENbQSs1Nis0Pj4yXT0wLEJbQSs4MD4+MF09MH1mdW5jdGlvbiBTQShBLEksZyxCLFEsRSl7QXw9MCxJfD0wLGd8PTAsQnw9MCxRfD0wLEV8PTA7dmFyIGk9MCxlPTAsYz0wO2Rve2lmKFE+Pj4wPDB8MD09KDB8USkmQj4+PjA8NjR8fChpPTB8dmcoMHxCLDB8USwtNjQsLTEpLChlPTB8bygpKT4+PjA+MHwwPT0oMHxlKSZpPj4+MD40Mjk0OTY3MjMxKSljPTEwO2Vsc2V7aWYoMHxkZyhnLGcrNjR8MCxpLGUsRSkpe2lmKCFBKXtjPTEwO2JyZWFrfVlBKDB8QSwwLDB8aSksYz0xMDticmVha30wfEkmJihDW0k+PjJdPWksQ1tJKzQ+PjJdPWUpLEE/KFlJKDB8QSxnKzY0fDAsMHxpKSxCPTApOkI9MH19d2hpbGUoMCk7cmV0dXJuIDEwPT0oMHxjKSYmKEk/KENbST4+Ml09MCxDW0krND4+Ml09MCxCPS0xKTpCPS0xKSwwfEJ9ZnVuY3Rpb24gVUEoQSxJKXtJfD0wO3ZhciBnLFEsRT0wLGk9MDtpZihnPXksUT15PXkrNjMmLTY0LHk9eSszMnwwLDB8KEF8PTApJiYwfChFPTB8Q1tBKzI4Pj4yXSkpe0NbUT4+Ml09SSxpPTA7ZG97aWYoQltRKzg+PjBdPWksRSl7ST0wO2Rve0NbUSs0Pj4yXT1JLENbUSsxMj4+Ml09MCxDW1ErMTY+PjJdPUNbUT4+Ml0sQ1tRKzE2KzQ+PjJdPUNbUSs0Pj4yXSxDW1ErMTYrOD4+Ml09Q1tRKzg+PjJdLENbUSsxNisxMj4+Ml09Q1tRKzEyPj4yXSxYKEEsUSsxNnwwKSxJPUkrMXwwLEU9MHxDW0ErMjg+PjJdfXdoaWxlKEk+Pj4wPEU+Pj4wKX1lbHNlIEU9MDtpPWkrMXwwfXdoaWxlKDQhPSgwfGkpKX15PWd9ZnVuY3Rpb24gdkEoQSxJLGcsUSl7QXw9MCxnfD0wLFF8PTA7dmFyIEUsaSxlPTA7aWYoRT15LGk9eT15KzYzJi02NCx5PXkrMTkyfDAsKChJfD0wKS0xJjI1NSk+NjMmJlNCKCksISgoUSstMSYyNTUpPjYzfDA9PSgwfGcpKSl7QltpKzEyOD4+MF09SSxCW2krMTI4KzE+PjBdPVEsQltpKzEyOCsyPj4wXT0xLEJbaSsxMjgrMz4+MF09MSxXZyhpKzEyOCs0fDApLExJKGkrMTI4Kzh8MCwwLDApLGU9NDgrKEk9aSsxMjgrMTZ8MCl8MDtkb3tDW0k+PjJdPTAsST1JKzR8MH13aGlsZSgoMHxJKTwoMHxlKSk7cmV0dXJuIFhBKEEsaSsxMjh8MCksWUEoaSsoMjU1JlEpfDAsMCwxMjgtKDI1NSZRKXwwKSxCQSgwfGksMHxnLDI1NSZRfDApLCQoQSxpLDEyOCwwKSxNSShpLDEyOCksdm9pZCh5PUUpfVNCKCl9ZnVuY3Rpb24gYkEoQSxJKXtBfD0wLEl8PTA7dmFyIGcsQixRPTA7Qj15LGc9eT15KzYzJi02NCx5PXkrMTZ8MDtkb3tpZigwIT0oMHxBKSYmMCE9KDB8SSkmJjEwMjQ9PSgwfChJPDwxMD4+PjApLyhJPj4+MCkpJiYoUT0wfEYoMTIpLENbQT4+Ml09USwwIT0oMHxRKSkpe2lmKENbUSs0Pj4yXT0wLENbUT4+Ml09MCxRPTB8d2coZyxJPDwxMCksQ1s4Njc4XT1RLFEpQ1tnPj4yXT0wO2Vsc2UgaWYoMHwoUT0wfENbZz4+Ml0pKXtDW0NbQT4+Ml0+PjJdPVEsQ1s0KygwfENbQT4+Ml0pPj4yXT1RLENbOCsoMHxDW0E+PjJdKT4+Ml09STw8MTAsUT0wO2JyZWFrfWQoMHxDW0E+PjJdKSxDW0E+PjJdPTAsUT0tMjJ9ZWxzZSBRPS0yMn13aGlsZSgwKTtyZXR1cm4geT1CLDB8UX1mdW5jdGlvbiBKQShBLEksZyxCLEUsaSl7dmFyIGUsbyxjO3JldHVybiBBfD0wLEl8PTAsZ3w9MCxCfD0wLGl8PTAsbz15LGU9eT15KzYzJi02NCx5PXkrMzJ8MCxjPVFbNCsoRXw9MCk+PjBdfFFbRSs0KzE+PjBdPDw4fFFbRSs0KzI+PjBdPDwxNnxRW0UrNCszPj4wXTw8MjQsQ1tlKzE2Pj4yXT1RW0U+PjBdfFFbRSsxPj4wXTw8OHxRW0UrMj4+MF08PDE2fFFbRSszPj4wXTw8MjQsQ1tlKzE2KzQ+PjJdPWMsQ1tlKzE2Kzg+PjJdPTAsQ1tlKzE2KzgrND4+Ml09MCxMSShlLGcsQiksQ1tlKzg+PjJdPTAsQ1tlKzgrND4+Ml09MCwoSSstMTZ8MCk+Pj4wPjQ4PyhDWzg2NzhdPTI4LGc9LTEpOmc9MHxmdW5jdGlvbihBLEksZyxCLEMpe3JldHVybiBnfD0wLCgoSXw9MCktMXwwKT4+PjA+NjM/Zz0tMTooZnVuY3Rpb24oQSxJLGcsQixDKXt2YXIgUSxFO2lmKEl8PTAsZ3w9MCxCfD0wLEN8PTAsUT15LEU9eT15KzYzJi02NCx5PXkrMzY4fDAsKEF8PTApfHxTQigpLChnKy0xJjI1NSk+NjMmJlNCKCksSSlyZXR1cm4gY0EoRSxnLEksQixDKSwkKEUsMCwwLDApLGIoRSxBLGcpLHZvaWQoeT1RKTtTQigpfShBfD0wLGcsMjU1JkksQnw9MCxDfD0wKSxnPTApLDB8Z30oQSxJLGksZSxlKzE2fDApLHk9bywwfGd9ZnVuY3Rpb24gUEEoQSxJLGcsQixFLGksZSxjLGEsbixyKXt2YXIgdDtyZXR1cm4gQXw9MCxJfD0wLGd8PTAsQnw9MCxFfD0wLGl8PTAsZXw9MCxjfD0wLGF8PTAsbnw9MCxyfD0wLHQ9eSx5PXkrNDh8MCxDW3QrMzI+PjJdPTAsUih0LG4sciksST1RW24rMTYrND4+MF18UVtuKzE2KzQrMT4+MF08PDh8UVtuKzE2KzQrMj4+MF08PDE2fFFbbisxNis0KzM+PjBdPDwyNCxDW3QrMzIrND4+Ml09UVtuKzE2Pj4wXXxRW24rMTYrMT4+MF08PDh8UVtuKzE2KzI+PjBdPDwxNnxRW24rMTYrMz4+MF08PDI0LENbdCszMis0KzQ+PjJdPUksST0wfGZ1bmN0aW9uKEEsSSxnLEIsQyxRLEUsaSxlLGMpe3ZhciBhO0F8PTAsSXw9MCxnfD0wLEJ8PTAsQ3w9MCxRfD0wLEV8PTAsaXw9MCxhPXkseT15KzM1MnwwLGdnKGErMTZ8MCw2NCwwLGV8PTAsY3w9MCksZ0IoYSs4MHwwLGErMTZ8MCksTUkoYSsxNnwwLDY0KSxiZyhhKzgwfDAsUSxFLGkpLFE9MHxVZygwLDAsMHxFLDB8aSksbygpLGJnKGErODB8MCwzNDY0MCwxNSZRLDApLGJnKGErODB8MCxJLGcsQiksUT0wfFVnKDAsMCwwfGcsMHxCKSxvKCksYmcoYSs4MHwwLDM0NjQwLDE1JlEsMCksTEkoYSszMzZ8MCxFLGkpLGJnKGErODB8MCxhKzMzNnwwLDgsMCksTEkoYSszMzZ8MCxnLEIpLGJnKGErODB8MCxhKzMzNnwwLDgsMCksSUIoYSs4MHwwLGEpLE1JKGErODB8MCwyNTYpLEU9MHx0QihhLEMpLE1JKGEsMTYpO2Rve2lmKEEpe2lmKEUpe1lBKDB8QSwwLDB8ZyksRT0tMTticmVha31tSShBLEksZyxCLGUsMSxjKSxFPTA7YnJlYWt9fXdoaWxlKDApO3JldHVybiB5PWEsMHxFfShBLGcsQixFLGksZSxjLGEsdCszMnwwLHQpLE1JKHQsMzIpLHk9dCwwfEl9ZnVuY3Rpb24gUkEoQSxJLGcsUSxFLGksZSl7SXw9MCxnfD0wLFF8PTAsRXw9MCxpfD0wLGV8PTA7dmFyIG8sYyxhLG49MDthPXksbz15PXkrNjMmLTY0LHk9eSsxNnwwLGM9MTI4KyhuPUF8PTApfDA7ZG97QltuPj4wXT0wLG49bisxfDB9d2hpbGUoKDB8bik8KDB8YykpO2Rve2lmKCEoKGl8USk+Pj4wPjB8MD09KGl8UXwwKSYoRXxnKT4+PjA+NDI5NDk2NzI5NXxlPj4+MD4yMTQ3NDgzNjQ4KSl7aWYoaT4+PjA8MHwwPT0oMHxpKSZFPj4+MDwzfGU+Pj4wPDgxOTIpe0NbODY3OF09MjgsZz0tMTticmVha31DZyhvLDE2KSxnPSgwIT0oMHxHZyhFLGU+Pj4xMCxJLGcsbyxBKSkpPDwzMT4+MzE7YnJlYWt9Q1s4Njc4XT0yMixnPS0xfXdoaWxlKDApO3JldHVybiB5PWEsMHxnfWZ1bmN0aW9uIE5BKEEsSSxnLEIsRSxpLGUsYyxhLG4scix0KXtyZXR1cm4gQXw9MCxJfD0wLGd8PTAsQnw9MCxFfD0wLGl8PTAsZXw9MCxjfD0wLGF8PTAsbnw9MCxyfD0wLHR8PTAsbj15LHk9eSs0OHwwLENbbiszMj4+Ml09MCxSKG4scix0KSx0PVFbcisxNis0Pj4wXXxRW3IrMTYrNCsxPj4wXTw8OHxRW3IrMTYrNCsyPj4wXTw8MTZ8UVtyKzE2KzQrMz4+MF08PDI0LENbbiszMis0Pj4yXT1RW3IrMTY+PjBdfFFbcisxNisxPj4wXTw8OHxRW3IrMTYrMj4+MF08PDE2fFFbcisxNiszPj4wXTw8MjQsQ1tuKzMyKzQrND4+Ml09dCxmdW5jdGlvbihBLEksZyxCLFEsRSxpLGUsYyxhLG4pe3ZhciByO0F8PTAsSXw9MCxnfD0wLEJ8PTAsUXw9MCxFfD0wLGl8PTAsZXw9MCxjfD0wLHI9eSx5PXkrMzM2fDAsZ2cociw2NCwwLGF8PTAsbnw9MCksZ0Iocis2NHwwLHIpLE1JKHIsNjQpLGJnKHIrNjR8MCxpLGUsYyksaT0wfFVnKDAsMCwwfGUsMHxjKSxvKCksYmcocis2NHwwLDM0NjQwLDE1JmksMCksbUkoQSxCLFEsRSxhLDEsbiksYmcocis2NHwwLEEsUSxFKSxhPTB8VWcoMCwwLDB8USwwfEUpLG8oKSxiZyhyKzY0fDAsMzQ2NDAsMTUmYSwwKSxMSShyKzMyMHwwLGUsYyksYmcocis2NHwwLHIrMzIwfDAsOCwwKSxMSShyKzMyMHwwLFEsRSksYmcocis2NHwwLHIrMzIwfDAsOCwwKSxJQihyKzY0fDAsSSksTUkocis2NHwwLDI1NiksMHxnJiYoQ1tnPj4yXT0xNixDW2crND4+Ml09MCkseT1yfShBLEksZyxCLEUsaSxlLGMsYSxuKzMyfDAsbiksTUkobiwzMikseT1uLDB9ZnVuY3Rpb24gbUEoQSxJLGcsUSxFKXtBfD0wLEl8PTAsZ3w9MCxRfD0wLEV8PTA7dmFyIGk9MCxlPTA7QTpkb3tpZihFKXtmb3IoZT0wfENbZz4+Ml07Oyl7aWYoZT4+PjA+PUk+Pj4wKXtpPTQ7YnJlYWt9aWYoKGk9MHxCW0ErZT4+MF0pPDwyND4+MjQhPTYxKXtpZighUSl7aT05O2JyZWFrfWlmKCEoMHxxZyhRLGk8PDI0Pj4yNCkpKXtpPTk7YnJlYWt9fWVsc2UgRT1FKy0xfDA7aWYoZT1lKzF8MCxDW2c+PjJdPWUsIUUpe0U9MDticmVhayBBfX1pZig0PT0oMHxpKSl7Q1s4Njc4XT02OCxFPS0xO2JyZWFrfWlmKDk9PSgwfGkpKXtDWzg2NzhdPTI4LEU9LTE7YnJlYWt9fWVsc2UgRT0wfXdoaWxlKDApO3JldHVybiAwfEV9ZnVuY3Rpb24gTEEoQSxJLGcsUSxFLGksZSl7SXw9MCxnfD0wLFF8PTAsRXw9MCxpfD0wLGV8PTA7dmFyIG8sYyxhLG49MDthPXksbz15PXkrNjMmLTY0LHk9eSsxNnwwLGM9MTI4KyhuPUF8PTApfDA7ZG97QltuPj4wXT0wLG49bisxfDB9d2hpbGUoKDB8bik8KDB8YykpO2Rve2lmKCEoKGl8USk+Pj4wPjB8MD09KGl8UXwwKSYoRXxnKT4+PjA+NDI5NDk2NzI5NXxlPj4+MD4yMTQ3NDgzNjQ4KSl7aWYoMD09KDB8RSkmMD09KDB8aSl8ZT4+PjA8ODE5Mil7Q1s4Njc4XT0yOCxnPS0xO2JyZWFrfUNnKG8sMTYpLGc9KDAhPSgwfGxnKEUsZT4+PjEwLEksZyxvLEEpKSk8PDMxPj4zMTticmVha31DWzg2NzhdPTIyLGc9LTF9d2hpbGUoMCk7cmV0dXJuIHk9YSwwfGd9ZnVuY3Rpb24geEEoQSxJKXt2YXIgZyxCLFEsRSxpLGUsbyxjLGE7QXw9MCxhPTAtKDB8Q1s0KyhJfD0wKT4+Ml0pfDAsYz0wLSgwfENbSSs4Pj4yXSl8MCxvPTAtKDB8Q1tJKzEyPj4yXSl8MCxlPTAtKDB8Q1tJKzE2Pj4yXSl8MCxpPTAtKDB8Q1tJKzIwPj4yXSl8MCxFPTAtKDB8Q1tJKzI0Pj4yXSl8MCxRPTAtKDB8Q1tJKzI4Pj4yXSl8MCxCPTAtKDB8Q1tJKzMyPj4yXSl8MCxnPTAtKDB8Q1tJKzM2Pj4yXSl8MCxDW0E+PjJdPTAtKDB8Q1tJPj4yXSksQ1tBKzQ+PjJdPWEsQ1tBKzg+PjJdPWMsQ1tBKzEyPj4yXT1vLENbQSsxNj4+Ml09ZSxDW0ErMjA+PjJdPWksQ1tBKzI0Pj4yXT1FLENbQSsyOD4+Ml09USxDW0ErMzI+PjJdPUIsQ1tBKzM2Pj4yXT1nfWZ1bmN0aW9uIEtBKEEsSSl7QXw9MDt2YXIgZyxCLFE9MDtpZihnPXksQj15PXkrNjMmLTY0LHk9eSsxMDI0fDAsMHxDWzI4KyhJfD0wKT4+Ml0pe1E9MDtkb3tQZyhBKzY0fDAsMCksUGcoQSs2OHwwLFEpLFQoQiwxMDI0LEEsNzIpLHhJKCgwfENbNCsoMHxDW0k+PjJdKT4+Ml0pKygoMHxFKDB8Q1tJKzI0Pj4yXSxRKSk8PDEwKXwwLEIpLFBnKEErNjR8MCwxKSxUKEIsMTAyNCxBLDcyKSx4SSgoMHxDWzQrKDB8Q1tJPj4yXSk+PjJdKSsoMSsoMHxFKDB8Q1tJKzI0Pj4yXSxRKSk8PDEwKXwwLEIpLFE9USsxfDB9d2hpbGUoUT4+PjA8KDB8Q1tJKzI4Pj4yXSk+Pj4wKX1NSShCLDEwMjQpLHk9Z31mdW5jdGlvbiBYQShBLEkpe0l8PTA7dmFyIGc9MCxDPTAsRT0wLGk9MDshZnVuY3Rpb24oQSl7dmFyIEksZz0wLEM9MDtDPTMyMzUyLEk9NjQrKGc9QXw9MCl8MDtkb3tCW2c+PjBdPTB8QltDPj4wXSxnPWcrMXwwLEM9QysxfDB9d2hpbGUoKDB8Zyk8KDB8SSkpO1lBKEErNjR8MCwwLDI5Myl9KEF8PTApLGc9MDtkb3tpPTB8cUkoSSsoZzw8Myl8MCksRT0wfG8oKSxpPShRWyhDPUErKGc8PDMpfDApPj4wXXxRW0MrMT4+MF08PDh8UVtDKzI+PjBdPDwxNnxRW0MrMz4+MF08PDI0KV5pLEU9KFFbQys0Pj4wXXxRW0MrNCsxPj4wXTw8OHxRW0MrNCsyPj4wXTw8MTZ8UVtDKzQrMz4+MF08PDI0KV5FLEJbQz4+MF09aSxCW0MrMT4+MF09aT4+OCxCW0MrMj4+MF09aT4+MTYsQltDKzM+PjBdPWk+PjI0LEJbQys0Pj4wXT1FLEJbQys0KzE+PjBdPUU+PjgsQltDKzQrMj4+MF09RT4+MTYsQltDKzQrMz4+MF09RT4+MjQsZz1nKzF8MH13aGlsZSg4IT0oMHxnKSl9ZnVuY3Rpb24gakEoQSl7dmFyIEksZyxCLEMsRSxpLGM9MDtyZXR1cm4gRT0wfFFbNysoQXw9MCk+PjBdLGk9MHxyZygwfFFbQSs2Pj4wXSwwLDgpLGM9MHxvKCksQz0wfHJnKDB8UVtBKzU+PjBdLDAsMTYpLGM9MHxjfG8oKSxCPTB8cmcoMHxRW0ErND4+MF0sMCwyNCksYz0wfChjPTB8Y3xvKCkpfFFbQSszPj4wXSxnPTB8cmcoMHxRW0ErMj4+MF0sMCw0MCksYz0wfGN8bygpLEk9MHxyZygwfFFbQSsxPj4wXSwwLDQ4KSxjPTB8Y3xvKCksQT0wfHJnKDB8UVtBPj4wXSwwLDU2KSxlKDB8Y3xvKCl8MCksaXxFfEN8QnxnfEl8QXwwfWZ1bmN0aW9uIFRBKEEsSSxnLEIsUSxFKXtJfD0wLFF8PTAsRXw9MDt2YXIgaSxlPTA7cmV0dXJuIGk9eSxlPXk9eSs2MyYtNjQseT15KzE2fDAsWUkoNjQrKEF8PTApfDAsMHwoZ3w9MCksMHwoQnw9MCkpLGtnKEEsZSxBKzY0fDAsQixRLEUpLDY0PT0oMHxDW2U+PjJdKSYwPT0oMHxDW2UrND4+Ml0pPzB8ST8oZT0wfHZnKDB8QiwwfFEsNjQsMCksQj0wfG8oKSxDW0k+PjJdPWUsQ1tJKzQ+PjJdPUIsQj0wKTpCPTA6KDB8SSYmKENbST4+Ml09MCxDW0krND4+Ml09MCksWUEoMHxBLDAsQis2NHwwKSxCPS0xKSx5PWksMHxCfWZ1bmN0aW9uIHFBKEEsSSl7SXw9MDt2YXIgZyxRPTAsRT0wLGk9MCxlPTA7Zz0wfEJbKEF8PTApPj4wXTtBOmRve2lmKChnKy00OCYyNTUpPD05KXtmb3IoRT1nLGk9MCxlPUE7Oyl7aWYoIShpPj4+MDw0Mjk0OTY3MzAmKChFPShFPDwyND4+MjQpLTQ4fDApPj4+MD5+KFE9MTAqaXwwKT4+PjBeMSkpKXtRPTA7YnJlYWsgQX1pZihpPShFPj4+MD5+UT4+PjA/MDpFKStRfDAsKChFPTB8QlsoUT1lKzF8MCk+PjBdKS00OCYyNTUpPjkpYnJlYWs7ZT1RfSgwfFEpIT0oMHxBKSYmKDB8ZSk9PSgwfEEpfGc8PDI0Pj4yNCE9NDg/Q1tJPj4yXT1pOlE9MH1lbHNlIFE9MH13aGlsZSgwKTtyZXR1cm4gMHxRfWZ1bmN0aW9uIFZBKEEpe3JldHVybigoMC0oKDAtKDk1XihBfD0wKSl8MCk+Pj44JjYzXjYzfCgwLSg0NV5BKXwwKT4+PjgmNjJeNjJ8KChBKzY1NDM5fDApPj4+OF4yNTUpJkErMTg1JigoMTIyLUF8MCk+Pj44JjI1NV4yNTUpfCgoQSstNjV8MCk+Pj44XjI1NSkmQSstNjUmKCg5MC1BfDApPj4+OCYyNTVeMjU1KXwoKEErNjU0ODh8MCk+Pj44XjI1NSkmQSs0JigoNTctQXwwKT4+PjgmMjU1XjI1NSkpfDApPj4+OCYyNTVeMjU1KSYoMC0oNjVeQSl8MCk+Pj44fCgwLSg5NV5BKXwwKT4+PjgmNjNeNjN8KDAtKDQ1XkEpfDApPj4+OCY2Ml42MnwoKEErNjU0Mzl8MCk+Pj44XjI1NSkmQSsxODUmKCgxMjItQXwwKT4+PjgmMjU1XjI1NSl8KChBKy02NXwwKT4+PjheMjU1KSZBKy02NSYoKDkwLUF8MCk+Pj44JjI1NV4yNTUpfCgoQSs2NTQ4OHwwKT4+PjheMjU1KSZBKzQmKCg1Ny1BfDApPj4+OCYyNTVeMjU1KXwwfWZ1bmN0aW9uIHpBKEEpe3JldHVybigoMC0oKDAtKDQ3XihBfD0wKSl8MCk+Pj44JjYzXjYzfCgwLSg0M15BKXwwKT4+PjgmNjJeNjJ8KChBKzY1NDM5fDApPj4+OF4yNTUpJkErMTg1JigoMTIyLUF8MCk+Pj44JjI1NV4yNTUpfCgoQSstNjV8MCk+Pj44XjI1NSkmQSstNjUmKCg5MC1BfDApPj4+OCYyNTVeMjU1KXwoKEErNjU0ODh8MCk+Pj44XjI1NSkmQSs0JigoNTctQXwwKT4+PjgmMjU1XjI1NSkpfDApPj4+OCYyNTVeMjU1KSYoMC0oNjVeQSl8MCk+Pj44fCgwLSg0N15BKXwwKT4+PjgmNjNeNjN8KDAtKDQzXkEpfDApPj4+OCY2Ml42MnwoKEErNjU0Mzl8MCk+Pj44XjI1NSkmQSsxODUmKCgxMjItQXwwKT4+PjgmMjU1XjI1NSl8KChBKy02NXwwKT4+PjheMjU1KSZBKy02NSYoKDkwLUF8MCk+Pj44JjI1NV4yNTUpfCgoQSs2NTQ4OHwwKT4+PjheMjU1KSZBKzQmKCg1Ny1BfDApPj4+OCYyNTVeMjU1KXwwfWZ1bmN0aW9uIFdBKEEsSSl7SXw9MDt2YXIgZz0wLEI9MDtpZihnPTB8eWcoMHxDWzcyKyhBfD0wKT4+Ml0sMHxDW0ErNzIrND4+Ml0sMyksbygpLCgxMjcmZyk+Pj4wPDExMikxMTItKDEyNyZnKXwwJiZCQShBKzgwKygxMjcmZyl8MCwzMzA1NiwxMTItKDEyNyZnKXwwKTtlbHNlezEyOC0oMTI3JmcpfDAmJkJBKEErODArKDEyNyZnKXwwLDMzMDU2LDEyOC0oMTI3JmcpfDApLEQoQSxBKzgwfDAsSSxJKzY0MHwwKSxCPTExMisoZz1BKzgwfDApfDA7ZG97Q1tnPj4yXT0wLGc9Zys0fDB9d2hpbGUoKDB8Zyk8KDB8QikpfU5JKEErMTkyfDAsQSs2NHwwLDE2KSxEKEEsQSs4MHwwLEksSSs2NDB8MCl9ZnVuY3Rpb24gT0EoQSxJKXt2YXIgZyxCLFEsRSxpLGUsbyxjLGE7QXw9MCxhPTB8Q1s0KyhJfD0wKT4+Ml0sYz0wfENbSSs4Pj4yXSxvPTB8Q1tJKzEyPj4yXSxlPTB8Q1tJKzE2Pj4yXSxpPTB8Q1tJKzIwPj4yXSxFPTB8Q1tJKzI0Pj4yXSxRPTB8Q1tJKzI4Pj4yXSxCPTB8Q1tJKzMyPj4yXSxnPTB8Q1tJKzM2Pj4yXSxDW0E+PjJdPUNbST4+Ml0sQ1tBKzQ+PjJdPWEsQ1tBKzg+PjJdPWMsQ1tBKzEyPj4yXT1vLENbQSsxNj4+Ml09ZSxDW0ErMjA+PjJdPWksQ1tBKzI0Pj4yXT1FLENbQSsyOD4+Ml09USxDW0ErMzI+PjJdPUIsQ1tBKzM2Pj4yXT1nfWZ1bmN0aW9uIFpBKEEpe0F8PTA7dmFyIEk9MCxnPTAsUT0wO0E6ZG97aWYoMyZBKWZvcihJPUEsZz1BOzspe2lmKCEoMHxCW2c+PjBdKSlicmVhayBBO2lmKCEoMyYoST1nPWcrMXwwKSkpe0k9ZyxRPTU7YnJlYWt9fWVsc2UgST1BLFE9NX13aGlsZSgwKTtpZig1PT0oMHxRKSl7Zm9yKDshKCgtMjEzOTA2MjE0NCYoZz0wfENbST4+Ml0pXi0yMTM5MDYyMTQ0KSZnKy0xNjg0MzAwOSk7KUk9SSs0fDA7aWYoKDI1NSZnKTw8MjQ+PjI0KWRve0k9SSsxfDB9d2hpbGUoMCE9KDB8QltJPj4wXSkpfXJldHVybiBJLUF8MH1mdW5jdGlvbiAkQShBLEkpe0l8PTA7dmFyIGc9MDtDWyhBfD0wKT4+Ml09MTYzNDc2MDgwNSxDW0ErND4+Ml09ODU3NzYwODc4LENbQSs4Pj4yXT0yMDM2NDc3MjM0LENbQSsxMj4+Ml09MTc5NzI4NTIzNixnPTB8VmcoSSksQ1tBKzE2Pj4yXT1nLGc9MHxWZyhJKzR8MCksQ1tBKzIwPj4yXT1nLGc9MHxWZyhJKzh8MCksQ1tBKzI0Pj4yXT1nLGc9MHxWZyhJKzEyfDApLENbQSsyOD4+Ml09ZyxnPTB8VmcoSSsxNnwwKSxDW0ErMzI+PjJdPWcsZz0wfFZnKEkrMjB8MCksQ1tBKzM2Pj4yXT1nLGc9MHxWZyhJKzI0fDApLENbQSs0MD4+Ml09ZyxJPTB8VmcoSSsyOHwwKSxDW0ErNDQ+PjJdPUl9ZnVuY3Rpb24gQUkoQSxJLGcpe0l8PTAsZ3w9MDt2YXIgQz0wO0JbNysoQXw9MCk+PjBdPUksQz0wfHlnKDB8SSwwfGcsOCksbygpLEJbQSs2Pj4wXT1DLEM9MHx5ZygwfEksMHxnLDE2KSxvKCksQltBKzU+PjBdPUMsQz0wfHlnKDB8SSwwfGcsMjQpLG8oKSxCW0ErND4+MF09QyxCW0ErMz4+MF09ZyxDPTB8eWcoMHxJLDB8Zyw0MCksbygpLEJbQSsyPj4wXT1DLEM9MHx5ZygwfEksMHxnLDQ4KSxvKCksQltBKzE+PjBdPUMsZz0wfHlnKDB8SSwwfGcsNTYpLG8oKSxCW0E+PjBdPWd9ZnVuY3Rpb24gSUkoQSxJLGcpe3ZhciBCLEM7Z3w9MCxCPXksQz15PXkrNjMmLTY0LHk9eSs0OHwwLF9BKEF8PTAsNDArKEl8PTApfDAsSSksbEEoQSs0MHwwLEkrNDB8MCxJKSx1KEErODB8MCxBLGcrNDB8MCksdShBKzQwfDAsQSs0MHwwLGcpLHUoQSsxMjB8MCxnKzEyMHwwLEkrMTIwfDApLHUoQSxJKzgwfDAsZys4MHwwKSxfQShDLEEsQSksbEEoQSxBKzgwfDAsQSs0MHwwKSxfQShBKzQwfDAsQSs4MHwwLEErNDB8MCksbEEoQSs4MHwwLEMsQSsxMjB8MCksX0EoQSsxMjB8MCxDLEErMTIwfDApLHk9Qn1mdW5jdGlvbiBnSShBLEksZyl7dmFyIEIsQztnfD0wLEI9eSxDPXk9eSs2MyYtNjQseT15KzQ4fDAsX0EoQXw9MCw0MCsoSXw9MCl8MCxJKSxsQShBKzQwfDAsSSs0MHwwLEkpLHUoQSs4MHwwLEEsZyksdShBKzQwfDAsQSs0MHwwLGcrNDB8MCksdShBKzEyMHwwLGcrMTIwfDAsSSsxMjB8MCksdShBLEkrODB8MCxnKzgwfDApLF9BKEMsQSxBKSxsQShBLEErODB8MCxBKzQwfDApLF9BKEErNDB8MCxBKzgwfDAsQSs0MHwwKSxfQShBKzgwfDAsQyxBKzEyMHwwKSxsQShBKzEyMHwwLEMsQSsxMjB8MCkseT1CfWZ1bmN0aW9uIEJJKEEsSSxnKXt2YXIgQixDO2d8PTAsQj15LEM9eT15KzYzJi02NCx5PXkrNDh8MCxfQShBfD0wLDQwKyhJfD0wKXwwLEkpLGxBKEErNDB8MCxJKzQwfDAsSSksdShBKzgwfDAsQSxnKzQwfDApLHUoQSs0MHwwLEErNDB8MCxnKSx1KEErMTIwfDAsZys4MHwwLEkrMTIwfDApLF9BKEMsSSs4MHwwLEkrODB8MCksbEEoQSxBKzgwfDAsQSs0MHwwKSxfQShBKzQwfDAsQSs4MHwwLEErNDB8MCksbEEoQSs4MHwwLEMsQSsxMjB8MCksX0EoQSsxMjB8MCxDLEErMTIwfDApLHk9Qn1mdW5jdGlvbiBDSShBLEksZyl7dmFyIEIsQztnfD0wLEI9eSxDPXk9eSs2MyYtNjQseT15KzQ4fDAsX0EoQXw9MCw0MCsoSXw9MCl8MCxJKSxsQShBKzQwfDAsSSs0MHwwLEkpLHUoQSs4MHwwLEEsZyksdShBKzQwfDAsQSs0MHwwLGcrNDB8MCksdShBKzEyMHwwLGcrODB8MCxJKzEyMHwwKSxfQShDLEkrODB8MCxJKzgwfDApLGxBKEEsQSs4MHwwLEErNDB8MCksX0EoQSs0MHwwLEErODB8MCxBKzQwfDApLF9BKEErODB8MCxDLEErMTIwfDApLGxBKEErMTIwfDAsQyxBKzEyMHwwKSx5PUJ9ZnVuY3Rpb24gUUkoQSxJKXtBfD0wLEl8PTA7dmFyIGcsQyxRPTA7Zz15LEM9eT15KzYzJi02NCx5PXkrMjA4fDAsUT0wO2Rve0JbQStRPj4wXT0wfEJbSStRPj4wXSxRPVErMXwwfXdoaWxlKDMyIT0oMHxRKSk7cmV0dXJuIEJbQT4+MF09LTgmQltBPj4wXSxCW0ErMzE+PjBdPTYzJkJbQSszMT4+MF18NjQsaUEoQys0MHwwLEEpLGZ1bmN0aW9uKEEsSSxnKXt2YXIgQixDO0F8PTAsQj15LEM9eT15KzYzJi02NCx5PXkrOTZ8MCxfQShDKzQ4fDAsZ3w9MCxJfD0wKSxsQShDLGcsSSksVyhDLEMpLHUoQSxDKzQ4fDAsQykseT1CfShDLEMrNDArNDB8MCxDKzQwKzgwfDApLENBKEEsQykseT1nLDB9ZnVuY3Rpb24gRUkoQSxJLGcpe3ZhciBFLGk7aWYoQXw9MCxJfD0wLGd8PTAsRT15LGk9eT15KzYzJi02NCx5PXkrMTZ8MCxDW2krND4+Ml09QSxDW2k+PjJdPUksQltpKzg+PjBdPTAsMHxnKXtBPTA7ZG97QltpKzg+PjBdPUJbaSs4Pj4wXXxCWygwfENbaT4+Ml0pK0E+PjBdXkJbKDB8Q1tpKzQ+PjJdKStBPj4wXSxBPUErMXwwfXdoaWxlKCgwfEEpIT0oMHxnKSl9cmV0dXJuIHk9RSwoKDUxMSsoMHxRW2krOD4+MF0pfDApPj4+OCYxKS0xfDB9ZnVuY3Rpb24gaUkoQSxJKXtBfD0wO3ZhciBnLFEsRT0wO2lmKGc9eSxRPXk9eSs2MyYtNjQseT15KzY0fDAsISgoKEl8PTApLTEmMjU1KT42Mykpe0JbUT4+MF09SSxCW1ErMT4+MF09MCxCW1ErMj4+MF09MSxCW1ErMz4+MF09MSxXZyhRKzR8MCksTEkoUSs4fDAsMCwwKSxFPTQ4KyhJPVErMTZ8MCl8MDtkb3tDW0k+PjJdPTAsST1JKzR8MH13aGlsZSgoMHxJKTwoMHxFKSk7cmV0dXJuIFhBKEEsUSksdm9pZCh5PWcpfVNCKCl9ZnVuY3Rpb24gZUkoQSxJLGcpe3ZhciBRLEU7QXw9MCxJfD0wLGd8PTAsUT15LEU9eT15KzYzJi02NCx5PXkrMTZ8MCxDW0UrOD4+Ml09QSxDW0UrND4+Ml09SSxDW0U+PjJdPTAsQT0wO2Rve0NbRT4+Ml09Q1tFPj4yXXwyNTUmKEJbKDB8Q1tFKzQ+PjJdKStBPj4wXV5CWygwfENbRSs4Pj4yXSkrQT4+MF0pLEE9QSsxfDB9d2hpbGUoKDB8QSkhPSgwfGcpKTtyZXR1cm4geT1RLCgoNTExKygwfENbRT4+Ml0pfDApPj4+OCYxKS0xfDB9ZnVuY3Rpb24gb0koQSxJLGcpe0l8PTAsZ3w9MDt2YXIgQz0wLEU9MDtDPTB8QlsoQXw9MCk+PjBdO0E6ZG97aWYoQzw8MjQ+PjI0KWZvcig7Oyl7aWYoZz1nKy0xfDAsIShDPDwyND4+MjQ9PShFPTB8QltJPj4wXSk8PDI0Pj4yNCYwIT0oMHxnKSZFPDwyND4+MjQhPTApKWJyZWFrIEE7aWYoST1JKzF8MCwhKChDPTB8QlsoQT1BKzF8MCk+PjBdKTw8MjQ+PjI0KSl7Qz0wO2JyZWFrfX1lbHNlIEM9MH13aGlsZSgwKTtyZXR1cm4oMjU1JkMpLSgwfFFbST4+MF0pfDB9ZnVuY3Rpb24gY0koQSxJKXtBfD0wLEl8PTA7dmFyIGcsQyxRPTAsaT0wLGU9MCxvPTA7Zm9yKGc9eSxDPXk9eSs2MyYtNjQseT15KzE2fDAsaT0xMDtvPTI1NSYoKGU9SSkrKDB8RShJPShJPj4+MCkvMTB8MCwtMTApKXw0OCksQltDKyhRPWkrLTF8MCk+PjBdPW8sZT4+PjA+OSYwIT0oMHxRKTspaT1RO0JBKDB8QSxDK1F8MCwwfChvPTExLWl8MCkpLEJbQStvPj4wXT0wLHk9Z31mdW5jdGlvbiBhSShBLEkpe3ZhciBnLEI7Zz15LEI9eT15KzYzJi02NCx5PXkrNDh8MCxfKEF8PTAsSXw9MCksXyhBKzgwfDAsSSs0MHwwKSxsKEErMTIwfDAsSSs4MHwwKSxfQShBKzQwfDAsSSxJKzQwfDApLF8oQixBKzQwfDApLF9BKEErNDB8MCxBKzgwfDAsQSksbEEoQSs4MHwwLEErODB8MCxBKSxsQShBLEIsQSs0MHwwKSxsQShBKzEyMHwwLEErMTIwfDAsQSs4MHwwKSx5PWd9ZnVuY3Rpb24gbkkoQSxJLGcpe3ZhciBDLEU7aWYoQXw9MCxJfD0wLGd8PTAsRT15LEM9eT15KzYzJi02NCx5PXkrMTZ8MCxCW0M+PjBdPTAsMHxmdW5jdGlvbihBLEksZyl7QXw9MCxJfD0wO3ZhciBDLEUsaT0wO2lmKEU9eSxDPXk9eSs2MyYtNjQseT15KzMzNnwwLDB8ZnVuY3Rpb24oQSl7QXw9MDt2YXIgSSxnLEM9MCxFPTAsaT0wLGU9MDtJPXksZz15PXkrNjMmLTY0LHk9eSsxNnwwLEJbZz4+MF09MCxCW2crMT4+MF09MCxCW2crMj4+MF09MCxCW2crMz4+MF09MCxCW2crND4+MF09MCxCW2crNT4+MF09MCxCW2crNj4+MF09MCxpPTA7ZG97Qz0wfEJbQStpPj4wXSxFPTA7ZG97QlsoZT1nK0V8MCk+PjBdPUJbZT4+MF18QlszMzE4NCsoRTw8NSkraT4+MF1eQyxFPUUrMXwwfXdoaWxlKDchPSgwfEUpKTtpPWkrMXwwfXdoaWxlKDMxIT0oMHxpKSk7Qz0xMjcmQltBKzMxPj4wXSxFPTA7ZG97QlsoZT1nK0V8MCk+PjBdPUJbZT4+MF18Q15CWzMzMTg0KyhFPDw1KSszMT4+MF0sRT1FKzF8MH13aGlsZSg3IT0oMHxFKSk7Qz0wLEU9MDtkb3tFPSgwfFFbZytDPj4wXSktMXxFLEM9QysxfDB9d2hpbGUoNyE9KDB8QykpO3JldHVybiB5PUksRT4+PjgmMXwwfShnfD0wKSlpPS0xO2Vsc2V7aT0wO2Rve0JbQStpPj4wXT0wfEJbSStpPj4wXSxpPWkrMXwwfXdoaWxlKDMyIT0oMHxpKSk7Zm9yKEJbQT4+MF09LTgmQltBPj4wXSxCW0ErMzE+PjBdPTYzJkJbQSszMT4+MF18NjQsVShDKzI4OHwwLGcpLFNnKEMrMjQwfDApLEtnKEMrMTkyfDApLE9BKEMrMTQ0fDAsQysyODh8MCksU2coQys5NnwwKSxpPTI1NCxJPTA7Zz1JLEFBKEMrMjQwfDAsQysxNDR8MCxnXj1JPSgwfFFbQSsoaT4+PjMpPj4wXSk+Pj4oNyZpKSYxKSxBQShDKzE5MnwwLEMrOTZ8MCxnKSxsQShDKzQ4fDAsQysxNDR8MCxDKzk2fDApLGxBKEMsQysyNDB8MCxDKzE5MnwwKSxfQShDKzI0MHwwLEMrMjQwfDAsQysxOTJ8MCksX0EoQysxOTJ8MCxDKzE0NHwwLEMrOTZ8MCksdShDKzk2fDAsQys0OHwwLEMrMjQwfDApLHUoQysxOTJ8MCxDKzE5MnwwLEMpLF8oQys0OHwwLEMpLF8oQyxDKzI0MHwwKSxfQShDKzE0NHwwLEMrOTZ8MCxDKzE5MnwwKSxsQShDKzE5MnwwLEMrOTZ8MCxDKzE5MnwwKSx1KEMrMjQwfDAsQyxDKzQ4fDApLGxBKEMsQyxDKzQ4fDApLF8oQysxOTJ8MCxDKzE5MnwwKSx2KEMrOTZ8MCxDKSxfKEMrMTQ0fDAsQysxNDR8MCksX0EoQys0OHwwLEMrNDh8MCxDKzk2fDApLHUoQys5NnwwLEMrMjg4fDAsQysxOTJ8MCksdShDKzE5MnwwLEMsQys0OHwwKSxpOylpPWkrLTF8MDtBQShDKzI0MHwwLEMrMTQ0fDAsSSksQUEoQysxOTJ8MCxDKzk2fDAsSSksVyhDKzE5MnwwLEMrMTkyfDApLHUoQysyNDB8MCxDKzI0MHwwLEMrMTkyfDApLENBKEEsQysyNDB8MCksaT0wfXJldHVybiB5PUUsMHxpfShBLEksZykpST0tMTtlbHNle0k9MDtkb3tCW0M+PjBdPUJbQz4+MF18QltBK0k+PjBdLEk9SSsxfDB9d2hpbGUoMzIhPSgwfEkpKTtJPTAtKCg1MTErKDB8UVtDPj4wXSl8MCk+Pj44JjEpfDB9cmV0dXJuIHk9RSwwfEl9ZnVuY3Rpb24gckkoQSxJLGcsQixDLFEsRSl7QXw9MCxJfD0wLEN8PTAsUXw9MCxFfD0wO3ZhciBpLGU9MDtlPTB8VWcoMCwxLDB8KGU9MHx5ZygwfChlPTB8dmcoMHwoZ3w9MCksMHwoQnw9MCksNjMsMCkpLDB8bygpLDYpKSwwfG8oKSksKGk9MHxvKCkpPj4+MDwwfDA9PSgwfGkpJmU+Pj4wPFE+Pj4wP1NCKCk6bUkoQSxJLGcsQixDLFEsRSl9ZnVuY3Rpb24gdEkoQSxJLGcpe0F8PTAsSXw9MDt2YXIgQyxRLEU9MCxpPTA7UT15LGk9eT15KzYzJi02NCx5PXkrNjR8MCxSSShpLGd8PTAsMzIsMCksRT1pLEM9KGc9SSkrMzJ8MDtkb3tCW2c+PjBdPTB8QltFPj4wXSxnPWcrMXwwLEU9RSsxfDB9d2hpbGUoKDB8Zyk8KDB8QykpO3JldHVybiBNSShpLDY0KSxpPTB8QUIoQSxJKSx5PVEsMHxpfWZ1bmN0aW9uIGZJKEEsSSxnLEIsQyxRLEUpe3ZhciBpLGU7QXw9MCxJfD0wLEN8PTAsRXw9MCxpPXksZT15PXkrNjMmLTY0LHk9eSs4MHwwLDA9PSgwfChnfD0wKSkmMD09KDB8KEJ8PTApKXx8KFBnKGUrNjR8MCxRfD0wKSwkQShlLEUpLFVJKGUsQyxlKzY0fDApLE0oZSxJLEEsZyxCKSxNSShlLDY0KSkseT1pfWZ1bmN0aW9uIHdJKEEsSSxnKXt2YXIgQyxRO0F8PTAsQz15LFE9eT15KzYzJi02NCx5PXkrMTYwfDAsUkkoSXw9MCxnfD0wLDMyLDApLEJbST4+MF09LTgmQltJPj4wXSxCW0krMzE+PjBdPTYzJkJbSSszMT4+MF18NjQsaUEoUSxJKSxzSShBLFEpLFlJKDB8SSwwfGcsMzIpLFlJKEkrMzJ8MCwwfEEsMzIpLHk9Q31mdW5jdGlvbiB5SShBLEksZyxCKXtBfD0wLEl8PTAsZ3w9MCxCfD0wO0E6ZG97aWYoQj4+PjA+MHwwPT0oMHxCKSZnPj4+MD40Mjk0OTY3Mjk1KUNbODY3OF09MjIsZz0tMTtlbHNle3N3aXRjaCgwfG9CKEEsSSxnKSl7Y2FzZSAwOmc9MDticmVhayBBO2Nhc2UtMzU6Q1s4Njc4XT0yOH1nPS0xfX13aGlsZSgwKTtyZXR1cm4gMHxnfWZ1bmN0aW9uIHNJKEEsSSl7dmFyIGcsQztBfD0wLGc9eSxDPXk9eSs2MyYtNjQseT15KzE0NHwwLFcoQys5NnwwLDgwKyhJfD0wKXwwKSx1KEMrNDh8MCxJLEMrOTZ8MCksdShDLEkrNDB8MCxDKzk2fDApLENBKEEsQyksST0oMHxzZyhDKzQ4fDApKTw8NyxCW0ErMzE+PjBdPUleKDB8UVtBKzMxPj4wXSkseT1nfWZ1bmN0aW9uIGhJKEEsSSxnLEIpe0F8PTAsSXw9MCxnfD0wLEJ8PTA7QTpkb3tpZihCPj4+MD4wfDA9PSgwfEIpJmc+Pj4wPjQyOTQ5NjcyOTUpQ1s4Njc4XT0yMixnPS0xO2Vsc2V7c3dpdGNoKDB8Y0IoQSxJLGcpKXtjYXNlIDA6Zz0wO2JyZWFrIEE7Y2FzZS0zNTpDWzg2NzhdPTI4fWc9LTF9fXdoaWxlKDApO3JldHVybiAwfGd9ZnVuY3Rpb24gREkoQSxJLGcsQixDLFEsRSxpKXt2YXIgZTtyZXR1cm4gQXw9MCxJfD0wLGd8PTAsQnw9MCxDfD0wLFF8PTAsZT15LHk9eSszMnwwLDB8amcoZSxFfD0wLGl8PTApP0I9LTE6KEI9MHxuZyhBLEksZyxCLEMsUSxlKSxNSShlLDMyKSkseT1lLDB8Qn1mdW5jdGlvbiBGSShBLEksZyxCLEMsUSxFLGkpe3ZhciBlO3JldHVybiBBfD0wLEl8PTAsZ3w9MCxCfD0wLEN8PTAsUXw9MCxlPXkseT15KzMyfDAsMHxqZyhlLEV8PTAsaXw9MCk/Qj0tMToodGcoQSxJLGcsQixDLFEsZSksTUkoZSwzMiksQj0wKSx5PWUsMHxCfWZ1bmN0aW9uIHBJKEEpe0F8PTA7dmFyIEk9MCxnPTAsQz0wLFE9MCxFPTA7Zm9yKFE9MCxFPTMyLEk9MTtRPSgyNTUmKGc9MHxCW0ErKEU9RSstMXwwKT4+MF0pKS0oMjU1JihDPTB8QlszMjMyMCtFPj4wXSkpPj44JihJJj0yNTUpfDI1NSZRLEU7KUkmPSg2NTUzNSsoMjU1JihDXmcpKXwwKT4+Pjg7cmV0dXJuIDAhPSgwfFEpfDB9ZnVuY3Rpb24gdUkoQSxJLGcsQil7cmV0dXJuIEI9MHx2ZygwfHZnKDB8KGd8PTApLDB8KEJ8PTApLDB8KEF8PTApLDB8KEl8PTApKSwwfG8oKSwwfChCPTB8UWcoLTImKEI9MHxyZygwfEEsMHxJLDEpKXwwLDEmKDB8bygpKXwwLDB8ZywwKSksMHxvKCkpLGUoMHxvKCkpLDB8Qn1mdW5jdGlvbiBISShBLEksZyxCKXtBfD0wLEl8PTAsZ3w9MCxCfD0wO2Rve2lmKCEoZz4+PjA+NjR8KEIrLTF8MCk+Pj4wPjYzKSl7aWYoMD09KDB8SSl8MD09KDB8Zykpe2lJKEEsMjU1JkIpLEk9MDticmVha312QShBLDI1NSZCLEksMjU1JmcpLEk9MDticmVha31JPS0xfXdoaWxlKDApO3JldHVybiAwfEl9ZnVuY3Rpb24ga0koQSl7dmFyIEksZyxCLEM9MDtyZXR1cm4gZz0wfFFbKEF8PTApPj4wXSxCPTB8cmcoMHxRW0ErMT4+MF0sMCw4KSxDPTB8bygpLEk9MHxyZygwfFFbQSsyPj4wXSwwLDE2KSxDPTB8Q3xvKCksQT0wfHJnKDB8UVtBKzM+PjBdLDAsMjQpLGUoMHxDfG8oKXwwKSxCfGd8SXxBfDB9ZnVuY3Rpb24gbEkoQSxJKXtBfD0wLEl8PTA7dmFyIGcsQyxFPTA7Zz15LEM9eT15KzYzJi02NCx5PXkrMTZ8MCxCW0M+PjBdPTAsRT0wO2Rve0JbQz4+MF09QltDPj4wXXxCW0ErRT4+MF0sRT1FKzF8MH13aGlsZSgoMHxFKSE9KDB8SSkpO3JldHVybiB5PWcsKDUxMSsoMHxRW0M+PjBdKXwwKT4+PjgmMXwwfWZ1bmN0aW9uIF9JKEEsSSxnKXtBfD0wLEl8PTA7dmFyIEI9MDsoZ3w9MCk/KEI9MHxWZyhnKSxDW0ErNDg+PjJdPUIsZz0wfFZnKGcrNHwwKSk6KENbQSs0OD4+Ml09MCxnPTApLENbQSs1Mj4+Ml09ZyxCPTB8VmcoSSksQ1tBKzU2Pj4yXT1CLEI9MHxWZyhJKzR8MCksQ1tBKzYwPj4yXT1CfWZ1bmN0aW9uIEdJKEEsSSxnKXt2YXIgQixDO0F8PTAsSXw9MCxnfD0wLEI9eSxDPXk9eSs2MyYtNjQseT15KzM4NHwwLExnKEMsMCwwLDI0KSxSZyhDLEksMzIsMCksUmcoQyxnLDMyLDApLHpnKEMsQSwyNCkseT1CfWZ1bmN0aW9uIGRJKEEsSSxnLEIsQyxRLEUpe3JldHVybiBJfD0wLEN8PTAsUXw9MCxFfD0wLDB8KChCfD0wKT4+PjA8MHwwPT0oMHxCKSYoZ3w9MCk+Pj4wPDE2Py0xOjB8REkoQXw9MCxJKzE2fDAsSSxnPTB8dmcoMHxnLDB8QiwtMTYsLTEpLDB8bygpLEMsUSxFKSl9ZnVuY3Rpb24gWUkoQSxJLGcpe3ZhciBDPTA7aWYoKDB8KEl8PTApKTwoMHwoQXw9MCkpJigwfEEpPChJKyhnfD0wKXwwKSl7Zm9yKEM9QSxJPUkrZ3wwLEE9QStnfDA7KDB8Zyk+MDspST1JLTF8MCxnPWctMXwwLEJbKEE9QS0xfDApPj4wXT0wfEJbST4+MF07QT1DfWVsc2UgQkEoQSxJLGcpO3JldHVybiAwfEF9ZnVuY3Rpb24gTUkoQSxJKXt2YXIgZyxRO2lmKEF8PTAsSXw9MCxnPXksUT15PXkrNjMmLTY0LHk9eSsxNnwwLENbUT4+Ml09QSwwfEkpe0E9MDtkb3tCWygwfENbUT4+Ml0pK0E+PjBdPTAsQT1BKzF8MH13aGlsZSgoMHxBKSE9KDB8SSkpfXk9Z31mdW5jdGlvbiBTSShBLEkpe0F8PTAsSXw9MDt2YXIgZz0wLEI9MCxRPTAsRT0wO2c9MDtkb3tFPUkrKGc8PDMpfDAsUT1DWzQrKEI9QSsoZzw8Myl8MCk+PjJdXkNbRSs0Pj4yXSxDW0I+PjJdPUNbQj4+Ml1eQ1tFPj4yXSxDW0IrND4+Ml09USxnPWcrMXwwfXdoaWxlKDEyOCE9KDB8ZykpfWZ1bmN0aW9uIFVJKEEsSSxnKXtBfD0wLEl8PTAsZz0oZ3w9MCk/MHxWZyhnKTowLENbQSs0OD4+Ml09ZyxnPTB8VmcoSSksQ1tBKzUyPj4yXT1nLGc9MHxWZyhJKzR8MCksQ1tBKzU2Pj4yXT1nLEk9MHxWZyhJKzh8MCksQ1tBKzYwPj4yXT1JfWZ1bmN0aW9uIHZJKEEsSSl7dmFyIGcsQztJfD0wLEM9eSx5PXkrNjR8MCxmdW5jdGlvbihBLEkpe3ZhciBnO0l8PTAsZz15LHk9eSs2NHwwLFZJKEF8PTAsZyksUChBKzIwOHwwLGcsNjQsMCksVkkoQSsyMDh8MCxJKSxNSShnLDY0KSx5PWd9KEF8PTAsQyksQT1DLGc9SSszMnwwO2Rve0JbST4+MF09MHxCW0E+PjBdLEk9SSsxfDAsQT1BKzF8MH13aGlsZSgoMHxJKTwoMHxnKSk7eT1DfWZ1bmN0aW9uIGJJKEEpe3ZhciBJO3JldHVybiBBfD0wLCgoST0wfENbODgwOF0pK0F8MCk+Pj4wPigwfHIoKSk+Pj4wJiYwPT0oMHxmKEkrQXwwKSk/KENbODY3OF09NDgsMHwoQT0tMSkpOihDWzg4MDhdPUkrQSwwfChBPUkpKX1mdW5jdGlvbiBKSShBLEksZyxCLEMpe3ZhciBRO0F8PTAsSXw9MCxnfD0wLEJ8PTAsUT15LHk9eSs0MTZ8MCxmdW5jdGlvbihBLEkpe2tBKEF8PTAsSXw9MCl9KFEsQ3w9MCksZnVuY3Rpb24oQSxJLGcsQil7eGcoQXw9MCxJfD0wLGd8PTAsQnw9MCl9KFEsSSxnLEIpLHZJKFEsQSkseT1RfWZ1bmN0aW9uIFBJKEEpe3ZhciBJLGc9MDtDWzY0KyhBfD0wKT4+Ml09MCxDW0ErNjQrND4+Ml09MCxDW0ErNjQrOD4+Ml09MCxDW0ErNjQrMTI+PjJdPTAsZz0zMjM1MixJPUErNjR8MDtkb3tDW0E+PjJdPUNbZz4+Ml0sQT1BKzR8MCxnPWcrNHwwfXdoaWxlKCgwfEEpPCgwfEkpKX1mdW5jdGlvbiBSSShBLEksZyxCKXt2YXIgQyxRO0F8PTAsSXw9MCxnfD0wLEJ8PTAsQz15LFE9eT15KzYzJi02NCx5PXkrMjA4fDAsUEkoUSksUChRLEksZyxCKSxWSShRLEEpLHk9Q31mdW5jdGlvbiBOSShBLEksZyl7QXw9MCxJfD0wO3ZhciBCPTAsUT0wO2lmKChnfD0wKT4+PjN8MCl7Qj0wO2Rve0FJKEErKEI8PDMpfDAsMHxDWyhRPUkrKEI8PDMpfDApPj4yXSwwfENbUSs0Pj4yXSksQj1CKzF8MH13aGlsZSgoMHxCKSE9KGc+Pj4zfDApKX19ZnVuY3Rpb24gbUkoQSxJLGcsQixDLFEsRSl7QXw9MCxJfD0wLEN8PTAsUXw9MCxFfD0wLChCfD0wKT4+PjA+MHwwPT0oMHxCKSYoZ3w9MCk+Pj4wPjQyOTQ5NjcyOTU/U0IoKTpmSShBLEksZyxCLEMsUSxFKX1mdW5jdGlvbiBMSShBLEksZyl7SXw9MCxnfD0wLEJbKEF8PTApPj4wXT1JLEJbQSsxPj4wXT1JPj44LEJbQSsyPj4wXT1JPj4xNixCW0ErMz4+MF09ST4+MjQsQltBKzQ+PjBdPWcsQltBKzQrMT4+MF09Zz4+OCxCW0ErNCsyPj4wXT1nPj4xNixCW0ErNCszPj4wXT1nPj4yNH1mdW5jdGlvbiB4SShBLEkpe0F8PTAsSXw9MDt2YXIgZz0wLEI9MCxRPTAsRT0wO2c9MDtkb3tFPTB8cUkoSSsoZzw8Myl8MCksUT0wfG8oKSxDWyhCPUErKGc8PDMpfDApPj4yXT1FLENbQis0Pj4yXT1RLGc9ZysxfDB9d2hpbGUoMTI4IT0oMHxnKSl9ZnVuY3Rpb24gS0koQSxJLGcsQixDLFEsRSl7cmV0dXJuIEF8PTAsSXw9MCxDfD0wLFF8PTAsRXw9MCwoQnw9MCk+Pj4wPjB8MD09KDB8QikmKGd8PTApPj4+MD40Mjk0OTY3Mjc5PyhTQigpLDApOjB8RkkoQSsxNnwwLEEsSSxnLEIsQyxRLEUpfWZ1bmN0aW9uIFhJKEEpe3JldHVybigwLSg2Ml4oQXw9MCkpfDApPj4+OCY0NV40NXwoQSs2NTUxMHwwKT4+PjgmMjU1JkErNjV8KDAtKDYzXkEpfDApPj4+OCY5NV45NXwoQSs2NTQ4NHwwKT4+PjgmQSs3MSYoKEErNjU1MTB8MCk+Pj44JjI1NV4yNTUpfChBKzY1NDc0fDApPj4+OCZBKzI1MiYoKEErNjU0ODR8MCk+Pj44JjI1NV4yNTUpfDB9ZnVuY3Rpb24gakkoQSl7cmV0dXJuKDAtKDYyXihBfD0wKSl8MCk+Pj44JjQzXjQzfChBKzY1NTEwfDApPj4+OCYyNTUmQSs2NXwoMC0oNjNeQSl8MCk+Pj44JjQ3XjQ3fChBKzY1NDg0fDApPj4+OCZBKzcxJigoQSs2NTUxMHwwKT4+PjgmMjU1XjI1NSl8KEErNjU0NzR8MCk+Pj44JkErMjUyJigoQSs2NTQ4NHwwKT4+PjgmMjU1XjI1NSl8MH1mdW5jdGlvbiBUSShBLEksZyxCLEMsUSxFKXtyZXR1cm4gQnw9MCwoKEl8PTApLTF8MCk+Pj4wPjYzfChFfD0wKT4+PjA+NjQ/Qj0tMTooZnVuY3Rpb24oQSxJLGcsQixDLFEsRSl7dmFyIGksZTtBfD0wLGd8PTAsQnw9MCxFfD0wLGk9eSxlPXk9eSs2MyYtNjQseT15KzM2OHwwLDA9PSgwfChJfD0wKSkmKDAhPSgwfChDfD0wKSl8MCE9KDB8KFF8PTApKSkmJlNCKCksQXx8U0IoKSwoQistMSYyNTUpPjYzJiZTQigpLDAhPSgwfGcpfEU8PDI0Pj4yND09MHx8U0IoKSwoMjU1JkUpPjY0JiZTQigpLEU8PDI0Pj4yND92QShlLEIsZyxFKTppSShlLEIpLCQoZSxJLEMsUSksYihlLEEsQikseT1pfShBfD0wLGd8PTAsUXw9MCwyNTUmSSxCLEN8PTAsMjU1JkUpLEI9MCksMHxCfWZ1bmN0aW9uIHFJKEEpe3ZhciBJO3JldHVybiBJPVFbKEF8PTApPj4wXXxRW0ErMT4+MF08PDh8UVtBKzI+PjBdPDwxNnxRW0ErMz4+MF08PDI0LGUoUVtBKzQ+PjBdfFFbQSs0KzE+PjBdPDw4fFFbQSs0KzI+PjBdPDwxNnxRW0ErNCszPj4wXTw8MjR8MCksMHxJfWZ1bmN0aW9uIFZJKEEsSSl7dmFyIGcsQjtJfD0wLGc9eSxCPXk9eSs2MyYtNjQseT15KzcwNHwwLFdBKEF8PTAsQiksTkkoSSxBLDY0KSxNSShCLDcwNCksTUkoQSwyMDgpLHk9Z31mdW5jdGlvbiB6SShBLEksZyxCLEMsUSl7QXw9MCxJfD0wLEN8PTAsUXw9MCwoQnw9MCk+Pj4wPjB8MD09KDB8QikmKGd8PTApPj4+MD40Mjk0OTY3Mjk1P1NCKCk6ZnVuY3Rpb24oQSxJLGcsQixDLFEsRSxpKXt2YXIgZSxvO0F8PTAsSXw9MCxDfD0wLGl8PTAsZT15LG89eT15KzYzJi02NCx5PXkrODB8MCwwPT0oMHwoZ3w9MCkpJjA9PSgwfChCfD0wKSl8fChQZyhvKzY0fDAsMSksUGcobys2NCs0fDAsMCksJEEobyxpKSxfSShvLEMsbys2NHwwKSxNKG8sSSxBLGcsQiksTUkobyw2NCkpLHk9ZX0oQSxJLGcsQixDLDAsMCxRKX1mdW5jdGlvbiBXSShBKXt2YXIgST0wLGc9MDtJPTEyNyZCWzMxKyhBfD0wKT4+MF1eMTI3LGc9MzA7ZG97SXw9fkJbQStnPj4wXSxnPWcrLTF8MH13aGlsZSgwIT0oMHxnKSk7cmV0dXJuKDIzNi0oMHxRW0E+PjBdKSY1MTErKDI1NSZJKSk+Pj44JjFeMXwwfWZ1bmN0aW9uIE9JKEEsSSxnLEIsQyl7QXw9MCxCfD0wLEN8PTAsKGd8PTApPj4+MD4wfDA9PSgwfGcpJihJfD0wKT4+PjA+NDI5NDk2NzI5NT9TQigpOmdnKEEsSSxnLEIsQyl9ZnVuY3Rpb24gWkkoQSxJLGcpe3ZhciBCLEM7cmV0dXJuIEI9MHx5ZygwfChBfD0wKSwwfChJfD0wKSwwfChnfD0wKSksQz0wfG8oKSxnPTB8cmcoMHxBLDB8SSw2NC1nfDApLGUoMHxvKCl8Q3wwKSxnfEJ8MH1mdW5jdGlvbiAkSShBLEksZyl7dmFyIEIsQztyZXR1cm4gQj0wfHJnKDB8KEF8PTApLDB8KEl8PTApLDB8KGd8PTApKSxDPTB8bygpLGc9MHx5ZygwfEEsMHxJLDY0LWd8MCksZSgwfG8oKXxDfDApLGd8QnwwfWZ1bmN0aW9uIEFnKEEsSSxnLEIpe3ZhciBRO3JldHVybiBRPXkseT15KzE2fDAsZnVuY3Rpb24oQSxJLGcsQixRKXtBfD0wLGd8PTAsQnw9MCxRfD0wO3ZhciBFPTAsYz0wLGE9MCxuPTAscj0wLHQ9MCxmPTAsdz0wLHk9MCxzPTA7aWYoIShJfD0wKSlyZXR1cm4gQj9RPyhDW1E+PjJdPTB8QSxDW1ErND4+Ml09MCZJLFE9MCwwfChlKDB8KEI9MCkpLFEpKTooUT0wLDB8KGUoMHwoQj0wKSksUSkpOigwfFEmJihDW1E+PjJdPShBPj4+MCklKGc+Pj4wKSxDW1ErND4+Ml09MCksUT0oQT4+PjApLyhnPj4+MCk+Pj4wLDB8KGUoMHwoQj0wKSksUSkpO2Rve2lmKGcpe2lmKDB8Qil7aWYoKGM9KDB8aSgwfEIpKS0oMHxpKDB8SSkpfDApPj4+MDw9MzEpe3c9YysxfDAsYT1BPj4+KChjKzF8MCk+Pj4wKSZjLTMxPj4zMXxJPDwzMS1jLGY9ST4+PigoYysxfDApPj4+MCkmYy0zMT4+MzEsRT0wLGM9QTw8MzEtYzticmVha31yZXR1cm4gUT8oQ1tRPj4yXT0wfEEsQ1tRKzQ+PjJdPUl8MCZJLFE9MCwwfChlKDB8KEI9MCkpLFEpKTooUT0wLDB8KGUoMHwoQj0wKSksUSkpfWlmKGctMSZnfDApe3c9Yz0zMysoMHxpKDB8ZykpLSgwfGkoMHxJKSl8MCxhPTMyLWMtMT4+MzEmST4+PigoYy0zMnwwKT4+PjApfChJPDwzMi1jfEE+Pj4oYz4+PjApKSZjLTMyPj4zMSxmPWMtMzI+PjMxJkk+Pj4oYz4+PjApLEU9QTw8NjQtYyYzMi1jPj4zMSxjPShJPDw2NC1jfEE+Pj4oKGMtMzJ8MCk+Pj4wKSkmMzItYz4+MzF8QTw8MzItYyZjLTMzPj4zMTticmVha31yZXR1cm4gMHxRJiYoQ1tRPj4yXT1nLTEmQSxDW1ErND4+Ml09MCksMT09KDB8Zyk/KFE9MHxBLDB8KGUoMHwoQj1JfDAmSSkpLFEpKTooQj1JPj4+KChRPTB8bkIoMHxnKSk+Pj4wKXwwLFE9STw8MzItUXxBPj4+KFE+Pj4wKXwwLDB8KGUoMHxCKSxRKSl9aWYoIUIpcmV0dXJuIDB8USYmKENbUT4+Ml09KEk+Pj4wKSUoZz4+PjApLENbUSs0Pj4yXT0wKSxRPShJPj4+MCkvKGc+Pj4wKT4+PjAsMHwoZSgwfChCPTApKSxRKTtpZighQSlyZXR1cm4gMHxRJiYoQ1tRPj4yXT0wLENbUSs0Pj4yXT0oST4+PjApJShCPj4+MCkpLFE9KEk+Pj4wKS8oQj4+PjApPj4+MCwwfChlKDB8KGc9MCkpLFEpO2lmKCEoQi0xJkIpKXJldHVybiAwfFEmJihDW1E+PjJdPTB8QSxDW1ErND4+Ml09Qi0xJkl8MCZJKSxnPTAsUT1JPj4+KCgwfG5CKDB8QikpPj4+MCksMHwoZSgwfGcpLFEpO2lmKChjPSgwfGkoMHxCKSktKDB8aSgwfEkpKXwwKT4+PjA8PTMwKXt3PWMrMXwwLGE9STw8MzEtY3xBPj4+KChjKzF8MCk+Pj4wKSxmPUk+Pj4oKGMrMXwwKT4+PjApLEU9MCxjPUE8PDMxLWM7YnJlYWt9cmV0dXJuIFE/KENbUT4+Ml09MHxBLENbUSs0Pj4yXT1JfDAmSSxRPTAsMHwoZSgwfChCPTApKSxRKSk6KFE9MCwwfChlKDB8KEI9MCkpLFEpKX13aGlsZSgwKTtpZih3KXtyPTB8dmcoMHxnLEJ8MCZCfDAsLTEsLTEpLHQ9MHxvKCksbj1jLEk9ZixBPXcsYz0wO2Rve3M9bixuPUU+Pj4zMXxuPDwxLEU9Y3xFPDwxLFVnKDB8ciwwfHQsMHwocz1hPDwxfHM+Pj4zMXwwKSwwfCh5PWE+Pj4zMXxJPDwxfDApKSxjPTEmKGY9KHc9MHxvKCkpPj4zMXwoKDB8dyk8MD8tMTowKTw8MSksYT0wfFVnKDB8cywwfHksZiYoMHxnKXwwLCgoKDB8dyk8MD8tMTowKT4+MzF8KCgwfHcpPDA/LTE6MCk8PDEpJihCfDAmQil8MCksST0wfG8oKSxBPUEtMXwwfXdoaWxlKDAhPSgwfEEpKTtBPTB9ZWxzZSBuPWMsST1mLEE9MCxjPTA7MHxRJiYoQ1tRPj4yXT1hLENbUSs0Pj4yXT1JKSxzPS0yJihFPDwxfDApfGMsZSgwfCh5PSgwfEUpPj4+MzF8bjw8MXwwJigwfEU+Pj4zMSl8QSkpfShBfD0wLEl8PTAsZ3w9MCxCfD0wLDB8USkseT1RLDB8KGUoMHxDW1ErND4+Ml0pLDB8Q1tRPj4yXSl9ZnVuY3Rpb24gSWcoQSl7QXw9MDt2YXIgST0wLGc9MCxDPTA7Zm9yKEk9MSxnPTA7ST1JKygwfFFbKEM9QStnfDApPj4wXSl8MCxCW0M+PjBdPUksNCE9KDB8KGc9ZysxfDApKTspST4+Pj04fWZ1bmN0aW9uIGdnKEEsSSxnLEIsQyl7QXw9MCxCfD0wLEN8PTAsKGd8PTApPj4+MD4wfDA9PSgwfGcpJihJfD0wKT4+PjA+NDI5NDk2NzI5NT9TQigpOmZ1bmN0aW9uKEEsSSxnLEIsQyl7dmFyIFEsRTtBfD0wLEJ8PTAsUT15LEU9eT15KzYzJi02NCx5PXkrNjR8MCwwPT0oMHwoSXw9MCkpJjA9PSgwfChnfD0wKSl8fCgkQShFLEN8PTApLFVJKEUsQiwwKSxZQSgwfEEsMCwwfEkpLE0oRSxBLEEsSSxnKSxNSShFLDY0KSkseT1RfShBLEksZyxCLEMpfWZ1bmN0aW9uIEJnKEEsSSxnKXt2YXIgQjtyZXR1cm4gQXw9MCxnfD0wLEk9MHxyZygyNTUmKEl8PTApfDAsMCw4KSxCPTB8bygpLGc9MHxyZygyNTUmZ3wwLDAsMTYpLGUoMHxCfG8oKXwwKSxJfDI1NSZBfGd8MH1mdW5jdGlvbiBDZyhBLEkpe0F8PTA7dmFyIGc9MCxDPTA7aWYoMHwoSXw9MCkpe2c9MDtkb3tDPTI1NSYoMHxEQigpKSxCW0ErZz4+MF09QyxnPWcrMXwwfXdoaWxlKCgwfGcpIT0oMHxJKSl9fWZ1bmN0aW9uIFFnKEEsSSxnLEIpe3ZhciBDLFE7cmV0dXJuIEl8PTAsQnw9MCxDPTB8ZnVuY3Rpb24oQSxJKXt2YXIgZyxCLEM7cmV0dXJuIEM9KChnPTB8RSg2NTUzNSYoSXw9MCksNjU1MzUmKEF8PTApKSk+Pj4xNikrKDB8RSg2NTUzNSZJLEE+Pj4xNikpfDAsQj0wfEUoST4+PjE2LDY1NTM1JkEpLDB8KGUoKEM+Pj4xNikrKDB8RShJPj4+MTYsQT4+PjE2KSkrKCgoNjU1MzUmQykrQnwwKT4+PjE2KXwwKSxDK0I8PDE2fDY1NTM1Jmd8MCl9KEF8PTAsZ3w9MCksUT0wfG8oKSwwfChlKCgwfEUoSSxnKSkrKDB8RShCLEEpKStRfDAmUXwwKSwwfEMpfWZ1bmN0aW9uIEVnKEEsSSl7dShBfD0wLEl8PTAsSSsxMjB8MCksdShBKzQwfDAsSSs0MHwwLEkrODB8MCksdShBKzgwfDAsSSs4MHwwLEkrMTIwfDApLHUoQSsxMjB8MCxJLEkrNDB8MCl9ZnVuY3Rpb24gaWcoQSxJLGcpe3JldHVybiBBfD0wLEl8PTAsKDB8KGd8PTApKTwzMj8oZShJPj5nfDApLEE+Pj5nfChJJigxPDxnKS0xKTw8MzItZyk6KGUoMHwoKDB8SSk8MD8tMTowKSksST4+Zy0zMnwwKX1mdW5jdGlvbiBlZyhBLEkpe19BKEF8PTAsNDArKEl8PTApfDAsSSksbEEoQSs0MHwwLEkrNDB8MCxJKSxPQShBKzgwfDAsSSs4MHwwKSx1KEErMTIwfDAsSSsxMjB8MCwxMTIpfWZ1bmN0aW9uIG9nKEEsSSl7dmFyIGcsQjtBfD0wLGc9eSxCPXk9eSs2MyYtNjQseT15KzEyOHwwLGZ1bmN0aW9uKEEsSSl7T0EoQXw9MCxJfD0wKSxPQShBKzQwfDAsSSs0MHwwKSxPQShBKzgwfDAsSSs4MHwwKX0oQixJfD0wKSxhSShBLEIpLHk9Z31mdW5jdGlvbiBjZyhBKXt2YXIgSSxnO3JldHVybiBJPXksZz15PXkrNjMmLTY0LHk9eSszMnwwLENBKGcsQXw9MCksQT0wfGxJKGcsMzIpLHk9SSwwfEF9ZnVuY3Rpb24gYWcoQSxJKXtBfD0wLEl8PTA7dmFyIGc9MCxDPTA7Zz0wO2Rve0JbKEM9QStnfDApPj4wXT1CW0M+PjBdXkJbSStnPj4wXSxnPWcrMXwwfXdoaWxlKDghPSgwfGcpKX1mdW5jdGlvbiBuZyhBLEksZyxCLEMsUSxFKXtyZXR1cm4gMHxnQShBfD0wLEl8PTAsZ3w9MCxCfD0wLEN8PTAsUXw9MCxFfD0wKX1mdW5jdGlvbiByZyhBLEksZyl7cmV0dXJuIEF8PTAsKDB8KGd8PTApKTwzMj8oZSgoSXw9MCk8PGd8KEEmKDE8PGcpLTE8PDMyLWcpPj4+MzItZ3wwKSxBPDxnKTooZShBPDxnLTMyfDApLDApfWZ1bmN0aW9uIHRnKEEsSSxnLEIsQyxRLEUpe3JldHVybiBaKEF8PTAsSXw9MCxnfD0wLEJ8PTAsQ3w9MCxRfD0wLEV8PTApLDB9ZnVuY3Rpb24gZmcoQSxJLGcpe3JldHVybihnfD0wKT4+PjA8MjU2PzB8YihBfD0wLEl8PTAsMjU1JmcpOihjKDMzNTQ3LDMzNTY3LDEwNywzMzYyMCksMCl9ZnVuY3Rpb24gd2coQSxJKXtBfD0wO3ZhciBnPTA7cmV0dXJuKEl8PTApPj4+MDw9NDI5NDk2NzE2OCYmMCE9KDB8KGc9MHxmdW5jdGlvbihBKXt2YXIgSSxnPTAsQj0wLFE9MCxFPTA7aWYoKEF8PTApPj4+MD49NDI5NDk2NzE2OClyZXR1cm4gQ1s4Njc4XT00OCwwO2lmKCEoQj0wfEYoNzYrKEk9QT4+PjA8MTE/MTY6QSsxMSYtOCl8MCkpKXJldHVybiAwO2Rve2lmKDYzJkIpe2lmKGc9KFE9KChCKzYzJi02NCktOC0oQistOCl8MCk+Pj4wPjE1PyhCKzYzJi02NCktOHwwOjU2KyhCKzYzJi02NCl8MCktKEIrLTgpfDAsMyYoQT0wfENbQistND4+Ml0pKXtDW1ErND4+Ml09KC04JkEpLWd8MSZDW1ErND4+Ml18MixDW1ErKCgtOCZBKS1nKSs0Pj4yXT0xfENbUSsoKC04JkEpLWcpKzQ+PjJdLENbQistND4+Ml09Z3wxJkNbQistND4+Ml18MixDW1ErND4+Ml09MXxDW1ErND4+Ml0sWShCKy04fDAsZyksRT1RLEE9UTticmVha31DW1E+PjJdPSgwfENbQistOD4+Ml0pK2csQ1tRKzQ+PjJdPSgtOCZBKS1nLEU9USxBPVE7YnJlYWt9RT1CKy04fDAsQT1CKy04fDB9d2hpbGUoMCk7cmV0dXJuIDMmKEE9MHxDWyhnPUErNHwwKT4+Ml0pfDAmJigtOCZBKT4+PjA+KEkrMTZ8MCk+Pj4wJiYoUT1FK0l8MCxDW2c+PjJdPUl8MSZBfDIsQ1tRKzQ+PjJdPSgtOCZBKS1JfDMsQ1soQj1FKygtOCZBKSs0fDApPj4yXT0xfENbQj4+Ml0sWShRLCgtOCZBKS1JfDApKSwwfEUrOH0oSSkpKT8oQ1tBPj4yXT1nLEk9MCk6ST00OCwwfEl9ZnVuY3Rpb24geWcoQSxJLGcpe3JldHVybiBBfD0wLEl8PTAsKDB8KGd8PTApKTwzMj8oZShJPj4+Z3wwKSxBPj4+Z3woSSYoMTw8ZyktMSk8PDMyLWcpOihlKDApLEk+Pj5nLTMyfDApfWZ1bmN0aW9uIHNnKEEpe3ZhciBJLGc7cmV0dXJuIGc9eSxJPXk9eSs2MyYtNjQseT15KzMyfDAsQ0EoSSxBfD0wKSx5PWcsMSZCW0k+PjBdfDB9ZnVuY3Rpb24gaGcoQSxJLGcpe3RBKEF8PTAsSXw9MCwyNTUmKGd8PTApKSx0QShBKzQwfDAsSSs0MHwwLDI1NSZnKSx0QShBKzgwfDAsSSs4MHwwLDI1NSZnKX1mdW5jdGlvbiBEZyhBLEksZyxCLEMsUSxFKXtyZXR1cm4gMHxUSShBfD0wLEl8PTAsZ3w9MCxCfD0wLEN8PTAsUXw9MCxFfD0wKX1mdW5jdGlvbiBGZyhBLEksZyxCLEMsUSxFKXtyZXR1cm4gMHxuQShBfD0wLEl8PTAsMSxnfD0wLEJ8PTAsQ3w9MCwxNixRfD0wLEV8PTAsMCwwLDIpfWZ1bmN0aW9uIHBnKEEsSSxnLEIsQyxRLEUpe3JldHVybiAwfG5BKEF8PTAsSXw9MCwxLGd8PTAsQnw9MCxDfD0wLDE2LFF8PTAsRXw9MCwwLDAsMSl9ZnVuY3Rpb24gdWcoQSxJKXsoZnVuY3Rpb24oQSxJKXtBfD0wLDB8KEl8PTApJiYoMHwoST0wfENbQT4+Ml0pJiZNSSgwfENbSSs0Pj4yXSxDW0ErMTY+PjJdPDwxMCksMHwoST0wfENbQSs0Pj4yXSkmJk1JKEksQ1tBKzIwPj4yXTw8MykpfSkoQXw9MCw0JihJfD0wKSksZCgwfENbQSs0Pj4yXSksQ1tBKzQ+PjJdPTAsZnVuY3Rpb24oQSl7dmFyIEk9MDswfChBfD0wKSYmMHwoST0wfENbQT4+Ml0pJiZkKEkpLGQoQSl9KDB8Q1tBPj4yXSksQ1tBPj4yXT0wfWZ1bmN0aW9uIEhnKEEsSSl7dShBfD0wLEl8PTAsSSsxMjB8MCksdShBKzQwfDAsSSs0MHwwLEkrODB8MCksdShBKzgwfDAsSSs4MHwwLEkrMTIwfDApfWZ1bmN0aW9uIGtnKEEsSSxnLEIsQyxRKXtoQShBfD0wLEl8PTAsZ3w9MCxCfD0wLEN8PTAsUXw9MCwwKX1mdW5jdGlvbiBsZyhBLEksZyxCLEMsUSl7cmV0dXJuIDB8bkEoQXw9MCxJfD0wLDEsZ3w9MCxCfD0wLEN8PTAsMTYsMCwzMixRfD0wLDEyOCwyKX1mdW5jdGlvbiBfZyhBLEksZyxCLEMsUSl7VihBfD0wLEl8PTAsZ3w9MCxCfD0wLEN8PTAsMSwwLFF8PTApfWZ1bmN0aW9uIEdnKEEsSSxnLEIsQyxRKXtyZXR1cm4gMHxuQShBfD0wLEl8PTAsMSxnfD0wLEJ8PTAsQ3w9MCwxNiwwLDMyLFF8PTAsMTI4LDEpfWZ1bmN0aW9uIGRnKEEsSSxnLEIsQyl7cmV0dXJuIDB8dUEoQXw9MCxJfD0wLGd8PTAsQnw9MCxDfD0wLDApfWZ1bmN0aW9uIFlnKEEsSSxnLEIsQyxRKXtWKEF8PTAsSXw9MCxnfD0wLEJ8PTAsQ3w9MCwwLDAsUXw9MCl9ZnVuY3Rpb24gTWcoQSl7QlszMisoQXw9MCk+PjBdPTEsQltBKzMyKzE+PjBdPTAsQltBKzMyKzI+PjBdPTAsQltBKzMyKzM+PjBdPTB9ZnVuY3Rpb24gU2coQSl7dmFyIEk7Q1soQXw9MCk+PjJdPTEsST0zNisoQT1BKzR8MCl8MDtkb3tDW0E+PjJdPTAsQT1BKzR8MH13aGlsZSgoMHxBKTwoMHxJKSl9ZnVuY3Rpb24gVWcoQSxJLGcsQil7cmV0dXJuIDB8KGUoMHwoQj0oSXw9MCktKEJ8PTApLSgoZ3w9MCk+Pj4wPihBfD0wKT4+PjB8MCk+Pj4wKSksQS1nPj4+MHwwKX1mdW5jdGlvbiB2ZyhBLEksZyxCKXtyZXR1cm4gMHwoZSgoSXw9MCkrKEJ8PTApKygoQXw9MCkrKGd8PTApPj4+MD4+PjA8QT4+PjB8MCk+Pj4wfDApLEErZz4+PjB8MCl9ZnVuY3Rpb24gYmcoQSxJLGcsQil7IWZ1bmN0aW9uKEEsSSxnLEIpe0soQXw9MCxJfD0wLGd8PTAsQnw9MCl9KEF8PTAsSXw9MCxnfD0wLEJ8PTApfWZ1bmN0aW9uIEpnKEEsSSl7SXw9MCxQSShBfD0wKSwwfEkmJlAoQSwzMzQwOCwzNCwwKX1mdW5jdGlvbiBQZyhBLEkpe0l8PTAsQlsoQXw9MCk+PjBdPUksQltBKzE+PjBdPUk+PjgsQltBKzI+PjBdPUk+PjE2LEJbQSszPj4wXT1JPj4yNH1mdW5jdGlvbiBSZyhBLEksZyxCKXtyZXR1cm4gWGcoQXw9MCxJfD0wLGd8PTAsQnw9MCksMH1mdW5jdGlvbiBOZyhBLEksZyxCKXtyZXR1cm4gMHxGQShBfD0wLEl8PTAsZ3w9MCxCfD0wLDIpfWZ1bmN0aW9uIG1nKEEsSSxnLEIpe3JldHVybiAwfEZBKEF8PTAsSXw9MCxnfD0wLEJ8PTAsMSl9ZnVuY3Rpb24gTGcoQSxJLGcsQil7cmV0dXJuIDB8SEkoQXw9MCxJfD0wLGd8PTAsQnw9MCl9ZnVuY3Rpb24geGcoQSxJLGcsQil7UChBfD0wLEl8PTAsZ3w9MCxCfD0wKX1mdW5jdGlvbiBLZyhBKXt2YXIgSTtJPTQwKyhBfD0wKXwwO2Rve0NbQT4+Ml09MCxBPUErNHwwfXdoaWxlKCgwfEEpPCgwfEkpKX1mdW5jdGlvbiBYZyhBLEksZyxCKXskKEF8PTAsSXw9MCxnfD0wLEJ8PTApfWZ1bmN0aW9uIGpnKEEsSSxnKXtyZXR1cm4gMHxmdW5jdGlvbihBLEksZyl7dmFyIEIsQztyZXR1cm4gQXw9MCxDPXksQj15PXkrNjMmLTY0LHk9eSszMnwwLDB8bkkoQixnfD0wLEl8PTApP0E9LTE6KHgoQSwzNDY1NixCKSxBPTApLHk9QywwfEF9KEF8PTAsSXw9MCxnfD0wKX1mdW5jdGlvbiBUZyhBKXtCWyhBfD0wKT4+MF09LTgmQltBPj4wXSxCW0ErMzE+PjBdPTYzJkJbQSszMT4+MF18NjR9ZnVuY3Rpb24gcWcoQSxJKXtyZXR1cm4gQT0wfEhBKEF8PTAsSXw9MCksMHwoKDB8QltBPj4wXSk9PSgyNTUmSSk8PDI0Pj4yND9BOjApfWZ1bmN0aW9uIFZnKEEpe3JldHVybiBRWyhBfD0wKT4+MF18UVtBKzE+PjBdPDw4fFFbQSsyPj4wXTw8MTZ8UVtBKzM+PjBdPDwyNHwwfWZ1bmN0aW9uIHpnKEEsSSxnKXtyZXR1cm4gMHxmZyhBfD0wLEl8PTAsZ3w9MCl9ZnVuY3Rpb24gV2coQSl7QlsoQXw9MCk+PjBdPTAsQltBKzE+PjBdPTAsQltBKzI+PjBdPTAsQltBKzM+PjBdPTB9ZnVuY3Rpb24gT2coQSl7S2coQXw9MCksU2coQSs0MHwwKSxTZyhBKzgwfDApLEtnKEErMTIwfDApfWZ1bmN0aW9uIFpnKEEpe0NbKEF8PTApPj4yXT0wLENbQSs0Pj4yXT0wLENbQSs4Pj4yXT0wLENbQSsxMj4+Ml09MH1mdW5jdGlvbiAkZyhBLEksZyl7IWZ1bmN0aW9uKEEsSSxnKXt2YXIgQixDLFE7QXw9MCxJfD0wLEI9eSxRPXk9eSs2MyYtNjQseT15KzEyOHwwLGc9KChnfD0wKTw8MjQ+PjI0KS0oKDAtKDI1NSYoQz0wfGZ1bmN0aW9uKEEpe3JldHVybigyNTUmKEF8PTApKT4+Pjd8MH0oZykpKSZnPDwyND4+MjQpPDwxKSYyNTUsZnVuY3Rpb24oQSl7U2coQXw9MCksU2coQSs0MHwwKSxLZyhBKzgwfDApfShBKSxoZyhBLEksMHxhQihnLDEpKSxoZyhBLEkrMTIwfDAsMHxhQihnLDIpKSxoZyhBLEkrMjQwfDAsMHxhQihnLDMpKSxoZyhBLEkrMzYwfDAsMHxhQihnLDQpKSxoZyhBLEkrNDgwfDAsMHxhQihnLDUpKSxoZyhBLEkrNjAwfDAsMHxhQihnLDYpKSxoZyhBLEkrNzIwfDAsMHxhQihnLDcpKSxoZyhBLEkrODQwfDAsMHxhQihnLDgpKSxPQShRLEErNDB8MCksT0EoUSs0MHwwLEEpLHhBKFErODB8MCxBKzgwfDApLGhnKEEsUSxDKSx5PUJ9KEF8PTAsMTEyMCsoOTYwKihJfD0wKXwwKXwwLGd8PTApfWZ1bmN0aW9uIEFCKEEsSSl7cmV0dXJuIDB8UUkoQXw9MCxJfD0wKX1mdW5jdGlvbiBJQihBLEkpeyFmdW5jdGlvbihBLEkpe3ooQXw9MCxJfD0wKX0oQXw9MCxJfD0wKX1mdW5jdGlvbiBnQihBLEkpeyFmdW5jdGlvbihBLEkpe01BKEF8PTAsSXw9MCl9KEF8PTAsSXw9MCl9ZnVuY3Rpb24gQkIoQSxJLGcpe3JldHVybiAwfG5JKEF8PTAsSXw9MCxnfD0wKX1mdW5jdGlvbiBDQihBLEkpe3JldHVybiAwfGZ1bmN0aW9uKEEsSSl7cmV0dXJuIEF8PTAsQ2coSXw9MCwzMiksMHxBQihBLEkpfShBfD0wLEl8PTApfWZ1bmN0aW9uIFFCKEEsSSxnKXshZnVuY3Rpb24oQSxJLGcsQixDKXt2YXIgUSxFO0F8PTAsQnw9MCxRPXksRT15PXkrNjMmLTY0LHk9eSs2NHwwLDA9PSgwfChJfD0wKSkmMD09KDB8KGd8PTApKXx8KCRBKEUsQ3w9MCksX0koRSxCLDApLFlBKDB8QSwwLDY0KSxNKEUsQSxBLDY0LDApLE1JKEUsNjQpKSx5PVF9KEF8PTAsNjQsMCxJfD0wLGd8PTApfWZ1bmN0aW9uIEVCKEEpezEhPSgtNyYoQXw9MCl8MCkmJlNCKCl9ZnVuY3Rpb24gaUIoQSxJLGcpeyFmdW5jdGlvbihBLEksZyl7QXw9MCxJfD0wO3ZhciBCLEMsUSxFLGksZSxvLGMsYSxuLHIsdD0wLGY9MCx3PTAseT0wLHM9MCxoPTAsRD0wLEY9MCxwPTAsdT0wLEg9MCxrPTAsbD0wLF89MCxHPTAsZD0wLFk9MCxNPTAsUz0wLFU9MCx2PTAsYj0wLEo9MCxQPTAsUj0wLE49MCxtPTAsTD0wLHg9MCxLPTAsWD0wLGo9MDtyPTB8VmcoZ3w9MCksaT0wfFZnKGcrNHwwKSxlPTB8VmcoZys4fDApLG89MHxWZyhnKzEyfDApLGM9MHxWZyhnKzE2fDApLGE9MHxWZyhnKzIwfDApLG49MHxWZyhnKzI0fDApLEI9MHxWZyhnKzI4fDApLEM9MHxWZyhJKSxRPTB8VmcoSSs0fDApLEU9MHxWZyhJKzh8MCksZz0wfFZnKEkrMTJ8MCksST0wLHQ9MTYzNDc2MDgwNSxmPXIsdz0yMDM2NDc3MjM0LHk9YyxzPWEsaD1uLEQ9QixGPTE3OTcyODUyMzYscD1pLHU9ZSxIPW8saz04NTc3NjA4NzgsbD1DLF89USxHPUUsZD1nO2Rve3g9KDB8d0IoKFU9KDB8d0IoKEo9KDB8d0IoKE49KDB8d0IodCtzfDAsNykpXkgpK3R8MCw5KSleRykrTnwwLDEzKSlecykrSnwwLDE4KSledCxSPSgwfHdCKChqPSgwfHdCKChTPSgwfHdCKChiPSgwfHdCKGYra3wwLDcpKV5kKStrfDAsOSkpXmgpK2J8MCwxMykpXmYpK1N8MCwxOCkpXmssdj0oMHx3QigoTD0oMHx3QigoWD0oMHx3QigoTT0oMHx3QihsK3d8MCw3KSleRCkrd3wwLDkpKV5wKStNfDAsMTMpKV5sKStYfDAsMTgpKV53LFk9KDB8d0IoKFA9KDB8d0IoKG09KDB8d0IoKEs9KDB8d0IoeStGfDAsNykpXnUpK0Z8MCw5KSleXykrS3wwLDEzKSleeSkrbXwwLDE4KSleRix0PSgwfHdCKCh1PSgwfHdCKChwPSgwfHdCKChmPSgwfHdCKEsreHwwLDcpKV5qKSt4fDAsOSkpXlgpK2Z8MCwxMykpXkspK3B8MCwxOCkpXngsaz0oMHx3QigoSD0oMHx3QigoXz0oMHx3QigobD0oMHx3QihSK058MCw3KSleTCkrUnwwLDkpKV5tKStsfDAsMTMpKV5OKStffDAsMTgpKV5SLHc9KDB8d0IoKGQ9KDB8d0IoKEc9KDB8d0IoKHk9KDB8d0IoditifDAsNykpXlApK3Z8MCw5KSleSikreXwwLDEzKSleYikrR3wwLDE4KSledixGPSgwfHdCKChEPSgwfHdCKChoPSgwfHdCKChzPSgwfHdCKFkrTXwwLDcpKV5VKStZfDAsOSkpXlMpK3N8MCwxMykpXk0pK2h8MCwxOCkpXlksST1JKzJ8MH13aGlsZShJPj4+MDwyMCk7UGcoQSx0KzE2MzQ3NjA4MDV8MCksUGcoQSs0fDAsZityfDApLFBnKEErOHwwLHAraXwwKSxQZyhBKzEyfDAsdStlfDApLFBnKEErMTZ8MCxIK298MCksUGcoQSsyMHwwLGsrODU3NzYwODc4fDApLFBnKEErMjR8MCxsK0N8MCksUGcoQSsyOHwwLF8rUXwwKSxQZyhBKzMyfDAsRytFfDApLFBnKEErMzZ8MCxkK2d8MCksUGcoQSs0MHwwLHcrMjAzNjQ3NzIzNHwwKSxQZyhBKzQ0fDAseStjfDApLFBnKEErNDh8MCxzK2F8MCksUGcoQSs1MnwwLGgrbnwwKSxQZyhBKzU2fDAsRCtCfDApLFBnKEErNjB8MCxGKzE3OTcyODUyMzZ8MCl9KEF8PTAsSXw9MCxnfD0wKX1mdW5jdGlvbiBlQihBLEkpe3JldHVybiAwfEFCKEF8PTAsSXw9MCl9ZnVuY3Rpb24gb0IoQSxJLGcpe3JldHVybiAwfEVBKEF8PTAsSXw9MCxnfD0wLDIpfWZ1bmN0aW9uIGNCKEEsSSxnKXtyZXR1cm4gMHxFQShBfD0wLEl8PTAsZ3w9MCwxKX1mdW5jdGlvbiBhQihBLEkpe3JldHVybigoMjU1JigoSXw9MCleKEF8PTApKSktMXwwKT4+PjMxJjI1NXwwfWZ1bmN0aW9uIG5CKEEpe3JldHVybiAwfCgoQXw9MCk/MzEtKDB8aShBXkEtMSkpfDA6MzIpfWZ1bmN0aW9uIHJCKEEsSSl7cmV0dXJuIDB8ZUkoQXw9MCxJfD0wLDMyKX1mdW5jdGlvbiB0QihBLEkpe3JldHVybiAwfGVJKEF8PTAsSXw9MCwxNil9ZnVuY3Rpb24gZkIoQSxJKXtCQSgwfChBfD0wKSwwfChJfD0wKSwxMDI0KX1mdW5jdGlvbiB3QihBLEkpe3JldHVybihBfD0wKT4+PigzMi0oSXw9MCl8MCl8QTw8SXwwfWZ1bmN0aW9uIHlCKEEpe1lBKDB8KEF8PTApLDAsMTAyNCl9ZnVuY3Rpb24gc0IoQSl7Q2coQXw9MCwzMil9ZnVuY3Rpb24gaEIoKXtuKDEpfWZ1bmN0aW9uIERCKCl7cmV0dXJuIDB8bigwKX1mdW5jdGlvbiBGQigpe3JldHVybi0xN31mdW5jdGlvbiBwQigpe3JldHVybiAzfWZ1bmN0aW9uIHVCKCl7cmV0dXJuIDJ9ZnVuY3Rpb24gSEIoKXtyZXR1cm4tMX1mdW5jdGlvbiBrQigpe3JldHVybiAxfWZ1bmN0aW9uIGxCKCl7cmV0dXJuIDh9ZnVuY3Rpb24gX0IoKXtyZXR1cm4gMjR9ZnVuY3Rpb24gR0IoKXtyZXR1cm4gMTZ9ZnVuY3Rpb24gZEIoKXtyZXR1cm4gNjR9ZnVuY3Rpb24gWUIoKXtyZXR1cm4gMzJ9ZnVuY3Rpb24gTUIoKXtyZXR1cm4gMH1mdW5jdGlvbiBTQigpe2EoKX1yZXR1cm57X19fZXJybm9fbG9jYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gMzQ3MTJ9LF9fX211bGRpMzpRZyxfX191cmVtZGkzOkFnLF9iaXRzaGlmdDY0QXNocjppZyxfYml0c2hpZnQ2NExzaHI6eWcsX2JpdHNoaWZ0NjRTaGw6cmcsX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfYWJ5dGVzOkdCLF9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2RlY3J5cHQ6ZnVuY3Rpb24oQSxJLGcsQixRLEUsaSxlLGMsYSxuKXtJfD0wLGd8PTAsQnw9MCxpfD0wLGV8PTAsY3w9MCxhfD0wLG58PTA7dmFyIHI9MCx0PTA7cmV0dXJuKEV8PTApPj4+MD4wfDA9PSgwfEUpJihRfD0wKT4+PjA+MTU/KEU9MHxzQShBfD0wLDAsQixnPTB8dmcoMHxRLDB8RSwtMTYsLTEpLHI9MHxvKCksQitRKy0xNnwwLGksZSxjLGEsbiksSSYmKFE9MD09KDB8RSk/ZzowLGc9MD09KDB8RSk/cjowLHQ9NCkpOkk/KFE9MCxnPTAsRT0tMSx0PTQpOkU9LTEsND09KDB8dCkmJihDW0k+PjJdPVEsQ1tJKzQ+PjJdPWcpLDB8RX0sX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfZGVjcnlwdF9kZXRhY2hlZDpzQSxfY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9lbmNyeXB0OmZ1bmN0aW9uKEEsSSxnLEIsUSxFLGksZSxjLGEsbil7cmV0dXJuIEF8PTAsSXw9MCxnfD0wLEV8PTAsaXw9MCxlfD0wLGN8PTAsYXw9MCxufD0wLChRfD0wKT4+PjA+MHwwPT0oMHxRKSYoQnw9MCk+Pj4wPjQyOTQ5NjcyNzkmJlNCKCksZEEoQSxBK0J8MCwwLGcsQixRLEUsaSxlLDAsYSxuKSwwfEkmJihhPTB8dmcoMHxCLDB8USwxNiwwKSxjPTB8bygpLENbST4+Ml09YSxDW0krND4+Ml09YyksMH0sX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfZW5jcnlwdF9kZXRhY2hlZDpkQSxfY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX2FieXRlczpHQixfY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX2RlY3J5cHQ6ZnVuY3Rpb24oQSxJLGcsQixRLEUsaSxlLGMsYSxuKXtJfD0wLGd8PTAsQnw9MCxpfD0wLGV8PTAsY3w9MCxhfD0wLG58PTA7dmFyIHI9MCx0PTA7cmV0dXJuKEV8PTApPj4+MD4wfDA9PSgwfEUpJihRfD0wKT4+PjA+MTU/KEU9MHxlQShBfD0wLDAsQixnPTB8dmcoMHxRLDB8RSwtMTYsLTEpLHI9MHxvKCksQitRKy0xNnwwLGksZSxjLGEsbiksSSYmKFE9MD09KDB8RSk/ZzowLGc9MD09KDB8RSk/cjowLHQ9NCkpOkk/KFE9MCxnPTAsRT0tMSx0PTQpOkU9LTEsND09KDB8dCkmJihDW0k+PjJdPVEsQ1tJKzQ+PjJdPWcpLDB8RX0sX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9kZWNyeXB0X2RldGFjaGVkOmVBLF9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfZW5jcnlwdDpmdW5jdGlvbihBLEksZyxCLFEsRSxpLGUsYyxhLG4pe3JldHVybiBBfD0wLEl8PTAsZ3w9MCxFfD0wLGl8PTAsZXw9MCxjfD0wLGF8PTAsbnw9MCwoUXw9MCk+Pj4wPjB8MD09KDB8USkmKEJ8PTApPj4+MD40Mjk0OTY3Mjc5JiZTQigpLGZBKEEsQStCfDAsMCxnLEIsUSxFLGksZSwwLGEsbiksMHxJJiYoYT0wfHZnKDB8QiwwfFEsMTYsMCksYz0wfG8oKSxDW0k+PjJdPWEsQ1tJKzQ+PjJdPWMpLDB9LF9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfZW5jcnlwdF9kZXRhY2hlZDpmQSxfY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX2tleWJ5dGVzOllCLF9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfa2V5Z2VuOnNCLF9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfbWVzc2FnZWJ5dGVzX21heDpGQixfY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX25wdWJieXRlczpmdW5jdGlvbigpe3JldHVybiAxMn0sX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9uc2VjYnl0ZXM6TUIsX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfa2V5Ynl0ZXM6WUIsX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfa2V5Z2VuOnNCLF9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X21lc3NhZ2VieXRlc19tYXg6RkIsX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfbnB1YmJ5dGVzOmxCLF9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X25zZWNieXRlczpNQixfY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9hYnl0ZXM6R0IsX2NyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfZGVjcnlwdDpmdW5jdGlvbihBLEksZyxCLFEsRSxpLGUsYyxhLG4pe0l8PTAsZ3w9MCxCfD0wLGl8PTAsZXw9MCxjfD0wLGF8PTAsbnw9MDt2YXIgcj0wLHQ9MDtyZXR1cm4oRXw9MCk+Pj4wPjB8MD09KDB8RSkmKFF8PTApPj4+MD4xNT8oRT0wfFBBKEF8PTAsMCxCLGc9MHx2ZygwfFEsMHxFLC0xNiwtMSkscj0wfG8oKSxCK1ErLTE2fDAsaSxlLGMsYSxuKSxJJiYoUT0wPT0oMHxFKT9nOjAsZz0wPT0oMHxFKT9yOjAsdD00KSk6ST8oUT0wLGc9MCxFPS0xLHQ9NCk6RT0tMSw0PT0oMHx0KSYmKENbST4+Ml09USxDW0krND4+Ml09ZyksMHxFfSxfY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9kZWNyeXB0X2RldGFjaGVkOlBBLF9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2VuY3J5cHQ6ZnVuY3Rpb24oQSxJLGcsQixRLEUsaSxlLGMsYSxuKXtyZXR1cm4gQXw9MCxJfD0wLGd8PTAsRXw9MCxpfD0wLGV8PTAsY3w9MCxhfD0wLG58PTAsKFF8PTApPj4+MD4wfDA9PSgwfFEpJihCfD0wKT4+PjA+NDI5NDk2NzI3OSYmU0IoKSxOQShBLEErQnwwLDAsZyxCLFEsRSxpLGUsMCxhLG4pLDB8SSYmKGE9MHx2ZygwfEIsMHxRLDE2LDApLGM9MHxvKCksQ1tJPj4yXT1hLENbSSs0Pj4yXT1jKSwwfSxfY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9lbmNyeXB0X2RldGFjaGVkOk5BLF9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2tleWJ5dGVzOllCLF9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2tleWdlbjpzQixfY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9tZXNzYWdlYnl0ZXNfbWF4OkZCLF9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX25wdWJieXRlczpfQixfY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9uc2VjYnl0ZXM6TUIsX2NyeXB0b19hdXRoOmZ1bmN0aW9uKEEsSSxnLEIsQyl7cmV0dXJuIEpJKEF8PTAsSXw9MCxnfD0wLEJ8PTAsQ3w9MCksMH0sX2NyeXB0b19hdXRoX2J5dGVzOllCLF9jcnlwdG9fYXV0aF9rZXlieXRlczpZQixfY3J5cHRvX2F1dGhfa2V5Z2VuOnNCLF9jcnlwdG9fYXV0aF92ZXJpZnk6ZnVuY3Rpb24oQSxJLGcsQixDKXtyZXR1cm4gMHxmdW5jdGlvbihBLEksZyxCLEMpe3ZhciBRO3JldHVybiBBfD0wLFE9eSx5PXkrMzJ8MCxKSShRLEl8PTAsZ3w9MCxCfD0wLEN8PTApLEM9MHxyQihBLFEpLEM9MHwoKDB8USk9PSgwfEEpPy0xOkMpfEVJKFEsQSwzMikseT1RLDB8Q30oQXw9MCxJfD0wLGd8PTAsQnw9MCxDfD0wKX0sX2NyeXB0b19ib3hfYmVmb3Jlbm06amcsX2NyeXB0b19ib3hfYmVmb3Jlbm1ieXRlczpZQixfY3J5cHRvX2JveF9kZXRhY2hlZDpGSSxfY3J5cHRvX2JveF9kZXRhY2hlZF9hZnRlcm5tOnRnLF9jcnlwdG9fYm94X2Vhc3k6S0ksX2NyeXB0b19ib3hfZWFzeV9hZnRlcm5tOmZ1bmN0aW9uKEEsSSxnLEIsQyxRKXtyZXR1cm4gQXw9MCxJfD0wLEN8PTAsUXw9MCwoQnw9MCk+Pj4wPjB8MD09KDB8QikmKGd8PTApPj4+MD40Mjk0OTY3Mjc5PyhTQigpLDApOih0ZyhBKzE2fDAsQSxJLGcsQixDLFEpLDApfSxfY3J5cHRvX2JveF9rZXlwYWlyOkNCLF9jcnlwdG9fYm94X21hY2J5dGVzOkdCLF9jcnlwdG9fYm94X21lc3NhZ2VieXRlc19tYXg6RkIsX2NyeXB0b19ib3hfbm9uY2VieXRlczpfQixfY3J5cHRvX2JveF9vcGVuX2RldGFjaGVkOkRJLF9jcnlwdG9fYm94X29wZW5fZGV0YWNoZWRfYWZ0ZXJubTpuZyxfY3J5cHRvX2JveF9vcGVuX2Vhc3k6ZEksX2NyeXB0b19ib3hfb3Blbl9lYXN5X2FmdGVybm06ZnVuY3Rpb24oQSxJLGcsQixDLFEpe3JldHVybiBJfD0wLEN8PTAsUXw9MCwwfCgoQnw9MCk+Pj4wPDB8MD09KDB8QikmKGd8PTApPj4+MDwxNj8tMTowfG5nKEF8PTAsSSsxNnwwLEksZz0wfHZnKDB8ZywwfEIsLTE2LC0xKSwwfG8oKSxDLFEpKX0sX2NyeXB0b19ib3hfcHVibGlja2V5Ynl0ZXM6WUIsX2NyeXB0b19ib3hfc2VhbDpmdW5jdGlvbihBLEksZyxDLFEpe0F8PTAsSXw9MCxnfD0wLEN8PTAsUXw9MDt2YXIgRSxpPTAsZT0wLG89MDtpZihFPXkseT15Kzk2fDAsMHxDQihFKzMyfDAsRSkpZz0tMTtlbHNle2U9RSszMnwwLG89KGk9QSkrMzJ8MDtkb3tCW2k+PjBdPTB8QltlPj4wXSxpPWkrMXwwLGU9ZSsxfDB9d2hpbGUoKDB8aSk8KDB8bykpO0dJKEUrNjR8MCxFKzMyfDAsUSksZz0wfEtJKEErMzJ8MCxJLGcsQyxFKzY0fDAsUSxFKSxNSShFLDMyKSxNSShFKzMyfDAsMzIpLE1JKEUrNjR8MCwyNCl9cmV0dXJuIHk9RSwwfGd9LF9jcnlwdG9fYm94X3NlYWxfb3BlbjpmdW5jdGlvbihBLEksZyxCLEMsUSl7dmFyIEUsaTtyZXR1cm4gQXw9MCxJfD0wLEN8PTAsUXw9MCxpPXksRT15PXkrNjMmLTY0LHk9eSszMnwwLChCfD0wKT4+PjA8MHwwPT0oMHxCKSYoZ3w9MCk+Pj4wPDQ4P2c9LTE6KEI9MHx2ZygwfGcsMHxCLC0zMiwtMSksZz0wfG8oKSxHSShFLEksQyksZz0wfGRJKEEsSSszMnwwLEIsZyxFLEksUSkpLHk9aSwwfGd9LF9jcnlwdG9fYm94X3NlYWxieXRlczpmdW5jdGlvbigpe3JldHVybiA0OH0sX2NyeXB0b19ib3hfc2VjcmV0a2V5Ynl0ZXM6WUIsX2NyeXB0b19ib3hfc2VlZF9rZXlwYWlyOmZ1bmN0aW9uKEEsSSxnKXtyZXR1cm4gMHx0SShBfD0wLEl8PTAsZ3w9MCl9LF9jcnlwdG9fYm94X3NlZWRieXRlczpZQixfY3J5cHRvX2dlbmVyaWNoYXNoOkRnLF9jcnlwdG9fZ2VuZXJpY2hhc2hfYnl0ZXM6WUIsX2NyeXB0b19nZW5lcmljaGFzaF9ieXRlc19tYXg6ZEIsX2NyeXB0b19nZW5lcmljaGFzaF9ieXRlc19taW46R0IsX2NyeXB0b19nZW5lcmljaGFzaF9maW5hbDp6ZyxfY3J5cHRvX2dlbmVyaWNoYXNoX2luaXQ6TGcsX2NyeXB0b19nZW5lcmljaGFzaF9rZXlieXRlczpZQixfY3J5cHRvX2dlbmVyaWNoYXNoX2tleWJ5dGVzX21heDpkQixfY3J5cHRvX2dlbmVyaWNoYXNoX2tleWJ5dGVzX21pbjpHQixfY3J5cHRvX2dlbmVyaWNoYXNoX2tleWdlbjpzQixfY3J5cHRvX2dlbmVyaWNoYXNoX3N0YXRlYnl0ZXM6ZnVuY3Rpb24oKXtyZXR1cm4gMzg0fSxfY3J5cHRvX2dlbmVyaWNoYXNoX3VwZGF0ZTpSZyxfY3J5cHRvX2hhc2g6ZnVuY3Rpb24oQSxJLGcsQil7cmV0dXJuIFJJKEF8PTAsSXw9MCxnfD0wLEJ8PTApLDB9LF9jcnlwdG9faGFzaF9ieXRlczpkQixfY3J5cHRvX2tkZl9ieXRlc19tYXg6ZEIsX2NyeXB0b19rZGZfYnl0ZXNfbWluOkdCLF9jcnlwdG9fa2RmX2NvbnRleHRieXRlczpsQixfY3J5cHRvX2tkZl9kZXJpdmVfZnJvbV9rZXk6ZnVuY3Rpb24oQSxJLGcsQixDLFEpe3JldHVybiAwfEpBKEF8PTAsSXw9MCxnfD0wLEJ8PTAsQ3w9MCxRfD0wKX0sX2NyeXB0b19rZGZfa2V5Ynl0ZXM6WUIsX2NyeXB0b19rZGZfa2V5Z2VuOnNCLF9jcnlwdG9fa3hfY2xpZW50X3Nlc3Npb25fa2V5czpmdW5jdGlvbihBLEksZyxDLFEpe3ZhciBFLGksZTtpZihJfD0wLGd8PTAsQ3w9MCxRfD0wLGU9eSxpPXk9eSs2MyYtNjQseT15KzQ4MHwwLEU9MD09KDB8KEF8PTApKT9JOkEsST0wPT0oMHxJKT9FOkksRXx8U0IoKSwwfEJCKGkrNDQ4fDAsQyxRKSlBPS0xO2Vsc2V7TGcoaSwwLDAsNjQpLFJnKGksaSs0NDh8MCwzMiwwKSxNSShpKzQ0OHwwLDMyKSxSZyhpLGcsMzIsMCksUmcoaSxRLDMyLDApLHpnKGksaSszODR8MCw2NCksTUkoaSwzODQpLEE9MDtkb3tCW0UrQT4+MF09MHxCW2krMzg0K0E+PjBdLEJbSStBPj4wXT0wfEJbaSszODQrKEErMzIpPj4wXSxBPUErMXwwfXdoaWxlKDMyIT0oMHxBKSk7TUkoaSszODR8MCw2NCksQT0wfXJldHVybiB5PWUsMHxBfSxfY3J5cHRvX2t4X2tleXBhaXI6ZnVuY3Rpb24oQSxJKXtyZXR1cm4gQXw9MCxDZyhJfD0wLDMyKSwwfGVCKEEsSSl9LF9jcnlwdG9fa3hfcHVibGlja2V5Ynl0ZXM6WUIsX2NyeXB0b19reF9zZWNyZXRrZXlieXRlczpZQixfY3J5cHRvX2t4X3NlZWRfa2V5cGFpcjpmdW5jdGlvbihBLEksZyl7cmV0dXJuIEF8PTAsRGcoSXw9MCwzMixnfD0wLDMyLDAsMCwwKSwwfGVCKEEsSSl9LF9jcnlwdG9fa3hfc2VlZGJ5dGVzOllCLF9jcnlwdG9fa3hfc2VydmVyX3Nlc3Npb25fa2V5czpmdW5jdGlvbihBLEksZyxDLFEpe3ZhciBFLGksZTtpZihJfD0wLGd8PTAsQ3w9MCxRfD0wLGU9eSxpPXk9eSs2MyYtNjQseT15KzQ4MHwwLEU9MD09KDB8KEF8PTApKT9JOkEsST0wPT0oMHxJKT9FOkksRXx8U0IoKSwwfEJCKGkrNDQ4fDAsQyxRKSlBPS0xO2Vsc2V7TGcoaSwwLDAsNjQpLFJnKGksaSs0NDh8MCwzMiwwKSxNSShpKzQ0OHwwLDMyKSxSZyhpLFEsMzIsMCksUmcoaSxnLDMyLDApLHpnKGksaSszODR8MCw2NCksTUkoaSwzODQpLEE9MDtkb3tCW0krQT4+MF09MHxCW2krMzg0K0E+PjBdLEJbRStBPj4wXT0wfEJbaSszODQrKEErMzIpPj4wXSxBPUErMXwwfXdoaWxlKDMyIT0oMHxBKSk7TUkoaSszODR8MCw2NCksQT0wfXJldHVybiB5PWUsMHxBfSxfY3J5cHRvX2t4X3Nlc3Npb25rZXlieXRlczpZQixfY3J5cHRvX3B3aGFzaDpmdW5jdGlvbihBLEksZyxCLFEsRSxpLGUsbyxjLGEpe3N3aXRjaChBfD0wLEl8PTAsZ3w9MCxCfD0wLFF8PTAsRXw9MCxpfD0wLGV8PTAsb3w9MCxjfD0wLDB8KGF8PTApKXtjYXNlIDE6ST0wfGZ1bmN0aW9uKEEsSSxnLEIsUSxFLGksZSxvLGMpe2d8PTAsQnw9MCxRfD0wLEV8PTAsaXw9MCxlfD0wLG98PTAsY3w9MCxZQSgwfChBfD0wKSwwLDB8KEl8PTApKTtkb3tpZighKGc+Pj4wPjB8MD09KDB8ZykmST4+PjA+NDI5NDk2NzI5NSkpe2lmKGc+Pj4wPDB8MD09KDB8ZykmST4+PjA8MTYpe0NbODY3OF09MjgsST0tMTticmVha31pZigob3xFKT4+PjA+MHwwPT0ob3xFfDApJihlfFEpPj4+MD40Mjk0OTY3Mjk1fGM+Pj4wPjIxNDc0ODM2NDgpe0NbODY3OF09MjIsST0tMTticmVha31pZihvPj4+MDwwfDA9PSgwfG8pJmU+Pj4wPDN8Yz4+PjA8ODE5Mil7Q1s4Njc4XT0yOCxJPS0xO2JyZWFrfUk9KDAhPSgwfHBnKGUsYz4+PjEwLEIsUSxpLEEsSSkpKTw8MzE+PjMxO2JyZWFrfUNbODY3OF09MjIsST0tMX13aGlsZSgwKTtyZXR1cm4gMHxJfShBLEksZyxCLFEsRSxpLGUsbyxjKTticmVhaztjYXNlIDI6ST0wfGZ1bmN0aW9uKEEsSSxnLEIsUSxFLGksZSxvLGMpe2d8PTAsQnw9MCxRfD0wLEV8PTAsaXw9MCxlfD0wLG98PTAsY3w9MCxZQSgwfChBfD0wKSwwLDB8KEl8PTApKTtkb3tpZighKGc+Pj4wPjB8MD09KDB8ZykmST4+PjA+NDI5NDk2NzI5NSkpe2lmKGc+Pj4wPDB8MD09KDB8ZykmST4+PjA8MTYpe0NbODY3OF09MjgsST0tMTticmVha31pZigob3xFKT4+PjA+MHwwPT0ob3xFfDApJihlfFEpPj4+MD40Mjk0OTY3Mjk1fGM+Pj4wPjIxNDc0ODM2NDgpe0NbODY3OF09MjIsST0tMTticmVha31pZigwPT0oMHxlKSYwPT0oMHxvKXxjPj4+MDw4MTkyKXtDWzg2NzhdPTI4LEk9LTE7YnJlYWt9ST0oMCE9KDB8RmcoZSxjPj4+MTAsQixRLGksQSxJKSkpPDwzMT4+MzE7YnJlYWt9Q1s4Njc4XT0yMixJPS0xfXdoaWxlKDApO3JldHVybiAwfEl9KEEsSSxnLEIsUSxFLGksZSxvLGMpO2JyZWFrO2RlZmF1bHQ6Q1s4Njc4XT0yOCxJPS0xfXJldHVybiAwfEl9LF9jcnlwdG9fcHdoYXNoX2FsZ19hcmdvbjJpMTM6a0IsX2NyeXB0b19wd2hhc2hfYWxnX2FyZ29uMmlkMTM6dUIsX2NyeXB0b19wd2hhc2hfYWxnX2RlZmF1bHQ6dUIsX2NyeXB0b19wd2hhc2hfYnl0ZXNfbWF4OkhCLF9jcnlwdG9fcHdoYXNoX2J5dGVzX21pbjpHQixfY3J5cHRvX3B3aGFzaF9tZW1saW1pdF9pbnRlcmFjdGl2ZTpmdW5jdGlvbigpe3JldHVybiA2NzEwODg2NH0sX2NyeXB0b19wd2hhc2hfbWVtbGltaXRfbWF4OmZ1bmN0aW9uKCl7cmV0dXJuLTIxNDc0ODM2NDh9LF9jcnlwdG9fcHdoYXNoX21lbWxpbWl0X21pbjpmdW5jdGlvbigpe3JldHVybiA4MTkyfSxfY3J5cHRvX3B3aGFzaF9tZW1saW1pdF9tb2RlcmF0ZTpmdW5jdGlvbigpe3JldHVybiAyNjg0MzU0NTZ9LF9jcnlwdG9fcHdoYXNoX21lbWxpbWl0X3NlbnNpdGl2ZTpmdW5jdGlvbigpe3JldHVybiAxMDczNzQxODI0fSxfY3J5cHRvX3B3aGFzaF9vcHNsaW1pdF9pbnRlcmFjdGl2ZTp1QixfY3J5cHRvX3B3aGFzaF9vcHNsaW1pdF9tYXg6SEIsX2NyeXB0b19wd2hhc2hfb3BzbGltaXRfbWluOmtCLF9jcnlwdG9fcHdoYXNoX29wc2xpbWl0X21vZGVyYXRlOnBCLF9jcnlwdG9fcHdoYXNoX29wc2xpbWl0X3NlbnNpdGl2ZTpmdW5jdGlvbigpe3JldHVybiA0fSxfY3J5cHRvX3B3aGFzaF9wYXNzd2RfbWF4OkhCLF9jcnlwdG9fcHdoYXNoX3Bhc3N3ZF9taW46TUIsX2NyeXB0b19wd2hhc2hfc2FsdGJ5dGVzOkdCLF9jcnlwdG9fcHdoYXNoX3N0cjpmdW5jdGlvbihBLEksZyxCLEMsUSxFKXtyZXR1cm4gMHxMQShBfD0wLEl8PTAsZ3w9MCxCfD0wLEN8PTAsUXw9MCxFfD0wKX0sX2NyeXB0b19wd2hhc2hfc3RyX2FsZzpmdW5jdGlvbihBLEksZyxCLEMsUSxFLGkpe0F8PTAsSXw9MCxnfD0wLEJ8PTAsQ3w9MCxRfD0wLEV8PTA7dmFyIGU9MDtzd2l0Y2goMHwoaXw9MCkpe2Nhc2UgMTplPTB8UkEoQSxJLGcsQixDLFEsRSk7YnJlYWs7Y2FzZSAyOmU9MHxMQShBLEksZyxCLEMsUSxFKTticmVhaztkZWZhdWx0OlNCKCl9cmV0dXJuIDB8ZX0sX2NyeXB0b19wd2hhc2hfc3RyX25lZWRzX3JlaGFzaDpmdW5jdGlvbihBLEksZyxCKXtBfD0wLEl8PTAsZ3w9MCxCfD0wO2Rve2lmKDB8b0koQSwzMzcxMywxMCkpe2lmKDB8b0koQSwzMzcyNCw5KSl7Q1s4Njc4XT0yOCxJPS0xO2JyZWFrfUk9MHxtZyhBLEksZyxCKTticmVha31JPTB8TmcoQSxJLGcsQil9d2hpbGUoMCk7cmV0dXJuIDB8SX0sX2NyeXB0b19wd2hhc2hfc3RyX3ZlcmlmeTpmdW5jdGlvbihBLEksZyxCKXtBfD0wLEl8PTAsZ3w9MCxCfD0wO2Rve2lmKDB8b0koQSwzMzcxMywxMCkpe2lmKDB8b0koQSwzMzcyNCw5KSl7Q1s4Njc4XT0yOCxnPS0xO2JyZWFrfWc9MHxoSShBLEksZyxCKTticmVha31nPTB8eUkoQSxJLGcsQil9d2hpbGUoMCk7cmV0dXJuIDB8Z30sX2NyeXB0b19wd2hhc2hfc3RyYnl0ZXM6ZnVuY3Rpb24oKXtyZXR1cm4gMTI4fSxfY3J5cHRvX3B3aGFzaF9zdHJwcmVmaXg6ZnVuY3Rpb24oKXtyZXR1cm4gMzM3MTN9LF9jcnlwdG9fc2NhbGFybXVsdDpCQixfY3J5cHRvX3NjYWxhcm11bHRfYmFzZTplQixfY3J5cHRvX3NjYWxhcm11bHRfYnl0ZXM6WUIsX2NyeXB0b19zY2FsYXJtdWx0X3NjYWxhcmJ5dGVzOllCLF9jcnlwdG9fc2VjcmV0Ym94X2RldGFjaGVkOlosX2NyeXB0b19zZWNyZXRib3hfZWFzeTpmdW5jdGlvbihBLEksZyxCLEMsUSl7cmV0dXJuIEF8PTAsSXw9MCxDfD0wLFF8PTAsKEJ8PTApPj4+MD4wfDA9PSgwfEIpJihnfD0wKT4+PjA+NDI5NDk2NzI3OT8oU0IoKSwwKTooWihBKzE2fDAsQSxJLGcsQixDLFEpLDApfSxfY3J5cHRvX3NlY3JldGJveF9rZXlieXRlczpZQixfY3J5cHRvX3NlY3JldGJveF9rZXlnZW46c0IsX2NyeXB0b19zZWNyZXRib3hfbWFjYnl0ZXM6R0IsX2NyeXB0b19zZWNyZXRib3hfbWVzc2FnZWJ5dGVzX21heDpGQixfY3J5cHRvX3NlY3JldGJveF9ub25jZWJ5dGVzOl9CLF9jcnlwdG9fc2VjcmV0Ym94X29wZW5fZGV0YWNoZWQ6Z0EsX2NyeXB0b19zZWNyZXRib3hfb3Blbl9lYXN5OmZ1bmN0aW9uKEEsSSxnLEIsQyxRKXtyZXR1cm4gSXw9MCxDfD0wLFF8PTAsMHwoKEJ8PTApPj4+MDwwfDA9PSgwfEIpJihnfD0wKT4+PjA8MTY/LTE6MHxnQShBfD0wLEkrMTZ8MCxJLGc9MHx2ZygwfGcsMHxCLC0xNiwtMSksMHxvKCksQyxRKSl9LF9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X2FieXRlczpmdW5jdGlvbigpe3JldHVybiAxN30sX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfaGVhZGVyYnl0ZXM6X0IsX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfaW5pdF9wdWxsOmZ1bmN0aW9uKEEsSSxnKXt2YXIgQztyZXR1cm4gUihBfD0wLEl8PTAsZ3w9MCksTWcoQSksQz1RW0krMTY+PjBdfFFbSSsxNisxPj4wXTw8OHxRW0krMTYrMj4+MF08PDE2fFFbSSsxNiszPj4wXTw8MjQsZz1RW0krMTYrND4+MF18UVtJKzE2KzQrMT4+MF08PDh8UVtJKzE2KzQrMj4+MF08PDE2fFFbSSsxNis0KzM+PjBdPDwyNCxCW0ErMzY+PjBdPUMsQltBKzM2KzE+PjBdPUM+PjgsQltBKzM2KzI+PjBdPUM+PjE2LEJbQSszNiszPj4wXT1DPj4yNCxCW0ErMzYrND4+MF09ZyxCW0ErMzYrNCsxPj4wXT1nPj44LEJbQSszNis0KzI+PjBdPWc+PjE2LEJbQSszNis0KzM+PjBdPWc+PjI0LEJbQSs0ND4+MF09MCxCW0ErNDQrMT4+MF09MCxCW0ErNDQrMj4+MF09MCxCW0ErNDQrMz4+MF09MCxCW0ErNDQrND4+MF09MCxCW0ErNDQrNCsxPj4wXT0wLEJbQSs0NCs0KzI+PjBdPTAsQltBKzQ0KzQrMz4+MF09MCwwfSxfY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9pbml0X3B1c2g6ZnVuY3Rpb24oQSxJLGcpe3JldHVybiBBfD0wLGd8PTAsQ2coSXw9MCwyNCksUihBLEksZyksTWcoQSksZz1RW0krMTY+PjBdfFFbSSsxNisxPj4wXTw8OHxRW0krMTYrMj4+MF08PDE2fFFbSSsxNiszPj4wXTw8MjQsST1RW0krMTYrND4+MF18UVtJKzE2KzQrMT4+MF08PDh8UVtJKzE2KzQrMj4+MF08PDE2fFFbSSsxNis0KzM+PjBdPDwyNCxCW0ErMzY+PjBdPWcsQltBKzM2KzE+PjBdPWc+PjgsQltBKzM2KzI+PjBdPWc+PjE2LEJbQSszNiszPj4wXT1nPj4yNCxCW0ErMzYrND4+MF09SSxCW0ErMzYrNCsxPj4wXT1JPj44LEJbQSszNis0KzI+PjBdPUk+PjE2LEJbQSszNis0KzM+PjBdPUk+PjI0LEJbQSs0ND4+MF09MCxCW0ErNDQrMT4+MF09MCxCW0ErNDQrMj4+MF09MCxCW0ErNDQrMz4+MF09MCxCW0ErNDQrND4+MF09MCxCW0ErNDQrNCsxPj4wXT0wLEJbQSs0NCs0KzI+PjBdPTAsQltBKzQ0KzQrMz4+MF09MCwwfSxfY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9rZXlieXRlczpZQixfY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9rZXlnZW46c0IsX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfbWVzc2FnZWJ5dGVzX21heDpmdW5jdGlvbigpe3JldHVybi0xOH0sX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfcHVsbDpmdW5jdGlvbihBLEksZyxRLEUsaSxlLGMsYSxuKXtBfD0wLEl8PTAsUXw9MCxFfD0wLGl8PTAsZXw9MCxjfD0wLGF8PTAsbnw9MDt2YXIgcix0LGY9MCx3PTAscz0wO3Q9eSxyPXk9eSs2MyYtNjQseT15KzM1MnwwLDB8KGd8PTApJiYoQ1tnPj4yXT0wLENbZys0Pj4yXT0wKSwwfFEmJihCW1E+PjBdPS0xKTtkb3tpZihlPj4+MDwwfDA9PSgwfGUpJmk+Pj4wPDE3KWM9LTE7ZWxzZXt3PTB8dmcoMHxpLDB8ZSwtMTcsLTEpLChzPTB8bygpKT4+PjA+MHwwPT0oMHxzKSZ3Pj4+MD40Mjk0OTY3Mjc4JiZTQigpLE9JKHIrMTZ8MCw2NCwwLEErMzJ8MCxBKSxnQihyKzgwfDAscisxNnwwKSxNSShyKzE2fDAsNjQpLGJnKHIrODB8MCxjLGEsbiksYz0wfFVnKDAsMCwwfGEsMHxuKSxvKCksYmcocis4MHwwLDM0NjcyLDE1JmMsMCksZj02NCsoYz1yKzE2fDApfDA7ZG97Q1tjPj4yXT0wLGM9Yys0fDB9d2hpbGUoKDB8Yyk8KDB8ZikpO2lmKEJbcisxNj4+MF09MHxCW0U+PjBdLHJJKHIrMTZ8MCxyKzE2fDAsNjQsMCxBKzMyfDAsMSxBKSxjPTB8QltyKzE2Pj4wXSxCW3IrMTY+PjBdPTB8QltFPj4wXSxiZyhyKzgwfDAscisxNnwwLDY0LDApLGJnKHIrODB8MCxFKzF8MCx3LHMpLGY9MHx2ZygwfGksMHxlLDE1LDApLG8oKSxiZyhyKzgwfDAsMzQ2NzIsMTUmZiwwKSxMSShyKzMzNnwwLGEsbiksYmcocis4MHwwLHIrMzM2fDAsOCwwKSxMSShyKzMzNnwwLG49MHx2ZygwfGksMHxlLDQ3LDApLDB8bygpKSxiZyhyKzgwfDAsciszMzZ8MCw4LDApLElCKHIrODB8MCxyKSxNSShyKzgwfDAsMjU2KSwwfEVJKHIsRSsxK3d8MCwxNikpe01JKHIsMTYpLGM9LTE7YnJlYWt9ckkoSSxFKzF8MCx3LHMsQSszMnwwLDIsQSksYWcoQSszNnwwLHIpLElnKEErMzJ8MCksKDAhPSgyJmMpfHwwfGxJKEErMzJ8MCw0KSkmJndBKEEpLDB8ZyYmKENbZz4+Ml09dyxDW2crND4+Ml09cyksMHxRPyhCW1E+PjBdPWMsYz0wKTpjPTB9fXdoaWxlKDApO3JldHVybiB5PXQsMHxjfSxfY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9wdXNoOmZ1bmN0aW9uKEEsSSxnLFEsRSxpLGUsYyxhLG4pe0F8PTAsSXw9MCxRfD0wLEV8PTAsaXw9MCxlfD0wLGN8PTAsYXw9MCxufD0wO3ZhciByLHQsZj0wO3Q9eSxmPXk9eSs2MyYtNjQseT15KzMzNnwwLDB8KGd8PTApJiYoQ1tnPj4yXT0wLENbZys0Pj4yXT0wKSxpPj4+MD4wfDA9PSgwfGkpJkU+Pj4wPjQyOTQ5NjcyNzgmJlNCKCksT0koZiw2NCwwLEErMzJ8MCxBKSxnQihmKzY0fDAsZiksTUkoZiw2NCksYmcoZis2NHwwLGUsYyxhKSxlPTB8VWcoMCwwLDB8YywwfGEpLG8oKSxiZyhmKzY0fDAsMzQ2NzIsMTUmZSwwKSxyPShlPWYpKzY0fDA7ZG97Q1tlPj4yXT0wLGU9ZSs0fDB9d2hpbGUoKDB8ZSk8KDB8cikpO3JldHVybiBCW2Y+PjBdPW4sckkoZixmLDY0LDAsQSszMnwwLDEsQSksYmcoZis2NHwwLGYsNjQsMCksQltJPj4wXT0wfEJbZj4+MF0sckkoSSsxfDAsUSxFLGksQSszMnwwLDIsQSksYmcoZis2NHwwLEkrMXwwLEUsaSksYmcoZis2NHwwLDM0NjcyLDE1JkUsMCksTEkoZiszMjB8MCxjLGEpLGJnKGYrNjR8MCxmKzMyMHwwLDgsMCksTEkoZiszMjB8MCxRPTB8dmcoMHxFLDB8aSw2NCwwKSwwfG8oKSksYmcoZis2NHwwLGYrMzIwfDAsOCwwKSxJQihmKzY0fDAsSSsxK0V8MCksTUkoZis2NHwwLDI1NiksYWcoQSszNnwwLEkrMStFfDApLElnKEErMzJ8MCksKDAhPSgyJm4pfHwwfGxJKEErMzJ8MCw0KSkmJndBKEEpLDB8ZyYmKG49MHx2ZygwfEUsMHxpLDE3LDApLGY9MHxvKCksQ1tnPj4yXT1uLENbZys0Pj4yXT1mKSx5PXQsMH0sX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfcmVrZXk6d0EsX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfc3RhdGVieXRlczpmdW5jdGlvbigpe3JldHVybiA1Mn0sX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfdGFnX2ZpbmFsOnBCLF9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X3RhZ19tZXNzYWdlOk1CLF9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X3RhZ19wdXNoOmtCLF9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X3RhZ19yZWtleTp1QixfY3J5cHRvX3Nob3J0aGFzaDpmdW5jdGlvbihBLEksZyxCLEMpe3JldHVybiBHKEF8PTAsSXw9MCxnfD0wLEJ8PTAsQ3w9MCksMH0sX2NyeXB0b19zaG9ydGhhc2hfYnl0ZXM6bEIsX2NyeXB0b19zaG9ydGhhc2hfa2V5Ynl0ZXM6R0IsX2NyeXB0b19zaG9ydGhhc2hfa2V5Z2VuOmZ1bmN0aW9uKEEpe0NnKEF8PTAsMTYpfSxfY3J5cHRvX3NpZ246ZnVuY3Rpb24oQSxJLGcsQixDLFEpe3JldHVybiAwfFRBKEF8PTAsSXw9MCxnfD0wLEJ8PTAsQ3w9MCxRfD0wKX0sX2NyeXB0b19zaWduX2J5dGVzOmRCLF9jcnlwdG9fc2lnbl9kZXRhY2hlZDpmdW5jdGlvbihBLEksZyxCLEMsUSl7cmV0dXJuIGtnKEF8PTAsSXw9MCxnfD0wLEJ8PTAsQ3w9MCxRfD0wKSwwfSxfY3J5cHRvX3NpZ25fZWQyNTUxOV9wa190b19jdXJ2ZTI1NTE5OmZ1bmN0aW9uKEEsSSl7dmFyIGcsQjtyZXR1cm4gQXw9MCxCPXksZz15PXkrNjMmLTY0LHk9eSsyNTZ8MCwwPT0oMHxHQShJfD0wKSkmJjA9PSgwfHJBKGcrODh8MCxJKSkmJjAhPSgwfGZ1bmN0aW9uKEEpe3ZhciBJLGc7cmV0dXJuIEk9eSxnPXk9eSs2MyYtNjQseT15KzE2MHwwLE8oZyxBfD0wKSxBPTB8Y2coZykseT1JLDB8QX0oZys4OHwwKSk/KFNnKGcpLGxBKGcsZyxnKzg4KzQwfDApLFNnKGcrNDh8MCksX0EoZys0OHwwLGcrNDh8MCxnKzg4KzQwfDApLFcoZyxnKSx1KGcrNDh8MCxnKzQ4fDAsZyksQ0EoQSxnKzQ4fDApLEE9MCk6QT0tMSx5PUIsMHxBfSxfY3J5cHRvX3NpZ25fZWQyNTUxOV9za190b19jdXJ2ZTI1NTE5OmZ1bmN0aW9uKEEsSSl7dmFyIGcsQyxRO0F8PTAsQz15LFE9eT15KzYzJi02NCx5PXkrNjR8MCxSSShRLEl8PTAsMzIsMCksQltRPj4wXT0tOCZCW1E+PjBdLEJbUSszMT4+MF09NjMmQltRKzMxPj4wXXw2NCxJPVEsZz1BKzMyfDA7ZG97QltBPj4wXT0wfEJbST4+MF0sQT1BKzF8MCxJPUkrMXwwfXdoaWxlKCgwfEEpPCgwfGcpKTtyZXR1cm4gTUkoUSw2NCkseT1DLDB9LF9jcnlwdG9fc2lnbl9maW5hbF9jcmVhdGU6ZnVuY3Rpb24oQSxJLGcsQil7cmV0dXJuIGZ1bmN0aW9uKEEsSSxnLEIpe3ZhciBDLFE7SXw9MCxnfD0wLEJ8PTAsQz15LFE9eT15KzYzJi02NCx5PXkrNjR8MCxWSShBfD0wLFEpLGhBKEksZyxRLDY0LDAsQiwxKSx5PUN9KEF8PTAsSXw9MCxnfD0wLEJ8PTApLDB9LF9jcnlwdG9fc2lnbl9maW5hbF92ZXJpZnk6ZnVuY3Rpb24oQSxJLGcpe3JldHVybiAwfGZ1bmN0aW9uKEEsSSxnKXt2YXIgQixDO3JldHVybiBJfD0wLGd8PTAsQj15LEM9eT15KzYzJi02NCx5PXkrNjR8MCxWSShBfD0wLEMpLEE9MHx1QShJLEMsNjQsMCxnLDEpLHk9QiwwfEF9KEF8PTAsSXw9MCxnfD0wKX0sX2NyeXB0b19zaWduX2luaXQ6ZnVuY3Rpb24oQSl7cmV0dXJuIGZ1bmN0aW9uKEEpe1BJKEF8PTApfShBfD0wKSwwfSxfY3J5cHRvX3NpZ25fa2V5cGFpcjpmdW5jdGlvbihBLEkpe3JldHVybiBmdW5jdGlvbihBLEkpe3ZhciBnLEI7QXw9MCxJfD0wLGc9eSxCPXk9eSs2MyYtNjQseT15KzMyfDAsQ2coQiwzMiksd0koQSxJLEIpLE1JKEIsMzIpLHk9Z30oQXw9MCxJfD0wKSwwfSxfY3J5cHRvX3NpZ25fbWVzc2FnZWJ5dGVzX21heDpmdW5jdGlvbigpe3JldHVybi02NX0sX2NyeXB0b19zaWduX29wZW46ZnVuY3Rpb24oQSxJLGcsQixDLFEpe3JldHVybiAwfFNBKEF8PTAsSXw9MCxnfD0wLEJ8PTAsQ3w9MCxRfD0wKX0sX2NyeXB0b19zaWduX3B1YmxpY2tleWJ5dGVzOllCLF9jcnlwdG9fc2lnbl9zZWNyZXRrZXlieXRlczpkQixfY3J5cHRvX3NpZ25fc2VlZF9rZXlwYWlyOmZ1bmN0aW9uKEEsSSxnKXtyZXR1cm4gd0koQXw9MCxJfD0wLGd8PTApLDB9LF9jcnlwdG9fc2lnbl9zZWVkYnl0ZXM6WUIsX2NyeXB0b19zaWduX3N0YXRlYnl0ZXM6ZnVuY3Rpb24oKXtyZXR1cm4gMjA4fSxfY3J5cHRvX3NpZ25fdXBkYXRlOmZ1bmN0aW9uKEEsSSxnLEIpe3JldHVybiB4ZyhBfD0wLEl8PTAsZ3w9MCxCfD0wKSwwfSxfY3J5cHRvX3NpZ25fdmVyaWZ5X2RldGFjaGVkOmZ1bmN0aW9uKEEsSSxnLEIsQyl7cmV0dXJuIDB8ZGcoQXw9MCxJfD0wLGd8PTAsQnw9MCxDfD0wKX0sX2Vtc2NyaXB0ZW5fZ2V0X3NicmtfcHRyOmZ1bmN0aW9uKCl7cmV0dXJuIDM1MjMyfSxfZW1zY3JpcHRlbl9yZXBsYWNlX21lbW9yeTpmdW5jdGlvbihBKXtyZXR1cm4gQj1uZXcgSW50OEFycmF5KEEpLFE9bmV3IFVpbnQ4QXJyYXkoQSksQz1uZXcgSW50MzJBcnJheShBKSxnPUEsITB9LF9mcmVlOmQsX2k2NEFkZDp2ZyxfaTY0U3VidHJhY3Q6VWcsX21hbGxvYzpGLF9tZW1jcHk6QkEsX21lbW1vdmU6WUksX21lbXNldDpZQSxfcmFuZG9tYnl0ZXM6ZnVuY3Rpb24oQSxJLGcpeyhnfD0wKT4+PjA8MXwxPT0oMHxnKSYoSXw9MCk+Pj4wPDA/Q2coQXw9MCxJKTpjKDM0NTA2LDM0NTI2LDE5NywzNDU1Mil9LF9yYW5kb21ieXRlc19idWY6Q2csX3JhbmRvbWJ5dGVzX2J1Zl9kZXRlcm1pbmlzdGljOmZ1bmN0aW9uKEEsSSxnKXtPSShBfD0wLEl8PTAsMCwzNDQ5NCxnfD0wKX0sX3JhbmRvbWJ5dGVzX2Nsb3NlOk1CLF9yYW5kb21ieXRlc19yYW5kb206REIsX3JhbmRvbWJ5dGVzX3NlZWRieXRlczpZQixfcmFuZG9tYnl0ZXNfc3RpcjpoQixfcmFuZG9tYnl0ZXNfdW5pZm9ybTpmdW5jdGlvbihBKXt2YXIgST0wO2lmKChBfD0wKT4+PjA8MilJPTA7ZWxzZXtkb3tJPTB8REIoKX13aGlsZShJPj4+MDwoKCgwLUF8MCk+Pj4wKSUoQT4+PjApfDApPj4+MCk7ST0oST4+PjApJShBPj4+MCl8MH1yZXR1cm4gMHxJfSxfc29kaXVtX2Jhc2U2NDJiaW46bSxfc29kaXVtX2Jhc2U2NF9lbmNvZGVkX2xlbjpmdW5jdGlvbihBLEkpe3ZhciBnO3JldHVybiBBfD0wLEVCKEl8PTApLCgoKEE+Pj4wKS8zfDApPDwyfDEpKyg0LSgzLShnPSgwfEUoKEE+Pj4wKS8zfDAsLTMpKStBfDApJjAtKEk+Pj4xJjEpKSYwLSgxJihnPj4+MXxnKSkpfDB9LF9zb2RpdW1fYmluMmJhc2U2NDpxLF9zb2RpdW1fYmluMmhleDpmdW5jdGlvbihBLEksZyxDKXtBfD0wLGd8PTA7dmFyIEU9MCxpPTA7aWYoKEN8PTApPj4+MDwyMTQ3NDgzNjQ3JkM8PDE+Pj4wPChJfD0wKT4+PjB8fFNCKCksQyl7ST0wO2Rve2k9MHxRW2crST4+MF0sQltBKyhFPUk8PDEpPj4wXT04NysoaT4+PjQpKygoNjU1MjYrKGk+Pj40KXwwKT4+PjgmMjE3KSxCW0ErKDF8RSk+PjBdPSgyMjI3MisoKDE1JmkpPDw4KSsoNjU1MjYrKDE1JmkpJjU1NTUyKXwwKT4+PjgsST1JKzF8MH13aGlsZSgoMHxJKSE9KDB8QykpO0k9Qzw8MX1lbHNlIEk9MDtyZXR1cm4gQltBK0k+PjBdPTAsMHxBfSxfc29kaXVtX2hleDJiaW46ZnVuY3Rpb24oQSxJLGcsRSxpLGUsbyl7QXw9MCxJfD0wLGd8PTAsRXw9MCxpfD0wLGV8PTAsb3w9MDt2YXIgYz0wLGE9MCxuPTAscj0wLHQ9MCxmPTAsdz0wO0E6ZG97aWYoRSl7cj0wLGY9MCxjPTAsYT0wO0k6Zm9yKDs7KXtmb3IoOyEoMjU1JigodD0oNjU1MjYrKDIwMSsoMjIzJihuPTB8UVtnK2M+PjBdKSkmMjU1KV42NTUyMCsoMjAxKygyMjMmbikmMjU1KSk+Pj44KXwoNjU1MjYrKDQ4Xm4pfDApPj4+OCl8MCk7KXtpZighKDAhPSgwfGkpJmE8PDI0Pj4yND09MCkpe249MDticmVhayBJfWlmKCEoMHxxZyhpLG4pKSl7YT1yLHc9MTc7YnJlYWsgQX1pZighKChjPWMrMXwwKT4+PjA8RT4+PjApKXthPXIsdz0xNzticmVhayBBfWE9MH1pZihuPXQmMjAxKygyMjMmbil8KDY1NTI2Kyg0OF5uKXwwKT4+PjgmKDQ4Xm4pLHI+Pj4wPj1JPj4+MCl7dz05O2JyZWFrfWlmKGE8PDI0Pj4yND8oQltBK3I+PjBdPW58MjU1JmYscj1yKzF8MCxuPWYpOm49bjw8NCYyNTUsYT1+YSwhKChjPWMrMXwwKT4+PjA8RT4+PjApKXtuPTA7YnJlYWt9Zj1ufWlmKDk9PSgwfHcpJiYoQ1s4Njc4XT02OCxuPS0xKSxhPDwyND4+MjQpe0NbODY3OF09Mjgsbj0wLGE9YystMXwwLGM9LTE7YnJlYWt9aWYobil7bj0wLGE9YyxjPS0xO2JyZWFrfWE9cix3PTE3O2JyZWFrfWE9MCxjPTAsdz0xN313aGlsZSgwKTtyZXR1cm4gMTc9PSgwfHcpJiYobj1hLGE9YyxjPTApLG8/Q1tvPj4yXT1nK2E6KDB8YSkhPSgwfEUpJiYoQ1s4Njc4XT0yOCxjPS0xKSwwfGUmJihDW2U+PjJdPW4pLDB8Y30sX3NvZGl1bV9pbml0OmZ1bmN0aW9uKCl7dmFyIEE9MDtyZXR1cm4gMHxDWzg2NzZdP0E9MTooZnVuY3Rpb24oKXtyZXR1cm4gQT15LEk9eT15KzYzJi02NCx5PXkrMTZ8MCxaZyhJKSwwfENbST4+Ml0mJlpnKEkpLHZvaWQoeT1BKTt2YXIgQSxJfSgpLGhCKCksZnVuY3Rpb24oKXt2YXIgQT0wOygwfChBPTB8dygzMCkpKT4wP0NbODY3N109QTpBPTB8Q1s4Njc3XSxBPj4+MDwxNj9TQigpOkNnKDM0Njg4LDE2KX0oKSxDWzg2NzZdPTEsQT0wKSwwfEF9LF9zb2RpdW1fbGlicmFyeV9taW5pbWFsOmtCLF9zb2RpdW1fbGlicmFyeV92ZXJzaW9uX21ham9yOmZ1bmN0aW9uKCl7cmV0dXJuIDEwfSxfc29kaXVtX2xpYnJhcnlfdmVyc2lvbl9taW5vcjpwQixfc29kaXVtX3BhZDpmdW5jdGlvbihBLEksZyxFLGkpe0F8PTAsSXw9MCxnfD0wLGl8PTA7dmFyIGUsbyxjPTAsYT0wO2lmKG89eSxlPXk9eSs2MyYtNjQseT15KzE2fDAsRXw9MClpZigoYT1FKy0xLShjPUUrLTEmRT8oZz4+PjApJShFPj4+MCl8MDpFKy0xJmcpfDApPj4+MD49fmc+Pj4wJiZTQigpLChhK2d8MCk+Pj4wPGk+Pj4wKXswfEEmJihDW0E+PjJdPWErZysxKSxCW2U+PjBdPTAsYz0wO2Rve0E9KChjXmEpLTF8MCk+Pj4yNCxCWyhpPUkrKGErZykrKDAtYyl8MCk+PjBdPTEyOCZBfEJbZT4+MF0mQltpPj4wXSYyNTUsQltlPj4wXT0wfEF8UVtlPj4wXSxjPWMrMXwwfXdoaWxlKCgwfGMpIT0oMHxFKSk7Yz0wfWVsc2UgYz0tMTtlbHNlIGM9LTE7cmV0dXJuIHk9bywwfGN9LF9zb2RpdW1fdW5wYWQ6ZnVuY3Rpb24oQSxJLGcsQil7QXw9MCxJfD0wLGd8PTAsQnw9MDt2YXIgRSxpLGU9MCxvPTAsYz0wLGE9MCxuPTA7aWYoaT15LEU9eT15KzYzJi02NCx5PXkrMTZ8MCxDW0U+PjJdPTAsKEIrLTF8MCk+Pj4wPGc+Pj4wKXtmb3IoZT0wLGM9MCxhPTA7ZSY9MjU1LG89MHxRW0krKGcrLTEpKygwLWMpPj4wXSxuPSg1MTErKDB8Q1tFPj4yXSkmZSs1MTEmNTExKygxMjhebykpPj4+OCYxLENbRT4+Ml09YyYwLW58Q1tFPj4yXSxhPW58MjU1JmEsKDB8KGM9YysxfDApKSE9KDB8Qik7KWV8PW87Q1tBPj4yXT1nKy0xLSgwfENbRT4+Ml0pLGU9YSstMXwwfWVsc2UgZT0tMTtyZXR1cm4geT1pLDB8ZX0sX3NvZGl1bV92ZXJzaW9uX3N0cmluZzpmdW5jdGlvbigpe3JldHVybiAzNDYxN30sZXN0YWJsaXNoU3RhY2tTcGFjZTpmdW5jdGlvbihBLEkpe3k9QXw9MH0sc3RhY2tBbGxvYzpmdW5jdGlvbihBKXt2YXIgSTtyZXR1cm4gST15LHk9MTUrKHk9eSsoQXw9MCl8MCkmLTE2LDB8SX0sc3RhY2tSZXN0b3JlOmZ1bmN0aW9uKEEpe3k9QXw9MH0sc3RhY2tTYXZlOmZ1bmN0aW9uKCl7cmV0dXJuIDB8eX19fSh7TWF0aDpNYXRoLEludDhBcnJheTpJbnQ4QXJyYXksSW50MzJBcnJheTpJbnQzMkFycmF5LFVpbnQ4QXJyYXk6VWludDhBcnJheX0se2E6aixiOmZ1bmN0aW9uKEEpe3M9QX0sYzpmdW5jdGlvbigpe3JldHVybiBzfSxkOmZ1bmN0aW9uKEEsSSxnLEIpe2ooXCJBc3NlcnRpb24gZmFpbGVkOiBcIitkKEEpK1wiLCBhdDogXCIrW0k/ZChJKTpcInVua25vd24gZmlsZW5hbWVcIixnLEI/ZChCKTpcInVua25vd24gZnVuY3Rpb25cIl0pfSxlOkJBLGY6ZnVuY3Rpb24oKXtqKCl9LGc6ZnVuY3Rpb24oQSl7cmV0dXJuIE9bQV0oKX0saDpJQSxpOmZ1bmN0aW9uKEEsSSxnKXt1LnNldCh1LnN1YmFycmF5KEksSStnKSxBKX0sajpmdW5jdGlvbihBKXt2YXIgST1JQSgpO2lmKEE+MjEzMDcwNjQzMilyZXR1cm4hMTtmb3IodmFyIGc9TWF0aC5tYXgoSSwxNjc3NzIxNik7ZzxBOylnPWc8PTUzNjg3MDkxMj9ZKDIqZywxNjc3NzIxNik6TWF0aC5taW4oWSgoMypnKzIxNDc0ODM2NDgpLzQsMTY3NzcyMTYpLDIxMzA3MDY0MzIpO3JldHVybiEhZ0EoZyl9LGs6ZnVuY3Rpb24oQSl7c3dpdGNoKEEpe2Nhc2UgMzA6cmV0dXJuIDE2Mzg0O2Nhc2UgODU6cmV0dXJuIDEzMDA0ODtjYXNlIDEzMjpjYXNlIDEzMzpjYXNlIDEyOmNhc2UgMTM3OmNhc2UgMTM4OmNhc2UgMTU6Y2FzZSAyMzU6Y2FzZSAxNjpjYXNlIDE3OmNhc2UgMTg6Y2FzZSAxOTpjYXNlIDIwOmNhc2UgMTQ5OmNhc2UgMTM6Y2FzZSAxMDpjYXNlIDIzNjpjYXNlIDE1MzpjYXNlIDk6Y2FzZSAyMTpjYXNlIDIyOmNhc2UgMTU5OmNhc2UgMTU0OmNhc2UgMTQ6Y2FzZSA3NzpjYXNlIDc4OmNhc2UgMTM5OmNhc2UgODA6Y2FzZSA4MTpjYXNlIDgyOmNhc2UgNjg6Y2FzZSA2NzpjYXNlIDE2NDpjYXNlIDExOmNhc2UgMjk6Y2FzZSA0NzpjYXNlIDQ4OmNhc2UgOTU6Y2FzZSA1MjpjYXNlIDUxOmNhc2UgNDY6cmV0dXJuIDIwMDgwOTtjYXNlIDc5OnJldHVybiAwO2Nhc2UgMjc6Y2FzZSAyNDY6Y2FzZSAxMjc6Y2FzZSAxMjg6Y2FzZSAyMzpjYXNlIDI0OmNhc2UgMTYwOmNhc2UgMTYxOmNhc2UgMTgxOmNhc2UgMTgyOmNhc2UgMjQyOmNhc2UgMTgzOmNhc2UgMTg0OmNhc2UgMjQzOmNhc2UgMjQ0OmNhc2UgMjQ1OmNhc2UgMTY1OmNhc2UgMTc4OmNhc2UgMTc5OmNhc2UgNDk6Y2FzZSA1MDpjYXNlIDE2ODpjYXNlIDE2OTpjYXNlIDE3NTpjYXNlIDE3MDpjYXNlIDE3MTpjYXNlIDE3MjpjYXNlIDk3OmNhc2UgNzY6Y2FzZSAzMjpjYXNlIDE3MzpjYXNlIDM1OnJldHVybi0xO2Nhc2UgMTc2OmNhc2UgMTc3OmNhc2UgNzpjYXNlIDE1NTpjYXNlIDg6Y2FzZSAxNTc6Y2FzZSAxMjU6Y2FzZSAxMjY6Y2FzZSA5MjpjYXNlIDkzOmNhc2UgMTI5OmNhc2UgMTMwOmNhc2UgMTMxOmNhc2UgOTQ6Y2FzZSA5MTpyZXR1cm4gMTtjYXNlIDc0OmNhc2UgNjA6Y2FzZSA2OTpjYXNlIDcwOmNhc2UgNDpyZXR1cm4gMTAyNDtjYXNlIDMxOmNhc2UgNDI6Y2FzZSA3MjpyZXR1cm4gMzI7Y2FzZSA4NzpjYXNlIDI2OmNhc2UgMzM6cmV0dXJuIDIxNDc0ODM2NDc7Y2FzZSAzNDpjYXNlIDE6cmV0dXJuIDQ3ODM5O2Nhc2UgMzg6Y2FzZSAzNjpyZXR1cm4gOTk7Y2FzZSA0MzpjYXNlIDM3OnJldHVybiAyMDQ4O2Nhc2UgMDpyZXR1cm4gMjA5NzE1MjtjYXNlIDM6cmV0dXJuIDY1NTM2O2Nhc2UgMjg6cmV0dXJuIDMyNzY4O2Nhc2UgNDQ6cmV0dXJuIDMyNzY3O2Nhc2UgNzU6cmV0dXJuIDE2Mzg0O2Nhc2UgMzk6cmV0dXJuIDFlMztjYXNlIDg5OnJldHVybiA3MDA7Y2FzZSA3MTpyZXR1cm4gMjU2O2Nhc2UgNDA6cmV0dXJuIDI1NTtjYXNlIDI6cmV0dXJuIDEwMDtjYXNlIDE4MDpyZXR1cm4gNjQ7Y2FzZSAyNTpyZXR1cm4gMjA7Y2FzZSA1OnJldHVybiAxNjtjYXNlIDY6cmV0dXJuIDY7Y2FzZSA3MzpyZXR1cm4gNDtjYXNlIDg0OnJldHVyblwib2JqZWN0XCI9PXR5cGVvZiBuYXZpZ2F0b3ImJm5hdmlnYXRvci5oYXJkd2FyZUNvbmN1cnJlbmN5fHwxfXJldHVybiBCQSgyOCksLTF9LGw6ZnVuY3Rpb24oQSl7aihcIk9PTVwiKX0sbTpaLG46JCxvOmdBLHA6QUEscTpmdW5jdGlvbigpe3ZhciBBPUFBKCk7cmV0dXJuIEkuZXh0cmFTdGFja1RyYWNlJiYoQSs9XCJcXG5cIitJLmV4dHJhU3RhY2tUcmFjZSgpKSwkKEEpfSxyOjM1NDA4fSxGKSxhQT0oSS5fX19lcnJub19sb2NhdGlvbj1jQS5fX19lcnJub19sb2NhdGlvbixJLl9fX211bGRpMz1jQS5fX19tdWxkaTMsSS5fX191cmVtZGkzPWNBLl9fX3VyZW1kaTMsSS5fYml0c2hpZnQ2NEFzaHI9Y0EuX2JpdHNoaWZ0NjRBc2hyLEkuX2JpdHNoaWZ0NjRMc2hyPWNBLl9iaXRzaGlmdDY0THNocixJLl9iaXRzaGlmdDY0U2hsPWNBLl9iaXRzaGlmdDY0U2hsLEkuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfYWJ5dGVzPWNBLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2FieXRlcyxJLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2RlY3J5cHQ9Y0EuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfZGVjcnlwdCxJLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2RlY3J5cHRfZGV0YWNoZWQ9Y0EuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfZGVjcnlwdF9kZXRhY2hlZCxJLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2VuY3J5cHQ9Y0EuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfZW5jcnlwdCxJLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2VuY3J5cHRfZGV0YWNoZWQ9Y0EuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfZW5jcnlwdF9kZXRhY2hlZCxJLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfYWJ5dGVzPWNBLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfYWJ5dGVzLEkuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9kZWNyeXB0PWNBLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfZGVjcnlwdCxJLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfZGVjcnlwdF9kZXRhY2hlZD1jQS5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX2RlY3J5cHRfZGV0YWNoZWQsSS5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX2VuY3J5cHQ9Y0EuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9lbmNyeXB0LEkuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9lbmNyeXB0X2RldGFjaGVkPWNBLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfZW5jcnlwdF9kZXRhY2hlZCxJLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfa2V5Ynl0ZXM9Y0EuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9rZXlieXRlcyxJLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfa2V5Z2VuPWNBLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfa2V5Z2VuLEkuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9tZXNzYWdlYnl0ZXNfbWF4PWNBLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfbWVzc2FnZWJ5dGVzX21heCxJLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfbnB1YmJ5dGVzPWNBLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfbnB1YmJ5dGVzLEkuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9uc2VjYnl0ZXM9Y0EuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9uc2VjYnl0ZXMsSS5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9rZXlieXRlcz1jQS5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9rZXlieXRlcyxJLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2tleWdlbj1jQS5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9rZXlnZW4sSS5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9tZXNzYWdlYnl0ZXNfbWF4PWNBLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X21lc3NhZ2VieXRlc19tYXgsSS5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9ucHViYnl0ZXM9Y0EuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfbnB1YmJ5dGVzLEkuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfbnNlY2J5dGVzPWNBLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X25zZWNieXRlcyxJLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2FieXRlcz1jQS5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9hYnl0ZXMsSS5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9kZWNyeXB0PWNBLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2RlY3J5cHQsSS5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9kZWNyeXB0X2RldGFjaGVkPWNBLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2RlY3J5cHRfZGV0YWNoZWQsSS5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9lbmNyeXB0PWNBLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2VuY3J5cHQsSS5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9lbmNyeXB0X2RldGFjaGVkPWNBLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2VuY3J5cHRfZGV0YWNoZWQsSS5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9rZXlieXRlcz1jQS5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9rZXlieXRlcyxJLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2tleWdlbj1jQS5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9rZXlnZW4sSS5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9tZXNzYWdlYnl0ZXNfbWF4PWNBLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX21lc3NhZ2VieXRlc19tYXgsSS5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9ucHViYnl0ZXM9Y0EuX2NyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfbnB1YmJ5dGVzLEkuX2NyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfbnNlY2J5dGVzPWNBLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX25zZWNieXRlcyxJLl9jcnlwdG9fYXV0aD1jQS5fY3J5cHRvX2F1dGgsSS5fY3J5cHRvX2F1dGhfYnl0ZXM9Y0EuX2NyeXB0b19hdXRoX2J5dGVzLEkuX2NyeXB0b19hdXRoX2tleWJ5dGVzPWNBLl9jcnlwdG9fYXV0aF9rZXlieXRlcyxJLl9jcnlwdG9fYXV0aF9rZXlnZW49Y0EuX2NyeXB0b19hdXRoX2tleWdlbixJLl9jcnlwdG9fYXV0aF92ZXJpZnk9Y0EuX2NyeXB0b19hdXRoX3ZlcmlmeSxJLl9jcnlwdG9fYm94X2JlZm9yZW5tPWNBLl9jcnlwdG9fYm94X2JlZm9yZW5tLEkuX2NyeXB0b19ib3hfYmVmb3Jlbm1ieXRlcz1jQS5fY3J5cHRvX2JveF9iZWZvcmVubWJ5dGVzLEkuX2NyeXB0b19ib3hfZGV0YWNoZWQ9Y0EuX2NyeXB0b19ib3hfZGV0YWNoZWQsSS5fY3J5cHRvX2JveF9kZXRhY2hlZF9hZnRlcm5tPWNBLl9jcnlwdG9fYm94X2RldGFjaGVkX2FmdGVybm0sSS5fY3J5cHRvX2JveF9lYXN5PWNBLl9jcnlwdG9fYm94X2Vhc3ksSS5fY3J5cHRvX2JveF9lYXN5X2FmdGVybm09Y0EuX2NyeXB0b19ib3hfZWFzeV9hZnRlcm5tLEkuX2NyeXB0b19ib3hfa2V5cGFpcj1jQS5fY3J5cHRvX2JveF9rZXlwYWlyLEkuX2NyeXB0b19ib3hfbWFjYnl0ZXM9Y0EuX2NyeXB0b19ib3hfbWFjYnl0ZXMsSS5fY3J5cHRvX2JveF9tZXNzYWdlYnl0ZXNfbWF4PWNBLl9jcnlwdG9fYm94X21lc3NhZ2VieXRlc19tYXgsSS5fY3J5cHRvX2JveF9ub25jZWJ5dGVzPWNBLl9jcnlwdG9fYm94X25vbmNlYnl0ZXMsSS5fY3J5cHRvX2JveF9vcGVuX2RldGFjaGVkPWNBLl9jcnlwdG9fYm94X29wZW5fZGV0YWNoZWQsSS5fY3J5cHRvX2JveF9vcGVuX2RldGFjaGVkX2FmdGVybm09Y0EuX2NyeXB0b19ib3hfb3Blbl9kZXRhY2hlZF9hZnRlcm5tLEkuX2NyeXB0b19ib3hfb3Blbl9lYXN5PWNBLl9jcnlwdG9fYm94X29wZW5fZWFzeSxJLl9jcnlwdG9fYm94X29wZW5fZWFzeV9hZnRlcm5tPWNBLl9jcnlwdG9fYm94X29wZW5fZWFzeV9hZnRlcm5tLEkuX2NyeXB0b19ib3hfcHVibGlja2V5Ynl0ZXM9Y0EuX2NyeXB0b19ib3hfcHVibGlja2V5Ynl0ZXMsSS5fY3J5cHRvX2JveF9zZWFsPWNBLl9jcnlwdG9fYm94X3NlYWwsSS5fY3J5cHRvX2JveF9zZWFsX29wZW49Y0EuX2NyeXB0b19ib3hfc2VhbF9vcGVuLEkuX2NyeXB0b19ib3hfc2VhbGJ5dGVzPWNBLl9jcnlwdG9fYm94X3NlYWxieXRlcyxJLl9jcnlwdG9fYm94X3NlY3JldGtleWJ5dGVzPWNBLl9jcnlwdG9fYm94X3NlY3JldGtleWJ5dGVzLEkuX2NyeXB0b19ib3hfc2VlZF9rZXlwYWlyPWNBLl9jcnlwdG9fYm94X3NlZWRfa2V5cGFpcixJLl9jcnlwdG9fYm94X3NlZWRieXRlcz1jQS5fY3J5cHRvX2JveF9zZWVkYnl0ZXMsSS5fY3J5cHRvX2dlbmVyaWNoYXNoPWNBLl9jcnlwdG9fZ2VuZXJpY2hhc2gsSS5fY3J5cHRvX2dlbmVyaWNoYXNoX2J5dGVzPWNBLl9jcnlwdG9fZ2VuZXJpY2hhc2hfYnl0ZXMsSS5fY3J5cHRvX2dlbmVyaWNoYXNoX2J5dGVzX21heD1jQS5fY3J5cHRvX2dlbmVyaWNoYXNoX2J5dGVzX21heCxJLl9jcnlwdG9fZ2VuZXJpY2hhc2hfYnl0ZXNfbWluPWNBLl9jcnlwdG9fZ2VuZXJpY2hhc2hfYnl0ZXNfbWluLEkuX2NyeXB0b19nZW5lcmljaGFzaF9maW5hbD1jQS5fY3J5cHRvX2dlbmVyaWNoYXNoX2ZpbmFsLEkuX2NyeXB0b19nZW5lcmljaGFzaF9pbml0PWNBLl9jcnlwdG9fZ2VuZXJpY2hhc2hfaW5pdCxJLl9jcnlwdG9fZ2VuZXJpY2hhc2hfa2V5Ynl0ZXM9Y0EuX2NyeXB0b19nZW5lcmljaGFzaF9rZXlieXRlcyxJLl9jcnlwdG9fZ2VuZXJpY2hhc2hfa2V5Ynl0ZXNfbWF4PWNBLl9jcnlwdG9fZ2VuZXJpY2hhc2hfa2V5Ynl0ZXNfbWF4LEkuX2NyeXB0b19nZW5lcmljaGFzaF9rZXlieXRlc19taW49Y0EuX2NyeXB0b19nZW5lcmljaGFzaF9rZXlieXRlc19taW4sSS5fY3J5cHRvX2dlbmVyaWNoYXNoX2tleWdlbj1jQS5fY3J5cHRvX2dlbmVyaWNoYXNoX2tleWdlbixJLl9jcnlwdG9fZ2VuZXJpY2hhc2hfc3RhdGVieXRlcz1jQS5fY3J5cHRvX2dlbmVyaWNoYXNoX3N0YXRlYnl0ZXMsSS5fY3J5cHRvX2dlbmVyaWNoYXNoX3VwZGF0ZT1jQS5fY3J5cHRvX2dlbmVyaWNoYXNoX3VwZGF0ZSxJLl9jcnlwdG9faGFzaD1jQS5fY3J5cHRvX2hhc2gsSS5fY3J5cHRvX2hhc2hfYnl0ZXM9Y0EuX2NyeXB0b19oYXNoX2J5dGVzLEkuX2NyeXB0b19rZGZfYnl0ZXNfbWF4PWNBLl9jcnlwdG9fa2RmX2J5dGVzX21heCxJLl9jcnlwdG9fa2RmX2J5dGVzX21pbj1jQS5fY3J5cHRvX2tkZl9ieXRlc19taW4sSS5fY3J5cHRvX2tkZl9jb250ZXh0Ynl0ZXM9Y0EuX2NyeXB0b19rZGZfY29udGV4dGJ5dGVzLEkuX2NyeXB0b19rZGZfZGVyaXZlX2Zyb21fa2V5PWNBLl9jcnlwdG9fa2RmX2Rlcml2ZV9mcm9tX2tleSxJLl9jcnlwdG9fa2RmX2tleWJ5dGVzPWNBLl9jcnlwdG9fa2RmX2tleWJ5dGVzLEkuX2NyeXB0b19rZGZfa2V5Z2VuPWNBLl9jcnlwdG9fa2RmX2tleWdlbixJLl9jcnlwdG9fa3hfY2xpZW50X3Nlc3Npb25fa2V5cz1jQS5fY3J5cHRvX2t4X2NsaWVudF9zZXNzaW9uX2tleXMsSS5fY3J5cHRvX2t4X2tleXBhaXI9Y0EuX2NyeXB0b19reF9rZXlwYWlyLEkuX2NyeXB0b19reF9wdWJsaWNrZXlieXRlcz1jQS5fY3J5cHRvX2t4X3B1YmxpY2tleWJ5dGVzLEkuX2NyeXB0b19reF9zZWNyZXRrZXlieXRlcz1jQS5fY3J5cHRvX2t4X3NlY3JldGtleWJ5dGVzLEkuX2NyeXB0b19reF9zZWVkX2tleXBhaXI9Y0EuX2NyeXB0b19reF9zZWVkX2tleXBhaXIsSS5fY3J5cHRvX2t4X3NlZWRieXRlcz1jQS5fY3J5cHRvX2t4X3NlZWRieXRlcyxJLl9jcnlwdG9fa3hfc2VydmVyX3Nlc3Npb25fa2V5cz1jQS5fY3J5cHRvX2t4X3NlcnZlcl9zZXNzaW9uX2tleXMsSS5fY3J5cHRvX2t4X3Nlc3Npb25rZXlieXRlcz1jQS5fY3J5cHRvX2t4X3Nlc3Npb25rZXlieXRlcyxJLl9jcnlwdG9fcHdoYXNoPWNBLl9jcnlwdG9fcHdoYXNoLEkuX2NyeXB0b19wd2hhc2hfYWxnX2FyZ29uMmkxMz1jQS5fY3J5cHRvX3B3aGFzaF9hbGdfYXJnb24yaTEzLEkuX2NyeXB0b19wd2hhc2hfYWxnX2FyZ29uMmlkMTM9Y0EuX2NyeXB0b19wd2hhc2hfYWxnX2FyZ29uMmlkMTMsSS5fY3J5cHRvX3B3aGFzaF9hbGdfZGVmYXVsdD1jQS5fY3J5cHRvX3B3aGFzaF9hbGdfZGVmYXVsdCxJLl9jcnlwdG9fcHdoYXNoX2J5dGVzX21heD1jQS5fY3J5cHRvX3B3aGFzaF9ieXRlc19tYXgsSS5fY3J5cHRvX3B3aGFzaF9ieXRlc19taW49Y0EuX2NyeXB0b19wd2hhc2hfYnl0ZXNfbWluLEkuX2NyeXB0b19wd2hhc2hfbWVtbGltaXRfaW50ZXJhY3RpdmU9Y0EuX2NyeXB0b19wd2hhc2hfbWVtbGltaXRfaW50ZXJhY3RpdmUsSS5fY3J5cHRvX3B3aGFzaF9tZW1saW1pdF9tYXg9Y0EuX2NyeXB0b19wd2hhc2hfbWVtbGltaXRfbWF4LEkuX2NyeXB0b19wd2hhc2hfbWVtbGltaXRfbWluPWNBLl9jcnlwdG9fcHdoYXNoX21lbWxpbWl0X21pbixJLl9jcnlwdG9fcHdoYXNoX21lbWxpbWl0X21vZGVyYXRlPWNBLl9jcnlwdG9fcHdoYXNoX21lbWxpbWl0X21vZGVyYXRlLEkuX2NyeXB0b19wd2hhc2hfbWVtbGltaXRfc2Vuc2l0aXZlPWNBLl9jcnlwdG9fcHdoYXNoX21lbWxpbWl0X3NlbnNpdGl2ZSxJLl9jcnlwdG9fcHdoYXNoX29wc2xpbWl0X2ludGVyYWN0aXZlPWNBLl9jcnlwdG9fcHdoYXNoX29wc2xpbWl0X2ludGVyYWN0aXZlLEkuX2NyeXB0b19wd2hhc2hfb3BzbGltaXRfbWF4PWNBLl9jcnlwdG9fcHdoYXNoX29wc2xpbWl0X21heCxJLl9jcnlwdG9fcHdoYXNoX29wc2xpbWl0X21pbj1jQS5fY3J5cHRvX3B3aGFzaF9vcHNsaW1pdF9taW4sSS5fY3J5cHRvX3B3aGFzaF9vcHNsaW1pdF9tb2RlcmF0ZT1jQS5fY3J5cHRvX3B3aGFzaF9vcHNsaW1pdF9tb2RlcmF0ZSxJLl9jcnlwdG9fcHdoYXNoX29wc2xpbWl0X3NlbnNpdGl2ZT1jQS5fY3J5cHRvX3B3aGFzaF9vcHNsaW1pdF9zZW5zaXRpdmUsSS5fY3J5cHRvX3B3aGFzaF9wYXNzd2RfbWF4PWNBLl9jcnlwdG9fcHdoYXNoX3Bhc3N3ZF9tYXgsSS5fY3J5cHRvX3B3aGFzaF9wYXNzd2RfbWluPWNBLl9jcnlwdG9fcHdoYXNoX3Bhc3N3ZF9taW4sSS5fY3J5cHRvX3B3aGFzaF9zYWx0Ynl0ZXM9Y0EuX2NyeXB0b19wd2hhc2hfc2FsdGJ5dGVzLEkuX2NyeXB0b19wd2hhc2hfc3RyPWNBLl9jcnlwdG9fcHdoYXNoX3N0cixJLl9jcnlwdG9fcHdoYXNoX3N0cl9hbGc9Y0EuX2NyeXB0b19wd2hhc2hfc3RyX2FsZyxJLl9jcnlwdG9fcHdoYXNoX3N0cl9uZWVkc19yZWhhc2g9Y0EuX2NyeXB0b19wd2hhc2hfc3RyX25lZWRzX3JlaGFzaCxJLl9jcnlwdG9fcHdoYXNoX3N0cl92ZXJpZnk9Y0EuX2NyeXB0b19wd2hhc2hfc3RyX3ZlcmlmeSxJLl9jcnlwdG9fcHdoYXNoX3N0cmJ5dGVzPWNBLl9jcnlwdG9fcHdoYXNoX3N0cmJ5dGVzLEkuX2NyeXB0b19wd2hhc2hfc3RycHJlZml4PWNBLl9jcnlwdG9fcHdoYXNoX3N0cnByZWZpeCxJLl9jcnlwdG9fc2NhbGFybXVsdD1jQS5fY3J5cHRvX3NjYWxhcm11bHQsSS5fY3J5cHRvX3NjYWxhcm11bHRfYmFzZT1jQS5fY3J5cHRvX3NjYWxhcm11bHRfYmFzZSxJLl9jcnlwdG9fc2NhbGFybXVsdF9ieXRlcz1jQS5fY3J5cHRvX3NjYWxhcm11bHRfYnl0ZXMsSS5fY3J5cHRvX3NjYWxhcm11bHRfc2NhbGFyYnl0ZXM9Y0EuX2NyeXB0b19zY2FsYXJtdWx0X3NjYWxhcmJ5dGVzLEkuX2NyeXB0b19zZWNyZXRib3hfZGV0YWNoZWQ9Y0EuX2NyeXB0b19zZWNyZXRib3hfZGV0YWNoZWQsSS5fY3J5cHRvX3NlY3JldGJveF9lYXN5PWNBLl9jcnlwdG9fc2VjcmV0Ym94X2Vhc3ksSS5fY3J5cHRvX3NlY3JldGJveF9rZXlieXRlcz1jQS5fY3J5cHRvX3NlY3JldGJveF9rZXlieXRlcyxJLl9jcnlwdG9fc2VjcmV0Ym94X2tleWdlbj1jQS5fY3J5cHRvX3NlY3JldGJveF9rZXlnZW4sSS5fY3J5cHRvX3NlY3JldGJveF9tYWNieXRlcz1jQS5fY3J5cHRvX3NlY3JldGJveF9tYWNieXRlcyxJLl9jcnlwdG9fc2VjcmV0Ym94X21lc3NhZ2VieXRlc19tYXg9Y0EuX2NyeXB0b19zZWNyZXRib3hfbWVzc2FnZWJ5dGVzX21heCxJLl9jcnlwdG9fc2VjcmV0Ym94X25vbmNlYnl0ZXM9Y0EuX2NyeXB0b19zZWNyZXRib3hfbm9uY2VieXRlcyxJLl9jcnlwdG9fc2VjcmV0Ym94X29wZW5fZGV0YWNoZWQ9Y0EuX2NyeXB0b19zZWNyZXRib3hfb3Blbl9kZXRhY2hlZCxJLl9jcnlwdG9fc2VjcmV0Ym94X29wZW5fZWFzeT1jQS5fY3J5cHRvX3NlY3JldGJveF9vcGVuX2Vhc3ksSS5fY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9hYnl0ZXM9Y0EuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfYWJ5dGVzLEkuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfaGVhZGVyYnl0ZXM9Y0EuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfaGVhZGVyYnl0ZXMsSS5fY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9pbml0X3B1bGw9Y0EuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfaW5pdF9wdWxsLEkuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfaW5pdF9wdXNoPWNBLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X2luaXRfcHVzaCxJLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X2tleWJ5dGVzPWNBLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X2tleWJ5dGVzLEkuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfa2V5Z2VuPWNBLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X2tleWdlbixJLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X21lc3NhZ2VieXRlc19tYXg9Y0EuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfbWVzc2FnZWJ5dGVzX21heCxJLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X3B1bGw9Y0EuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfcHVsbCxJLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X3B1c2g9Y0EuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfcHVzaCxJLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X3Jla2V5PWNBLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X3Jla2V5LEkuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfc3RhdGVieXRlcz1jQS5fY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9zdGF0ZWJ5dGVzLEkuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfdGFnX2ZpbmFsPWNBLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X3RhZ19maW5hbCxJLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X3RhZ19tZXNzYWdlPWNBLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X3RhZ19tZXNzYWdlLEkuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfdGFnX3B1c2g9Y0EuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfdGFnX3B1c2gsSS5fY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV90YWdfcmVrZXk9Y0EuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfdGFnX3Jla2V5LEkuX2NyeXB0b19zaG9ydGhhc2g9Y0EuX2NyeXB0b19zaG9ydGhhc2gsSS5fY3J5cHRvX3Nob3J0aGFzaF9ieXRlcz1jQS5fY3J5cHRvX3Nob3J0aGFzaF9ieXRlcyxJLl9jcnlwdG9fc2hvcnRoYXNoX2tleWJ5dGVzPWNBLl9jcnlwdG9fc2hvcnRoYXNoX2tleWJ5dGVzLEkuX2NyeXB0b19zaG9ydGhhc2hfa2V5Z2VuPWNBLl9jcnlwdG9fc2hvcnRoYXNoX2tleWdlbixJLl9jcnlwdG9fc2lnbj1jQS5fY3J5cHRvX3NpZ24sSS5fY3J5cHRvX3NpZ25fYnl0ZXM9Y0EuX2NyeXB0b19zaWduX2J5dGVzLEkuX2NyeXB0b19zaWduX2RldGFjaGVkPWNBLl9jcnlwdG9fc2lnbl9kZXRhY2hlZCxJLl9jcnlwdG9fc2lnbl9lZDI1NTE5X3BrX3RvX2N1cnZlMjU1MTk9Y0EuX2NyeXB0b19zaWduX2VkMjU1MTlfcGtfdG9fY3VydmUyNTUxOSxJLl9jcnlwdG9fc2lnbl9lZDI1NTE5X3NrX3RvX2N1cnZlMjU1MTk9Y0EuX2NyeXB0b19zaWduX2VkMjU1MTlfc2tfdG9fY3VydmUyNTUxOSxJLl9jcnlwdG9fc2lnbl9maW5hbF9jcmVhdGU9Y0EuX2NyeXB0b19zaWduX2ZpbmFsX2NyZWF0ZSxJLl9jcnlwdG9fc2lnbl9maW5hbF92ZXJpZnk9Y0EuX2NyeXB0b19zaWduX2ZpbmFsX3ZlcmlmeSxJLl9jcnlwdG9fc2lnbl9pbml0PWNBLl9jcnlwdG9fc2lnbl9pbml0LEkuX2NyeXB0b19zaWduX2tleXBhaXI9Y0EuX2NyeXB0b19zaWduX2tleXBhaXIsSS5fY3J5cHRvX3NpZ25fbWVzc2FnZWJ5dGVzX21heD1jQS5fY3J5cHRvX3NpZ25fbWVzc2FnZWJ5dGVzX21heCxJLl9jcnlwdG9fc2lnbl9vcGVuPWNBLl9jcnlwdG9fc2lnbl9vcGVuLEkuX2NyeXB0b19zaWduX3B1YmxpY2tleWJ5dGVzPWNBLl9jcnlwdG9fc2lnbl9wdWJsaWNrZXlieXRlcyxJLl9jcnlwdG9fc2lnbl9zZWNyZXRrZXlieXRlcz1jQS5fY3J5cHRvX3NpZ25fc2VjcmV0a2V5Ynl0ZXMsSS5fY3J5cHRvX3NpZ25fc2VlZF9rZXlwYWlyPWNBLl9jcnlwdG9fc2lnbl9zZWVkX2tleXBhaXIsSS5fY3J5cHRvX3NpZ25fc2VlZGJ5dGVzPWNBLl9jcnlwdG9fc2lnbl9zZWVkYnl0ZXMsSS5fY3J5cHRvX3NpZ25fc3RhdGVieXRlcz1jQS5fY3J5cHRvX3NpZ25fc3RhdGVieXRlcyxJLl9jcnlwdG9fc2lnbl91cGRhdGU9Y0EuX2NyeXB0b19zaWduX3VwZGF0ZSxJLl9jcnlwdG9fc2lnbl92ZXJpZnlfZGV0YWNoZWQ9Y0EuX2NyeXB0b19zaWduX3ZlcmlmeV9kZXRhY2hlZCxJLl9lbXNjcmlwdGVuX2dldF9zYnJrX3B0cj1jQS5fZW1zY3JpcHRlbl9nZXRfc2Jya19wdHIsSS5fZW1zY3JpcHRlbl9yZXBsYWNlX21lbW9yeT1jQS5fZW1zY3JpcHRlbl9yZXBsYWNlX21lbW9yeSk7aWYoSS5fZnJlZT1jQS5fZnJlZSxJLl9pNjRBZGQ9Y0EuX2k2NEFkZCxJLl9pNjRTdWJ0cmFjdD1jQS5faTY0U3VidHJhY3QsSS5fbWFsbG9jPWNBLl9tYWxsb2MsSS5fbWVtY3B5PWNBLl9tZW1jcHksSS5fbWVtbW92ZT1jQS5fbWVtbW92ZSxJLl9tZW1zZXQ9Y0EuX21lbXNldCxJLl9yYW5kb21ieXRlcz1jQS5fcmFuZG9tYnl0ZXMsSS5fcmFuZG9tYnl0ZXNfYnVmPWNBLl9yYW5kb21ieXRlc19idWYsSS5fcmFuZG9tYnl0ZXNfYnVmX2RldGVybWluaXN0aWM9Y0EuX3JhbmRvbWJ5dGVzX2J1Zl9kZXRlcm1pbmlzdGljLEkuX3JhbmRvbWJ5dGVzX2Nsb3NlPWNBLl9yYW5kb21ieXRlc19jbG9zZSxJLl9yYW5kb21ieXRlc19yYW5kb209Y0EuX3JhbmRvbWJ5dGVzX3JhbmRvbSxJLl9yYW5kb21ieXRlc19zZWVkYnl0ZXM9Y0EuX3JhbmRvbWJ5dGVzX3NlZWRieXRlcyxJLl9yYW5kb21ieXRlc19zdGlyPWNBLl9yYW5kb21ieXRlc19zdGlyLEkuX3JhbmRvbWJ5dGVzX3VuaWZvcm09Y0EuX3JhbmRvbWJ5dGVzX3VuaWZvcm0sSS5fc29kaXVtX2Jhc2U2NDJiaW49Y0EuX3NvZGl1bV9iYXNlNjQyYmluLEkuX3NvZGl1bV9iYXNlNjRfZW5jb2RlZF9sZW49Y0EuX3NvZGl1bV9iYXNlNjRfZW5jb2RlZF9sZW4sSS5fc29kaXVtX2JpbjJiYXNlNjQ9Y0EuX3NvZGl1bV9iaW4yYmFzZTY0LEkuX3NvZGl1bV9iaW4yaGV4PWNBLl9zb2RpdW1fYmluMmhleCxJLl9zb2RpdW1faGV4MmJpbj1jQS5fc29kaXVtX2hleDJiaW4sSS5fc29kaXVtX2luaXQ9Y0EuX3NvZGl1bV9pbml0LEkuX3NvZGl1bV9saWJyYXJ5X21pbmltYWw9Y0EuX3NvZGl1bV9saWJyYXJ5X21pbmltYWwsSS5fc29kaXVtX2xpYnJhcnlfdmVyc2lvbl9tYWpvcj1jQS5fc29kaXVtX2xpYnJhcnlfdmVyc2lvbl9tYWpvcixJLl9zb2RpdW1fbGlicmFyeV92ZXJzaW9uX21pbm9yPWNBLl9zb2RpdW1fbGlicmFyeV92ZXJzaW9uX21pbm9yLEkuX3NvZGl1bV9wYWQ9Y0EuX3NvZGl1bV9wYWQsSS5fc29kaXVtX3VucGFkPWNBLl9zb2RpdW1fdW5wYWQsSS5fc29kaXVtX3ZlcnNpb25fc3RyaW5nPWNBLl9zb2RpdW1fdmVyc2lvbl9zdHJpbmcsSS5lc3RhYmxpc2hTdGFja1NwYWNlPWNBLmVzdGFibGlzaFN0YWNrU3BhY2UsSS5zdGFja0FsbG9jPWNBLnN0YWNrQWxsb2MsSS5zdGFja1Jlc3RvcmU9Y0Euc3RhY2tSZXN0b3JlLEkuc3RhY2tTYXZlPWNBLnN0YWNrU2F2ZSxJLmFzbT1jQSxJLnNldFZhbHVlPWZ1bmN0aW9uKEEsSSxnLEIpe3N3aXRjaChcIipcIj09PShnPWd8fFwiaThcIikuY2hhckF0KGcubGVuZ3RoLTEpJiYoZz1cImkzMlwiKSxnKXtjYXNlXCJpMVwiOmNhc2VcImk4XCI6cFtBPj4wXT1JO2JyZWFrO2Nhc2VcImkxNlwiOkhbQT4+MV09STticmVhaztjYXNlXCJpMzJcIjprW0E+PjJdPUk7YnJlYWs7Y2FzZVwiaTY0XCI6cT1bST4+PjAsKFQ9SSwrUihUKT49MT9UPjA/KDB8TCgrbShULzQyOTQ5NjcyOTYpLDQyOTQ5NjcyOTUpKT4+PjA6fn4rTigoVC0rKH5+VD4+PjApKS80Mjk0OTY3Mjk2KT4+PjA6MCldLGtbQT4+Ml09cVswXSxrW0ErND4+Ml09cVsxXTticmVhaztjYXNlXCJmbG9hdFwiOmxbQT4+Ml09STticmVhaztjYXNlXCJkb3VibGVcIjpfW0E+PjNdPUk7YnJlYWs7ZGVmYXVsdDpqKFwiaW52YWxpZCB0eXBlIGZvciBzZXRWYWx1ZTogXCIrZyl9fSxJLmdldFZhbHVlPWZ1bmN0aW9uKEEsSSxnKXtzd2l0Y2goXCIqXCI9PT0oST1JfHxcImk4XCIpLmNoYXJBdChJLmxlbmd0aC0xKSYmKEk9XCJpMzJcIiksSSl7Y2FzZVwiaTFcIjpjYXNlXCJpOFwiOnJldHVybiBwW0E+PjBdO2Nhc2VcImkxNlwiOnJldHVybiBIW0E+PjFdO2Nhc2VcImkzMlwiOmNhc2VcImk2NFwiOnJldHVybiBrW0E+PjJdO2Nhc2VcImZsb2F0XCI6cmV0dXJuIGxbQT4+Ml07Y2FzZVwiZG91YmxlXCI6cmV0dXJuIF9bQT4+M107ZGVmYXVsdDpqKFwiaW52YWxpZCB0eXBlIGZvciBnZXRWYWx1ZTogXCIrSSl9cmV0dXJuIG51bGx9LEkuVVRGOFRvU3RyaW5nPWQsVilpZihXKFYpfHwoZUE9VixWPUkubG9jYXRlRmlsZT9JLmxvY2F0ZUZpbGUoZUEsZik6ZitlQSksb3x8aSl7dmFyIG5BPW4oVik7dS5zZXQobkEsOCl9ZWxzZXt4KyssSS5tb25pdG9yUnVuRGVwZW5kZW5jaWVzJiZJLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMoeCk7dmFyIHJBPWZ1bmN0aW9uKEEpe0EuYnl0ZUxlbmd0aCYmKEE9bmV3IFVpbnQ4QXJyYXkoQSkpLHUuc2V0KEEsOCksSS5tZW1vcnlJbml0aWFsaXplclJlcXVlc3QmJmRlbGV0ZSBJLm1lbW9yeUluaXRpYWxpemVyUmVxdWVzdC5yZXNwb25zZSxmdW5jdGlvbihBKXtpZih4LS0sSS5tb25pdG9yUnVuRGVwZW5kZW5jaWVzJiZJLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMoeCksMD09eCYmKG51bGwhPT1LJiYoY2xlYXJJbnRlcnZhbChLKSxLPW51bGwpLFgpKXt2YXIgZz1YO1g9bnVsbCxnKCl9fSgpfSx0QT1mdW5jdGlvbigpe2EoVixyQSxmdW5jdGlvbigpe3Rocm93XCJjb3VsZCBub3QgbG9hZCBtZW1vcnkgaW5pdGlhbGl6ZXIgXCIrVn0pfSxmQT1pQShWKTtpZihmQSlyQShmQS5idWZmZXIpO2Vsc2UgaWYoSS5tZW1vcnlJbml0aWFsaXplclJlcXVlc3Qpe3ZhciB3QT1mdW5jdGlvbigpe3ZhciBBPUkubWVtb3J5SW5pdGlhbGl6ZXJSZXF1ZXN0LGc9QS5yZXNwb25zZTtpZigyMDAhPT1BLnN0YXR1cyYmMCE9PUEuc3RhdHVzKXt2YXIgQj1pQShJLm1lbW9yeUluaXRpYWxpemVyUmVxdWVzdFVSTCk7aWYoIUIpcmV0dXJuIHZvaWQgdEEoKTtnPUIuYnVmZmVyfXJBKGcpfTtJLm1lbW9yeUluaXRpYWxpemVyUmVxdWVzdC5yZXNwb25zZT9zZXRUaW1lb3V0KHdBLDApOkkubWVtb3J5SW5pdGlhbGl6ZXJSZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsd0EpfWVsc2UgdEEoKX1mdW5jdGlvbiB5QShBKXtmdW5jdGlvbiBnKCl7b0F8fChvQT0hMCxofHwoVShiKSxVKEopLEkub25SdW50aW1lSW5pdGlhbGl6ZWQmJkkub25SdW50aW1lSW5pdGlhbGl6ZWQoKSxmdW5jdGlvbigpe2lmKEkucG9zdFJ1bilmb3IoXCJmdW5jdGlvblwiPT10eXBlb2YgSS5wb3N0UnVuJiYoSS5wb3N0UnVuPVtJLnBvc3RSdW5dKTtJLnBvc3RSdW4ubGVuZ3RoOylBPUkucG9zdFJ1bi5zaGlmdCgpLFAudW5zaGlmdChBKTt2YXIgQTtVKFApfSgpKSl9QT1BfHxlLHg+MHx8KGZ1bmN0aW9uKCl7aWYoSS5wcmVSdW4pZm9yKFwiZnVuY3Rpb25cIj09dHlwZW9mIEkucHJlUnVuJiYoSS5wcmVSdW49W0kucHJlUnVuXSk7SS5wcmVSdW4ubGVuZ3RoOylBPUkucHJlUnVuLnNoaWZ0KCksdi51bnNoaWZ0KEEpO3ZhciBBO1Uodil9KCkseD4wfHwoSS5zZXRTdGF0dXM/KEkuc2V0U3RhdHVzKFwiUnVubmluZy4uLlwiKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7c2V0VGltZW91dChmdW5jdGlvbigpe0kuc2V0U3RhdHVzKFwiXCIpfSwxKSxnKCl9LDEpKTpnKCkpKX1pZihYPWZ1bmN0aW9uIEEoKXtvQXx8eUEoKSxvQXx8KFg9QSl9LEkucnVuPXlBLEkucHJlSW5pdClmb3IoXCJmdW5jdGlvblwiPT10eXBlb2YgSS5wcmVJbml0JiYoSS5wcmVJbml0PVtJLnByZUluaXRdKTtJLnByZUluaXQubGVuZ3RoPjA7KUkucHJlSW5pdC5wb3AoKSgpO3lBKCksT2JqZWN0LmtleXMoQikuZm9yRWFjaChmdW5jdGlvbihBKXtcImdldFJhbmRvbVZhbHVlXCIhPT1BJiZkZWxldGUgQltBXX0pLE9iamVjdC5rZXlzKEkpLmZvckVhY2goZnVuY3Rpb24oQSl7QltBXT1JW0FdfSl9O3ZhciBnLEM9dm9pZCAwIT09Qz9DOnt9LFE9e307Zm9yKGcgaW4gQylDLmhhc093blByb3BlcnR5KGcpJiYoUVtnXT1DW2ddKTt2YXIgRSxpLGU9W10sbz0hMSxjPSExLGE9ITE7bz1cIm9iamVjdFwiPT10eXBlb2Ygd2luZG93LGM9XCJmdW5jdGlvblwiPT10eXBlb2YgaW1wb3J0U2NyaXB0cyxFPVwib2JqZWN0XCI9PXR5cGVvZiBwcm9jZXNzJiZcIm9iamVjdFwiPT10eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyYmXCJzdHJpbmdcIj09dHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSxhPUUmJiFvJiYhYyxpPSFvJiYhYSYmIWM7dmFyIG4scix0LGYsdz1cIlwiO2E/KHc9X19kaXJuYW1lK1wiL1wiLG49ZnVuY3Rpb24oQSxJKXt2YXIgZztyZXR1cm4oZz1lQShBKSl8fCh0fHwodD1yZXF1aXJlKFwiZnNcIikpLGZ8fChmPXJlcXVpcmUoXCJwYXRoXCIpKSxBPWYubm9ybWFsaXplKEEpLGc9dC5yZWFkRmlsZVN5bmMoQSkpLEk/ZzpnLnRvU3RyaW5nKCl9LHI9ZnVuY3Rpb24oQSl7dmFyIEk9bihBLCEwKTtyZXR1cm4gSS5idWZmZXJ8fChJPW5ldyBVaW50OEFycmF5KEkpKSxIKEkuYnVmZmVyKSxJfSxwcm9jZXNzLmFyZ3YubGVuZ3RoPjEmJnByb2Nlc3MuYXJndlsxXS5yZXBsYWNlKC9cXFxcL2csXCIvXCIpLGU9cHJvY2Vzcy5hcmd2LnNsaWNlKDIpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJihtb2R1bGUuZXhwb3J0cz1DKSxwcm9jZXNzLm9uKFwidW5oYW5kbGVkUmVqZWN0aW9uXCIseiksQy5pbnNwZWN0PWZ1bmN0aW9uKCl7cmV0dXJuXCJbRW1zY3JpcHRlbiBNb2R1bGUgb2JqZWN0XVwifSk6aT8oXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHJlYWQmJihuPWZ1bmN0aW9uKEEpe3ZhciBJPWVBKEEpO3JldHVybiBJP0VBKEkpOnJlYWQoQSl9KSxyPWZ1bmN0aW9uKEEpe3ZhciBJO3JldHVybihJPWVBKEEpKT9JOlwiZnVuY3Rpb25cIj09dHlwZW9mIHJlYWRidWZmZXI/bmV3IFVpbnQ4QXJyYXkocmVhZGJ1ZmZlcihBKSk6KEgoXCJvYmplY3RcIj09dHlwZW9mKEk9cmVhZChBLFwiYmluYXJ5XCIpKSksSSl9LFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzY3JpcHRBcmdzP2U9c2NyaXB0QXJnczp2b2lkIDAhPT1hcmd1bWVudHMmJihlPWFyZ3VtZW50cyksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHByaW50JiYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGNvbnNvbGUmJihjb25zb2xlPXt9KSxjb25zb2xlLmxvZz1wcmludCxjb25zb2xlLndhcm49Y29uc29sZS5lcnJvcj1cInVuZGVmaW5lZFwiIT10eXBlb2YgcHJpbnRFcnI/cHJpbnRFcnI6cHJpbnQpKToob3x8YykmJihjP3c9c2VsZi5sb2NhdGlvbi5ocmVmOmRvY3VtZW50LmN1cnJlbnRTY3JpcHQmJih3PWRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjKSx3PTAhPT13LmluZGV4T2YoXCJibG9iOlwiKT93LnN1YnN0cigwLHcubGFzdEluZGV4T2YoXCIvXCIpKzEpOlwiXCIsbj1mdW5jdGlvbihBKXt0cnl7dmFyIEk9bmV3IFhNTEh0dHBSZXF1ZXN0O3JldHVybiBJLm9wZW4oXCJHRVRcIixBLCExKSxJLnNlbmQobnVsbCksSS5yZXNwb25zZVRleHR9Y2F0Y2goSSl7dmFyIGc9ZUEoQSk7aWYoZylyZXR1cm4gRUEoZyk7dGhyb3cgSX19LGMmJihyPWZ1bmN0aW9uKEEpe3RyeXt2YXIgST1uZXcgWE1MSHR0cFJlcXVlc3Q7cmV0dXJuIEkub3BlbihcIkdFVFwiLEEsITEpLEkucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIixJLnNlbmQobnVsbCksbmV3IFVpbnQ4QXJyYXkoSS5yZXNwb25zZSl9Y2F0Y2goSSl7dmFyIGc9ZUEoQSk7aWYoZylyZXR1cm4gZzt0aHJvdyBJfX0pKTt2YXIgeT1DLnByaW50fHx2b2lkIDAscz1DLnByaW50RXJyfHx2b2lkIDA7Zm9yKGcgaW4gUSlRLmhhc093blByb3BlcnR5KGcpJiYoQ1tnXT1RW2ddKTtRPW51bGwsQy5hcmd1bWVudHMmJihlPUMuYXJndW1lbnRzKSxDLnRoaXNQcm9ncmFtJiZDLnRoaXNQcm9ncmFtLEMucXVpdCYmQy5xdWl0O3ZhciBoLEQsRj17XCJmNjQtcmVtXCI6ZnVuY3Rpb24oQSxJKXtyZXR1cm4gQSVJfSxkZWJ1Z2dlcjpmdW5jdGlvbigpe319O25ldyBBcnJheSg4KSxDLndhc21CaW5hcnkmJihoPUMud2FzbUJpbmFyeSksQy5ub0V4aXRSdW50aW1lJiZDLm5vRXhpdFJ1bnRpbWUsXCJvYmplY3RcIiE9dHlwZW9mIFdlYkFzc2VtYmx5JiZzKFwibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZFwiKTt2YXIgcD1uZXcgV2ViQXNzZW1ibHkuVGFibGUoe2luaXRpYWw6MCxtYXhpbXVtOjAsZWxlbWVudDpcImFueWZ1bmNcIn0pLHU9ITE7ZnVuY3Rpb24gSChBLEkpe0F8fHooXCJBc3NlcnRpb24gZmFpbGVkOiBcIitJKX12YXIgayxsLF8sRyxkLFksTSxTPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBUZXh0RGVjb2Rlcj9uZXcgVGV4dERlY29kZXIoXCJ1dGY4XCIpOnZvaWQgMDtmdW5jdGlvbiBVKEEsSSl7cmV0dXJuIEE/ZnVuY3Rpb24oQSxJLGcpe2Zvcih2YXIgQj1JK2csQz1JO0FbQ10mJiEoQz49Qik7KSsrQztpZihDLUk+MTYmJkEuc3ViYXJyYXkmJlMpcmV0dXJuIFMuZGVjb2RlKEEuc3ViYXJyYXkoSSxDKSk7Zm9yKHZhciBRPVwiXCI7STxDOyl7dmFyIEU9QVtJKytdO2lmKDEyOCZFKXt2YXIgaT02MyZBW0krK107aWYoMTkyIT0oMjI0JkUpKXt2YXIgZT02MyZBW0krK107aWYoKEU9MjI0PT0oMjQwJkUpPygxNSZFKTw8MTJ8aTw8NnxlOig3JkUpPDwxOHxpPDwxMnxlPDw2fDYzJkFbSSsrXSk8NjU1MzYpUSs9U3RyaW5nLmZyb21DaGFyQ29kZShFKTtlbHNle3ZhciBvPUUtNjU1MzY7USs9U3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NnxvPj4xMCw1NjMyMHwxMDIzJm8pfX1lbHNlIFErPVN0cmluZy5mcm9tQ2hhckNvZGUoKDMxJkUpPDw2fGkpfWVsc2UgUSs9U3RyaW5nLmZyb21DaGFyQ29kZShFKX1yZXR1cm4gUX0oXyxBLEkpOlwiXCJ9ZnVuY3Rpb24gdihBLEkpe3JldHVybiBBJUk+MCYmKEErPUktQSVJKSxBfWZ1bmN0aW9uIGIoQSl7az1BLEMuSEVBUDg9bD1uZXcgSW50OEFycmF5KEEpLEMuSEVBUDE2PUc9bmV3IEludDE2QXJyYXkoQSksQy5IRUFQMzI9ZD1uZXcgSW50MzJBcnJheShBKSxDLkhFQVBVOD1fPW5ldyBVaW50OEFycmF5KEEpLEMuSEVBUFUxNj1uZXcgVWludDE2QXJyYXkoQSksQy5IRUFQVTMyPW5ldyBVaW50MzJBcnJheShBKSxDLkhFQVBGMzI9WT1uZXcgRmxvYXQzMkFycmF5KEEpLEMuSEVBUEY2ND1NPW5ldyBGbG9hdDY0QXJyYXkoQSl9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFRleHREZWNvZGVyJiZuZXcgVGV4dERlY29kZXIoXCJ1dGYtMTZsZVwiKTt2YXIgSj1DLlRPVEFMX01FTU9SWXx8MTY3NzcyMTY7ZnVuY3Rpb24gUChBKXtmb3IoO0EubGVuZ3RoPjA7KXt2YXIgST1BLnNoaWZ0KCk7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgSSl7dmFyIGc9SS5mdW5jO1wibnVtYmVyXCI9PXR5cGVvZiBnP3ZvaWQgMD09PUkuYXJnP0MuZHluQ2FsbF92KGcpOkMuZHluQ2FsbF92aShnLEkuYXJnKTpnKHZvaWQgMD09PUkuYXJnP251bGw6SS5hcmcpfWVsc2UgSSgpfX0oRD1DLndhc21NZW1vcnk/Qy53YXNtTWVtb3J5Om5ldyBXZWJBc3NlbWJseS5NZW1vcnkoe2luaXRpYWw6Si82NTUzNn0pKSYmKGs9RC5idWZmZXIpLEo9ay5ieXRlTGVuZ3RoLGIoayksZFs5MzEyXT01MjgwMzIwO3ZhciBSPVtdLE49W10sbT1bXSxMPVtdLHg9TWF0aC5hYnMsSz1NYXRoLmNlaWwsWD1NYXRoLmZsb29yLGo9TWF0aC5taW4sVD0wLHE9bnVsbCxWPW51bGw7ZnVuY3Rpb24geihBKXt0aHJvdyBDLm9uQWJvcnQmJkMub25BYm9ydChBKSx5KEErPVwiXCIpLHMoQSksdT0hMCxcImFib3J0KFwiK0ErXCIpLiBCdWlsZCB3aXRoIC1zIEFTU0VSVElPTlM9MSBmb3IgbW9yZSBpbmZvLlwifUMucHJlbG9hZGVkSW1hZ2VzPXt9LEMucHJlbG9hZGVkQXVkaW9zPXt9O3ZhciBXPVwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiO2Z1bmN0aW9uIE8oQSl7cmV0dXJuIFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aD9BLnN0YXJ0c1dpdGgoVyk6MD09PUEuaW5kZXhPZihXKX12YXIgWiwkLEFBLElBPVwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LEFHRnpiUUVBQUFBQnhRTTBZQVIvZjM5L0FHQUFBR0FCZndGL1lBQUJmMkFEZjM5L0FYOWdBWDhBWUFKL2Z3QmdDWDkvZjM5K2YzNS9md0YvWUFKL2ZnQmdDSDkvZjM1L2ZuOS9BWDlnQ0g5L2ZuOS9mbjkvQVg5Z0NYOS9mMzkrZjM1L2Z3QmdCSDkvZm44QVlBUi9mMzUvQVg5Z0FuOS9BWDlnQm45L2YzNS9md0YvWUFkL2YzOStmMzkvQVg5Z0JYOS9mbjkvQVg5Z0JuOS9mbjkvZndGL1lBTi9mMzhBWUFGL0FYNWdBMzkvZndGK1lBUi9mMzkvQVg5Z0EzOS9mZ0YvWUFKK2Z3RitZQU4vZjM0QVlBVi9mMzkvZndCZ0JuOS9mMzkrZndCZ0JYOS9mMzkvQVg5Z0JuOS9mMzkvZndGL1lBSitmZ0YrWUF4L2YzOS9mMzkvZjM5L2YzOEJmMkFIZjM1L2ZuOStmd0YvWUFWL2YzNStmd0YvWUFSL2ZuOS9BWDlnQ0g5K2YzNS9mbjkvQVg5Z0JuOS9mbjUvZndGL1lBTi9mbjhCZjJBSWYzOS9mMzUvZm44QmYyQUlmMzkvZjM5K2YzNEJmMkFGZjM5L2ZuOEJmMkFHZjM5L2ZuOS9BR0FGZjM5L2ZuOEFZQVYvZjM1L2Z3QmdCSDkrZjM4QVlBWi9mMzUvZjM4QVlBUi9mMzkrQUdBSGYzOS9mMzkvZndGL1lBaC9mMzkvZjM5L2Z3Ri9ZQVovZjM1L2ZuOEFZQXQvZjM5L2YzOS9mMzkvZndGL1lBcC9mMzkvZjM5L2YzOS9BWDhDU0FnRFpXNTJBV0VBQVFObGJuWUJZZ0FDQTJWdWRnRmpBQUFEWlc1MkFXUUFBZ05sYm5ZQlpRQUNBMlZ1ZGdGbUFBUURaVzUyQVdjQUF3TmxibllHYldWdGIzSjVBZ0NBQWdQaUF1QUNHQTRlQmdZVEJoZ1pGUlFJRXdZVEJRTUVHUVFHRXhrRkJnTUNCQUlUQmdZWERnVUdCZ1FDQmkwR0F3WURCUVlzQXg4WkJSa1RCZ1lHRGdRRERpNEdFd01EQlFZT0FBUVdCQllUQlFJR0V3WVRBZzhQQkE0d0hBVXJMU3dHQlFVUER3NEVEZ01EQXdBVEFoa1BCQWdGQmdZVEV3VUhCaE1PQWdZR0J4TVNFQklRRGd3R01RVUZBZ0lCRGdRckV4TXRLeE1xS1EwUkNoTUdCd1FoSWhZRUJnWUdHUVlUQ2dBR0R3b0NBQUlHQ1FJVEJnWVRBQWtHQmdRRUF4RU5FUkVUSEJZZEhSMGNNek1kTHgwdkZoWXdMeklkRmhZdkhSd2RMeTh3QkIwdkx6QWNIQjh5TWpJTkh6SXlNaDh5TWpJQ0FnNEdBeE1EQXhZY0FRWUJBeHdDQWdZT0x4WVRBZ01KS3l3VENpZ29EZzRHQkFBRUZnSU9CQWtEQXd3RkF3TURKd3NtQkFRUkVRWUNFdzRFSlJja0l3TURBd01EQXdNREZ5QVhJU0FPRXgwVEJoWUdFdzRPQmdZR0JnTU5EQndjRGdRUkNBWVVDUVljR2hzYUJRa0RFd1lJQVg4QlFjQ2tBZ3NIdkFlMkFRRm9BUG9CQVdrQUlBRnFBUFVCQVdzQTlBRUJiQUR6QVFGdEFQSUJBVzRBSUFGdkFQRUJBWEFBOEFFQmNRRHZBUUZ5QU80QkFYTUFGd0YwQUNrQmRRQTNBWFlBMGdJQmR3QXhBWGdBRndGNUFDa0JlZ0EzQVVFQWF3RkNBREVCUXdBZ0FVUUE3QUVCUlFEckFRRkdBT29CQVVjQTZRRUJTQUFYQVVrQUtRRktBRGNCU3dCQ0FVd0FNUUZOQU9nQkFVNEFGd0ZQQUJjQlVBQXBBVkVBNXdFQlVnQmJBVk1BRndGVUFPWUJBVlVBNVFFQlZnRGtBUUZYQU9NQkFWZ0FpQUVCV1FBZ0FWb0FOd0ZmQUVJQkpBRGhBUUpoWVFEZ0FRSmlZUURmQVFKallRRGVBUUprWVFBWEFtVmhBTjBCQW1aaEFOd0JBbWRoQU1FQkFtaGhBQmNDYVdFQTRnRUNhbUVBRndKcllRRGJBUUpzWVFBWEFtMWhBRE1DYm1FQUlBSnZZUUJQQW5CaEFGQUNjV0VBRndKeVlRQXpBbk5oQUNBQ2RHRUFLUUoxWVFEbEFnSjJZUURhQVFKM1lRRFpBUUo0WVFBekFubGhBRE1DZW1FQUlBSkJZUUJyQWtKaEFOZ0JBa05oQUJjQ1JHRUFLUUpGWVFEV0FnSkdZUURYQWdKSFlRQVhBa2hoQUJjQ1NXRUEyQUlDU21FQUZ3SkxZUURWQWdKTVlRQVhBazFoQU5jQkFrNWhBRWdDVDJFQVJ3SlFZUUJIQWxGaEFHMENVbUVBSUFKVFlRQzZBZ0pVWVFDN0FnSlZZUUM4QWdKV1lRQzVBZ0pYWVFDM0FnSllZUUJIQWxsaEFHMENXbUVBU0FKZllRQnNBaVJoQUxnQ0FtRmlBRzBDWW1JQU1RSmpZZ0FnQW1SaUFOWUJBbVZpQU5VQkFtWmlBTlFCQW1kaUFOTUJBbWhpQUw0Q0FtbGlBTDBDQW1waUFHa0NhMklBYWdKc1lnQVhBbTFpQUJjQ2JtSUEwZ0VDYjJJQTBRRUNjR0lBRndKeFlnQXBBbkppQUNBQ2MySUFOd0owWWdCQ0FuVmlBTkFCQW5aaUFNOEJBbmRpQUtVQ0FuaGlBRUlDZVdJQXFnSUNlbUlBcXdJQ1FXSUFGd0pDWWdBcEFrTmlBS1FDQWtSaUFNNEJBa1ZpQU0wQkFrWmlBR1FDUjJJQXBnSUNTR0lBYkFKSllnQXhBa3BpQUVnQ1MySUFSd0pNWWdETUFRSk5ZZ0JyQWs1aUFDQUNUMklBb3dJQ1VHSUF5d0VDVVdJQU13SlNZZ0RLQVFKVFlnQ1dBZ0pVWWdDVkFnSlZZZ0NiQWdKV1lnQ2FBZ0pYWWdDY0FnSllZZ0NkQWdKWllnQ2dBZ0phWWdESkFRSmZZZ0FYQWlSaUFETUNZV01BbmdJQ1ltTUFGd0pqWXdDaEFnSmtZd0RJQVFKbFl3REhBUUptWXdBV0FtZGpBQ0VDYUdNQXhnRUNhV01BSHdKcVl3Q0xBZ0pyWXdBeEFteGpBSTBDQW0xakFCY0NibU1Ba0FFQ2IyTUFqQUlDY0dNQVhRSnhZd0NJQWdKeVl3QmVBbk5qQUlvQ0FuUmpBSWtDQW5WakFJTUNBblpqQUVnQ2QyTUEvQUVDZUdNQWJBSjVZd0QvQVFKNll3RCtBUUpCWXdEOUFRcTIwQVRnQWhNQUlBQkJ3QUFnQVd1dGhpQUFJQUd0aUlRTEVBQWdBQ0FCZENBQVFTQWdBV3QyY2dzZUFDQUFJQUY4SUFGQy8vLy8vdytESUFCQ0FZWkMvdi8vL3grRGZud0xVQUVEZndKL0l3QWhCQ01BUVQ5cVFVQnhKQUFqQUNFQ0l3QkJFR29rQUNBQ0lBQTJBZ0FnQVFSQVFRQWhBQU5BSUFBZ0FpZ0NBR3BCQURvQUFDQUFRUUZxSWdBZ0FVY05BQXNMSUFRTEpBQUxDUUFnQUNBQk5nQUFDOFVKQWcxL0tYNGdBaWdDQkNJRHJDRVFJQUlvQWdnaUJLd2hHQ0FDS0FJTUlnV3NJUnNnQWlnQ0VDSUdyQ0VkSUFJb0FoUWlCNndoSHlBQ0tBSVlJZ2lzSVNZZ0FpZ0NIQ0lKckNFdElBSW9BaUFpQ3F3aE1DQUJLQUlFSWd1c0lTQWdBU2dDRENJTXJDRWhJQUVvQWhRaURhd2hJaUFCS0FJY0lnNnNJU01nQVNnQ0pDSVByQ0VrSUE5QkFYU3NJaWNnQTBFVGJLeCtJQUVvQWdDc0loRWdBaWdDQUt3aUVuNThJQUVvQWlDc0loTWdCRUVUYkt3aUxuNThJQTVCQVhTc0lpZ2dCVUVUYkt3aUtYNThJQUVvQWhpc0loUWdCa0VUYkt3aUpYNThJQTFCQVhTc0lpb2dCMEVUYkt3aUhuNThJQUVvQWhDc0loVWdDRUVUYkt3aUhINThJQXhCQVhTc0lpc2dDVUVUYkt3aUdYNThJQXBCRTJ5c0loY2dBU2dDQ0t3aUZuNThJQXRCQVhTc0lpd2dBaWdDSkNJQlFSTnNyQ0lhZm53aE1TQVFJQlIrSUJJZ0kzNThJQmdnSW41OElCVWdHMzU4SUIwZ0lYNThJQllnSDM1OElDQWdKbjU4SUJFZ0xYNThJQmNnSkg1OElCTWdHbjU4SUJBZ0tuNGdFaUFVZm53Z0ZTQVlmbndnR3lBcmZud2dGaUFkZm53Z0h5QXNmbndnRVNBbWZud2dHU0FuZm53Z0V5QVhmbndnR2lBb2Zud2dFQ0FWZmlBU0lDSitmQ0FZSUNGK2ZDQVdJQnQrZkNBZElDQitmQ0FSSUI5K2ZDQWNJQ1IrZkNBVElCbCtmQ0FYSUNOK2ZDQVVJQnArZkNBUUlDdCtJQklnRlg1OElCWWdHSDU4SUJzZ0xINThJQkVnSFg1OElCNGdKMzU4SUJNZ0hINThJQmtnS0g1OElCUWdGMzU4SUJvZ0tuNThJaTlDZ0lDQUVId2lNMElhaDN3aU5FS0FnSUFJZkNJMVFobUhmQ0kyUW9DQWdCQjhJamRDR29kOElUSWdMeUF6UW9DQWdHQ0RmU0FTSUNGK0lCQWdGbjU4SUJnZ0lINThJQkVnRzM1OElDUWdKWDU4SUJNZ0huNThJQndnSTM1OElCUWdHWDU4SUJjZ0luNThJQlVnR241OElCQWdMSDRnRWlBV2Zud2dFU0FZZm53Z0p5QXBmbndnRXlBbGZud2dIaUFvZm53Z0ZDQWNmbndnR1NBcWZud2dGU0FYZm53Z0dpQXJmbndnRUNBUmZpQVNJQ0IrZkNBa0lDNStmQ0FUSUNsK2ZDQWpJQ1YrZkNBVUlCNStmQ0FjSUNKK2ZDQVZJQmwrZkNBWElDRitmQ0FXSUJwK2ZDQXhRb0NBZ0JCOElobENHb2Q4SWh4Q2dJQ0FDSHdpSGtJWmgzd2lKVUtBZ0lBUWZDSXBRaHFIZkNJdVFvQ0FnQWg4SWpoQ0dZZDhJaTlDZ0lDQUVId2hGeUF4SUJsQ2dJQ0FZSU45SUJBZ0UzNGdFaUFrZm53Z0dDQWpmbndnRkNBYmZud2dIU0FpZm53Z0ZTQWZmbndnSVNBbWZud2dGaUF0Zm53Z0lDQXdmbndnRVNBQnJINThJQkFnS0g0Z0VpQVRmbndnRkNBWWZud2dHeUFxZm53Z0ZTQWRmbndnSHlBcmZud2dGaUFtZm53Z0xDQXRmbndnRVNBd2Zud2dHaUFuZm53Z01rS0FnSUFJZkNJUlFobUhmQ0lTUW9DQWdCQjhJaE5DR29kOEloUkNnSUNBQ0h3aUZVSVpoMElUZm53aUZrS0FnSUFRZkNFUUlBQWdGaUFRUW9DQWdPQVBnMzArQWdBZ0FDQWNJQjVDZ0lDQThBK0RmU0FRUWhxSWZENENCQ0FBSUNVZ0tVS0FnSURnRDROOVBnSUlJQUFnTGlBNFFvQ0FnUEFQZzMwK0Fnd2dBQ0F2SUJkQ2dJQ0E0QStEZlQ0Q0VDQUFJRFFnTlVLQWdJRHdENE45SUJkQ0dvaDhQZ0lVSUFBZ05pQTNRb0NBZ09BUGczMCtBaGdnQUNBeUlCRkNnSUNBOEErRGZUNENIQ0FBSUJJZ0UwS0FnSURnRDROOVBnSWdJQUFnRkNBVlFvQ0FnUEFQZzMwK0FpUUw1d1lDQ1g4ZGZpQUJLQUlFSWdXc0lSY2dBU2dDQ0NJR3JDRVJJQUVvQWd3aUI2d2hHeUFCS0FJUUlnaXNJUXdnQVNnQ0ZDSUNyQ0VWSUFFb0FoZ2lBNndoRHlBQktBSWNJZ1NzSVJ3Z0FTZ0NJQ0lKckNFWUlBRW9BaVFpQ3F3aEhTQUNRU1pzckNBVmZpQUJLQUlBSWdHc0lnc2dDMzU4SUFoQkFYU3NJaDRnQTBFVGJLd2lHWDU4SUFSQkpteXNJaFlnQjBFQmRLd2lFSDU4SUFaQkFYU3NJaE1nQ1VFVGJLd2lFbjU4SUFWQkFYU3NJZ3NnQ2tFbWJLd2lEWDU4SVI4Z0N5QVFmaUFSSUJGK2ZDQUJRUUYwckNJT0lBeCtmQ0FXSUJ4K2ZDQURRUUYwckNBU2Zud2dBa0VCZEt3aUZDQU5mbndoR2lBTElBeCtJQk1nRzM1OElBNGdGWDU4SUFSQkFYU3NJaUFnRW41OElBMGdEMzU4SUJwQ2dJQ0FFSHdpSWtJYWgzd2lJMEtBZ0lBSWZDRWhJQm9nSWtLQWdJQmdnMzBnRGlBYmZpQUxJQkYrZkNBUElCWitmQ0FTSUJSK2ZDQU1JQTErZkNBT0lCRitJQXNnRjM1OElBOGdHWDU4SUJRZ0ZuNThJQklnSG41OElBMGdFSDU4SUJRZ0dYNGdEaUFYZm53Z0RDQVdmbndnRUNBU2Zud2dEU0FSZm53Z0gwS0FnSUFRZkNJV1FocUhmQ0lYUW9DQWdBaDhJaGxDR1lkOElpUkNnSUNBRUh3aUpVSWFoM3dpSmtLQWdJQUlmQ0luUWhtSGZDSWFRb0NBZ0JCOElSRWdIeUFXUW9DQWdHQ0RmU0FQSUJCK0lCVWdIbjU4SUJNZ0hINThJQXNnR0g1OElBNGdIWDU4SUF3Z0RINGdEeUFUZm53Z0VDQVVmbndnQ3lBZ2Zud2dEaUFZZm53Z0RTQWRmbndnRENBUWZpQVRJQlYrZkNBTElBOStmQ0FPSUJ4K2ZDQU5JQmgrZkNBUUlCdCtJQXdnRTM1OElBc2dGSDU4SUE0Z0QzNThJQklnR0g1OElBMGdJSDU4SUNGQ0dZZDhJZ3RDZ0lDQUVId2lEVUlhaDN3aURrS0FnSUFJZkNJUFFobUhmQ0lRUW9DQWdCQjhJaEpDR29kOEloTkNnSUNBQ0h3aUZFSVpoMElUZm53aUZVS0FnSUFRZkNFTUlBQWdGU0FNUW9DQWdPQVBnMzArQWdBZ0FDQVhJQmxDZ0lDQThBK0RmU0FNUWhxSWZENENCQ0FBSUNRZ0pVS0FnSURnRDROOVBnSUlJQUFnSmlBblFvQ0FnUEFQZzMwK0Fnd2dBQ0FhSUJGQ2dJQ0E0QStEZlQ0Q0VDQUFJQ01nSVVLQWdJRHdENE45SUJGQ0dvaDhQZ0lVSUFBZ0N5QU5Rb0NBZ09BUGczMCtBaGdnQUNBT0lBOUNnSUNBOEErRGZUNENIQ0FBSUJBZ0VrS0FnSURnRDROOVBnSWdJQUFnRXlBVVFvQ0FnUEFQZzMwK0FpUUxFd0FnQUNBQnJZWWdBRUhBQUNBQmE2MkloQXNMQUNBQUlBRWdBaENwQVFzZkFDQUFRZjhCY2EwZ0FVSC9BWEd0UWdpR2hDQUNRZjhCY2ExQ0VJYUVDeVlBSUFBdEFBQ3RJQUF0QUFHdFFnaUdoQ0FBTFFBQ3JVSVFob1FnQUMwQUE2MUNHSWFFQ3drQUlBQWdBVGNBQUF2SUFRRUpmeUFCS0FJRUlBSW9BZ1JxSVFNZ0FTZ0NDQ0FDS0FJSWFpRUVJQUVvQWd3Z0FpZ0NER29oQlNBQktBSVFJQUlvQWhCcUlRWWdBU2dDRkNBQ0tBSVVhaUVISUFFb0FoZ2dBaWdDR0dvaENDQUJLQUljSUFJb0FoeHFJUWtnQVNnQ0lDQUNLQUlnYWlFS0lBRW9BaVFnQWlnQ0pHb2hDeUFBSUFFb0FnQWdBaWdDQUdvMkFnQWdBQ0FETmdJRUlBQWdCRFlDQ0NBQUlBVTJBZ3dnQUNBR05nSVFJQUFnQnpZQ0ZDQUFJQWcyQWhnZ0FDQUpOZ0ljSUFBZ0NqWUNJQ0FBSUFzMkFpUUxRQUVEZnlBQUlBRWdBVUg0QUdvaUFoQU1JQUJCS0dvZ0FVRW9haUlESUFGQjBBQnFJZ1FRRENBQVFkQUFhaUFFSUFJUURDQUFRZmdBYWlBQklBTVFEQXZJQVFFSmZ5QUJLQUlFSUFJb0FnUnJJUU1nQVNnQ0NDQUNLQUlJYXlFRUlBRW9BZ3dnQWlnQ0RHc2hCU0FCS0FJUUlBSW9BaEJySVFZZ0FTZ0NGQ0FDS0FJVWF5RUhJQUVvQWhnZ0FpZ0NHR3NoQ0NBQktBSWNJQUlvQWh4cklRa2dBU2dDSUNBQ0tBSWdheUVLSUFFb0FpUWdBaWdDSkdzaEN5QUFJQUVvQWdBZ0FpZ0NBR3MyQWdBZ0FDQUROZ0lFSUFBZ0JEWUNDQ0FBSUFVMkFnd2dBQ0FHTmdJUUlBQWdCellDRkNBQUlBZzJBaGdnQUNBSk5nSWNJQUFnQ2pZQ0lDQUFJQXMyQWlRTGlRNEJDWDhnQUVVRVFBOExRWnlYQWlnQ0FDRUVJQUJCZUdvaUFTQUFRWHhxS0FJQUlnQkJlSEVpQTJvaEJTQUFRUUZ4Qkg4Z0FTRUNJQU1GQW44Z0FTZ0NBQ0VDSUFCQkEzRkZCRUFQQ3lBQklBSnJJZ0FnQkVrRVFBOExJQUlnQTJvaEEwR2dsd0lvQWdBZ0FFWUVRQ0FGS0FJRUlnRkJBM0ZCQTBjRVFDQUFJUUVnQUNFQ0lBTU1BZ3RCbEpjQ0lBTTJBZ0FnQlNBQlFYNXhOZ0lFSUFBZ0EwRUJjallDQkNBQUlBTnFJQU0yQWdBUEN5QUNRUU4ySVFRZ0FrR0FBa2tFUUNBQUtBSUlJZ0VnQUNnQ0RDSUNSZ1JBUVl5WEFrR01sd0lvQWdCQkFTQUVkRUYvYzNFMkFnQUZJQUVnQWpZQ0RDQUNJQUUyQWdnTElBQWhBU0FBSVFJZ0F3d0JDeUFBS0FJWUlRY2dBQ2dDRENJQklBQkdCRUFDUUNBQVFSQnFJZ0pCQkdvaUJDZ0NBQ0lCQkVBZ0JDRUNCU0FDS0FJQUlnRkZCRUJCQUNFQkRBSUxDd05BQWtBZ0FVRVVhaUlFS0FJQUlnWkZCRUFnQVVFUWFpSUVLQUlBSWdaRkRRRUxJQVFoQWlBR0lRRU1BUXNMSUFKQkFEWUNBQXNGSUFBb0FnZ2lBaUFCTmdJTUlBRWdBallDQ0FzZ0J3Ui9JQUFvQWh3aUFrRUNkRUc4bVFKcUlnUW9BZ0FnQUVZRVFDQUVJQUUyQWdBZ0FVVUVRRUdRbHdKQmtKY0NLQUlBUVFFZ0FuUkJmM054TmdJQUlBQWhBU0FBSVFJZ0F3d0RDd1VnQjBFUWFpSUNJQWRCRkdvZ0FpZ0NBQ0FBUmhzZ0FUWUNBQ0FCUlFSQUlBQWhBU0FBSVFJZ0F3d0RDd3NnQVNBSE5nSVlJQUFvQWhBaUFnUkFJQUVnQWpZQ0VDQUNJQUUyQWhnTElBQW9BaFFpQWdSQUlBRWdBallDRkNBQ0lBRTJBaGdMSUFBaEFTQUFJUUlnQXdVZ0FDRUJJQUFoQWlBREN3c0xJUUFnQVNBRlR3UkFEd3NnQlNnQ0JDSUlRUUZ4UlFSQUR3c2dDRUVDY1FSQUlBVWdDRUYrY1RZQ0JDQUNJQUJCQVhJMkFnUWdBQ0FCYWlBQU5nSUFJQUFoQXdWQnBKY0NLQUlBSUFWR0JFQkJtSmNDUVppWEFpZ0NBQ0FBYWlJQU5nSUFRYVNYQWlBQ05nSUFJQUlnQUVFQmNqWUNCQ0FDUWFDWEFpZ0NBRWNFUUE4TFFhQ1hBa0VBTmdJQVFaU1hBa0VBTmdJQUR3dEJvSmNDS0FJQUlBVkdCRUJCbEpjQ1FaU1hBaWdDQUNBQWFpSUFOZ0lBUWFDWEFpQUJOZ0lBSUFJZ0FFRUJjallDQkNBQUlBRnFJQUEyQWdBUEN5QUlRUU4ySVFZZ0NFR0FBa2tFUUNBRktBSUlJZ01nQlNnQ0RDSUVSZ1JBUVl5WEFrR01sd0lvQWdCQkFTQUdkRUYvYzNFMkFnQUZJQU1nQkRZQ0RDQUVJQU0yQWdnTEJRSkFJQVVvQWhnaENTQUZLQUlNSWdNZ0JVWUVRQUpBSUFWQkVHb2lCRUVFYWlJR0tBSUFJZ01FUUNBR0lRUUZJQVFvQWdBaUEwVUVRRUVBSVFNTUFnc0xBMEFDUUNBRFFSUnFJZ1lvQWdBaUIwVUVRQ0FEUVJCcUlnWW9BZ0FpQjBVTkFRc2dCaUVFSUFjaEF3d0JDd3NnQkVFQU5nSUFDd1VnQlNnQ0NDSUVJQU0yQWd3Z0F5QUVOZ0lJQ3lBSkJFQWdCU2dDSENJRVFRSjBRYnlaQW1vaUJpZ0NBQ0FGUmdSQUlBWWdBellDQUNBRFJRUkFRWkNYQWtHUWx3SW9BZ0JCQVNBRWRFRi9jM0UyQWdBTUF3c0ZJQWxCRUdvaUJDQUpRUlJxSUFRb0FnQWdCVVliSUFNMkFnQWdBMFVOQWdzZ0F5QUpOZ0lZSUFVb0FoQWlCQVJBSUFNZ0JEWUNFQ0FFSUFNMkFoZ0xJQVVvQWhRaUJBUkFJQU1nQkRZQ0ZDQUVJQU0yQWhnTEN3c0xJQUlnQ0VGNGNTQUFhaUlEUVFGeU5nSUVJQUVnQTJvZ0F6WUNBRUdnbHdJb0FnQWdBa1lFUUVHVWx3SWdBellDQUE4TEN5QURRUU4ySVFFZ0EwR0FBa2tFUUNBQlFRTjBRYlNYQW1vaEFFR01sd0lvQWdBaUEwRUJJQUYwSWdGeEJIOGdBRUVJYWlJQklRTWdBU2dDQUFWQmpKY0NJQUVnQTNJMkFnQWdBRUVJYWlFRElBQUxJUUVnQXlBQ05nSUFJQUVnQWpZQ0RDQUNJQUUyQWdnZ0FpQUFOZ0lNRHdzZ0EwRUlkaUlBQkg4Z0EwSC8vLzhIU3dSL1FSOEZJQUFnQUVHQS9qOXFRUkIyUVFoeElnUjBJZ0ZCZ09BZmFrRVFka0VFY1NFQUlBRWdBSFFpQmtHQWdBOXFRUkIyUVFKeElRRWdBMEVPSUFBZ0JISWdBWEpySUFZZ0FYUkJEM1pxSWdCQkIycDJRUUZ4SUFCQkFYUnlDd1ZCQUFzaUFVRUNkRUc4bVFKcUlRQWdBaUFCTmdJY0lBSkJBRFlDRkNBQ1FRQTJBaEJCa0pjQ0tBSUFJZ1JCQVNBQmRDSUdjUVJBQWtBZ0FDZ0NBQ0lBS0FJRVFYaHhJQU5HQkVBZ0FDRUJCUUpBSUFOQkFFRVpJQUZCQVhacklBRkJIMFliZENFRUEwQWdBRUVRYWlBRVFSOTJRUUowYWlJR0tBSUFJZ0VFUUNBRVFRRjBJUVFnQVNnQ0JFRjRjU0FEUmcwQ0lBRWhBQXdCQ3dzZ0JpQUNOZ0lBSUFJZ0FEWUNHQ0FDSUFJMkFnd2dBaUFDTmdJSURBSUxDeUFCS0FJSUlnQWdBallDRENBQklBSTJBZ2dnQWlBQU5nSUlJQUlnQVRZQ0RDQUNRUUEyQWhnTEJVR1Fsd0lnQkNBR2NqWUNBQ0FBSUFJMkFnQWdBaUFBTmdJWUlBSWdBallDRENBQ0lBSTJBZ2dMUWF5WEFrR3Nsd0lvQWdCQmYyb2lBRFlDQUNBQUJFQVBDMEhVbWdJaEFBTkFJQUFvQWdBaUFVRUlhaUVBSUFFTkFBdEJySmNDUVg4MkFnQUxCQUJCSUF2R0F3RURmeUFDUVlEQUFFNEVRQ0FBSUFFZ0FoQUZHaUFBRHdzZ0FDRUVJQUFnQW1vaEF5QUFRUU54SUFGQkEzRkdCRUFEUUNBQVFRTnhCRUFnQWtVRVFDQUVEd3NnQUNBQkxBQUFPZ0FBSUFCQkFXb2hBQ0FCUVFGcUlRRWdBa0VCYXlFQ0RBRUxDeUFEUVh4eElnSkJRR29oQlFOQUlBQWdCVXdFUUNBQUlBRW9BZ0EyQWdBZ0FDQUJLQUlFTmdJRUlBQWdBU2dDQ0RZQ0NDQUFJQUVvQWd3MkFnd2dBQ0FCS0FJUU5nSVFJQUFnQVNnQ0ZEWUNGQ0FBSUFFb0FoZzJBaGdnQUNBQktBSWNOZ0ljSUFBZ0FTZ0NJRFlDSUNBQUlBRW9BaVEyQWlRZ0FDQUJLQUlvTmdJb0lBQWdBU2dDTERZQ0xDQUFJQUVvQWpBMkFqQWdBQ0FCS0FJME5nSTBJQUFnQVNnQ09EWUNPQ0FBSUFFb0FqdzJBandnQUVGQWF5RUFJQUZCUUdzaEFRd0JDd3NEUUNBQUlBSklCRUFnQUNBQktBSUFOZ0lBSUFCQkJHb2hBQ0FCUVFScUlRRU1BUXNMQlNBRFFRUnJJUUlEUUNBQUlBSklCRUFnQUNBQkxBQUFPZ0FBSUFBZ0FTd0FBVG9BQVNBQUlBRXNBQUk2QUFJZ0FDQUJMQUFET2dBRElBQkJCR29oQUNBQlFRUnFJUUVNQVFzTEN3TkFJQUFnQTBnRVFDQUFJQUVzQUFBNkFBQWdBRUVCYWlFQUlBRkJBV29oQVF3QkN3c2dCQXNLQUNBQUlBRWdBaEE3QzVnQ0FRUi9JQUFnQW1vaEJDQUJRZjhCY1NFRElBSkJ3d0JPQkVBRFFDQUFRUU54QkVBZ0FDQURPZ0FBSUFCQkFXb2hBQXdCQ3dzZ0EwRUlkQ0FEY2lBRFFSQjBjaUFEUVJoMGNpRUJJQVJCZkhFaUJVRkFhaUVHQTBBZ0FDQUdUQVJBSUFBZ0FUWUNBQ0FBSUFFMkFnUWdBQ0FCTmdJSUlBQWdBVFlDRENBQUlBRTJBaEFnQUNBQk5nSVVJQUFnQVRZQ0dDQUFJQUUyQWh3Z0FDQUJOZ0lnSUFBZ0FUWUNKQ0FBSUFFMkFpZ2dBQ0FCTmdJc0lBQWdBVFlDTUNBQUlBRTJBalFnQUNBQk5nSTRJQUFnQVRZQ1BDQUFRVUJySVFBTUFRc0xBMEFnQUNBRlNBUkFJQUFnQVRZQ0FDQUFRUVJxSVFBTUFRc0xDd05BSUFBZ0JFZ0VRQ0FBSUFNNkFBQWdBRUVCYWlFQURBRUxDeUFFSUFKckN6c0JBWDhnQUNBQlFTaHFJZ0lnQVJBVElBQkJLR29nQWlBQkVCVWdBRUhRQUdvZ0FVSFFBR29RS3lBQVFmZ0FhaUFCUWZnQWFrSGdDQkFNQzZVQkFRWi9BbjhqQUNFSUl3QkJQMnBCUUhFa0FDTUFJUVVqQUVFd2FpUUFJQUFnQVVFb2FpSURJQUVRRXlBQVFTaHFJZ1FnQXlBQkVCVWdBRUhRQUdvaUJpQUFJQUlRRENBRUlBUWdBa0VvYWhBTUlBQkIrQUJxSWdNZ0FrSDRBR29nQVVINEFHb1FEQ0FBSUFGQjBBQnFJQUpCMEFCcUVBd2dCU0FBSUFBUUV5QUFJQVlnQkJBVklBUWdCaUFFRUJNZ0JpQUZJQU1RRXlBRElBVWdBeEFWSUFnTEpBQUwrZ0lDQkg4RWZnSi9Jd0FoQmlNQVFUOXFRVUJ4SkFBakFDRUVJd0JCd0FWcUpBQWdBa0lBVWdSQUFrQWdBQ0FBS1FOSUlnZ2dBa0lEaGlJSmZDSUtOd05JSUFCQlFHc2lBeWtEQUNFSElBb2dDVlFFUUNBRElBZENBWHdpQnpjREFBc2dBeUFISUFKQ1BZaDhOd01BUW9BQklBaENBNGhDL3dDRElnbDlJZ2dnQWxZRVFFSUFJUWNEUUNBSElBbDhweUFBUWRBQWFtb2dBU0FIcDJvc0FBQTZBQUFnQjBJQmZDSUhJQUpVRFFBTERBRUxJQWhDQUZJRVFFSUFJUWNEUUNBSElBbDhweUFBUWRBQWFtb2dBU0FIcDJvc0FBQTZBQUFnQjBJQmZDSUhJQWhVRFFBTEN5QUFJQUJCMEFCcUlBUWdCRUdBQldvaUF4Qk1JQUVnQ0tkcUlRRWdBaUFJZlNJQ1F2OEFWZ1JBQTBBZ0FDQUJJQVFnQXhCTUlBRkJnQUZxSVFFZ0FrS0FmM3dpQWtML0FGWU5BQXNMSUFKQy93Q0RJZ2RDQUZJRVFFSUFJUUlEUUNBQ3B5SURJQUJCMEFCcWFpQUJJQU5xTEFBQU9nQUFJQUpDQVh3aUFpQUhWQTBBQ3dzZ0JFSEFCUkFLQ3dzZ0Jnc2tBQXN4QUNBQVFRRTJBZ0FnQUVFRWFpSUFRZ0EzQWdBZ0FFSUFOd0lJSUFCQ0FEY0NFQ0FBUWdBM0FoZ2dBRUVBTmdJZ0N5UUJBWDhnQVFSQUEwQWdBQ0FDYWtFQUVBRTZBQUFnQWtFQmFpSUNJQUZIRFFBTEN3c0VBRUVRQzdBMkFRMS9Jd0FoQ2lNQVFUOXFRVUJ4SkFBakFDRUpJd0JCRUdva0FDQUFRZlVCU1FSL1FZeVhBaWdDQUNJRFFSQWdBRUVMYWtGNGNTQUFRUXRKR3lJQ1FRTjJJZ0IySWdGQkEzRUVRQ0FCUVFGeFFRRnpJQUJxSWdGQkEzUkJ0SmNDYWlJQUtBSUlJZ0pCQ0dvaUJTZ0NBQ0lFSUFCR0JFQkJqSmNDSUFOQkFTQUJkRUYvYzNFMkFnQUZJQVFnQURZQ0RDQUFJQVEyQWdnTElBSWdBVUVEZENJQVFRTnlOZ0lFSUFBZ0Ftb2lBQ0FBS0FJRVFRRnlOZ0lFSUFva0FDQUZEd3NnQWtHVWx3SW9BZ0FpQjBzRWZ5QUJCRUJCQWlBQWRDSUVRUUFnQkd0eUlBRWdBSFJ4SWdCQkFDQUFhM0ZCZjJvaUFFRU1ka0VRY1NJQklBQWdBWFlpQUVFRmRrRUljU0lCY2lBQUlBRjJJZ0JCQW5aQkJIRWlBWElnQUNBQmRpSUFRUUYyUVFKeElnRnlJQUFnQVhZaUFFRUJka0VCY1NJQmNpQUFJQUYyYWlJRVFRTjBRYlNYQW1vaUFDZ0NDQ0lCUVFocUlnWW9BZ0FpQlNBQVJnUkFRWXlYQWlBRFFRRWdCSFJCZjNOeElnQTJBZ0FGSUFVZ0FEWUNEQ0FBSUFVMkFnZ2dBeUVBQ3lBQklBSkJBM0kyQWdRZ0FTQUNhaUlGSUFSQkEzUWlCQ0FDYXlJRFFRRnlOZ0lFSUFFZ0JHb2dBellDQUNBSEJFQkJvSmNDS0FJQUlRSWdCMEVEZGlJRVFRTjBRYlNYQW1vaEFTQUFRUUVnQkhRaUJIRUVmeUFCUVFocUlnQWhCQ0FBS0FJQUJVR01sd0lnQUNBRWNqWUNBQ0FCUVFocUlRUWdBUXNoQUNBRUlBSTJBZ0FnQUNBQ05nSU1JQUlnQURZQ0NDQUNJQUUyQWd3TFFaU1hBaUFETmdJQVFhQ1hBaUFGTmdJQUlBb2tBQ0FHRHd0QmtKY0NLQUlBSWdzRWZ5QUxRUUFnQzJ0eFFYOXFJZ0JCREhaQkVIRWlBU0FBSUFGMklnQkJCWFpCQ0hFaUFYSWdBQ0FCZGlJQVFRSjJRUVJ4SWdGeUlBQWdBWFlpQUVFQmRrRUNjU0lCY2lBQUlBRjJJZ0JCQVhaQkFYRWlBWElnQUNBQmRtcEJBblJCdkprQ2FpZ0NBQ0lBS0FJRVFYaHhJQUpySVFnZ0FDRUdBMEFDUUNBQUtBSVFJZ0VFUUNBQklRQUZJQUFvQWhRaUFFVU5BUXNnQUNnQ0JFRjRjU0FDYXlJRUlBaEpJUUVnQkNBSUlBRWJJUWdnQUNBR0lBRWJJUVlNQVFzTElBSWdCbW9pRENBR1N3Ui9JQVlvQWhnaENTQUdLQUlNSWdBZ0JrWUVRQUpBSUFaQkZHb2lBU2dDQUNJQVJRUkFJQVpCRUdvaUFTZ0NBQ0lBUlFSQVFRQWhBQXdDQ3dzRFFBSkFJQUJCRkdvaUJDZ0NBQ0lGUlFSQUlBQkJFR29pQkNnQ0FDSUZSUTBCQ3lBRUlRRWdCU0VBREFFTEN5QUJRUUEyQWdBTEJTQUdLQUlJSWdFZ0FEWUNEQ0FBSUFFMkFnZ0xJQWtFUUFKQUlBWW9BaHdpQVVFQ2RFRzhtUUpxSWdRb0FnQWdCa1lFUUNBRUlBQTJBZ0FnQUVVRVFFR1Fsd0lnQzBFQklBRjBRWDl6Y1RZQ0FBd0NDd1VnQ1VFUWFpSUJJQWxCRkdvZ0FTZ0NBQ0FHUmhzZ0FEWUNBQ0FBUlEwQkN5QUFJQWsyQWhnZ0JpZ0NFQ0lCQkVBZ0FDQUJOZ0lRSUFFZ0FEWUNHQXNnQmlnQ0ZDSUJCRUFnQUNBQk5nSVVJQUVnQURZQ0dBc0xDeUFJUVJCSkJFQWdCaUFDSUFocUlnQkJBM0kyQWdRZ0FDQUdhaUlBSUFBb0FnUkJBWEkyQWdRRklBWWdBa0VEY2pZQ0JDQU1JQWhCQVhJMkFnUWdDQ0FNYWlBSU5nSUFJQWNFUUVHZ2x3SW9BZ0FoQWlBSFFRTjJJZ0ZCQTNSQnRKY0NhaUVBSUFOQkFTQUJkQ0lCY1FSL0lBQkJDR29pQVNFRElBRW9BZ0FGUVl5WEFpQUJJQU55TmdJQUlBQkJDR29oQXlBQUN5RUJJQU1nQWpZQ0FDQUJJQUkyQWd3Z0FpQUJOZ0lJSUFJZ0FEWUNEQXRCbEpjQ0lBZzJBZ0JCb0pjQ0lBdzJBZ0FMSUFva0FDQUdRUWhxRHdVZ0Fnc0ZJQUlMQlNBQ0N3VWdBRUcvZjBzRWYwRi9CUUovSUFCQkMyb2lBRUY0Y1NFQlFaQ1hBaWdDQUNJRUJIOGdBRUVJZGlJQUJIOGdBVUgvLy84SFN3Ui9RUjhGSUFBZ0FFR0EvajlxUVJCMlFRaHhJZ04wSWdKQmdPQWZha0VRZGtFRWNTRUFJQUlnQUhRaUJVR0FnQTlxUVJCMlFRSnhJUUlnQVVFT0lBQWdBM0lnQW5KcklBVWdBblJCRDNacUlnQkJCMnAyUVFGeElBQkJBWFJ5Q3dWQkFBc2hCMEVBSUFGcklRSUNRQUpBSUFkQkFuUkJ2SmtDYWlnQ0FDSUFCRUFnQVVFQVFSa2dCMEVCZG1zZ0IwRWZSaHQwSVFWQkFDRURBMEFnQUNnQ0JFRjRjU0FCYXlJSUlBSkpCRUFnQ0FSL0lBQWhBeUFJQlVFQUlRTWdBQ0VDREFRTElRSUxJQVlnQUNnQ0ZDSUdJQVpGSUFZZ0FFRVFhaUFGUVI5MlFRSjBhaWdDQUNJSVJuSWJJUUFnQlVFQmRDRUZJQWdFUUNBQUlRWWdDQ0VBREFFTEN3VkJBQ0VBUVFBaEF3c2dBQ0FEY2dSL0lBQWhCU0FEQlNBQklBUkJBaUFIZENJQVFRQWdBR3R5Y1NJQVJRMEVHaUFBUVFBZ0FHdHhRWDlxSWdCQkRIWkJFSEVpQXlBQUlBTjJJZ0JCQlhaQkNIRWlBM0lnQUNBRGRpSUFRUUoyUVFSeElnTnlJQUFnQTNZaUFFRUJka0VDY1NJRGNpQUFJQU4ySWdCQkFYWkJBWEVpQTNJZ0FDQURkbXBCQW5SQnZKa0NhaWdDQUNFRlFRQUxJUUFnQlFSL0lBSWhBeUFGSVFJTUFRVWdBQ0VGSUFJTElRTU1BUXNnQUNFRkEwQUNmeUFDS0FJRUlRMGdBaWdDRUNJQVJRUkFJQUlvQWhRaEFBc2dEUXRCZUhFZ0FXc2lDQ0FEU1NFR0lBZ2dBeUFHR3lFRElBSWdCU0FHR3lFRklBQUVRQ0FBSVFJTUFRc0xDeUFGQkg4Z0EwR1Vsd0lvQWdBZ0FXdEpCSDhnQVNBRmFpSUhJQVZMQkg4Z0JTZ0NHQ0VKSUFVb0Fnd2lBQ0FGUmdSQUFrQWdCVUVVYWlJQ0tBSUFJZ0JGQkVBZ0JVRVFhaUlDS0FJQUlnQkZCRUJCQUNFQURBSUxDd05BQWtBZ0FFRVVhaUlHS0FJQUlnaEZCRUFnQUVFUWFpSUdLQUlBSWdoRkRRRUxJQVloQWlBSUlRQU1BUXNMSUFKQkFEWUNBQXNGSUFVb0FnZ2lBaUFBTmdJTUlBQWdBallDQ0FzZ0NRUkFBa0FnQlNnQ0hDSUNRUUowUWJ5WkFtb2lCaWdDQUNBRlJnUkFJQVlnQURZQ0FDQUFSUVJBUVpDWEFpQUVRUUVnQW5SQmYzTnhJZ0EyQWdBTUFnc0ZJQWxCRUdvaUFpQUpRUlJxSUFJb0FnQWdCVVliSUFBMkFnQWdBRVVFUUNBRUlRQU1BZ3NMSUFBZ0NUWUNHQ0FGS0FJUUlnSUVRQ0FBSUFJMkFoQWdBaUFBTmdJWUN5QUZLQUlVSWdJRVFDQUFJQUkyQWhRZ0FpQUFOZ0lZQ3lBRUlRQUxCU0FFSVFBTElBTkJFRWtFUUNBRklBRWdBMm9pQUVFRGNqWUNCQ0FBSUFWcUlnQWdBQ2dDQkVFQmNqWUNCQVVDUUNBRklBRkJBM0kyQWdRZ0J5QURRUUZ5TmdJRUlBTWdCMm9nQXpZQ0FDQURRUU4ySVFFZ0EwR0FBa2tFUUNBQlFRTjBRYlNYQW1vaEFFR01sd0lvQWdBaUFrRUJJQUYwSWdGeEJIOGdBRUVJYWlJQklRSWdBU2dDQUFWQmpKY0NJQUVnQW5JMkFnQWdBRUVJYWlFQ0lBQUxJUUVnQWlBSE5nSUFJQUVnQnpZQ0RDQUhJQUUyQWdnZ0J5QUFOZ0lNREFFTElBTkJDSFlpQVFSL0lBTkIvLy8vQjBzRWYwRWZCU0FCSUFGQmdQNC9ha0VRZGtFSWNTSUVkQ0lDUVlEZ0gycEJFSFpCQkhFaEFTQUNJQUYwSWdaQmdJQVBha0VRZGtFQ2NTRUNJQU5CRGlBQklBUnlJQUp5YXlBR0lBSjBRUTkyYWlJQlFRZHFka0VCY1NBQlFRRjBjZ3NGUVFBTElnRkJBblJCdkprQ2FpRUNJQWNnQVRZQ0hDQUhRUUEyQWhRZ0IwRUFOZ0lRSUFCQkFTQUJkQ0lFY1VVRVFFR1Fsd0lnQUNBRWNqWUNBQ0FDSUFjMkFnQWdCeUFDTmdJWUlBY2dCellDRENBSElBYzJBZ2dNQVFzZ0FpZ0NBQ0lBS0FJRVFYaHhJQU5HQkVBZ0FDRUJCUUpBSUFOQkFFRVpJQUZCQVhacklBRkJIMFliZENFQ0EwQWdBRUVRYWlBQ1FSOTJRUUowYWlJRUtBSUFJZ0VFUUNBQ1FRRjBJUUlnQVNnQ0JFRjRjU0FEUmcwQ0lBRWhBQXdCQ3dzZ0JDQUhOZ0lBSUFjZ0FEWUNHQ0FISUFjMkFnd2dCeUFITmdJSURBSUxDeUFCS0FJSUlnQWdCellDRENBQklBYzJBZ2dnQnlBQU5nSUlJQWNnQVRZQ0RDQUhRUUEyQWhnTEN5QUtKQUFnQlVFSWFnOEZJQUVMQlNBQkN3VWdBUXNGSUFFTEN3c0xJUUFDUUVHVWx3SW9BZ0FpQWlBQVR3UkFRYUNYQWlnQ0FDRUJJQUlnQUdzaUEwRVBTd1JBUWFDWEFpQUFJQUZxSWdRMkFnQkJsSmNDSUFNMkFnQWdCQ0FEUVFGeU5nSUVJQUVnQW1vZ0F6WUNBQ0FCSUFCQkEzSTJBZ1FGUVpTWEFrRUFOZ0lBUWFDWEFrRUFOZ0lBSUFFZ0FrRURjallDQkNBQklBSnFJZ0FnQUNnQ0JFRUJjallDQkFzTUFRc0NRRUdZbHdJb0FnQWlBaUFBU3dSQVFaaVhBaUFDSUFCcklnSTJBZ0FNQVF0QjVKb0NLQUlBQkg5QjdKb0NLQUlBQlVIc21nSkJnQ0EyQWdCQjZKb0NRWUFnTmdJQVFmQ2FBa0YvTmdJQVFmU2FBa0YvTmdJQVFmaWFBa0VBTmdJQVFjaWFBa0VBTmdJQVFlU2FBaUFKUVhCeFFkaXExYW9GY3pZQ0FFR0FJQXNpQVNBQVFTOXFJZ1pxSWdoQkFDQUJheUlKY1NJRklBQk5CRUFnQ2lRQVFRQVBDMEhFbWdJb0FnQWlBUVJBUWJ5YUFpZ0NBQ0lESUFWcUlnUWdBMDBnQkNBQlMzSUVRQ0FLSkFCQkFBOExDeUFBUVRCcUlRY0NRQUpBUWNpYUFpZ0NBRUVFY1FSQVFRQWhBZ1VDUUFKQUFrQkJwSmNDS0FJQUlnTkZEUUJCekpvQ0lRRURRQUpBSUFFb0FnQWlCQ0FEVFFSQUlBUWdBU0lFS0FJRWFpQURTdzBCQ3lBQktBSUlJZ0VOQVF3Q0N3c2dDQ0FDYXlBSmNTSUNRZi8vLy84SFNRUkFJQUlRTFNFRElBTWdBU2dDQUNBRUtBSUVha2NOQWlBRFFYOUhCRUFnQXlFQkRBWUxCVUVBSVFJTERBSUxRUUFRTFNJQlFYOUdCSDlCQUFWQnZKb0NLQUlBSWdRZ0FVSG9tZ0lvQWdBaUFrRi9haUlEYWtFQUlBSnJjU0FCYTBFQUlBRWdBM0ViSUFWcUlnSnFJUU1nQWtILy8vLy9CMGtnQWlBQVMzRUVmMEhFbWdJb0FnQWlDQVJBSUFNZ0JFMGdBeUFJUzNJRVFFRUFJUUlNQlFzTElBRWdBaEF0SWdOR0RRVU1BZ1ZCQUFzTElRSU1BUXNnQXlFQklBRkJmMGNnQWtILy8vLy9CMGx4SUFjZ0FrdHhSUVJBSUFGQmYwWUVRRUVBSVFJTUFnVU1CQXNBQzBIc21nSW9BZ0FpQXlBR0lBSnJha0VBSUFOcmNTSURRZi8vLy84SFR3MENRUUFnQW1zaEJDQURFQzFCZjBZRWZ5QUVFQzBhUVFBRklBSWdBMm9oQWd3REN5RUNDMEhJbWdKQnlKb0NLQUlBUVFSeU5nSUFDeUFGUWYvLy8vOEhTUVJBSUFVUUxTRUJRUUFRTFNJRElBRnJJZ1VnQUVFb2Frc2hCQ0FGSUFJZ0JCc2hBaUFFUVFGeklBRkJmMFp5SUFGQmYwY2dBMEYvUjNFZ0FTQURTWEZCQVhOeVJRMEJDd3dCQzBHOG1nSkJ2Sm9DS0FJQUlBSnFJZ00yQWdBZ0EwSEFtZ0lvQWdCTEJFQkJ3Sm9DSUFNMkFnQUxRYVNYQWlnQ0FDSUZCRUFDUUVITW1nSWhBd0pBQWtBRFFDQURLQUlBSWdZZ0F5SUVLQUlFSWdocUlBRkdEUUVnQXlnQ0NDSUREUUFMREFFTElBTW9BZ3hCQ0hGRkJFQWdCaUFGVFNBQklBVkxjUVJBSUFRZ0FpQUlhallDQkNBRlFRQWdCVUVJYWlJQmEwRUhjVUVBSUFGQkIzRWJJZ05xSVFGQm1KY0NLQUlBSUFKcUlnUWdBMnNoQWtHa2x3SWdBVFlDQUVHWWx3SWdBallDQUNBQklBSkJBWEkyQWdRZ0JDQUZha0VvTmdJRVFhaVhBa0gwbWdJb0FnQTJBZ0FNQXdzTEN5QUJRWnlYQWlnQ0FFa0VRRUdjbHdJZ0FUWUNBQXNnQVNBQ2FpRUVRY3lhQWlFREFrQUNRQU5BSUFNb0FnQWdCRVlOQVNBREtBSUlJZ01OQUFzTUFRc2dBeWdDREVFSWNVVUVRQ0FESUFFMkFnQWdBeUFES0FJRUlBSnFOZ0lFUVFBZ0FVRUlhaUlDYTBFSGNVRUFJQUpCQjNFYklBRnFJZ2tnQUdvaEJpQUVRUUFnQkVFSWFpSUJhMEVIY1VFQUlBRkJCM0ViYWlJQ0lBbHJJQUJySVFNZ0NTQUFRUU55TmdJRUlBSWdCVVlFUUVHWWx3SkJtSmNDS0FJQUlBTnFJZ0EyQWdCQnBKY0NJQVkyQWdBZ0JpQUFRUUZ5TmdJRUJRSkFRYUNYQWlnQ0FDQUNSZ1JBUVpTWEFrR1Vsd0lvQWdBZ0Eyb2lBRFlDQUVHZ2x3SWdCallDQUNBR0lBQkJBWEkyQWdRZ0FDQUdhaUFBTmdJQURBRUxJQUlvQWdRaUIwRURjVUVCUmdSQUlBZEJBM1loQkNBSFFZQUNTUVJBSUFJb0FnZ2lBQ0FDS0FJTUlnRkdCRUJCakpjQ1FZeVhBaWdDQUVFQklBUjBRWDl6Y1RZQ0FBVWdBQ0FCTmdJTUlBRWdBRFlDQ0FzRkFrQWdBaWdDR0NFSUlBSW9BZ3dpQUNBQ1JnUkFBa0FnQWtFUWFpSUJRUVJxSWdRb0FnQWlBQVJBSUFRaEFRVWdBU2dDQUNJQVJRUkFRUUFoQUF3Q0N3c0RRQUpBSUFCQkZHb2lCQ2dDQUNJRlJRUkFJQUJCRUdvaUJDZ0NBQ0lGUlEwQkN5QUVJUUVnQlNFQURBRUxDeUFCUVFBMkFnQUxCU0FDS0FJSUlnRWdBRFlDRENBQUlBRTJBZ2dMSUFoRkRRQWdBaWdDSENJQlFRSjBRYnlaQW1vaUJDZ0NBQ0FDUmdSQUFrQWdCQ0FBTmdJQUlBQU5BRUdRbHdKQmtKY0NLQUlBUVFFZ0FYUkJmM054TmdJQURBSUxCU0FJUVJCcUlnRWdDRUVVYWlBQktBSUFJQUpHR3lBQU5nSUFJQUJGRFFFTElBQWdDRFlDR0NBQ0tBSVFJZ0VFUUNBQUlBRTJBaEFnQVNBQU5nSVlDeUFDS0FJVUlnRkZEUUFnQUNBQk5nSVVJQUVnQURZQ0dBc0xJQUlnQjBGNGNTSUFhaUVDSUFBZ0Eyb2hBd3NnQWlBQ0tBSUVRWDV4TmdJRUlBWWdBMEVCY2pZQ0JDQURJQVpxSUFNMkFnQWdBMEVEZGlFQklBTkJnQUpKQkVBZ0FVRURkRUcwbHdKcUlRQkJqSmNDS0FJQUlnSkJBU0FCZENJQmNRUi9JQUJCQ0dvaUFTRUNJQUVvQWdBRlFZeVhBaUFCSUFKeU5nSUFJQUJCQ0dvaEFpQUFDeUVCSUFJZ0JqWUNBQ0FCSUFZMkFnd2dCaUFCTmdJSUlBWWdBRFlDREF3QkN5QURRUWgySWdBRWZ5QURRZi8vL3dkTEJIOUJId1VnQUNBQVFZRCtQMnBCRUhaQkNIRWlBblFpQVVHQTRCOXFRUkIyUVFSeElRQWdBU0FBZENJRVFZQ0FEMnBCRUhaQkFuRWhBU0FEUVE0Z0FDQUNjaUFCY21zZ0JDQUJkRUVQZG1vaUFFRUhhblpCQVhFZ0FFRUJkSElMQlVFQUN5SUJRUUowUWJ5WkFtb2hBQ0FHSUFFMkFod2dCa0VBTmdJVUlBWkJBRFlDRUVHUWx3SW9BZ0FpQWtFQklBRjBJZ1J4UlFSQVFaQ1hBaUFDSUFSeU5nSUFJQUFnQmpZQ0FDQUdJQUEyQWhnZ0JpQUdOZ0lNSUFZZ0JqWUNDQXdCQ3lBQUtBSUFJZ0FvQWdSQmVIRWdBMFlFUUNBQUlRRUZBa0FnQTBFQVFSa2dBVUVCZG1zZ0FVRWZSaHQwSVFJRFFDQUFRUkJxSUFKQkgzWkJBblJxSWdRb0FnQWlBUVJBSUFKQkFYUWhBaUFCS0FJRVFYaHhJQU5HRFFJZ0FTRUFEQUVMQ3lBRUlBWTJBZ0FnQmlBQU5nSVlJQVlnQmpZQ0RDQUdJQVkyQWdnTUFnc0xJQUVvQWdnaUFDQUdOZ0lNSUFFZ0JqWUNDQ0FHSUFBMkFnZ2dCaUFCTmdJTUlBWkJBRFlDR0FzTElBb2tBQ0FKUVFocUR3c0xRY3lhQWlFREEwQUNRQ0FES0FJQUlnUWdCVTBFUUNBRUlBTW9BZ1JxSWdRZ0JVc05BUXNnQXlnQ0NDRUREQUVMQ3lBRVFWRnFJZ1pCQ0dvaEEwR2tsd0pCQUNBQlFRaHFJZ2hyUVFkeFFRQWdDRUVIY1JzaUNDQUJhaUlKTmdJQVFaaVhBaUFDUVZocUlnY2dDR3NpQ0RZQ0FDQUpJQWhCQVhJMkFnUWdBU0FIYWtFb05nSUVRYWlYQWtIMG1nSW9BZ0EyQWdBZ0JTQUdRUUFnQTJ0QkIzRkJBQ0FEUVFkeEcyb2lBeUFESUFWQkVHb2lCa2tiSWdOQkd6WUNCQ0FEUWN5YUFpa0NBRGNDQ0NBRFFkU2FBaWtDQURjQ0VFSE1tZ0lnQVRZQ0FFSFFtZ0lnQWpZQ0FFSFltZ0pCQURZQ0FFSFVtZ0lnQTBFSWFqWUNBQ0FEUVJocUlRRURRQ0FCUVFScUlnSkJCellDQUNBQlFRaHFJQVJKQkVBZ0FpRUJEQUVMQ3lBRElBVkhCRUFnQXlBREtBSUVRWDV4TmdJRUlBVWdBeUFGYXlJRVFRRnlOZ0lFSUFNZ0JEWUNBQ0FFUVFOMklRSWdCRUdBQWtrRVFDQUNRUU4wUWJTWEFtb2hBVUdNbHdJb0FnQWlBMEVCSUFKMElnSnhCSDhnQVVFSWFpSUNJUU1nQWlnQ0FBVkJqSmNDSUFJZ0EzSTJBZ0FnQVVFSWFpRURJQUVMSVFJZ0F5QUZOZ0lBSUFJZ0JUWUNEQ0FGSUFJMkFnZ2dCU0FCTmdJTURBSUxJQVJCQ0hZaUFRUi9JQVJCLy8vL0Iwc0VmMEVmQlNBQklBRkJnUDQvYWtFUWRrRUljU0lEZENJQ1FZRGdIMnBCRUhaQkJIRWhBU0FDSUFGMElnaEJnSUFQYWtFUWRrRUNjU0VDSUFSQkRpQUJJQU55SUFKeWF5QUlJQUowUVE5MmFpSUJRUWRxZGtFQmNTQUJRUUYwY2dzRlFRQUxJZ0pCQW5SQnZKa0NhaUVCSUFVZ0FqWUNIQ0FGUVFBMkFoUWdCa0VBTmdJQVFaQ1hBaWdDQUNJRFFRRWdBblFpQm5GRkJFQkJrSmNDSUFNZ0JuSTJBZ0FnQVNBRk5nSUFJQVVnQVRZQ0dDQUZJQVUyQWd3Z0JTQUZOZ0lJREFJTElBRW9BZ0FpQVNnQ0JFRjRjU0FFUmdSQUlBRWhBZ1VDUUNBRVFRQkJHU0FDUVFGMmF5QUNRUjlHRzNRaEF3TkFJQUZCRUdvZ0EwRWZka0VDZEdvaUJpZ0NBQ0lDQkVBZ0EwRUJkQ0VESUFJb0FnUkJlSEVnQkVZTkFpQUNJUUVNQVFzTElBWWdCVFlDQUNBRklBRTJBaGdnQlNBRk5nSU1JQVVnQlRZQ0NBd0RDd3NnQWlnQ0NDSUJJQVUyQWd3Z0FpQUZOZ0lJSUFVZ0FUWUNDQ0FGSUFJMkFnd2dCVUVBTmdJWUN3c0ZRWnlYQWlnQ0FDSURSU0FCSUFOSmNnUkFRWnlYQWlBQk5nSUFDMEhNbWdJZ0FUWUNBRUhRbWdJZ0FqWUNBRUhZbWdKQkFEWUNBRUd3bHdKQjVKb0NLQUlBTmdJQVFheVhBa0YvTmdJQVFjQ1hBa0cwbHdJMkFnQkJ2SmNDUWJTWEFqWUNBRUhJbHdKQnZKY0NOZ0lBUWNTWEFrRzhsd0kyQWdCQjBKY0NRY1NYQWpZQ0FFSE1sd0pCeEpjQ05nSUFRZGlYQWtITWx3STJBZ0JCMUpjQ1FjeVhBallDQUVIZ2x3SkIxSmNDTmdJQVFkeVhBa0hVbHdJMkFnQkI2SmNDUWR5WEFqWUNBRUhrbHdKQjNKY0NOZ0lBUWZDWEFrSGtsd0kyQWdCQjdKY0NRZVNYQWpZQ0FFSDRsd0pCN0pjQ05nSUFRZlNYQWtIc2x3STJBZ0JCZ0pnQ1FmU1hBallDQUVIOGx3SkI5SmNDTmdJQVFZaVlBa0g4bHdJMkFnQkJoSmdDUWZ5WEFqWUNBRUdRbUFKQmhKZ0NOZ0lBUVl5WUFrR0VtQUkyQWdCQm1KZ0NRWXlZQWpZQ0FFR1VtQUpCakpnQ05nSUFRYUNZQWtHVW1BSTJBZ0JCbkpnQ1FaU1lBallDQUVHb21BSkJuSmdDTmdJQVFhU1lBa0djbUFJMkFnQkJzSmdDUWFTWUFqWUNBRUdzbUFKQnBKZ0NOZ0lBUWJpWUFrR3NtQUkyQWdCQnRKZ0NRYXlZQWpZQ0FFSEFtQUpCdEpnQ05nSUFRYnlZQWtHMG1BSTJBZ0JCeUpnQ1FieVlBallDQUVIRW1BSkJ2SmdDTmdJQVFkQ1lBa0hFbUFJMkFnQkJ6SmdDUWNTWUFqWUNBRUhZbUFKQnpKZ0NOZ0lBUWRTWUFrSE1tQUkyQWdCQjRKZ0NRZFNZQWpZQ0FFSGNtQUpCMUpnQ05nSUFRZWlZQWtIY21BSTJBZ0JCNUpnQ1FkeVlBallDQUVId21BSkI1SmdDTmdJQVFleVlBa0hrbUFJMkFnQkIrSmdDUWV5WUFqWUNBRUgwbUFKQjdKZ0NOZ0lBUVlDWkFrSDBtQUkyQWdCQi9KZ0NRZlNZQWpZQ0FFR0ltUUpCL0pnQ05nSUFRWVNaQWtIOG1BSTJBZ0JCa0prQ1FZU1pBallDQUVHTW1RSkJoSmtDTmdJQVFaaVpBa0dNbVFJMkFnQkJsSmtDUVl5WkFqWUNBRUdnbVFKQmxKa0NOZ0lBUVp5WkFrR1VtUUkyQWdCQnFKa0NRWnlaQWpZQ0FFR2ttUUpCbkprQ05nSUFRYkNaQWtHa21RSTJBZ0JCckprQ1FhU1pBallDQUVHNG1RSkJySmtDTmdJQVFiU1pBa0dzbVFJMkFnQkJwSmNDUVFBZ0FVRUlhaUlEYTBFSGNVRUFJQU5CQjNFYklnTWdBV29pQkRZQ0FFR1lsd0lnQWtGWWFpSUNJQU5ySWdNMkFnQWdCQ0FEUVFGeU5nSUVJQUVnQW1wQktEWUNCRUdvbHdKQjlKb0NLQUlBTmdJQUMwR1lsd0lvQWdBaUFTQUFTd1JBUVppWEFpQUJJQUJySWdJMkFnQU1BZ3NMUVlpWEFrRXdOZ0lBSUFva0FFRUFEd3RCcEpjQ1FhU1hBaWdDQUNJQklBQnFJZ00yQWdBZ0F5QUNRUUZ5TmdJRUlBRWdBRUVEY2pZQ0JBc2dDaVFBSUFGQkNHb0xZZ0VDZnlBQUxBQUFJZ01FUUFKQUEzOGdBU3dBQUNJRUlBTkJHSFJCR0hWR0lBUkJBRWNnQWtGL2FpSUNRUUJIY1hGRkRRRWdBVUVCYWlFQklBQkJBV29pQUN3QUFDSUREUUJCQUFzaEF3c0ZRUUFoQXdzZ0EwSC9BWEVnQVMwQUFHc0xqZ0VCQTM4Q1FBSkFJQUFpQWtFRGNVVU5BQ0FDSVFFRFFBSkFJQUFzQUFCRkJFQWdBU0VBREFFTElBQkJBV29pQUNJQlFRTnhEUUVNQWdzTERBRUxBMEFnQUVFRWFpRUJJQUFvQWdBaUEwR0FnWUtFZUhGQmdJR0NoSGh6SUFOQi8vMzdkMnB4UlFSQUlBRWhBQXdCQ3dzZ0EwSC9BWEVFUUFOQUlBQkJBV29pQUN3QUFBMEFDd3NMSUFBZ0Ftc0xMZ0FnQUNBQklBSkIvd0Z4SWdJUVZ5QUFRU2hxSUFGQktHb2dBaEJYSUFCQjBBQnFJQUZCMEFCcUlBSVFWd3NKQUNBQUlBRVFxZ0VMQ1FBZ0FDQUJFS2dCQ3d3QUlBQWdBU0FDRUJsQkFBc1JBQ0FBSUFGelFmOEJjVUYvYWtFZmRnc0lBQ0FBUVNBUUh3dEVBUU4vQW44akFDRUVJd0JCUDJwQlFIRWtBQ01BSVFJakFFSEFCV29rQUNBQUlBSVEyd0lnQVNBQVFjQUFFS3NCSUFKQndBVVFDaUFBUWRBQkVBb2dCQXNrQUF1TUFRRUpmeUFCS0FJRUlRSWdBU2dDQ0NFRElBRW9BZ3doQkNBQktBSVFJUVVnQVNnQ0ZDRUdJQUVvQWhnaEJ5QUJLQUljSVFnZ0FTZ0NJQ0VKSUFFb0FpUWhDaUFBSUFFb0FnQTJBZ0FnQUNBQ05nSUVJQUFnQXpZQ0NDQUFJQVEyQWd3Z0FDQUZOZ0lRSUFBZ0JqWUNGQ0FBSUFjMkFoZ2dBQ0FJTmdJY0lBQWdDVFlDSUNBQUlBbzJBaVFMWWdFQ2Z5QUJJQUJJSUFBZ0FTQUNha2h4QkVBQ2Z5QUFJUVFnQVNBQ2FpRUJJQUFnQW1vaEFBTkFJQUpCQUVvRVFDQUNRUUZySVFJZ0FFRUJheUlBSUFGQkFXc2lBU3dBQURvQUFBd0JDd3NnQkFzaEFBVWdBQ0FCSUFJUUdCb0xJQUFMTndFQmZ5QUFRWUNqQWlnQ0FDSUJhaUlBRUFaTEJFQWdBQkFFUlFSQVFZaVhBa0V3TmdJQVFYOFBDd3RCZ0tNQ0lBQTJBZ0FnQVF2SEF3RURmd0ovSXdBaEJDTUFRVDlxUVVCeEpBQWpBQ0VDSXdCQk1Hb2tBQ0FDSUFFUXZnRWdBQ0FDS0FJQUlnRTZBQUFnQUNBQlFRaDJPZ0FCSUFBZ0FVRVFkam9BQWlBQUlBRkJHSFlnQWlnQ0JDSUJRUUowY2pvQUF5QUFJQUZCQm5ZNkFBUWdBQ0FCUVE1Mk9nQUZJQUFnQVVFV2RpQUNLQUlJSWdGQkEzUnlPZ0FHSUFBZ0FVRUZkam9BQnlBQUlBRkJEWFk2QUFnZ0FDQUJRUlYySUFJb0Fnd2lBVUVGZEhJNkFBa2dBQ0FCUVFOMk9nQUtJQUFnQVVFTGRqb0FDeUFBSUFGQkUzWWdBaWdDRUNJQlFRWjBjam9BRENBQUlBRkJBblk2QUEwZ0FDQUJRUXAyT2dBT0lBQWdBVUVTZGpvQUR5QUFJQUlvQWhRaUFUb0FFQ0FBSUFGQkNIWTZBQkVnQUNBQlFSQjJPZ0FTSUFBZ0FVRVlkaUFDS0FJWUlnRkJBWFJ5T2dBVElBQWdBVUVIZGpvQUZDQUFJQUZCRDNZNkFCVWdBQ0FCUVJkMklBSW9BaHdpQVVFRGRISTZBQllnQUNBQlFRVjJPZ0FYSUFBZ0FVRU5kam9BR0NBQUlBRkJGWFlnQWlnQ0lDSUJRUVIwY2pvQUdTQUFJQUZCQkhZNkFCb2dBQ0FCUVF4Mk9nQWJJQUFnQVVFVWRpQUNLQUlrSWdGQkJuUnlPZ0FjSUFBZ0FVRUNkam9BSFNBQUlBRkJDblk2QUI0Z0FDQUJRUkoyT2dBZklBUUxKQUFMS1FCQ2dJQ0FnQkFnQWtJL2ZFSUdpSDBnQksxVUJFQVFBQVVnQUNBQklBSWdBeUFFSUFVUVlRc0xEQUFnQUNBQlFZQUlFQmdhQ3dRQVFRQUxNZ0VDZndOQUlBSkJBM1FnQUdvaUF5QUNRUU4wSUFGcUtRTUFJQU1wQXdDRk53TUFJQUpCQVdvaUFrR0FBVWNOQUFzTEJRQkJ3QUFMSlFBZ0FFSUFOd0lBSUFCQ0FEY0NDQ0FBUWdBM0FoQWdBRUlBTndJWUlBQkNBRGNDSUF0L0FRZC9BbjhqQUNFSUl3QkJQMnBCUUhFa0FDTUFJUVFqQUVFd2FpUUFJQUFnQVJBTklBQkIwQUJxSWdJZ0FVRW9haUlIRUEwZ0FFSDRBR29pQlNBQlFkQUFhaEM1QVNBQVFTaHFJZ01nQVNBSEVCTWdCQ0FERUEwZ0F5QUNJQUFRRXlBQ0lBSWdBQkFWSUFBZ0JDQURFQlVnQlNBRklBSVFGU0FJQ3lRQUN4c0FJQUZDLy8vLy93OVdCRUFRQUFVZ0FDQUJJQUlnQXhCaUN3c0VBRUZ2Qy9nQkFRUi9BbjhqQUNFUEl3QkJQMnBCUUhFa0FDTUFJUXdqQUVGQWF5UUFJQWdRSVNJTkJFQUNRQ0FNSUEwMkFnQWdEQ0FJTmdJRUlBd2dBellDQ0NBTUlBUTJBZ3dnRENBRk5nSVFJQXdnQmpZQ0ZDQU1RZ0EzQWhnZ0RFSUFOd0lnSUF3Z0FEWUNLQ0FNSUFFMkFpd2dEQ0FDTmdJd0lBd2dBallDTkNBTVFRQTJBamdnRENBTEVNUUNJZ0FFUUNBTklBZ1FDaUFORUJZTUFRc2dCd1JBSUFjZ0RTQUlFQmdhQ3lBSlFRQkhJQXBCQUVkeEJFQWdDU0FLSUF3Z0N4REpBZ1JBSUEwZ0NCQUtJQWtnQ2hBS0lBMFFGa0ZoSVFBTUFnc0xJQTBnQ0JBS0lBMFFGa0VBSVFBTEJVRnFJUUFMSUE4TEpBQWdBQXMzQVFOL0FuOGpBQ0VGSXdCQlAycEJRSEVrQUNNQUlRTWpBRUhRQVdva0FDQURFRG9nQXlBQklBSVFIU0FESUFBUUtpQUZDeVFBQzNjQkFYOGdBRUZBYXlJQlFnQTNBd0FnQVVJQU53TUlJQUJCMElRQ0tRTUFOd01BSUFCQjJJUUNLUU1BTndNSUlBQkI0SVFDS1FNQU53TVFJQUJCNklRQ0tRTUFOd01ZSUFCQjhJUUNLUU1BTndNZ0lBQkIrSVFDS1FNQU53TW9JQUJCZ0lVQ0tRTUFOd013SUFCQmlJVUNLUU1BTndNNEM5Y0NBZ1YvQVg0Z0FrSUFVZ1JBQWtBZ0FFSGdBR29oQXlBQVFlQUJhaUVFSUFBb0FPQUNJUVVEUUFKQUlBVWdBRUhnQUdwcUlRY2dBa0dBQWlBRmF5SUdyU0lJV0EwQUlBY2dBU0FHRUJnYUlBQWdBQ2dBNEFJZ0JtbzJBT0FDSUFCQ2dBRVFkQ0FBSUFNUWR5QURJQVFwQUFBM0FBQWdBeUFFS1FBSU53QUlJQU1nQkNrQUVEY0FFQ0FESUFRcEFCZzNBQmdnQXlBRUtRQWdOd0FnSUFNZ0JDa0FLRGNBS0NBRElBUXBBREEzQURBZ0F5QUVLUUE0TndBNElBTkJRR3NnQkVGQWF5a0FBRGNBQUNBRElBUXBBRWczQUVnZ0F5QUVLUUJRTndCUUlBTWdCQ2tBV0RjQVdDQURJQVFwQUdBM0FHQWdBeUFFS1FCb053Qm9JQU1nQkNrQWNEY0FjQ0FESUFRcEFIZzNBSGdnQUNBQUtBRGdBa0dBZjJvaUJUWUE0QUlnQWlBSWZTSUNRZ0JSRFFJZ0FTQUdhaUVCREFFTEN5QUhJQUVnQXFjaUFSQVlHaUFBSUFBb0FPQUNJQUZxTmdEZ0Fnc0xDNXdGQVJKL0lBSW9BQWdoQnlBQ0tBQU1JUWdnQWlnQUVDRUZJQUlvQUJRaEJrSGw4TUdMQmlFRVFlN0lnWmtESVFNZ0FpZ0FHQ0VRSUFJb0FCd2hFU0FCS0FBQUlRb2dBU2dBQkNFTElBRW9BQWdoQ1NBQktBQU1JUTFCc3RxSXl3Y2hERUgweW9IWkJpRU9JQUlvQUFBaEFTQUNLQUFFSVFJRFFDQUJJQVVnQVNBRWFpSUJJQXB6UVJBUUNDSUZhaUlFYzBFTUVBZ2lDaUFFSUFVZ0FTQUthaUlGYzBFSUVBZ2lDbW9pRDNOQkJ4QUlJUUVnQWlBR0lBSWdBMm9pQWlBTGMwRVFFQWdpQm1vaUJITkJEQkFJSWdNZ0JDQUdJQUlnQTJvaUJuTkJDQkFJSWd0cUloSnpRUWNRQ0NFQ0lBY2dCeUFNYWlJSElBbHpRUkFRQ0NJRUlCQnFJZ056UVF3UUNDSUpJQU1nQnlBSmFpSUpJQVJ6UVFnUUNDSVRhaUlFYzBFSEVBZ2hCeUFJSUFnZ0Rtb2lDQ0FOYzBFUUVBZ2lBeUFSYWlJTmMwRU1FQWdpRENBTklBZ2dER29pRGlBRGMwRUlFQWdpQTJvaURITkJCeEFJSVFnZ0FpQUVJQUlnQldvaUFpQURjMEVRRUFnaUJXb2lBM05CREJBSUlnUWdBeUFDSUFScUlnUWdCWE5CQ0JBSUlnMXFJaEJ6UVFjUUNDRUNJQWNnRENBR0lBZHFJZ2NnQ25OQkVCQUlJZ1ZxSWdaelFRd1FDQ0lESUFZZ0F5QUhhaUlESUFWelFRZ1FDQ0lLYWlJUmMwRUhFQWdoQnlBSUlBOGdDQ0FKYWlJSUlBdHpRUkFRQ0NJRmFpSUdjMEVNRUFnaUN5QUdJQWdnQzJvaURDQUZjMEVJRUFnaUMyb2lCWE5CQnhBSUlRZ2dBU0FTSUFFZ0Rtb2lBU0FUYzBFUUVBZ2lCbW9pRDNOQkRCQUlJZ2tnRHlBQklBbHFJZzRnQm5OQkNCQUlJZ2xxSWdaelFRY1FDQ0VCSUJSQkFXb2lGRUVLUncwQUN5QUFJQVFRQ3lBQVFRUnFJQU1RQ3lBQVFRaHFJQXdRQ3lBQVFReHFJQTRRQ3lBQVFSQnFJQW9RQ3lBQVFSUnFJQXNRQ3lBQVFSaHFJQWtRQ3lBQVFSeHFJQTBRQ3dzeUFRTi9BbjhqQUNFRUl3QkJQMnBCUUhFa0FDTUFJUUlqQUVHQUFXb2tBQ0FDSUFFUXVBRWdBQ0FDRURVZ0JBc2tBQXN5QVFGL0lBQWdBU0FCUWZnQWFpSUNFQXdnQUVFb2FpQUJRU2hxSUFGQjBBQnFJZ0VRRENBQVFkQUFhaUFCSUFJUURBdWZBd0VHZndKL0l3QWhCeU1BUVQ5cVFVQnhKQUFqQUNFRUl3QkJ3QUZxSkFBZ0JFR1FBV29pQlNBQkVBMGdCRUhnQUdvaUF5QUZFQTBnQXlBREVBMGdBeUFCSUFNUURDQUZJQVVnQXhBTUlBUkJNR29pQWlBRkVBMGdBeUFESUFJUURDQUNJQU1RRFVFQklRRURRQ0FDSUFJUURTQUJRUUZxSWdGQkJVY05BQXNnQXlBQ0lBTVFEQ0FDSUFNUURVRUJJUUVEUUNBQ0lBSVFEU0FCUVFGcUlnRkJDa2NOQUFzZ0FpQUNJQU1RRENBRUlBSVFEVUVCSVFFRFFDQUVJQVFRRFNBQlFRRnFJZ0ZCRkVjTkFBc2dBaUFFSUFJUURDQUNJQUlRRFVFQklRRURRQ0FDSUFJUURTQUJRUUZxSWdGQkNrY05BQXNnQXlBQ0lBTVFEQ0FDSUFNUURVRUJJUUVEUUNBQ0lBSVFEU0FCUVFGcUlnRkJNa2NOQUFzZ0FpQUNJQU1RRENBRUlBSVFEVUVCSVFFRFFDQUVJQVFRRFNBQlFRRnFJZ0ZCNUFCSERRQUxJQUlnQkNBQ0VBd2dBaUFDRUExQkFTRUJBMEFnQWlBQ0VBMGdBVUVCYWlJQlFUSkhEUUFMSUFNZ0FpQURFQXdnQXlBREVBMUJBU0VCQTBBZ0F5QURFQTBnQVVFQmFpSUJRUVZIRFFBTElBQWdBeUFGRUF3Z0J3c2tBQXNhQUNBQUlBRVErQUVpQUVFQUlBQXRBQUFnQVVIL0FYRkdHd3VMQVFFRWZ3Si9Jd0FoQmlNQVFUOXFRVUJ4SkFBakFDRURJd0JCRUdva0FDQURJQUEyQWdRZ0F5SUZJQUUyQWdBZ0EwRUFPZ0FJSUFJRVFFRUFJUUFEUUNBRElBTXNBQWdnQXlnQ0JDQUFhaXdBQUNBRktBSUFJQUJxTEFBQWMzSTZBQWdnQUVFQmFpSUFJQUpIRFFBTEN5QURMUUFJUWY4RGFrRUlka0VCY1VGL2FpRUFJQVlMSkFBZ0FBc0VBRUVZQ3dzQUlBQWdBVUVRRUpJQkM0Y0tBU2gvQW44akFDRXJJd0JCUDJwQlFIRWtBQ01BSVE0akFFRkFheVFBSUFOQ0FGSUVRQ0FBS0FJQUlSY2dBQ2dDQkNFWUlBQW9BZ2doR1NBQUtBSU1JUm9nQUNnQ0VDRWJJQUFvQWhRaEhDQUFLQUlZSVIwZ0FDZ0NIQ0VlSUFBb0FpQWhIeUFBS0FJa0lTQWdBQ2dDS0NFaElBQW9BaXdoSWlBQUtBSTRJU01nQUNnQ1BDRWtJQUFvQWpBaEZTQUFLQUkwSVJZZ0FTRUVBMEFnQTBMQUFGUWlLQVIvSUE1Q0FEY0RBQ0FPUWdBM0F3Z2dEa0lBTndNUUlBNUNBRGNER0NBT1FnQTNBeUFnRGtJQU53TW9JQTVDQURjRE1DQU9RZ0EzQXpoQkFDRUJBMzhnQVNBT2FpQUJJQVJxTEFBQU9nQUFJQU1nQVVFQmFpSUJyVllOQUNBT0lnRWhCU0FDQ3dVZ0FpRUJJQVFoQlNBSEN5RWxRUlFoSmlBWElROGdHQ0VMSUNFaERDQWlJUWdnRlNFR0lCWWhEU0FqSVFrZ0pDRVRJQmtoRkNBYUlSQWdHeUVDSUJ3aEJ5QWRJUVFnSGlFS0lCOGhFU0FnSVJJRFFDQUNJQUlnRDJvaUFpQUdjMEVRRUFnaUR5QVJhaUlHYzBFTUVBZ2lFU0FHSUE4Z0FpQVJhaUlQYzBFSUVBZ2lFV29pS1hOQkJ4QUlJUUlnQnlBSElBdHFJZ2NnRFhOQkVCQUlJZ3NnRW1vaUJuTkJEQkFJSWcwZ0JpQUxJQWNnRFdvaUMzTkJDQkFJSWcxcUloSnpRUWNRQ0NFSElBUWdEQ0FFSUJScUlnUWdDWE5CRUJBSUlneHFJZ1p6UVF3UUNDSUpJQVlnQkNBSmFpSUpJQXh6UVFnUUNDSXFhaUlNYzBFSEVBZ2hCQ0FLSUFnZ0NpQVFhaUlLSUJOelFSQVFDQ0lJYWlJR2MwRU1FQWdpRXlBR0lBb2dFMm9pRUNBSWMwRUlFQWdpQ0dvaUJuTkJCeEFJSVFvZ0J5QU1JQWNnRDJvaUJ5QUljMEVRRUFnaUQyb2lESE5CREJBSUlnZ2dEQ0FQSUFjZ0NHb2lEM05CQ0JBSUloTnFJZ3h6UVFjUUNDRUhJQVFnQmlBRUlBdHFJZ1FnRVhOQkVCQUlJZ3RxSWdoelFRd1FDQ0lHSUFnZ0N5QUVJQVpxSWd0elFRZ1FDQ0lHYWlJSWMwRUhFQWdoQkNBS0lDa2dDU0FLYWlJS0lBMXpRUkFRQ0NJTmFpSUpjMEVNRUFnaUZDQUpJQW9nRkdvaUZDQU5jMEVJRUFnaURXb2lFWE5CQnhBSUlRb2dBaUFTSUFJZ0VHb2lBaUFxYzBFUUVBZ2lDV29pRW5OQkRCQUlJaEFnRWlBQ0lCQnFJaEFnQ1hOQkNCQUlJZ2xxSWhKelFRY1FDQ0VDSUNaQmZtb2lKZzBBQ3lBRktBQUVJQXNnR0dweklRc2dCU2dBQ0NBVUlCbHFjeUVVSUFVb0FBd2dFQ0FhYW5NaEVDQUZLQUFRSUFJZ0cycHpJUUlnQlNnQUZDQUhJQnhxY3lFSElBVW9BQmdnQkNBZGFuTWhCQ0FGS0FBY0lBb2dIbXB6SVFvZ0JTZ0FJQ0FSSUI5cWN5RVJJQVVvQUNRZ0VpQWdhbk1oRWlBRktBQW9JQXdnSVdweklRd2dCU2dBTENBSUlDSnFjeUVJSUFVb0FEQWdCaUFWYW5NaEJpQUZLQUEwSUEwZ0ZtcHpJUTBnQlNnQU9DQUpJQ05xY3lFSklBVW9BRHdnRXlBa2FuTWhFeUFWUVFGcUloVkZJQlpxSVJZZ0FTQUZLQUFBSUE4Z0YycHpFQXNnQVVFRWFpQUxFQXNnQVVFSWFpQVVFQXNnQVVFTWFpQVFFQXNnQVVFUWFpQUNFQXNnQVVFVWFpQUhFQXNnQVVFWWFpQUVFQXNnQVVFY2FpQUtFQXNnQVVFZ2FpQVJFQXNnQVVFa2FpQVNFQXNnQVVFb2FpQU1FQXNnQVVFc2FpQUlFQXNnQVVFd2FpQUdFQXNnQVVFMGFpQU5FQXNnQVVFNGFpQUpFQXNnQVVFOGFpQVRFQXNnQTBMQkFGb0VRQ0FEUWtCOElRTWdBVUZBYXlFQ0lDVWhCeUFGUVVCcklRUU1BUXNMSUNnRVFDQURweUlFQkVCQkFDRUNBMEFnQWlBbGFpQUJJQUpxTEFBQU9nQUFJQUpCQVdvaUFpQUVSdzBBQ3dzTElBQWdGVFlDTUNBQUlCWTJBalFMSUNzTEpBQUxmZ0FnQUVIbDhNR0xCallDQUNBQVFlN0lnWmtETmdJRUlBQkJzdHFJeXdjMkFnZ2dBRUgweW9IWkJqWUNEQ0FBSUFFb0FBQTJBaEFnQUNBQktBQUVOZ0lVSUFBZ0FTZ0FDRFlDR0NBQUlBRW9BQXcyQWh3Z0FDQUJLQUFRTmdJZ0lBQWdBU2dBRkRZQ0pDQUFJQUVvQUJnMkFpZ2dBQ0FCS0FBY05nSXNDNWtEQVIxL1FRQWdBbXNpQWlBQUtBSUFJZ3dnQVNnQ0FDSU5jM0VoQXlBQ0lBQW9BZ1FpRGlBQktBSUVJZzl6Y1NFRUlBSWdBU2dDQ0NJUUlBQW9BZ2dpRVhOeElRVWdBaUFCS0FJTUloSWdBQ2dDRENJVGMzRWhCaUFDSUFFb0FoQWlGQ0FBS0FJUUloVnpjU0VISUFJZ0FTZ0NGQ0lXSUFBb0FoUWlGM054SVFnZ0FpQUJLQUlZSWhnZ0FDZ0NHQ0laYzNFaENTQUNJQUVvQWh3aUdpQUFLQUljSWh0emNTRUtJQUlnQVNnQ0lDSWNJQUFvQWlBaUhYTnhJUXNnQWlBQktBSWtJaDRnQUNnQ0pDSWZjM0VoQWlBQUlBTWdESE0yQWdBZ0FDQUVJQTV6TmdJRUlBQWdCU0FSY3pZQ0NDQUFJQVlnRTNNMkFnd2dBQ0FISUJWek5nSVFJQUFnQ0NBWGN6WUNGQ0FBSUFrZ0dYTTJBaGdnQUNBS0lCdHpOZ0ljSUFBZ0N5QWRjellDSUNBQUlBSWdIM00yQWlRZ0FTQURJQTF6TmdJQUlBRWdCQ0FQY3pZQ0JDQUJJQVVnRUhNMkFnZ2dBU0FHSUJKek5nSU1JQUVnQnlBVWN6WUNFQ0FCSUFnZ0ZuTTJBaFFnQVNBSklCaHpOZ0lZSUFFZ0NpQWFjellDSENBQklBc2dISE0yQWlBZ0FTQUNJQjV6TmdJa0N3UUFRUUlMQkFCQkFRc01BQ0FBUVFCQmdBZ1FHaG9MZWdFSGZ3Si9Jd0FoQ0NNQVFUOXFRVUJ4SkFBakFDRUZJd0JCRUdva0FFRUtJUUlEUUNBQ1FYOXFJZ01nQldvaUJpQUJRUXB1SWdkQmRtd2dBV3BCTUhJNkFBQWdBMEVBUnlBQlFRbExjUVJBSUFNaEFpQUhJUUVNQVFzTElBQWdCa0VMSUFKcklnRVFHQm9nQUNBQmFrRUFPZ0FBSUFnTEpBQUx0d0VCQlg4Z0FDd0FBQ0lHUVZCcVFSaDBRUmgxUWY4QmNVRUpUQVJBQWtBZ0JpRUVJQUFoQlFOQUlBTkJtclBtekFGSklBUkJHSFJCR0hWQlVHb2lBaUFEUVFwc0lnUkJmM05MSWdOQkFYTnhSUVJBUVFBaEFnd0NDMEVBSUFJZ0F4c2dCR29oQXlBRlFRRnFJZ0lzQUFBaUJFRlFha0VZZEVFWWRVSC9BWEZCQ1V3RVFDQUNJUVVNQVFzTElBQWdBa1lFUUVFQUlRSUZJQUFnQlVZZ0JrRXdSM0lFUUNBQklBTTJBZ0FGUVFBaEFnc0xDd3NnQWd2YUhnSVlmd3QrSUFJZ0FSRGVBaUFESUFBcEF3QTNBd0FnQXlBQUtRTUlOd01JSUFNZ0FDa0RFRGNERUNBRElBQXBBeGczQXhnZ0F5QUFLUU1nTndNZ0lBTWdBQ2tES0RjREtDQURJQUFwQXpBM0F6QWdBeUFBS1FNNE53TTRJQUlwQXdBaEhrRUFJUUVEUUFKQUlBTXBBeUFpSWtFT0VBY2dJa0VTRUFlRklTTWdJa0VwRUFjZ0k0VWhJeUFESUFNcEF6Z2dBVUVEZEVHUWhRSnFLUU1BSUI0Z0kzeDhJQU1wQXpBaUl5QWlJQU1wQXlnaUlDQWpoWU9GZkh3aUhpQURLUU1ZZkNJa053TVlJQU1wQXdBaUlVRWNFQWNnSVVFaUVBZUZJUjhnQXlBZUlDRkJKeEFISUIrRmZDQWhJQU1wQXdnaUh5QURLUU1RSWgyRWd5QWRJQitEaEh3aUhqY0RPQ0FrUVE0UUJ5QWtRUklRQjRVaEhDQWtRU2tRQnlBY2hTRWNJQUZCQVhJaUJVRURkQ0FDYWlFRUlBTWdIU0FGUVFOMFFaQ0ZBbW9wQXdBZ0JDa0RBQ0FqSUNBZ0pDQWdJQ0tGZzRWOElCeDhmSHdpSTN3aUhUY0RFQ0FlUVJ3UUJ5QWVRU0lRQjRVaEhDQURJQ01nSGlBZklDR0VneUFmSUNHRGhId2dIa0VuRUFjZ0hJVjhJaU0zQXpBZ0hVRU9FQWNnSFVFU0VBZUZJUndnSFVFcEVBY2dISVVoSENBRElCOGdBVUVDY2lJUlFRTjBRWkNGQW1vcEF3QWdFVUVEZENBQ2Fpa0RBQ0FnSUNJZ0hTQWlJQ1NGZzRWOElCeDhmSHdpSDN3aUlEY0RDQ0FqUVJ3UUJ5QWpRU0lRQjRVaEhDQURJQjhnSXlBZUlDR0VneUFlSUNHRGhId2dJMEVuRUFjZ0hJVjhJaDgzQXlnZ0lFRU9FQWNnSUVFU0VBZUZJUndnSUVFcEVBY2dISVVoSENBQlFRTnlJZ1pCQTNRZ0Ftb2hFaUFESUNFZ0JrRURkRUdRaFFKcUtRTUFJQklwQXdBZ0lpQWtJQ0FnSFNBa2hZT0ZmQ0FjZkh4OElpRjhJaUkzQXdBZ0gwRWNFQWNnSDBFaUVBZUZJUndnQXlBaElCOGdIaUFqaElNZ0hpQWpnNFI4SUI5Qkp4QUhJQnlGZkNJaE53TWdJQ0pCRGhBSElDSkJFaEFIaFNFY0lDSkJLUkFISUJ5RklSd2dBeUFCUVFSeUloTkJBM1JCa0lVQ2Fpa0RBQ0FUUVFOMElBSnFLUU1BSUNRZ0hTQWlJQjBnSUlXRGhYd2dISHg4ZkNJY0lCNThJaVEzQXpnZ0lVRWNFQWNnSVVFaUVBZUZJUjRnQXlBY0lDRWdIeUFqaElNZ0h5QWpnNFI4SUNGQkp4QUhJQjZGZkNJZU53TVlJQ1JCRGhBSElDUkJFaEFIaFNFY0lDUkJLUkFISUJ5RklSd2dBVUVGY2lJSFFRTjBJQUpxSVJRZ0F5QUhRUU4wUVpDRkFtb3BBd0FnRkNrREFDQWRJQ0FnSkNBZ0lDS0ZnNFY4SUJ4OGZId2lIQ0FqZkNJZE53TXdJQjVCSEJBSElCNUJJaEFIaFNFaklBTWdIQ0FlSUI4Z0lZU0RJQjhnSVlPRWZDQWVRU2NRQnlBamhYd2lJemNERUNBZFFRNFFCeUFkUVJJUUI0VWhIQ0FkUVNrUUJ5QWNoU0VjSUFNZ0h5QUJRUVp5SWhWQkEzUkJrSVVDYWlrREFDQVZRUU4wSUFKcUtRTUFJQ0FnSWlBZElDSWdKSVdEaFh3Z0hIeDhmQ0lmZkNJZ053TW9JQ05CSEJBSElDTkJJaEFIaFNFY0lBTWdIeUFqSUI0Z0lZU0RJQjRnSVlPRWZDQWpRU2NRQnlBY2hYd2lIemNEQ0NBZ1FRNFFCeUFnUVJJUUI0VWhIQ0FnUVNrUUJ5QWNoU0VjSUFGQkIzSWlDRUVEZENBQ2FpRVdJQU1nSVNBSVFRTjBRWkNGQW1vcEF3QWdGaWtEQUNBaUlDUWdJQ0FkSUNTRmc0VjhJQng4Zkh3aUlYd2lJamNESUNBZlFSd1FCeUFmUVNJUUI0VWhIQ0FESUNFZ0h5QWVJQ09FZ3lBZUlDT0RoSHdnSDBFbkVBY2dISVY4SWlFM0F3QWdJa0VPRUFjZ0lrRVNFQWVGSVJ3Z0lrRXBFQWNnSElVaEhDQURJQjRnQVVFSWNpSU5RUU4wUVpDRkFtb3BBd0FnRFVFRGRDQUNhaWtEQUNBa0lCMGdJaUFkSUNDRmc0VjhJQng4Zkh3aUhud2lKRGNER0NBaFFSd1FCeUFoUVNJUUI0VWhIQ0FESUI0Z0lTQWZJQ09FZ3lBZklDT0RoSHdnSVVFbkVBY2dISVY4SWg0M0F6Z2dKRUVPRUFjZ0pFRVNFQWVGSVJ3Z0pFRXBFQWNnSElVaEhDQUJRUWx5SWdsQkEzUWdBbW9oRnlBRElDTWdDVUVEZEVHUWhRSnFLUU1BSUJjcEF3QWdIU0FnSUNRZ0lDQWloWU9GZkNBY2ZIeDhJaU44SWgwM0F4QWdIa0VjRUFjZ0hrRWlFQWVGSVJ3Z0F5QWpJQjRnSHlBaGhJTWdIeUFoZzRSOElCNUJKeEFISUJ5RmZDSWpOd013SUIxQkRoQUhJQjFCRWhBSGhTRWNJQjFCS1JBSElCeUZJUndnQXlBZklBRkJDbklpRGtFRGRFR1FoUUpxS1FNQUlBNUJBM1FnQW1vcEF3QWdJQ0FpSUIwZ0lpQWtoWU9GZkNBY2ZIeDhJaDk4SWlBM0F3Z2dJMEVjRUFjZ0kwRWlFQWVGSVJ3Z0F5QWZJQ01nSGlBaGhJTWdIaUFoZzRSOElDTkJKeEFISUJ5RmZDSWZOd01vSUNCQkRoQUhJQ0JCRWhBSGhTRWNJQ0JCS1JBSElCeUZJUndnQVVFTGNpSUtRUU4wSUFKcUlSZ2dBeUFoSUFwQkEzUkJrSVVDYWlrREFDQVlLUU1BSUNJZ0pDQWdJQjBnSklXRGhYd2dISHg4ZkNJaGZDSWlOd01BSUI5QkhCQUhJQjlCSWhBSGhTRWNJQU1nSVNBZklCNGdJNFNESUI0Z0k0T0VmQ0FmUVNjUUJ5QWNoWHdpSVRjRElDQWlRUTRRQnlBaVFSSVFCNFVoSENBaVFTa1FCeUFjaFNFY0lBTWdIaUFCUVF4eUlnOUJBM1JCa0lVQ2Fpa0RBQ0FQUVFOMElBSnFLUU1BSUNRZ0hTQWlJQjBnSUlXRGhYd2dISHg4ZkNJZWZDSWtOd000SUNGQkhCQUhJQ0ZCSWhBSGhTRWNJQU1nSGlBaElCOGdJNFNESUI4Z0k0T0VmQ0FoUVNjUUJ5QWNoWHdpSGpjREdDQWtRUTRRQnlBa1FSSVFCNFVoSENBa1FTa1FCeUFjaFNFY0lBRkJEWElpQzBFRGRDQUNhaUVaSUFNZ0l5QUxRUU4wUVpDRkFtb3BBd0FnR1NrREFDQWRJQ0FnSkNBZ0lDS0ZnNFY4SUJ4OGZId2lJM3dpSFRjRE1DQWVRUndRQnlBZVFTSVFCNFVoSENBRElDTWdIaUFmSUNHRWd5QWZJQ0dEaEh3Z0hrRW5FQWNnSElWOElpTTNBeEFnSFVFT0VBY2dIVUVTRUFlRklSd2dIVUVwRUFjZ0hJVWhIQ0FCUVE1eUloQkJBM1FnQW1vaEdpQURJQjhnRUVFRGRFR1FoUUpxS1FNQUlCb3BBd0FnSUNBaUlCMGdJaUFraFlPRmZDQWNmSHg4SWlCOEloODNBeWdnSTBFY0VBY2dJMEVpRUFlRklSd2dBeUFnSUNNZ0hpQWhoSU1nSGlBaGc0UjhJQ05CSnhBSElCeUZmQ0lnTndNSUlCOUJEaEFISUI5QkVoQUhoU0VjSUI5QktSQUhJQnlGSVJ3Z0FVRVBjaUlNUVFOMElBSnFJUnNnQXlBaElBeEJBM1JCa0lVQ2Fpa0RBQ0FiS1FNQUlDSWdKQ0FmSUIwZ0pJV0RoWHdnSEh4OGZDSWZmRGNESUNBZ1FSd1FCeUFnUVNJUUI0VWhJU0FESUI4Z0lDQWVJQ09FZ3lBZUlDT0RoSHdnSUVFbkVBY2dJWVY4TndNQUlBRkJ3QUJHRFFBZ0dpa0RBQ0lrUVJNUUJ5RWVJQ1JCUFJBSElCNGdKRUlHaUlXRklTTWdGeWtEQUNFZUlBUXBBd0FpSDBFQkVBY2hJU0FmUVFnUUJ5QWhJQjlDQjRpRmhTRWhJQUZCRUdvaUJFRURkQ0FDYWlBQlFRTjBJQUpxS1FNQUlCNGdJM3g4SUNGOElpRTNBd0FnR3lrREFDSWpRUk1RQnlFZElDTkJQUkFISUIwZ0kwSUdpSVdGSVNBZ0JVRUpha0VEZENBQ2Fpa0RBQ0VpSUFWQkFXcEJBM1FnQW1vcEF3QWlIVUVCRUFjaEhDQUZRUkJxUVFOMElBSnFJQjhnSW53Z0lId2dIVUVJRUFjZ0hDQWRRZ2VJaFlWOElpQTNBd0FnSVVFVEVBY2hIeUFoUVQwUUJ5QWZJQ0ZDQm9pRmhTRWlJQmdwQXdBaEh5QVNLUU1BSWlGQkFSQUhJUndnRVVFUWFrRURkQ0FDYWlBZElCOGdJbng4SUNGQkNCQUhJQndnSVVJSGlJV0ZmQ0lkTndNQUlDQkJFeEFISVNJZ0lFRTlFQWNnSWlBZ1FnYUloWVVoSWlBR1FRbHFRUU4wSUFKcUtRTUFJUndnQmtFQmFrRURkQ0FDYWlrREFDSWdRUUVRQnlFbElBWkJFR3BCQTNRZ0Ftb2dIQ0FoZkNBaWZDQWdRUWdRQnlBbElDQkNCNGlGaFh3aUlqY0RBQ0FkUVJNUUJ5RWhJQjFCUFJBSElDRWdIVUlHaUlXRklSd2dHU2tEQUNFaElCUXBBd0FpSFVFQkVBY2hKU0FUUVJCcVFRTjBJQUpxSUNBZ0hDQWhmSHdnSFVFSUVBY2dKU0FkUWdlSWhZVjhJaUEzQXdBZ0lrRVRFQWNoSENBaVFUMFFCeUFjSUNKQ0JvaUZoU0VjSUFkQkNXcEJBM1FnQW1vcEF3QWhKU0FIUVFGcVFRTjBJQUpxS1FNQUlpSkJBUkFISVNZZ0IwRVFha0VEZENBQ2FpQWRJQ1Y4SUJ4OElDSkJDQkFISUNZZ0lrSUhpSVdGZkNJZE53TUFJQ0JCRXhBSElSd2dJeUFnUVQwUUJ5QWNJQ0JDQm9pRmhYd2hIQ0FXS1FNQUlpQkJBUkFISVNVZ0ZVRVFha0VEZENBQ2FpQWNJQ0o4SUNCQkNCQUhJQ1VnSUVJSGlJV0ZmQ0lpTndNQUlCMUJFeEFISVJ3Z0hVRTlFQWNnSENBZFFnYUloWVVoSENBSVFRbHFRUU4wSUFKcUtRTUFJU1VnQ0VFQmFrRURkQ0FDYWlrREFDSWRRUUVRQnlFbUlBaEJFR3BCQTNRZ0Ftb2dJQ0FsZkNBY2ZDQWRRUWdRQnlBbUlCMUNCNGlGaFh3aUlEY0RBQ0FpUVJNUUJ5RWNJQ0pCUFJBSElCd2dJa0lHaUlXRklTSWdEVUVKYWtFRGRDQUNhaWtEQUNBaWZDRWlJQjVCQVJBSElSd2dEVUVRYWtFRGRDQUNhaUFkSUNKOElCNUJDQkFISUJ3Z0hrSUhpSVdGZkNJZE53TUFJQ0JCRXhBSElTSWdJRUU5RUFjZ0lpQWdRZ2FJaFlVaElpQUpRUWxxUVFOMElBSnFLUU1BSVJ3Z0NVRUJha0VEZENBQ2Fpa0RBQ0lnUVFFUUJ5RWxJQWxCRUdwQkEzUWdBbW9nSENBZWZDQWlmQ0FnUVFnUUJ5QWxJQ0JDQjRpRmhYd2lIamNEQUNBZFFSTVFCeUVpSUIxQlBSQUhJQ0lnSFVJR2lJV0ZJUjBnRGtFSmFrRURkQ0FDYWlrREFDQWRmQ0VkSUI5QkFSQUhJU0lnRGtFUWFrRURkQ0FDYWlBZElDQjhJQjlCQ0JBSElDSWdIMElIaUlXRmZDSWROd01BSUI1QkV4QUhJU0FnSGtFOUVBY2dJQ0FlUWdhSWhZVWhJQ0FLUVFscVFRTjBJQUpxS1FNQUlTSWdDa0VCYWtFRGRDQUNhaWtEQUNJZVFRRVFCeUVjSUFwQkVHcEJBM1FnQW1vZ0h5QWlmQ0FnZkNBZVFRZ1FCeUFjSUI1Q0I0aUZoWHdpSHpjREFDQWRRUk1RQnlFZ0lCMUJQUkFISUNBZ0hVSUdpSVdGSVIwZ0QwRUpha0VEZENBQ2Fpa0RBQ0FkZkNFZElDRkJBUkFISVNBZ0QwRVFha0VEZENBQ2FpQWRJQjU4SUNGQkNCQUhJQ0FnSVVJSGlJV0ZmQ0llTndNQUlCOUJFeEFISVIwZ0gwRTlFQWNnSFNBZlFnYUloWVVoSFNBTFFRbHFRUU4wSUFKcUtRTUFJU0FnQzBFQmFrRURkQ0FDYWlrREFDSWZRUUVRQnlFaUlBdEJFR3BCQTNRZ0Ftb2dJQ0FoZkNBZGZDQWZRUWdRQnlBaUlCOUNCNGlGaFh3aUh6Y0RBQ0FlUVJNUUJ5RWhJQjVCUFJBSElDRWdIa0lHaUlXRklSNGdFRUVKYWtFRGRDQUNhaWtEQUNFaElDTkJBUkFISVIwZ0VFRVFha0VEZENBQ2FpQWhJQ1I4SUI1OElDTkJDQkFISUIwZ0kwSUhpSVdGZkRjREFDQWZRUk1RQnlFZUlCOUJQUkFISUI0Z0gwSUdpSVdGSVI4Z0RFRUpha0VEZENBQ2Fpa0RBQ0VoSUF4QkFXcEJBM1FnQW1vcEF3QWlIa0VCRUFjaEpDQU1RUkJxUVFOMElBSnFJQ0VnSTN3Z0gzd2dIa0VJRUFjZ0pDQWVRZ2VJaFlWOE53TUFJQVJCMEFCSkJFQWdCQ0VCREFJTEN3dEJBQ0VCQTBBZ0FVRURkQ0FBYWlJQ0lBRkJBM1FnQTJvcEF3QWdBaWtEQUh3M0F3QWdBVUVCYWlJQlFRaEhEUUFMQ3l3QUlBSkJnQUpKQkVBZ0FDQUJJQUpCL3dGeEVITVBCVUg3alFKQmo0NENRZXNBUWNTT0FoQUNDMEVBQzBJQUlBTkJmMnBCUDBzZ0FrSEFBRXR5Qkg5QmZ3VWdBMEgvQVhFaEF5QUNSU0FCUlhJRVFDQUFJQU1RcmdFRklBQWdBeUFCSUFKQi93RnhFSzBCQzBFQUN3c0tBQ0FBSUFFZ0FoQk5Dd3dBSUFBZ0FTQUNJQU1RVGd2b0JBRVVmeUFDS0FBQUlROENmeUFDS0FBSUlSWWdBaWdBRENFRFFSUWhGRUhsOE1HTEJpRUVRYkxhaU1zSElRd2dBaWdBRUNFUUlBSW9BQlFoQ1NBQ0tBQVlJUTBnQWlnQUhDRUtRZlRLZ2RrR0lRVWdBaWdBQkNFQ0lCWUxJUXNnQXlFSVFlN0lnWmtESVFZZ0FTZ0FBQ0VPSUFFb0FBUWhBeUFCS0FBSUlRY2dBU2dBRENFQkEwQWdCQ0FFSUFscVFRY1FDQ0FJY3lJUmFrRUpFQWdnQjNNaUJ5QUhJQkZxUVEwUUNDQUpjeUlKYWtFU0VBZ2dCSE1oQkNBR0lBWWdEMnBCQnhBSUlBRnpJaEpxUVFrUUNDQU5jeUlWSUJJZ0ZXcEJEUkFJSUE5eklnMXFRUklRQ0NBR2N5RUdJQXdnRENBT2FrRUhFQWdnQ25NaUUycEJDUkFJSUFKeklnSWdBaUFUYWtFTkVBZ2dEbk1pQ0dwQkVoQUlJQXh6SVFvZ0JTQUZJQkJxUVFjUUNDQUxjeUlMYWtFSkVBZ2dBM01pQXlBRElBdHFRUTBRQ0NBUWN5SUJha0VTRUFnZ0JYTWhCU0FFSUFRZ0MycEJCeEFJSUExeklnOXFRUWtRQ0NBQ2N5SUNJQUlnRDJwQkRSQUlJQXR6SWd0cVFSSVFDQ0FFY3lFRUlBWWdCaUFSYWtFSEVBZ2dDSE1pRG1wQkNSQUlJQU56SWdNZ0F5QU9ha0VORUFnZ0VYTWlDR3BCRWhBSUlBWnpJUVlnQ2lBU2FrRUhFQWdnQVhNaUVDQUtha0VKRUFnZ0IzTWlCeUFISUJCcVFRMFFDQ0FTY3lJQmFrRVNFQWdnQ25NaERDQUZJQk5xUVFjUUNDQUpjeUlKSUFWcVFRa1FDQ0FWY3lJTklBa2dEV3BCRFJBSUlCTnpJZ3BxUVJJUUNDQUZjeUVGSUJSQmZtb2lGQTBBQ3lBQUlBUVFDeUFBUVFScUlBWVFDeUFBUVFocUlBd1FDeUFBUVF4cUlBVVFDeUFBUVJCcUlBNFFDeUFBUVJScUlBTVFDeUFBUVJocUlBY1FDeUFBUVJ4cUlBRVFDd3ZlRXdJSWZ4OStJQUFzQUFBZ0FDd0FBU0FBUVFKcUlnSXNBQUFRRUVMLy8vOEFneUVUQW40Z0FoQVJRZ1dJUXYvLy93Q0RJU2NnQUN3QUJTQUFMQUFHSUFCQkIyb2lBeXdBQUJBUVFnS0lRdi8vL3dDRElSOGdBeEFSUWdlSVF2Ly8vd0NESVNBZ0FFRUthaUlIRUJGQ0JJaEMvLy8vQUlNaEdTQUFMQUFOSUFBc0FBNGdBRUVQYWlJRUxBQUFFQkJDQVloQy8vLy9BSU1oSVNBRUVCRkNCb2hDLy8vL0FJTWhGQ0FBTEFBU0lBQXNBQk1nQUN3QUZCQVFRZ09JUXYvLy93Q0RJUm9nQUN3QUZTQUFMQUFXSUFCQkYyb2lCU3dBQUJBUVF2Ly8vd0NESVJVZ0JSQVJRZ1dJUXYvLy93Q0RJUnNnQUN3QUdpQUFMQUFiSUFCQkhHb2lCaXdBQUJBUVFnS0lRdi8vL3dDRElSWWdCaEFSUWdlSVF2Ly8vd0NESVJ3Z0FFRWZhaUlJRUJGQ0JJaEMvLy8vQUlNaEVDQUFMQUFpSUFBc0FDTWdBRUVrYWlJQkxBQUFFQkJDQVloQy8vLy9BSU1oRVNBQkVCRkNCb2hDLy8vL0FJTWhFZ0orSUFBc0FDY2dBQ3dBS0NBQUxBQXBFQkJDQTRoQy8vLy9BSU1oSmlBQUxBQXFJQUFzQUNzZ0FFRXNhaUlCTEFBQUVCQkMvLy8vQUlNaERDQUJFQkZDQlloQy8vLy9BSU1oSFNBQUxBQXZJQUFzQURBZ0FFRXhhaUlCTEFBQUVCQkNBb2hDLy8vL0FJTWhDU0FCRUJGQ0I0aEMvLy8vQUlNaENpQUFRVFJxRUJGQ0JJaEMvLy8vQUlNaEN5QUFMQUEzSUFBc0FEZ2dBRUU1YWlJQkxBQUFFQkJDQVloQy8vLy9BSU1oRFNBQkVCRkNCb2hDLy8vL0FJTWhEaUFBUVR4cUVCRkNBNGdpRDBLRG9WWitJQXg4SVF3Z0MwS0RvVlorSUJGOElBMUMwYXNJZm53Z0QwTG45aWQrZkNBT1F0T01RMzU4SUFwQ2c2RldmaUFRZkNBTFF0R3JDSDU4SUExQzA0eERmbndnRDBLWTJoeCtmQ0FPUXVmMkozNThJaDVDZ0lCQWZTSWlRaFdIZkNFUklDWUxJQTlDMGFzSWZud2dEa0tEb1ZaK2ZDQU5Rb09oVm40Z0Vud2dEMExUakVOK2ZDQU9RdEdyQ0g1OElpTkNnSUJBZlNJa1FoV0hmQ0VTSUIwZ0RFS0FnRUI5SWhkQ0ZZZDhJUkFnSGlBaVFvQ0FnSCtEZlNBSlFvT2hWbjRnSEh3Z0NrTFJxd2grZkNBTFF0T01RMzU4SUExQzUvWW5mbndnRDBLVDJDaCtmQ0FPUXBqYUhINThJQllnQ1VMUnF3aCtmQ0FLUXRPTVEzNThJQXRDNS9ZbmZud2dEVUtZMmh4K2ZDQU9RcFBZS0g1OEloWkNnSUJBZlNJZFFoV0hmQ0ljUW9DQVFIMGlKVUlWaDN3aERpQWpJQ1JDZ0lDQWY0TjlJQkZDZ0lCQWZTSWVRaFdIZkNFUElBd2dGMEtBZ0lCL2czMGdFa0tBZ0VCOUlpSkNGWWQ4SVF3Z0VFS0RvVlorSUJaOElBbEMwNHhEZmlBYmZDQUtRdWYySjM1OElBdENtTm9jZm53Z0RVS1QyQ2grZkNBVklBbEM1L1luZm53Z0NrS1kyaHgrZkNBTFFwUFlLSDU4SWhWQ2dJQkFmU0lYUWhXSWZDSWJRb0NBUUgwaUkwSVZoM3dnSFVLQWdJQi9nMzBoRFNBVklCb2dDVUtZMmh4K2ZDQUtRcFBZS0g1OElCUWdDVUtUMkNoK2ZDSVVRb0NBUUgwaUZVSVZpSHdpR2tLQWdFQjlJaFpDRlloOElCZENnSUNBZjROOUlCQkMwNHhEZm53Z0RFTFJxd2grZkNBU0lDSkNnSUNBZjROOUlndENnNkZXZm53aEVpQVVJQlZDZ0lDQS8vLy9BWU45SUJCQ21Ob2NmbndnREVMbjlpZCtmQ0FMUXRPTVEzNThJQTlDMGFzSWZud2dFU0FlUW9DQWdIK0RmU0lKUW9PaFZuNThJUkVnSndzZ0NVS1QyQ2grZkNBT1FwamFISDU4SUJNZ0RrS1QyQ2grZkNJWVFvQ0FRSDBpRkVJVmgzd2lGVUtBZ0VCOUlSTWdHQ0FVUW9DQWdIK0RmU0FjSUNWQ2dJQ0FmNE45SUExQ2dJQkFmU0lYUWhXSGZDSWNRb0NBUUgwaUhVSVZoeUlLUXBQWUtINThJUmdnSENBZFFvQ0FnSCtEZlNBTklCZENnSUNBZjROOUlCc2dFRUxScXdoK2ZDQWpRb0NBZ0grRGZTQU1Rb09oVm41OElCSkNnSUJBZlNJVVFoV0hmQ0liUW9DQVFIMGlIa0lWaDN3Z0d5QWVRb0NBZ0grRGZTQVNJQlJDZ0lDQWY0TjlJQm9nRmtLQWdJQi9nMzBnRUVMbjlpZCtmQ0FNUXRPTVEzNThJQXRDMGFzSWZud2dEMEtEb1ZaK2ZDQVJRb0NBUUgwaURVSVZoM3dpR2tLQWdFQjlJaFpDRllkOElCb2dGa0tBZ0lCL2czMGdFU0FOUW9DQWdIK0RmU0FoSUJCQ2s5Z29mbndnREVLWTJoeCtmQ0FMUXVmMkozNThJQTlDMDR4RGZud2dDVUxScXdoK2ZDQU9Rb09oVm41OElCa2dERUtUMkNoK2ZDQUxRcGphSEg1OElBOUM1L1luZm53Z0NVTFRqRU4rZkNBT1F0R3JDSDU4SWhKQ2dJQkFmU0laUWhXSGZDSVFRb0NBUUgwaURFSVZoM3dnQ2tLRG9WWitJQkI4SUF4Q2dJQ0FmNE45SUJJZ0NrTFJxd2grZkNBWlFvQ0FnSCtEZlNBZ0lBdENrOWdvZm53Z0QwS1kyaHgrZkNBSlF1ZjJKMzU4SUE1QzA0eERmbndnSHlBUFFwUFlLSDU4SUFsQ21Ob2NmbndnRGtMbjlpZCtmQ0lOUW9DQVFIMGlFVUlWaDN3aUNVS0FnRUI5SWd0Q0ZZZDhJQXBDMDR4RGZpQUpmQ0FMUW9DQWdIK0RmU0FOSUFwQzUvWW5mbndnRVVLQWdJQi9nMzBnRTBJVmgzd2dGU0FLUXBqYUhINThJQk5DZ0lDQWY0TjlJQmhDRllkOElnMUNGWWQ4SWc1Q0ZZZDhJZzlDRllkOElndENGWWQ4SWhCQ0ZZZDhJZ3hDRllkOEloRkNGWWQ4SWg5Q0ZZZDhJaUJDRllkOElobENGWWQ4SWlGQ0ZZY2lDVUtUMkNoK0lCaEMvLy8vQUlOOElRb2dHVUwvLy84QWd5QWdRdi8vL3dDRElCOUMvLy8vQUlNZ0VVTC8vLzhBZ3lBTVF2Ly8vd0NESUFsQ2c2RldmaUFRUXYvLy93Q0RmQ0FKUXRHckNINGdDMEwvLy84QWczd2dDVUxUakVOK0lBOUMvLy8vQUlOOElBbEM1L1luZmlBT1F2Ly8vd0NEZkNBSlFwamFISDRnRFVMLy8vOEFnM3dnQ2tJVmgzd2lDMElWaDN3aUVrSVZoM3dpRFVJVmgzd2lEa0lWaDN3aUUwSVZoM3dpQ1VJVmgzd2lFRUlWaDN3aUQwSVZoM3dpREVJVmgzd2hFU0FBSUFvOEFBQWdBQ0FLUWdpSVBBQUJJQUlnQ2tJUWlFSWZneUFMUXYvLy93Q0RJZ3BDQllhRVBBQUFJQUFnQzBJRGlEd0FBeUFBSUF0Q0M0ZzhBQVFnQUNBS1FoT0lJQkpDLy8vL0FJTWlDa0lDaG9ROEFBVWdBQ0FTUWdhSVBBQUdJQU1nQ2tJT2lDQU5Rdi8vL3dDRElncENCNGFFUEFBQUlBQWdEVUlCaUR3QUNDQUFJQTFDQ1lnOEFBa2dCeUFLUWhHSUlBNUMvLy8vQUlNaUNrSUVob1E4QUFBZ0FDQU9RZ1NJUEFBTElBQWdEa0lNaUR3QURDQUFJQXBDRklnZ0UwTC8vLzhBZ3lJS1FnR0doRHdBRFNBQUlCTkNCNGc4QUE0Z0JDQUtRZytJSUFsQy8vLy9BSU1pQ2tJR2hvUThBQUFnQUNBSlFnS0lQQUFRSUFBZ0NVSUtpRHdBRVNBQUlCQkNBNFlnQ2tJU2lJUThBQklnQUNBUVFnV0lQQUFUSUFBZ0VFSU5pRHdBRkNBQUlBODhBQlVnQUNBUFFnaUlQQUFXSUFVZ0QwSVFpRUlmZ3lBTVF2Ly8vd0NESWdsQ0JZYUVQQUFBSUFBZ0RFSURpRHdBR0NBQUlBeENDNGc4QUJrZ0FDQUpRaE9JSUJGQy8vLy9BSU1pQ1VJQ2hvUThBQm9nQUNBUlFnYUlQQUFiSUFZZ0NVSU9pQ0FoUXYvLy93Q0RJQkZDRllkOElnbENCNGFFUEFBQUlBQWdDVUlCaUR3QUhTQUFJQWxDQ1lnOEFCNGdDQ0FKUWhHSFBBQUFDL1VCQVFkL0FuOGpBQ0VISXdCQlAycEJRSEVrQUNNQUlRSWpBRUVRYWlRQUlBSkJBRFlBQUNBQ1FRQTdBQVFnQWtFQU9nQUdBMEFnQUNBQmFpd0FBQ0VGUVFBaEF3TkFJQUlnQTJvaUJpQUdMQUFBSUFVZ0FTQURRUVYwUWRDQ0FtcHFMQUFBYzNJNkFBQWdBMEVCYWlJRFFRZEhEUUFMSUFGQkFXb2lBVUVmUncwQUN5QUFMQUFmUWY4QWNTRUJRUUFoQUFOQUlBQWdBbW9pQXlBRExBQUFJQUVnQUVFRmRFSHZnZ0pxTEFBQWMzSTZBQUFnQUVFQmFpSUFRUWRIRFFBTFFRQWhBRUVBSVFFRFFDQUJJQUFnQW1vdEFBQkJmMnB5SVFFZ0FFRUJhaUlBUVFkSERRQUxJQWNMSkFBZ0FVRUlka0VCY1F2aEFnRUpmd0ovSXdBaENpTUFRVDlxUVVCeEpBQWpBQ0VESXdCQjBBTnFKQUFnQTBHd0Ftb2hBaUFEUWJnQmFpRUZJQU5CUUdzaEJnTkFJQU1nQkVFQmRDSUhhaUFCSUFScUxBQUFJZ2hCRDNFNkFBQWdCMEVCY2lBRGFpQUlRZjhCY1VFRWRqb0FBQ0FFUVFGcUlnUkJJRWNOQUF0QkFDRUVRUUFoQVFOQUlBUWdBU0FEYWlJSExRQUFhaUlJUVJoMFFZQ0FnRUJyUVJ4MUlRUWdCeUFJSUFSQkJIUnJPZ0FBSUFGQkFXb2lBVUUvUncwQUN5QURJQU10QUQ4Z0JHbzZBRDhnQUJCNlFRRWhBUU5BSUFZZ0FVRUJkaUFCSUFOcUxBQUFFSGtnQWlBQUlBWVFWU0FBSUFJUUZDQUJRUUpxSWdGQndBQkpEUUFMSUFJZ0FCQTlJQVVnQWhBK0lBSWdCUkExSUFVZ0FoQStJQUlnQlJBMUlBVWdBaEErSUFJZ0JSQTFJQUFnQWhBVVFRQWhBUU5BSUFZZ0FVRUJkaUFCSUFOcUxBQUFFSGtnQWlBQUlBWVFWU0FBSUFJUUZDQUJRUUpxSWdGQndBQkpEUUFMSUFvTEpBQUxtd0VCQm44Q2Z5TUFJUWdqQUVFL2FrRkFjU1FBSXdBaEJTTUFRVEJxSkFBZ0FDQUJRU2hxSWdNZ0FSQVRJQUJCS0dvaUJDQURJQUVRRlNBQVFkQUFhaUlHSUFBZ0FoQU1JQVFnQkNBQ1FTaHFFQXdnQUVINEFHb2lBeUFDUWRBQWFpQUJRZmdBYWhBTUlBVWdBVUhRQUdvaUFTQUJFQk1nQUNBR0lBUVFGU0FFSUFZZ0JCQVRJQVlnQlNBREVCTWdBeUFGSUFNUUZTQUlDeVFBQzJrQkJYOENmeU1BSVFZakFFRS9ha0ZBY1NRQUl3QWhBaU1BUVpBQmFpUUFJQUpCNEFCcUlnTWdBVUhRQUdvUVB5QUNRVEJxSWdVZ0FTQURFQXdnQWlBQlFTaHFJQU1RRENBQUlBSVFMaUFGRUg5QkIzUWhBU0FBSUFBdEFCOGdBWE02QUI4Z0Jnc2tBQXVkQWdFVGYwRUFJQUpySWdJZ0FDZ0NCQ0lESUFFb0FnUnpjU0VFSUFJZ0FDZ0NDQ0lGSUFFb0FnaHpjU0VHSUFJZ0FDZ0NEQ0lISUFFb0FneHpjU0VJSUFJZ0FDZ0NFQ0lKSUFFb0FoQnpjU0VLSUFJZ0FDZ0NGQ0lMSUFFb0FoUnpjU0VNSUFJZ0FDZ0NHQ0lOSUFFb0FoaHpjU0VPSUFJZ0FDZ0NIQ0lQSUFFb0FoeHpjU0VRSUFJZ0FDZ0NJQ0lSSUFFb0FpQnpjU0VTSUFJZ0FDZ0NKQ0lUSUFFb0FpUnpjU0VVSUFBZ0FDZ0NBQ0lWSUFJZ0ZTQUJLQUlBYzNGek5nSUFJQUFnQXlBRWN6WUNCQ0FBSUFVZ0JuTTJBZ2dnQUNBSElBaHpOZ0lNSUFBZ0NTQUtjellDRUNBQUlBc2dESE0yQWhRZ0FDQU5JQTV6TmdJWUlBQWdEeUFRY3pZQ0hDQUFJQkVnRW5NMkFpQWdBQ0FUSUJSek5nSWtDelFCQTM4Q2Z5TUFJUU1qQUVFL2FrRkFjU1FBSXdBaEFTTUFRU0JxSkFBZ0FTQUFFQzRnQVVFZ0VGd2hBQ0FEQ3lRQUlBQUxFQUFnQUNBQklBSWdBeUFFSUFVUVpnc1RBQ0FBSUFFZ0FpQURJQVFnQlJCbkdrRUFDd3NBSUFBZ0FTQUNFTDhCQzJBQkJIOENmeU1BSVFVakFFRS9ha0ZBY1NRQUl3QWhBaU1BUVJCcUpBQWdBa0VBT2dBQUEwQWdBaUFBSUFOcUxBQUFJQUlzQUFCeU9nQUFJQU5CQVdvaUF5QUJSdzBBQ3lBQ0xRQUFRZjhEYWtFSWRrRUJjU0VBSUFVTEpBQWdBQXZMQkFFTWZ3Si9Jd0FoRXlNQVFUOXFRVUJ4SkFBQ2Z5TUFJUklqQUVFUWFpUUFJQklMSWd0QkFEWUNBQ0FIRUY4Q1FBSkFJQU1FZnlBSFFRUnhSU0VRSUFSRklSRkJBQ0VLQW44Q1FBSkFBa0FDUUFOQUFrQURRQUpBSUFJZ0RHb3NBQUFoRFNBUUJIOGdEUkNGQWdVZ0RSQ0dBZ3NpRGtIL0FVY05BQ0FSRFFZZ0JDQU5FRUJGRFFjZ0RFRUJhaUlNSUFOSkRRRU1CUXNMSUE0Z0NFRUdkR29oQ0NBSlFRWnFJZzVCQjBzRVFDQUpRWDVxSVFrZ0NpQUJUdzBCSUFBZ0Ntb2dDQ0FKZGpvQUFDQUtRUUZxSVFvRklBNGhDUXNnREVFQmFpSU1JQU5KRFFFTUFnc0xJQXNnRERZQ0FFR0lsd0pCeEFBMkFnQWdDQ0VBUVg4aENDQUpEQVFMSUFzZ0REWUNBQ0FJSVFCQkFDRUlJQWtNQXdzZ0N5QU1OZ0lBSUFnaEFFRUFJUWdnQ1F3Q0N5QUxJQXcyQWdBZ0NDRUFRUUFoQ0NBSkRBRUxJQXNnRERZQ0FDQUlJUUJCQUNFSUlBa0xJZ0ZCQkVzRWYwRUFJUXBCZndVZ0FDRUpJQWdoQUF3Q0N3VkJBQ0VCUVFBaENrRUFJUUFNQVFzaEFBd0JDeUFKUVFFZ0FYUkJmMnB4QkVCQkFDRUtRWDhoQUFVZ0IwRUNjU0FBY2tVRVFDQUNJQU1nQ3lBRUlBRkJBWFlRaEFJaEFBc2dBQVJBUVFBaENnVWdCQVJBSUFzb0FnQWlBQ0FEU1FSQUFrQURRQ0FFSUFBZ0Ftb3NBQUFRUUVVTkFTQUFRUUZxSWdBZ0Ewa05BQXNnQ3lBQU5nSUFRUUFoQUF3RkN5QUxJQUEyQWdBTEMwRUFJUUFMQ3dzZ0N5Z0NBQ0VCSUFZRVFDQUdJQUVnQW1vMkFnQUZJQUVnQTBjRVFFR0lsd0pCSERZQ0FFRi9JUUFMQ3lBRkJFQWdCU0FLTmdJQUN5QVRDeVFBSUFBTHhRTUJCWDhnQkJCZklBTWdBMEVEYmlJSFFYMXNhaUVHSUFkQkFuUWhCeUFIUVFKeUlBWkJBWFpxSUFkQkJHb2dCRUVDY1JzZ0J5QUdHeUlISUFGUEJFQVFBQXNnQTBFQVJ5RUdJQWNnQkVFRWNRUi9JQVlFZjBFQUlRUURRQ0FDSUFscUxRQUFJQWhCQ0hSeUlRZ2dCVUVJYWlJRlFRVkxCRUFEZnlBRVFRRnFJUVlnQUNBRWFpQUlJQVZCZW1vaUJYWkJQM0VRandFNkFBQWdCVUVGU3dSL0lBWWhCQXdCQlNBR0N3c2hCQXNnQ1VFQmFpSUpJQU5IRFFBTElBVUVmeUFBSUFScUlBaEJCaUFGYTNSQlAzRVFqd0U2QUFBZ0JFRUJhZ1VnQkFzRlFRQUxCU0FHQkg5QkFDRUVBMEFnQWlBSmFpMEFBQ0FJUVFoMGNpRUlJQVZCQ0dvaUJVRUZTd1JBQTM4Z0JFRUJhaUVHSUFBZ0JHb2dDQ0FGUVhwcUlnVjJRVDl4RUk0Qk9nQUFJQVZCQlVzRWZ5QUdJUVFNQVFVZ0Jnc0xJUVFMSUFsQkFXb2lDU0FEUncwQUN5QUZCSDhnQUNBRWFpQUlRUVlnQld0MFFUOXhFSTRCT2dBQUlBUkJBV29GSUFRTEJVRUFDd3NpQkVrRVFFSDBsUUpCaDVZQ1FlWUJRWmVXQWhBQ0N5QUhJQVJMQkVBZ0FDQUVha0U5SUFjZ0JHc1FHaG9nQnlFRUN5QUFJQVJxUVFBZ0FTQUVRUUZxSWdJZ0FpQUJTUnNnQkdzUUdob2dBQXNQQUNBQVFYbHhRUUZIQkVBUUFBc0xFUUFnQUNBQklBSWdBMElBSUFRUWl3RUxJQUFnQWtMLy8vLy9EMVlFUUJBQUJTQUFJQUVnQWlBRElBUWdCUkNXQVFzTEhBQWdBVUwvLy8vL0QxWUVRQkFBQlNBQUlBRWdBaUFERUpBQ0N3c1ZBQ0FBRURvZ0FRUkFJQUJCOEl3Q1FpSVFIUXNMbmdFQkEzOENmeU1BSVFNakFFRS9ha0ZBY1NRQUl3QWhBU01BUVRCcUpBQWdBU0FBS1FBQU53QUFJQUVnQUNrQUNEY0FDQ0FCSUFBcEFCQTNBQkFnQVNBQUtRQVlOd0FZSUFFZ0FDa0FKRGNESUNBQklBRkNLQ0FBUVNCcVFRQWdBQkNXQVNBQUlBRXBBQUEzQUFBZ0FDQUJLUUFJTndBSUlBQWdBU2tBRURjQUVDQUFJQUVwQUJnM0FCZ2dBQ0FCS1FNZ053QWtJQUFRWlNBREN5UUFDd2tBSUFCQkFUWUFJQXVXQWdJRmZ3SitBbjhqQUNFS0l3QkJQMnBCUUhFa0FDTUFJUVlqQUVIZ0FHb2tBQ0FHSUFRZ0JSQlJJQVpCSUdvaUJTQUVRUkJxSWdRZ0JoRDdBU0FDSUFFZ0F5QUZFTk1DQkg4Z0JrRWdFQXBCZndVZ0FBUkFJQUVnQUU5QkFDQUJJQUJyclNBRFZCc2dBQ0FCVDBFQUlBQWdBV3V0SUFOVUczSUVRQ0FBSUFFZ0E2Y1FMQm9nQUNFQkMwSWdJQU1nQTBJZ1ZpSUNHeUlMUWdCUkJFQWdCU0FGUWlBZ0JDQUdFR0FGSUFWQklHb2lDQ0FCUVg4Z0EwSi9oU0lNUWw4Z0RFSmZWaHVuYXlJSkVCZ2FJQVVnQlNBTFFpQjhJQVFnQmhCZ0lBQWdDQ0FKRUJnYUN5QUNCRUFnQUNBTHB5SUNhaUFCSUFKcUlBTWdDMzBnQkNBR0VKTUJDeUFHUVNBUUNndEJBQXNoQUNBS0N5UUFJQUFMeFFJQ0IzOENmZ0ovSXdBaERDTUFRVDlxUVVCeEpBQWpBQ0VISXdCQjRBSnFKQUFnQjBFZ2FpRUdJQWNpQ0NBRUlBVVFVU0FBSUFKTFFRQWdBQ0lGSUFJaUNXdXRJQU5VR3lBQ0lBQkxRUUFnQ1NBRmE2MGdBMVFiY2dSQUlBQWdBaUFEcHhBc0dpQUFJUUlMSUFaQ0FEY0RBQ0FHUWdBM0F3Z2dCa0lBTndNUUlBWkNBRGNER0VJZ0lBTWdBMElnVmlJRkd5SU5RZ0JSSWdsRkJFQWdCa0VnYWlBQ1FYOGdBMEovaFNJT1FsOGdEa0pmVmh1bmF4QVlHZ3NnQmlBR0lBMUNJSHdnQkVFUWFpSUxJQWdRWUNBSFFlQUFhaUlFSUFZUUppQUpSUVJBSUFBZ0JrRWdha0YvSUFOQ2Y0VWlEa0pmSUE1Q1gxWWJwMnNRR0JvTElBWkJ3QUFRQ2lBRkJFQWdBQ0FOcHlJRmFpQUNJQVZxSUFNZ0RYMGdDeUFJRUpNQkN5QUlRU0FRQ2lBRUlBQWdBeEFQSUFRZ0FSQWxJQVJCZ0FJUUNpQU1DeVFBUVFBTENRQWdBQ0FCRUxFQ0N3c0FJQUFnQVNBQ0VLRUJDd2dBSUFBZ0FSQm9Dd1FBUVFnTEJBQkJBd3NFQUVGL0M0Y0VBUVovQW44akFDRUpJd0JCUDJwQlFIRWtBQ01BSVFZakFFR1FCR29rQUNBR1FjQURhaUVFSUFaQmdBTnFJUVVnQmtHQUJHb2lCMEVBTmdJQUlBY2dBVFlBQUNBQlFjRUFTUVJBSUFaQkFFRUFJQUVRVGtFQVRnUkFJQVlnQjBJRUVCa2dCaUFDSUFPdEVCa2dCaUFBSUFFUVRSb0xCU0FHUVFCQkFFSEFBQkJPUVFCT0JFQUNRQ0FHSUFkQ0JCQVpJQVlnQWlBRHJSQVpJQVlnQkVIQUFCQk5RUUJPQkVBZ0FDQUVLUUFBTndBQUlBQWdCQ2tBQ0RjQUNDQUFJQVFwQUJBM0FCQWdBQ0FFS1FBWU53QVlJQUJCSUdvaEFDQUZJQVFwQXdBM0F3QWdCU0FFS1FNSU53TUlJQVVnQkNrREVEY0RFQ0FGSUFRcEF4ZzNBeGdnQlNBRUtRTWdOd01nSUFVZ0JDa0RLRGNES0NBRklBUXBBekEzQXpBZ0JTQUVLUU00TndNNElBRkJZR29pQVVIQUFFc0VRQU5BSUFSQndBQWdCVUxBQUVFQVFRQVFja0VBU0EwRElBQWdCQ2tBQURjQUFDQUFJQVFwQUFnM0FBZ2dBQ0FFS1FBUU53QVFJQUFnQkNrQUdEY0FHQ0FBUVNCcUlRQWdCU0FFS1FNQU53TUFJQVVnQkNrRENEY0RDQ0FGSUFRcEF4QTNBeEFnQlNBRUtRTVlOd01ZSUFVZ0JDa0RJRGNESUNBRklBUXBBeWczQXlnZ0JTQUVLUU13TndNd0lBVWdCQ2tET0RjRE9DQUJRV0JxSWdGQndBQkxEUUFMQ3lBRUlBRWdCVUxBQUVFQVFRQVFja0VBVGdSQUlBQWdCQ0FCRUJnYUN3c0xDd3NnQmtHQUF4QUtJQWtMSkFBTDJBNENFMzhRZmdKL0l3QWhGU01BUVQ5cVFVQnhKQUFqQUNFREl3QkJnQkJxSkFBZ0EwR0FDR29pQkNBQkVEQWdCQ0FBRURJZ0F5SUJJQVFRTUNBRElBSVFNa0VBSVFBRFFDQUFRUVIwSWdOQkEzUWdCR29pQ1NrREFDQURRUVJ5UVFOMElBUnFJZ1VwQXdBaUhSQUpJUmtnQTBFTWNrRURkQ0FFYWlJR0tRTUFJQm1GUVNBUUJ5RVdJQVlnRmlBWklCMGdBMEVJY2tFRGRDQUVhaUlIS1FNQUlCWVFDU0lXaFVFWUVBY2lIUkFKSWlHRlFSQVFCeUlaTndNQUlBY2dGaUFaRUFraUZqY0RBQ0FGSUJZZ0hZVkJQeEFISWgwM0F3QWdBMEVCY2tFRGRDQUVhaUlLS1FNQUlBTkJCWEpCQTNRZ0JHb2lDeWtEQUNJYkVBa2hHaUFEUVExeVFRTjBJQVJxSWd3cEF3QWdHb1ZCSUJBSEloY2dHaUFiSUFOQkNYSkJBM1FnQkdvaUNDa0RBQ0FYRUFraUc0VkJHQkFISWhjUUNTSWpoVUVRRUFjaEdpQUlJQnNnR2hBSkloczNBd0FnRnlBYmhVRS9FQWNoRnlBRFFRSnlRUU4wSUFScUlnMHBBd0FnQTBFR2NrRURkQ0FFYWlJT0tRTUFJaHdRQ1NFZklBTkJEbkpCQTNRZ0JHb2lEeWtEQUNBZmhVRWdFQWNpR0NBZklCd2dBMEVLY2tFRGRDQUVhaUlRS1FNQUlCZ1FDU0ljaFVFWUVBY2lHQkFKSWlTRlFSQVFCeUVmSUJnZ0hDQWZFQWtpSW9WQlB4QUhJUndnQTBFRGNrRURkQ0FFYWlJUktRTUFJQU5CQjNKQkEzUWdCR29pRWlrREFDSWVFQWtoR0NBRFFROXlRUU4wSUFScUloTXBBd0FnR0lWQklCQUhJaUFnR0NBZUlBTkJDM0pCQTNRZ0JHb2lBeWtEQUNBZ0VBa2lIb1ZCR0JBSElpQVFDU0lsaFVFUUVBY2hHQ0FnSUI0Z0dCQUpJaUNGUVQ4UUJ5RWVJQmNnSWlBWUlDRWdGeEFKSWhpRlFTQVFCeUloRUFraUlvVkJHQkFISVJjZ0NTQVlJQmNRQ1NJWU53TUFJQk1nR0NBaGhVRVFFQWNpR0RjREFDQVFJQ0lnR0JBSkloZzNBd0FnQ3lBWElCaUZRVDhRQnpjREFDQWNJQ0FnSXlBY0VBa2lGeUFaaFVFZ0VBY2lIQkFKSWhpRlFSZ1FCeUVaSUFvZ0Z5QVpFQWtpRnpjREFDQUdJQmNnSElWQkVCQUhJaGMzQXdBZ0F5QVlJQmNRQ1NJWE53TUFJQTRnRnlBWmhVRS9FQWMzQXdBZ0hpQVdJQm9nSkNBZUVBa2lGb1ZCSUJBSElob1FDU0lYaFVFWUVBY2hHU0FOSUJZZ0dSQUpJaFkzQXdBZ0RDQVdJQnFGUVJBUUJ5SVdOd01BSUFjZ0Z5QVdFQWtpRmpjREFDQVNJQllnR1lWQlB4QUhOd01BSUJzZ0h5QWxJQjBRQ1NJV2hVRWdFQWNpR2hBSkloc2dIWVZCR0JBSElSa2dFU0FXSUJrUUNTSVdOd01BSUE4Z0ZpQWFoVUVRRUFjaUZqY0RBQ0FJSUJzZ0ZoQUpJaFkzQXdBZ0JTQVdJQm1GUVQ4UUJ6Y0RBQ0FBUVFGcUlnQkJDRWNOQUF0QkFDRUFBMEFnQUVFQmRDSURRUU4wSUFScUlna3BBd0FnQTBFZ2FrRURkQ0FFYWlJRktRTUFJaDBRQ1NFWklBTkI0QUJxUVFOMElBUnFJZ1lwQXdBZ0dZVkJJQkFISVJZZ0JpQVdJQmtnSFNBRFFVQnJRUU4wSUFScUlnY3BBd0FnRmhBSkloYUZRUmdRQnlJZEVBa2lJWVZCRUJBSEloazNBd0FnQnlBV0lCa1FDU0lXTndNQUlBVWdGaUFkaFVFL0VBY2lIVGNEQUNBRFFRRnlRUU4wSUFScUlnb3BBd0FnQTBFaGFrRURkQ0FFYWlJTEtRTUFJaHNRQ1NFYUlBTkI0UUJxUVFOMElBUnFJZ3dwQXdBZ0dvVkJJQkFISWhjZ0dpQWJJQU5Cd1FCcVFRTjBJQVJxSWdncEF3QWdGeEFKSWh1RlFSZ1FCeUlYRUFraUk0VkJFQkFISVJvZ0NDQWJJQm9RQ1NJYk53TUFJQmNnRzRWQlB4QUhJUmNnQTBFUWFrRURkQ0FFYWlJTktRTUFJQU5CTUdwQkEzUWdCR29pRGlrREFDSWNFQWtoSHlBRFFmQUFha0VEZENBRWFpSVBLUU1BSUIrRlFTQVFCeUlZSUI4Z0hDQURRZEFBYWtFRGRDQUVhaUlRS1FNQUlCZ1FDU0ljaFVFWUVBY2lHQkFKSWlTRlFSQVFCeUVmSUJnZ0hDQWZFQWtpSW9WQlB4QUhJUndnQTBFUmFrRURkQ0FFYWlJUktRTUFJQU5CTVdwQkEzUWdCR29pRWlrREFDSWVFQWtoR0NBRFFmRUFha0VEZENBRWFpSVRLUU1BSUJpRlFTQVFCeUlnSUJnZ0hpQURRZEVBYWtFRGRDQUVhaUlES1FNQUlDQVFDU0llaFVFWUVBY2lJQkFKSWlXRlFSQVFCeUVZSUNBZ0hpQVlFQWtpSUlWQlB4QUhJUjRnRnlBaUlCZ2dJU0FYRUFraUdJVkJJQkFISWlFUUNTSWloVUVZRUFjaEZ5QUpJQmdnRnhBSkloZzNBd0FnRXlBWUlDR0ZRUkFRQnlJWU53TUFJQkFnSWlBWUVBa2lHRGNEQUNBTElCY2dHSVZCUHhBSE53TUFJQndnSUNBaklCd1FDU0lYSUJtRlFTQVFCeUljRUFraUdJVkJHQkFISVJrZ0NpQVhJQmtRQ1NJWE53TUFJQVlnRnlBY2hVRVFFQWNpRnpjREFDQURJQmdnRnhBSkloYzNBd0FnRGlBWElCbUZRVDhRQnpjREFDQWVJQllnR2lBa0lCNFFDU0lXaFVFZ0VBY2lHaEFKSWhlRlFSZ1FCeUVaSUEwZ0ZpQVpFQWtpRmpjREFDQU1JQllnR29WQkVCQUhJaFkzQXdBZ0J5QVhJQllRQ1NJV053TUFJQklnRmlBWmhVRS9FQWMzQXdBZ0d5QWZJQ1VnSFJBSkloYUZRU0FRQnlJYUVBa2lHeUFkaFVFWUVBY2hHU0FSSUJZZ0dSQUpJaFkzQXdBZ0R5QVdJQnFGUVJBUUJ5SVdOd01BSUFnZ0d5QVdFQWtpRmpjREFDQUZJQllnR1lWQlB4QUhOd01BSUFCQkFXb2lBRUVJUncwQUN5QUNJQUVRTUNBQ0lBUVFNaUFWQ3lRQUMrMEJBUUYvSUFBRWZ5QUFLQUlBQkg4Z0FDZ0NCRUVRU1FSL1FYNEZBbjhnQUNnQ0NFVUVRRUZ1SUFBb0Fnd05BUm9MSUFBb0FoUWhBU0FBS0FJUVJRUkFRVzFCZWlBQkd3OExJQUZCQ0VrRWYwRjZCU0FBS0FJWVJRUkFRV3dnQUNnQ0hBMENHZ3NnQUNnQ0lFVUVRRUZySUFBb0FpUU5BaG9MSUFBb0Fpd2lBVUVJU1FSL1FYSUZJQUZCZ0lDQUFVc0VmMEZ4QlNBQklBQW9BakFpQVVFRGRFa0VmMEZ5QlNBQUtBSW9CSDhnQVFSL0lBRkIvLy8vQjBzRWYwRnZCVUZqUVFBZ0FDZ0NOQ0lBUWYvLy93ZExHMEZrSUFBYkN3VkJjQXNGUVhRTEN3c0xDd3NMQlVGL0N3VkJad3NMdFFRQ0NuOFJma0VBUVlDQWdBZ2dBQ3dBVUJzaERDQUFLQUlFSVFnZ0FDZ0NDQ0VKSUFBb0Fnd2hDaUFBS0FJUUlRc2dBQ2dDRkNFRUlBQW9BaGdoQXlBQUtBSWNJUVVnQUNnQ0lDRUdJQUFvQWlRaEJ5QUNRZzlXQkVBZ0FDZ0NBSzBoRGlBTFFRVnNyU0VQSUFwQkJXeXRJUlVnQ1VFRmJLMGhHQ0FJUVFWc3JTRWJJQWl0SVJBZ0NhMGhGaUFLclNFWklBdXRJUndEUUNBQktBQUFRZi8vL3g5eElBUnFyU0lOSUE1K0lBRW9BQU5CQW5aQi8vLy9IM0VnQTJxdEloRWdEMzU4SUFFb0FBWkJCSFpCLy8vL0gzRWdCV3F0SWhJZ0ZYNThJQVlnQVNnQUNVRUdkbXF0SWhNZ0dINThJQWNnRENBQktBQU1RUWgyY21xdEloUWdHMzU4SVJvZ0RTQVdmaUFRSUJGK2ZDQU9JQkorZkNBUElCTitmQ0FVSUJWK2ZDQU5JQkIrSUE0Z0VYNThJQThnRW41OElCTWdGWDU4SUJRZ0dINThJQnBDR29oQy8vLy8vdytEZkNJZFFocUlRdi8vLy84UGczd2lGNmRCLy8vL0gzRWhCU0FOSUJsK0lCRWdGbjU4SUJBZ0VuNThJQTRnRTM1OElBOGdGSDU4SUJkQ0dvaEMvLy8vL3crRGZDSVhwMEgvLy84ZmNTRUdJQTBnSEg0Z0VTQVpmbndnRWlBV2Zud2dFQ0FUZm53Z0RpQVVmbndnRjBJYWlFTC8vLy8vRDROOElnMm5RZi8vL3g5eElRY2dEVUlhaUtkQkJXd2dHcWRCLy8vL0gzRnFJZ05CLy8vL0gzRWhCQ0FkcDBILy8vOGZjU0FEUVJwMmFpRURJQUZCRUdvaEFTQUNRbkI4SWdKQ0QxWU5BQXNMSUFBZ0JEWUNGQ0FBSUFNMkFoZ2dBQ0FGTmdJY0lBQWdCallDSUNBQUlBYzJBaVFMTUFBZ0FVRi9ha0UvU3lBRlFjQUFTM0lFZjBGL0JTQUFJQUlnQkNBQlFmOEJjU0FESUFWQi93RnhFT0VDUVFBTEM0UURBUWQvSXdBaEJ5TUFRVDlxUVVCeEpBQWpBQ0VESXdCQlFHc2tBQ0FDUWY4QmNRUkFJQUpCL3dGeElRZ2dBa0gvQVhGQndBQk1CRUFDZnlBQUtRQlFRZ0JTQkg5QmZ3VWdBQ2dBNEFJaUFrR0FBVXNFUUNBQVFvQUJFSFFnQUNBQVFlQUFhaUlDRUhjZ0FDQUFLQURnQWtHQWYyb2lCVFlBNEFJZ0JVR0JBVWtFUUNBQ0lBQkI0QUZxSUFVUUdCb2dBQ2dBNEFJaEJpQUNJUVFGUWFDTkFrSEFqUUpCc2dKQjdZMENFQUlMQlNBQ0lRWWdBRUhnQUdvaEJBc2dBQ0FHclJCMElBQWlBaXdBNUFJRVFDQUNRbjgzQUZnTElBSkNmemNBVUNBQUtBRGdBaUlDSUFCQjRBQnFha0VBUVlBQ0lBSnJFQm9hSUFBZ0JCQjNJQU1nQUNrQUFCQVNJQU5CQ0dvZ0FDa0FDQkFTSUFOQkVHb2dBQ2tBRUJBU0lBTkJHR29nQUNrQUdCQVNJQU5CSUdvZ0FDa0FJQkFTSUFOQktHb2dBQ2tBS0JBU0lBTkJNR29nQUNrQU1CQVNJQU5CT0dvZ0FDa0FPQkFTSUFFZ0F5QUlFQmdhSUFCQndBQVFDaUFFUVlBQ0VBcEJBQXNoQ1NBSEpBQWdDUXNQQ3dzUUFFRUFDeTBDQVg4QmZpQUJJQUJCUUdzaUFpa0FBSHdoQXlBQ0lBTTNBQUFnQUNBQUtRQklJQU1nQVZTdGZEY0FTQXNKQUNBQVFRQTJBQUFMTmdFQ2Z5QUFFT01DQTBBZ0FrRURkQ0FBYWlJRElBRWdBa0VEZEdvcEFBQWdBeWtBQUlVM0FBQWdBa0VCYWlJQ1FRaEhEUUFMQzRzMkFnVi9JbjRDZnlNQUlRWWpBRUUvYWtGQWNTUUFJd0FoQWlNQVFZQUNhaVFBSUFKQmdBRnFJUU1EUUNBRVFRTjBJQU5xSUFFZ0JFRURkR29wQUFBM0F3QWdCRUVCYWlJRVFSQkhEUUFMSUFJZ0FDa0FBRGNBQUNBQ0lBQXBBQWczQUFnZ0FpQUFLUUFRTndBUUlBSWdBQ2tBR0RjQUdDQUNJQUFwQUNBM0FDQWdBaUFBS1FBb053QW9JQUlnQUNrQU1EY0FNQ0FDSUFBcEFEZzNBRGdnQWtMeDdmVDRwYWY5cDZWL053TllJQUFwQUVoQ245ajUyY0tSMm9LYmY0VWhGeUFBS1FCUVF1djZodHEvdGZiQkg0VWhHd0orSUFBcEFGaEMrY0w0bTVHanMvRGJBSVVoS0NBQ0tRTUFJQUlwQXlBaUh5QURLUU1BSWlSOGZDSWVJQUJCUUdzcEFBQkMwWVdhNy9yUGxJZlJBSVdGUVNBUUJ5SVlRb2lTODUzL3pQbUU2Z0I4SVJrZ0dTQWZoVUVZRUFjaEhDQUNJQU1wQXdnaUh5QWNJQjU4ZkNJSElCaUZRUkFRQnlJbE53TmdJQUpCUUdzaUFTQVpJQ1Y4SWlBM0F3QWdBaUFjSUNDRlFUOFFCeUloTndNZ0lBSXBBd2dnQWlrREtDSWNJQU1wQXhBaUdYeDhJaGdnRjRWQklCQUhJaDFDdTg2cXB0alE2N083ZjN3aEZ5QVhJQnlGUVJnUUJ5RWVJQUlnQXlrREdDSWNJQmdnSG54OElnc2dIWVZCRUJBSElpWTNBMmdnQWlBWElDWjhJZ28zQTBnZ0NpQWVoVUUvRUFjaEhTQUNLUU1RSUFJcEF6QWlIaUFES1FNZ0loZDhmQ0lZSUJ1RlFTQVFCeUlpUXF2dzAvU3Y3cnkzUEh3aEd5QWJJQjZGUVJnUUJ5SWFJQnNnQXlrREtDSWVJQmdnR254OEloSWdJb1ZCRUJBSElnNThJZ21GUVQ4UUJ5RWlJQ2dMSUFJcEF4Z2dBaWtET0NJaklBTXBBekFpRzN4OElocUZRU0FRQnlJSVF2SHQ5UGlscC8ybnBYOThJUmdnR0NBamhVRVlFQWNpRHlBWUlBTXBBemdpSXlBUElCcDhmQ0lQSUFpRlFSQVFCeUlJZkNJTWhVRS9FQWNoR2lBZElBa2dDQ0FEUVVCcktRTUFJaGdnQnlBZGZId2lDSVZCSUJBSEloMThJZzJGUVJnUUJ5RUhJQUlnSFNBREtRTklJaDBnQnlBSWZId2lGSVZCRUJBSElnazNBM2dnQWlBSklBMThJZ2czQTFBZ0J5QUloVUUvRUFjaEJ5QWlJQXdnSlNBREtRTlFJaVVnQ3lBaWZId2lDNFZCSUJBSElpSjhJZ3lGUVJnUUJ5SU5JQXdnSWlBREtRTllJaUlnQ3lBTmZId2lEWVZCRUJBSEloQjhJZ3lGUVQ4UUJ5RUxJQm9nSUNBbUlBTXBBMkFpSmlBU0lCcDhmQ0lhaFVFZ0VBY2lFbndpRVlWQkdCQUhJaE1nRVNBREtRTm9JaUFnRXlBYWZId2lFeUFTaFVFUUVBY2lGWHdpRVlWQlB4QUhJUklnQWlBUklCQWdJU0FLSUE0Z0F5a0RjQ0lhSUE4Z0lYeDhJZzZGUVNBUUJ5SWhmQ0lLaFVFWUVBY2lEeUFLSUNFZ0F5a0RlQ0loSUE0Z0QzeDhJZzZGUVJBUUJ5SVBmQ0lRaFVFL0VBY2lDaUFVSUJwOGZDSVVoVUVnRUFjaUZud2lFU0FLaFVFWUVBY2lDaUFSSUJRZ0pYd2dDbndpRkNBV2hVRVFFQWNpRm53aUVZVkJQeEFISWdvM0F5QWdCeUFRSUEwZ0J5QVhmSHdpQnlBVmhVRWdFQWNpRFh3aUVJVkJHQkFISWhVZ0VDQU5JQWNnR0h3Z0ZYd2lEWVZCRUJBSEloVjhJaENGUVQ4UUJ5RUhJQXNnQ0NBVElBc2dIWHg4SWdzZ0Q0VkJJQkFISWc5OElnaUZRUmdRQnlJVElBZ2dEeUFMSUNGOElCTjhJZytGUVJBUUJ5SVRmQ0lMaFVFL0VBY2hDQ0FTSUF3Z0NTQU9JQklnSUh4OElnbUZRU0FRQnlJU2ZDSU9oVUVZRUFjaURDQU9JQklnQ1NBYmZDQU1mQ0lTaFVFUUVBY2lESHdpRG9WQlB4QUhJUWtnQ3lBTUlCUWdIM3dnQjN3aURJVkJJQkFISWhSOElpY2dCNFZCR0JBSElRY2dBaUFNSUNaOElBZDhJZ3dnRklWQkVCQUhJZ3MzQTNnZ0N5QW5mQ0lVSUFlRlFUOFFCeUVISUFnZ0RpQU5JQ1I4SUFoOElnZ2dGb1ZCSUJBSElnMThJZzZGUVJnUUJ5SVdJQTRnRFNBSUlCbDhJQlo4SWcyRlFSQVFCeUlXZkNJT2hVRS9FQWNoQ0NBSklCRWdEeUFpZkNBSmZDSUpJQldGUVNBUUJ5SVBmQ0lSaFVFWUVBY2lGU0FSSUE4Z0NTQWpmQ0FWZkNJUGhVRVFFQWNpRlh3aUVZVkJQeEFISVFrZ0FpQVJJQW9nRUNBU0lBb2dIbng4SWdvZ0U0VkJJQkFISWhKOEloQ0ZRUmdRQnlJVElCQWdFaUFLSUJ4OElCTjhJaEtGUVJBUUJ5SVRmQ0lRaFVFL0VBY2lDaUFNSUNKOGZDSU1JQmFGUVNBUUJ5SVdmQ0lSSUFxRlFSZ1FCeUlLSUJFZ0RDQVlmQ0FLZkNJTUlCYUZRUkFRQnlJV2ZDSVJoVUUvRUFjaUNqY0RJQ0FISUJBZ0RTQUhJQ1o4ZkNJSElCV0ZRU0FRQnlJTmZDSVFoVUVZRUFjaUZTQVFJQTBnQnlBa2ZDQVZmQ0lOaFVFUUVBY2lGWHdpRUlWQlB4QUhJUWNnQ0NBVUlBOGdDQ0FlZkh3aUNDQVRoVUVnRUFjaUQzd2lGSVZCR0JBSEloTWdGQ0FQSUFnZ0dYd2dFM3dpRDRWQkVCQUhJaE44SWhTRlFUOFFCeUVJSUFrZ0RpQVNJQWtnSVh4OElna2dDNFZCSUJBSElndDhJaEtGUVJnUUJ5SU9JQklnQ1NBZ2ZDQU9mQ0lPSUF1RlFSQVFCeUlMZkNJU2hVRS9FQWNoQ1NBVUlBc2dEQ0FsZkNBSGZDSUxoVUVnRUFjaURId2lGQ0FIaFVFWUVBY2hCeUFDSUF3Z0N5QWFmQ0FIZkNJTWhVRVFFQWNpQ3pjRGVDQUxJQlI4SWhRZ0I0VkJQeEFISVFjZ0NDQVNJQTBnSEh3Z0NId2lDQ0FXaFVFZ0VBY2lEWHdpRW9WQkdCQUhJaFlnRWlBTklBZ2dHM3dnRm53aURZVkJFQkFISWhaOEloS0ZRVDhRQnlFSUlBa2dFU0FQSUNOOElBbDhJZ2tnRllWQklCQUhJZzk4SWhHRlFSZ1FCeUlWSUJFZ0R5QUpJQjk4SUJWOElnK0ZRUkFRQnlJVmZDSVJoVUUvRUFjaENTQUNJQkVnQ2lBUUlBNGdDaUFkZkh3aUNpQVRoVUVnRUFjaURud2lFSVZCR0JBSEloTWdFQ0FPSUFvZ0Yzd2dFM3dpRG9WQkVCQUhJaE44SWhDRlFUOFFCeUlLSUF3Z0kzeDhJZ3dnRm9WQklCQUhJaFo4SWhFZ0NvVkJHQkFISWdvZ0VTQU1JQjE4SUFwOElnd2dGb1ZCRUJBSEloWjhJaEdGUVQ4UUJ5SUtOd01nSUFjZ0VDQUhJQng4SUExOElnY2dGWVZCSUJBSElnMThJaENGUVJnUUJ5SVZJQkFnRFNBSElCOThJQlY4SWcyRlFSQVFCeUlWZkNJUWhVRS9FQWNoQnlBSUlCUWdDQ0FnZkNBUGZDSUlJQk9GUVNBUUJ5SVBmQ0lVaFVFWUVBY2lFeUFVSUE4Z0NDQW1mQ0FUZkNJUGhVRVFFQWNpRTN3aUZJVkJQeEFISVFnZ0NTQVNJQWtnSW53Z0Rud2lDU0FMaFVFZ0VBY2lDM3dpRW9WQkdCQUhJZzRnRWlBSklCcDhJQTU4SWc0Z0M0VkJFQkFISWd0OEloS0ZRVDhRQnlFSklCUWdDeUFNSUJsOElBZDhJZ3VGUVNBUUJ5SU1mQ0lVSUFlRlFSZ1FCeUVISUFJZ0RDQUxJQnQ4SUFkOElneUZRUkFRQnlJTE53TjRJQXNnRkh3aUZDQUhoVUUvRUFjaEJ5QUlJQklnRFNBZWZDQUlmQ0lJSUJhRlFTQVFCeUlOZkNJU2hVRVlFQWNpRmlBU0lBMGdDQ0FsZkNBV2ZDSU5oVUVRRUFjaUZud2lFb1ZCUHhBSElRZ2dDU0FSSUE4Z0Yzd2dDWHdpQ1NBVmhVRWdFQWNpRDN3aUVZVkJHQkFISWhVZ0VTQVBJQWtnSkh3Z0ZYd2lENFZCRUJBSEloVjhJaEdGUVQ4UUJ5RUpJQUlnRVNBS0lCQWdEaUFLSUNGOGZDSUtJQk9GUVNBUUJ5SU9mQ0lRaFVFWUVBY2lFeUFRSUE0Z0NpQVlmQ0FUZkNJT2hVRVFFQWNpRTN3aUVJVkJQeEFISWdvZ0RDQWRmSHdpRENBV2hVRWdFQWNpRm53aUVTQUtoVUVZRUFjaUNpQVJJQXdnSkh3Z0Nud2lEQ0FXaFVFUUVBY2lGbndpRVlWQlB4QUhJZ28zQXlBZ0J5QVFJQTBnQnlBZWZId2lCeUFWaFVFZ0VBY2lEWHdpRUlWQkdCQUhJaFVnRUNBTklBY2dJM3dnRlh3aURZVkJFQkFISWhWOEloQ0ZRVDhRQnlFSElBZ2dGQ0FQSUFnZ0dYeDhJZ2dnRTRWQklCQUhJZzk4SWhTRlFSZ1FCeUlUSUJRZ0R5QUlJQmQ4SUJOOElnK0ZRUkFRQnlJVGZDSVVoVUUvRUFjaENDQUpJQklnRGlBSklDVjhmQ0lKSUF1RlFTQVFCeUlMZkNJU2hVRVlFQWNpRGlBU0lBa2dJWHdnRG53aURpQUxoVUVRRUFjaUMzd2lFb1ZCUHhBSElRa2dGQ0FMSUF3Z0dud2dCM3dpQzRWQklCQUhJZ3g4SWhRZ0I0VkJHQkFISVFjZ0FpQU1JQXNnSDN3Z0Izd2lESVZCRUJBSElnczNBM2dnQ3lBVWZDSVVJQWVGUVQ4UUJ5RUhJQWdnRWlBTklDSjhJQWg4SWdnZ0ZvVkJJQkFISWcxOEloS0ZRUmdRQnlJV0lCSWdEU0FJSUNaOElCWjhJZzJGUVJBUUJ5SVdmQ0lTaFVFL0VBY2hDQ0FKSUJFZ0R5QWJmQ0FKZkNJSklCV0ZRU0FRQnlJUGZDSVJoVUVZRUFjaUZTQVJJQThnQ1NBWWZDQVZmQ0lQaFVFUUVBY2lGWHdpRVlWQlB4QUhJUWtnQWlBUklBb2dFQ0FPSUFvZ0hIeDhJZ29nRTRWQklCQUhJZzU4SWhDRlFSZ1FCeUlUSUJBZ0RpQUtJQ0I4SUJOOElnNkZRUkFRQnlJVGZDSVFoVUUvRUFjaUNpQU1JQmw4ZkNJTUlCYUZRU0FRQnlJV2ZDSVJJQXFGUVJnUUJ5SUtJQkVnRENBbWZDQUtmQ0lNSUJhRlFSQVFCeUlXZkNJUmhVRS9FQWNpQ2pjRElDQUhJQkFnRFNBSElCdDhmQ0lISUJXRlFTQVFCeUlOZkNJUWhVRVlFQWNpRlNBUUlBMGdCeUFsZkNBVmZDSU5oVUVRRUFjaUZYd2lFSVZCUHhBSElRY2dDQ0FVSUE4Z0NDQWtmSHdpQ0NBVGhVRWdFQWNpRDN3aUZJVkJHQkFISWhNZ0ZDQVBJQWdnSW53Z0Uzd2lENFZCRUJBSEloTjhJaFNGUVQ4UUJ5RUlJQWtnRWlBT0lBa2dHSHg4SWdrZ0M0VkJJQkFISWd0OEloS0ZRUmdRQnlJT0lCSWdDU0FjZkNBT2ZDSU9JQXVGUVJBUUJ5SUxmQ0lTaFVFL0VBY2hDU0FVSUFzZ0RDQVhmQ0FIZkNJTGhVRWdFQWNpREh3aUZDQUhoVUVZRUFjaEJ5QUNJQXdnQ3lBZ2ZDQUhmQ0lNaFVFUUVBY2lDemNEZUNBTElCUjhJaFFnQjRWQlB4QUhJUWNnQ0NBU0lBMGdJM3dnQ0h3aUNDQVdoVUVnRUFjaURYd2lFb1ZCR0JBSEloWWdFaUFOSUFnZ0hud2dGbndpRFlWQkVCQUhJaFo4SWhLRlFUOFFCeUVJSUFrZ0VTQVBJQ0Y4SUFsOElna2dGWVZCSUJBSElnOThJaEdGUVJnUUJ5SVZJQkVnRHlBSklCcDhJQlY4SWcrRlFSQVFCeUlWZkNJUmhVRS9FQWNoQ1NBQ0lCRWdDaUFRSUE0Z0NpQWZmSHdpQ2lBVGhVRWdFQWNpRG53aUVJVkJHQkFISWhNZ0VDQU9JQW9nSFh3Z0Uzd2lEb1ZCRUJBSEloTjhJaENGUVQ4UUJ5SUtJQXdnSm54OElnd2dGb1ZCSUJBSEloWjhJaEVnQ29WQkdCQUhJZ29nRVNBTUlCNThJQXA4SWd3Z0ZvVkJFQkFISWhaOEloR0ZRVDhRQnlJS053TWdJQWNnRUNBTklBY2dIM3g4SWdjZ0ZZVkJJQkFISWcxOEloQ0ZRUmdRQnlJVklCQWdEU0FISUNGOElCVjhJZzJGUVJBUUJ5SVZmQ0lRaFVFL0VBY2hCeUFJSUJRZ0R5QUlJQnA4ZkNJSUlCT0ZRU0FRQnlJUGZDSVVoVUVZRUFjaUV5QVVJQThnQ0NBZ2ZDQVRmQ0lQaFVFUUVBY2lFM3dpRklWQlB4QUhJUWdnQ1NBU0lBNGdDU0FYZkh3aUNTQUxoVUVnRUFjaUMzd2lFb1ZCR0JBSElnNGdFaUFKSUNWOElBNThJZzRnQzRWQkVCQUhJZ3Q4SWhLRlFUOFFCeUVKSUJRZ0N5QU1JQ1I4SUFkOElndUZRU0FRQnlJTWZDSVVJQWVGUVJnUUJ5RUhJQUlnRENBTElDTjhJQWQ4SWd5RlFSQVFCeUlMTndONElBc2dGSHdpRkNBSGhVRS9FQWNoQnlBSUlCSWdEU0FiZkNBSWZDSUlJQmFGUVNBUUJ5SU5mQ0lTaFVFWUVBY2lGaUFTSUEwZ0NDQWNmQ0FXZkNJTmhVRVFFQWNpRm53aUVvVkJQeEFISVFnZ0NTQVJJQThnSFh3Z0NYd2lDU0FWaFVFZ0VBY2lEM3dpRVlWQkdCQUhJaFVnRVNBUElBa2dHWHdnRlh3aUQ0VkJFQkFISWhWOEloR0ZRVDhRQnlFSklBSWdFU0FLSUJBZ0RpQUtJQmg4ZkNJS0lCT0ZRU0FRQnlJT2ZDSVFoVUVZRUFjaUV5QVFJQTRnQ2lBaWZDQVRmQ0lPaFVFUUVBY2lFM3dpRUlWQlB4QUhJZ29nRENBZ2ZId2lEQ0FXaFVFZ0VBY2lGbndpRVNBS2hVRVlFQWNpQ2lBUklBd2dJbndnQ253aURDQVdoVUVRRUFjaUZud2lFWVZCUHhBSElnbzNBeUFnQnlBUUlBMGdCeUFqZkh3aUJ5QVZoVUVnRUFjaURYd2lFSVZCR0JBSEloVWdFQ0FOSUFjZ0dud2dGWHdpRFlWQkVCQUhJaFY4SWhDRlFUOFFCeUVISUFnZ0ZDQVBJQWdnSm54OElnZ2dFNFZCSUJBSElnOThJaFNGUVJnUUJ5SVRJQlFnRHlBSUlCOThJQk44SWcrRlFSQVFCeUlUZkNJVWhVRS9FQWNoQ0NBSklCSWdEaUFKSUJ4OGZDSUpJQXVGUVNBUUJ5SUxmQ0lTaFVFWUVBY2lEaUFTSUFrZ0hYd2dEbndpRGlBTGhVRVFFQWNpQzN3aUVvVkJQeEFISVFrZ0ZDQUxJQXdnSG53Z0Izd2lDNFZCSUJBSElneDhJaFFnQjRWQkdCQUhJUWNnQWlBTUlBc2dKSHdnQjN3aURJVkJFQkFISWdzM0EzZ2dDeUFVZkNJVUlBZUZRVDhRQnlFSElBZ2dFaUFOSUNGOElBaDhJZ2dnRm9WQklCQUhJZzE4SWhLRlFSZ1FCeUlXSUJJZ0RTQUlJQmQ4SUJaOElnMkZRUkFRQnlJV2ZDSVNoVUUvRUFjaENDQUpJQkVnRHlBWWZDQUpmQ0lKSUJXRlFTQVFCeUlQZkNJUmhVRVlFQWNpRlNBUklBOGdDU0FiZkNBVmZDSVBoVUVRRUFjaUZYd2lFWVZCUHhBSElRa2dBaUFSSUFvZ0VDQU9JQW9nR1h4OElnb2dFNFZCSUJBSElnNThJaENGUVJnUUJ5SVRJQkFnRGlBS0lDVjhJQk44SWc2RlFSQVFCeUlUZkNJUWhVRS9FQWNpQ2lBTUlCdDhmQ0lNSUJhRlFTQVFCeUlXZkNJUklBcUZRUmdRQnlJS0lCRWdEQ0FoZkNBS2ZDSU1JQmFGUVJBUUJ5SVdmQ0lSaFVFL0VBY2lDamNESUNBSElCQWdEU0FISUJwOGZDSUhJQldGUVNBUUJ5SU5mQ0lRaFVFWUVBY2lGU0FRSUEwZ0J5QWRmQ0FWZkNJTmhVRVFFQWNpRlh3aUVJVkJQeEFISVFjZ0NDQVVJQThnQ0NBaWZId2lDQ0FUaFVFZ0VBY2lEM3dpRklWQkdCQUhJaE1nRkNBUElBZ2dISHdnRTN3aUQ0VkJFQkFISWhOOEloU0ZRVDhRQnlFSUlBa2dFaUFPSUFrZ0pIeDhJZ2tnQzRWQklCQUhJZ3Q4SWhLRlFSZ1FCeUlPSUJJZ0NTQVlmQ0FPZkNJT0lBdUZRUkFRQnlJTGZDSVNoVUUvRUFjaENTQVVJQXNnRENBbWZDQUhmQ0lMaFVFZ0VBY2lESHdpRkNBSGhVRVlFQWNoQnlBQ0lBd2dDeUFaZkNBSGZDSU1oVUVRRUFjaUN6Y0RlQ0FMSUJSOEloUWdCNFZCUHhBSElRY2dDQ0FTSUEwZ0lId2dDSHdpQ0NBV2hVRWdFQWNpRFh3aUVvVkJHQkFISWhZZ0VpQU5JQWdnSTN3Z0Zud2lEWVZCRUJBSEloWjhJaEtGUVQ4UUJ5RUlJQWtnRVNBUElCOThJQWw4SWdrZ0ZZVkJJQkFISWc5OEloR0ZRUmdRQnlJVklCRWdEeUFKSUJkOElCVjhJZytGUVJBUUJ5SVZmQ0lSaFVFL0VBY2hDU0FDSUJFZ0NpQVFJQTRnQ2lBbGZId2lDaUFUaFVFZ0VBY2lEbndpRUlWQkdCQUhJaE1nRUNBT0lBb2dIbndnRTN3aURvVkJFQkFISWhOOEloQ0ZRVDhRQnlJS0lBd2dKWHg4SWd3Z0ZvVkJJQkFISWhaOEloRWdDb1ZCR0JBSElnb2dFU0FNSUJsOElBcDhJZ3dnRm9WQkVCQUhJaFo4SWhHRlFUOFFCeUlLTndNZ0lBY2dFQ0FOSUFjZ0dIeDhJZ2NnRllWQklCQUhJZzE4SWhDRlFSZ1FCeUlWSUJBZ0RTQUhJQmQ4SUJWOElnMkZRUkFRQnlJVmZDSVFoVUUvRUFjaEJ5QUlJQlFnRHlBSUlDTjhmQ0lJSUJPRlFTQVFCeUlQZkNJVWhVRVlFQWNpRXlBVUlBOGdDQ0FiZkNBVGZDSVBoVUVRRUFjaUUzd2lGSVZCUHhBSElRZ2dDU0FTSUE0Z0NTQWZmSHdpQ1NBTGhVRWdFQWNpQzN3aUVvVkJHQkFISWc0Z0VpQUpJQjU4SUE1OElnNGdDNFZCRUJBSElndDhJaEtGUVQ4UUJ5RUpJQlFnQ3lBTUlDRjhJQWQ4SWd1RlFTQVFCeUlNZkNJVUlBZUZRUmdRQnlFSElBSWdEQ0FMSUNKOElBZDhJZ3lGUVJBUUJ5SUxOd040SUFzZ0ZId2lGQ0FIaFVFL0VBY2hCeUFJSUJJZ0RTQWRmQ0FJZkNJSUlCYUZRU0FRQnlJTmZDSVNoVUVZRUFjaUZpQVNJQTBnQ0NBYWZDQVdmQ0lOaFVFUUVBY2lGbndpRW9WQlB4QUhJUWdnQ1NBUklBOGdISHdnQ1h3aUNTQVZoVUVnRUFjaUQzd2lFWVZCR0JBSEloVWdFU0FQSUFrZ0pud2dGWHdpRDRWQkVCQUhJaFY4SWhHRlFUOFFCeUVKSUFJZ0VTQUtJQkFnRGlBS0lDQjhmQ0lLSUJPRlFTQVFCeUlPZkNJUWhVRVlFQWNpRXlBUUlBNGdDaUFrZkNBVGZDSU9oVUVRRUFjaUUzd2lFSVZCUHhBSElnb2dEQ0FrZkh3aURDQVdoVUVnRUFjaUZud2lFU0FLaFVFWUVBY2lDaUFSSUF3Z0gzd2dDbndpRENBV2hVRVFFQWNpRm53aUVZVkJQeEFISWdvM0F5QWdCeUFRSUEwZ0J5QVpmSHdpQnlBVmhVRWdFQWNpRFh3aUVJVkJHQkFISWhVZ0VDQU5JQWNnSEh3Z0ZYd2lEWVZCRUJBSEloVjhJaENGUVQ4UUJ5RUhJQWdnRkNBUElBZ2dGM3g4SWdnZ0U0VkJJQkFISWc5OEloU0ZRUmdRQnlJVElCUWdEeUFJSUI1OElCTjhJZytGUVJBUUJ5SVRmQ0lVaFVFL0VBY2hDQ0FKSUJJZ0RpQUpJQnQ4ZkNJSklBdUZRU0FRQnlJTGZDSVNoVUVZRUFjaURpQVNJQWtnSTN3Z0Rud2lEaUFMaFVFUUVBY2lDM3dpRW9WQlB4QUhJUWtnRkNBTElBd2dHSHdnQjN3aUM0VkJJQkFISWd4OEloUWdCNFZCR0JBSElRY2dBaUFNSUFzZ0hYd2dCM3dpRElWQkVCQUhJZ3MzQTNnZ0N5QVVmQ0lVSUFlRlFUOFFCeUVISUFnZ0VpQU5JQ1Y4SUFoOElnZ2dGb1ZCSUJBSElnMThJaEtGUVJnUUJ5SVdJQklnRFNBSUlDSjhJQlo4SWcyRlFSQVFCeUlXZkNJU2hVRS9FQWNoQ0NBSklCRWdEeUFtZkNBSmZDSUpJQldGUVNBUUJ5SVBmQ0lSaFVFWUVBY2lGU0FSSUE4Z0NTQWdmQ0FWZkNJUGhVRVFFQWNpRlh3aUVZVkJQeEFISVFrZ0FpQVJJQW9nRUNBT0lBb2dHbng4SWdvZ0U0VkJJQkFISWc1OEloQ0ZRUmdRQnlJVElCQWdDaUFoZkNBVGZDSUtJQTZGUVJBUUJ5SU9mQ0lRaFVFL0VBY2lFeUFNSUJwOGZDSWFJQmFGUVNBUUJ5SU1mQ0lSSUJPRlFSZ1FCeUlUSUJFZ0dpQWxmQ0FUZkNJYUlBeUZRUkFRQnlJTWZDSVJoVUUvRUFjaUpUY0RJQ0FISUJBZ0RTQUhJQmQ4ZkNJWElCV0ZRU0FRQnlJSGZDSU5oVUVZRUFjaUVDQU5JQWNnRnlBWWZDQVFmQ0lIaFVFUUVBY2lFSHdpRFlWQlB4QUhJUmNnQ0NBVUlBOGdDQ0FkZkh3aUdDQU9oVUVnRUFjaUhYd2lDSVZCR0JBSElnNGdDQ0FkSUJnZ0lYd2dEbndpSFlWQkVCQUhJaUY4SWdpRlFUOFFCeUVZSUFrZ0VpQUtJQWtnSUh4OElpQWdDNFZCSUJBSElncDhJZ21GUVJnUUJ5SUxJQWtnR3lBZ2ZDQUxmQ0lnSUFxRlFSQVFCeUlLZkNJSmhVRS9FQWNoR3lBQ0lCY2dDQ0FhSUI5OElCZDhJaDhnQ29WQklCQUhJaGQ4SWhxRlFSZ1FCeUlLSUI4Z0pueDhJaDgzQXdBZ0FpQVhJQitGUVJBUUJ5SVhOd040SUFJZ0Z5QWFmQ0lYTndOUUlBSWdDaUFYaFVFL0VBYzNBeWdnQWlBWUlBa2dCeUFrZkNBWWZDSWtJQXlGUVNBUUJ5SVhmQ0lZaFVFWUVBY2lKaUFaSUNSOGZDSWtOd01JSUFJZ0Z5QWtoVUVRRUFjaUdUY0RZQ0FDSUJnZ0dYd2lHVGNEV0NBQ0lCa2dKb1ZCUHhBSE53TXdJQUlnR3lBUklCMGdJbndnRzN3aUdTQVFoVUVnRUFjaUYzd2lHNFZCR0JBSEloZ2dHU0FqZkh3aUdUY0RFQ0FDSUJjZ0dZVkJFQkFISWhrM0EyZ2dBU0FaSUJ0OEloazNBd0FnQWlBWUlCbUZRVDhRQnpjRE9DQUNJQTBnSUNBZUlDVjhmQ0lYSUNHRlFTQVFCeUllZkNJYklDV0ZRUmdRQnlJaklCY2dISHg4SWh3M0F4Z2dBaUFjSUI2RlFSQVFCeUljTndOd0lBSWdHeUFjZkNJY053TklJQUlnSENBamhVRS9FQWMzQXlBZ0FDQVpJQUFwQUFBZ0g0V0ZOd0FBUVFFaEFRTkFJQUZCQTNRZ0FHb2lBeUFCUVFocVFRTjBJQUpxS1FNQUlDUWdBeWtBQUlXRk53QUFJQUZCQVdvaUFVRUlSd1JBSUFGQkEzUWdBbW9wQXdBaEpBd0JDd3NnQmdza0FBc0xBQ0FBSUFFZ0FoRG1BZ3NUQUNBQUlBRkJ3QWRzUWRBUWFpQUNFTGNCQ3gwQUlBQVFOQ0FBUVNocUVCNGdBRUhRQUdvUUhpQUFRZmdBYWhBMEM2d0JBUUovSXdBaENpTUFRZEFDYWlRQUlBcEN3QUFnQnlBSUVEWWdDa0ZBYXlJSklBb1FKaUFLUWNBQUVBb2dDU0FGSUFZUUR5QUpRYkNXQWtJQUlBWjlRZytERUE4Z0FDQURJQVFnQjBFQklBZ1FMeUFKSUFBZ0JCQVBJQWxCc0pZQ1FnQWdCSDFDRDRNUUR5QUtRY0FDYWlJQUlBWVFFaUFKSUFCQ0NCQVBJQUFnQkJBU0lBa2dBRUlJRUE4Z0NTQUJFQ1VnQ1VHQUFoQUtJQUlFUUNBQ1FoQTNBd0FMSUFva0FFRUFDKzBCQVFkL0EwQWdBQ0FDYWlBQklBSkJBM1pxTFFBQUlBSkJCM0YyUVFGeE9nQUFJQUpCQVdvaUFrR0FBa2NOQUF0QkFDRUNBMEFnQUNBQ2FpSUZMQUFBQkVBQ1FFRUJJUVFEUUNBQ0lBUnFJZ0ZCZ0FKUERRRWdBQ0FCYWlJRExBQUFJZ1lFUUFKQUlBVXNBQUFpQnlBR0lBUjBJZ1pxSWdoQkVFZ0VRQ0FGSUFnNkFBQWdBMEVBT2dBQURBRUxJQWNnQm1zaUEwRnhTQTBESUFVZ0F6b0FBQU5BSUFBZ0FXb2lBeXdBQUFSQUlBTkJBRG9BQUNBQlFRRnFJZ0ZCZ0FKUERRSU1BUXNMSUFOQkFUb0FBQXNMSUFSQkFXb2lCRUVIU1EwQUN3c0xJQUpCQVdvaUFrR0FBa2NOQUFzTHBRRUJCbjhDZnlNQUlRZ2pBRUUvYWtGQWNTUUFJd0FoQlNNQVFUQnFKQUFnQUNBQlFTaHFJZ01nQVJBVElBQkJLR29pQkNBRElBRVFGU0FBUWRBQWFpSUdJQUFnQWtFb2FoQU1JQVFnQkNBQ0VBd2dBRUg0QUdvaUF5QUNRZmdBYWlBQlFmZ0FhaEFNSUFBZ0FVSFFBR29nQWtIUUFHb1FEQ0FGSUFBZ0FCQVRJQUFnQmlBRUVCVWdCQ0FHSUFRUUV5QUdJQVVnQXhBVklBTWdCU0FERUJNZ0NBc2tBQXVrQWdFSWZ3Si9Jd0FoQ1NNQVFUOXFRVUJ4SkFBakFDRURJd0JCb0FKcUpBQWdBeUVHSUFCQktHb2lCeUFCRUlFQklBQkIwQUJxSWdJUUhpQURRZkFCYWlJRUlBY1FEU0FEUWNBQmFpSUZJQVJCZ0FnUURDQUVJQVFnQWhBVklBVWdCU0FDRUJNZ0EwR1FBV29pQWlBRkVBMGdBaUFDSUFVUURDQUFJQUlRRFNBQUlBQWdCUkFNSUFBZ0FDQUVFQXdnQUNBQUVMMEJJQUFnQUNBQ0VBd2dBQ0FBSUFRUURDQURRZUFBYWlJQ0lBQVFEU0FDSUFJZ0JSQU1JQU5CTUdvaUF5QUNJQVFRRlFKL0FrQWdBeEJZRFFBZ0JpQUNJQVFRRXlBR0VGZ0VmeUFBSUFCQnNBZ1FEQXdCQlVGL0N3d0JDeUFBRUg4aEF5QUJMUUFmUVFkMklBTkdCRUFnQUNBQUVJQUJDeUFBUWZnQWFpQUFJQWNRREVFQUN5RUFJQWtMSkFBZ0FBczJBUU4vQW44akFDRURJd0JCUDJwQlFIRWtBQ01BSVFFakFFRWdhaVFBSUFFZ0FCQXVJQUVzQUFCQkFYRWhBQ0FEQ3lRQUlBQUxxZ0VCQ1g5QkFDQUJLQUlFYXlFQ1FRQWdBU2dDQ0dzaEEwRUFJQUVvQWd4cklRUkJBQ0FCS0FJUWF5RUZRUUFnQVNnQ0ZHc2hCa0VBSUFFb0FoaHJJUWRCQUNBQktBSWNheUVJUVFBZ0FTZ0NJR3NoQ1VFQUlBRW9BaVJySVFvZ0FFRUFJQUVvQWdCck5nSUFJQUFnQWpZQ0JDQUFJQU0yQWdnZ0FDQUVOZ0lNSUFBZ0JUWUNFQ0FBSUFZMkFoUWdBQ0FITmdJWUlBQWdDRFlDSENBQUlBazJBaUFnQUNBS05nSWtDNWtFQVJWK0FuNGdBUkFSSVJZZ0FTd0FCQ0FCTEFBRklBRXNBQVlRRUVJR2hpRUhJQUVzQUFjZ0FTd0FDQ0FCTEFBSkVCQkNCWVloQXlBQkxBQUtJQUVzQUFzZ0FTd0FEQkFRUWdPR0lRZ2dBU3dBRFNBQkxBQU9JQUVzQUE4UUVFSUNoaUVFSUFGQkVHb1FFU0VKSUFFc0FCUWdBU3dBRlNBQkxBQVdFQkJDQjRZaEJTQUJMQUFYSUFFc0FCZ2dBU3dBR1JBUVFnV0dJUW9nQVN3QUdpQUJMQUFiSUFFc0FCd1FFRUlFaGlFR0lCWUxRZ0FnQVN3QUhTQUJMQUFlSUFFc0FCOFFFRUlDaGtMOC8vOFBneUlMUW9DQWdBaDhJZ3hDR1loOVFoT0RmQ0lOUW9DQWdCQjhJUUlnQXlBSFFvQ0FnQWg4SWc1Q0dZZDhJZzlDZ0lDQUVId2hBeUFFSUFoQ2dJQ0FDSHdpRUVJWmgzd2lFVUtBZ0lBUWZDRUVJQVVnQ1VLQWdJQUlmQ0lTUWhtSGZDSVRRb0NBZ0JCOElRVWdCaUFLUW9DQWdBaDhJaFJDR1lkOEloVkNnSUNBRUh3aEJpQUFJQTBnQWtLQWdJRGdENE45UGdJQUlBQWdCeUFPUW9DQWdQQVBnMzBnQWtJYWlIdytBZ1FnQUNBUElBTkNnSUNBNEErRGZUNENDQ0FBSUFnZ0VFS0FnSUR3RDROOUlBTkNHb2g4UGdJTUlBQWdFU0FFUW9DQWdPQVBnMzArQWhBZ0FDQUpJQkpDZ0lDQThBK0RmU0FFUWhxSWZENENGQ0FBSUJNZ0JVS0FnSURnRDROOVBnSVlJQUFnQ2lBVVFvQ0FnUEFQZzMwZ0JVSWFpSHcrQWh3Z0FDQVZJQVpDZ0lDQTRBK0RmVDRDSUNBQUlBc2dERUtBZ0lBUWczMGdCa0lhaUh3K0FpUUxpUUVCQW44akFDRUpJd0JCMEFKcUpBQWdDU0FISUFnUW1BRWdDVUZBYXlJS0lBa1FKaUFKUWNBQUVBb2dDaUFGSUFZUUR5QUpRY0FDYWlJRklBWVFFaUFLSUFWQ0NCQVBJQUFnQXlBRUlBY2dDQkNYQVNBS0lBQWdCQkFQSUFVZ0JCQVNJQW9nQlVJSUVBOGdDaUFCRUNVZ0NrR0FBaEFLSUFJRVFDQUNRaEEzQXdBTElBa2tBRUVBQzBzQkEzOENmeU1BSVFVakFFRS9ha0ZBY1NRQUl3QWhBeU1BUVlBRGFpUUFJQU5CQUVFQVFSZ1FVQm9nQXlBQlFpQVFKeG9nQXlBQ1FpQVFKeG9nQXlBQVFSZ1FUeG9nQlFza0FBc2tBQ0FDUWhCVUJIOUJmd1VnQUNBQlFSQnFJQUVnQWtKd2ZDQURJQVFnQlJDRkFRc0xQUUVDZnlNQUlRY2pBRUVnYWlRQUlBY2lDQ0FGSUFZUVd3UkFRWDhoQUFVZ0FDQUJJQUlnQXlBRUlBZ1FXU0VBSUFoQklCQUtDeUFISkFBZ0FBc29BQ0FDUXUvLy8vOFBWZ1JBRUFBRklBQkJFR29nQUNBQklBSWdBeUFFSUFVUWh3RVBDMEVBQ3o0QkEzOGpBQ0VISXdCQklHb2tBQ0FISWdnZ0JTQUdFRnNFZjBGL0JTQUFJQUVnQWlBRElBUWdDQkJhR2lBSVFTQVFDa0VBQ3lFSklBY2tBQ0FKQ3c0QUlBRkJJQkFmSUFBZ0FSQm9DeW9CQVg4akFDRUVJd0JCb0FOcUpBQWdCQ0FERUljQ0lBUWdBU0FDRUIwZ0JDQUFFUGtCSUFRa0FBdTFEQUVIZnlBQUlBRnFJUVVnQUNnQ0JDSURRUUZ4UlFSQUFrQWdBQ2dDQUNFQ0lBTkJBM0ZGQkVBUEN5QUJJQUpxSVFFZ0FDQUNheUlBUWFDWEFpZ0NBRVlFUUNBRktBSUVJZ0pCQTNGQkEwY05BVUdVbHdJZ0FUWUNBQ0FGSUFKQmZuRTJBZ1FnQUNBQlFRRnlOZ0lFSUFVZ0FUWUNBQThMSUFKQkEzWWhCQ0FDUVlBQ1NRUkFJQUFvQWdnaUFpQUFLQUlNSWdOR0JFQkJqSmNDUVl5WEFpZ0NBRUVCSUFSMFFYOXpjVFlDQUFVZ0FpQUROZ0lNSUFNZ0FqWUNDQXNNQVFzZ0FDZ0NHQ0VISUFBb0Fnd2lBaUFBUmdSQUFrQWdBRUVRYWlJRFFRUnFJZ1FvQWdBaUFnUkFJQVFoQXdVZ0F5Z0NBQ0lDUlFSQVFRQWhBZ3dDQ3dzRFFBSkFJQUpCRkdvaUJDZ0NBQ0lHUlFSQUlBSkJFR29pQkNnQ0FDSUdSUTBCQ3lBRUlRTWdCaUVDREFFTEN5QURRUUEyQWdBTEJTQUFLQUlJSWdNZ0FqWUNEQ0FDSUFNMkFnZ0xJQWNFUUNBQUtBSWNJZ05CQW5SQnZKa0NhaUlFS0FJQUlBQkdCRUFnQkNBQ05nSUFJQUpGQkVCQmtKY0NRWkNYQWlnQ0FFRUJJQU4wUVg5emNUWUNBQXdEQ3dVZ0IwRVFhaUlESUFkQkZHb2dBeWdDQUNBQVJoc2dBallDQUNBQ1JRMENDeUFDSUFjMkFoZ2dBQ2dDRUNJREJFQWdBaUFETmdJUUlBTWdBallDR0FzZ0FDZ0NGQ0lEQkVBZ0FpQUROZ0lVSUFNZ0FqWUNHQXNMQ3dzZ0JTZ0NCQ0lIUVFKeEJFQWdCU0FIUVg1eE5nSUVJQUFnQVVFQmNqWUNCQ0FBSUFGcUlBRTJBZ0FnQVNFREJVR2tsd0lvQWdBZ0JVWUVRRUdZbHdKQm1KY0NLQUlBSUFGcUlnRTJBZ0JCcEpjQ0lBQTJBZ0FnQUNBQlFRRnlOZ0lFSUFCQm9KY0NLQUlBUndSQUR3dEJvSmNDUVFBMkFnQkJsSmNDUVFBMkFnQVBDMEdnbHdJb0FnQWdCVVlFUUVHVWx3SkJsSmNDS0FJQUlBRnFJZ0UyQWdCQm9KY0NJQUEyQWdBZ0FDQUJRUUZ5TmdJRUlBQWdBV29nQVRZQ0FBOExJQWRCQTNZaEJDQUhRWUFDU1FSQUlBVW9BZ2dpQWlBRktBSU1JZ05HQkVCQmpKY0NRWXlYQWlnQ0FFRUJJQVIwUVg5emNUWUNBQVVnQWlBRE5nSU1JQU1nQWpZQ0NBc0ZBa0FnQlNnQ0dDRUlJQVVvQWd3aUFpQUZSZ1JBQWtBZ0JVRVFhaUlEUVFScUlnUW9BZ0FpQWdSQUlBUWhBd1VnQXlnQ0FDSUNSUVJBUVFBaEFnd0NDd3NEUUFKQUlBSkJGR29pQkNnQ0FDSUdSUVJBSUFKQkVHb2lCQ2dDQUNJR1JRMEJDeUFFSVFNZ0JpRUNEQUVMQ3lBRFFRQTJBZ0FMQlNBRktBSUlJZ01nQWpZQ0RDQUNJQU0yQWdnTElBZ0VRQ0FGS0FJY0lnTkJBblJCdkprQ2FpSUVLQUlBSUFWR0JFQWdCQ0FDTmdJQUlBSkZCRUJCa0pjQ1FaQ1hBaWdDQUVFQklBTjBRWDl6Y1RZQ0FBd0RDd1VnQ0VFUWFpSURJQWhCRkdvZ0F5Z0NBQ0FGUmhzZ0FqWUNBQ0FDUlEwQ0N5QUNJQWcyQWhnZ0JTZ0NFQ0lEQkVBZ0FpQUROZ0lRSUFNZ0FqWUNHQXNnQlNnQ0ZDSURCRUFnQWlBRE5nSVVJQU1nQWpZQ0dBc0xDd3NnQUNBSFFYaHhJQUZxSWdOQkFYSTJBZ1FnQUNBRGFpQUROZ0lBUWFDWEFpZ0NBQ0FBUmdSQVFaU1hBaUFETmdJQUR3c0xJQU5CQTNZaEFpQURRWUFDU1FSQUlBSkJBM1JCdEpjQ2FpRUJRWXlYQWlnQ0FDSURRUUVnQW5RaUFuRUVmeUFCUVFocUlnSWhBeUFDS0FJQUJVR01sd0lnQWlBRGNqWUNBQ0FCUVFocUlRTWdBUXNoQWlBRElBQTJBZ0FnQWlBQU5nSU1JQUFnQWpZQ0NDQUFJQUUyQWd3UEN5QURRUWgySWdFRWZ5QURRZi8vL3dkTEJIOUJId1VnQVNBQlFZRCtQMnBCRUhaQkNIRWlCSFFpQWtHQTRCOXFRUkIyUVFSeElRRWdBaUFCZENJR1FZQ0FEMnBCRUhaQkFuRWhBaUFEUVE0Z0FTQUVjaUFDY21zZ0JpQUNkRUVQZG1vaUFVRUhhblpCQVhFZ0FVRUJkSElMQlVFQUN5SUNRUUowUWJ5WkFtb2hBU0FBSUFJMkFod2dBRUVBTmdJVUlBQkJBRFlDRUFKQVFaQ1hBaWdDQUNJRVFRRWdBblFpQm5GRkJFQkJrSmNDSUFRZ0JuSTJBZ0FnQVNBQU5nSUFEQUVMSUFFb0FnQWlBU2dDQkVGNGNTQURSZ1JBSUFFaEFnVUNRQ0FEUVFCQkdTQUNRUUYyYXlBQ1FSOUdHM1FoQkFOQUlBRkJFR29nQkVFZmRrRUNkR29pQmlnQ0FDSUNCRUFnQkVFQmRDRUVJQUlvQWdSQmVIRWdBMFlOQWlBQ0lRRU1BUXNMSUFZZ0FEWUNBQXdDQ3dzZ0FpZ0NDQ0lCSUFBMkFnd2dBaUFBTmdJSUlBQWdBVFlDQ0NBQUlBSTJBZ3dnQUVFQU5nSVlEd3NnQUNBQk5nSVlJQUFnQURZQ0RDQUFJQUEyQWdnTDhRSUJCbjhDZnlNQUlRc2pBRUUvYWtGQWNTUUFJd0FoQmlNQVFmQUFhaVFBSUFaQjRBQnFJUWNnQmtFZ2FpRUlJQUpDQUZJRVFDQUdJQVVwQUFBM0FBQWdCaUFGS1FBSU53QUlJQVlnQlNrQUVEY0FFQ0FHSUFVcEFCZzNBQmdnQnlBREtRQUFOd01BUVFnaEF3TkFJQU1nQjJvZ0JEd0FBQ0FFUWdpSUlRUWdBMEVCYWlJRFFSQkhEUUFMSUFKQ1AxWUVRQU5BSUFnZ0J5QUdFSGhCQUNFREEwQWdBQ0FEYWlBQklBTnFMQUFBSUFNZ0NHb3NBQUJ6T2dBQUlBTkJBV29pQTBIQUFFY05BQXRCQ0NFRFFRRWhCUU5BSUFNZ0Iyb2lDaTBBQUNBRmFpRUZJQW9nQlRvQUFDQUZRUWgySVFVZ0EwRUJhaUlEUVJCSERRQUxJQUJCUUdzaEFDQUJRVUJySVFFZ0FrSkFmQ0lDUWo5V0RRQUxDeUFDUWdCU0JFQWdDQ0FISUFZUWVDQUNweUlGQkVCQkFDRURBMEFnQUNBRGFpQUJJQU5xTEFBQUlBTWdDR29zQUFCek9nQUFJQU5CQVdvaUF5QUZSdzBBQ3dzTElBaEJ3QUFRQ2lBR1FTQVFDZ3NnQ3dza0FBczBBUU4vUVFFaEFRTkFJQUVnQUNBQ2FpSUJMUUFBYWlFRElBRWdBem9BQUNBRFFRaDJJUUVnQWtFQmFpSUNRUVJIRFFBTEN4QUFJQUJDQURjQ0FDQUFRZ0EzQWdnTGR3RUJmeUFBUWZ3QmFpQUFRY0wvQTJwQkNIWnhJQUJCelA4RGFrRUlkaUlCUWY4QmNVSC9BWE54SUFCQnh3QnFJQUZ4SUFCQjV2OERha0VJZGtIL0FYRWlBVUgvQVhOeElBQkJ3UUJxSUFGeFFRQWdBRUUrYzJ0QkNIWkJLM0ZCSzNOeVFRQWdBRUUvYzJ0QkNIWkJMM0ZCTDNOeWNuSUxlUUVCZnlBQVFmd0JhaUFBUWNML0EycEJDSFp4SUFCQnpQOERha0VJZGlJQlFmOEJjVUgvQVhOeElBQkJ4d0JxSUFGeElBQkI1djhEYWtFSWRrSC9BWEVpQVVIL0FYTnhJQUJCd1FCcUlBRnhRUUFnQUVFK2MydEJDSFpCTFhGQkxYTnlRUUFnQUVFL2MydEJDSFpCM3dCeFFkOEFjM0p5Y2dzSEFFRUJFQUVhQ3dzQUlBQWdBVUVnRUpJQkM0b0JBUU4vQW44akFDRUZJd0JCUDJwQlFIRWtBQ01BSVFNakFFRVFhaVFBSUFNZ0FEWUNDQ0FESUFFMkFnUWdBeUlCUVFBMkFnQkJBQ0VBQTBBZ0FTQUJLQUlBSUFBZ0F5Z0NDR29zQUFBZ0FDQURLQUlFYWl3QUFITkIvd0Z4Y2pZQ0FDQUFRUUZxSWdBZ0FrY05BQXNnQVNnQ0FFSC9BMnBCQ0haQkFYRkJmMm9oQUNBRkN5UUFJQUFMRVFBZ0FDQUJJQUlnQTBJQklBUVFpd0VMT1FBZ0FDQUNCSDhnQUNBQ0tBQUFOZ0l3SUFJb0FBUUZJQUJCQURZQ01FRUFDellDTkNBQUlBRW9BQUEyQWpnZ0FDQUJLQUFFTmdJOEN6SUFJQUFnQWdSL0lBSW9BQUFGUVFBTE5nSXdJQUFnQVNnQUFEWUNOQ0FBSUFFb0FBUTJBamdnQUNBQktBQUlOZ0k4QzFvQkJIOENmeU1BSVFrakFFRS9ha0ZBY1NRQUl3QWhCaU1BUWRBQWFpUUFJQVpCUUdzaEJ5QUNRZ0JTQkVBZ0J5QUVFQXNnQmlBRkVFVWdCaUFESUFjUWxRRWdCaUFCSUFBZ0FoQkVJQVpCd0FBUUNnc2dDUXNrQUFzZUFDQUNRdi8vLy84UFZnUkFFQUFGSUFBZ0FTQUNJQU1nQkJDUEFnc0xDd0FnQUNBQklBSVFrUUlMRVFBZ0FDQUJJQUlnQXlBRVFRQVFtZ0VMNlFFQkIzOENmeU1BSVF3akFFRS9ha0ZBY1NRQUl3QWhCaU1BUWJBRWFpUUFJQVpCd0FGcUlnY2dCUkJqSUFaQmdBRnFJZ2dnQkVJZ0VEa2dCeUFJUVNCcVFpQVFIU0FISUFJZ0F4QWRJQWNnQmtGQWF5SUpFQ29nQUVFZ2FpSUxJQVJCSUdwQklCQXNHaUFKRUZJZ0JrR1FBMm9pQkNBSkVGUWdBQ0FFRUZZZ0J5QUZFR01nQnlBQVFzQUFFQjBnQnlBQ0lBTVFIU0FISUFZUUtpQUdFRklnQ0NBSUxBQUFRWGh4T2dBQUlBZ2dDQ3dBSDBFL2NVSEFBSEk2QUI4Z0N5QUdJQWdnQ1JDeUFTQUlRY0FBRUFvZ0NVSEFBQkFLSUFFRVFDQUJRc0FBTndNQUN5QU1DeVFBQ3c4QUlBQWdBU0FDSUFOQkFCQ2NBUXZjQVFFSWZ3Si9Jd0FoRENNQVFUOXFRVUJ4SkFBakFDRUZJd0JCMEFScUpBQWdCVUhnQUdvaEJpQUZRU0JxSVFnZ0JTRUhJQVZCcUFOcUlRa2dCVUd3QW1vaEJTQUFRU0JxSWdzUXNRRUVmeUFBRUZNRWYwRi9CU0FERUxNQkJIOGdBeEJUQkg5QmZ3VWdDU0FERUg0RWYwRi9CU0FHSUFRUVl5QUdJQUJDSUJBZElBWWdBMElnRUIwZ0JpQUJJQUlRSFNBR0lBZ1FLaUFJRUZJZ0JTQUlJQWtnQ3hDN0FTQUhJQVVRVmtGL0lBY2dBQkNSQVNBQUlBZEdHeUVCSUFBZ0IwRWdFRUVnQVhJTEN3VkJmd3NMQlVGL0N5RUFJQXdMSkFBZ0FBdE9BUU4vSXdBaENDTUFRVEJxSkFBZ0NFRWdhaUlKUVFBMkFnQWdDQ0FHSUFjUVBDQUpJQVlwQUJBM0FnUWdBQ0FCSUFJZ0F5QUVJQVVnQ1NBSUVKSUNJUW9nQ0VFZ0VBb2dDQ1FBSUFvTGJBRURmd0ovSXdBaEJTTUFRVDlxUVVCeEpBQWpBQ0VESXdCQm9BRnFKQUFnQVNBQ1FpQVFPU0FCSUFFc0FBQkJlSEU2QUFBZ0FTQUJMQUFmUVQ5eFFjQUFjam9BSHlBRElBRVFWQ0FBSUFNUVZpQUJJQUpCSUJBc0dpQUJRU0JxSUFCQklCQXNHaUFGQ3lRQUN5c0JBbjhEUUNBQUlBSnFJZ01nQVNBQ2Fpd0FBQ0FETEFBQWN6b0FBQ0FDUVFGcUlnSkJDRWNOQUFzTFRnRUNmeU1BSVFrakFFRXdhaVFBSUFsQklHb2lDa0VBTmdJQUlBa2dCeUFJRUR3Z0NpQUhLUUFRTndJRUlBQWdBU0FDSUFNZ0JDQUZJQVlnQ2lBSkVLZ0NJQWxCSUJBS0lBa2tBRUVBQzNZQkEzOENmeU1BSVFVakFFRS9ha0ZBY1NRQUl3QWhBeU1BUVJCcUpBQWdBMEVBT2dBQUlBQWdBU0FDRUxJQ0JIOUJmd1ZCQUNFQkEwQWdBeUFBSUFGcUxBQUFJQU1zQUFCeU9nQUFJQUZCQVdvaUFVRWdSdzBBQzBFQUlBTXRBQUJCL3dOcVFRaDJRUUZ4YXdzaEFDQUZDeVFBSUFBTGl3SUJBMzhDZnlNQUlRY2pBRUUvYWtGQWNTUUFJd0FoQlNNQVFSQnFKQUFnQUVJQU53QUFJQUJDQURjQUNDQUFRZ0EzQUJBZ0FFSUFOd0FZSUFCQ0FEY0FJQ0FBUWdBM0FDZ2dBRUlBTndBd0lBQkNBRGNBT0NBQVFVQnJRZ0EzQUFBZ0FFSUFOd0JJSUFCQ0FEY0FVQ0FBUWdBM0FGZ2dBRUlBTndCZ0lBQkNBRGNBYUNBQVFnQTNBSEFnQUVJQU53QjRJQVJCZ0lDQWdIaExJQUlnQTRSQy8vLy8vdzlXY2dSL1FZaVhBa0VXTmdJQVFYOEZJQVJCZ01BQVNTQURRZ0JSY2dSL1FZaVhBa0VjTmdJQVFYOEZJQVZCRUJBZklBT25JQVJCQ25aQkFTQUJJQUtuSUFWQkVFRUFRU0FnQUVHQUFVRUNFRGhCQUVkQkgzUkJIM1VMQ3lFQUlBY0xKQUFnQUF1R0FnRUZmd0ovSXdBaENDTUFRVDlxUVVCeEpBQWpBQ0VFSXdCQlFHc2tBQ0FDUVFwMklRSWdBQkFqSWdWQi93QkxJQUZDLy8vLy93OVdjZ1JBUVlpWEFrRWNOZ0lBUVg4aEFBVWdCRUlBTndJQUlBUkNBRGNDQ0NBRVFnQTNBaEFnQkVJQU53SVlJQVJDQURjQ0lDQUVRZ0EzQWlnZ0JFSUFOd0l3SUFSQkFEWUNPQ0FGRVBjQklnWUVRQ0FFSUFZMkFoQWdCQ0FHTmdJSUlBUWdCallDQUNBRUlBVTJBaFFnQkNBRk5nSU1JQVFnQlRZQ0JDQUVRZ0EzQWhnZ0JFSUFOd0lnSUFRZ0FDQURFS1VCQkg5QmlKY0NRUncyQWdCQmZ3VWdCQ2dDS0NBQnAwWUVmeUFFS0FJc0lBSkhCVUVCQ3dzaEFDQUdFQllGUVg4aEFBc0xJQWdMSkFBZ0FBdmhBZ0VIZndKL0l3QWhDaU1BUVQ5cVFVQnhKQUFqQUNFRUl3QkJRR3NrQUNBRVFnQTNBZ2dnQkVJQU53SVFJQVJDQURjQ0dDQUVRZ0EzQWlBZ0JFSUFOd0lvSUFSQ0FEY0NNQ0FFUVFBMkFqZ2dCQ0FBRUNNaUJUWUNKQ0FFSUFVMkFoUWdCQ0FGTmdJRUlBUWdCUkFoSWdZMkFpQWdCQ0FGRUNFaUJ6WUNFQ0FFSUFVUUlTSUlOZ0lBSUFaRklBaEZJQWRGY25JRVFDQUdFQllnQnhBV0lBZ1FGa0ZxSVFBRkFrQWdCUkFoSWdWRkJFQWdCaEFXSUFjUUZpQUlFQlpCYWlFQURBRUxJQVFnQUNBREVLVUJJZ0FFUUNBRUtBSWdFQllnQkNnQ0VCQVdJQVFvQWdBUUZpQUZFQllNQVFzZ0JDZ0NLQ0FFS0FJc0lBUW9BalFnQVNBQ0lBUW9BaEFnQkNnQ0ZDQUZJQVFvQWdSQkFFRUFJQU1RT0NFQUlBUW9BaUFRRmlBRUtBSVFFQllDZndKQUlBQU5BQ0FGSUFRb0FnQWdCQ2dDQkJCQkRRQkJBQXdCQzBGZEN5RUFJQVVRRmlBRUtBSUFFQllMQ3lBS0N5UUFJQUFMdVFRQkJuOENmeU1BSVFnakFFRS9ha0ZBY1NRQUl3QWhCQ01BUVJCcUpBQWdCRUVFYWlFRElBQW9BaFFoQlNBQUtBSUVJUVlnQUVFQU5nSVVJQUJCQURZQ0JBSkFBa0FDUUFKQUFrQWdBa0VCYXc0Q0FRQUNDeUFCUVFscUlRSWdBVUhsamdKQkNSQWlSUTBDUVdBaEFBd0RDeUFCUVFocUlRSWdBVUh2amdKQkNCQWlSUTBCUVdBaEFBd0NDMEZtSVFBTUFRc2dBaUVCSUFGQitJNENRUU1RSWdSQVFXQWhBQVVnQVVFRGFpQURFRXNoQVNBREtBSUFJUUlnQVFSQUlBSkJFMFlFUUNBQlFmeU9Ba0VERUNJRVFFRmdJUUFGSUFGQkEyb2dBeEJMSWdGRkJFQkJZQ0VBREFVTElBQWdBeWdDQURZQ0xDQUJRWUNQQWtFREVDSUVRRUZnSVFBRklBRkJBMm9nQXhCTElnRkZCRUJCWUNFQURBWUxJQUFnQXlnQ0FEWUNLQ0FCUVlTUEFrRURFQ0lFUUVGZ0lRQUZJQUZCQTJvZ0F4QkxJZ0ZGQkVCQllDRUFEQWNMSUFBZ0F5Z0NBQ0lDTmdJd0lBQWdBallDTkNBQlFRRnFJQUVnQVN3QUFFRWtSaUlDR3lFQklBSUVRQ0FESUFVMkFnQWdBQ2dDRUNBRklBRWdBUkFqUVFBZ0F5QUVRUU1RWFFSQVFXQWhBQXdJQ3lBQUlBTW9BZ0EyQWhRZ0JDZ0NBQ0lCTEFBQVFTUkdJUUlnQVVFQmFpQUJJQUliSVFFZ0FnUkFJQU1nQmpZQ0FDQUFLQUlBSUFZZ0FTQUJFQ05CQUNBRElBUkJBeEJkQkVCQllDRUFEQWtMSUFBZ0F5Z0NBRFlDQkNBRUtBSUFJUUVnQUJCd0lnQkZCRUJCWUVFQUlBRXNBQUFiSVFBTEJVRmdJUUFMQlVGZ0lRQUxDd3NMQlVGbUlRQUxCVUZnSVFBTEN3c2dDQXNrQUNBQUN5b0JBWDhEUUNBQ1FRTjBJQUJxSUFFZ0FrRURkR29wQUFBM0F3QWdBa0VCYWlJQ1FZQUJSdzBBQ3dzL0FRRi9JQUFnQVVFRWNSRFBBaUFBS0FJRUVCWWdBRUVBTmdJRUlBQW9BZ0FpQVFSQUlBRW9BZ0FpQWdSQUlBSVFGZ3NMSUFFUUZpQUFRUUEyQWdBTHFBRUFJQUFnQVNnQUFFSC8vLzhmY1RZQ0FDQUFJQUVvQUFOQkFuWkJnLzcvSDNFMkFnUWdBQ0FCS0FBR1FRUjJRZitCL3g5eE5nSUlJQUFnQVNnQUNVRUdka0gvLzhBZmNUWUNEQ0FBSUFFb0FBeEJDSFpCLy84L2NUWUNFQ0FBUWdBM0FoUWdBRUlBTndJY0lBQkJBRFlDSkNBQUlBRW9BQkEyQWlnZ0FDQUJLQUFVTmdJc0lBQWdBU2dBR0RZQ01DQUFJQUVvQUJ3MkFqUWdBRUlBTndNNElBQkJBRG9BVUF1Q0FnRURmZ0pBQWtBZ0FDa0RPQ0lFUWdCUkRRQWdBa0lRSUFSOUlnTWdBeUFDVmhzaUJVSUFVZ1JBUWdBaEF3TkFJQU1nQkh5bklBQkJRR3RxSUFFZ0E2ZHFMQUFBT2dBQUlBQXBBemdoQkNBRFFnRjhJZ01nQlZRTkFBc0xJQUFnQkNBRmZDSUVOd000SUFSQ0VGb0VRQ0FBSUFCQlFHdENFQkJ4SUFCQ0FEY0RPQ0FDSUFWOUlRSWdBU0FGcDJvaEFRd0JDd3dCQ3lBQ1FuQ0RJUU1nQWtJUFZnUitJQUFnQVNBREVIRWdBNmNnQVdvaEFTQUNJQU45QlNBQ0N5SUVRZ0JTQkVCQ0FDRUNBMEFnQUNrRE9DQUNmS2NnQUVGQWEyb2dBcWNnQVdvc0FBQTZBQUFnQWtJQmZDSUNJQVJVRFFBTElBQWdBQ2tET0NBRWZEY0RPQXNMQzdrREFneC9BMzRnQUNrRE9DSU9RZ0JTQkVBZ0RxY2lBaUFBUVVCcmFrRUJPZ0FBSUE1Q0FYd2lEa0lRVkFSQUlBNm5JQUJCUUd0cVFRQkJEeUFDYXhBYUdnc2dBRUVCT2dCUUlBQWdBRUZBYTBJUUVIRUxJQUFvQWh3Z0FDZ0NHQ0lDUVJwMmFpSURRZi8vL3g5eElRUWdBQ2dDSUNBRFFScDJhaUlEUWYvLy94OXhJUVlnQUNnQ0ZDQUFLQUlrSUFOQkduWnFJZ2RCR25aQkJXeHFJZ05CLy8vL0gzRWhDQ0FIUVlDQWdHQnlJQVlnQkNBQ1FmLy8veDl4SUFOQkduWnFJZ01nQ0VFRmFpSUtRUnAyYWlJRlFScDJhaUlMUVJwMmFpSU1RUnAyYWlJSlFSOTJRWDlxSWcxQi8vLy9IM0VoQWlBQ0lBVnhJQU1nQ1VFZmRTSURjWEloQlNBQ0lBdHhJQU1nQkhGeUlnUkJGSFFnQlVFR2RuS3RJQUFvQWl5dGZDQUNJQXB4SUFNZ0NIRnlJQVZCR25SeXJTQUFLQUlvclh3aUVFSWdpSHdoRGlBQ0lBeHhJQU1nQm5GeUlnSkJEblFnQkVFTWRuS3RJQUFvQWpDdGZDQU9RaUNJZkNFUElBa2dEWEVnQXlBSGNYSkJDSFFnQWtFU2RuS3RJQUFvQWpTdGZDQVBRaUNJZktjaEFpQUJJQkNuRUFzZ0FVRUVhaUFPcHhBTElBRkJDR29nRDZjUUN5QUJRUXhxSUFJUUN5QUFRZGdBRUFvTE53RUJmeUFDUVFOMklnTUVRRUVBSVFJRFFDQUFJQUpCQTNScUlBSkJBM1FnQVdvcEF3QVEyZ0lnQWtFQmFpSUNJQU5IRFFBTEN3dlBBUUVEZnlNQUlRa2pBRUhnQW1va0FDQUpRUkJxSWdwQ3dBQWdCaUFIRURZZ0NVSFFBR29pQ0NBS0VDWWdDa0hBQUJBS0lBZ2dCQ0FGRUE4Z0NFR3dsZ0pDQUNBRmZVSVBneEFQSUFnZ0FTQUNFQThnQ0VHd2xnSkNBQ0FDZlVJUGd4QVBJQWxCMEFKcUlnUWdCUkFTSUFnZ0JFSUlFQThnQkNBQ0VCSWdDQ0FFUWdnUUR5QUlJQWtRSlNBSVFZQUNFQW9nQ1NBREVFTWhBeUFKUVJBUUNpQUFCRUFnQXdSL0lBQkJBQ0FDcHhBYUdrRi9CU0FBSUFFZ0FpQUdRUUVnQnhBdlFRQUxJUU1MSUFra0FDQURDK2dCQVFOL0l3QWhCaU1BUVQ5cVFVQnhKQUFqQUNFRkl3QkJ3QUZxSkFBZ0FVRi9ha0VZZEVFWWRVSC9BWEZCUDBvRVFCQUFDeUFGUVlBQmFpRUVJQUpGSUFOQmYycEJHSFJCR0hWQi93RnhRVDlLY2dSQUVBQUZJQVFnQVRvQUFDQUVJQU02QUFFZ0JFRUJPZ0FDSUFSQkFUb0FBeUFFUVFScUVIVWdCRUVJYWtJQUVCSWdCRUlBTndNUUlBUkNBRGNER0NBRVFnQTNBeUFnQkVJQU53TW9JQVJDQURjRE1DQUVRZ0EzQXpnZ0FDQUVFSFlnQlNBRFFmOEJjU0lCYWtFQVFZQUJJQUZyRUJvYUlBVWdBaUFCRUJnYUlBQWdCVUtBQVJBN0lBVkJnQUVRQ2lBR0pBQUxDNVVCQVFKL0l3QWhBeU1BUVQ5cVFVQnhKQUFqQUNFQ0l3QkJRR3NrQUNBQlFYOXFRUmgwUVJoMVFmOEJjVUUvU2dSQUVBQUZJQUlnQVRvQUFDQUNRUUE2QUFFZ0FrRUJPZ0FDSUFKQkFUb0FBeUFDUVFScUVIVWdBa0VJYWtJQUVCSWdBa0lBTndNUUlBSkNBRGNER0NBQ1FnQTNBeUFnQWtJQU53TW9JQUpDQURjRE1DQUNRZ0EzQXpnZ0FDQUNFSFlnQXlRQUN3c1FBQ0FBSUFFZ0FpQURJQVFnQlJCeUM2d0JBUU4vSXdBaENDTUFRZUFDYWlRQUlBaEJFR29pQ2lBR0lBY1FtQUVnQ0VIUUFHb2lDU0FLRUNZZ0NrSEFBQkFLSUFrZ0JDQUZFQThnQ0VIUUFtb2lCQ0FGRUJJZ0NTQUVRZ2dRRHlBSklBRWdBaEFQSUFRZ0FoQVNJQWtnQkVJSUVBOGdDU0FJRUNVZ0NVR0FBaEFLSUFnZ0F4QkRJUU1nQ0VFUUVBb2dBQVJBSUFNRWZ5QUFRUUFnQXFjUUdocEJmd1VnQUNBQklBSWdCaUFIRUpjQlFRQUxJUU1MSUFna0FDQURDMk1CQlg5QklDRUJRUUVoQWdOQUlBSkIvd0Z4SWdJZ0FDQUJRWDlxSWdGcUxBQUFJZ1JCL3dGeElBRkJzSVFDYWl3QUFDSUZRZjhCY1d0QkNIVnhJQU55SVFNZ0JDQUZjMEgvQVhGQi8vOERha0VJZGlBQ2NTRUNJQUVOQUFzZ0EwRUFSd3ZsSUFJQmZ6ZCtJQUVzQUFBZ0FTd0FBU0FCUVFKcUlnUXNBQUFRRUVMLy8vOEFneUVGSUFRUUVVSUZpRUwvLy84QWd5RUdJQUVzQUFVZ0FTd0FCaUFCUVFkcUlnUXNBQUFRRUVJQ2lFTC8vLzhBZ3lFT0lBUVFFVUlIaUVMLy8vOEFneUVQSUFGQkNtb1FFVUlFaUVMLy8vOEFneUVLSUFFc0FBMGdBU3dBRGlBQlFROXFJZ1FzQUFBUUVFSUJpRUwvLy84QWd5RUhJQVFRRVVJR2lFTC8vLzhBZ3lFTElBRXNBQklnQVN3QUV5QUJMQUFVRUJCQ0E0aEMvLy8vQUlNaERTQUJMQUFWSUFFc0FCWWdBVUVYYWlJRUxBQUFFQkJDLy8vL0FJTWhDQ0FFRUJGQ0JZaEMvLy8vQUlNaEVDQUJMQUFhSUFFc0FCc2dBVUVjYWlJQkxBQUFFQkJDQW9oQy8vLy9BSU1oRENBQkVCRkNCNGdoQ1NBQ0xBQUFJQUlzQUFFZ0FrRUNhaUlCTEFBQUVCQkMvLy8vQUlNaEdDQUJFQkZDQlloQy8vLy9BSU1oR1NBQ0xBQUZJQUlzQUFZZ0FrRUhhaUlCTEFBQUVCQkNBb2hDLy8vL0FJTWhHeUFCRUJGQ0I0aEMvLy8vQUlNaEhDQUNRUXBxRUJGQ0JJaEMvLy8vQUlNaEdpQUNMQUFOSUFJc0FBNGdBa0VQYWlJQkxBQUFFQkJDQVloQy8vLy9BSU1oRlNBQkVCRkNCb2hDLy8vL0FJTWhGaUFDTEFBU0lBSXNBQk1nQWl3QUZCQVFRZ09JUXYvLy93Q0RJUkVnQWl3QUZTQUNMQUFXSUFKQkYyb2lBU3dBQUJBUVF2Ly8vd0NESVJNZ0FSQVJRZ1dJUXYvLy93Q0RJUlFnQWl3QUdpQUNMQUFiSUFKQkhHb2lBU3dBQUJBUVFnS0lRdi8vL3dDRElSSWdBUkFSUWdlSUlSY2dBeXdBQUNBRExBQUJJQU5CQW1vaUFTd0FBQkFRUXYvLy93Q0RJUjBnQVJBUlFnV0lRdi8vL3dDRElSNGdBeXdBQlNBRExBQUdJQU5CQjJvaUFTd0FBQkFRUWdLSVF2Ly8vd0NESVRFZ0FSQVJRZ2VJUXYvLy93Q0RJVElnQTBFS2FoQVJRZ1NJUXYvLy93Q0RJVE1nQXl3QURTQURMQUFPSUFOQkQyb2lBU3dBQUJBUVFnR0lRdi8vL3dDRElUUWdBUkFSUWdhSVF2Ly8vd0NESVNvZ0F5d0FFaUFETEFBVElBTXNBQlFRRUVJRGlFTC8vLzhBZ3lFMUlBTXNBQlVnQXl3QUZpQURRUmRxSWdFc0FBQVFFRUwvLy84QWd5RXJJQUVRRVVJRmlFTC8vLzhBZ3lFc0lCQWdHWDRnRENBWWZud2dDQ0FiZm53Z0RTQWNmbndnQ3lBYWZud2dCeUFWZm53Z0NpQVdmbndnRGlBVGZud2dEeUFSZm53Z0JpQVVmbndnQlNBU2Zud2dBeXdBR2lBRExBQWJJQU5CSEdvaUFTd0FBQkFRUWdLSVF2Ly8vd0NEZkNJdFFvQ0FRSDBoSlNBTUlCUitJQWtnRTM1OElCQWdFbjU4SUFnZ0YzNThJQXdnRTM0Z0NTQVJmbndnRUNBVWZud2dDQ0FTZm53Z0RTQVhmbndpSDBLQWdFQjlJaVpDRllkOElTRWdEQ0FYZmlBSklCSitmQ0FNSUJKK0lBa2dGSDU4SUJBZ0YzNThJaUpDZ0lCQWZTSWtRaFdIZkNFZ0lBa2dGMzRpSjBLQWdFQjlJaWhDRlljaEl5QUZJQmwrSUFZZ0dINThJQjU4SUIwZ0JTQVlmbndpTmtLQWdFQjlJamRDRlloOElqaENnSUJBZlNFd0lCOGdKa0tBZ0lCL2czMGdFQ0FUZmlBSklCWitmQ0FNSUJGK2ZDQUlJQlIrZkNBTklCSitmQ0FMSUJkK2ZDQU1JQlorSUFrZ0ZYNThJQWdnRTM1OElCQWdFWDU4SUEwZ0ZINThJQXNnRW41OElBY2dGMzU4SWk1Q2dJQkFmU0lwUWhXSGZDSTVRb0NBUUgwaU9rSVZoM3doSFNBaUlDUkNnSUNBZjROOUlDRkNnSUJBZlNJdlFoV0hmQ0VlSUNjZ0tFS0FnSUIvZzMwZ0lFS0FnRUI5SWlKQ0ZZZDhJUjhnSTBLRG9WWitJQzU4SUNsQ2dJQ0FmNE45SUF3Z0ZYNGdDU0FhZm53Z0VDQVdmbndnRFNBVGZud2dDQ0FSZm53Z0N5QVVmbndnQnlBU2Zud2dDaUFYZm53Z0RDQWFmaUFKSUJ4K2ZDQVFJQlYrZkNBSUlCWitmQ0FMSUJOK2ZDQU5JQkYrZkNBSElCUitmQ0FLSUJKK2ZDQVBJQmQrZkNJa1FvQ0FRSDBpSjBJVmgzd2lLRUtBZ0VCOUlpNUNGWWQ4SVNZZ0kwTFRqRU4rSUNSOElCOUMwYXNJZm53Z0lDQWlRb0NBZ0grRGZTSWdRb09oVm41OElDZENnSUNBZjROOUlBd2dISDRnQ1NBYmZud2dFQ0FhZm53Z0NDQVZmbndnRFNBV2Zud2dCeUFUZm53Z0N5QVJmbndnQ2lBVWZud2dEeUFTZm53Z0RpQVhmbndnRENBYmZpQUpJQmwrZkNBUUlCeCtmQ0FJSUJwK2ZDQU5JQlYrZkNBTElCWitmQ0FLSUJOK2ZDQUhJQkYrZkNBUElCUitmQ0FPSUJKK2ZDQUdJQmQrZkNJa1FvQ0FRSDBpSjBJVmgzd2lLVUtBZ0VCOUlqdENGWWQ4SVNJZ0tTQWZRdE9NUTM0Z0kwTG45aWQrZkNBZ1F0R3JDSDU4SUI1Q2c2Rldmbng4SUR0Q2dJQ0FmNE45SUNRZ0kwS1kyaHgrSUI5QzUvWW5mbndnSUVMVGpFTitmSHdnSGtMUnF3aCtmQ0FoSUM5Q2dJQ0FmNE45SWlGQ2c2RldmbndnSjBLQWdJQi9nMzBnRENBWmZpQUpJQmgrZkNBUUlCdCtmQ0FJSUJ4K2ZDQU5JQnArZkNBTElCVitmQ0FISUJaK2ZDQVBJQk4rZkNBS0lCRitmQ0FPSUJSK2ZDQUZJQmQrZkNBR0lCSitmQ0FCRUJGQ0I0aDhJQ1ZDRllkOElnbENnSUJBZlNJa1FoV0hmQ0luUW9DQVFIMGlMMElWaDN3aEVpQW9JQjlDZzZGV2ZpQWpRdEdyQ0g1OGZDQXVRb0NBZ0grRGZTQWlRb0NBUUgwaUtVSVZoM3doRnlBNUlEcENnSUNBZjROOUlDWkNnSUJBZlNJb1FoV0hmQ0VNSUNjZ0wwS0FnSUIvZzMwZ0NTQWpRcFBZS0g0Z0gwS1kyaHgrZkNBZ1F1ZjJKMzU4SUI1QzA0eERmbndnSVVMUnF3aCtmQ0FkUW9PaFZuNThmQ0FrUW9DQWdIK0RmU0F0SUI5Q2s5Z29maUFnUXBqYUhINThJQjVDNS9ZbmZud2dJVUxUakVOK2ZDQWRRdEdyQ0g1OGZDQUlJQmwrSUJBZ0dINThJQTBnRzM1OElBc2dISDU4SUFjZ0duNThJQW9nRlg1OElBOGdGbjU4SUFZZ0UzNThJQTRnRVg1OElBVWdGSDU4SUN4OElBMGdHWDRnQ0NBWWZud2dDeUFiZm53Z0J5QWNmbndnQ2lBYWZud2dEeUFWZm53Z0RpQVdmbndnQlNBVGZud2dCaUFSZm53Z0szd2lFMEtBZ0VCOUloUkNGWWQ4SWl0Q2dJQkFmU0lzUWhXSGZDQWxRb0NBZ0grRGZTSWxRb0NBUUgwaUxVSVZoM3dpSTBLQWdFQjlJaDlDRllkOElRZ2dJaUFwUW9DQWdIK0RmU0FTUW9DQVFIMGlKRUlWaDN3aEVDQW1JQ2hDZ0lDQWY0TjlJQmRDZ0lCQWZTSWlRaFdIZkNFSklBeENnNkZXZmlBbGZDQXJJQ0JDazlnb2ZpQWVRcGphSEg1OElDRkM1L1luZm53Z0hVTFRqRU4rZkh3Z0xFS0FnSUIvZzMwZ0V5QWVRcFBZS0g0Z0lVS1kyaHgrZkNBZFF1ZjJKMzU4ZkNBVVFvQ0FnSCtEZlNBTElCbCtJQTBnR0g1OElBY2dHMzU4SUFvZ0hINThJQThnR241OElBNGdGWDU4SUFZZ0ZuNThJQVVnRVg1OElEVjhJQWNnR1g0Z0N5QVlmbndnQ2lBYmZud2dEeUFjZm53Z0RpQWFmbndnQmlBVmZud2dCU0FXZm53Z0tud2lGa0tBZ0VCOUloRkNGWWQ4SWhOQ2dJQkFmU0lVUWhXSGZDSW1Rb0NBUUgwaUtrSVZoM3dpSGtLQWdFQjlJaUJDRllkOElDMUNnSUNBZjROOUlRMGdGeUFpUW9DQWdIK0RmU0lMUW9PaFZuNGdERUxUakVOK0lDWjhJQk1nSVVLVDJDaCtJQjFDbU5vY2ZueDhJQlJDZ0lDQWY0TjlJQllnSFVLVDJDaCtmQ0FLSUJsK0lBY2dHSDU4SUE4Z0czNThJQTRnSEg1OElBWWdHbjU4SUFVZ0ZYNThJRFI4SUE4Z0dYNGdDaUFZZm53Z0RpQWJmbndnQmlBY2Zud2dCU0FhZm53Z00zd2lFMEtBZ0VCOUloUkNGWWQ4SWhkQ2dJQkFmU0loUWhXSGZDQVJRb0NBZ0grRGZTSUhRb0NBUUgwaUZVSVZoM3dpSFVLQWdFQjlJaVZDRllkOElDcENnSUNBZjROOUlBbEMwYXNJZm54OElSb2dCeUFNUXBqYUhINThJQlZDZ0lDQWY0TjlJQWxDNS9ZbmZud2dDMExUakVOK2ZDQVFRdEdyQ0g1OElCSWdKRUtBZ0lCL2czMGlDa0tEb1ZaK2ZDRVZJRGdnTUVLQWdJQi9nMzBnQ0VLWTJoeCtmQ0FLUXBQWUtINThJRFlnTjBLQWdJRC8vLzhEZzMwZ0NFS1QyQ2grZkNJUlFvQ0FRSDBpRWtJVmgzd2lKa0tBZ0VCOUlSWWdFU0FTUW9DQWdIK0RmU0FqSUI5Q2dJQ0FmNE45SUExQ2dJQkFmU0lpUWhXSGZDSWpRb0NBUUgwaUgwSVZoeUlIUXBQWUtINThJUkVnSXlBZlFvQ0FnSCtEZlNBZUlBbENnNkZXZmlBTVF0R3JDSDU4ZkNBZ1FvQ0FnSCtEZlNBYVFvQ0FRSDBpRWtJVmgzd2lIa0tBZ0VCOUlpQkNGWWNnRFh3Z0lrS0FnSUIvZzMwZ0hpQWdRb0NBZ0grRGZTQWFJQkpDZ0lDQWY0TjlJQjBnREVMbjlpZCtmQ0FsUW9DQWdIK0RmU0FKUXRPTVEzNThJQXRDMGFzSWZud2dFRUtEb1ZaK2ZDQVZRb0NBUUgwaURVSVZoM3dpSFVLQWdFQjlJaVZDRllkOElCMGdKVUtBZ0lCL2czMGdGU0FOUW9DQWdIK0RmU0FYSUNGQ2dJQ0FmNE45SUF4Q2s5Z29mbndnQ1VLWTJoeCtmQ0FMUXVmMkozNThJQWhDZzZGV2Zud2dFRUxUakVOK2ZDQUtRdEdyQ0g1OElCTWdEaUFaZmlBUElCaCtmQ0FHSUJ0K2ZDQUZJQngrZkNBeWZDQUdJQmwrSUE0Z0dINThJQVVnRzM1OElERjhJZ1ZDZ0lCQWZTSUdRaFdJZkNJT1FvQ0FRSDBpRDBJVmgzd2dGRUtBZ0lCL2czMGdDVUtUMkNoK2ZDQUxRcGphSEg1OElBaEMwYXNJZm53Z0VFTG45aWQrZkNBS1F0T01RMzU4SWhoQ2dJQkFmU0laUWhXSGZDSU1Rb0NBUUgwaUNVSVZoM3dnQjBLRG9WWitJQXg4SUFsQ2dJQ0FmNE45SUJnZ0IwTFJxd2grZkNBWlFvQ0FnSCtEZlNBT0lBOUNnSUNBZjROOUlBdENrOWdvZm53Z0NFTFRqRU4rZkNBUVFwamFISDU4SUFwQzUvWW5mbndnQlNBd1FoV0lmQ0FHUW9DQWdIK0RmU0FJUXVmMkozNThJQkJDazlnb2Zud2dDa0tZMmh4K2ZDSUZRb0NBUUgwaUJrSVZoM3dpRGtLQWdFQjlJZzlDRllkOElBZEMwNHhEZmlBT2ZDQVBRb0NBZ0grRGZTQUZJQWRDNS9ZbmZud2dCa0tBZ0lCL2czMGdGa0lWaDN3Z0ppQUhRcGphSEg1OElCWkNnSUNBZjROOUlCRkNGWWQ4SWdwQ0ZZZDhJZ3RDRllkOElnOUNGWWQ4SWc1Q0ZZZDhJZ2RDRllkOElnMUNGWWQ4SWdoQ0ZZZDhJZ2xDRllkOEloaENGWWQ4SWhsQ0ZZZDhJaHRDRlljaUJVS1QyQ2grSUJGQy8vLy9BSU44SVFZZ0dVTC8vLzhBZ3lBWVF2Ly8vd0NESUFsQy8vLy9BSU1nQ0VMLy8vOEFneUFOUXYvLy93Q0RJQVZDZzZGV2ZpQUhRdi8vL3dDRGZDQUZRdEdyQ0g0Z0RrTC8vLzhBZzN3Z0JVTFRqRU4rSUE5Qy8vLy9BSU44SUFWQzUvWW5maUFMUXYvLy93Q0RmQ0FGUXBqYUhINGdDa0wvLy84QWczd2dCa0lWaDN3aURrSVZoM3dpRUVJVmgzd2lEMElWaDN3aUNrSVZoM3dpREVJVmgzd2lCVUlWaDN3aUIwSVZoM3dpQzBJVmgzd2lEVUlWaDN3aENDQUFJQVk4QUFBZ0FDQUdRZ2lJUEFBQklBQWdCa0lRaUVJZmd5QU9Rdi8vL3dDRElnWkNCWWFFUEFBQ0lBQWdEa0lEaUR3QUF5QUFJQTVDQzRnOEFBUWdBQ0FHUWhPSUlCQkMvLy8vQUlNaUJrSUNob1E4QUFVZ0FDQVFRZ2FJUEFBR0lBQWdCa0lPaUNBUFF2Ly8vd0NESWdaQ0I0YUVQQUFISUFBZ0QwSUJpRHdBQ0NBQUlBOUNDWWc4QUFrZ0FDQUdRaEdJSUFwQy8vLy9BSU1pQmtJRWhvUThBQW9nQUNBS1FnU0lQQUFMSUFBZ0NrSU1pRHdBRENBQUlBWkNGSWdnREVMLy8vOEFneUlHUWdHR2hEd0FEU0FBSUF4Q0I0ZzhBQTRnQUNBR1FnK0lJQVZDLy8vL0FJTWlCa0lHaG9ROEFBOGdBQ0FGUWdLSVBBQVFJQUFnQlVJS2lEd0FFU0FBSUFkQ0E0WWdCa0lTaUlROEFCSWdBQ0FIUWdXSVBBQVRJQUFnQjBJTmlEd0FGQ0FBSUFzOEFCVWdBQ0FMUWdpSVBBQVdJQUFnQzBJUWlFSWZneUFOUXYvLy93Q0RJZ1ZDQllhRVBBQVhJQUFnRFVJRGlEd0FHQ0FBSUExQ0M0ZzhBQmtnQUNBRlFoT0lJQWhDLy8vL0FJTWlCVUlDaG9ROEFCb2dBQ0FJUWdhSVBBQWJJQUFnQlVJT2lDQWJRdi8vL3dDRElBaENGWWQ4SWdWQ0I0YUVQQUFjSUFBZ0JVSUJpRHdBSFNBQUlBVkNDWWc4QUI0Z0FDQUZRaEdIUEFBZkMxQUJBbjhnQUN3QUgwSC9BSEZCL3dCeklRRkJIaUVDQTBBZ0FDQUNhaXdBQUVGL2N5QUJjaUVCSUFKQmYyb2lBZzBBQ3lBQlFmOEJjVUgvQTJwQjdBRWdBQzBBQUd0eFFRaDJRUUZ4UVFGekMvd0NBUVovQW44akFDRUhJd0JCUDJwQlFIRWtBQ01BSVFVakFFSGdEV29rQUNBRklBRVFHeUFGUWNBTWFpSUNJQUVRUFNBRlFZQUthaUlCSUFJUUZDQUNJQUVnQlJBY0lBVkJvQXRxSWdNZ0FoQVVJQVZCb0FGcUlnUWdBeEFiSUFJZ0FTQUVFQndnQXlBQ0VCUWdCVUhBQW1vaUJDQURFQnNnQWlBQklBUVFIQ0FESUFJUUZDQUZRZUFEYWlJRUlBTVFHeUFDSUFFZ0JCQWNJQU1nQWhBVUlBVkJnQVZxSWdRZ0F4QWJJQUlnQVNBRUVCd2dBeUFDRUJRZ0JVR2dCbW9pQkNBREVCc2dBaUFCSUFRUUhDQURJQUlRRkNBRlFjQUhhaUlFSUFNUUd5QUNJQUVnQkJBY0lBTWdBaEFVSUFWQjRBaHFJQU1RR3lBQUVIcEIvQUVoQVFOQUlBSWdBQkE5SUFGQjBJQUNhaXdBQUNJRVFRQktCRUFnQXlBQ0VCUWdBaUFESUFSQi93RnhRUUYyUWFBQmJDQUZhaEFjQlNBRVFRQklCRUFnQXlBQ0VCUWdBaUFESUFSQmZtMUJHSFJCR0hWQm9BRnNJQVZxRUgwTEN5QUFJQUlRRkNBQlFYOXFJUVFnQVFSQUlBUWhBUXdCQ3dzZ0J3c2tBQXM2QUNBRFF1Ly8vLzhQVmdSQUVBQUxJQUFnQUNBRHAycEJBQ0FDSUFNZ0JDQUZJQVlnQnhCN0dpQUJCRUFnQVNBRFFoQjhOd01BQzBFQUN6UUJBMzhDZnlNQUlRTWpBRUUvYWtGQWNTUUFJd0FoQVNNQVFhQUJhaVFBSUFFZ0FCQzBBU0FCRUZnaEFDQURDeVFBSUFBTGdBSUJCSDhDZnlNQUlRWWpBRUUvYWtGQWNTUUFJd0FoQkNNQVFZQUJhaVFBSUFBUUhpQUFRU2hxRUI0Z0FFSFFBR29RTkNBQUlBRWdBa0VZZEVFWWRTSURJQU5CQUNBQ1FmOEJjVUVIZGlJQ2EzRkJBWFJyUWY4QmNTSURRUUVRS0JBa0lBQWdBVUg0QUdvZ0EwRUNFQ2dRSkNBQUlBRkI4QUZxSUFOQkF4QW9FQ1FnQUNBQlFlZ0NhaUFEUVFRUUtCQWtJQUFnQVVIZ0Eyb2dBMEVGRUNnUUpDQUFJQUZCMkFScUlBTkJCaEFvRUNRZ0FDQUJRZEFGYWlBRFFRY1FLQkFrSUFBZ0FVSElCbW9nQTBFSUVDZ1FKQ0FFSUFCQktHb1FLeUFFUVNocUlBQVFLeUFFUWRBQWFpQUFRZEFBYWhDQUFTQUFJQVFnQWhBa0lBWUxKQUFMSWdBZ0FDQUJFQ3NnQUVFb2FpQUJRU2hxRUNzZ0FFSFFBR29nQVVIUUFHb1FLd3VGQndJSmZ4MStJQUVvQWdRaUJhd2hGeUFCS0FJSUlnYXNJUkVnQVNnQ0RDSUhyQ0ViSUFFb0FoQWlDS3doRENBQktBSVVJZ0tzSVJVZ0FTZ0NHQ0lEckNFUElBRW9BaHdpQkt3aEhDQUJLQUlnSWdtc0lSZ2dBU2dDSkNJS3JDRWRJQUpCSm15c0lCVitJQUVvQWdBaUFhd2lDeUFMZm53Z0NFRUJkS3dpSGlBRFFSTnNyQ0laZm53Z0JFRW1iS3dpRmlBSFFRRjByQ0lRZm53Z0JrRUJkS3dpRXlBSlFSTnNyQ0lTZm53Z0JVRUJkS3dpQ3lBS1FTWnNyQ0lOZm54Q0FZWWhIeUFMSUJCK0lCRWdFWDU4SUFGQkFYU3NJZzRnREg1OElCWWdISDU4SUFOQkFYU3NJQkorZkNBQ1FRRjByQ0lVSUExK2ZFSUJoaUVhSUFzZ0RINGdFeUFiZm53Z0RpQVZmbndnQkVFQmRLd2lJQ0FTZm53Z0RTQVBmbnhDQVlZZ0drS0FnSUFRZkNJaVFocUhmQ0lqUW9DQWdBaDhJU0VnR2lBaVFvQ0FnR0NEZlNBT0lCdCtJQXNnRVg1OElBOGdGbjU4SUJJZ0ZINThJQXdnRFg1OFFnR0dJQTRnRVg0Z0N5QVhmbndnRHlBWmZud2dGQ0FXZm53Z0VpQWVmbndnRFNBUWZueENBWVlnRkNBWmZpQU9JQmQrZkNBTUlCWitmQ0FRSUJKK2ZDQU5JQkYrZkVJQmhpQWZRb0NBZ0JCOEloWkNHb2Q4SWhkQ2dJQ0FDSHdpR1VJWmgzd2lKRUtBZ0lBUWZDSWxRaHFIZkNJbVFvQ0FnQWg4SWlkQ0dZZDhJaHBDZ0lDQUVId2hFU0FmSUJaQ2dJQ0FZSU45SUE4Z0VINGdGU0FlZm53Z0V5QWNmbndnQ3lBWWZud2dEaUFkZm54Q0FZWWdEQ0FNZmlBUElCTitmQ0FRSUJSK2ZDQUxJQ0IrZkNBT0lCaCtmQ0FOSUIxK2ZFSUJoaUFNSUJCK0lCTWdGWDU4SUFzZ0QzNThJQTRnSEg1OElBMGdHSDU4UWdHR0lCQWdHMzRnRENBVGZud2dDeUFVZm53Z0RpQVBmbndnRWlBWWZud2dEU0FnZm54Q0FZWWdJVUlaaDN3aUMwS0FnSUFRZkNJTlFocUhmQ0lPUW9DQWdBaDhJZzlDR1lkOEloQkNnSUNBRUh3aUVrSWFoM3dpRTBLQWdJQUlmQ0lVUWhtSFFoTitmQ0lWUW9DQWdCQjhJUXdnQUNBVklBeENnSUNBNEErRGZUNENBQ0FBSUJjZ0dVS0FnSUR3RDROOUlBeENHb2g4UGdJRUlBQWdKQ0FsUW9DQWdPQVBnMzArQWdnZ0FDQW1JQ2RDZ0lDQThBK0RmVDRDRENBQUlCb2dFVUtBZ0lEZ0Q0TjlQZ0lRSUFBZ0l5QWhRb0NBZ1BBUGczMGdFVUlhaUh3K0FoUWdBQ0FMSUExQ2dJQ0E0QStEZlQ0Q0dDQUFJQTRnRDBLQWdJRHdENE45UGdJY0lBQWdFQ0FTUW9DQWdPQVBnMzArQWlBZ0FDQVRJQlJDZ0lDQThBK0RmVDRDSkF1YkFRRUdmd0ovSXdBaENDTUFRVDlxUVVCeEpBQWpBQ0VGSXdCQk1Hb2tBQ0FBSUFGQktHb2lBeUFCRUJNZ0FFRW9haUlFSUFNZ0FSQVZJQUJCMEFCcUlnWWdBQ0FDUVNocUVBd2dCQ0FFSUFJUURDQUFRZmdBYWlJRElBSkIwQUJxSUFGQitBQnFFQXdnQlNBQlFkQUFhaUlCSUFFUUV5QUFJQVlnQkJBVklBUWdCaUFFRUJNZ0JpQUZJQU1RRlNBRElBVWdBeEFUSUFnTEpBQUxzd1FCQm44Q2Z5TUFJUWtqQUVFL2FrRkFjU1FBSXdBaEJTTUFRZUFSYWlRQUlBVkJnQXhxSWdZZ0FSQjhJQVZCZ0FwcUlnY2dBeEI4SUFVZ0FoQWJJQVZCd0JCcUlnTWdBaEE5SUFWQmdBNXFJZ0VnQXhBVUlBTWdBU0FGRUJ3Z0JVR2dEMm9pQkNBREVCUWdCVUdnQVdvaUFpQUVFQnNnQXlBQklBSVFIQ0FFSUFNUUZDQUZRY0FDYWlJQ0lBUVFHeUFESUFFZ0FoQWNJQVFnQXhBVUlBVkI0QU5xSWdJZ0JCQWJJQU1nQVNBQ0VCd2dCQ0FERUJRZ0JVR0FCV29pQWlBRUVCc2dBeUFCSUFJUUhDQUVJQU1RRkNBRlFhQUdhaUlDSUFRUUd5QURJQUVnQWhBY0lBUWdBeEFVSUFWQndBZHFJZ0lnQkJBYklBTWdBU0FDRUJ3Z0JDQURFQlFnQlVIZ0NHb2dCQkFiSUFBUU5DQUFRU2hxRUI0Z0FFSFFBR29RSGtIL0FTRUJBa0FDUUFOQUlBRWdCbW9zQUFBTkFTQUJJQWRxTEFBQURRRWdBVUYvYWlFQ0lBRUVRQ0FDSVFFTUFRc0xEQUVMSUFGQmYwb0VRQU5BSUFNZ0FCQTFJQUVnQm1vc0FBQWlBa0VBU2dSQUlBUWdBeEFVSUFNZ0JDQUNRZjhCY1VFQmRrR2dBV3dnQldvUUhBVWdBa0VBU0FSQUlBUWdBeEFVSUFNZ0JDQUNRWDV0UVJoMFFSaDFRYUFCYkNBRmFoQjlDd3NnQVNBSGFpd0FBQ0lDUVFCS0JFQWdCQ0FERUJRZ0F5QUVJQUpCL3dGeFFRRjJRZmdBYkVHUUNXb1FWUVVnQWtFQVNBUkFJQVFnQXhBVUlBTWdCQ0FDUVg1dFFSaDBRUmgxUWZnQWJFR1FDV29RdWdFTEN5QUFJQU1RUGlBQlFYOXFJUUlnQVVFQVNnUkFJQUloQVF3QkN3c0xDeUFKQ3lRQUN6c0FJQU5DNy8vLy93OVdCRUFRQUFzZ0FDQUFJQU9uYWtFQUlBSWdBeUFFSUFVZ0JpQUhFSUlCR2lBQkJFQWdBU0FEUWhCOE53TUFDMEVBQzRZREFRWi9BbjhqQUNFSEl3QkJQMnBCUUhFa0FDTUFJUVVqQUVHUUFXb2tBQ0FGUWVBQWFpSURJQUVRRFNBRlFUQnFJZ0lnQXhBTklBSWdBaEFOSUFJZ0FTQUNFQXdnQXlBRElBSVFEQ0FESUFNUURTQURJQUlnQXhBTUlBSWdBeEFOUVFFaEJBTkFJQUlnQWhBTklBUkJBV29pQkVFRlJ3MEFDeUFESUFJZ0F4QU1JQUlnQXhBTlFRRWhCQU5BSUFJZ0FoQU5JQVJCQVdvaUJFRUtSdzBBQ3lBQ0lBSWdBeEFNSUFVZ0FoQU5RUUVoQkFOQUlBVWdCUkFOSUFSQkFXb2lCRUVVUncwQUN5QUNJQVVnQWhBTUlBSWdBaEFOUVFFaEJBTkFJQUlnQWhBTklBUkJBV29pQkVFS1J3MEFDeUFESUFJZ0F4QU1JQUlnQXhBTlFRRWhCQU5BSUFJZ0FoQU5JQVJCQVdvaUJFRXlSdzBBQ3lBQ0lBSWdBeEFNSUFVZ0FoQU5RUUVoQkFOQUlBVWdCUkFOSUFSQkFXb2lCRUhrQUVjTkFBc2dBaUFGSUFJUURDQUNJQUlRRFVFQklRUURRQ0FDSUFJUURTQUVRUUZxSWdSQk1rY05BQXNnQXlBQ0lBTVFEQ0FESUFNUURTQURJQU1RRFNBQUlBTWdBUkFNSUFjTEpBQUwwZ0lCQ1g4Z0FTZ0NBQ0lDSUFFb0FpUWlDaUFCS0FJZ0lnTWdBU2dDSENJRUlBRW9BaGdpQlNBQktBSVVJZ1lnQVNnQ0VDSUhJQUVvQWd3aUNDQUJLQUlJSWdrZ0FTZ0NCQ0lCSUFJZ0NrRVRiRUdBZ0lBSWFrRVpkbXBCR25WcVFSbDFha0VhZFdwQkdYVnFRUnAxYWtFWmRXcEJHblZxUVJsMWFrRWFkV3BCR1hWQkUyeHFJUUlnQXlBRUlBVWdCaUFISUFnZ0NTQUJJQUpCR25WcUlnUkJHWFZxSWdWQkduVnFJZ1pCR1hWcUlnZEJHblZxSWdoQkdYVnFJZ2xCR25WcUlnRkJHWFZxSVFNZ0FDQUNRZi8vL3g5eE5nSUFJQUFnQkVILy8vOFBjVFlDQkNBQUlBVkIvLy8vSDNFMkFnZ2dBQ0FHUWYvLy93OXhOZ0lNSUFBZ0IwSC8vLzhmY1RZQ0VDQUFJQWhCLy8vL0QzRTJBaFFnQUNBSlFmLy8veDl4TmdJWUlBQWdBVUgvLy84UGNUWUNIQ0FBSUFOQi8vLy9IM0UyQWlBZ0FDQUtJQU5CR25WcVFmLy8vdzl4TmdJa0MwTUJBMzhDZnlNQUlRVWpBRUUvYWtGQWNTUUFJd0FoQXlNQVFTQnFKQUFnQXlBQ0lBRVFvUUVFZjBGL0JTQUFRZENXQWlBREVGRkJBQXNoQUNBRkN5UUFJQUFMWlFFRGZ3Si9Jd0FoQlNNQVFUOXFRVUJ4SkFBakFDRURJd0JCUUdza0FDQURJQUpDSUJBNUlBRWdBeWtBQURjQUFDQUJJQU1wQUFnM0FBZ2dBU0FES1FBUU53QVFJQUVnQXlrQUdEY0FHQ0FEUWNBQUVBb2dBQ0FCRUdnaEFDQUZDeVFBSUFBTEJBQkJNQXRSQVFOL0FuOGpBQ0VISXdCQlAycEJRSEVrQUNNQUlRVWpBRUVnYWlRQUlBSkNNRlFFZjBGL0JTQUZJQUVnQXhDREFTQUFJQUZCSUdvZ0FrSmdmQ0FGSUFFZ0JCQ0VBUXNoQUNBSEN5UUFJQUFMaWdFQkJIOGpBQ0VGSXdCQjRBQnFKQUFnQlVGQWF5RUdJQVZCSUdvaUJDQUZJZ2NRaUFFRVFFRi9JUUFGSUFBZ0JDa0FBRGNBQUNBQUlBUXBBQWczQUFnZ0FDQUVLUUFRTndBUUlBQWdCQ2tBR0RjQUdDQUdJQVFnQXhDREFTQUFRU0JxSUFFZ0FpQUdJQU1nQnhDR0FTRUFJQWRCSUJBS0lBUkJJQkFLSUFaQkdCQUtDeUFGSkFBZ0FBc2hBQ0FDUWhCVUJIOUJmd1VnQUNBQlFSQnFJQUVnQWtKd2ZDQURJQVFRV1FzTEtBQWdBa0x2Ly8vL0QxWUVRQkFBQlNBQVFSQnFJQUFnQVNBQ0lBTWdCQkJhR2tFQUR3dEJBQXN6QVFGK0lBR3RJQUt0UWlDR2hDSURRb0NBZ0lBUVZBUkFJQUFnQTZjUUh3VkJ1cFVDUWM2VkFrSEZBVUhvbFFJUUFnc0xGUUFnQUNBQklBS3RJQU90UWlDR2hDQUVFSnNCQ3hRQUlBQWdBU0FDclNBRHJVSWdob1FRSFVFQUN4Y0FJQUFnQVNBQ0lBT3RJQVN0UWlDR2hDQUZFSlFDQ3hrQUlBQWdBU0FDSUFPdElBU3RRaUNHaENBRkVKa0JRUUFMRndBZ0FDQUJJQUlnQTYwZ0JLMUNJSWFFSUFVUWt3SUxGd0FnQUNBQklBS3RJQU90UWlDR2hDQUVFS0lDUVFBTEpRQWdBQ0FCSUFJZ0F5QUVyU0FGclVJZ2hvUWdCaUFIclNBSXJVSWdob1FnQ1JDcEFnc2xBQ0FBSUFFZ0FpQURJQVFnQmEwZ0JxMUNJSWFFSUFjZ0NLMGdDYTFDSUlhRUVLY0NDeGNBSUFBZ0FTQUNyU0FEclVJZ2hvUWdCQ0FGRUt3Q0N4Z0FJQUFnQVNBQ0lBT3RJQVN0UWlDR2hDQUZJQVlRWmdzWEFDQUFJQUVnQXEwZ0E2MUNJSWFFSUFRZ0JSQ3RBZ3NZQUNBQUlBRWdBaUFEclNBRXJVSWdob1FnQlNBR0VHY0xFd0FnQUNBQklBS3RJQU90UWlDR2hCQzBBZ3NUQUNBQUlBR3RJQUt0UWlDR2hDQURFTE1DQ3lFQUlBQWdBU0FDclNBRHJVSWdob1FnQkswZ0JhMUNJSWFFSUFZZ0J4QzFBZ3NmQUNBQUlBRWdBcTBnQTYxQ0lJYUVJQVN0SUFXdFFpQ0doQ0FHRUtJQkN5MEFJQUFnQWEwZ0FxMUNJSWFFSUFNZ0JLMGdCYTFDSUlhRUlBWWdCNjBnQ0sxQ0lJYUVJQWtnQ2hDMkFnc1hBQ0FBSUFFZ0FxMGdBNjFDSUlhRUlBUWdCUkRaQWdzVUFDQUFJQUVnQXEwZ0E2MUNJSWFFRURsQkFBc1NBQ0FBSUFFZ0FxMGdBNjFDSUlhRUVDY0xHUUFnQUNBQklBSWdBNjBnQksxQ0lJYUVJQVVnQmhDdkFRc1hBQ0FBSUFFZ0FxMGdBNjFDSUlhRUlBUWdCUkRDQVFzVkFDQUFJQUVnQXEwZ0E2MUNJSWFFSUFRUXd3RUxGd0FnQUNBQklBS3RJQU90UWlDR2hDQUVJQVVReEFFTEdRQWdBQ0FCSUFLdElBT3RRaUNHaENBRUlBVWdCaENFQVFzWUFDQUFJQUVnQWlBRHJTQUVyVUlnaG9RZ0JTQUdFRmtMR3dBZ0FDQUJJQUlnQTYwZ0JLMUNJSWFFSUFVZ0JpQUhFSVVCQ3dzQUlBQWdBU0FDRU1BQkN4Y0FJQUFnQVNBQ3JTQURyVUlnaG9RZ0JDQUZFTVVCQ3hrQUlBQWdBU0FDclNBRHJVSWdob1FnQkNBRklBWVFoZ0VMR0FBZ0FDQUJJQUlnQTYwZ0JLMUNJSWFFSUFVZ0JoQmFDeHNBSUFBZ0FTQUNJQU90SUFTdFFpQ0doQ0FGSUFZZ0J4Q0hBUXNWQUNBQUlBRWdBcTBnQTYxQ0lJYUVJQVFRN1FFTEZ3QWdBQ0FCSUFLdElBT3RRaUNHaENBRUVJa0JRUUFMSndBZ0FDQUJJQUlnQXlBRXJTQUZyVUlnaG9RZ0JpQUhyU0FJclVJZ2hvUWdDaUFMRUtBQkN5VUFJQUFnQVNBQ0lBT3RJQVN0UWlDR2hDQUZJQWF0SUFldFFpQ0doQ0FKSUFvUW53SUxKUUFnQUNBQ0lBT3RJQVN0UWlDR2hDQUZJQVlnQjYwZ0NLMUNJSWFFSUFrZ0NoQ2RBUXNsQUNBQUlBRWdBeUFFclNBRnJVSWdob1FnQmlBSHJTQUlyVUlnaG9RZ0NTQUtFSTRDQ3o0QkFuOGpBQ0VFSXdCQklHb2tBQ0FFSUFFZ0FpQURFSWtCUVg4Z0FDQUVFSkVCSUFBZ0JFWWJJUUVnQkNBQVFTQVFRU0FCY2lFRklBUWtBQ0FGQ3lZQUlBQWdBU0FDSUFNZ0JLMGdCYTFDSUlhRUlBWWdCNjBnQ0sxQ0lJYUVJQW9nQ3hCN0N5VUFJQUFnQVNBQ0lBT3RJQVN0UWlDR2hDQUZJQWF0SUFldFFpQ0doQ0FKSUFvUXRRRUxKUUFnQUNBQ0lBT3RJQVN0UWlDR2hDQUZJQVlnQjYwZ0NLMUNJSWFFSUFrZ0NoQ3NBUXNsQUNBQUlBRWdBeUFFclNBRnJVSWdob1FnQmlBSHJTQUlyVUlnaG9RZ0NTQUtFTjBDQ3ljQUlBQWdBU0FDSUFNZ0JLMGdCYTFDSUlhRUlBWWdCNjBnQ0sxQ0lJYUVJQW9nQ3hDQ0FRc2xBQ0FBSUFFZ0FpQURyU0FFclVJZ2hvUWdCU0FHclNBSHJVSWdob1FnQ1NBS0VMd0JDeVVBSUFBZ0FpQURyU0FFclVJZ2hvUWdCU0FHSUFldElBaXRRaUNHaENBSklBb1FzQUVMSlFBZ0FDQUJJQU1nQkswZ0JhMUNJSWFFSUFZZ0I2MGdDSzFDSUlhRUlBa2dDaERrQWd2UUFnRUdmeUFBUVlCL1R3UkFRWWlYQWtFd05nSUFRUUFQQzBFUUlBQkJDMnBCZUhFZ0FFRUxTUnNpQkVITUFHb1FJU0lBUlFSQVFRQVBDeUFBUVhocUlRRWdBRUUvY1FSL0lBQkJmR29pQlNnQ0FDSUdRWGh4SUFCQlAycEJRSEVpQUVGNGFpSUNJQUJCT0dvZ0FpQUJhMEVQU3hzaUFDQUJheUlDYXlFRElBWkJBM0VFUUNBQUlBQW9BZ1JCQVhFZ0EzSkJBbkkyQWdRZ0FDQURhaUlESUFNb0FnUkJBWEkyQWdRZ0JTQUZLQUlBUVFGeElBSnlRUUp5TmdJQUlBQWdBQ2dDQkVFQmNqWUNCQ0FCSUFJUWlnRUZJQUFnQVNnQ0FDQUNhallDQUNBQUlBTTJBZ1FMSUFBRklBRWlBQXNoQWlBQUtBSUVJZ0ZCQTNFRVFDQUJRWGh4SWdNZ0JFRVFha3NFUUNBQUlBRkJBWEVnQkhKQkFuSTJBZ1FnQWlBRWFpSUFJQU1nQkdzaUFVRURjallDQkNBQ0lBTnFJZ1FnQkNnQ0JFRUJjallDQkNBQUlBRVFpZ0VMQ3lBQ1FRaHFDeTRCQVg4Z0FCQWhJZ0ZGQkVBZ0FROExJQUZCZkdvb0FnQkJBM0ZGQkVBZ0FROExJQUZCQUNBQUVCb2FJQUVMK2dFQkEzOGdBVUgvQVhFaUFnUkFBa0FnQUVFRGNRUkFJQUZCL3dGeElRTURRQ0FBTEFBQUlnUWdBMEVZZEVFWWRVWWdCRVZ5RFFJZ0FFRUJhaUlBUVFOeERRQUxDeUFDUVlHQ2hBaHNJUU1nQUNnQ0FDSUNRWUNCZ29SNGNVR0FnWUtFZUhNZ0FrSC8vZnQzYW5GRkJFQURRQ0FDSUFOeklnSkJnSUdDaEhoeFFZQ0Jnb1I0Y3lBQ1FmLzkrM2RxY1VVRVFDQUFRUVJxSWdBb0FnQWlBa0dBZ1lLRWVIRkJnSUdDaEhoeklBSkIvLzM3ZDJweFJRMEJDd3NMSUFGQi93RnhJUUlEUUNBQVFRRnFJUUVnQUN3QUFDSURJQUpCR0hSQkdIVkdJQU5GY2tVRVFDQUJJUUFNQVFzTEN3VWdBQkFqSUFCcUlRQUxJQUFMUWdFQmZ5TUFJUUlqQUVGQWF5UUFJQUFnQWhDQkFpQUJJQUlwQUFBM0FBQWdBU0FDS1FBSU53QUlJQUVnQWlrQUVEY0FFQ0FCSUFJcEFCZzNBQmdnQWlRQUN3WUFRWWlYQWd1aEFRRURmd0ovSXdBaEJTTUFRVDlxUVVCeEpBQWpBQ0VESXdCQjhBQnFKQUFnQXlBQ0tRQUFOd0FBSUFNZ0Fpa0FDRGNBQ0NBRElBSXBBQkEzQUJBZ0F5QUNLUUFZTndBWUlBTkI0QUJxSWdJZ0FTa0FBRGNEQUNBQ1FnQTNBd2dnQTBFZ2FpSUJJQUlnQXhCNFFRQWhBZ05BSUFBZ0Ftb2dBU0FDYWl3QUFEb0FBQ0FDUVFGcUlnSkJJRWNOQUFzZ0FVSEFBQkFLSUFOQklCQUtJQVVMSkFBTEJBQkJDZ3NHQUVHcGxnSUx5QUVCQ0g4Q2Z5TUFJUXNqQUVFL2FrRkFjU1FBSXdBaEJDTUFRUkJxSkFBZ0JFRUFOZ0lBSUFOQmYyb2dBa2tFZnlBQklBSkJmMm9pQ0dvaENVRUFJUUpCQUNFQkEwQWdDU0FCYXkwQUFDSUtRWUFCYzBIL0Eyb2dBa0gvQVhFaUFrSC9BMm9nQkNnQ0FFSC9BMnB4Y1VFSWRrRUJjU0VHSUFJZ0NuSWhBaUFFSUFRb0FnQkJBQ0FHYXlBQmNYSTJBZ0FnQmlBRlFmOEJjWEloQlNBQlFRRnFJZ0VnQTBjTkFBc2dBQ0FJSUFRb0FnQnJOZ0lBSUFWQmYyb0ZRWDhMSVFBZ0N3c2tBQ0FBQzlZQkFRVi9BbjhqQUNFSkl3QkJQMnBCUUhFa0FDTUFJUVlqQUVFUWFpUUFJQU1FZnlBRElBTkJmMm9pQlhFRWZ5QUNJQU53QlNBQ0lBVnhDeUVJSUFVZ0NHc2lCU0FDUVg5elR3UkFFQUFMSUFJZ0JXb2lBaUFFU1FSL0lBQUVRQ0FBSUFKQkFXbzJBZ0FMSUFFZ0Ftb2hBU0FHUVFBNkFBQkJBQ0VBQTM4Z0FTQUFheUlDSUFJc0FBQWdCaXdBQUhGQi93RnhJQUFnQlhOQmYycEJHSFlpQWtHQUFYRnlPZ0FBSUFZZ0JpMEFBQ0FDY2pvQUFDQUFRUUZxSWdBZ0EwY05BRUVBQ3dWQmZ3c0ZRWDhMSVFBZ0NRc2tBQ0FBQ3pZQkFYOUJIaEFESWdCQkFFb0VRRUdFbHdJZ0FEWUNBQVZCaEpjQ0tBSUFJUUFMSUFCQkVFa0VRQkFBQlVId2xnSkJFQkFmQ3dzMUFRRi9Jd0FoQWlNQVFVQnJKQUFnQUNBQ0VDb2dBRUhRQVdvaUFDQUNRc0FBRUIwZ0FDQUJFQ29nQWtIQUFCQUtJQUlrQUFzMkFRTi9BbjhqQUNFQ0l3QkJQMnBCUUhFa0FDTUFJUUFqQUVFUWFpUUFJQUFRalFFZ0FDZ0NBQVJBSUFBUWpRRUxJQUlMSkFBTEl3QkJnSmNDS0FJQUJIOUJBUVVRZ2dJUWtBRVFnQUpCZ0pjQ1FRRTJBZ0JCQUFzTGdRRUJCSDhnQkFSL0FuOGdBMFVoQmlBQ0tBSUFJUVVDUUFOQUlBVWdBVWtFUUNBQUlBVnFMQUFBSWdjaENDQUhRVDFHQkVBZ0JFRi9haUVFQlNBR0RRTWdBeUFJRUVCRkRRTUxJQUlnQlVFQmFpSUZOZ0lBUVFBZ0JFVU5BeG9NQVFzTFFZaVhBa0hFQURZQ0FFRi9EQUVMUVlpWEFrRWNOZ0lBUVg4TEJVRUFDd3U2QVFFQmYwRUFJQUJCd1FCemEwRUlka0VBSUFCQkJHb2dBRUhRL3dOcVFRaDJRZjhCYzNGQk9TQUFhMEVJZGtIL0FYRkIvd0Z6Y1NBQVFiOS9haUlCSUFGQkNIWkIvd0Z6Y1VIYUFDQUFhMEVJZGtIL0FYRkIvd0Z6Y1NBQVFia0JhaUFBUVovL0EycEJDSFpCL3dGemNVSDZBQ0FBYTBFSWRrSC9BWEZCL3dGemNVRUFJQUJCSzNOclFRaDJRVDV4UVQ1elFRQWdBRUV2YzJ0QkNIWkJQM0ZCUDNOeWNuSnlJZ0JyUVFoMlFmOEJjVUgvQVhOeElBQnlDN3NCQVFGL1FRQWdBRUhCQUhOclFRaDJRUUFnQUVFRWFpQUFRZEQvQTJwQkNIWkIvd0Z6Y1VFNUlBQnJRUWgyUWY4QmNVSC9BWE54SUFCQnYzOXFJZ0VnQVVFSWRrSC9BWE54UWRvQUlBQnJRUWgyUWY4QmNVSC9BWE54SUFCQnVRRnFJQUJCbi84RGFrRUlka0gvQVhOeFFmb0FJQUJyUVFoMlFmOEJjVUgvQVhOeFFRQWdBRUV0YzJ0QkNIWkJQbkZCUG5OQkFDQUFRZDhBYzJ0QkNIWkJQM0ZCUDNOeWNuSnlJZ0JyUVFoMlFmOEJjVUgvQVhOeElBQnlDN1VGQVFaL0l3QWhCQ01BUWNBQmFpUUFBbjhnQkNFSElBQVFPaUFFUVVCcklnSkN0dXpZc2VQR2paczJOd01BSUFKQ3R1ellzZVBHalpzMk53TUlJQUpDdHV6WXNlUEdqWnMyTndNUUlBSkN0dXpZc2VQR2paczJOd01ZSUFKQ3R1ellzZVBHalpzMk53TWdJQUpDdHV6WXNlUEdqWnMyTndNb0lBSkN0dXpZc2VQR2paczJOd013SUFKQ3R1ellzZVBHalpzMk53TTRJQUpCUUd0Q3R1ellzZVBHalpzMk53TUFJQUpDdHV6WXNlUEdqWnMyTndOSUlBSkN0dXpZc2VQR2paczJOd05RSUFKQ3R1ellzZVBHalpzMk53TllJQUpDdHV6WXNlUEdqWnMyTndOZ0lBSkN0dXpZc2VQR2paczJOd05vSUFKQ3R1ellzZVBHalpzMk53TndJQUpDdHV6WXNlUEdqWnMyTndONElBSWdBU3dBQUVFMmN6b0FBRUVCSVFNRFFDQUNJQU5xSWdVZ0JTd0FBQ0FCSUFOcUxBQUFjem9BQUNBRFFRRnFJZ05CSUVjTkFBc2dBQ0FDUW9BQkVCMGdBRUhRQVdvaUF4QTZJQUpDM0xqeDRzV0xsNjdjQURjREFDQUNRdHk0OGVMRmk1ZXUzQUEzQXdnZ0FrTGN1UEhpeFl1WHJ0d0FOd01RSUFKQzNMang0c1dMbDY3Y0FEY0RHQ0FDUXR5NDhlTEZpNWV1M0FBM0F5QWdBa0xjdVBIaXhZdVhydHdBTndNb0lBSkMzTGp4NHNXTGw2N2NBRGNETUNBQ1F0eTQ4ZUxGaTVldTNBQTNBemdnQWtGQWEwTGN1UEhpeFl1WHJ0d0FOd01BSUFKQzNMang0c1dMbDY3Y0FEY0RTQ0FDUXR5NDhlTEZpNWV1M0FBM0ExQWdBa0xjdVBIaXhZdVhydHdBTndOWUlBSkMzTGp4NHNXTGw2N2NBRGNEWUNBQ1F0eTQ4ZUxGaTVldTNBQTNBMmdnQWtMY3VQSGl4WXVYcnR3QU53TndJQUpDM0xqeDRzV0xsNjdjQURjRGVDQUNJQUVzQUFCQjNBQnpPZ0FBUVFFaEFBTkFJQUFnQW1vaUJTQUZMQUFBSUFBZ0FXb3NBQUJ6T2dBQUlBQkJBV29pQUVFZ1J3MEFDeUFESUFKQ2dBRVFIU0FDUVlBQkVBb2dCd3RCd0FBUUNpQUVKQUFMUXdFQmZ5QUJFRjhnQUNBQVFRTnVJZ0pCZld4cUlRQkJBQ0FBUVFGMklBQnlRUUZ4YTBFRVFRQWdBVUVCZGtFQmNXdEJBeUFBYTNGcmNTQUNRUUowUVFGeWFndmlBZ0VLZndKL0FrQWdBd1IvSUFSQkFFY2hEUUovQWtBRGZ3Si9BMEFnQWlBSGFpMEFBQ0lLUVRCeklnNUI5djhEYWtFSWRpSVBJQXBCM3dGeFFja0JhaUlRUWY4QmNTSUxRZkQvQTJvZ0MwSDIvd05xYzBFSWRpSUxja0gvQVhGRkJFQkJBQ0FOSUFsQi93RnhSWEZGRFFJYUlBUWdDaEJBUlEwSElBZEJBV29pQnlBRFR3MEhRUUFoQ1F3QkN3c2dDQ0FCVHcwQ0lBNGdEM0VnQ3lBUWNYSWhDaUFKUWY4QmNRUkFJQUFnQ0dvZ0NpQU1jam9BQUNBSVFRRnFJUWdGSUFwQkJIUkIvd0Z4SVF3TElBbEJmM01oQ1NBSFFRRnFJZ2NnQTBrTkFVRUFDd3NNQVF0QmlKY0NRY1FBTmdJQVFYOExJUUFnQ1VIL0FYRUVmMEdJbHdKQkhEWUNBRUVBSVFnZ0IwRi9haUVIUVg4RklBQUVmMEVBSVFoQmZ3VU1Bd3NMQlF3QkN3d0JDMEVBQ3lFQUlBWUVRQ0FHSUFJZ0IybzJBZ0FGSUFNZ0IwY0VRRUdJbHdKQkhEWUNBRUYvSVFBTEN5QUZCRUFnQlNBSU5nSUFDeUFBQzZJQkFRUi9JQU5CLy8vLy93ZEpJQU5CQVhRaUJTQUJTWEZGQkVBUUFBc2dBd1JBUVFBaEFRTkFJQUVnQW1vdEFBQWlCRUVQY1NFR0lBQWdBVUVCZENJSGFpQUVRUVIySWdSQjF3QnFJQVJCOXY4RGFrRUlka0haQVhGcU9nQUFJQUFnQjBFQmNtb2dCa0VJZEVHQXJnRnFJQVpCOXY4RGFrR0FzZ054YWtFSWRqb0FBQ0FCUVFGcUlnRWdBMGNOQUFzRlFRQWhCUXNnQUNBRmFrRUFPZ0FBSUFBTER3QWdBQ0FCclVHdWxRSWdBaEEyQ3l3QkFuOGdBRUVDU1FSL1FRQUZRUUFnQUdzZ0FIQWhBUU5BUVFBUUFTSUNJQUZKRFFBTElBSWdBSEFMQ3dZQVFRQVFBUXRnQVFGK0FrQUNRQ0FEUWc5V0JFQWdBQ0FDSUFOQ2NId2lDQ0FDSUFPbmFrRndhaUFFSUFVZ0JpQUhFSjBCSVFCQ0FDQUlJQUFiSVFNZ0FRMEJCU0FCQkg5Q0FDRURRWDhoQUF3Q0JVRi9DeUVBQ3d3QkN5QUJJQU0zQXdBTElBQUxZd0VFZndKL0l3QWhDQ01BUVQ5cVFVQnhKQUFqQUNFRkl3QkIwQUJxSkFBZ0JVRkFheUVHSUFKQ0FGSUVRQ0FHUVFFUUN5QUdRUVJxUVFBUUN5QUZJQVFRUlNBRklBTWdCaENVQVNBRklBRWdBQ0FDRUVRZ0JVSEFBQkFLQ3lBSUN5UUFDMVlCQTM4Q2Z5TUFJUVlqQUVFL2FrRkFjU1FBSXdBaEJDTUFRVUJySkFBZ0FVSUFVZ1JBSUFRZ0F4QkZJQVFnQWtFQUVKVUJJQUJCQUNBQnB4QWFHaUFFSUFBZ0FDQUJFRVFnQkVIQUFCQUtDeUFHQ3lRQUMwOEJBMzhDZnlNQUlRVWpBRUUvYWtGQWNTUUFJd0FoQXlNQVFVQnJKQUFnQXlBQ0VFVWdBeUFCUVFBUWxBRWdBRUVBUWNBQUVCb2FJQU1nQUNBQVFzQUFFRVFnQTBIQUFCQUtJQVVMSkFBTHp3RUJBMzhqQUNFSkl3QkI0QUpxSkFBZ0NVRVFhaUlLUXNBQUlBWWdCeEJpSUFsQjBBQnFJZ2dnQ2hBbUlBcEJ3QUFRQ2lBSUlBUWdCUkFQSUFoQndKWUNRZ0FnQlgxQ0Q0TVFEeUFJSUFFZ0FoQVBJQWhCd0pZQ1FnQWdBbjFDRDRNUUR5QUpRZEFDYWlJRUlBVVFFaUFJSUFSQ0NCQVBJQVFnQWhBU0lBZ2dCRUlJRUE4Z0NDQUpFQ1VnQ0VHQUFoQUtJQWtnQXhCRElRTWdDVUVRRUFvZ0FBUkFJQU1FZnlBQVFRQWdBcWNRR2hwQmZ3VWdBQ0FCSUFJZ0JrRUJJQWNRWVVFQUN5RURDeUFKSkFBZ0F3dUZBUUVFZndKL0l3QWhDQ01BUVQ5cVFVQnhKQUFqQUNFRkl3QkJFR29rQUNBQVFVQnJJZ2NnQWlBRHB5SUNFQ3dhSUFBZ0JTQUhJQU1nQkJDWkFTQUJRUUJISVFRZ0JTa0RBRUxBQUZFRWZ5QUVCRUFnQVNBRFFrQjlOd01BQzBFQUJTQUVCRUFnQVVJQU53TUFDeUFBUVFBZ0FrRkFheEFhR2tGL0N5RUFJQWdMSkFBZ0FBdHhBQUovQWtBZ0EwTEFBRlFOQUNBRFFrQjhJZ05Ddi8vLy93OVdEUUFnQWlBQ1FVQnJJZ0lnQXlBRUVKc0JCRUFnQUVVTkFTQUFRUUFnQTZjUUdob01BUXNnQVFSQUlBRWdBemNEQUFzZ0FBUkFJQUFnQWlBRHB4QXNHZ3RCQUF3QkN5QUJCRUFnQVVJQU53TUFDMEYvQ3d0N0FRTi9BbjhqQUNFRUl3QkJQMnBCUUhFa0FDTUFJUUlqQUVGQWF5UUFJQUlnQVVJZ0VEa2dBaUFDTEFBQVFYaHhPZ0FBSUFJZ0Fpd0FIMEUvY1VIQUFISTZBQjhnQUNBQ0tRQUFOd0FBSUFBZ0Fpa0FDRGNBQ0NBQUlBSXBBQkEzQUJBZ0FDQUNLUUFZTndBWUlBSkJ3QUFRQ2lBRUN5UUFRUUFMakFFQkJYOENmeU1BSVFZakFFRS9ha0ZBY1NRQUl3QWhBaU1BUVlBQ2FpUUFJQUpCMkFCcUlRUWdBa0V3YWlFRElBRVFVd1IvUVg4RklBUWdBUkIrQkg5QmZ3VWdCQkMyQVFSL0lBSVFIaUFDSUFJZ0JFRW9haUlCRUJVZ0F4QWVJQU1nQXlBQkVCTWdBaUFDRUQ4Z0F5QURJQUlRRENBQUlBTVFMa0VBQlVGL0N3c0xJUUFnQmdza0FDQUFDemtCQTM4Q2Z5TUFJUVFqQUVFL2FrRkFjU1FBSXdBaEFpTUFRU0JxSkFBZ0FrRWdFQjhnQUNBQklBSVFuZ0VnQWtFZ0VBb2dCQXNrQUFzOEFRTi9BbjhqQUNFRkl3QkJQMnBCUUhFa0FDTUFJUU1qQUVGQWF5UUFJQUFnQXhBcUlBRWdBMExBQUNBQ1FRRVFuQUVoQUNBRkN5UUFJQUFMT2dFRGZ3Si9Jd0FoQmlNQVFUOXFRVUJ4SkFBakFDRUVJd0JCUUdza0FDQUFJQVFRS2lBQklBSWdCRUxBQUNBRFFRRVFtZ0VnQmdza0FBc0xBQ0FBSUFFZ0FoQ1lBZ3NQQUNBQUlBRWdBaUFERUprQ1FRQUxDQUFnQUJBNlFRQUxDd0FnQUNBQkVKY0NRUUFMRFFBZ0FDQUJJQUlRbmdGQkFBczdBQ0FEUXUvLy8vOFBWZ1JBRUFBTElBQWdBQ0FEcDJwQkFDQUNJQU1nQkNBRklBWWdCeENnQVJvZ0FRUkFJQUVnQTBJUWZEY0RBQXRCQUFzRkFFRy9md3NGQUVIUUFRdjVCZ0VIZmlBREtRQUlJZ1JDODhyUnk2ZU0yYkwwQUlVaENpQURLUUFBSWdWQzRlU1Y4OWJzMmJ6c0FJVWhDU0FFUXUzZWtmT1d6TnkzNUFDRklRZ2dCVUwxeXMyRDE2emJ0L01BaFNFRUlBRWdBU0FDcHlJRGFpQURRUWR4YXlJRFJnUkFJQVFoQlFVRGZ5QUJLUUFBSWdjZ0NvVWhCaUFJUVEwUURpQUVJQWg4SWdXRklRZ2dCVUVnRUE0Z0JrRVFFQTRnQmlBSmZDSUVoU0lGZkNJR0lBVkJGUkFPaFNFSklBaEJFUkFPSUFRZ0NId2lCWVVoQ0NBRlFTQVFEaUVFSUFoQkRSQU9JQVlnQ0h3aUJZVWhDQ0FGUVNBUURpQUpRUkFRRGlBRUlBbDhJZ2FGSWdWOElnUWdCVUVWRUE2RklRb2dDRUVSRUE0Z0JpQUlmQ0lGaFNFSUlBVkJJQkFPSVFrZ0JDQUhoU0VFSUFGQkNHb2lBU0FEUncwQUlBUWhCU0FEQ3lFQkN5QUNRamlHSVFRQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFLblFRZHhRUUZyRGdjR0JRUURBZ0VBQndzZ0JDQUJMUUFHclVJd2hvUWhCQXNnQkNBQkxRQUZyVUlvaG9RaEJBc2dCQ0FCTFFBRXJVSWdob1FoQkFzZ0JDQUJMUUFEclVJWWhvUWhCQXNnQkNBQkxRQUNyVUlRaG9RaEJBc2dCQ0FCTFFBQnJVSUlob1FoQkFzZ0JDQUJMUUFBcllRaEJBc2dDRUVORUE0Z0JTQUlmQ0lDaFNFSElBSkJJQkFPSUFrZ0JDQUtoU0lDZkNJRklBSkJFQkFPaFNJQ2ZDSUdJQUpCRlJBT2hTRUlJQWRCRVJBT0lBVWdCM3dpQW9VaEJ5QUNRU0FRRGlFRklBZEJEUkFPSUFZZ0Izd2lBb1VoQnlBQ1FTQVFEaUFJUVJBUURpQUZJQWg4SWdXRklnSjhJZ1lnQWtFVkVBNkZJUWdnQjBFUkVBNGdCU0FIZkNJQ2hTRUhJQUpCSUJBT1F2OEJoU0VGSUFkQkRSQU9JQWNnQkNBR2hYd2lBb1VoQmlBQ1FTQVFEaUFJUVJBUURpQUZJQWg4SWdXRklnSjhJZ1FnQWtFVkVBNkZJUWNnQmtFUkVBNGdCU0FHZkNJQ2hTRUdJQUpCSUJBT0lRVWdCa0VORUE0Z0JDQUdmQ0lDaFNFR0lBSkJJQkFPSUFkQkVCQU9JQVVnQjN3aUJZVWlBbndpQkNBQ1FSVVFEb1VoQnlBR1FSRVFEaUFGSUFaOElnS0ZJUVlnQWtFZ0VBNGhCU0FHUVEwUURpQUVJQVo4SWdLRklRWWdBa0VnRUE0Z0IwRVFFQTRnQlNBSGZDSUVoU0lDZkNJRklBSkJGUkFPaFNFSElBWkJFUkFPSUFRZ0Jud2lBb1VoQkNBQ1FTQVFEaUVDSUFSQkRSQU9JQVFnQlh5RklRWWdCMEVRRUE0Z0FpQUhmQ0lDaFVFVkVBNGhCQ0FHUVJFUURpRUZJQUFnQWlBR2ZDSUNRU0FRRGlBRklBSWdCSVdGaFRjQUFBc0lBQ0FBUVJBUUh3c0VBRUZ1Q3dRQVFSRUxCQUJCTkF2WkF3SUpmd0YrQW44akFDRVFJd0JCUDJwQlFIRWtBQ01BSVFvakFFSGdBbW9rQUNBQ1FRQkhJZzRFUUNBQ1FnQTNBd0FMSUFOQkFFY2lEd1JBSUFOQmZ6b0FBQXNnQ2tIUUFHb2hDU0FLUVJCcUlRZ2dDa0hRQW1vaEN5QUZRaEZVQkg5QmZ3VUNmeUFGUW05OEloRkM3di8vL3c5V0JFQVFBQXNnQ0VMQUFDQUFRU0JxSWd3Z0FCQTJJQWtnQ0JBbUlBaEJ3QUFRQ2lBSklBWWdCeEFQSUFsQjRKWUNRZ0FnQjMxQ0Q0TVFEeUFJUWdBM0F3QWdDRUlBTndNSUlBaENBRGNERUNBSVFnQTNBeGdnQ0VJQU53TWdJQWhDQURjREtDQUlRZ0EzQXpBZ0NFSUFOd000SUFnZ0JDd0FBRG9BQUNBSUlBaEN3QUFnREVFQklBQVFMeUFJTEFBQUlRWWdDQ0FFTEFBQU9nQUFJQWtnQ0VMQUFCQVBJQWtnQkVFQmFpSUVJQkVRRHlBSlFlQ1dBaUFGUWc5OFFnK0RFQThnQ3lBSEVCSWdDU0FMUWdnUUR5QUxJQVZDTDN3UUVpQUpJQXRDQ0JBUElBa2dDaEFsSUFsQmdBSVFDaUFLSUFRZ0VhZHFRUkFRUVFSQUlBcEJFQkFLUVg4TUFRc2dBU0FFSUJFZ0RFRUNJQUFRTHlBQVFTUnFJQW9RbndFZ0RCQ01BUUpBQWtBZ0JrRUNjUTBBSUF4QkJCQmNEUUFNQVFzZ0FCQmtDeUFPQkVBZ0FpQVJOd01BQ3lBUEJFQWdBeUFHT2dBQUMwRUFDd3NoQUNBUUN5UUFJQUFMcWdFQkFuOGpBQ0VLSXdCQjBBSnFKQUFnQ2tMQUFDQUhJQWdRWWlBS1FVQnJJZ2tnQ2hBbUlBcEJ3QUFRQ2lBSklBVWdCaEFQSUFsQndKWUNRZ0FnQm4xQ0Q0TVFEeUFBSUFNZ0JDQUhRUUVnQ0JCaElBa2dBQ0FFRUE4Z0NVSEFsZ0pDQUNBRWZVSVBneEFQSUFwQndBSnFJZ0FnQmhBU0lBa2dBRUlJRUE4Z0FDQUVFQklnQ1NBQVFnZ1FEeUFKSUFFUUpTQUpRWUFDRUFvZ0FnUkFJQUpDRURjREFBc2dDaVFBQy9vQ0FRWi9BbjhqQUNFTkl3QkJQMnBCUUhFa0FDTUFJUWdqQUVIUUFtb2tBQ0FDUVFCSElnd0VRQ0FDUWdBM0F3QUxJQVJDN3YvLy93OVdCRUFRQUFzZ0NFTEFBQ0FBUVNCcUlnb2dBQkEySUFoQlFHc2lDU0FJRUNZZ0NFSEFBQkFLSUFrZ0JTQUdFQThnQ1VIZ2xnSkNBQ0FHZlVJUGd4QVBJQWhDQURjREFDQUlRZ0EzQXdnZ0NFSUFOd01RSUFoQ0FEY0RHQ0FJUWdBM0F5QWdDRUlBTndNb0lBaENBRGNETUNBSVFnQTNBemdnQ0NBSE9nQUFJQWdnQ0VMQUFDQUtRUUVnQUJBdklBa2dDRUxBQUJBUElBRWdDQ3dBQURvQUFDQUJRUUZxSWdVZ0F5QUVJQXBCQWlBQUVDOGdDU0FGSUFRUUR5QUpRZUNXQWlBRVFnK0RFQThnQ0VIQUFtb2lBU0FHRUJJZ0NTQUJRZ2dRRHlBQklBUkNRSDBRRWlBSklBRkNDQkFQSUFrZ0JTQUVwMm9pQVJBbElBbEJnQUlRQ2lBQVFTUnFJQUVRbndFZ0NoQ01BUUpBQWtBZ0IwRUNjUTBBSUFwQkJCQmNEUUFNQVFzZ0FCQmtDeUFNQkVBZ0FpQUVRaEY4TndNQUN5QU5DeVFBUVFBTElRQWdBQ0FCSUFJUVBDQUFFR1VnQUNBQktRQVFOd0FrSUFCQ0FEY0FMRUVBQ3ljQUlBRkJHQkFmSUFBZ0FTQUNFRHdnQUJCbElBQWdBU2tBRURjQUpDQUFRZ0EzQUN4QkFBc2hBQ0FDUWhCVUJIOUJmd1VnQUNBQlFSQnFJQUVnQWtKd2ZDQURJQVFRWmdzTEtBQWdBa0x2Ly8vL0QxWUVRQkFBQlNBQVFSQnFJQUFnQVNBQ0lBTWdCQkJuR2tFQUR3dEJBQXUxQXdFVWZpQUJLQUlBckVMQ3RnZCtJQUVvQWlTc1FzSzJCMzRpQjBLQWdJQUlmQ0lJUWhtSFFoTitmQ0lKUW9DQWdCQjhJUUlnQVNnQ0NLeEN3cllIZmlBQktBSUVyRUxDdGdkK0lncENnSUNBQ0h3aUMwSVpoM3dpREVLQWdJQVFmQ0VESUFFb0FoQ3NRc0syQjM0Z0FTZ0NES3hDd3JZSGZpSU5Rb0NBZ0FoOElnNUNHWWQ4SWc5Q2dJQ0FFSHdoQkNBQktBSVlyRUxDdGdkK0lBRW9BaFNzUXNLMkIzNGlFRUtBZ0lBSWZDSVJRaG1IZkNJU1FvQ0FnQkI4SVFVZ0FTZ0NJS3hDd3JZSGZpQUJLQUljckVMQ3RnZCtJaE5DZ0lDQUNId2lGRUlaaDN3aUZVS0FnSUFRZkNFR0lBQWdDU0FDUW9DQWdPQVBnMzArQWdBZ0FDQUtJQXRDZ0lDQThBK0RmU0FDUWhxSWZENENCQ0FBSUF3Z0EwS0FnSURnRDROOVBnSUlJQUFnRFNBT1FvQ0FnUEFQZzMwZ0EwSWFpSHcrQWd3Z0FDQVBJQVJDZ0lDQTRBK0RmVDRDRUNBQUlCQWdFVUtBZ0lEd0Q0TjlJQVJDR29oOFBnSVVJQUFnRWlBRlFvQ0FnT0FQZzMwK0FoZ2dBQ0FUSUJSQ2dJQ0E4QStEZlNBRlFocUlmRDRDSENBQUlCVWdCa0tBZ0lEZ0Q0TjlQZ0lnSUFBZ0J5QUlRb0NBZ1BBUGczMGdCa0lhaUh3K0FpUUw5UUVCQjM4Q2Z5TUFJUWNqQUVFL2FrRkFjU1FBSXdBaEFpTUFRUkJxSkFBZ0FrRUFOZ0FBSUFKQkFEc0FCQ0FDUVFBNkFBWURRQ0FBSUFGcUxBQUFJUVZCQUNFREEwQWdBaUFEYWlJR0lBWXNBQUFnQlNBQklBTkJCWFJCa0lzQ2Ftb3NBQUJ6Y2pvQUFDQURRUUZxSWdOQkIwY05BQXNnQVVFQmFpSUJRUjlIRFFBTElBQXNBQjlCL3dCeElRRkJBQ0VBQTBBZ0FDQUNhaUlESUFNc0FBQWdBU0FBUVFWMFFhK0xBbW9zQUFCemNqb0FBQ0FBUVFGcUlnQkJCMGNOQUF0QkFDRUFRUUFoQVFOQUlBRWdBQ0FDYWkwQUFFRi9hbkloQVNBQVFRRnFJZ0JCQjBjTkFBc2dCd3NrQUNBQlFRaDJRUUZ4QzBnQkJIOENmeU1BSVFZakFFRS9ha0ZBY1NRQUl3QWhBeU1BUWVBQWFpUUFJQU5CTUdvaUJTQUNJQUVRRXlBRElBSWdBUkFWSUFNZ0F4QS9JQUFnQlNBREVBd2dCZ3NrQUF1SEFRRUZmd0ovSXdBaEJpTUFRVDlxUVVCeEpBQWpBQ0VESXdCQjBBRnFKQUFnQTBFb2FpRUVBMEFnQUNBQ2FpQUJJQUpxTEFBQU9nQUFJQUpCQVdvaUFrRWdSdzBBQ3lBQUlBQXNBQUJCZUhFNkFBQWdBQ0FBTEFBZlFUOXhRY0FBY2pvQUh5QUVJQUFRVkNBRElBUkJLR29nQkVIUUFHb1FzQUlnQUNBREVDNGdCZ3NrQUVFQUM3RURBUXAvQW44akFDRU1Jd0JCUDJwQlFIRWtBQ01BSVFRakFFSFFBbW9rQUNBRVFhQUNhaUVLSUFSQjhBRnFJUVVnQkVIQUFXb2hBeUFFUVpBQmFpRUlJQVJCNEFCcUlRWWdCRUV3YWlFSklBSVFyd0lFZjBGL0JRTkFJQUFnQjJvZ0FTQUhhaXdBQURvQUFDQUhRUUZxSWdkQklFY05BQXNnQUNBQUxBQUFRWGh4T2dBQUlBQWdBQ3dBSDBFL2NVSEFBSEk2QUI4Z0NpQUNFSUVCSUFVUUhpQURFRFFnQ0NBS0VDc2dCaEFlUWY0QklRRkJBQ0VIQTBBZ0JTQUlJQUFnQVVFRGRtb3RBQUFnQVVFSGNYWkJBWEVpQWlBSGN5SUhFRVlnQXlBR0lBY1FSaUFKSUFnZ0JoQVZJQVFnQlNBREVCVWdCU0FGSUFNUUV5QURJQWdnQmhBVElBWWdDU0FGRUF3Z0F5QURJQVFRRENBSklBUVFEU0FFSUFVUURTQUlJQVlnQXhBVElBTWdCaUFERUJVZ0JTQUVJQWtRRENBRUlBUWdDUkFWSUFNZ0F4QU5JQVlnQkJDdUFpQUlJQWdRRFNBSklBa2dCaEFUSUFZZ0NpQURFQXdnQXlBRUlBa1FEQ0FCUVg5cUlRY2dBUVJBSUFjaEFTQUNJUWNNQVFzTElBVWdDQ0FDRUVZZ0F5QUdJQUlRUmlBRElBTVFQeUFGSUFVZ0F4QU1JQUFnQlJBdVFRQUxJUUFnREFza0FDQUFDejhBSUFCQm9ZOENRUW9RSWdSL0lBQkJySThDUVFrUUlnUi9RWWlYQWtFY05nSUFRWDhGSUFBZ0FTQUNRUUVRb3dFTEJTQUFJQUVnQWtFQ0VLTUJDd3M3QUNBQVFhR1BBa0VLRUNJRWZ5QUFRYXlQQWtFSkVDSUVmMEdJbHdKQkhEWUNBRUYvQlNBQUlBRWdBaERCQWdzRklBQWdBU0FDRUw4Q0N3dEFBUUYvQWtBQ1FBSkFBa0FnQlVFQmF3NENBQUVDQ3lBQUlBRWdBaUFESUFRUXdnSWhCZ3dDQ3lBQUlBRWdBaUFESUFRUW9nRWhCZ3dCQ3hBQUN5QUdDMGtBQW44Q1FBSkFBa0FnQjBFQmF3NENBQUVDQ3lBQUlBRWdBaUFESUFRZ0JTQUdFTU1DREFJTElBQWdBU0FDSUFNZ0JDQUZJQVlRd0FJTUFRdEJpSmNDUVJ3MkFnQkJmd3NMQ0FCQmdJQ0FnQVFMQkFCQkJBc0lBRUdBZ0lDQUFRc0hBRUdBZ0lBZ0N3Z0FRWUNBZ0lCNEN3WUFRWURBQUFzR0FFR2hqd0lMQlFCQmdBRUxTZ0FnQWtMLy8vLy9EMVlFZjBHSWx3SkJGallDQUVGL0JRSi9Ba0FnQUNBQklBS25RUUlRcEFGQlhXc2lBQVJBSUFCQkkwY05BVUVBREFJTFFZaVhBa0VjTmdJQUMwRi9Dd3NMcWdFQkFYOGdBRUVBSUFHbklnY1FHaG9nQVVMLy8vLy9EMVlFZjBHSWx3SkJGallDQUVGL0JRSi9JQUZDRUZRRVFFR0lsd0pCSERZQ0FFRi9EQUVMSUFaQmdJQ0FnSGhMSUFNZ0JZUkMvLy8vL3c5V2NnUkFRWWlYQWtFV05nSUFRWDhNQVFzZ0JrR0F3QUJKSUFWQ0FGRnlCSDlCaUpjQ1FSdzJBZ0JCZndVZ0JhY2dCa0VLZGtFQklBSWdBNmNnQkVFUUlBQWdCMEVBUVFCQkFoQTRRUUJIUVI5MFFSOTFDd3NMQzBvQUlBSkMvLy8vL3c5V0JIOUJpSmNDUVJZMkFnQkJmd1VDZndKQUlBQWdBU0FDcDBFQkVLUUJRVjFySWdBRVFDQUFRU05IRFFGQkFBd0NDMEdJbHdKQkhEWUNBQXRCZndzTEM0c0NBUU4vQW44akFDRUhJd0JCUDJwQlFIRWtBQ01BSVFVakFFRVFhaVFBSUFCQ0FEY0FBQ0FBUWdBM0FBZ2dBRUlBTndBUUlBQkNBRGNBR0NBQVFnQTNBQ0FnQUVJQU53QW9JQUJDQURjQU1DQUFRZ0EzQURnZ0FFRkFhMElBTndBQUlBQkNBRGNBU0NBQVFnQTNBRkFnQUVJQU53QllJQUJDQURjQVlDQUFRZ0EzQUdnZ0FFSUFOd0J3SUFCQ0FEY0FlQ0FFUVlDQWdJQjRTeUFDSUFPRVF2Ly8vLzhQVm5JRWYwR0lsd0pCRmpZQ0FFRi9CU0FFUVlEQUFFa2dBMElEVkhJRWYwR0lsd0pCSERZQ0FFRi9CU0FGUVJBUUh5QURweUFFUVFwMlFRRWdBU0FDcHlBRlFSQkJBRUVnSUFCQmdBRkJBUkE0UVFCSFFSOTBRUjkxQ3dzaEFDQUhDeVFBSUFBTHFnRUJBWDhnQUVFQUlBR25JZ2NRR2hvZ0FVTC8vLy8vRDFZRWYwR0lsd0pCRmpZQ0FFRi9CUUovSUFGQ0VGUUVRRUdJbHdKQkhEWUNBRUYvREFFTElBWkJnSUNBZ0hoTElBTWdCWVJDLy8vLy93OVdjZ1JBUVlpWEFrRVdOZ0lBUVg4TUFRc2dCa0dBd0FCSklBVkNBMVJ5Qkg5QmlKY0NRUncyQWdCQmZ3VWdCYWNnQmtFS2RrRUJJQUlnQTZjZ0JFRVFJQUFnQjBFQVFRQkJBUkE0UVFCSFFSOTBRUjkxQ3dzTEMrMEJBUVovQW44akFDRUhJd0JCUDJwQlFIRWtBQ01BSVFJakFFRXdhaVFBSUFBUWNDSURCSDhnQXdVZ0FVRi9ha0VCU3dSL1FXWUZJQUFvQWpBaUJVRURkQ0lESUFBb0Fpd2lCQ0FFSUFOSkd5QUZRUUowSWdSdUlRTWdBa0VBTmdJQUlBSWdBQ2dDS0RZQ0NDQUNRWDgyQWd3Z0FpQURJQVJzTmdJUUlBSWdBellDRkNBQ0lBTkJBblEyQWhnZ0FpQUZOZ0ljSUFJZ0FDZ0NORFlDSUNBQ0lBRTJBaVFnQWlBQUVNMENJZ0VFZnlBQkJTQUNLQUlJQkVCQkFDRUJBMEFnQWlBQkVNNENJQUZCQVdvaUFTQUNLQUlJU1EwQUN3c2dBQ0FDRU5FQ1FRQUxDd3NoQUNBSEN5UUFJQUFMMEE0Q0UzOFFmZ0ovSXdBaEZTTUFRVDlxUVVCeEpBQWpBQ0VJSXdCQmdCQnFKQUFnQ0VHQUNHb2lBeUFCRURBZ0F5QUFFRElnQ0NBREVEQkJBQ0VBQTBBZ0FFRUVkQ0lCUVFOMElBTnFJZ2twQXdBZ0FVRUVja0VEZENBRGFpSUVLUU1BSWgwUUNTRVpJQUZCREhKQkEzUWdBMm9pQlNrREFDQVpoVUVnRUFjaEZpQUZJQllnR1NBZElBRkJDSEpCQTNRZ0Eyb2lCaWtEQUNBV0VBa2lGb1ZCR0JBSEloMFFDU0loaFVFUUVBY2lHVGNEQUNBR0lCWWdHUkFKSWhZM0F3QWdCQ0FXSUIyRlFUOFFCeUlkTndNQUlBRkJBWEpCQTNRZ0Eyb2lDaWtEQUNBQlFRVnlRUU4wSUFOcUlnc3BBd0FpR3hBSklSb2dBVUVOY2tFRGRDQURhaUlNS1FNQUlCcUZRU0FRQnlJWElCb2dHeUFCUVFseVFRTjBJQU5xSWdjcEF3QWdGeEFKSWh1RlFSZ1FCeUlYRUFraUk0VkJFQkFISVJvZ0J5QWJJQm9RQ1NJYk53TUFJQmNnRzRWQlB4QUhJUmNnQVVFQ2NrRURkQ0FEYWlJTktRTUFJQUZCQm5KQkEzUWdBMm9pRGlrREFDSWNFQWtoSHlBQlFRNXlRUU4wSUFOcUlnOHBBd0FnSDRWQklCQUhJaGdnSHlBY0lBRkJDbkpCQTNRZ0Eyb2lFQ2tEQUNBWUVBa2lISVZCR0JBSEloZ1FDU0lraFVFUUVBY2hIeUFZSUJ3Z0h4QUpJaUtGUVQ4UUJ5RWNJQUZCQTNKQkEzUWdBMm9pRVNrREFDQUJRUWR5UVFOMElBTnFJaElwQXdBaUhoQUpJUmdnQVVFUGNrRURkQ0FEYWlJVEtRTUFJQmlGUVNBUUJ5SWdJQmdnSGlBQlFRdHlRUU4wSUFOcUlnRXBBd0FnSUJBSkloNkZRUmdRQnlJZ0VBa2lKWVZCRUJBSElSZ2dJQ0FlSUJnUUNTSWdoVUUvRUFjaEhpQVhJQ0lnR0NBaElCY1FDU0lZaFVFZ0VBY2lJUkFKSWlLRlFSZ1FCeUVYSUFrZ0dDQVhFQWtpR0RjREFDQVRJQmdnSVlWQkVCQUhJaGczQXdBZ0VDQWlJQmdRQ1NJWU53TUFJQXNnRnlBWWhVRS9FQWMzQXdBZ0hDQWdJQ01nSEJBSkloY2dHWVZCSUJBSElod1FDU0lZaFVFWUVBY2hHU0FLSUJjZ0dSQUpJaGMzQXdBZ0JTQVhJQnlGUVJBUUJ5SVhOd01BSUFFZ0dDQVhFQWtpRnpjREFDQU9JQmNnR1lWQlB4QUhOd01BSUI0Z0ZpQWFJQ1FnSGhBSkloYUZRU0FRQnlJYUVBa2lGNFZCR0JBSElSa2dEU0FXSUJrUUNTSVdOd01BSUF3Z0ZpQWFoVUVRRUFjaUZqY0RBQ0FHSUJjZ0ZoQUpJaFkzQXdBZ0VpQVdJQm1GUVQ4UUJ6Y0RBQ0FiSUI4Z0pTQWRFQWtpRm9WQklCQUhJaG9RQ1NJYklCMkZRUmdRQnlFWklCRWdGaUFaRUFraUZqY0RBQ0FQSUJZZ0dvVkJFQkFISWhZM0F3QWdCeUFiSUJZUUNTSVdOd01BSUFRZ0ZpQVpoVUUvRUFjM0F3QWdBRUVCYWlJQVFRaEhEUUFMUVFBaEFBTkFJQUJCQVhRaUFVRURkQ0FEYWlJSktRTUFJQUZCSUdwQkEzUWdBMm9pQkNrREFDSWRFQWtoR1NBQlFlQUFha0VEZENBRGFpSUZLUU1BSUJtRlFTQVFCeUVXSUFVZ0ZpQVpJQjBnQVVGQWEwRURkQ0FEYWlJR0tRTUFJQllRQ1NJV2hVRVlFQWNpSFJBSklpR0ZRUkFRQnlJWk53TUFJQVlnRmlBWkVBa2lGamNEQUNBRUlCWWdIWVZCUHhBSEloMDNBd0FnQVVFQmNrRURkQ0FEYWlJS0tRTUFJQUZCSVdwQkEzUWdBMm9pQ3lrREFDSWJFQWtoR2lBQlFlRUFha0VEZENBRGFpSU1LUU1BSUJxRlFTQVFCeUlYSUJvZ0d5QUJRY0VBYWtFRGRDQURhaUlIS1FNQUlCY1FDU0liaFVFWUVBY2lGeEFKSWlPRlFSQVFCeUVhSUFjZ0d5QWFFQWtpR3pjREFDQVhJQnVGUVQ4UUJ5RVhJQUZCRUdwQkEzUWdBMm9pRFNrREFDQUJRVEJxUVFOMElBTnFJZzRwQXdBaUhCQUpJUjhnQVVId0FHcEJBM1FnQTJvaUR5a0RBQ0FmaFVFZ0VBY2lHQ0FmSUJ3Z0FVSFFBR3BCQTNRZ0Eyb2lFQ2tEQUNBWUVBa2lISVZCR0JBSEloZ1FDU0lraFVFUUVBY2hIeUFZSUJ3Z0h4QUpJaUtGUVQ4UUJ5RWNJQUZCRVdwQkEzUWdBMm9pRVNrREFDQUJRVEZxUVFOMElBTnFJaElwQXdBaUhoQUpJUmdnQVVIeEFHcEJBM1FnQTJvaUV5a0RBQ0FZaFVFZ0VBY2lJQ0FZSUI0Z0FVSFJBR3BCQTNRZ0Eyb2lBU2tEQUNBZ0VBa2lIb1ZCR0JBSElpQVFDU0lsaFVFUUVBY2hHQ0FnSUI0Z0dCQUpJaUNGUVQ4UUJ5RWVJQmNnSWlBWUlDRWdGeEFKSWhpRlFTQVFCeUloRUFraUlvVkJHQkFISVJjZ0NTQVlJQmNRQ1NJWU53TUFJQk1nR0NBaGhVRVFFQWNpR0RjREFDQVFJQ0lnR0JBSkloZzNBd0FnQ3lBWElCaUZRVDhRQnpjREFDQWNJQ0FnSXlBY0VBa2lGeUFaaFVFZ0VBY2lIQkFKSWhpRlFSZ1FCeUVaSUFvZ0Z5QVpFQWtpRnpjREFDQUZJQmNnSElWQkVCQUhJaGMzQXdBZ0FTQVlJQmNRQ1NJWE53TUFJQTRnRnlBWmhVRS9FQWMzQXdBZ0hpQVdJQm9nSkNBZUVBa2lGb1ZCSUJBSElob1FDU0lYaFVFWUVBY2hHU0FOSUJZZ0dSQUpJaFkzQXdBZ0RDQVdJQnFGUVJBUUJ5SVdOd01BSUFZZ0Z5QVdFQWtpRmpjREFDQVNJQllnR1lWQlB4QUhOd01BSUJzZ0h5QWxJQjBRQ1NJV2hVRWdFQWNpR2hBSkloc2dIWVZCR0JBSElSa2dFU0FXSUJrUUNTSVdOd01BSUE4Z0ZpQWFoVUVRRUFjaUZqY0RBQ0FISUJzZ0ZoQUpJaFkzQXdBZ0JDQVdJQm1GUVQ4UUJ6Y0RBQ0FBUVFGcUlnQkJDRWNOQUFzZ0FpQUlFREFnQWlBREVESWdGUXNrQUF1dEFRSUJmd0YrSUFGRklnWUVmeUFDUWY4QmNRUi9JQUFvQWhRZ0FrSC9BWEZzSVFFZ0EwRi9haUFCYWlBRFJVRWZkRUVmZFNBQmFpQUZHd1VnQTBGL2Fnc0ZJQUFvQWhnZ0FDZ0NGR3NoQVNBRFFYOXFJQUZxSUFORlFSOTBRUjkxSUFGcUlBVWJDeUVCSUFZZ0FrSC9BWEZCQTBaeUJINUNBQVVnQUNnQ0ZDQUNRZjhCY1VFQmFteXRDeUFCUVg5cXJTQUJyU0FFclNJSElBZCtRaUNJZmtJZ2lIMThJQUFvQWhpdGdxY0wrZ0VCQjM4Q2Z5TUFJUWtqQUVFL2FrRkFjU1FBSXdBaEF5TUFRWUFnYWlRQUlBTkJnQWhxSVFRZ0F5RUZJQU5CZ0JocUlnWVFTU0FEUVlBUWFpSURFRWtnQUVFQVJ5QUJRUUJIY1FSQUlBTWdBU2dDQUswM0F3QWdBeUFCS0FJRXJUY0RDQ0FESUFFdEFBaXROd01RSUFNZ0FDZ0NFSzAzQXhnZ0F5QUFLQUlJclRjRElDQURJQUFvQWlTdE53TW9JQUFvQWhRRVFFRUFJUUVEUUNBQlFmOEFjU0lJUlFSQUlBTWdBeWtETUVJQmZEY0RNQ0FGRUVrZ0JCQkpJQVlnQXlBRkVHOGdCaUFGSUFRUWJ3c2dBVUVEZENBQ2FpQUlRUU4wSUFScUtRTUFOd01BSUFGQkFXb2lBU0FBS0FJVVNRMEFDd3NMSUFrTEpBQUxpd01DQ1g4RGZpQUFCRUFDUUFKL0FrQWdBQ2dDSkVFQ1J3MEFJQUVvQWdBaUEwVUVRQ0FCTFFBSVFRRk1EUUVMSUFBb0FnUWhCMEVBREFFTElBQWdBU0FBS0FJRUlnY1F4d0lnQVNnQ0FDRURRUUVMSVFsQkFFRUNJQUVzQUFnaUJDQURjaHNpQXlBQUtBSVlJZ1VnQVNnQ0JHeHFJQUFvQWhRaUFpQUVRZjhCY1d4cUlRUWdBeUFDU1FSQUlBUkJmeUFGSWdKQmYyb2dCQ0FDY0J0cUlRVURRQ0FFUVg5cUlBVWdCQ0FDY0VFQlJoc2hCU0FCS0FJRXJTSU1JQWtFZnlBRFFRTjBJQWRxQlNBQUtBSUFLQUlFSUFWQkNuUnFDeWtEQUNJTlFpQ0lJQUFvQWh5dGdpQUJLQUlBSWdKRklnb2dBU3dBQ0NJR1JYRWJJUXNnQVNBRE5nSU1JQUFnQWlBR0lBTWdEYWNnQ3lBTVVSREdBa0VLZENBQUtBSUFLQUlFSWdJZ0FDZ0NHQ0FMcDJ4QkNuUnFhaUVHSUFSQkNuUWdBbW9oQ0NBRlFRcDBJQUpxSVFJZ0NnUkFJQUlnQmlBSUVNVUNCU0FDSUFZZ0NCQnZDeUFEUVFGcUlnTWdBQ2dDRkU4TkFpQUFLQUlZSVFJZ0JFRUJhaUVFSUFWQkFXb2hCUXdBQUFzQUN3c0xDK2NFQVFOL0l3QWhCaU1BUVQ5cVFVQnhKQUFqQUNFRUl3QkJFR29rQUFKQUFrQUNRQUpBQWtBZ0EwRUJhdzRDQVFBQ0N5QUJRUTFKQkg5QllRVWdBRUdJandJcEFBQTNBQUFnQUVHUWp3SW9BQUEyQUFnZ0FFR1Vqd0lzQUFBNkFBd2dBRUVNYWlFRklBRkJkR29oQXd3REN5RUFEQU1MSUFGQkRFa0VmMEZoQlNBQVFaV1BBaWtBQURjQUFDQUFRWjJQQWlnQUFEWUFDQ0FBUVF0cUlRVWdBVUYxYWlFRERBSUxJUUFNQWd0QllTRUFEQUVMSUFJUWNDSUFSUVJBSUFSQkV4QktJQU1nQkJBaklnQk5CRUJCWVNFQURBSUxJQVVnQkNBQVFRRnFFQmdhSUFBZ0JXb2lBVUVEYWlFRklBTWdBR3NpQUVGOWFpRURJQUJCQkVrRWYwRmhCU0FCUWFUYTlRRTJBQUFnQkNBQ0tBSXNFRW9nQXlBRUVDTWlBRTBFUUVGaElRQU1Bd3NnQlNBRUlBQkJBV29RR0JvZ0FDQUZhaUlCUVFOcUlRVWdBeUFBYXlJQVFYMXFJUU1nQUVFRVNRUi9RV0VGSUFGQnJPajFBVFlBQUNBRUlBSW9BaWdRU2lBRElBUVFJeUlBVFFSQVFXRWhBQXdFQ3lBRklBUWdBRUVCYWhBWUdpQUFJQVZxSWdGQkEyb2hCU0FESUFCcklnQkJmV29oQXlBQVFRUkpCSDlCWVFVZ0FVR3M0UFVCTmdBQUlBUWdBaWdDTUJCS0lBTWdCQkFqSWdCTkJFQkJZU0VBREFVTElBVWdCQ0FBUVFGcUVCZ2FJQUFnQldvaUFVRUJhaUVFSUFNZ0FHc2lBRUYvYWlFRElBQkJBa2tFZjBGaEJTQUJRU1E3QUFBZ0JDQURJQUlvQWhBZ0FpZ0NGRUVERUY0YUlBUWdCQkFqSWdCcUlRRWdBeUFBYXlJQVFRSkpCSDlCWVFVZ0FVRWtPd0FBSUFGQkFXb2dBRUYvYWlBQ0tBSUFJQUlvQWdSQkF4QmVHaUFHSkFCQkFBOExDd3NMQ3lFQUN3c2dCaVFBSUFBTHRBRUJCbjhDZnlNQUlRY2pBRUUvYWtGQWNTUUFJd0FoQWlNQVFZQUlhaVFBSUFFb0Fod0VRQ0FBUVVCcklRUWdBRUhFQUdvaEJnTkFJQVJCQUJBTElBWWdBeEFMSUFKQmdBZ2dBRUhJQUJCdUlBRW9BZ0FvQWdRZ0FTZ0NHQ0FEYkVFS2RHb2dBaENtQVNBRVFRRVFDeUFDUVlBSUlBQkJ5QUFRYmlBQktBSUFLQUlFSUFFb0FoZ2dBMnhCQVdwQkNuUnFJQUlRcGdFZ0EwRUJhaUlESUFFb0FoeEpEUUFMQ3lBQ1FZQUlFQW9nQndza0FBdUdBd0VFZndKL0l3QWhCaU1BUVQ5cVFVQnhKQUFqQUNFRUl3QkJrQU5xSkFBZ0JFR0FBMm9oQXlBQlJTQUFSWEpGQkVBZ0JFRUFRUUJCd0FBUVRob2dBeUFCS0FJd0VBc2dCQ0FEUWdRUUdTQURJQUVvQWdRUUN5QUVJQU5DQkJBWklBTWdBU2dDTEJBTElBUWdBMElFRUJrZ0F5QUJLQUlvRUFzZ0JDQURRZ1FRR1NBRFFSTVFDeUFFSUFOQ0JCQVpJQU1nQWhBTElBUWdBMElFRUJrZ0F5QUJLQUlNRUFzZ0JDQURRZ1FRR1NBQktBSUlJZ0lFUUNBRUlBSWdBU2dDREswUUdTQUJLQUk0UVFGeEJFQWdBU2dDQ0NBQktBSU1FQW9nQVVFQU5nSU1Dd3NnQXlBQktBSVVFQXNnQkNBRFFnUVFHU0FCS0FJUUlnSUVRQ0FFSUFJZ0FTZ0NGSzBRR1FzZ0F5QUJLQUljRUFzZ0JDQURRZ1FRR1NBQktBSVlJZ0lFUUNBRUlBSWdBU2dDSEswUUdTQUJLQUk0UVFKeEJFQWdBU2dDR0NBQktBSWNFQW9nQVVFQU5nSWNDd3NnQXlBQktBSWtFQXNnQkNBRFFnUVFHU0FCS0FJZ0lnSUVRQ0FFSUFJZ0FTZ0NKSzBRR1FzZ0JDQUFRY0FBRUUwYUN5QUdDeVFBQytNQkFRVi9BbjhqQUNFR0l3QkJQMnBCUUhFa0FDTUFJUUlqQUVFUWFpUUFJQUFFZndKL0lBRkJDblFoQXlBQkJFQWdBeUFCYmtHQUNFWUVRQ0FBUVF3UUlTSUJOZ0lBSUFFRVFDQUJRUUEyQWdRZ0FVRUFOZ0lBSUFJaEJVR0lsd0lnQXlJQlFZQi9Td1IvUVRBRklBRVE5Z0VpQVFSL0lBVWdBVFlDQUVFQUJVRXdDd3NpQVRZQ0FDQUJCRUFnQWtFQU5nSUFCU0FDS0FJQUlnRUVRQ0FBS0FJQUlBRTJBZ0FnQUNnQ0FDQUJOZ0lFSUFBb0FnQWdBellDQ0VFQURBVUxDeUFBS0FJQUVCWWdBRUVBTmdJQUN3c0xRV29MQlVGcUN5RUFJQVlMSkFBZ0FBdVFBUUVFZndKL0l3QWhCU01BUVQ5cVFVQnhKQUFqQUNFQ0l3QkIwQUJxSkFBZ0FFVWdBVVZ5Qkg5Qlp3VWdBQ0FBS0FJVVFRTjBFQ0VpQXpZQ0JDQURCSDhnQUNBQUtBSVFFTXdDSWdNRWZ5QUFJQUVvQWpnUXB3RWdBd1VnQWlBQklBQW9BaVFReXdJZ0FrRkFhMEVJRUFvZ0FpQUFFTW9DSUFKQnlBQVFDa0VBQ3dWQmFnc0xJUUFnQlFza0FDQUFDNndCQVFaL0FuOGpBQ0VISXdCQlAycEJRSEVrQUNNQUlRSWpBRUVnYWlRQUlBSkJFR29oQkNBQUJFQWdBQ2dDSENJREJFQWdBaUFCTmdJQUlBTWhBVUVBSVFNRFFDQUNJQU02QUFnZ0FRUi9RUUFoQVFOL0lBSWdBVFlDQkNBQ1FRQTJBZ3dnQkNBQ0tRSUFOd0lBSUFRZ0Fpa0NDRGNDQ0NBQUlBUVF5QUlnQVVFQmFpSUJJQUFvQWh3aUJra05BQ0FHQ3dWQkFBc2hBU0FEUVFGcUlnTkJCRWNOQUFzTEN5QUhDeVFBQ3pZQUlBRUVRQ0FBS0FJQUlnRUVRQ0FCS0FJRUlBQW9BaEJCQ25RUUNnc2dBQ2dDQkNJQkJFQWdBU0FBS0FJVVFRTjBFQW9MQ3dzcUFRRi9BMEFnQUNBQ1FRTjBhaUFDUVFOMElBRnFLUU1BTndBQUlBSkJBV29pQWtHQUFVY05BQXNMeVFFQkJuOENmeU1BSVFjakFFRS9ha0ZBY1NRQUl3QWhBaU1BUVlBUWFpUUFJQUpCZ0FocUlRTWdBRUVBUnlBQlFRQkhjUVJBSUFNZ0FTZ0NBQ2dDQkNBQktBSVlRUXAwYWtHQWVHcEJnQWdRR0JvZ0FTZ0NIRUVCU3dSQVFRRWhCQU5BSUFNZ0FTZ0NBQ2dDQkNBQktBSVlJZ1lnQkd3Z0JrRi9hbXBCQ25ScUVESWdCRUVCYWlJRUlBRW9BaHhKRFFBTEN5QUNJQU1RMEFJZ0FDZ0NBQ0FBS0FJRUlBSkJnQWdRYmlBRFFZQUlFQW9nQWtHQUNCQUtJQUVnQUNnQ09CQ25BUXNnQndza0FBc0VBRUVNQ3prQkEzOENmeU1BSVFZakFFRS9ha0ZBY1NRQUl3QWhCQ01BUVJCcUpBQWdCQ0FCSUFJZ0F4RFVBaUFBSUFRUVF5RUFJQVlMSkFBZ0FBczhBUU4vQW44akFDRUdJd0JCUDJwQlFIRWtBQ01BSVFRakFFSGdBR29rQUNBRUlBTVFxQUVnQkNBQklBSVFxUUVnQkNBQUVLb0JJQVlMSkFBTDJnRUJCWDhDZnlNQUlRa2pBRUUvYWtGQWNTUUFJd0FoQlNNQVFlQURhaVFBSUFBZ0FTQUFHeUlIUlFSQUVBQUxJQVZCZ0FOcUlRWWdBU0FISUFFYklRRWdCVUhBQTJvaUFDQURJQVFRYVFSL1FYOEZJQVZCQUVFQVFjQUFFRkFhSUFVZ0FFSWdFQ2NhSUFCQklCQUtJQVVnQkVJZ0VDY2FJQVVnQWtJZ0VDY2FJQVVnQmtIQUFCQlBHaUFGUVlBREVBcEJBQ0VBQTBBZ0FDQUJhaUFBSUFacUxBQUFPZ0FBSUFBZ0Iyb2dBRUVnYWlBR2Fpd0FBRG9BQUNBQVFRRnFJZ0JCSUVjTkFBc2dCa0hBQUJBS1FRQUxJUUFnQ1Fza0FDQUFDOW9CQVFWL0FuOGpBQ0VKSXdCQlAycEJRSEVrQUNNQUlRVWpBRUhnQTJva0FDQUFJQUVnQUJzaUIwVUVRQkFBQ3lBRlFZQURhaUVHSUFFZ0J5QUJHeUVCSUFWQndBTnFJZ0FnQXlBRUVHa0VmMEYvQlNBRlFRQkJBRUhBQUJCUUdpQUZJQUJDSUJBbkdpQUFRU0FRQ2lBRklBSkNJQkFuR2lBRklBUkNJQkFuR2lBRklBWkJ3QUFRVHhvZ0JVR0FBeEFLUVFBaEFBTkFJQUFnQjJvZ0FDQUdhaXdBQURvQUFDQUFJQUZxSUFCQklHb2dCbW9zQUFBNkFBQWdBRUVCYWlJQVFTQkhEUUFMSUFaQndBQVFDa0VBQ3lFQUlBa0xKQUFnQUFzT0FDQUJRU0FRSHlBQUlBRVFhZ3NZQUNBQlFTQWdBa0lnUVFCQkFCQ3ZBUm9nQUNBQkVHb0xjZ0VFZndKL0l3QWhDQ01BUVQ5cVFVQnhKQUFqQUNFRkl3QkJJR29rQUNBRlFSQnFJZ1lnQXlrQUFEY0RBQ0FHUWdBM0F3Z2dCU0lESUFJM0FBQWdCVUlBTndNSUlBRkJjR3BCTUVzRWYwR0lsd0pCSERZQ0FFRi9CU0FBSUFFZ0JDQURJQVlRM3dJTElRQWdDQXNrQUNBQUMwOEFJQUFnQVR3QUJ5QUFJQUZDQ0lnOEFBWWdBQ0FCUWhDSVBBQUZJQUFnQVVJWWlEd0FCQ0FBSUFGQ0lJZzhBQU1nQUNBQlFpaUlQQUFDSUFBZ0FVSXdpRHdBQVNBQUlBRkNPSWc4QUFBTDhBRUJBbjhnQUNrRFNFSURpS2RCL3dCeElnSkI4QUJKQkVCQjhBQWdBbXNpQXdSQUlBSWdBRUhRQUdwcVFaQ0tBaUFERUJnYUN3VkJnQUVnQW1zaUF3UkFJQUlnQUVIUUFHcHFRWkNLQWlBREVCZ2FDeUFBSUFCQjBBQnFJZ0lnQVNBQlFZQUZhaEJNSUFKQ0FEY0RBQ0FDUWdBM0F3Z2dBa0lBTndNUUlBSkNBRGNER0NBQ1FnQTNBeUFnQWtJQU53TW9JQUpDQURjRE1DQUNRZ0EzQXpnZ0FrRkFhMElBTndNQUlBSkNBRGNEU0NBQ1FnQTNBMUFnQWtJQU53TllJQUpDQURjRFlDQUNRZ0EzQTJnTElBQkJ3QUZxSUFCQlFHdEJFQkNyQVNBQUlBQkIwQUJxSUFFZ0FVR0FCV29RVEF0T0FDQUFMUUFIclNBQUxRQUdyVUlJaG9RZ0FDMEFCYTFDRUlhRUlBQXRBQVN0UWhpR2hDQUFMUUFEclVJZ2hvUWdBQzBBQXExQ0tJYUVJQUF0QUFHdFFqQ0doQ0FBTFFBQXJVSTRob1FMWUFFQmZnSkFBa0FnQTBJUFZnUkFJQUFnQWlBRFFuQjhJZ2dnQWlBRHAycEJjR29nQkNBRklBWWdCeENzQVNFQVFnQWdDQ0FBR3lFRElBRU5BUVVnQVFSL1FnQWhBMEYvSVFBTUFnVkJmd3NoQUFzTUFRc2dBU0FETndNQUN5QUFDeWtCQVg4RFFDQUNRUU4wSUFCcUlBRWdBa0VEZEdvUTNBSTNBd0FnQWtFQmFpSUNRUkJIRFFBTEN5TUFJQUZCZjJwQlAwc0VmMEYvQlNBQUlBSWdBVUgvQVhFZ0F5QUVFT0FDUVFBTEMyY0JBbjhqQUNFR0l3QkJQMnBCUUhFa0FDTUFJUVVqQUVId0Ftb2tBQ0FBUlFSQUVBQUxJQUpCZjJwQkdIUkJHSFZCL3dGeFFUOUtCRUFRQUFzZ0FRUkFJQVVnQWlBQklBTWdCQkRpQWlBRlFRQkNBQkE3SUFVZ0FDQUNFSE1hSUFZa0FBVVFBQXNMbndFQkJIOENmeU1BSVFrakFFRS9ha0ZBY1NRQUl3QWhCaU1BUWZBQ2FpUUFJQUZGSUFSQ0FGSnhCRUFRQUFzZ0FFVUVRQkFBQ3lBRFFYOXFRUmgwUVJoMVFmOEJjVUUvU2dSQUVBQUxJQVZCL3dGeFJTSUlJQUpCQUVkeVJRUkFFQUFMSUFWQi93RnhRY0FBU2dSQUVBQUxJQWdFUUNBR0lBTVFyZ0VGSUFZZ0F5QUNJQVVRclFFTElBWWdBU0FFRURzZ0JpQUFJQU1RY3hvZ0NRc2tBQXZ1QWdFRWZ3Si9Jd0FoQ0NNQVFUOXFRVUJ4SkFBakFDRUdJd0JCd0FGcUpBQWdBVUYvYWtFWWRFRVlkVUgvQVhGQlAwb0VRQkFBQ3lBQ1JRUkFFQUFMSUFaQmdBRnFJZ1VnQVRvQUFDQUZRU0E2QUFFZ0JVRUJPZ0FDSUFWQkFUb0FBeUFGUVFScUVIVWdCVUVJYWtJQUVCSWdCVUlBTndNUUlBVkNBRGNER0NBREJFQWdCU0FES1FBQU53QWdJQVVnQXlrQUNEY0FLQVVnQlVJQU53TWdJQVZDQURjREtBc2dCQVJBSUFVZ0JDa0FBRGNBTUNBRklBUXBBQWczQURnRklBVkNBRGNETUNBRlFnQTNBemdMSUFBZ0JSQjJJQVpCSUdvaUFVSUFOd01BSUFGQ0FEY0RDQ0FCUWdBM0F4QWdBVUlBTndNWUlBRkNBRGNESUNBQlFnQTNBeWdnQVVJQU53TXdJQUZDQURjRE9DQUJRVUJyUWdBM0F3QWdBVUlBTndOSUlBRkNBRGNEVUNBQlFnQTNBMWdnQmlBQ0tRQUFOd0FBSUFZZ0Fpa0FDRGNBQ0NBR0lBSXBBQkEzQUJBZ0JpQUNLUUFZTndBWUlBQWdCa0tBQVJBN0lBWkJnQUVRQ2lBSUN5UUFDMjhBSUFCQjBJUUNLUUFBTndBQUlBQkIySVFDS1FBQU53QUlJQUJCNElRQ0tRQUFOd0FRSUFCQjZJUUNLUUFBTndBWUlBQkI4SVFDS1FBQU53QWdJQUJCK0lRQ0tRQUFOd0FvSUFCQmdJVUNLUUFBTndBd0lBQkJpSVVDS1FBQU53QTRJQUJCUUd0QkFFR2xBaEFhR2d0Z0FRRitBa0FDUUNBRFFnOVdCRUFnQUNBQ0lBTkNjSHdpQ0NBQ0lBT25ha0Z3YWlBRUlBVWdCaUFIRUxBQklRQkNBQ0FJSUFBYklRTWdBUTBCQlNBQkJIOUNBQ0VEUVg4aEFBd0NCVUYvQ3lFQUN3d0JDeUFCSUFNM0F3QUxJQUFMQlFCQmdBTUxpd1lCSVg4Z0FpZ0FDQ0VXSUFJb0FBd2hGMEhsOE1HTEJpRUxJQUlvQUFBaUdTRU1RYkxhaU1zSElRMGdBaWdBRUNJYUlRNGdBaWdBRkNJYklRVWdBaWdBR0NJY0lRb2dBaWdBSENJZElRWkI5TXFCMlFZaER5QUNLQUFFSWg0aEFpQVdJUWNnRnlFUVFlN0lnWmtESVFNZ0FTZ0FBQ0lmSVJFZ0FTZ0FCQ0lnSVFRZ0FTZ0FDQ0loSVFnZ0FTZ0FEQ0lpSVFFRFFDQUxJQVVnQzJwQkJ4QUlJQkJ6SWhKcVFRa1FDQ0FJY3lJSUlBZ2dFbXBCRFJBSUlBVnpJZ1ZxUVJJUUNDQUxjeUVKSUFNZ0F5QU1ha0VIRUFnZ0FYTWlFMnBCQ1JBSUlBcHpJaGdnRXlBWWFrRU5FQWdnREhNaUNtcEJFaEFJSUFOeklSUWdEU0FOSUJGcVFRY1FDQ0FHY3lJVmFrRUpFQWdnQW5NaUFpQUNJQlZxUVEwUUNDQVJjeUlRYWtFU0VBZ2dEWE1oQmlBUElBNGdEMnBCQnhBSUlBZHpJZ2RxUVFrUUNDQUVjeUlFSUFRZ0IycEJEUkFJSUE1eklnRnFRUklRQ0NBUGN5RURJQWtnQnlBSmFrRUhFQWdnQ25NaURHcEJDUkFJSUFKeklnSWdBaUFNYWtFTkVBZ2dCM01pQjJwQkVoQUlJQWx6SVFzZ0ZDQVNJQlJxUVFjUUNDQVFjeUlSYWtFSkVBZ2dCSE1pQ1NBSklCRnFRUTBRQ0NBU2N5SVFha0VTRUFnZ0ZITWhCQ0FHSUJOcVFRY1FDQ0FCY3lJT0lBWnFRUWtRQ0NBSWN5SUlJQWdnRG1wQkRSQUlJQk56SWdGcVFSSVFDQ0FHY3lFTklBTWdGV3BCQnhBSUlBVnpJZ1VnQTJwQkNSQUlJQmh6SWdvZ0JTQUtha0VORUFnZ0ZYTWlCbXBCRWhBSUlBTnpJUThnSTBFQ2FpSWpRUlJKQkVBZ0JDRURJQWtoQkF3QkN3c2dBQ0FMUWVYd3dZc0dhaEFMSUFCQkJHb2dEQ0FaYWhBTElBQkJDR29nQWlBZWFoQUxJQUJCREdvZ0J5QVdhaEFMSUFCQkVHb2dFQ0FYYWhBTElBQkJGR29nQkVIdXlJR1pBMm9RQ3lBQVFSaHFJQkVnSDJvUUN5QUFRUnhxSUFrZ0lHb1FDeUFBUVNCcUlBZ2dJV29RQ3lBQVFTUnFJQUVnSW1vUUN5QUFRU2hxSUExQnN0cUl5d2RxRUFzZ0FFRXNhaUFPSUJwcUVBc2dBRUV3YWlBRklCdHFFQXNnQUVFMGFpQUtJQnhxRUFzZ0FFRTRhaUFHSUIxcUVBc2dBRUU4YWlBUFFmVEtnZGtHYWhBTEN3dkZpd0lNQUVHQUNBc290bmhaLzRWeTB3QzliaFgvRHdwcUFDbkFBUUNZNkhuL3ZEeWcvNWx4enY4QXQrTCt0QTFJL3dCQnNBZ0xKN0NnRHY3VHlZYi9uaGlQQUg5cE5RQmdETDBBcDlmNy81OU1nUDVxWmVIL0h2d0VBSklNcmdCQjRBZ0xKMW54c3Y0SzVhYi9lOTBxL2g0VTFBQlNnQU1BTU5IekFIZDVRUDh5NDV6L0FHN0ZBV2Nia0FCQmtBa0w4L2NCaFR1TUFiM3hKUC80SmNNQllOdzNBTGRNUHYvRFFqMEFNa3lrQWVHa1RQOU1QYVAvZFQ0ZkFGR1JRUDkyUVE0QW9uUFcvd2FLTGdCODV2VC9Db3FQQURRYXdnQzQ5RXdBZ1k4cEFiNzBFLzk3cW5yL1lvRkVBSG5Wa3dCV1pSNy9vV2ViQUl4WlEvL3Y1YjRCUXd1MUFNYndpZjd1UmJ6L1E1ZnVBQk1xYlAvbFZYRUJNa1NIL3hGcUNRQXlad0gvVUFHb0FTT1lIdjhRcUxrQk9Gbm8vMlhTL0FBcCtrY0F6S3BQL3c0dTcvOVFUZThBdmRaTC94R04rUUFtVUV6L3ZsVjFBRmJrcWdDYzJOQUJ3OCtrLzVaQ1RQK3Y0UkQvalZCaUFVemI4Z0RHb25JQUx0cVlBSnNyOGY2Ym9Hai9NN3VsQUFJUnJ3QkNWS0FCOXpvZUFDTkJOZjVGN0w4QUxZYjFBYU43M1FBZ2JoVC9OQmVsQUxyV1J3RHBzR0FBOHU4MkFUbFppZ0JUQUZUL2lLQmtBRnlPZVA1b2ZMNEF0YkUrLy9vcFZRQ1lnaW9CWVB6MkFKZVhQLzd2aFQ0QUlEaWNBQzJudmYrT2hiTUJnMWJUQUx1emx2NzZxZzcvMHFOT0FDVTBsd0JqVFJvQTdwelYvOVhBMFFGSkxsUUFGRUVwQVRiT1R3REpnNUwrcW04WS83RWhNdjZySnN2L1R2ZDBBTkhkbVFDRmdMSUJPaXdaQU1rbk93RzlFL3dBTWVYU0FYVzdkUUMxczdnQkFITGJBREJla3dEMUtUZ0FmUTNNL3ZTdGR3QXMzU0QrVk9vVUFQbWd4Z0hzZnVyL0wyT28vcXJpbWY5bXM5Z0E0bzE2LzNwQ21mNjI5WVlBNCtRWkFkWTU2Ly9ZclRqL3RlZlNBSGVBbmYrQlg0ai9ibjR6QUFLcHQvOEhnbUwrUmJCZS8zUUU0d0haOHBIL3lxMGZBV2tCSi84dXIwVUE1Qzg2LzlmZ1JmN1BPRVgvRVA2TC94ZlAxUC9LRkg3L1g5Vmcvd213SVFESUJjLy84U3FBL2lNaHdQLzQ1Y1FCZ1JGNEFQdG5sLzhITkhEL2pEaEMveWppOWYvWlJpWCtyTllKLzBoRGhnR1N3TmIvTENad0FFUzRTLy9PV3ZzQWxldU5BTFdxT2dCMDlPOEFYSjBDQUdhdFlnRHBpV0FCZnpITEFBV2JsQUFYbEFuLzAzb01BQ0tHR3YvYnpJZ0FoZ2dwLytCVEsvNVZHZmNBYlg4QS9xbUlNQUR1ZDl2LzU2M1ZBTTRTL3Y0SXVnZi9mZ2tIQVc4cVNBQnZOT3orWUQrTkFKTy9mLzdOVHNEL0RtcnRBYnZiVEFDdjg3dithVm10QUZVWldRR2k4NVFBQW5iUi9pR2VDUUNMb3k3L1hVWW9BR3dxanY1di9JNy9tOStRQURQbHAvOUovSnYvWG5RTS81aWcyditjN2lYL3MrclAvOFVBcy8rYXBJMEE0Y1JvQUFvakdmN1IxUEwvWWYzZS9yaGw1UURlRW44QnBJaUgveDdQalA2U1lmTUFnY0FhL3NsVUlmOXZDazcvazFHeS93UUVHQUNoN3RmL0JvMGhBRFhYRHY4cHRkRC81NHVkQUxQTDNmLy91WEVBdmVLcy8zRkMxdi9LUGkzL1prQUkvMDZ1RVA2RmRVVC9oVHVNQWIzeEpQLzRKY01CWU53M0FMZE1Qdi9EUWowQU1reWtBZUdrVFA5TVBhUC9kVDRmQUZHUlFQOTJRUTRBb25QVy93YUtMZ0I4NXZUL0NvcVBBRFFhd2dDNDlFd0FnWThwQWI3MEUvOTdxbnIvWW9GRUFIblZrd0JXWlI3L29XZWJBSXhaUS8vdjViNEJRd3UxQU1id2lmN3VSYnovNm5FOC95WC9PZjlGc3JiK2dOQ3pBSFlhZmY0REI5Yi84VEpOLzFYTHhmL1RoL3IvR1RCay83dlZ0UDRSV0drQVU5R2VBUVZ6WWdBRXJqeitxemR1LzltMUVmOFV2S29Ba3B4bS9sZldydjl5ZXBzQjZTeXFBSDhJN3dIVzdPb0Fyd1hiQURGcVBmOEdRdEQvQW1wdS8xSHFFLy9YYThEL1E1ZnVBQk1xYlAvbFZYRUJNa1NIL3hGcUNRQXlad0gvVUFHb0FTT1lIdjhRcUxrQk9Gbm8vMlhTL0FBcCtrY0F6S3BQL3c0dTcvOVFUZThBdmRaTC94R04rUUFtVUV6L3ZsVjFBRmJrcWdDYzJOQUJ3OCtrLzVaQ1RQK3Y0UkQvalZCaUFVemI4Z0RHb25JQUx0cVlBSnNyOGY2Ym9Hai9zZ244L21SdTFBQU9CYWNBNmUrai94eVhuUUZsa2dyLy9wNUcva2Y1NUFCWUhqSUFSRHFnLzc4WWFBR0JRb0gvd0RKVi93aXppdjhtK3NrQWMxQ2dBSVBtY1FCOVdKTUFXa1RIQVAxTW5nQWMvM1lBY2ZyK0FFSkxMZ0RtMmlzQTVYaTZBWlJFS3dDSWZPNEJ1MnZGLzFRMTl2OHpkUDcvTTd1bEFBSVJyd0JDVktBQjl6b2VBQ05CTmY1RjdMOEFMWWIxQWFONzNRQWdiaFQvTkJlbEFMcldSd0Rwc0dBQTh1ODJBVGxaaWdCVEFGVC9pS0JrQUZ5T2VQNW9mTDRBdGJFKy8vb3BWUUNZZ2lvQllQejJBSmVYUC83dmhUNEFJRGljQUMybnZmK09oYk1CZzFiVEFMdXpsdjc2cWc3L1JIRVYvOTY2Ty85Q0IvRUJSUVpJQUZhY2JQNDNwMWtBYlRUYi9nMndGLy9FTEdyLzc1VkgvNlNNZmYrZnJRRUFNeW5uQUpFK0lRQ0tiMTBCdVZORkFKQnpMZ0JobHhEL0dPUWFBREhaNGdCeFMrcit3WmtNLzdZd1lQOE9EUm9BZ01QNS9rWEJPd0NFSlZIK2ZXbzhBTmJ3cVFHazQwSUEwcU5PQUNVMGx3QmpUUm9BN3B6Vi85WEEwUUZKTGxRQUZFRXBBVGJPVHdESmc1TCtxbThZLzdFaE12NnJKc3YvVHZkMEFOSGRtUUNGZ0xJQk9pd1pBTWtuT3dHOUUvd0FNZVhTQVhXN2RRQzFzN2dCQUhMYkFEQmVrd0QxS1RnQWZRM00vdlN0ZHdBczNTRCtWT29VQVBtZ3hnSHNmdXIvano3ZEFJRloxdjgzaXdYK1JCUy8vdzdNc2dFanc5a0FMelBPQVNiMnBRRE9Hd2Irbmxja0FOazBrdjk5ZTlmL1ZUd2YvNnNOQndEYTlWaisvQ004QURmV29QK0ZaVGdBNENBVC9wTkE2Z0Fha2FJQmNuWjlBUGo4K2dCbFhzVC94bzNpL2pNcXRnQ0hEQW4rYmF6Uy84WHN3Z0h4UVpvQU1Kd3YvNWxETi8vYXBTTCtTclN6QU5wQ1J3RlllbU1BMUxYYi8xd3E1Ly92QUpvQTlVMjMvMTVScWdFUzFkZ0FxMTFIQURSZStBQVNsNkgreGRGQy82NzBELzZpTUxjQU1UM3cvclpkd3dESDVBWUJ5QVVSLzRrdDdmOXNsQVFBV2svdC95Yy9UZjgxVXM4QmpoWjIvMlhvRWdGY0drTUFCY2hZL3lHb2l2K1Y0VWdBQXRFYi95ejFxQUhjN1JIL0h0TnAvbzN1M1FDQVVQWCtiLzRPQU41ZnZnSGZDZkVBa2t6VS8yek5hUDgvZFprQWtFVXdBQ1BrYndEQUljSC9jTmErL25PWWx3QVhabGdBTTByNEFPTEhqLzdNb21YLzBHRzlBZlZvRWdEbTloNy9GNVJGQUc1WU5QN2l0Vm4vMEM5YS9uS2hVUDhoZFBnQXM1aFgvMFdRc1FGWTdoci9PaUJ4QVFGTlJRQTdlVFQvbU81VEFEUUl3UURuSituL3h5S0tBTjVFclFCYk9mTCszTkovLzhBSDl2NlhJN3NBdyt5bEFHOWR6Z0RVOTRVQm1vWFIvNXZuQ2dCQVRpWUFldmxrQVI0VFlmOCtXL2tCK0lWTkFNVS9xUDUwQ2xJQXVPeHgvdFRMd3Y4OVpQeitKQVhLLzNkYm1mK0JUeDBBWjJlci91M1hiLy9ZTlVVQTcvQVhBTUtWM2Y4bTRkNEE2UCswL25aU2hmODUwYkVCaStpRkFKNndMdjdDY3k0QVdQZmxBUnhudndEZDNxLytsZXNzQUpma0dmN2FhV2NBamxYU0FKV0J2di9WUVY3K2RZYmcvMUxHZFFDZDNkd0FvMlVrQU1WeUpRQm9yS2IrQzdZQUFGRkl2UDlodkJEL1JRWUtBTWVUa2Y4SUNYTUJRZGF2LzltdDBRQlFmNllBOStVRS9xZTNmUDlhSE16K3J6dncvd3NwK0FGc0tEUC9rTEhEL3BiNmZnQ0tXMEVCZUR6ZS8vWEI3d0FkMXIzL2dBSVpBRkNhb2dCTjNHc0I2czFLL3phbVovOTBTQWtBNUY0di94N0lHZjhqMWxuL1BiQ00vMVBpby85TGdxd0FnQ1lSQUYrSm1QL1hmSjhCVDEwQUFKUlNuZjdEZ3Z2L0tNcE0vL3QrNEFDZFl6Nyt6d2ZoLzJCRXd3Q011cDMvZ3hQbi95cUEvZ0EwMnozK1pzdElBSTBIQy8rNnBOVUFIM3AzQUlYeWtRRFEvT2ovVzlXMi80OEUrdjc1MTBvQXBSNXZBYXNKM3dEbGV5SUJYSUlhLzAyYkxRSERpeHovTytCT0FJZ1I5d0JzZVNBQVQvcTkvMkRqL1A0bThUNEFQcTU5LzV0dlhmOEs1czRCWWNVby93QXhPZjVCK2cwQUV2dVcvOXh0MHY4RnJxYitMSUc5QU9zamsvOGw5NDMvU0kwRS8yZHIvd0QzV2dRQU5Td3FBQUllOEFBRU96OEFXRTRrQUhHbnRBQytSOEgveDU2ay96b0lyQUJOSVF3QVFUOERBSmxOSWYrcy9tWUI1TjBFLzFjZS9nR1NLVmIvaXN6di9teU5FZis3OG9jQTB0Qi9BRVF0RHY1SllENEFVVHdZLzZvR0pQOEQrUm9BSTlWdEFCYUJOdjhWSStILzZqMDQvenJaQmdDUGZGZ0E3SDVDQU5FbXQvOGk3Z2IvcnBGbUFGOFcwd0RFRDVuK0xsVG8vM1Vpa2dIbitrci9HNFprQVZ5N3cvK3F4bkFBZUJ3cUFORkdRd0FkVVI4QUhhaGtBYW10b0FCckkzVUFQbUE3LzFFTVJRR0g3NzcvM1B3U0FLUGNPditKaWJ6L1UyWnRBR0FHVEFEcTN0TC91YTdOQVR5ZTFmOE44ZFlBcklHTUFGMW84Z0RBblBzQUszVWVBT0ZSbmdCLzZOb0E0aHpMQU9rYmwvOTFLd1gvOGc0di95RVVCZ0NKK3l6K0d4LzEvN2ZXZmY0b2VaVUF1cDdWLzFrSTR3QkZXQUQreTRmaEFNbXV5d0NUUjdnQUVua3AvbDRGVGdEZzF2RCtKQVcwQVB1SDV3R2ppdFFBMHZsMC9saUJ1d0FUQ0RIK1BnNlEvNTlNMHdEV00xSUFiWFhrL21mZnkvOUwvQThCbWtmYy94Y05Xd0dOcUdEL3RiYUZBUG96TndEcTZ0VCtyeitlQUNmd05BR2V2U1QvMVNoVkFTQzA5LzhUWmhvQlZCaGgvMFVWM2dDVWkzci8zTlhyQWVqTC93QjVPWk1BNHdlYUFEVVdrd0ZJQWVFQVVvWXcvbE04bmYrUlNLa0FJbWZ2QU1icEx3QjBFd1QvdUdvSi83ZUJVd0Frc09ZQkltZElBTnVpaGdEMUtwNEFJSlZnL3FVc2tBREs3MGorMTVZRkFDcENKQUdFMTY4QVZxNVcveHJGblA4eDZJZitaN1pTQVAyQXNBR1pzbm9BOWZvS0FPd1lzZ0NKYW9RQUtCMHBBREllbVA5OGFTWUE1cjlMQUk4cnFnQXNneFQvTEEwWC8rMy9td0dmYldUL2NMVVkvMmpjYkFBMzA0TUFZd3pWLzVpWGtmL3VCWjhBWVpzSUFDRnNVUUFCQTJjQVBtMGkvL3FidEFBZ1I4UC9Ka2FSQVo5ZjlRQkY1V1VCaUJ6d0FFL2dHUUJPYm5uLytLaDhBTHVBOXdBQ2srditUd3VFQUVZNkRBRzFDS1AvVDRtRi95V3FDLytOODFYL3NPZlgvOHlXcFAvdjF5Zi9MbGVjL2dpaldQK3NJdWdBUWl4bS94czJLZjdzWTFmL0tYdXBBVFJ5S3dCMWhpZ0FtNFlhQU9mUFcvNGpoQ2IvRTJaOS9pVGpoZjkyQTNIL0hRMThBSmhnU2dGWWtzNy9wNy9jL3FJU1dQKzJaQmNBSDNVMEFGRXVhZ0VNQWdjQVJWREpBZEgyckFBTU1JMEI0Tk5ZQUhUaW53QjZZb0lBUWV6cUFlSGlDZi9QNG5zQldkWTdBSENIV0FGYTlNdi9NUXNtQVlGc3VnQlpjQThCWlM3TS8zL01MZjVQLzkzL00wa1MvMzhxWmYveEZjb0FvT01IQUdreTdBQlBOTVgvYU1yUUFiUVBFQUJseFU3L1lrM0xBQ201OFFFandYd0FJNXNYLzg4MXdBQUxmYU1CK1o2NS93U0RNQUFWWFcvL1BYbm5BVVhJSlArNU1Mbi9iKzRWL3ljeUdmOWoxNlAvVjlRZS82U1RCZitBQmlNQmJOOXUvOEpNc2dCS1piUUE4eTh3QUs0WksvOVNyZjBCTm5MQS95ZzNXd0RYYkxEL0N6Z0hBT0RwVEFEUllzcis4aGw5QUN6QlhmN0xDTEVBaDdBVEFIQkgxZi9PTzdBQkJFTWFBQTZQMWY0cU45RC9QRU40QU1FVm93QmpwSE1BQ2hSMkFKelUzdjZnQjluL2N2Vk1BWFU3ZXdDd3dsYisxUSt3QUU3T3ovN1ZnVHNBNmZzV0FXQTNtUC9zL3cvL3hWbFUvMTJWaFFDdW9IRUE2bU9wLzVoMFdBQ1FwRlAvWHgzRy95SXZELzlqZUliL0JlekJBUG4zZnYrVHV4NEFNdVoxLzJ6WjIvK2pVYWIvU0JtcC9wdDVULzhjbTFuK0IzNFJBSk5CSVFFdjZ2MEFHak1TQUdsVHgvK2p4T1lBY2Zpa0FPTCsyZ0M5MGN2L3BQZmUvdjhqcFFBRXZQTUJmN05IQUNYdC92OWt1dkFBQlRsSC9tZElTZi8wRWxIKzVkS0UvKzRHdFA4TDVhNy80OTNBQVJFeEhBQ2oxOFQrQ1hZRS96UHdSd0J4Z1czL1RQRG5BTHl4ZndCOVJ5d0JHcS96QUY2cEdmNGI1aDBBRDR0M0FhaXF1ditzeFV6Ly9FdThBSWw4eEFCSUZtRC9MWmY1QWR5UlpBQkF3Si8vZU8vaUFJR3lrZ0FBd0gwQTY0cnFBTGVka2dCVHg4RC91S3hJLzBuaGdBQk5CdnIvdWtGREFHajJ6d0M4SUlyLzJoanlBRU9LVWY3dGdYbi9GTStXQVNuSEVQOEdGSUFBbjNZRkFMVVFqLy9jSmc4QUYwQ1Qva2thRFFCWDVEa0J6SHlBQUNzWTN3RGJZOGNBRmtzVS94TWJmZ0NkUHRjQWJoM21BTE9uL3dFMi9MNEEzY3kyL3JPZVFmOVJuUU1Bd3RxZkFLcmZBQURnQ3lEL0pzVmlBS2lrSlFBWFdBY0JwTHB1QUdBa2hnRHE4dVVBK25rVEFQTCtjUDhETDE0QkNlOEcvMUdHbWY3Vy9hai9RM3pnQVBWZlNnQWNIaXorQVczYy83SlpXUUQ4SkV3QUdNWXUvMHhOYndDRzZvai9KMTRkQUxsSTZ2OUdSSWYvNTJZSC9rM25qQUNuTHpvQmxHRjIveEFiNFFHbXpvLy9ickxXLzdTRG9nQ1BqZUVCRGRwTy8zS1pJUUZpYU13QXIzSjFBYWZPU3dES3hGTUJPa0JEQUlvdmJ3SEU5NEQvaWVEZy9wNXd6d0NhWlA4QmhpVnJBTWFBVC85LzBadi9vLzY1L2p3Tzh3QWYyM0QrSGRsQkFNZ05kUDU3UE1ULzREdTQvdkpaeEFCN0VFditsUkRPQUVYK01BSG5kTi8vMGFCQkFjaFFZZ0Fsd3JqK2xEOGlBSXZ3UWYvWmtJVC9PQ1l0L3NkNDBnQnNzYWIvb040RUFOeCtkLzZsYTZEL1V0ejRBZkd2aUFDUWpSZi9xWXBVQUtDSlR2L2lkbEQvTkJ1RS96OWdpLytZK2ljQXZKc1BBT2d6bHY0b0Qrai84T1VKLzRtdkcvOUxTV0VCMnRRTEFJY0ZvZ0ZydWRVQUF2bHIveWp5UmdEYnlCa0FHWjBOQUVOU1VQL0UrUmYva1JTVkFESklrZ0JlVEpRQkdQdEJBQi9BRndDNDFNbi9lK21pQWZldFNBQ2lWOXYrZm9aWkFKOExEUDZtYVIwQVNSdmtBWEY0dC85Q28yMEIxSThMLzUvbnFBSC9nRm9BT1E0Ni9sazBDdi85Q0tNQkFKSFMvd3FCVlFFdXRSc0FaNGlnL242ODBmOGlJMjhBMTlzWS85UUwxdjVsQlhZQTZNV0YvOStuYmYvdFVGYi9Sb3RlQUo3QnZ3R2JEelAvRDc1ekFFNkh6Ly81Q2hzQnRYM3BBRitzRGY2cTFhSC9KK3lLLzE5ZFYvKytnRjhBZlEvT0FLYVdud0RqRDU3L3pwNTQveXFOZ0FCbHNuZ0JuRzJEQU5vT0xQNzNxTTcvMUhBY0FIQVI1UDlhRUNVQnhkNXNBUDdQVS84Sld2UC84L1NzQUJwWWMvL05kSG9BditiQkFMUmtDd0haSldEL21rNmNBT3ZxSC8vT3NyTC9sY0Q3QUxiNmh3RDJGbWtBZk1GdC93TFNsZitwRWFvQUFHQnUvM1VKQ0FFeWV5ai93YjFqQUNMam9BQXdVRWIrMHpQc0FDMTY5ZjRzcmdnQXJTWHAvNTVCcXdCNlJkZi9XbEFDLzROcVlQN2pjb2NBelRGMy9yQStRUDlTTXhILzhSVHovNElOQ1A2QTJmUC9vaHNCL2xwMjhRRDJ4dmIvTnhCMi84aWZuUUNqRVFFQWpHdDVBRldoZHY4bUFKVUFuQy91QUFtbXBnRkxZclgvTWtvWkFFSVBMd0NMNFo4QVRBT08vdzd1dUFBTHp6WC90OEM2QWFzZ3J2Ky9UTjBCOTZyYkFCbXNNdjdaQ2VrQXkzNUUvN2RjTUFCL3A3Y0JRVEgrQUJBL2Z3SCtGYXIvTytCLy9oWXdQLzhiVG9MK0tNTWRBUHFFY1A0ank1QUFhS21vQU0vOUh2OW9LQ2IrWHVSWUFNNFFnUC9VTjNyLzN4YnFBTi9GZndEOXRiVUJrV1oyQU95WkpQL1UyVWovRkNZWS9vbytQZ0NZakFRQTV0eGovd0VWMVArVXllY0E5SHNKL2dDcjBnQXpPaVgvQWY4Ty8vUzNrZjRBOHFZQUZrcUVBSG5ZS1FCZnczTCtoUmlYLzV6aTUvLzNCVTMvOXBSei91RmNVZi9lVVBiK3FudFovMHJIalFBZEZBai9pb2hHLzExTFhBRGRrekgrTkg3aUFPVjhGd0F1Q2JVQXpVQTBBWVArSEFDWG50UUFnMEJPQU00WnF3QUE1b3NBdi8xdS9tZjNwd0JBS0NnQktxWHgvenRMNVA1ODg3My94Rnl5LzRLTVZ2K05XVGdCazhZRi84djRudjZRb28wQUM2emlBSUlxRmY4QnA0Ly9rQ1FrL3pCWXBQNm9xdHdBWWtmV0FGdlFUd0NmVE1rQnBpclcvMFgvQVA4R2dIMy92Z0dNQUpKVDJ2L1g3a2dCZW44MUFMMTBwZjlVQ0VMLzFnUFEvOVZ1aFFERHFDd0JudWRGQUtKQXlQNWJPbWdBdGpxNy92bmtpQURMaGt6K1k5M3BBRXYrMXY1UVJab0FRSmo0L3V5SXl2K2RhWm4rbGE4VUFCWWpFLzk4ZWVrQXV2ckcvb1RsaXdDSlVLNy9wWDFFQUpES2xQN3I3L2dBaDdoMkFHVmVFZjk2U0ViK1JZS1NBSC9lK0FGRmYzYi9IbExYL3J4S0UvL2xwOEwrZFJsQy8wSHFPUDdWRnB3QWx6dGQvaTBjRy8rNmZxVC9JQWJ2QUg5eVl3SGJOQUwvWTJDbS9qNitmdjlzM3FnQlMrS3VBT2JpeHdBOGRkci8vUGdVQWRhOHpBQWZ3b2IrZTBYQS82bXRKUDQzWWxzQTN5cG0vb2tCWmdDZFdoa0E3M3BBLy93RzZRQUhOaFQvVW5TdUFJY2xOdjhQdW4wQTQzQ3YvMlMwNGY4cTdmVC85SzNpL3ZnU0lRQ3JZNWIvU3VzeS8zVlNJUDVxcU8wQXoyM1FBZVFKdWdDSFBLbitzMXlQQVBTcWFQL3JMWHovUm1PNkFIV0p0d0RnSDljQUtBbGtBQm9RWHdGRTJWY0FDSmNVL3hwa092K3dwY3NCTkhaR0FBY2cvdjcwL3ZYL3A1REMvMzF4Ri8rd2ViVUFpRlRSQUlvR0h2OVpNQndBSVpzTy94bndtZ0NOelcwQlJuTSsveFFvYS82S21zZi9YdC9pLzUyckpnQ2pzUm4rTFhZRC93N2VGd0hSdmxIL2Rudm9BUTNWWmY5N04zditHL2FsQURKalRQK00xaUQvWVVGRC94Z01IQUN1Vms0QlFQZGdBS0NIUXdCQ04vUC9rOHhnL3hvR0lmOWlNMU1CbWRYUS93SzROdjhaMmdzQU1VUDIvaEtWU1A4TkdVZ0FLay9XQUNvRUpnRWJpNUQvbGJzWEFCS2toQUQxVkxqK2VNWm8vMzdhWUFBNGRlci9EUjNXL2tRdkN2K25tb1QrbUNiR0FFS3lXZi9JTHF2L0RXTlQvOUs3L2YrcUxTb0JpdEY4QU5haWpRQU01cHdBWmlSdy9nT1RRd0EwMTN2LzZhczIvMktKUGdEMzJpZi81OXJzQVBlL2Z3RERrbFFBcGJCYy94UFVYdjhSU3VNQVdDaVpBY2FUQWYvT1EvWCs4QVBhL3oyTjFmOWh0Mm9Bdytqci9sOVdtZ0RSTU0zK2R0SHgvL0I0M3dIVkhaOEFvMytUL3czYVhRQlZHRVQrUmhSUS83MEZqQUZTWWY3L1kyTy8vNFJVaGY5cjJuVC9jSG91QUdrUklBRENvRC8vUk40bkFkajlYQUN4YWMzL2xjbkRBQ3JoQy84b29uTUFDUWRSQUtYYTJ3QzBGZ0QrSFpMOC81TFA0UUcwaDJBQUg2TndBTEVMMi8rRkRNSCtLMDR5QUVGeGVRRTcyUWIvYmw0WUFYQ3Nid0FIRDJBQUpGVjdBRWVXRmYvUVNid0F3QXVuQWRYMUlnQUo1bHdBb280bi85ZGFHd0JpWVZrQVhrL1RBRnFkOEFCZjNINEJackRpQUNRZTRQNGpIMzhBNStoekFWVlRnZ0RTU2ZYL0w0OXkvMFJCeFFBN1NENy90NFd0L2wxNWR2ODdzVkgvNmtXdC84MkFzUURjOURNQUd2VFJBVW5lVGYrakNHRCtscFhUQUo3K3l3RTJmNHNBb2VBN0FBUnRGdi9lS2kzLzBKSm0vK3lPdXdBeXpmWC9Da3BaL2pCUGpnRGVUSUwvSHFZL0FPd01EZjh4dVBRQXUzRm1BTnBsL1FDWk9iYitJSllxQUJuR2tnSHQ4VGdBakVRRkFGdWtyUDlPa2JyK1F6VE5BTnZQZ1FGdGN4RUFObzg2QVJYNGVQK3oveDRBd2V4Qy93SC9CLy85d0REL0UwWFpBUVBXQVA5QVpaSUIzMzBqLyt0SnMvLzVwK0lBNGE4S0FXR2lPZ0JxY0tzQlZLd0YvNFdNc3YrRzlZNEFZVnA5LzdyTHVmL2ZUUmYvd0Z4cUFBL0djLy9abVBnQXE3SjQvK1NHTlFDd05zRUIrdnMxQU5VS1pBRWl4Mm9BbHgvMC9xemdWLzhPN1JmLy9WVWEvMzhuZFArc2FHUUErdzVHLzlUUWl2LzkwL29Bc0RHbEFBOU1lLzhsMnFEL1hJY1FBUXArY3Y5R0JlRC85L21OQUVRVVBBSHgwcjMvdzltN0FaY0RjUUNYWEs0QTV6NnkvOXUzNFFBWEZ5SC96YlZRQURtNCtQOUR0QUgvV250ZC95Y0FvdjlnK0RUL1ZFS01BQ0ovNVAvQ2lnY0JwbTY4QUJVUm13R2F2c2IvMWxBNy94SUhqd0JJSGVJQng5bjVBT2loUndHVnZza0EyYTlmL25HVFEvK0tqOGYvZjh3QkFCMjJVd0hPNXB2L3VzdzhBQXA5VmYvb1lCbi8vMW4zLzlYK3J3SG93VkVBSEN1Yy9neEZDQUNUR1BnQUVzWXhBSVk4SXdCMjloTC9NVmorL3VRVnV2KzJRWEFCMnhZQi94WitOUCs5TlRIL2NCbVBBQ1ovTi8vaVphUCswSVU5LzRsRnJnRytkcEgvUEdMYi85a045Zi82aUFvQVZQN2lBTWtmZlFId00vdi9INE9DL3dLS012L1gxN0VCM3d6dS8veVZPUDk4VzBUL1NINnEvbmYvWkFDQ2grai9Eayt5QVBxRHhRQ0t4dEFBZWRpTC9uY1NKUDhkd1hvQUVDb3QvOVh3NndIbXZxbi94aVBrL202dFNBRFczZkgvT0pTSEFNQjFUdjZOWGMvL2owR1ZBQlVTWXY5ZkxQUUJhcjlOQVA1VkNQN1dickQvU2EwVC9xREV4Ly90V3BBQXdheHgvOGliaVA3a1d0MEFpVEZLQWFUZDEvL1J2UVgvYWV3My95b2ZnUUhCLyt3QUx0azhBSXBZdS8vaVV1ei9VVVdYLzQ2K0VBRU5oZ2dBZjNvdy8xRkFuQUNyODRzQTdTUDJBSHFQd2Y3VWVwSUFYeW4vQVZlRVRRQUUxQjhBRVI5T0FDY3RyZjRZanRuL1h3a0cvK05UQmdCaU80TCtQaDRoQUFoejB3R2lZWUQvQjdnWC9uUWNxUC80aXBmL1l2VHdBTHAyZ2dCeStPdi9hYTNJQWFCOFIvOWVKS1FCcjBHUy8rN3hxdjdLeHNVQTVFZUsvaTMyYmYvQ05KNEFoYnV3QUZQOG12NVp2ZDMvcWtuOEFKUTZmUUFrUkRQK0trV3gvNmhNVnY4bVpNei9KalVqQUs4VFlRRGg3djMvVVZHSEFOSWIvLzdyU1dzQUNNOXpBRkovaUFCVVl4WCt6eE9JQUdTa1pRQlEwRTMvaE0vdC93OERELzhocG00QW5GOVYveVc1YndHV2FpUC9wcGRNQUhKWGgvK2Z3a0FBREhvZi8rZ0haZjZ0ZDJJQW1rZmMvcjg1TmYrbzZLRC80Q0JqLzlxY3BRQ1htYU1BMlEyVUFjVnhXUUNWSEtIK3p4Y2VBR21FNC84MjVsNy9oYTNNLzF5M25mOVlrUHorWmlGYUFKOWhBd0MxMnB2LzhISjNBR3JXTmYrbHZuTUJtRnZoLzFocUxQL1FQWEVBbHpSOEFMOGJuUDl1TnV3QkRoNm0veWQvendIbHh4d0F2T1M4L21TZDZ3RDIycmNCYXhiQi84NmdYd0JNNzVNQXo2RjFBRE9tQXY4MGRRcitTVGpqLzVqQjRRQ0VYb2ovWmIvUkFDQnI1Zi9HSzdRQlpOSjJBSEpEbWY4WFdCci9XWnBjQWR4NGpQK1Fjcy8vL0hQNi95TE9TQUNLaFgvL0NMSjhBVmRMWVFBUDVWeis4RU9ELzNaNzQvNlNlR2ova2RYL0FZRzdSdi9iZHpZQUFST3RBQzJXbEFINFUwZ0F5K21wQVk1ck9BRDMrU1lCTGZKUS94N3Bad0JnVWtZQUY4bHZBRkVuSHYraHQwNy93dW9oLzBUampQN1l6blFBUmh2ci8yaVFUd0NrNWwzKzFvZWNBSnE3OHY2OEZJUC9KRzJ1QUo5dzhRQUZicFVCSktYYUFLWWRFd0d5TGtrQVhTc2cvdmk5N1FCbW00MEF5VjNELy9HTC9mOFBiMkwvYkVHai9wdFB2djlKcnNIKzlpZ3cvMnRZQy83S1lWWC8vY3dTLzNIeVFnQnVvTUwrMEJLNkFGRVZQQUM4YUtmL2ZLWmgvdEtGamdBNDhvbitLVytDQUcrWE9nRnYxWTMvdDZ6eC95WUd4UCs1QjN2L0xndjJBUFZwZHdFUEFxSC9DTTR0L3hMS1N2OVRmSE1CMUkyZEFGTUkwZjZMRCtqL3JEYXQvakwzaEFEV3ZkVUFrTGhwQU4vKytBRC9rL0QvRjd4SUFBY3pOZ0M4R2JUKzNMUUEvMU9nRkFDanZmUC9PdEhDLzFkSlBBQnFHREVBOWZuY0FCYXRwd0IyQzhQL0UzN3RBRzZmSmY4N1VpOEF0THRXQUx5VTBBRmtKWVgvQjNEQkFJRzhuUDlVYW9IL2hlSEtBQTdzYi84b0ZHVUFyS3d4L2pNMlN2Lzd1YmovWFp2Zy83VDU0QUhtc3BJQVNEazIvckkrdUFCM3pVZ0F1ZS85L3owUDJnREVRemovNmlDckFTN2I1QURRYk9yL0ZEL28vNlUxeHdHRjVBWC9OTTFyQUVydWpQK1duTnYrNzZ5eS8vdTkzLzRnanRQLzJnK0tBZkhFVUFBY0pHTCtGdXJIQUQzdDNQLzJPU1VBamhHTy81MCtHZ0FyN2wvK0E5a0cvOVVaOEFFbjNLNy9tczB3L2hNTndQLzBJamIrakJDYkFQQzFCZjZid1R3QXBvQUUveVNST1ArVzhOc0FlRE9SQUZLWktnR003SklBYTF6NEFiMEtBd0EvaVBJQTB5Y1lBQlBLb1FHdEc3ci8wc3p2L2luUm92KzIvcC8vckhRMEFNTm4zdjdOUlRzQU5SWXBBZG93d2dCUTB2SUEwcnpQQUx1aG9mN1lFUUVBaU9GeEFQcTRQd0RmSG1MK1RhaWlBRHMxcndBVHlRci9pK0RDQUpQQm12L1V2UXorQWNpdS96S0ZjUUZlczFvQXJiYUhBRjZ4Y1FBcldkZi9pUHhxLzN1R1UvNEY5VUwvVWpFbkFkd0M0QUJoZ2JFQVRUdFpBRDBkbXdITHE5ei9YRTZMQUpFaHRmK3BHSTBCTjVhekFJczhVUC9hSjJFQUFwTnIveno0U0FDdDVpOEJCbE8yL3hCcG92NkoxRkgvdExpR0FTZmVwUC9kYWZzQjczQjlBRDhIWVFBL2FPUC9sRG9NQUZvODRQOVUxUHdBVDllb0FQamR4d0Z6ZVFFQUpLeDRBQ0NpdS84NWF6SC9reW9WQUdyR0t3RTVTbGNBZnN0Ui80R0h3d0NNSDdFQTNZdkNBQVBlMXdDRFJPY0FzVmF5L255WHRBQzRmQ1lCUnFNUkFQbjd0UUVxTitNQTRxRXNBQmZzYmdBemxZNEJYUVhzQU5xM2F2NURHRTBBS1BYUi85NTVtUUNsT1I0QVUzMDhBRVltVWdIbEJyd0FiZDZkL3pkMlAvL05sN29BNHlHVi8vNnc5Z0hqc2VNQUltcWovckFyVHdCcVgwNEJ1ZkY2LzdrT1BRQWtBY29BRGJLaS8vY0xoQUNoNWx3QlFRRzUvOVF5cFFHTmtrRC9udkxhQUJXa2ZRRFZpM29CUTBkWEFNdWVzZ0dYWENzQW1HOEYveWNENy8vWi8vci9zRDlILzByMVRRSDZyaEwvSWpIai8vWXUrLythSXpBQmZaMDkvMm9rVHY5aDdKa0FpTHQ0LzNHR3EvOFQxZG4rMkY3Ui8vd0ZQUUJlQThvQUF4cTMvMEMvSy84ZUZ4VUFnWTFOLzJaNEJ3SENUSXdBdks4MC94RlJsQURvVmpjQjRUQ3NBSVlxS3YvdU1pOEFxUkwrQUJTVFYvOE93Ky8vUmZjWEFPN2xnUCt4TVhBQXFHTDcvM2xIK0FEekNKSCs5dU9aLzl1cHNmNzdpNlgvREtPNS82UW9xLytabnh2KzgyMWIvOTRZY0FFUzF1Y0FhNTIxL3NPVEFQL0NZMmovV1l5Ky83RkNmdjVxdVVJQU1kb2ZBUHl1bmdDOFQrWUI3aW5nQU5UcUNBR0lDN1VBcG5WVC8wVERYZ0F1aE1rQThKaFlBS1E1UmY2ZzRDci9POWRELzNmRGpmOGt0SG4renk4SS82N1Mzd0JseFVULy8xS05BZnFKNlFCaFZvVUJFRkJGQUlTRG53QjBYV1FBTFkyTEFKaXNuZjlhSzFzQVI1a3VBQ2NRY1AvWmlHSC8zTVlaL3JFMU1RRGVXSWIvZ0E4OEFNL0FxZi9BZE5IL2FrN1RBY2pWdC84SERIciszc3M4L3lGdXgvNzdhblVBNU9FRUFYZzZCLy9kd1ZUK2NJVWJBTDNJeWYrTGg1WUE2amV3L3oweVFRQ1liS24vM0ZVQi8zQ0g0d0NpR3JvQXoyQzUvdlNJYXdCZG1USUJ4bUdYQUc0TFZ2K1BkYTcvYzlUSUFBWEt0d0R0cEFyK3VlOCtBT3g0RXY1aWUyUC9xTW5DL2k3cTFnQy9oVEgvWTZsM0FMNjdJd0Z6RlMzLytZTklBSEFHZS8vV01iWCtwdWtpQUZ6Rlp2Nzk1TTMvQXp2SkFTcGlMZ0RiSlNQL3FjTW1BRjU4d1FHY0s5OEFYMGlGL25qT3Z3QjZ4ZS8vc2J0UC8vNHVBZ0g2cDc0QVZJRVRBTXR4cHYvNUg3MytTSjNLLzlCSFNmL1BHRWdBQ2hBU0FkSlJUUDlZME1EL2Z2TnIvKzZOZVAvSGVlci9pUXc3L3lUY2UvK1VzenorOEF3ZEFFSUFZUUVrSGliL2N3RmQvMkJuNS8vRm5qc0J3S1R3QU1yS09mOFlyakFBV1UyYkFTcE0xd0QwbCtrQUZ6QlJBTzkvTlA3amdpWC8rSFJkQVh5RWRnQ3Qvc0FCQnV0VC8yNnY1d0g3SExZQWdmbGQvbFM0Z0FCTXRUNEFyNEM2QUdRMWlQNXRIZUlBM2VrNkFSUmpTZ0FBRnFBQWhnMFZBQWswTi84UldZd0FyeUk3QUZTbGQvL2c0dXIvQjBpbS8zdHovd0VTMXZZQStnZEhBZG5jdVFEVUkwei9KbjJ2QUwxaDBnQnk3aXovS2J5cC9pMjZtZ0JSWEJZQWhLREJBSG5RWXY4TlVTei95NXhTQUVjNkZmL1Fjci8rTWlhVEFKcll3d0JsR1JJQVBQclgvK21FNi85bnI0NEJFQTVjQUkwZmJ2N3U4UzMvbWRudkFXR29MLy81VlJBQkhLOCsvem4rTmdEZTUzNEFwaTExL2hLOVlQL2tURElBeVBSZUFNYVllQUZFSWtYL0RFR2cvbVVUV2dDbnhYai9SRGE1L3luYXZBQnhxREFBV0dtOUFScFNJUCs1WGFRQjVQRHQvMEsyTlFDcnhWei9hd25wQWNkNGtQOU9NUXIvYmFwcC8xb0VILzhjOUhIL1Nqb0xBRDdjOXY5NW1zaitrTkt5LzM0NWdRRXIrZzcvWlc4Y0FTOVc4Zjg5UnBiL05Va0YveDRhbmdEUkdsWUFpdTFLQUtSZnZBQ09QQjMrb25UNC83dXZvQUNYRWhBQTBXOUIvc3VHSi85WWJESC9neHBILzkwYjEvNW9hVjMvSCt3Zi9vY0EwLytQZjI0QjFFbmxBT2xEcC83REFkRC9oQkhkL3pQWldnQkQ2ekwvMzlLUEFMTTFnZ0hwYXNZQTJhM2MvM0RsR1Ardm1sMytSOHYyL3pCQ2hmOERpT2IvRjkxeC91dHYxUUNxZUYvKys5MENBQzJDbnY1cFh0bi84alMwL3RWRUxmOW9KaHdBOUo1TUFLSElZUC9QTlEzL3UwT1VBS28yK0FCM29yTC9VeFFMQUNvcXdBR1NuNlAvdCtodkFFM2xGZjlITlk4QUcwd2lBUGFJTC8vYko3Yi9YT0RKQVJPT0R2OUZ0dkgvbzNiMUFBbHRhZ0dxdGZmL1RpL3UvMVRTc1AvVmE0c0FKeVlMQUVnVmxnQklna1VBelUyYi9vNkZGUUJIYjZ6KzRpbzcvN01BMXdFaGdQRUE2dndOQWJoUENBQnVIa24vOW8yOUFLclAyZ0ZLbWtYL2l2WXgvNXNnWkFCOVNtbi9XbFU5L3lQbHNmOCtmY0gvbVZhOEFVbDQxQURSZS9iK2g5RW0vNWM2TEFGY1JkYi9EZ3hZLy95WnB2Lzl6M0QvUEU1VC8rTjhiZ0MwWVB6L05YVWgvcVRjVXY4cEFSdi9KcVNtLzZSanFmNDlrRWIvd0tZU0FHdjZRZ0RGUVRJQUFiTVMvLzlvQWY4cm1TUC9VRytvQUc2dnFBQXBhUzMvMnc3Ti82VHBqUDRyQVhZQTZVUERBTEpTbi8rS1Yzci8xTzVhLzVBamZQNFpqS1FBKzljcy9vVkdhLzlsNDFEK1hLazNBTmNxTVFCeXRGWC9JZWdiQWF6VkdRQStzSHYrSUlVWS8rRy9QZ0JkUnBrQXRTcG9BUmEvNFAvSXlJei8rZW9sQUpVNWpRRERPTkQvL29KRy95Q3Q4UDhkM01jQWJtUnovNFRsK1FEazZkLy9KZGpSL3JLeDBmKzNMYVgrNEdGeUFJbGhxUC9oM3F3QXBRMHhBZExyelAvOEJCeitScUNYQU9pK05QNVQrRjMvUHRkTkFhK3ZzLytnTWtJQWVURFFBRCtwMGY4QTBzZ0E0THNzQVVtaVVnQUpzSS8vRTB6Qi94MDdwd0VZSzVvQUhMNitBSTI4Z1FEbzY4di82Z0J0L3paQm53QThXT2ovZWYyVy92enBnLy9HYmlrQlUwMUgvOGdXTy81cS9mTC9GUXpQLysxQ3ZRQmF4c29CNGF4L0FEVVd5Z0E0NW9RQUFWYTNBRzIrS2dEelJLNEJiZVNhQU1peGVnRWpvTGYvc1RCVi8xcmFxZi80bUU0QXl2NXVBQVkwS3dDT1lrSC9QNUVXQUVacVhRRG9pbXNCYnJNOS85T0IyZ0h5MFZ3QUkxclpBYmFQYXY5MFpkbi9jdnJkLzYzTUJnQThscU1BU2F3cy8rOXVVUC90VEpuK29ZejVBSlhvNVFDRkh5ai9ycVIzQUhFejFnQ0I1QUwrUUNMekFHdmo5UCt1YXNqL1ZKbEdBVElqRUFENlN0ais3TDFDLzVuNURRRG1zZ1QvM1NudUFIYmplZjllVjR6Ky9uZGNBRW52OXY1MVY0QUFFOU9SLzdFdS9BRGxXL1lCUllEMy84cE5OZ0VJQ3duL21XQ21BTm5XcmYrR3dBSUJBTThBQUwydWF3R01obVFBbnNIekFiWm1xd0RybWpNQWpnVjcvenlvV1FIWkRsei9FOVlGQWRPbi9nQXNCc3IrZUJMcy93OXh1UCs0MzRzQUtMRjMvclo3V3Yrd3BiQUE5MDNDQUJ2cWVBRG5BTmIvT3ljZUFIMWprZitXUkVRQmpkNzRBSmw3MHY5dWY1ai81U0hXQVlmZHhRQ0pZUUlBREkvTS8xRXB2QUJ6VDRML1hnT0VBSml2dS85OGpRci9mc0N6L3d0bnhnQ1ZCaTBBMjFXN0FlWVNzdjlJdHBnQUE4YTQvNEJ3NEFGaG9lWUEvbU1tL3pxZnhRQ1hRdHNBTzBXUC83bHcrUUIzaUMvL2U0S0VBS2hIWC85eHNDZ0I2TG10QU05ZGRRRkVuV3ovWmdXVC9qRmhJUUJaUVcvKzl4NmovM3paM1FGbSt0Z0F4cTVML2prM0VnRGpCZXdCNWRXdEFNbHQyZ0V4NmU4QUhqZWVBUm15YWdDYmI3d0JYbjZNQU5jZjdnRk44QkFBMWZJWkFTWkhxQUROdWwzK01kT00vOXNBdFArR2RxVUFvSk9HLzI2NkkvL0c4eW9BODVKM0FJYnJvd0VFOFlmL3dTN0IvbWUwVC8vaEJMais4bmFDQUpLSHNBSHFieDRBUlVMVi9pbGdld0I1WGlyL3NyL0QveTZDS2dCMVZBai82VEhXL3U1NmJRQUdSMWtCN05ON0FQUU5NUDUzbEE0QWNoeFcvMHZ0R2YrUjVSRCtnV1ExLzRhV2VQNm9uVElBRjBoby8rQXhEZ0QvZXhiL2w3bVgvNnBRdUFHR3RoUUFLV1JsQVpraEVBQk1tbThCVnM3cS84Q2dwUDZsZTEzL0FkaWsva01Sci8rcEN6di9uaWs5LzBtOER2L0RCb24vRnBNZC94Um5BLy8yZ3VQL2VpaUFBT0l2R1A0akpDQUFtTHEzLzBYS0ZBRERoY01BM2pQM0FLbXJYZ0czQUtEL1FNMFNBWnhURC8vRk92bisrMWx1L3pJS1dQNHpLOWdBWXZMR0FmV1hjUUNyN01JQnhSL0gvK1ZSSmdFcE94UUEvV2ptQUpoZER2LzI4cEwrMXFudy8vQm1iUDZncCt3QW10cThBSmJweXY4YkUvb0JBa2VGLzY4TVB3R1J0OFlBYUhoei80TDc5d0FSMUtmL1BudUUvL2RrdlFDYjM1Z0FqOFVoQUpzN0xQK1dYZkFCZndOWC8xOUh6d0duVlFIL3ZKaDAvd29YRndDSncxMEJObUpoQVBBQXFQK1V2SDhBaG11WEFFejlxd0JhaE1BQWtoWTJBT0JDTnY3bXV1WC9KN2JFQUpUN2d2OUJnMnorZ0FHZ0FLa3hwLzdIL3BULyt3YURBTHYrZ2Y5VlVqNEFzaGM2Ly82RUJRQ2sxU2NBaHZ5Uy9pVTFVZitiaGxJQXphZnUvMTR0dFArRUtLRUEvbTl3QVRaTDJRQ3o1dDBCNjE2Ly94ZnpNQUhLa2N2L0ozWXEvM1dOL1FEK0FONEFLL3N5QURhcDZnRlFSTkFBbE12ei9wRUhod0FHL2dBQS9MbC9BR0lJZ2Y4bUkwai8weVRjQVNnYVdRQ29RTVgrQTk3di93SlQxLzYwbjJrQU9uUENBTHAwYXYvbDk5di9nWGJCQU1xdXR3R21vVWdBeVd1VC91MklTZ0RwNW1vQmFXK29BRURnSGdFQjVRTUFacGV2LzhMdTVQLysrdFFBdSsxNUFFUDdZQUhGSGdzQXQxL01BTTFaaWdCQTNTVUIvOThlLzdJdzAvL3h5RnIvcDlGZy96bUMzUUF1Y3NqL1BiaENBRGUyR1A1dXRpRUFxNzdvLzNKZUh3QVMzUWdBTCtmK0FQOXdVd0IyRDlmL3JSa28vc0RCSC8vdUZaTC9xOEYyLzJYcU5mNkQxSEFBV2NCckFRalFHd0MxMlEvLzU1WG9BSXpzZmdDUUNjZi9ERSsxL3BPMnl2OFRiYmIvTWRUaEFFcWp5d0N2NlpRQUduQXpBTUhCQ2Y4UGgva0FsdU9DQU13QTJ3RVk4czBBN3RCMS94YjBjQUFhNVNJQUpWQzgveVl0enY3d1d1SC9IUU12L3lyZ1RBQzY4NmNBSUlRUC93VXpmUUNMaHhnQUJ2SGJBS3psaGYvMjFqSUE1d3ZQLzc5K1V3RzBvNnIvOVRnWUFiS2swLzhERU1vQllqbDIvNDJEV2Y0aE14Z0E4NVZiLy8wMERnQWpxVVArTVI1WS83TWJKUCtsakxjQU9yMlhBRmdmQUFCTHFVSUFRbVhIL3hqWXh3RjV4QnIvRGsvTC92RGlVZjllSEFyL1U4SHcvOHpCZy85ZUQxWUEyaWlkQURQQjBRQUE4ckVBWnJuM0FKNXRkQUFtaDFzQTM2K1ZBTnhDQWY5V1BPZ0FHV0FsLytGNm9nSFh1NmovbnAwdUFEaXJvZ0RvOEdVQmVoWUpBRE1KRmY4MUdlNy8yUjdvL24ycGxBQU42R1lBbEFrbEFLVmhqUUhrZ3lrQTNnL3ovLzRTRVFBR1BPMEJhZ054QUR1RXZRQmNjQjRBYWREVkFEQlVzLys3ZWVmK0c5aHQvNkxkYS81Sjc4UC8raDg1LzVXSFdmKzVGM01CQTZPZC94SncrZ0FaT2J2L29XQ2tBQzhROHdBTWpmditRK3E0L3lrU29RQ3ZCbUQvb0t3MC9oaXd0Ly9Hd1ZVQmZIbUovNWN5Y3YvY3l6ei96KzhGQVFBbWEvODM3bDcrUnBoZUFOWGNUUUY0RVVYL1ZhUysvOHZxVVFBbU1TWCtQWkI4QUlsT01mNm85ekFBWDZUOEFHbXBod0Q5NUlZQVFLWkxBRkZKRlAvUDBnb0E2bXFXLzE0aVd2Lytuem4rM0lWakFJdVR0UDRZRjdrQUtUa2UvNzFoVEFCQnU5Ly80S3dsL3lJK1h3SG5rUEFBVFdwKy9rQ1lXd0FkWXBzQTR2czEvK3JUQmYrUXk5Ny9wTERkL2dYbkdBQ3plczBBSkFHRy8zMUdsLzVoNVB3QXJJRVgvakJhMGYrVzRGSUJWSVllQVBIRUxnQm5jZXIvTG1WNS9paDgrditITGZMK0NmbW8vNHhzZy8rUG82c0FNcTNILzFqZWp2L0lYNTRBanNDai93ZDFod0J2ZkJZQTdBeEIva1FtUWYvanJ2NEE5UFVtQVBBeTBQK2hQL29BUE5IdkFIb2pFd0FPSWViK0FwOXhBR29VZi8va3pXQUFpZEt1L3JUVWtQOVpZcG9CSWxpTEFLZWljQUZCYnNVQThTV3BBRUk0Zy84S3lWUCtoZjI3LzdGd0xmN0Urd0FBeFBxWC8rN28xditXMGMwQUhQQjJBRWRNVXdIc1kxc0FLdnFEQVdBU1FQOTIzaU1BY2RiTC8zcDN1UDlDRXlRQXpFRDVBSkpaaXdDR1BvY0JhT2xsQUx4VUdnQXgrWUVBME5aTC84K0NUZjl6citzQXF3S0ovNitSdWdFMzlZZi9tbGExQVdRNjl2OXR4enovVXN5Ry85Y3g1Z0dNNWNELzNzSDcvMUdJRC8remxhTC9GeWNkL3dkZlMvNi9VZDRBOFZGYS8yc3h5Zi8wMDUwQTNveVYvMEhiT1A2OTlsci9zanVkQVREYk5BQmlJdGNBSEJHNy82K3BHQUJjVDZILzdNakNBWk9QNmdEbDRRY0J4YWdPQU9zek5RSDllSzRBeFFhby84cDFxd0NqRmM0QWNsVmEvdzhwQ3YvQ0UyTUFRVGZZL3FLU2RBQXl6dFQvUUpJZC81NmVnd0ZrcFlML3JCZUIvMzAxQ2Y4UHdSSUJHakVMLzdXdXlRR0h5UTcvWkJPVkFOdGlUd0FxWTQvK1lBQXcvOFg1VS81b2xVLy82MjZJL2xLQUxQOUJLU1QrV05NS0FMdDV1d0JpaHNjQXE3eXovdElMN3Y5Q2U0TCtOT285QURCeEYvNEdWbmovZDdMMUFGZUJ5UUR5amRFQXluSlZBSlFXb1FCbnd6QUFHVEdyLzRwRGdnQzJTWHIrbEJpQ0FOUGxtZ0FnbTU0QVZHazlBTEhDQ2YrbVdWWUJObE83QVBrb2RmOXRBOWYvTlpJc0FUOHZzd0RDMkFQK0RsU0lBSWl4RGY5STg3ci9kUkY5LzlNNjAvOWRUOThBV2xqMS80dlJiLzlHM2k4QUN2WlAvOGJac2dEajRRc0JUbjZ6L3o0cmZnQm5sQ01BZ1FpbC92WHdsQUE5TTQ0QVVkQ0dBQStKYy8vVGQrei9uL1g0L3dLR2lQL21pem9Cb0tUK0FISlZqZjh4cHJiL2tFWlVBVlcyQndBdU5WMEFDYWFoL3plaXN2OHR1THdBa2h3cy9xbGFNUUI0c3ZFQkRudC8vd2Z4eHdHOVFqTC94bzlsL3IzemgvK05HQmorUzJGWEFIYjdtZ0h0TnB3QXE1TFAvNFBFOXYrSVFIRUJsK2c1QVBEYWN3QXhQUnYvUUlGSkFmeXBHLzhvaEFvQldzbkIvL3g1OEFHNnppa0FLOFpoQUpGa3R3RE0yRkQrckpaQkFQbmx4UDVvZTBuL1RXaGcvb0swQ0FCb2V6a0EzTXJsLzJiNTB3QldEdWovdGs3UkFPL2hwQUJxRFNEL2VFa1IvNFpENlFCVC9yVUF0K3h3QVRCQWcvL3gyUFAvUWNIaUFNN3haUDVraHFiLzdjckZBRGNOVVFBZ2ZHYi9LT1N4QUhhMUh3SG5vSWIvZDd2S0FBQ09QUCtBSnIzL3BzbVdBTTk0R2dFMnVLd0FEUExNL29WQzVnQWlKaDhCdUhCUUFDQXpwZjYvOHpjQU9rbVMvcHVuemY5a2FKai94ZjdQLzYwVDl3RHVDc29BNzVmeUFGNDdKLy93SFdiL0NseWEvK1ZVMi8raGdWQUEwRnJNQWZEYnJ2K2VacEVCTmJKTS96UnNxQUZUM21zQTB5UnRBSFk2T0FBSUhSWUE3YURIQUtyUm5RQ0pSeThBajFZZ0FNYnlBZ0RVTUlnQlhLeTZBT2FYYVFGZ3YrVUFpbEMvL3ZEWWd2OWlLd2IrcU1ReEFQMFNXd0dRU1hrQVBaSW5BVDlvR1ArNHBYRCtmdXRpQUZEVll2OTdQRmYvVW96MUFkOTRyZjhQeG9ZQnpqenZBT2ZxWFA4aDdoUC9wWEdPQWJCM0pnQ2dLNmIrNzF0cEFHczl3Z0VaQkVRQUQ0c3pBS1NFYXY4aWRDNytxRi9GQUluVUZ3QkluRG9BaVhCRi9wWnBtdi9zeVowQUY5U2EvNGhTNC83aU85My9YNVhBQUZGMk5QOGhLOWNCRHBOTC8xbWNlZjRPRWs4QWs5Q0xBWmZhUHYrY1dBZ0IwcmhpL3hTdmUvOW1VK1VBM0VGMEFaYjZCUDljanR6L0l2ZEMvOHpocy82WFVaY0FSeWpzLzRvL1BnQUdUL0QvdDdtMUFIWXlHd0EvNDhBQWUyTTZBVExnbS84UjRkLyszT0JOL3c0c2V3R05nSzhBK05USUFKWTd0LytUWVIwQWxzeTFBUDBsUndDUlZYY0Ftc2k2QUFLQStmOVRHSHdBRGxlUEFLZ3o5UUY4bCtmLzBQREZBWHkrdVFBd092WUFGT25vQUgwU1l2OE4vaC8vOWJHQy8yeU9Jd0NyZmZMK2pBd2kvNldob2dET3pXVUE5eGtpQVdTUk9RQW5SamtBZHN6TC8vSUFvZ0NsOUI0QXhuVGlBSUJ2bWYrTU5yWUJQSG9QLzVzNk9RRTJNc1lBcTlNZC8ydUtwLyt0YThmL2JhSEJBRmxJOHYvT2Mxbi8rdjZPL3JIS1h2OVJXVElBQjJsQy94bisvLzdMUUJmL1Q5NXMveWY1U3dEeGZESUE3NWlGQU4zeGFRQ1RsMklBMWFGNS92SXhpUURwSmZuK0tyY2JBTGgzNXYvWklLUC8wUHZrQVlrK2cvOVBRQW4rWGpCeEFCR0tNdjdCL3hZQTl4TEZBVU0zYUFBUXpWLy9NQ1ZDQURlY1B3RkFVa3IveURWSC91OURmUUFhNE40QTM0bGQveDdneXY4SjNJUUF4aWJyQVdhTlZnQThLMUVCaUJ3YUFPa2tDUDdQOHBRQXBLSS9BRE11NFA5eU1FLy9DYS9pQU40RHdmOHZvT2ovLzExcC9nNHE1Z0FhaWxJQjBDdjBBQnNuSnY5aTBILy9RSlcyL3dYNjBRQzdQQnorTVJuYS82bDB6ZjkzRW5nQW5IU1QvNFExYmY4TkNzb0FibE9uQUozYmlmOEdBNEwvTXFjZS96eWZMLytCZ0ozK1hnTzlBQU9tUkFCVDM5Y0FsbHJDQVErb1FRRGpVelAvemF0Qy96YTdQQUdZWmkzL2Q1cmhBUEQzaUFCa3hiTC9pMGZmLzh4U0VBRXB6aXIvbk1EZC85aDc5UC9hMnJuL3U3cnYvL3lzb1AvRE5CWUFrSzYxL3J0a2MvL1RUckQvR3dmQkFKUFZhUDlheVFyL1VIdENBUllodWdBQkIyUCtIczRLQU9YcUJRQTFIdElBaWdqYy9rYzNwd0JJNFZZQmRyNjhBUDdCWlFHcithei9YcDYzL2wwQ2JQK3dYVXovU1dOUC8wcEFnZjcyTGtFQVkvRi8vdmFYWnY4c05kRCtPMmJxQUpxdnBQOVk4aUFBYnlZQkFQKzJ2djl6c0EvK3FUeUJBSHJ0OFFCYVREOEFQa3A0LzNyRGJnQjNCTElBM3ZMU0FJSWhMdjZjS0NrQXA1SndBVEdqYi85NXNPc0FUTThPL3dNWnhnRXA2OVVBVlNUV0FURmNiZi9JR0I3K3FPekRBSkVuZkFIc3c1VUFXaVM0LzBOVnF2OG1JeHIrZzN4RS8rK2JJLzgyeWFRQXhCWjEvekVQelFBWTRCMEJmbkdRQUhVVnRnRExuNDBBMzRkTkFMRG1zUCsrNWRmL1l5VzEvek1WaXY4WnZWbi9NVENsL3BndDl3Q3FiTjRBVU1vRkFCdEZaLzdNRm9IL3RQdysvdElCVy8rU2J2Ny8yNkljQU4vODFRRTdDQ0VBemhEMEFJSFRNQUJyb05BQWNEdlJBRzFOMlA0aUZibi85bU00LzdPTEUvKzVIVEwvVkZrVEFFcjZZdi9oS3NqL3dObk4vOUlRcHdCamhGOEJLK1k1QVA0THkvOWp2RC8vZDhINy9sQnBOZ0RvdGIwQnQwVncvOUNycGY4dmJiVC9lMU9sQUpLaU5QK2FDd1QvbCtOYS81S0pZZjQ5NlNuL1hpbzMvMnlrN0FDWVJQNEFDb3lEL3dwcVQvN3pub2tBUTdKQy9yRjd4djhQUGlJQXhWZ3EvNVZmc2YrWUFNYi9sZjV4LytGYW8vOTkyZmNBRWhIZ0FJQkNlUDdBR1FuL010M05BREhVUmdEcC82UUFBdEVKQU4wMDIvNnM0UFQvWGpqT0FmS3pBdjhmVzZRQjVpNksvNzNtM0FBNUx6My9id3VkQUxGYm1BQWM1bUlBWVZkK0FNWlprZituVDJzQStVMmdBUjNwNXYrV0ZWYitQQXZCQUpjbEpQNjVsdlAvNU5SVEFheVh0QURKcVpzQTlEenFBSTdyQkFGRDJqd0F3SEZMQVhUenovOUJySnNBVVI2Yy8xQklJZjRTNTIzL2ptc1YvbjBhaFArd0VEdi9sc2s2QU02cHlRRFFlZUlBS0t3Ty81WTlYdjg0T1p6L2pUeVIveTFzbGYvdWtadi8wVlVmL3NBTTBnQmpZbDMrbUJDWEFPRzUzQUNONnl6L29Ld1Yva2NhSC84TlFGMytIRGpHQUxFKytBRzJDUEVBcG1XVS8wNVJoZitCM3RjQnZLbUIvK2dIWVFBeGNEei8yZVg3QUhkc2lnQW5FM3YrZ3pIckFJUlVrUUNDNXBUL0dVcTdBQVgxTnYrNTIvRUJFc0xrLy9IS1pnQnBjY29BbSt0UEFCVUpzditjQWU4QXlKUTlBSFAzMHY4eDNZY0FPcjBJQVNNdUNRQlJRUVgvTko2NS8zMTBMdjlLakEzLzBseXMvcE1YUndEWjRQMytjMnkwLzVFNk1QN2JzUmovblA4OEFacVQ4Z0Q5aGxjQU5VdmxBREREM3Y4ZnJ6TC9uTko0LzlBajN2OFMrTE1CQWdwbC81M0MrUCtlekdYL2FQN0YvMDgrQkFDeXJHVUJZSkw3LzBFS25BQUNpYVgvZEFUbkFQTFhBUUFUSXgzL0s2RlBBRHVWOWdIN1FyQUF5Q0VELzFCdWp2L0RvUkVCNURoQy8zc3ZrZjZFQktRQVE2NnNBQm45Y2dCWFlWY0IrdHhVQUdCYnlQOGxmVHNBRTBGMkFLRTA4Zi90ckFiL3NMLy8vd0ZCZ3Y3ZnZ1WUFaZjNuLzVJamJRRDZIVTBCTVFBVEFIdGFtd0VXVmlELzJ0VkJBRzlkZndBOFhhbi9DSCsyQUJHNkR2NzlpZmIvMVJrdy9renVBUC80WEViL1krQ0xBTGdKL3dFSHBOQUF6WVBHQVZmV3h3Q0MxbDhBM1pYZUFCY21xLzdGYnRVQUszT00vdGV4ZGdCZ05FSUJkWjd0QUE1QXR2OHVQNjcvbmwrKy8rSE5zZjhyQlk3L3JHUFUvL1M3a3dBZE01bi81SFFZL2g1bHp3QVQ5cGIvaHVjRkFIMkc0Z0ZOUVdJQTdJSWgvd1Z1UGdCRmJILy9CM0VXQUpFVVUvN0NvZWYvZzdVOEFOblJzZi9sbE5UK0E0TzRBSFd4dXdFY0RoLy9zR1pRQURKVWwvOTlIemIvRloyRi94T3ppd0hnNkJvQUluV3EvNmY4cS85SmpjNytnZm9qQUVoUDdBSGM1UlQvS2NxdC8yTk03di9HRnVEL2JNYkQveVNOWUFIc25qdi9hbVJYQUc3aUFnRGo2dDRBbWwxMy8wcHdwUDlEV3dML0ZaRWgvMmJXaWYrdjVtZitvL2FtQUYzM2RQNm40QnovM0FJNUFhdk9WQUI3NUJIL0czaDNBSGNMa3dHMEwrSC9hTWk1L3FVQ2NnQk5UdFFBTFpxeC94akVlZjVTbmJZQVdoQytBUXlUeFFCZjc1ai9DK3RIQUZhU2QvK3NodFlBUElQRUFLSGhnUUFmZ25qK1g4Z3pBR25uMHY4NkNaVC9LNmpkLzN6dGpnREcwekwrTHZWbkFLVDRWQUNZUnREL3RIV3hBRVpQdVFEelNpQUFsWnpQQU1YRW9RSDFOZThBRDEzMi9vdndNZi9FV0NUL29pWjdBSURJblFHdVRHZi9yYWtpL3RnQnEvOXlNeEVBaU9UQ0FHNldPUDVxOXA4QUU3aFAvNVpOOFArYlVLSUFBRFdwL3gyWFZnQkVYaEFBWEFkdS9tSjFsZi81VGViLy9RcU1BTlo4WFA0amR1c0FXVEE1QVJZMXBnQzRrRDMvcy8vQ0FOYjRQZjQ3YnZZQWVSVlIvcVlENUFCcVFCci9SZWlHLy9MY05mNHUzRlVBY1pYMy8yR3paLysrZndzQWg5RzJBRjgwZ1FHcWtNNy9lc2pNLzZoa2tnQThrSlgrUmp3b0FIbzBzZi8yMDJYL3J1MElBQWN6ZUFBVEg2MEFmdStjLzQrOXl3REVnRmovNllYaS94NTlyZi9KYkRJQWUyUTcvLzZqQXdIZGxMWC8xb2c1L3Q2MGlmL1BXRGIvSENINy8wUFdOQUhTMEdRQVVhcGVBSkVvTlFEZ2IrZitJeHowLytMSHcvN3VFZVlBMmRtay9xbWQzUURhTHFJQng4K2ovMnh6b2dFT1lMdi9kanhNQUxpZm1BRFI1MGYrS3FTNi83cVpNLzdkcTdiL29vNnRBT3N2d1FBSGl4QUJYNlJBL3hEZHBnRGJ4UkFBaEIwcy8yUkZkZjg4NjFqK0tGR3RBRWUrUGYrN1dKMEE1d3NYQU8xMXBBRGhxTi8vbW5KMC82T1k4Z0VZSUtvQWZXSngvcWdUVEFBUm5keittelFGQUJOdm9mOUhXdnovclc3d0FBckdlZi85Ly9EL1FudlNBTjNDMS81NW94SC80UWRqQUw0eHRnQnpDWVVCNkJxSy85VkVoQUFzZDNyL3MySXpBSlZhYWdCSE11Yi9DcGwyLzdGR0dRQ2xWODBBTjRycUFPNGVZUUJ4bTg4QVlwbC9BQ0pyMi81MWNxei9UTFQvL3ZJNXMvL2RJcXorT0tJeC8xTUQvLzl4M2IzL3ZCbmsvaEJZV2Y5SEhNYitGaEdWLy9ONS92OXJ5bVAvQ2M0T0Fkd3ZtUUJyaVNjQllUSEMvNVV6eGY2Nk9ndi9heXZvQWNnR0R2KzFoVUgrM2VTci8zcys1d0hqNnJQL0lyM1UvdlM3K1FDK0RWQUJnbGtCQU4rRnJRQUozc2IvUW45S0FLZllYZiticU1ZQlFwRUFBRVJtTGdHc1dwb0EySUJMLzZBb013Q2VFUnNCZlBBeEFPektzUCtYZk1EL0pzRytBRisyUFFDamszei8vNlV6L3h3b0VmN1hZRTRBVnBIYS9oOGt5djlXQ1FVQWJ5bkkvKzFzWVFBNVBpd0FkYmdQQVMzeGRBQ1lBZHovbmFXOEFQb1Bnd0U4TEgzL1FkejcvMHN5dUFBMVdvRC81MURDLzRpQmZ3RVZFcnYvTFRxaC8wZVRJZ0N1K1F2K0k0MGRBTzlFc2Y5emJqb0E3cjZ4QVZmMXB2KytNZmYva2xPNC82ME9KLytTMTJnQWp0OTRBSlhJbS8vVXo1RUJFTFhaQUswZ1YvLy9JN1VBZDkraEFjamZYdjlHQnJyL3dFTlYvektwbUFDUUdudi9PUE96L2hSRWlBQW5qTHorL2RBRi84aHpod0Vyck9YL25HaTdBSmY3cHdBMGh4Y0FsNWxJQUpQRmEvNlVuZ1gvN28vT0FINlppZjlZbU1YK0IwU25BUHlmcGYvdlRqYi9HRDgzL3liZVhnRHR0d3ovenN6U0FCTW45djRlU3VjQWgyd2RBYk56QUFCMWRuUUJoQWI4LzVHQm9RRnBRNDBBVWlYaS8rN2k1UC9NMW9IK29udGsvN2w1NmdBdGJPY0FRZ2c0LzRTSWdBQ3M0RUwrcjUyOEFPYmY0djd5MjBVQXVBNTNBVktpT0FCeWV4UUFvbWRWL3pIdlkvNmNoOWNBYi8rbi9pZkUxZ0NRSms4QithaDlBSnRoblA4WE5Odi9saGFRQUN5VnBmOG9mN2NBeEUzcC8zYUIwditxaCtiLzFuZkdBT253SXdEOU5BZi9kV1l3L3hYTW12K3ppTEgvRndJREFaV0NXZi84RVo4QlJqd2FBSkJyRVFDMHZqei9PTFk3LzI1SE52L0dFb0gvbGVCWC85OFZtUCtLRnJiLytwek5BT3d0MFA5UGxQSUJaVWJSQUdkT3JnQmxrS3ovbUlqdEFiL0NpQUJ4VUgwQm1BU05BSnVXTmYvRWRQVUE3M0pKL2hOU0VmOThmZXIvS0RTL0FDclNuditiaEtVQXNnVXFBVUJjS1A4a1ZVMy9zdVIyQUlsQ1lQNXo0a0lBYnZCRi9wZHZVQUNucnV6LzQyeHIvN3p5UWYrM1VmOEFPYzYxL3k4aXRmL1Y4SjRCUjB0ZkFKd29HUDltMGxFQXE4ZmsvNW9pS1FEanIwc0FGZS9EQUlybFh3Rk13REVBZFh0WEFlUGhnZ0I5UGovL0FzYXJBUDRrRGY2UnVzNEFsUC8wL3lNQXBnQWVsdHNCWE9UVUFGekdQUDQraGNqL3lTazdBSDN1YmYrMG8rNEJqSHBTQUFrV1dQL0ZuUy8vbVY0NUFGZ2V0Z0JVb1ZVQXNwSjhBS2FtQi84VjBOOEFuTGJ5QUp0NXVRQlRuSzcrbWhCMi83cFQ2QUhmT25uL0hSZFlBQ045Zi8rcUJaWCtwQXlDLzV2RUhRQ2hZSWdBQnlNZEFhSWwrd0FETHZML0FObThBRG11NGdITzZRSUFPYnVJL251OUNmL0pkWC8vdWlUTUFPY1oyQUJRVG1rQUU0YUIvNVRMUkFDTlVYMysrS1hJLzlhUWh3Q1hONmIvSnV0YkFCVXVtZ0RmL3BiL0k1bTAvMzJ3SFFFclloNy8ySHJtLyttZ0RBQTV1UXorOEhFSC93VUpFUDRhVzJ3QWJjYkxBQWlUS0FDQmh1VC9mTG9vLzNKaWhQNm1oQmNBWTBVc0FBbnk3dis0TlRzQWhJRm0velFnOC82VDM4ai9lMU96L29lUXlmK05KVGdCbHp6ai8xcEpuQUhMckxzQVVKY3YvMTZKNS84a3Z6di80ZEcxLzByWDFmNEdkclAvbVRiQkFUSUE1d0JvblVnQmpPT2EvN2JpRVA1ZzRWei9jeFNxL2diNlRnRDRTNjMvTlZrRy93QzBkZ0JJclFFQVFBak9BYTZGM3dDNVBvWC8xZ3RpQU1VZjBBQ3JwL1QvRnVlMUFaYmF1UUQzcVdFQnBZdjMveTk0bFFGbitETUFQRVVjL2htenhBQjhCOXIrT210UkFManBuUC84U2lRQWRyeERBSTFmTmYvZVhxWCtMajAxQU00N2MvOHY3UHIvU2dVZ0FZR2E3djlxSU9JQWViczkvd09tOGY1RHFxei9IZGl5L3hmSi9BRDlidk1BeUgwNUFHM0FZUDgwYys0QUpubnovOGs0SVFEQ2RvSUFTMkFaLzZvZTV2NG5QLzBBSkMzNi8vc0I3d0NnMUZ3QkxkSHRBUE1oVi83dFZNbi8xQktkL3RSamYvL1pZaEQraTZ6dkFLakpnditQd2FuLzdwZkJBZGRvS1FEdlBhWCtBZ1B5QUJiTHNmNnh6QllBbFlIVi9oOExLZjhBbjNuK29CbHkvNkpReUFDZGx3c0Ftb1pPQWRnMi9BQXdaNFVBYWR6RkFQMm9UZjQxc3hjQUdIbndBZjh1WVA5clBJZitZczM1L3ovNWQvOTRPOVAvY3JRMy9sdFY3UUNWMUUwQk9Fa3hBRmJHbGdCZDBhQUFSYzIyLy9SYUt3QVVKTEFBZW5UZEFET25Kd0huQVQvL0RjV0dBQVBSSXYrSE84b0FwMlJPQUMvZlRBQzVQRDRBc3FaN0FZUU1vZjg5cmlzQXcwV1FBSDh2dndFaUxFNEFPZW8wQWY4V0tQLzJYcElBVStTQUFEeE80UDhBWU5ML21hL3NBSjhWU1FDMGM4VCtnK0ZxQVArbmhnQ2ZDSEQvZUVUQy83REV4djkyTUtqL1hha0JBSERJWmdGS0dQNEFFNDBFL280K1B3Q0RzN3YvVFp5Yi8zZFdwQUNxMEpMLzBJV2EvNVNiT3YraWVPaisvTldiQVBFTktnQmVNb01BczZwd0FJeFRsLzgzZDFRQmpDUHYvNWt0UXdIc3J5Y0FOcGRuLzU0cVFmL0U3NGYrVmpYTEFKVmhMLzdZSXhIL1JnTkdBV2NrV3Y4b0dxMEF1REFOQUtQYjJmOVJCZ0gvM2Fwcy91blFYUUJreWZuK1ZpUWovOUdhSGdIanlmdi9BcjJuL21RNUF3QU5nQ2tBeFdSTEFKYk02LytScmpzQWVQaVYvMVUzNFFCeTBqWCt4OHgzQUE3M1NnRS8rNEVBUTJpWEFZZUNVQUJQV1RmL2RlYWQveGxnandEVmtRVUFSZkY0QVpYelgvOXlLaFFBZzBnQ0FKbzFGUDlKUG0wQXhHYVlBQ2tNelA5Nkpnc0IrZ3FSQU05OWxBRDI5TjcvS1NCVkFYRFZmZ0NpK1ZZQlI4Wi8vMUVKRlFGaUp3VC96RWN0QVV0dmlRRHFPK2NBSURCZi84d2ZjZ0VkeExYL00vR24vbDF0amdCb2tDMEE2d3kxL3pSd3BBQk0vc3Ivcmc2aUFEM3JrLzhyUUxuKzZYM1pBUE5ZcC81S01RZ0FuTXhDQUh6V2V3QW0zWFlCa25Ec0FISmlzUUNYV2NjQVY4VndBTG1Wb1FBc1lLVUErTE1VLzd6YjJQNG9QZzBBODQ2TkFPWGp6ditzeWlQL2RiRGgvMUp1SmdFcTlRNy9GRk5oQURHckNnRHlkM2dBR2VnOUFOVHdrLzhFY3pqL2tSSHYvc29SKy8vNUV2WC9ZM1h2QUxnRXMvLzI3VFAvSmUrSi82WndwdjlSdkNIL3VmcU8vemE3clFEUWNNa0E5aXZrQVdpNFdQL1VOTVQvTTNWcy8vNTFtd0F1V3cvL1Z3NlEvMWZqekFCVEdsTUJuMHpqQUo4YjFRRVlsMndBZFpDei9vblJVZ0FtbndvQWM0WEpBTisybkFGdXhGMy9PVHpwQUFXbmFmK2F4YVFBWUNLNi81T0ZKUUhjWTc0QUFhZFUveFNScXdEQ3hmditYMDZGLy96NDgvL2hYWVAvdTRiRS85aVpxZ0FVZHA3K2pBRjJBRmFlRHdFdDB5bi9rd0ZrL25GMFRQL1RmMndCWnc4d0FNRVFaZ0ZGTTEvL2E0Q2RBSW1yNlFCYWZKQUJhcUcyQUs5TTdBSElqYXovb3pwb0FPbTBOUC93L1E3L29uSCsveWJ2aXY0MExxWUE4V1VoL29PNm5BQnYwRDcvZkY2Zy94K3MvZ0J3cmpqL3ZHTWIvME9LK3dCOU9vQUJuSml1LzdJTTkvLzhWSjRBVXNVTy9xeklVLzhsSnk0QmFzK25BQmk5SWdDRHNwQUF6dFVFQUtIaTBnQklNMm4vWVMyNy8wNjQzLyt3SGZzQVQ2QlcvM1Fsc2dCU1RkVUJVbFNOLytKbDFBR3ZXTWYvOVY3M0FheDJiZittdWI0QWc3VjRBRmYrWGYrRzhFbi9JUFdQLzR1aVovK3pZaEwrMmN4d0FKUGZlUDgxQ3ZNQXBveVdBSDFReVA4T2Jkdi9XOW9CLy96OEwvNXRuSFQvY3pGL0FjeFgwLytVeXRuL0dsWDUvdzcxaGdGTVdhbi84aTNtQUR0aXJQOXlTWVQrVHBzeC81NStWQUF4cnl2L0VMWlUvNTFuSXdCb3dXMy9ROTJhQU1tc0FmNElvbGdBcFFFZC8zMmI1ZjhlbXR3QlorOWNBTndCYmYvS3hnRUFYZ0tPQVNRMkxBRHI0cDcvcXZ2Vy83bE5DUUJoU3ZJQTI2T1YvL0FqZHYvZmNsait3TWNEQUdvbEdQL0pvWGIvWVZsakFlQTZaLzlseDVQKzNqeGpBT29aT3dFMGh4c0FaZ05iL3FqWTZ3RGw2SWdBYUR5QkFDNm83Z0FudjBNQVM2TXZBSTloWXY4NDJLZ0JxT244L3lOdkZ2OWNWQ3NBR3NoWEFWdjltQURLT0VZQWpnaE5BRkFLcndIOHgwd0FGbTVTLzRFQndnQUxnRDBCVnc2Ui8vM2V2Z0VQU0s0QVZhTlcvanBqTFA4dEdMeitHczBQQUJQbDB2NzRROE1BWTBlNEFKckhKZitYODNuL0pqTkwvOGxWZ3Y0c1Fmb0FPWlB6L3BJck8vOVpIRFVBSVZRWS83TXpFdjY5UmxNQUM1eXpBV0tHZHdDZWIyOEFkNXBKLzhnL2pQNHREUTMvbXNBQy9sRklLZ0F1b0xuK0xIQUdBSkxYbFFFYXNHZ0FSQnhYQWV3eW1mK3pnUHIrenNHLy82WmNpZjQxS084QTBnSE0vcWl0SXdDTjh5MEJKREp0L3cveXd2L2puM3Ivc0svSy9rWTVTQUFvM3pnQTBLSTYvN2RpWFFBUGJ3d0FIZ2hNLzRSLzl2OHQ4bWNBUmJVUC93clJIZ0FEczNrQThlamFBWHZIV1A4QzBzb0J2SUpSLzE1bDBBRm5KQzBBVE1FWUFWOGE4Zitsb3JzQUpIS01BTXBDQmY4bE9KTUFtQXZ6QVg5VjZQLzZoOVFCdWJGeEFGcmNTLzlGK0pJQU1tOHlBRndXVUFEMEpIUCtvMlJTL3huQkJnRi9QU1FBL1VNZS9rSHNxditoRWRmK1A2K01BRGQvQkFCUGNPa0FiYUFvQUk5VEIvOUJHdTcvMmFtTS8wNWV2ZjhBazc3L2swZTYvbXBOZi8vcG5la0JoMWZ0LzlBTjdBR2JiU1QvdEdUYUFMU2pFZ0MrYmdrQkVUOTcvN09JdFArbGUzdi9rTHhSL2tmd2JQOFpjQXYvNDlvei82Y3k2djl5VDJ6L0h4TnovN2Z3WXdEalY0Ly9TTm40LzJhcFh3R0JsWlVBN29VTUFlUE1Jd0RRY3hvQlpnanFBSEJZandHUStRNEE4SjZzL21Sd2R3RENqWm4rS0RoVC8zbXdMZ0FxTlV6L25yK2FBRnZSWEFDdERSQUJCVWppLzh6K2xRQlF1TThBWkFsNi9uWmxxLy84eXdEK29NODJBRGhJK1FFNGpBMy9Da0JyL2x0bE5QL2h0ZmdCaS8rRUFPYVJFUURwT0JjQWR3SHgvOVdwbC85all3bit1USsvLzYxbmJRR3VEZnYvc2xnSC9oczdSUDhLSVFMLytHRTdBQm9la2dHd2t3b0FYM25QQWJ4WUdBQzVYdjcrY3pmSkFCZ3lSZ0I0TlFZQWprS1NBT1RpK2Y5b3dONEJyVVRiQUtLNEpQK1Bab24vblFzWEFIMHRZZ0RyWGVIK09IQ2cvMFowOHdHWitUZi9nU2NSQWZGUTlBQlhSUlVCWHVSSi8wNUNRZi9DNCtjQVBaSlgvNjJiRi85d2ROdisyQ1lMLzRPNmhRQmUxTHNBWkM5YkFNeityLy9lRXRmK3JVUnMvK1BrVC84bTNkVUFvK09XL2grK0VnQ2dzd3NCQ2xwZS85eXVXQUNqMCtYL3g0ZzBBSUpmM2YrTXZPZitpM0dBLzNXcjdQNHgzQlQvT3hTci8rUnR2QUFVNFNEK3d4Q3VBT1AraUFHSEoya0FsazNPLzlMdTRnQTMxSVQrN3psOEFLckNYZi81RVBmL0dKYysvd3FYQ2dCUGk3TC9lUExLQUJyYjFRQStmU1Ava0FKcy8rWWhVLzlSTGRnQjRENFJBTmJaZlFCaW1abi9zN0JxL29OZGl2OXRQaVQvc25rZy8zajhSZ0RjK0NVQXpGaG5BWURjKy8vczR3Y0JhakhHL3p3NGF3QmpjdTRBM014ZUFVbTdBUUJabWlJQVR0bWwvdzdEK2Y4SjV2My96WWYxQUJyOEIvOVV6UnNCaGdKd0FDV2VJQURuVyszL3Y2ck0vNWdIM2dCdHdERUF3YWFTLytnVHRmOXBqalQvWnhBYkFmM0lwUUREMlFUL05MMlEvM3Vib1A1WGdqYi9Ubmc5L3c0NEtRQVpLWDMvVjZqMUFOYWxSZ0RVcVFiLzI5UEMva2hkcFAvRklXZi9LNDZOQUlQaHJBRDBhUndBUkVUaEFJaFVEZitDT1NqK2kwMDRBRlNXTlFBMlg1MEFrQTJ4L2w5enVnQjFGM2IvOUtieC93dTZod0N5YXN2L1lkcGRBQ3Y5TFFDa21BUUFpM2J2QUdBQkdQN3JtZFAvcUc0VS96THZzQUJ5S2VnQXdmbzFBUDZnYi82SWVpbi9ZV3hEQU5lWUYvK00wZFFBS3IyakFNb3FNdjlxYXIzL3ZrVFovK2s2ZFFEbDNQTUJ4UU1FQUNWNE52NEVuSWIvSkQyci9xV0laUC9VNkE0QVdxNEtBTmpHUWY4TUEwQUFkSEZ6Ly9obkNBRG5mUkwvb0J6RkFCNjRJd0hmU2ZuL2V4UXUvb2M0SmYrdERlVUJkNkVpLy9VOVNRRE5mWEFBaVdpR0FObjJIdi90am84QVFaOW0vMnlrdmdEYmRhMy9JaVY0L3NoRlVBQWZmTnIrU2h1Zy83cWF4LzlIeC93QWFGR2ZBUkhJSndEVFBjQUJHdTViQUpUWkRBQTdXOVgvQzFHMy80SG1ldjl5eTVFQmQ3UkMvMGlLdEFEZ2xXb0FkMUpvLzlDTUt3QmlDYmIveldXRy94SmxKZ0JmeGFiL3kvR1RBRDdRa2YrRjl2c0FBcWtPQUEzM3VBQ09CLzRBSk1nWC8xak4zd0JiZ1RUL0Zib2VBSS9rMGdIMzZ2ai81a1VmL3JDNmgvL3V6VFFCaTA4ckFCR3cyZjRnODBNQThtL3BBQ3dqQ2YvamNsRUJCRWNNL3lacHZ3QUhkVEwvVVU4UUFEOUVRZitkSkc3L1RmRUQvK0l0K3dHT0djNEFlSHZSQVJ6Kzd2OEZnSDcvVzk3WC82SVB2d0JXOEVrQWg3bFIvaXp4b3dEVTI5TC9jS0tiQU05bGRnQ29TRGoveEFVMEFFaXM4djkrRnAzL2ttQTcvNko1bVA2TUVGOEF3LzdJL2xLV29nQjNLNUgrekt4Ty82Ymdud0JvRSszLzlYN1EvK0k3MVFCMTJjVUFtRWp0QU53ZkYvNE9XdWYvdk5SQUFUeGw5djlWR0ZZQUFiRnRBSkpUSUFGTHRzQUFkL0hnQUxudEcvKzRaVklCNnlWTi8vMkdFd0RvOW5vQVBHcXpBTU1MREFCdFF1c0JmWEU3QUQwb3BBQ3ZhUEFBQWkrNy96SU1qUURDaTdYL2gvcG9BR0ZjM3YvWmxjbi95L0YyLzArWFF3QjZqdHIvbGZYdkFJb3F5UDVRSldIL2ZIQ24veVNLVi8rQ0haUC84VmRPLzh4aEV3R3gwUmIvOStOLy9tTjNVLy9VR2NZQkVMT3pBSkZOclA1Wm1RNy8ycjJuQUd2cE8vOGpJZlArTEhCdy82Ri9Ud0hNcndvQUtCV0svbWgwNUFESFg0bi9oYjZvLzVLbDZnRzNZeWNBdDl3Mi92L2VoUUNpMjNuK1ArOEdBT0ZtTnYvN0V2WUFCQ0tCQVlja2d3RE9NanNCRDJHM0FLdlloLzlsbUN2L2x2dGJBQ2FSWHdBaXpDYitzb3hUL3htQjgvOU1rQ1VBYWlRYS9uYVFyUDlFdXVYL2E2SFYveTZqUlArVnF2MEF1eEVQQU5xZ3BmK3JJL1lCWUEwVEFLWExkUURXYThELzlIdXhBV1FEYUFDeThtSC8rMHlDLzlOTktnSDZUMGIvUC9SUUFXbGw5Z0E5aURvQjdsdlZBQTQ3WXYrblZFMEFFWVF1L2ptdnhmKzVQcmdBVEVEUEFLeXYwUDZ2U2lVQWlodlQvcFI5d2dBS1dWRUFxTXRsL3l2VjBRSHI5VFlBSGlQaS93bCtSZ0RpZlY3K25IVVUvem40Y0FIbU1FRC9wRnltQWVEVzV2OGtlSThBTndnci8vc0I5UUZxWXFVQVNtdHEvalVFTnY5YXNwWUJBM2g3Ly9RRldRRnkrajMvL3BsU0FVMFBFUUE1N2xvQlg5L21BT3cwTC81bmxLVC9lYzhrQVJJUXVmOUxGRW9BdXd0bEFDNHdnZjhXNzlML1RleUIvMjlOelA4OVNHSC94OW43L3lyWHpBQ0ZrY24vT2VhU0FldGt4Z0NTU1NQK2JNWVUvN1pQMHY5U1o0Z0E5bXl3QUNJUlBQOFRTbkwrcUtwTy81M3ZGUCtWS2FnQU9ua2NBRSt6aHYvbmVZZi9ydEZpLy9ONnZnQ3JwczBBMUhRd0FCMXNRditpM3JZQkRuY1ZBTlVuK2YvKzMrVC90NlhHQUlXK01BQjgwRzMvZDY5Vi93blJlUUV3cTczL3cwZUdBWWpiTS8rMlc0MytNWjlJQUNOMjlmOXd1dVAvTzRrZkFJa3Nvd0J5Wnp6K0NOV1dBS0lLY2YvQ2FFZ0EzSU4wLzdKUFhBREwrdFgrWGNHOS80TC9JdjdVdkpjQWlCRVUveFJsVS8vVXpxWUE1ZTVKLzVkS0EvK29WOWNBbTd5Ri82YUJTUUR3VDRYL3N0TlIvOHRJby83QnFLVUFEcVRIL2g3L3pBQkJTRnNCcGtwbS84Z3FBUC9DY2VQL1FoZlFBT1hZWlA4WTd4b0FDdWsrLzNzS3NnRWFKSzcvZDl2SEFTMmp2Z0FRcUNvQXBqbkcveHdhR2dCK3BlY0ErMnhrL3ozbGVmODZkb29BVE04UkFBMGljUDVaRUtnQUpkQnAveVBKMS84b2FtWCtCdTl5QUNobjR2NzJmMjcvUDZjNkFJVHdqZ0FGbmxqL2dVbWUvMTVaa2dEbU5wSUFDQzJ0QUUrcEFRQnp1dmNBVkVDREFFUGcvZi9QdlVBQW1oeFJBUzI0TnY5WDFPRC9BR0JKLzRFaDZ3RTBRbEQvKzY2Yi93U3pKUURxcEYzK1hhLzlBTVpGVi8vZ2FpNEFZeDNTQUQ2OGN2OHM2Z2dBcWEvMy94ZHRpZi9sdGljQXdLVmUvdlZsMlFDL1dHQUF4RjVqLzJydUMvNDFmdk1BWGdGbC95NlRBZ0RKZkh6L2pRemFBQTJtblFFdysrMy9tL3A4LzJxVWt2KzJEY29BSEQybkFObVlDUDdjZ2kzL3lPYi9BVGRCVi85ZHYySCtjdnNPQUNCcFhBRWF6NDBBR004Ti9oVXlNUCs2bEhULzB5dmhBQ1Vpb3Y2azBpci9SQmRnLzdiV0NQLzFkWW4vUXNNeUFFc01VLzVRaktRQUNhVWtBZVJ1NHdEeEVWb0JHVFRVQUFiZkRQK0w4emtBREhGTEFmYTN2Ly9WdjBYLzVnK09BQUhEeFArS3F5Ly9RRDlxQVJDcDF2L1ByamdCV0VtRi83YUZqQUN4RGhuL2s3ZzEvd3Jqb2Y5NDJQVC9TVTNwQUozdWl3RTdRZWtBUnZ2WUFTbTRtZjhneTNBQWtwUDlBRmRsYlFFc1VvWC85SlkxLzE2WTZQODdYU2YvV0pQYy8wNVJEUUVnTC96L29CTnkvMTFySi85MkVOTUJ1WGZSLytQYmYvNVlhZXovb200WC95U21idjliN04zL1F1cDBBRzhUOVA0SzZSb0FJTGNHL2dLLzhnRGFuRFgrS1R4Ry82anNid0I1dVg3LzdvN1AvemQrTkFEY2dkRCtVTXlrLzBNWGtQN2FLR3ovZjhxa0FNc2hBLzhDbmdBQUpXQzgvOEF4U2dCdEJBQUFiNmNLL2x2YWgvL0xRcTMvbHNMaUFNbjlCdit1Wm5rQXpiOXVBRFhDQkFCUktDMytJMmFQL3d4c3h2OFFHK2ovL0VlNkFiQnVjZ0NPQTNVQmNVMk9BQk9jeFFGY0wvd0FOZWdXQVRZUzZ3QXVJNzMvN05TQkFBSmcwUDdJN3NmL082K2svNUlyNXdEQzJUVC9BOThNQUlvMnN2NVY2ODhBNk04aUFERTBNdittY1ZuL0NpM1kvejZ0SEFCdnBmWUFkbk5iLzRCVVBBQ25rTXNBVnczekFCWWU1QUd4Y1pML2dhcm0vdnlaZ2YrUjRTc0FSdWNGLzNwcGZ2NVc5cFQvYmlXYS90RURXd0JFa1Q0QTVCQ2wvemZkK2Y2eTBsc0FVNUxpL2tXU3VnQmQwbWorRUJtdEFPZTZKZ0M5ZW96Lyt3MXcvMmx1WFFEN1NLb0F3QmZmL3hnRHlnSGhYZVFBbVpQSC9tMnFGZ0Q0WmZiL3Nud00vN0wrWnY0M0JFRUFmZGEwQUxkZ2t3QXRkUmYraEwvNUFJK3d5LzZJdHpiL2t1cXhBSkpsVnY4c2U0OEJJZEdZQU1CYUtmNVREMzMvMWF4U0FOZXBrQUFRRFNJQUlORmsvMVFTK1FIRkVlei8yYnJtQURHZ3NQOXZkbUgvN1dqckFFODdYUDVGK1F2L0k2eEtBUk4yUkFEZWZLWC90RUlqLzFhdTlnQXJTbS8vZnBCVy8rVHFXd0R5MVJqK1JTenIvOXkwSXdBSStBZi9aaTljLy9ETlp2OXg1cXNCSDduSi84TDJSdjk2RWJzQWhrYkgvNVVEbHY5MVAyY0FRV2g3LzlRMkV3RUdqVmdBVTRiei80ZzFad0NwRzdRQXNURVlBRzgycHdERFBkZi9Id0ZzQVR3cVJnQzVBNkwvd3BVby8vWi9KdjYrZHliL1BYY0lBV0NoMi84cXk5MEJzZktrLy9XZkNnQjB4QUFBQlYzTi9vQi9zd0I5N2ZiL2xhTFovMWNsRlA2TTdzQUFDUW5CQUdFQjRnQWRKZ29BQUlnLy8rVkkwdjRtaGx6L1R0clFBV2drVlA4TUJjSC84cTg5LzcrcExnR3prNVAvY2I2TC9uMnNId0FEUy96KzF5UVBBTUViR0FIL1JaWC9ib0YyQU10ZCtRQ0tpVUQrSmtZR0FKbDAzZ0NoU25zQXdXTlAvM1k3WHY4OURDc0JrckdkQUM2VHZ3QVEveVlBQ3pNZkFUdzZZdjl2d2swQm1sdjBBSXdva0FHdEN2c0F5OUV5L215Q1RnRGt0Rm9BcmdmNkFCK3VQQUFwcXg0QWRHTlMvM2JCaS8rN3JjYisybTg0QUxsNzJBRDVualFBTkxSZC84a0pXLzg0TGFiK2hKdkwvenJvYmdBMDAxbi8vUUNpQVFsWHR3Q1JpQ3dCWG5yMUFGVzhxd0dUWE1ZQUFBaG9BQjVmcmdEZDVqUUI5L2ZyLzRtdU5mOGpGY3ovUitQV0FlaFN3Z0FMTU9QL3FrbTQvOGI3L1A0c2NDSUFnMldELzBpb3V3Q0VoMzMvaW1oaC8rNjRxUC96YUZUL2g5amkvNHVRN1FDOGlaWUJVRGlNLzFhcHAvL0NUaG4vM0JHMC94RU53UUIxaWRUL2plQ1hBREgwcndEQlk2Ly9FMk9hQWY5QlB2K2MwamYvOHZRRC8vb09sUUNlV05uL25jK0cvdnZvSEFBdW5Qdi9xemk0Lys4ejZnQ09pb1AvR2Y3ekFRckp3Z0EvWVVzQTB1K2lBTURJSHdGMTF2TUFHRWZlL2pZbzZQOU10Mi8ra0E1WC85WlBpUC9ZeE5RQWhCdU0vb01GL1FCOGJCUC9ITmRMQUV6ZU4vN3B0ajhBUkt1Ly9qUnYzdjhLYVUzL1VLcnJBSThZV1A4dDUza0FsSUhnQVQzMlZBRDlMdHYvNzB3aEFER1VFdjdtSlVVQVE0WVcvbzZiWGdBZm5kUCsxU29lL3dUazkvNzhzQTMvSndBZi92SDAvLytxTFFyKy9kNzVBTjV5aEFEL0x3Yi90S096QVZSZWwvOVowVkwrNVRTcC85WHNBQUhXT09UL2gzZVgvM0RKd1FCVG9EWCtCcGRDQUJLaUVRRHBZVnNBZ3dWT0FiVjROZjkxWHovLzdYVzVBTDkraVArUWQra0F0emxoQVMvSnUvK25wWGNCTFdSK0FCVmlCdjZSbGwvL2VEYVlBTkZpYUFDUGJ4Nyt1SlQ1QU92WUxnRDR5cFQvT1Y4V0FQTGhvd0RwOStqL1I2c1QvMmYwTWY5VVoxMy9SSG4wQVZMZ0RRQXBUeXYvK2M2bi85YzBGZjdBSUJiLzkyODhBR1ZLSnY4V1cxVCtIUndOLzhibjEvNzBtc2dBMzRudEFOT0VEZ0JmUU03L0VUNzMvK21EZVFGZEYwMEF6Y3cwL2xHOWlBQzAyNG9CanhKZUFNd3JqUDY4cjlzQWIyS1AvNWMvb3YvVE1rZitFNUkxQUpJdFUvNnlVdTcvRUlWVS8rTEdYZi9KWVJUL2VIWWovM0l5NS8raTVaei8weG9NQUhJbmMvL08xSVlBeGRtZy8zU0JYdjdIMTl2L1M5LzVBZjEwdGYvbzEyai81SUwyLzdsMVZnQU9CUWdBN3gwOUFlMVhoZjk5a29uK3pLamZBQzZvOVFDYWFSWUEzTlNoLzJ0RkdQK0oyclgvOFZURy80SjYwLytOQ0puL3ZyRjJBR0Jac2dEL0VERCtlbUJwLzNVMjZQOGlmbW4vekVPbUFPZzBpdi9Ua3d3QUdUWUhBQ3dQMS80ejdDMEF2a1NCQVdxVDRRQWNYUzMrN0kwUC94RTlvUURjYzhBQTdKRVkvbStvcVFEZ09qLy9mNlM4QUZMcVN3SGdub1lBMFVSdUFkbW0yUUJHNGFZQnU4R1AveEFIV1A4S3pZd0FkY0NjQVJFNEpnQWJmR3dCcTljMy8xLzkxQUNiaDZqLzlyS1ovcHBFU2dEb1BXRCthWVE3QUNGTXh3RzlzSUwvQ1dnWi9rdkdadi9wQVhBQWJOd1UvM0xtUmdDTXdvWC9PWjZrL3BJR1VQK3B4R0VCVmJlQ0FFYWUzZ0U3N2VyL1lCa2EvK2l2WWY4TGVmaitXQ1BDQU51MC9QNUtDT01BdytOSkFiaHVvZjh4NmFRQmdEVXZBRklPZWYvQnZqb0FNSzUxLzRRWElBQW9Db1lCRmpNWi8vQUxzUDl1T1pJQWRZL3ZBWjFsZHY4MlZFd0F6YmdTL3k4RVNQOU9jRlgvd1RKQ0FWMFFOUDhJYVlZQURHMUkvenFjK3dDUUk4d0FMS0IxL2pKcndnQUJSS1gvYjI2aUFKNVRLUDVNMXVvQU90ak4vNnRnay84bzQzSUJzT1B4QUViNXR3R0lWSXYvUEhyMy9vOEpkZit4cm9uK1NmZVBBT3k1ZnY4K0dmZi9MVUE0LzZIMEJnQWlPVGdCYWNwVEFJQ1QwQUFHWndyL1NvcEIvMkZRWlAvV3JpSC9Nb1pLLzI2WGd2NXZWS3dBVk1kTC92ZzdjUDhJMkxJQkNiZGZBTzRiQ1A2cXpkd0F3K1dIQUdKTTdmL2lXeG9CVXRzbi8rRyt4d0haeUhuL1ViTUkvNHhCemdDeXoxZisrdnd1LzJoWmJnSDl2Wjcva05hZS82RDFOdjgxdDF3QkZjakMvNUloY1FIUkFmOEE2Mm9yLzZjMDZBQ2Q1ZDBBTXg0WkFQcmRHd0ZCazFmL1QzdkVBRUhFMy85TUxCRUJWZkZFQU1xMytmOUIxTlQvQ1NHYUFVYzdVQUN2d2p2L2pVZ0pBR1NnOUFEbTBEZ0FPeGxML2xEQ3dnQVNBOGorb0o5ekFJU1A5d0Z2WFRuL091MExBWWJlaC85Nm8yd0JleXUrLy91OXp2NVF0a2ovMFBiZ0FSRThDUUNoenlZQWpXMWJBTmdQMC8rSVRtNEFZcU5vL3hWUWVmK3RzcmNCZjQ4RUFHZzhVdjdXRUEzL1lPNGhBWjZVNXY5L2dUNy9NLy9TL3o2TjdQNmROK0QvY2lmMEFNQzgrdi9rVERVQVlsUlIvNjNMUGY2VE1qZi96T3UvQURURjlBQllLOVArRzc5M0FMem5tZ0JDVWFFQVhNR2dBZnJqZUFCN04rSUF1QkZJQUlXb0N2NFdoNXovS1Jsbi96REtPZ0M2bFZIL3ZJYnZBT3UxdmY3Wmk3ei9TakJTQUM3YTVRQzkvZnNBTXVVTS85T052d0dBOUJuL3FlZDYvbFl2dmYrRXR4Zi9KYktXL3pPSi9RRElUaDhBRm1reUFJSThBQUNFbzF2K0YrZTdBTUJQN3dDZFpxVC93RklVQVJpMVovL3dDZW9BQVh1ay80WHBBUC9LOHZJQVBMcjFBUEVReC8vZ2RKNyt2MzFiLytCV3p3QjVKZWYvNHduRy93K1o3Lzk1Nk5uK1MzQlNBRjhNT2Y0ejFtbi9sTnhoQWNkaUpBQ2MwUXorQ3RRMEFObTBOLzdVcXVqLzJCUlUvNTM2aHdDZFkzLytBYzRwQUpVa1JnRTJ4TW4vVjNRQS91dXJsZ0FibytvQXlvZTBBTkJmQVA1N25GMEF0ejVMQUlucnRnRE00Zi8vMW92Uy93SnpDUDhkREc4QU5Kd0JBUDBWKy84bHBSLytESUxUQUdvU05mNHFZNW9BRHRrOS90Z0xYUC9JeFhEK2t5YkhBQ1Q4ZVA1cnFVMEFBWHVmLzg5TFpnQ2pyOFFBTEFId0FIaTZzUDROWWt6LzdYengvK2lTdlAvSVlPQUF6QjhwQU5ESURRQVY0V0QvcjV6RUFQZlFmZ0ErdVBUK0FxdFJBRlZ6bmdBMlFDMy9FNHB5QUlkSHpRRGpMNU1CMnVkQ0FQM1JIQUQwRDYzL0JnOTIvaENXMFArNUZqTC9WbkRQLzB0eDF3RS9raXYvQk9FVC91TVhQdjhPLzliK0xRak4vMWZGbC83U1V0Zi85ZmozLzRENFJnRGg5MWNBV25oR0FOWDFYQUFOaGVJQUw3VUZBVnlqYWY4R0hvWCs2TEk5LythVkdQOFNNWjRBNUdROS9uVHorLzlOUzF3QlVkdVQvMHlqL3Y2TjFmWUE2Q1dZL21Fc1pBREpKVElCMVBRNUFLNnJ0Ly81U25BQXBwd2VBTjdkWWYvelhVbisrMlZrLzlqWlhmLytpcnYvanI0MC96dkxzZi9JWGpRQWMzS2UvNldZYUFGK1krTC9kcDMwQVd2SUVBREJXdVVBZVFaWUFKd2dYZjU5OGRQL0R1MmQvNldhRmYrNDRCYi8raGlZLzNGTkh3RDNxeGYvN2JITS96U0prZi9DdG5JQTRPcVZBQXB2WndISmdRUUE3bzVPQURRR0tQOXUxYVgrUE0vOUFEN1hSUUJnWVFEL01TM0tBSGg1RnYvcml6QUJ4aTBpLzdZeUd3R0QwbHYvTGphQUFLOTdhZi9HalU3K1EvVHYvL1UyWi81T0p2TC9BbHo1L3Z1dVYvK0xQNUFBR0d3Yi95Sm1FZ0VpRnBnQVF1VjIvaktQWXdDUXFaVUJkaDZZQUxJSWVRRUlueElBV21YbS80RWRkd0JFSkFzQjZMYzNBQmYvWVAraEtjSC9QNHZlQUErejh3RC9aQS8vVWpXSEFJazVsUUZqOEtyL0Z1YmsvakcwVXY4OVVpc0FidlhaQU1kOVBRQXUvVFFBamNYYkFOT2Z3UUEzZVduK3R4U0JBS2wzcXYvTHNvdi9oeWkyLzZ3Tnl2OUJzcFFBQ004ckFIbzFmd0ZLb1RBQTQ5YUEvbFlMOC85a1ZnY0I5VVNHL3owckZRR1lWRjcvdmp6Ni91OTI2UC9XaUNVQmNVeHIvMTFvWkFHUXpoZi9icGFhQWVSbnVRRGFNVEwraDAyTC83a0JUZ0FBb1pUL1lSM3AvOCtVbGYrZ3FBQUFXNENyL3dZY0UvNExiL2NBSjd1Vy80cm9sUUIxUGtUL1A5aTgvK3ZxSVA0ZE9hRC9HUXp4QWFrOHZ3QWdnNDMvN1o5Ny8xN0ZYdjUwL2dQL1hMTmgvbmxoWFArcWNBNEFGWlg0QVBqakF3QlFZRzBBUzhCS0FReGE0ditoYWtRQjBISi8vM0lxLy81S0drci85N09XL25tTVBBQ1RSc2ovMWlpaC82Rzh5ZitOUVlmLzhuUDhBRDR2eWdDMGxmLytnamZ0QUtVUnV2OEtxY0lBbkczYS8zQ01lLzlvZ04vK3NZNXMvM2tsMi8rQVRSTC9iMndYQVZ2QVN3Q3U5UmIvQk93Ky95dEFtUUhqcmY0QTdYcUVBWDladXYrT1VvRCsvRlN1QUZxenNRSHoxbGYvWnp5aS85Q0NEdjhMZ29zQXpvSGIvMTdabmYvdjV1Yi9kSE9mL3FSclh3QXoyZ0lCMkgzRy80ektnUDRMWDBUL053bGQvcTZaQnYvTXJHQUFSYUJ1QU5VbU1mNGJVTlVBZG4xeUFFWkdRLzhQamtuL2czcTUvL01VTXY2QzdTZ0EwcCtNQWNXWFFmOVVtVUlBdzM1YUFCRHU3QUYydTJiL0F4aUYvN3RGNWdBNHhWd0IxVVZlLzFDSzVRSE9CK1lBM20vbUFWdnBkLzhKV1FjQkFtSUJBSlJLaGY4ejlyVC81TEZ3QVRxOWJQL0N5KzMrRmRIREFKTUtJd0ZXbmVJQUg2T0wvamdIUy84K1duUUF0VHlwQUlxaTFQNVJweDhBelZwdy95Rnc0d0JUbDNVQnNlQkovNjZRMmYvbXpFLy9GazNvLzNKTzZnRGdPWDcrQ1RHTkFQS1RwUUZvdG96L3A0UU1BWHRFZndEaFZ5Y0IrMndJQU1iQmp3RjVoOC8vckJaR0FESkVkUDlscnlqLytHbnBBS2JMQndCdXhkb0ExLzRhL3FqaS9RQWZqMkFBQzJjcEFMZUJ5LzVrOTByLzFYNkVBTktUTEFESDZoc0JsQysxQUp0Ym5nRTJhYS8vQWs2Ui9tYWFYd0NBejMvK05IenMvNEpVUndEZDg5TUFtS3JQQU41cXh3QzNWRjcrWE1nNC80cTJjd0dPWUpJQWhZamtBR0VTbGdBMyswSUFqR1lFQU1wbmx3QWVFL2ovTTdqUEFNckdXUUEzeGVIK3FWLzUvMEpCUlArODZuNEFwdDlrQVhEdjlBQ1FGOElBT2llMkFQUXNHUDZ2UkxQL21IYWFBYkNpZ2dEWmNzeityWDVPL3lIZUh2OGtBbHYvQW8vekFBbnIxd0FEcTVjQkdOZjEvNmd2cFA3eGtzOEFSWUcwQUVUemNRQ1FOVWorK3kwT0FCZHVxQUJFUkUvL2JrWmYvcTVia1A4aHpsLy9pU2tIL3hPN21mNGovM0QvQ1pHNS9qS2RKUUFMY0RFQlpnaSsvK3J6cVFFOFZSY0FTaWU5QUhReDd3Q3QxZElBTHFGcy81K1dKUURFZUxuL0ltSUcvNW5EUHY5aDVrZi9aajFNQUJyVTdQK2tZUkFBeGp1U0FLTVh4QUE0R0QwQXRXTEJBUHVUNWY5aXZSai9MamJPLytwUzlnQzNaeVlCYlQ3TUFBcnc0QUNTRm5YL2pwcDRBRVhVSXdEUVkzWUJlZjhELzBnR3dnQjFFY1gvZlE4WEFKcFBtUURXWHNYL3VUZVQvejcrVHY1L1Vwa0FibVkvLzJ4U29mOXB1OVFCVUlvbkFEei9YZjlJRExvQTB2c2ZBYjZua1Ava0xCUCtnRVBvQU5iNWEvNklrVmIvaEM2d0FMMjc0Ly9RRm93QTJkTjBBREpSdXY2TCtoOEFIa0RHQVllYlpBQ2d6aGYrdTZMVC94QzhQd0QrMERFQVZWUy9BUEhBOHYrWmZwRUI2cUtpLytaaDJBRkFoMzRBdnBUZkFUUUFLLzhjSjcwQlFJanVBSy9FdVFCaTR0WC9mNS8wQWVLdlBBQ2c2WTRCdFBQUC8wV1lXUUVmWlJVQWtCbWsvb3UvMFFCYkdYa0FJSk1GQUNlNmUvOC9jK2IvWGFmRy80L1YzUCt6bkJQL0dVSjZBTmFnMmY4Q0xUNy9haytTL2pPSlkvOVhaT2YvcjVIby8yVzRBZit1Q1gwQVVpV2hBU1J5amY4dzNvNy85YnFhQUFXdTNmNC9jcHYvaHplZ0FWQWZod0IrK3JNQjdOb3RBQlFja1FFUWswa0ErYjJFQVJHOXdQL2Zqc2IvU0JRUC8vbzE3ZjRQQ3hJQUc5TngvdFZyT1ArdWs1TC9ZSDR3QUJmQmJRRWxvbDRBeDUzNS9oaUF1Ly9OTWJMK1hhUXEveXQzNndGWXQrMy8ydElCLzJ2K0tnRG1DbVAvb2dEaUFOdnRXd0NCc3NzQTBESmYvczdRWC8vM3YxbitidXBQLzZVOTh3QVVlbkQvOXZhNS9tY0Vld0RwWStZQjIxdjgvOGZlRnYrejllbi8wL0hxQUcvNndQOVZWSWdBWlRveS80T3RuUDUzTFRQL2R1a1EvdkphMWdCZW45c0JBd1BxLzJKTVhQNVFOdVlBQmVUbi9qVVkzLzl4T0hZQkZJUUIvNnZTN0FBNDhaNy91bk1UL3dqbHJnQXdMQUFCY25LbS93Wko0di9OV2ZRQWllTkxBZml0T0FCS2VQYitkd01MLzFGNHh2K0llbUwva3ZIZEFXM0NUdi9mOFVZQjFzaXAvMkcrTC84dlo2Ny9ZMXhJL25icHRQL0JJK24rR3VVZy85Nzh4Z0RNSzBmL3gxU3NBSVptdmdCdjdtSCs1aWptQU9QTlFQN0lET0VBcGhuZUFIRkZNLytQbnhnQXA3aEtBQjNnZFA2ZTBPa0F3WFIrLzlRTGhmOFdPb3dCekNRei8rZ2VLd0RyUnJYL1FEaVMvcWtTVlAvaUFRMy95REt3L3pUVjlmNm8wV0VBdjBjM0FDSk9uQURva0RvQnVVcTlBTHFPbGY1QVJYLy9vY3VULzdDWHZ3Q0k1OHYrbzdhSkFLRisrLzdwSUVJQVJNOUNBQjRjSlFCZGNtQUIvbHozL3l5clJRREtkd3YvdkhZeUFmOVRpUDlIVWhvQVJ1TUNBQ0RyZVFHMUtab0FSNGJsL3NyL0pBQXBtQVVBbWo5Si95SzJmQUI1M1piL0dzelZBU21zVndCYW5aTC9iWUlVQUVkcnlQL3pacjBBQWNPUi9pNVlkUUFJenVNQXYyNzkvMjJBRlA2R1ZUUC9pYkZ3QWRnaUZ2K0RFTkQvZVpXcUFISVRGd0dtVUIvL2NmQjZBT2l6K2dCRWJyVCswcXAzQU45c3BQL1BUK24vRytYaS90RmlVZjlQUkFjQWc3bGtBS29kb3Y4Um9tdi9PUlVMQVdUSXRmOS9RYVlCcFliTUFHaW5xQUFCcEU4QWtvYzdBVVl5Z1A5bWR3Mys0d2FIQUtLT3MvK2daTjRBRytEYkFaNWR3Ly9xallrQUVCaDkvKzdPTC85aEVXTC9kRzRNLzJCelRRQmI0K2ovK1A1UC8xemxCdjVZeG9zQXprdUJBUHBOenYrTjlIc0Jpa1hjQUNDWEJnR0RweGIvN1VTbi9zZTlsZ0NqcTRyL003d0cvMThkaWY2VTRyTUF0V3ZRLzRZZlV2K1haUzMvZ2NyaEFPQklrd0F3aXBmL3cwRE8vdTNhbmdCcUhZbisvYjNwLzJjUEVmL0NZZjhBc2kycC9zYmhtd0FuTUhYL2gycHpBR0VtdFFDV0wwSC9VNExsL3ZZbWdRQmM3NXIrVzJOL0FLRnZJZi91MmZML2c3bkQvOVcvbnY4cGx0b0FoS21EQUZsVS9BR3JSb0Qvby9qTC9nRXl0UDk4VEZVQisyOVFBR05DNy8rYTdiYi8zWDZGL2tyTVkvOUJrM2YvWXppbi8wLzRsZjkwbStULzdTc08va1dKQy84Vyt2RUJXM3FQLzgzNTh3RFVHanovTUxhd0FUQVh2Ly9MZVpqK0xVclYvejVhRXY3MW8rYi91V3AwLzFNam53QU1JUUwvVUNJK0FCQlhydit0WlZVQXlpUlIvcUJGelA5QTRic0FPczVlQUZhUUx3RGxWdlVBUDVHK0FTVUZKd0J0K3hvQWlaUHFBS0o1a2YrUWRNNy94ZWk1LzdlK2pQOUpEUDcvaXhUeS82cGE3LzloUXJ2LzliV0gvdDZJTkFEMUJUUCt5eTlPQUpobDJBQkpGMzBBL21BaEFldlNTZjhyMFZnQkI0RnRBSHBvNVA2cThzc0E4c3lILzhvYzZmOUJCbjhBbjVCSEFHU01Yd0JPbGcwQSsydDJBYlk2ZmY4Qkptei9qYjNSL3dpYmZRRnhvMXYvZVUrKy80YnZiUDlNTC9nQW8rVHZBQkZ2Q2dCWWxVdi8xK3Z2QUtlZkdQOHZsMnovYTlHOEFPbm5ZLzRjeXBUL3JpT0svMjRZUlA4Q1JiVUFhMlpTQUdidEJ3QmNKTzMvM2FKVEFUZktCditINm9mL0dQcmVBRUZlcVA3MStOTC9wMnpKL3YraGJ3RE5DUDRBaUExMEFHU3doUDhyMTM3L3NZV0MvNTVQbEFCRDRDVUJETTRWL3o0aWJnSHRhSy8vVUlSdi80NnVTQUJVNWJUK2FiT01BRUQ0RC8vcGloQUE5VU43L3RwNTFQOC9YOW9CMVlXSi80KzJVdjh3SEFzQTlIS05BZEd2VFArZHRaYi91dVVELzZTZGJ3SG52WXNBZDhxKy85cHFRUDlFNnovK1lCcXMvN3N2Q3dIWEV2di9VVlJaQUVRNmdBQmVjUVVCWElIUS8yRVBVLzRKSEx3QTd3bWtBRHpObUFEQW8yTC91Qkk4QU5tMml3QnRPM2ovQk1EN0FLblM4UDhsckZ6K2xOUDEvN05CTkFEOURYTUF1YTdPQVhLOGxmL3RXcTBBSzhmQS8xaHNjUUEwSTB3QVFobVUvOTBFQi8rWDhYTC92dEhvQUdJeXh3Q1hsdFgvRWtva0FUVW9Cd0FUaDBIL0dxeEZBSzd0VlFCalh5a0FBemdRQUNlZ3NmL0lhdHIrdVVSVS8xdTZQZjVEajQzL0RmU20vMk55eGdESGJxUC93Uks2QUh6djlnRnVSQllBQXVzdUFkUThhd0JwS21rQkR1YVlBQWNGZ3dDTmFKci8xUU1HQUlQa292K3paQndCNTN0Vi84NE8zd0g5WU9ZQUpwaVZBV0tKZWdEV3pRUC80cGl6L3dhRmlRQ2VSWXovY2FLYS83VHpyUDhidlhQL2p5N2MvOVdHNGY5K0hVVUF2Q3VKQWZKR0NRQmF6UC8vNTZxVEFCYzRFLzQ0ZlozL01MUGEvMCsyL2Y4bTFMOEJLZXQ4QUdDWEhBQ0hsTDRBemZrbi9qUmdpUC9VTElqL1E5R0QvL3lDRi8vYmdCVC94b0YyQUd4bEN3Q3lCWklCUGdkay83WHNYdjRjR3FRQVRCWncvM2htVHdES3dPVUJ5TERYQUNsQTlQL091RTRBcHkwL0FhQWpBUDg3REk3L3pBbVEvOXRlNVFGNkczQUF2V2x0LzBEUVN2LzdmemNCQXVMR0FDeE0wUUNYbUUzLzBoY3VBY21yUmY4czArY0F2aVhnLy9YRVB2K3B0ZDcvSXRNUkFIZnh4Zi9sSTVnQkZVVW8vN0xpb1FDVXM4RUEyOEwrQVNqT00vL25YUG9CUTVtcUFCV1U4UUNxUlZML2VSTG4vMXh5QXdDNFB1WUE0Y2xYLzVKZ292KzE4dHdBcmJ2ZEFlSStxdjg0ZnRrQmRRM2ovN01zN3dDZGpadi9rTjFUQU92UjBBQXFFYVVCKzFHRkFIejF5ZjVoMHhqL1U5YW1BSm9rQ2YvNEwzOEFXdHVNLzZIWkp2N1Vrei8vUWxTVUFjOERBUURtaGxrQmYwNTYvK0NiQWY5U2lFb0FzcHpRLzdvWk1mL2VBOUlCNVphKy8xV2lOUDhwVkkzL1NYdFUvbDBSbGdCM0V4d0JJQmJYL3h3WHpQK084VFQvNURSOUFCMU16d0RYcC9yK3I2VG1BRGZQYVFGdHUvWC9vU3pjQVNsbGdQK25FRjRBWGRaci8zWklBUDVRUGVyL2VhOTlBSXVwK3dCaEo1UCsrc1F4LzZXemJ2N2ZScnYvRm81OUFacXppdjkyc0NvQkNxNlpBSnhjWmdDb0RhSC9qeEFnQVByRnRQL0xveXdCVnlBa0FLR1pGUDk3L0E4QUdlTlFBRHhZamdBUkZza0JtczFOL3ljL0x3QUllbzBBZ0JlMi9zd25FLzhFY0IzL0Z5U00vOUxxZFA0MU1qLy9lYXRvLzZEYlhnQlhVZzcrNXlvRkFLV0xmLzVXVGlZQWdqeEMvc3NlTGY4dXhIb0IrVFdpLzRpUFovN1gwbklBNXdlZy9xbVlLdjl2TGZZQWpvT0gvNE5IelA4azRnc0FBQnp5LytHSzFmLzNMdGorOVFPM0FHejhTZ0hPR2pEL3pUYjIvOVBHSlA5NUl6SUFOTmpLL3lhTGdmN3lTWlFBUStlTi95b3Z6QUJPZEJrQkJPRy8vd2FUNUFBNldMRUFlcVhsLy94VHlmL2dwMkFCc2JpZS8vSnBzd0g0eHZBQWhVTExBZjRrTHdBdEdIUC9kejcrQU1UaHV2NTdqYXdBR2xVcC8rSnZ0d0RWNTVjQUJEc0gvKzZLbEFCQ2t5SC9IL2FOLzlHTmRQOW9jQjhBV0tHc0FGUFg1djR2YjVjQUxTWTBBWVF0ekFDS2dHMys2WFdHLy9PK3JmN3g3UEFBVW4vcy9pamZvZjl1dHVIL2U2N3ZBSWZ5a1FFejBab0FsZ056L3Rtay9QODNuRVVCVkY3Ly8raEpMUUVVRTlUL1lNVTcvbUQ3SVFBbXgwa0JRS3ozLzNWME9QL2tFUklBUG9wbkFmYmxwUC8wZHNuK1ZpQ2YvMjBpaVFGVjA3b0FDc0hCL25yQ3NRQjY3bWIvb3RxckFHelpvUUdlcWlJQXNDK2JBYlhrQy84SW5BQUFFRXRkQU01aS93RTZtaU1BRFBPNC9rTjFRdi9tNVhzQXlTcHVBSWJrc3Y2NmJIYi9PaE9hLzFLcFB2OXlqM01CNzhReS82MHd3ZitUQWxUL2xvYVQvbC9vU1FCdDR6VCt2NGtLQUNqTUh2NU1OR0gvcE90K0FQNTh2QUJLdGhVQmVSMGovL0VlQi81VjJ0Yi9CMVNXL2xFYmRmK2duNWorUWhqZC8rTUtQQUdOaDJZQTBMMldBWFd6WEFDRUZvai9lTWNjQUJXQlQvNjJDVUVBMnFPcEFQYVR4djlySnBBQlRxL04vOVlGK3Y0dldCMy9wQy9NL3lzM0J2K0Rocy8rZEdUV0FHQ01Td0ZxM0pBQXd5QWNBYXhSQmYvSHN6VC9KVlRMQUtwd3JnQUxCRnNBUmZRYkFYV0RYQUFobUsvL2pKbHIvL3VISy81WGlnVC94dXFUL25tWVZQL05aWnNCblFrWkFFaHFFZjVzbVFEL3ZlVzZBTUVJc1ArdWxkRUE3b0lkQU9uV2ZnRTk0bVlBT2FNRUFjWnZNLzh0VDA0QmM5SUsvOW9KR2YrZWk4Yi8wMUs3L2xDRlV3Q2RnZVlCODRXRy95aUlFQUJOYTAvL3QxVmNBYkhNeWdDalI1UC9tRVcrQUt3enZBSDYwcXovMC9KeEFWbFpHdjlBUW0vK2RKZ3FBS0VuRy84MlVQNEFhdEZ6QVdkOFlRRGQ1bUwvSCtjR0FMTEFlUDRQMmN2L2ZKNVBBSENSOXdCYytqQUJvN1hCL3lVdmp2NlF2YVgvTHBMd0FBWkxnQUFwbmNqK1YzblZBQUZ4N0FBRkxmb0FrQXhTQUI5czV3RGg3M2YvcHdlOS83dmtoUDl1dlNJQVhpek1BYUkweFFCT3ZQSCtPUlNOQVBTU0x3SE9aRE1BZld1VS9odkRUUUNZL1ZvQkI0K1Evek1sSHdBaWR5Yi9COFYyQUptODB3Q1hGSFQrOVVFMC83VDliZ0V2c2RFQW9XTVIvM2JleWdCOXMvd0JlelorLzVFNXZ3QTN1bmtBQ3ZPS0FNM1Q1Zjk5blBIK2xKeTUvK01UdlA5OEtTRC9IeUxPL2hFNVV3RE1GaVgvS21CaUFIZG11QUVEdmh3QWJsTGEvOGpNd1AvSmtYWUFkY3lTQUlRZ1lnSEF3bmtBYXFINEFlMVlmQUFYMUJvQXphdGEvL2d3MkFHTkplYi9mTXNBL3A2b0h2L1crQlVBY0xzSC8wdUY3LzlLNC9QLytwTkdBTlo0b2dDbkNiUC9GcDRTQU5wTjBRRmhiVkgvOUNHei96azBPZjlCck5MLytVZlIvNDZwN2dDZXZabi9ydjVuL21JaERnQ05UT2IvY1lzMC93ODYxQUNvMThuLytNelhBZDlFb1A4NW1yZitMK2Q1QUdxbWlRQlJpSW9BcFNzekFPZUxQUUE1WHp2K2RtSVovNWMvN0FGZXZ2ci9xYmx5QVFYNk92OUxhV0VCMTkrR0FIRmpvd0dBUG5BQVkycVRBS1BEQ2dBaHpiWUExZzZ1LzRFbTUvODF0dDhBWWlxZi8vY05LQUM4MHJFQkJoVUEvLzg5bFA2SkxZSC9XUnAwL240bWNnRDdNdkwrZVlhQS84ejVwLzZsNjljQXlySHpBSVdOUGdEd2dyNEJicS8vQUFBVWtnRWwwbm4vQnllQ0FJNzZWUCtOeU04QUNWOW8vd3YwcmdDRzZINEFwd0Y3L2hEQmxmL282ZThCMVVady8veDBvUDd5M3R6L3pWWGpBQWU1T2dCMjl6OEJkRTJ4L3o3MXlQNC9FaVgvYXpYby9qTGQwd0NpMndmK0FsNHJBTFkrdHY2Z1Rzai9oNHlxQU91NDVBQ3ZOWXIrVURwTi81akpBZ0UveENJQUJSNjRBS3V3bWdCNU84NEFKbU1uQUt4UVRmNEFocGNBdWlIeC9sNzkzLzhzY3Z3QWJINDUvOGtvRGY4bjVSdi9KKzhYQVpkNU0vK1psdmdBQ3VxdS8zYjJCUDdJOVNZQVJhSHlBUkN5bGdCeE9JSUFxeDlwQUJwWWJQOHhLbW9BKzZsQ0FFVmRsUUFVT2Y0QXBCbHZBRnE4V3YvTUJNVUFLTlV5QWRSZ2hQOVlpclQrNUpKOC83ajI5d0JCZFZiLy9XYlMvdjU1SkFDSmN3UC9QQmpZQUlZU0hRQTc0bUVBc0k1SEFBZlJvUUM5VkRQK20vcElBTlZVNi84dDN1QUE3cFNQLzZvcU5mOU9wM1VBdWdBby8zMnhaLzlGNFVJQTR3ZFlBVXVzQmdDcExlTUJFQ1JHL3pJQ0NmK0x3UllBajdmbi90cEZNZ0RzT0tFQjFZTXFBSXFSTFA2STVTai9NVDhqL3oyUjlmOWx3QUwrNktkeEFKaG9KZ0Y1dWRvQWVZdlQvbmZ3SXdCQnZkbit1N09pLzZDNzVnQSsrQTcvUEU1aEFQLzNvLy9oTzF2L2EwYzYvL0V2SVFFeWRld0EyN0UvL3ZSYXN3QWp3dGYvdlVNeS94ZUhnUUJvdlNYL3VUbkNBQ00rNS8vYytHd0FET2V5QUk5UVd3R0RYV1gva0NjQ0FmLzZzZ0FGRWV6K2l5QXVBTXk4SnY3MWN6VC92M0ZKL3I5c1JmOFdSZlVCRjh1eUFLcGpxZ0JCK0c4QUpXeVovMEFsUlFBQVdENytXWlNRLzc5RTRBSHhKelVBS2N2dC81Rit3di9kS3YzL0dXT1hBR0g5M3dGS2N6SC9CcTlJL3p1d3l3Qjh0L2tCNU9SakFJRU16LzZvd01QL3pMQVEvcGpxcXdCTkpWWC9JWGlILzQ3QzR3RWYxam9BMWJ0OS8rZ3VQUCsrZENyK2w3SVQvek0rN2Y3TTdNRUF3dWc4QUt3aW5mKzlFTGorWndOZi80M3BKUDRwR1F2L0ZjT21BSGIxTFFCRDFaWC9ud3dTLzd1azR3R2dHUVVBREU3REFTdkY0UUF3amluK3hKczgvOS9IRWdHUmlKd0EvSFdwL3BIaTdnRHZGMnNBYmJXOC8rWndNZjVKcXUzLzU3ZmovMURjRkFEQ2EzOEJmODFsQUM0MHhRSFNxeVQvV0FOYS96aVhqUUJndS8vL0trN0lBUDVHUmdIMGZhZ0F6RVNLQVh6WFJnQm1Rc2orRVRUa0FIWGNqLzdMK0hzQU9CS3UvN3FYcFA4ejZOQUJvT1FyLy9rZEdRRkV2ajhBRFFBQUFBRC9BQUFBQVBVQUFBQUFBQUQ3QUFBQUFBQUEvUUFBQUFEekFBQUFBQWNBQUFBQUFBTUFBQUFBOHdBQUFBQUZBRUdMZ1FJTFFBc0FBQUFBQUFzQUFBQUE4d0FBQUFBQUFQMEFBQUFBQVA4QUFBQUFBd0FBQUFEMUFBQUFBQUFBQUE4QUFBQUFBUDhBQUFBQS93QUFBQUFIQUFBQUFBVUFRY3lDQWdzQkFRQkI4SUlDQ3dFQkFFR1Fnd0lMc0FFbTZKV1B3ckluc0VYRDlJbnk3NWp3MWQrc0JkUEdNem14T0FLSWJWUDhCY2NYYW5BOVRkaFB1andMZGcwUVp3OHFJRlA2TERuTXhrN0gvWGVTckFONjdQLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vMy90Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL2YrNy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLzkvN2RQMVhCcGpFbGpXblBlaTN2bmVGQUJCejRRQ0M4SUZFQWpKdlBObjVnbHFPNmZLaElXdVo3c3IrSlQrY3ZOdVBQRTJIVjg2OVUrbDBZTG1yWDlTRGxFZmJENHJqR2dGbTJ1OVFmdXIyWU1mZVNGK0V4bk40RnNpcmlqWG1DK0tRczFsN3lPUlJEZHhMenRON00vN3dMVzgyNG1CcGR1MTZUaTFTUE5id2xZNUdkQUZ0dkVSOFZtYlR4bXZwSUkva2hpQmJkclZYaHlyUWdJRG81aXFCOWkrYjNCRkFWdURFb3l5NUU2K2hURWs0clQvMWNOOURGVnZpWHZ5ZEYyK2NyR1dGanYrc2Q2QU5STEhKYWNHM0p1VUptblBkUEdid2RKSzhaN0JhWnZrNHlWUE9JWkh2dSsxMVl5THhwM0JEMldjckhmTW9Rd2tkUUlyV1c4czZTMkQ1S1p1cW9SMFN0VDdRYjNjcWJCY3RWTVJnOXFJK1hhcjMyYnVVbEUrbUJBeXRDMXR4akdvUHlIN21NZ25BN0RrRHUrK3gzOVp2OEtQcUQzekMrREdKYWNLazBlUnA5VnZnZ1BnVVdQS0JuQnVEZ3BuS1NrVS9DL1NSb1VLdHljbXlTWmNPQ0ViTHUwcXhGcjhiU3hOMzdPVm5STU5PRlBlWTYrTFZITUtaYWl5ZHp5N0NtcDI1cTd0Unk3SndvRTdOWUlVaFN4eWttUUQ4VXloNkwraUFUQkN2RXRtR3FpUmwvalFjSXRMd2pDK1ZBYWpVV3pIR0ZMdjFobm9rdEVRcVdWVkpBYVoxaW9nY1ZlRk5RNzB1Tkc3TW5DZ2FoREkwTks0RnNHa0dWT3JRVkVJYkRjZW1ldU8zMHgzU0Nlb1NKdmh0Ynl3TkdOYXljV3pEQnc1eTRwQjQwcXEyRTV6NDJOM1Q4cWNXNk80c3RiemJ5NW8vTEx2WGU2Q2ozUmdMeGREYjJPbGVIS3I4S0VVZU1pRTdEbGtHZ2dDeDR3b0htTWordisra09tOWd0N3JiRkNrRlhuR3N2ZWorYjRyVTNMajhuaHh4cHhoSnVyT1BpZktCOExBSWNlNGh0RWU2K0ROMW4zYTZualJidTUvVDMzMXVtOFhjcXBuOEFhbW1NaWl4WDFqQ3E0TitiNEVtRDhSRzBjY0V6VUxjUnVFZlFRajlYZmJLSk1reDBCN3E4b3l2TDdKRlFxK25qeE1EUkNjeEdjZFE3WkNQc3UrMU1WTUtuNWwvSndwZjFucyt0WTZxMi9MWHhkWVIwcU1HVVJzZ0FCQnNJc0NDd0VCQUVIUWl3SUx3UUhnNjNwOE8wRzRyaFpXNC9yeG44UnEyZ21ONjV3eXNmMkdZZ1VXWDBtNEFGK2NsYnlqVUl3a3NkQ3hWWnlENzFzRVJGekVXQnlPaHRnaVR0M1FueEZYN1AvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8zL3QvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vZis3Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vOS9VMmxuUldReU5UVXhPU0J1YnlCRlpESTFOVEU1SUdOdmJHeHBjMmx2Ym5NQkFFR2dqUUlMandsVExUNWlkV1pzWlc0Z1BEMGdRa3hCUzBVeVFsOUNURTlEUzBKWlZFVlRBR055ZVhCMGIxOW5aVzVsY21samFHRnphQzlpYkdGclpUSmlMM0psWmk5aWJHRnJaVEppTFhKbFppNWpBR0pzWVd0bE1tSmZabWx1WVd3QWIzVjBiR1Z1SUR3OUlGVkpUbFE0WDAxQldBQmpjbmx3ZEc5ZloyVnVaWEpwWTJoaGMyZ3ZZbXhoYTJVeVlpOXlaV1l2WjJWdVpYSnBZMmhoYzJoZllteGhhMlV5WWk1akFHTnllWEIwYjE5blpXNWxjbWxqYUdGemFGOWliR0ZyWlRKaVgyWnBibUZzQUNSaGNtZHZiakpwWkFBa1lYSm5iMjR5YVFBa2RqMEFKRzA5QUN4MFBRQXNjRDBBSkdGeVoyOXVNbWxrSkhZOUFDUmhjbWR2YmpKcEpIWTlBQ1JoY21kdmJqSnBaQ1FBSkdGeVoyOXVNbWtrQUNKN0lISmxkSFZ5YmlCTmIyUjFiR1V1WjJWMFVtRnVaRzl0Vm1Gc2RXVW9LVHNnZlNJQWV5QnBaaUFvVFc5a2RXeGxMbWRsZEZKaGJtUnZiVlpoYkhWbElEMDlQU0IxYm1SbFptbHVaV1FwSUhzZ2RISjVJSHNnZG1GeUlIZHBibVJ2ZDE4Z1BTQW5iMkpxWldOMEp5QTlQVDBnZEhsd1pXOW1JSGRwYm1SdmR5QS9JSGRwYm1SdmR5QTZJSE5sYkdZN0lIWmhjaUJqY25sd2RHOWZJRDBnZEhsd1pXOW1JSGRwYm1SdmQxOHVZM0o1Y0hSdklDRTlQU0FuZFc1a1pXWnBibVZrSnlBL0lIZHBibVJ2ZDE4dVkzSjVjSFJ2SURvZ2QybHVaRzkzWHk1dGMwTnllWEIwYnpzZ2RtRnlJSEpoYm1SdmJWWmhiSFZsYzFOMFlXNWtZWEprSUQwZ1puVnVZM1JwYjI0b0tTQjdJSFpoY2lCaWRXWWdQU0J1WlhjZ1ZXbHVkRE15UVhKeVlYa29NU2s3SUdOeWVYQjBiMTh1WjJWMFVtRnVaRzl0Vm1Gc2RXVnpLR0oxWmlrN0lISmxkSFZ5YmlCaWRXWmJNRjBnUGo0K0lEQTdJSDA3SUhKaGJtUnZiVlpoYkhWbGMxTjBZVzVrWVhKa0tDazdJRTF2WkhWc1pTNW5aWFJTWVc1a2IyMVdZV3gxWlNBOUlISmhibVJ2YlZaaGJIVmxjMU4wWVc1a1lYSmtPeUI5SUdOaGRHTm9JQ2hsS1NCN0lIUnllU0I3SUhaaGNpQmpjbmx3ZEc4Z1BTQnlaWEYxYVhKbEtDZGpjbmx3ZEc4bktUc2dkbUZ5SUhKaGJtUnZiVlpoYkhWbFRtOWtaVXBUSUQwZ1puVnVZM1JwYjI0b0tTQjdJSFpoY2lCaWRXWWdQU0JqY25sd2RHOWJKM0poYm1SdmJVSjVkR1Z6SjEwb05DazdJSEpsZEhWeWJpQW9ZblZtV3pCZElEdzhJREkwSUh3Z1luVm1XekZkSUR3OElERTJJSHdnWW5WbVd6SmRJRHc4SURnZ2ZDQmlkV1piTTEwcElENCtQaUF3T3lCOU95QnlZVzVrYjIxV1lXeDFaVTV2WkdWS1V5Z3BPeUJOYjJSMWJHVXVaMlYwVW1GdVpHOXRWbUZzZFdVZ1BTQnlZVzVrYjIxV1lXeDFaVTV2WkdWS1V6c2dmU0JqWVhSamFDQW9aU2tnZXlCMGFISnZkeUFuVG04Z2MyVmpkWEpsSUhKaGJtUnZiU0J1ZFcxaVpYSWdaMlZ1WlhKaGRHOXlJR1p2ZFc1a0p6c2dmU0I5SUgwZ2ZRQk1hV0p6YjJScGRXMUVVa2RpZFdaZmJHVnVJRHc5SUZOSldrVmZUVUZZQUhKaGJtUnZiV0o1ZEdWekwzSmhibVJ2YldKNWRHVnpMbU1BY21GdVpHOXRZbmwwWlhNQVlqWTBYM0J2Y3lBOFBTQmlOalJmYkdWdUFITnZaR2wxYlM5amIyUmxZM011WXdCemIyUnBkVzFmWW1sdU1tSmhjMlUyTkFBeExqQXVNVGc9XCI7ZnVuY3Rpb24gZ0EoKXt0cnl7aWYoaClyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoaCk7dmFyIEE9ZUEoSUEpO2lmKEEpcmV0dXJuIEE7aWYocilyZXR1cm4gcihJQSk7dGhyb3dcImJvdGggYXN5bmMgYW5kIHN5bmMgZmV0Y2hpbmcgb2YgdGhlIHdhc20gZmFpbGVkXCJ9Y2F0Y2goQSl7eihBKX19TyhJQSl8fChaPUlBLElBPUMubG9jYXRlRmlsZT9DLmxvY2F0ZUZpbGUoWix3KTp3K1opLEMuYXNtPWZ1bmN0aW9uKCl7dmFyIEE9e2VudjpjQSx3YXNpX3Vuc3RhYmxlOmNBLGdsb2JhbDp7TmFOOk5hTixJbmZpbml0eToxLzB9LFwiZ2xvYmFsLk1hdGhcIjpNYXRoLGFzbTJ3YXNtOkZ9O2Z1bmN0aW9uIEkoQSxJKXt2YXIgZz1BLmV4cG9ydHM7Qy5hc209ZyxmdW5jdGlvbihBKXtpZihULS0sQy5tb25pdG9yUnVuRGVwZW5kZW5jaWVzJiZDLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMoVCksMD09VCYmKG51bGwhPT1xJiYoY2xlYXJJbnRlcnZhbChxKSxxPW51bGwpLFYpKXt2YXIgST1WO1Y9bnVsbCxJKCl9fSgpfWZ1bmN0aW9uIGcoQSl7SShBLmluc3RhbmNlKX1mdW5jdGlvbiBCKEkpe3JldHVybihofHwhbyYmIWN8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGZldGNoP25ldyBQcm9taXNlKGZ1bmN0aW9uKEEsSSl7QShnQSgpKX0pOmZldGNoKElBLHtjcmVkZW50aWFsczpcInNhbWUtb3JpZ2luXCJ9KS50aGVuKGZ1bmN0aW9uKEEpe2lmKCFBLm9rKXRocm93XCJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICdcIitJQStcIidcIjtyZXR1cm4gQS5hcnJheUJ1ZmZlcigpfSkuY2F0Y2goZnVuY3Rpb24oKXtyZXR1cm4gZ0EoKX0pKS50aGVuKGZ1bmN0aW9uKEkpe3JldHVybiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShJLEEpfSkudGhlbihJLGZ1bmN0aW9uKEEpe3MoXCJmYWlsZWQgdG8gYXN5bmNocm9ub3VzbHkgcHJlcGFyZSB3YXNtOiBcIitBKSx6KEEpfSl9aWYoVCsrLEMubW9uaXRvclJ1bkRlcGVuZGVuY2llcyYmQy5tb25pdG9yUnVuRGVwZW5kZW5jaWVzKFQpLEMuaW5zdGFudGlhdGVXYXNtKXRyeXtyZXR1cm4gQy5pbnN0YW50aWF0ZVdhc20oQSxJKX1jYXRjaChBKXtyZXR1cm4gcyhcIk1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6IFwiK0EpLCExfXJldHVybiBmdW5jdGlvbigpe2lmKGh8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nfHxPKElBKXx8XCJmdW5jdGlvblwiIT10eXBlb2YgZmV0Y2gpcmV0dXJuIEIoZyk7ZmV0Y2goSUEse2NyZWRlbnRpYWxzOlwic2FtZS1vcmlnaW5cIn0pLnRoZW4oZnVuY3Rpb24oSSl7cmV0dXJuIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKEksQSkudGhlbihnLGZ1bmN0aW9uKEEpe3MoXCJ3YXNtIHN0cmVhbWluZyBjb21waWxlIGZhaWxlZDogXCIrQSkscyhcImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uXCIpLEIoZyl9KX0pfSgpLHt9fTt2YXIgQkE9W2Z1bmN0aW9uKCl7cmV0dXJuIEMuZ2V0UmFuZG9tVmFsdWUoKX0sZnVuY3Rpb24oKXtpZih2b2lkIDA9PT1DLmdldFJhbmRvbVZhbHVlKXRyeXt2YXIgQT1cIm9iamVjdFwiPT10eXBlb2Ygd2luZG93P3dpbmRvdzpzZWxmLEk9dm9pZCAwIT09QS5jcnlwdG8/QS5jcnlwdG86QS5tc0NyeXB0byxnPWZ1bmN0aW9uKCl7dmFyIEE9bmV3IFVpbnQzMkFycmF5KDEpO3JldHVybiBJLmdldFJhbmRvbVZhbHVlcyhBKSxBWzBdPj4+MH07ZygpLEMuZ2V0UmFuZG9tVmFsdWU9Z31jYXRjaChBKXt0cnl7dmFyIEI9cmVxdWlyZShcImNyeXB0b1wiKSxRPWZ1bmN0aW9uKCl7dmFyIEE9Qi5yYW5kb21CeXRlcyg0KTtyZXR1cm4oQVswXTw8MjR8QVsxXTw8MTZ8QVsyXTw8OHxBWzNdKT4+PjB9O1EoKSxDLmdldFJhbmRvbVZhbHVlPVF9Y2F0Y2goQSl7dGhyb3dcIk5vIHNlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRvciBmb3VuZFwifX19XTtmdW5jdGlvbiBDQSgpe3JldHVybiBsLmxlbmd0aH12YXIgUUE9ITE7ZnVuY3Rpb24gRUEoQSl7Zm9yKHZhciBJPVtdLGc9MDtnPEEubGVuZ3RoO2crKyl7dmFyIEI9QVtnXTtCPjI1NSYmKFFBJiZIKCExLFwiQ2hhcmFjdGVyIGNvZGUgXCIrQitcIiAoXCIrU3RyaW5nLmZyb21DaGFyQ29kZShCKStcIikgIGF0IG9mZnNldCBcIitnK1wiIG5vdCBpbiAweDAwLTB4RkYuXCIpLEImPTI1NSksSS5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoQikpfXJldHVybiBJLmpvaW4oXCJcIil9dmFyIGlBPVwiZnVuY3Rpb25cIj09dHlwZW9mIGF0b2I/YXRvYjpmdW5jdGlvbihBKXt2YXIgSSxnLEIsQyxRLEUsaT1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCIsZT1cIlwiLG89MDtBPUEucmVwbGFjZSgvW15BLVphLXowLTlcXCtcXC9cXD1dL2csXCJcIik7ZG97ST1pLmluZGV4T2YoQS5jaGFyQXQobysrKSk8PDJ8KEM9aS5pbmRleE9mKEEuY2hhckF0KG8rKykpKT4+NCxnPSgxNSZDKTw8NHwoUT1pLmluZGV4T2YoQS5jaGFyQXQobysrKSkpPj4yLEI9KDMmUSk8PDZ8KEU9aS5pbmRleE9mKEEuY2hhckF0KG8rKykpKSxlKz1TdHJpbmcuZnJvbUNoYXJDb2RlKEkpLDY0IT09USYmKGUrPVN0cmluZy5mcm9tQ2hhckNvZGUoZykpLDY0IT09RSYmKGUrPVN0cmluZy5mcm9tQ2hhckNvZGUoQikpfXdoaWxlKG88QS5sZW5ndGgpO3JldHVybiBlfTtmdW5jdGlvbiBlQShBKXtpZihPKEEpKXJldHVybiBmdW5jdGlvbihBKXtpZihcImJvb2xlYW5cIj09dHlwZW9mIGEmJmEpe3ZhciBJO3RyeXtJPUJ1ZmZlci5mcm9tKEEsXCJiYXNlNjRcIil9Y2F0Y2goZyl7ST1uZXcgQnVmZmVyKEEsXCJiYXNlNjRcIil9cmV0dXJuIG5ldyBVaW50OEFycmF5KEkuYnVmZmVyLEkuYnl0ZU9mZnNldCxJLmJ5dGVMZW5ndGgpfXRyeXtmb3IodmFyIGc9aUEoQSksQj1uZXcgVWludDhBcnJheShnLmxlbmd0aCksQz0wO0M8Zy5sZW5ndGg7KytDKUJbQ109Zy5jaGFyQ29kZUF0KEMpO3JldHVybiBCfWNhdGNoKEEpe3Rocm93IG5ldyBFcnJvcihcIkNvbnZlcnRpbmcgYmFzZTY0IHN0cmluZyB0byBieXRlcyBmYWlsZWQuXCIpfX0oQS5zbGljZShXLmxlbmd0aCkpfXZhciBvQSxjQT17YzpmdW5jdGlvbihBLEksZyxCKXt6KFwiQXNzZXJ0aW9uIGZhaWxlZDogXCIrVShBKStcIiwgYXQ6IFwiK1tJP1UoSSk6XCJ1bmtub3duIGZpbGVuYW1lXCIsZyxCP1UoQik6XCJ1bmtub3duIGZ1bmN0aW9uXCJdKX0sX19tZW1vcnlfYmFzZToxMDI0LF9fdGFibGVfYmFzZTowLGE6ZnVuY3Rpb24oKXt6KCl9LGI6ZnVuY3Rpb24oQSl7cmV0dXJuIEJBW0FdKCl9LGc6Q0EsZjpmdW5jdGlvbihBLEksZyl7Xy5zZXQoXy5zdWJhcnJheShJLEkrZyksQSl9LGU6ZnVuY3Rpb24oQSl7dmFyIEk9Q0EoKTtpZihBPjIxNDc0MTgxMTIpcmV0dXJuITE7Zm9yKHZhciBnPU1hdGgubWF4KEksMTY3NzcyMTYpO2c8QTspZz1nPD01MzY4NzA5MTI/digyKmcsNjU1MzYpOk1hdGgubWluKHYoKDMqZysyMTQ3NDgzNjQ4KS80LDY1NTM2KSwyMTQ3NDE4MTEyKTtyZXR1cm4hIWZ1bmN0aW9uKEEpe3RyeXtyZXR1cm4gRC5ncm93KEEtay5ieXRlTGVuZ3RoKzY1NTM1Pj4xNiksYihELmJ1ZmZlciksMX1jYXRjaChBKXt9fShnKX0sZDpmdW5jdGlvbihBKXtzd2l0Y2goQSl7Y2FzZSAzMDpyZXR1cm4gMTYzODQ7Y2FzZSA4NTpyZXR1cm4gMTMxMDY4O2Nhc2UgMTMyOmNhc2UgMTMzOmNhc2UgMTI6Y2FzZSAxMzc6Y2FzZSAxMzg6Y2FzZSAxNTpjYXNlIDIzNTpjYXNlIDE2OmNhc2UgMTc6Y2FzZSAxODpjYXNlIDE5OmNhc2UgMjA6Y2FzZSAxNDk6Y2FzZSAxMzpjYXNlIDEwOmNhc2UgMjM2OmNhc2UgMTUzOmNhc2UgOTpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAxNTk6Y2FzZSAxNTQ6Y2FzZSAxNDpjYXNlIDc3OmNhc2UgNzg6Y2FzZSAxMzk6Y2FzZSA4MDpjYXNlIDgxOmNhc2UgODI6Y2FzZSA2ODpjYXNlIDY3OmNhc2UgMTY0OmNhc2UgMTE6Y2FzZSAyOTpjYXNlIDQ3OmNhc2UgNDg6Y2FzZSA5NTpjYXNlIDUyOmNhc2UgNTE6Y2FzZSA0NjpyZXR1cm4gMjAwODA5O2Nhc2UgNzk6cmV0dXJuIDA7Y2FzZSAyNzpjYXNlIDI0NjpjYXNlIDEyNzpjYXNlIDEyODpjYXNlIDIzOmNhc2UgMjQ6Y2FzZSAxNjA6Y2FzZSAxNjE6Y2FzZSAxODE6Y2FzZSAxODI6Y2FzZSAyNDI6Y2FzZSAxODM6Y2FzZSAxODQ6Y2FzZSAyNDM6Y2FzZSAyNDQ6Y2FzZSAyNDU6Y2FzZSAxNjU6Y2FzZSAxNzg6Y2FzZSAxNzk6Y2FzZSA0OTpjYXNlIDUwOmNhc2UgMTY4OmNhc2UgMTY5OmNhc2UgMTc1OmNhc2UgMTcwOmNhc2UgMTcxOmNhc2UgMTcyOmNhc2UgOTc6Y2FzZSA3NjpjYXNlIDMyOmNhc2UgMTczOmNhc2UgMzU6cmV0dXJuLTE7Y2FzZSAxNzY6Y2FzZSAxNzc6Y2FzZSA3OmNhc2UgMTU1OmNhc2UgODpjYXNlIDE1NzpjYXNlIDEyNTpjYXNlIDEyNjpjYXNlIDkyOmNhc2UgOTM6Y2FzZSAxMjk6Y2FzZSAxMzA6Y2FzZSAxMzE6Y2FzZSA5NDpjYXNlIDkxOnJldHVybiAxO2Nhc2UgNzQ6Y2FzZSA2MDpjYXNlIDY5OmNhc2UgNzA6Y2FzZSA0OnJldHVybiAxMDI0O2Nhc2UgMzE6Y2FzZSA0MjpjYXNlIDcyOnJldHVybiAzMjtjYXNlIDg3OmNhc2UgMjY6Y2FzZSAzMzpyZXR1cm4gMjE0NzQ4MzY0NztjYXNlIDM0OmNhc2UgMTpyZXR1cm4gNDc4Mzk7Y2FzZSAzODpjYXNlIDM2OnJldHVybiA5OTtjYXNlIDQzOmNhc2UgMzc6cmV0dXJuIDIwNDg7Y2FzZSAwOnJldHVybiAyMDk3MTUyO2Nhc2UgMzpyZXR1cm4gNjU1MzY7Y2FzZSAyODpyZXR1cm4gMzI3Njg7Y2FzZSA0NDpyZXR1cm4gMzI3Njc7Y2FzZSA3NTpyZXR1cm4gMTYzODQ7Y2FzZSAzOTpyZXR1cm4gMWUzO2Nhc2UgODk6cmV0dXJuIDcwMDtjYXNlIDcxOnJldHVybiAyNTY7Y2FzZSA0MDpyZXR1cm4gMjU1O2Nhc2UgMjpyZXR1cm4gMTAwO2Nhc2UgMTgwOnJldHVybiA2NDtjYXNlIDI1OnJldHVybiAyMDtjYXNlIDU6cmV0dXJuIDE2O2Nhc2UgNjpyZXR1cm4gNjtjYXNlIDczOnJldHVybiA0O2Nhc2UgODQ6cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIG5hdmlnYXRvciYmbmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3l8fDF9cmV0dXJuIEMuX19fZXJybm9fbG9jYXRpb24mJihkW0MuX19fZXJybm9fbG9jYXRpb24oKT4+Ml09MjgpLC0xfSxtZW1vcnk6RCx0YWJsZTpwfSxhQT1DLmFzbSh7fSxjQSxrKTtmdW5jdGlvbiBuQShBKXtmdW5jdGlvbiBJKCl7b0F8fChvQT0hMCx1fHwoUChOKSxQKG0pLEMub25SdW50aW1lSW5pdGlhbGl6ZWQmJkMub25SdW50aW1lSW5pdGlhbGl6ZWQoKSxmdW5jdGlvbigpe2lmKEMucG9zdFJ1bilmb3IoXCJmdW5jdGlvblwiPT10eXBlb2YgQy5wb3N0UnVuJiYoQy5wb3N0UnVuPVtDLnBvc3RSdW5dKTtDLnBvc3RSdW4ubGVuZ3RoOylBPUMucG9zdFJ1bi5zaGlmdCgpLEwudW5zaGlmdChBKTt2YXIgQTtQKEwpfSgpKSl9QT1BfHxlLFQ+MHx8KGZ1bmN0aW9uKCl7aWYoQy5wcmVSdW4pZm9yKFwiZnVuY3Rpb25cIj09dHlwZW9mIEMucHJlUnVuJiYoQy5wcmVSdW49W0MucHJlUnVuXSk7Qy5wcmVSdW4ubGVuZ3RoOylBPUMucHJlUnVuLnNoaWZ0KCksUi51bnNoaWZ0KEEpO3ZhciBBO1AoUil9KCksVD4wfHwoQy5zZXRTdGF0dXM/KEMuc2V0U3RhdHVzKFwiUnVubmluZy4uLlwiKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7c2V0VGltZW91dChmdW5jdGlvbigpe0Muc2V0U3RhdHVzKFwiXCIpfSwxKSxJKCl9LDEpKTpJKCkpKX1pZihDLmFzbT1hQSxDLl9fX2Vycm5vX2xvY2F0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLmguYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2FieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5pLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9kZWNyeXB0PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLmouYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2RlY3J5cHRfZGV0YWNoZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uay5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfZW5jcnlwdD1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5sLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9lbmNyeXB0X2RldGFjaGVkPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLm0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfYWJ5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLm4uYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfZGVjcnlwdD1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5vLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX2RlY3J5cHRfZGV0YWNoZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20ucC5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfaWV0Zl9lbmNyeXB0PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfZW5jcnlwdF9kZXRhY2hlZD1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5yLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX2tleWJ5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnMuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfa2V5Z2VuPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnQuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYWVhZF9jaGFjaGEyMHBvbHkxMzA1X2lldGZfbWVzc2FnZWJ5dGVzX21heD1mdW5jdGlvbigpe3JldHVybiBDLmFzbS51LmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX25wdWJieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS52LmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9pZXRmX25zZWNieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS53LmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9rZXlieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS54LmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9rZXlnZW49ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20ueS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfbWVzc2FnZWJ5dGVzX21heD1mdW5jdGlvbigpe3JldHVybiBDLmFzbS56LmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2FlYWRfY2hhY2hhMjBwb2x5MTMwNV9ucHViYnl0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uQS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19hZWFkX2NoYWNoYTIwcG9seTEzMDVfbnNlY2J5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLkIuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2FieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5DLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9kZWNyeXB0PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLkQuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2RlY3J5cHRfZGV0YWNoZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uRS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19hZWFkX3hjaGFjaGEyMHBvbHkxMzA1X2lldGZfZW5jcnlwdD1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5GLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9lbmNyeXB0X2RldGFjaGVkPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLkcuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2tleWJ5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLkguYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX2tleWdlbj1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5JLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9tZXNzYWdlYnl0ZXNfbWF4PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLkouYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYWVhZF94Y2hhY2hhMjBwb2x5MTMwNV9pZXRmX25wdWJieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5LLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2FlYWRfeGNoYWNoYTIwcG9seTEzMDVfaWV0Zl9uc2VjYnl0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uTC5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19hdXRoPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLk0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYXV0aF9ieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5OLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2F1dGhfa2V5Ynl0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uTy5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19hdXRoX2tleWdlbj1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5QLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2F1dGhfdmVyaWZ5PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLlEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYm94X2JlZm9yZW5tPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLlIuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYm94X2JlZm9yZW5tYnl0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uUy5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19ib3hfZGV0YWNoZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uVC5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19ib3hfZGV0YWNoZWRfYWZ0ZXJubT1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5VLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2JveF9lYXN5PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLlYuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYm94X2Vhc3lfYWZ0ZXJubT1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5XLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2JveF9rZXlwYWlyPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLlguYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYm94X21hY2J5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLlkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYm94X21lc3NhZ2VieXRlc19tYXg9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uWi5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19ib3hfbm9uY2VieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5fLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2JveF9vcGVuX2RldGFjaGVkPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLiQuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYm94X29wZW5fZGV0YWNoZWRfYWZ0ZXJubT1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5hYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19ib3hfb3Blbl9lYXN5PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLmJhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2JveF9vcGVuX2Vhc3lfYWZ0ZXJubT1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5jYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19ib3hfcHVibGlja2V5Ynl0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uZGEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYm94X3NlYWw9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uZWEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fYm94X3NlYWxfb3Blbj1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5mYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19ib3hfc2VhbGJ5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLmdhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2JveF9zZWNyZXRrZXlieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5oYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19ib3hfc2VlZF9rZXlwYWlyPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLmlhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2JveF9zZWVkYnl0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uamEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fZ2VuZXJpY2hhc2g9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20ua2EuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fZ2VuZXJpY2hhc2hfYnl0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20ubGEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fZ2VuZXJpY2hhc2hfYnl0ZXNfbWF4PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLm1hLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2dlbmVyaWNoYXNoX2J5dGVzX21pbj1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5uYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19nZW5lcmljaGFzaF9maW5hbD1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5vYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19nZW5lcmljaGFzaF9pbml0PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnBhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2dlbmVyaWNoYXNoX2tleWJ5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnFhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2dlbmVyaWNoYXNoX2tleWJ5dGVzX21heD1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5yYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19nZW5lcmljaGFzaF9rZXlieXRlc19taW49ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uc2EuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fZ2VuZXJpY2hhc2hfa2V5Z2VuPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnRhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2dlbmVyaWNoYXNoX3N0YXRlYnl0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20udWEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fZ2VuZXJpY2hhc2hfdXBkYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnZhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2hhc2g9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20ud2EuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9faGFzaF9ieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS54YS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19rZGZfYnl0ZXNfbWF4PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnlhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2tkZl9ieXRlc19taW49ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uemEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fa2RmX2NvbnRleHRieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5BYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19rZGZfZGVyaXZlX2Zyb21fa2V5PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLkJhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2tkZl9rZXlieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5DYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19rZGZfa2V5Z2VuPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLkRhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2t4X2NsaWVudF9zZXNzaW9uX2tleXM9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uRWEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fa3hfa2V5cGFpcj1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5GYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19reF9wdWJsaWNrZXlieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5HYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19reF9zZWNyZXRrZXlieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5IYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19reF9zZWVkX2tleXBhaXI9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uSWEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fa3hfc2VlZGJ5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLkphLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX2t4X3NlcnZlcl9zZXNzaW9uX2tleXM9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uS2EuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fa3hfc2Vzc2lvbmtleWJ5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLkxhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3B3aGFzaD1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5NYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19wd2hhc2hfYWxnX2FyZ29uMmkxMz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5OYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19wd2hhc2hfYWxnX2FyZ29uMmlkMTM9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uT2EuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fcHdoYXNoX2FsZ19kZWZhdWx0PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLlBhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3B3aGFzaF9ieXRlc19tYXg9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uUWEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fcHdoYXNoX2J5dGVzX21pbj1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5SYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19wd2hhc2hfbWVtbGltaXRfaW50ZXJhY3RpdmU9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uU2EuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fcHdoYXNoX21lbWxpbWl0X21heD1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5UYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19wd2hhc2hfbWVtbGltaXRfbWluPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLlVhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3B3aGFzaF9tZW1saW1pdF9tb2RlcmF0ZT1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5WYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19wd2hhc2hfbWVtbGltaXRfc2Vuc2l0aXZlPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLldhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3B3aGFzaF9vcHNsaW1pdF9pbnRlcmFjdGl2ZT1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5YYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19wd2hhc2hfb3BzbGltaXRfbWF4PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLllhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3B3aGFzaF9vcHNsaW1pdF9taW49ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uWmEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fcHdoYXNoX29wc2xpbWl0X21vZGVyYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLl9hLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3B3aGFzaF9vcHNsaW1pdF9zZW5zaXRpdmU9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uJGEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fcHdoYXNoX3Bhc3N3ZF9tYXg9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uYWIuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fcHdoYXNoX3Bhc3N3ZF9taW49ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uYmIuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fcHdoYXNoX3NhbHRieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5jYi5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19wd2hhc2hfc3RyPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLmRiLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3B3aGFzaF9zdHJfYWxnPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLmViLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3B3aGFzaF9zdHJfbmVlZHNfcmVoYXNoPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLmZiLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3B3aGFzaF9zdHJfdmVyaWZ5PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLmdiLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3B3aGFzaF9zdHJieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5oYi5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19wd2hhc2hfc3RycHJlZml4PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLmliLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NjYWxhcm11bHQ9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uamIuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fc2NhbGFybXVsdF9iYXNlPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLmtiLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NjYWxhcm11bHRfYnl0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20ubGIuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fc2NhbGFybXVsdF9zY2FsYXJieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5tYi5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19zZWNyZXRib3hfZGV0YWNoZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20ubmIuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fc2VjcmV0Ym94X2Vhc3k9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20ub2IuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fc2VjcmV0Ym94X2tleWJ5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnBiLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NlY3JldGJveF9rZXlnZW49ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20ucWIuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fc2VjcmV0Ym94X21hY2J5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnJiLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NlY3JldGJveF9tZXNzYWdlYnl0ZXNfbWF4PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnNiLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NlY3JldGJveF9ub25jZWJ5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnRiLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NlY3JldGJveF9vcGVuX2RldGFjaGVkPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnViLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NlY3JldGJveF9vcGVuX2Vhc3k9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20udmIuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X2FieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS53Yi5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfaGVhZGVyYnl0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20ueGIuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X2luaXRfcHVsbD1mdW5jdGlvbigpe3JldHVybiBDLmFzbS55Yi5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfaW5pdF9wdXNoPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnpiLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9rZXlieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5BYi5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfa2V5Z2VuPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLkJiLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9tZXNzYWdlYnl0ZXNfbWF4PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLkNiLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9wdWxsPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLkRiLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9wdXNoPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLkViLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV9yZWtleT1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5GYi5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfc3RhdGVieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5HYi5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfdGFnX2ZpbmFsPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLkhiLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NlY3JldHN0cmVhbV94Y2hhY2hhMjBwb2x5MTMwNV90YWdfbWVzc2FnZT1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5JYi5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19zZWNyZXRzdHJlYW1feGNoYWNoYTIwcG9seTEzMDVfdGFnX3B1c2g9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uSmIuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fc2VjcmV0c3RyZWFtX3hjaGFjaGEyMHBvbHkxMzA1X3RhZ19yZWtleT1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5LYi5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19zaG9ydGhhc2g9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uTGIuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fc2hvcnRoYXNoX2J5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLk1iLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3Nob3J0aGFzaF9rZXlieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5OYi5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19zaG9ydGhhc2hfa2V5Z2VuPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLk9iLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NpZ249ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uUGIuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fc2lnbl9ieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5RYi5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19zaWduX2RldGFjaGVkPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLlJiLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NpZ25fZWQyNTUxOV9wa190b19jdXJ2ZTI1NTE5PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLlNiLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NpZ25fZWQyNTUxOV9za190b19jdXJ2ZTI1NTE5PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLlRiLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NpZ25fZmluYWxfY3JlYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLlViLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NpZ25fZmluYWxfdmVyaWZ5PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLlZiLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NpZ25faW5pdD1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5XYi5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19zaWduX2tleXBhaXI9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uWGIuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fc2lnbl9tZXNzYWdlYnl0ZXNfbWF4PWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLlliLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NpZ25fb3Blbj1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5aYi5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX2NyeXB0b19zaWduX3B1YmxpY2tleWJ5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLl9iLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NpZ25fc2VjcmV0a2V5Ynl0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uJGIuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fc2lnbl9zZWVkX2tleXBhaXI9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uYWMuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fc2lnbl9zZWVkYnl0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uYmMuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9jcnlwdG9fc2lnbl9zdGF0ZWJ5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLmNjLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NpZ25fdXBkYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLmRjLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fY3J5cHRvX3NpZ25fdmVyaWZ5X2RldGFjaGVkPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLmVjLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fZnJlZT1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5mYy5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX21hbGxvYz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5nYy5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX3JhbmRvbWJ5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLmhjLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fcmFuZG9tYnl0ZXNfYnVmPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLmljLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fcmFuZG9tYnl0ZXNfYnVmX2RldGVybWluaXN0aWM9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20uamMuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9yYW5kb21ieXRlc19jbG9zZT1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5rYy5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX3JhbmRvbWJ5dGVzX3JhbmRvbT1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5sYy5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX3JhbmRvbWJ5dGVzX3NlZWRieXRlcz1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5tYy5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX3JhbmRvbWJ5dGVzX3N0aXI9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20ubmMuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9yYW5kb21ieXRlc191bmlmb3JtPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLm9jLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fc29kaXVtX2Jhc2U2NDJiaW49ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20ucGMuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9zb2RpdW1fYmFzZTY0X2VuY29kZWRfbGVuPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnFjLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fc29kaXVtX2JpbjJiYXNlNjQ9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20ucmMuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9zb2RpdW1fYmluMmhleD1mdW5jdGlvbigpe3JldHVybiBDLmFzbS5zYy5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX3NvZGl1bV9oZXgyYmluPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnRjLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fc29kaXVtX2luaXQ9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20udWMuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9zb2RpdW1fbGlicmFyeV9taW5pbWFsPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnZjLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fc29kaXVtX2xpYnJhcnlfdmVyc2lvbl9tYWpvcj1mdW5jdGlvbigpe3JldHVybiBDLmFzbS53Yy5hcHBseShudWxsLGFyZ3VtZW50cyl9LEMuX3NvZGl1bV9saWJyYXJ5X3ZlcnNpb25fbWlub3I9ZnVuY3Rpb24oKXtyZXR1cm4gQy5hc20ueGMuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDLl9zb2RpdW1fcGFkPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnljLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fc29kaXVtX3VucGFkPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLnpjLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5fc29kaXVtX3ZlcnNpb25fc3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIEMuYXNtLkFjLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQy5hc209YUEsQy5zZXRWYWx1ZT1mdW5jdGlvbihBLEksZyxCKXtzd2l0Y2goXCIqXCI9PT0oZz1nfHxcImk4XCIpLmNoYXJBdChnLmxlbmd0aC0xKSYmKGc9XCJpMzJcIiksZyl7Y2FzZVwiaTFcIjpjYXNlXCJpOFwiOmxbQT4+MF09STticmVhaztjYXNlXCJpMTZcIjpHW0E+PjFdPUk7YnJlYWs7Y2FzZVwiaTMyXCI6ZFtBPj4yXT1JO2JyZWFrO2Nhc2VcImk2NFwiOkFBPVtJPj4+MCwoJD1JLCt4KCQpPj0xPyQ+MD8oMHxqKCtYKCQvNDI5NDk2NzI5NiksNDI5NDk2NzI5NSkpPj4+MDp+fitLKCgkLSsofn4kPj4+MCkpLzQyOTQ5NjcyOTYpPj4+MDowKV0sZFtBPj4yXT1BQVswXSxkW0ErND4+Ml09QUFbMV07YnJlYWs7Y2FzZVwiZmxvYXRcIjpZW0E+PjJdPUk7YnJlYWs7Y2FzZVwiZG91YmxlXCI6TVtBPj4zXT1JO2JyZWFrO2RlZmF1bHQ6eihcImludmFsaWQgdHlwZSBmb3Igc2V0VmFsdWU6IFwiK2cpfX0sQy5nZXRWYWx1ZT1mdW5jdGlvbihBLEksZyl7c3dpdGNoKFwiKlwiPT09KEk9SXx8XCJpOFwiKS5jaGFyQXQoSS5sZW5ndGgtMSkmJihJPVwiaTMyXCIpLEkpe2Nhc2VcImkxXCI6Y2FzZVwiaThcIjpyZXR1cm4gbFtBPj4wXTtjYXNlXCJpMTZcIjpyZXR1cm4gR1tBPj4xXTtjYXNlXCJpMzJcIjpjYXNlXCJpNjRcIjpyZXR1cm4gZFtBPj4yXTtjYXNlXCJmbG9hdFwiOnJldHVybiBZW0E+PjJdO2Nhc2VcImRvdWJsZVwiOnJldHVybiBNW0E+PjNdO2RlZmF1bHQ6eihcImludmFsaWQgdHlwZSBmb3IgZ2V0VmFsdWU6IFwiK0kpfXJldHVybiBudWxsfSxDLlVURjhUb1N0cmluZz1VLFY9ZnVuY3Rpb24gQSgpe29BfHxuQSgpLG9BfHwoVj1BKX0sQy5ydW49bkEsQy5wcmVJbml0KWZvcihcImZ1bmN0aW9uXCI9PXR5cGVvZiBDLnByZUluaXQmJihDLnByZUluaXQ9W0MucHJlSW5pdF0pO0MucHJlSW5pdC5sZW5ndGg+MDspQy5wcmVJbml0LnBvcCgpKCk7bkEoKX0pLmNhdGNoKGZ1bmN0aW9uKCl7Qi51c2VCYWNrdXBNb2R1bGUoKX0pLFwib2JqZWN0XCI9PXR5cGVvZiBwcm9jZXNzJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBwcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyYmKHByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzKFwidW5jYXVnaHRFeGNlcHRpb25cIikscHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJ1bmhhbmRsZWRSZWplY3Rpb25cIikpLEl9XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJleHBvcnRzXCJdLEkpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInN0cmluZ1wiIT10eXBlb2YgZXhwb3J0cy5ub2RlTmFtZT9JKGV4cG9ydHMpOkEubGlic29kaXVtPUkoQS5saWJzb2RpdW1fbW9kfHwoQS5jb21tb25Kc1N0cmljdD17fSkpfSh0aGlzKTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCIvKiAoaWdub3JlZCkgKi8iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5mdW5jdGlvbiBjb3B5QnVmZmVyKHNyYywgdGFyZ2V0LCBvZmZzZXQpIHtcbiAgc3JjLmNvcHkodGFyZ2V0LCBvZmZzZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQnVmZmVyTGlzdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnVmZmVyTGlzdCk7XG5cbiAgICB0aGlzLmhlYWQgPSBudWxsO1xuICAgIHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2godikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogbnVsbCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHRoaXMudGFpbC5uZXh0ID0gZW50cnk7ZWxzZSB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiB1bnNoaWZ0KHYpIHtcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IHRoaXMuaGVhZCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgdGhpcy50YWlsID0gZW50cnk7XG4gICAgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uIHNoaWZ0KCkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHZhciByZXQgPSB0aGlzLmhlYWQuZGF0YTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDtcbiAgICAtLXRoaXMubGVuZ3RoO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gam9pbihzKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIHJldCA9ICcnICsgcC5kYXRhO1xuICAgIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgICByZXQgKz0gcyArIHAuZGF0YTtcbiAgICB9cmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQobikge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHJldHVybiB0aGlzLmhlYWQuZGF0YTtcbiAgICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4gPj4+IDApO1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAocCkge1xuICAgICAgY29weUJ1ZmZlcihwLmRhdGEsIHJldCwgaSk7XG4gICAgICBpICs9IHAuZGF0YS5sZW5ndGg7XG4gICAgICBwID0gcC5uZXh0O1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIHJldHVybiBCdWZmZXJMaXN0O1xufSgpO1xuXG5pZiAodXRpbCAmJiB1dGlsLmluc3BlY3QgJiYgdXRpbC5pbnNwZWN0LmN1c3RvbSkge1xuICBtb2R1bGUuZXhwb3J0cy5wcm90b3R5cGVbdXRpbC5pbnNwZWN0LmN1c3RvbV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9iaiA9IHV0aWwuaW5zcGVjdCh7IGxlbmd0aDogdGhpcy5sZW5ndGggfSk7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZSArICcgJyArIG9iajtcbiAgfTtcbn0iLCIvKiAoaWdub3JlZCkgKi8iLCJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZTtcblxuLyoqXG4gKiBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICogUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLm5vRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRocm93RGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgdGhyb3cgYW4gRXJyb3Igd2hlbiBpbnZva2VkLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudHJhY2VEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCBpbnZva2UgYGNvbnNvbGUudHJhY2UoKWAgaW5zdGVhZCBvZiBgY29uc29sZS5lcnJvcigpYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIHRoZSBmdW5jdGlvbiB0byBkZXByZWNhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgLSB0aGUgc3RyaW5nIHRvIHByaW50IHRvIHRoZSBjb25zb2xlIHdoZW4gYGZuYCBpcyBpbnZva2VkXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGEgbmV3IFwiZGVwcmVjYXRlZFwiIHZlcnNpb24gb2YgYGZuYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkZXByZWNhdGUgKGZuLCBtc2cpIHtcbiAgaWYgKGNvbmZpZygnbm9EZXByZWNhdGlvbicpKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAoY29uZmlnKCd0aHJvd0RlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKGNvbmZpZygndHJhY2VEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgYGxvY2FsU3RvcmFnZWAgZm9yIGJvb2xlYW4gdmFsdWVzIGZvciB0aGUgZ2l2ZW4gYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbmZpZyAobmFtZSkge1xuICAvLyBhY2Nlc3NpbmcgZ2xvYmFsLmxvY2FsU3RvcmFnZSBjYW4gdHJpZ2dlciBhIERPTUV4Y2VwdGlvbiBpbiBzYW5kYm94ZWQgaWZyYW1lc1xuICB0cnkge1xuICAgIGlmICghZ2xvYmFsLmxvY2FsU3RvcmFnZSkgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB2YWwgPSBnbG9iYWwubG9jYWxTdG9yYWdlW25hbWVdO1xuICBpZiAobnVsbCA9PSB2YWwpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIFN0cmluZyh2YWwpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHBhc3N0aHJvdWdoIHN0cmVhbS5cbi8vIGJhc2ljYWxseSBqdXN0IHRoZSBtb3N0IG1pbmltYWwgc29ydCBvZiBUcmFuc2Zvcm0gc3RyZWFtLlxuLy8gRXZlcnkgd3JpdHRlbiBjaHVuayBnZXRzIG91dHB1dCBhcy1pcy5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhc3NUaHJvdWdoO1xuXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9fc3RyZWFtX3RyYW5zZm9ybScpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoUGFzc1Rocm91Z2gsIFRyYW5zZm9ybSk7XG5cbmZ1bmN0aW9uIFBhc3NUaHJvdWdoKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBhc3NUaHJvdWdoKSkgcmV0dXJuIG5ldyBQYXNzVGhyb3VnaChvcHRpb25zKTtcblxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxuUGFzc1Rocm91Z2gucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihudWxsLCBjaHVuayk7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWRhYmxlJykuVHJhbnNmb3JtXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVhZGFibGUnKS5QYXNzVGhyb3VnaFxuIiwiLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMCwgYXMgZGVmaW5lZFxuICogaW4gRklQUyBQVUIgMTgwLTFcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgZGVyaXZlZCBmcm9tIHNoYTEuanMgb2YgdGhlIHNhbWUgcmVwb3NpdG9yeS5cbiAqIFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gU0hBLTAgYW5kIFNIQS0xIGlzIGp1c3QgYSBiaXR3aXNlIHJvdGF0ZSBsZWZ0XG4gKiBvcGVyYXRpb24gd2FzIGFkZGVkLlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYyB8IDAsIDB4Y2E2MmMxZDYgfCAwXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGEgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYSwgSGFzaClcblxuU2hhLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxuICB0aGlzLl9lID0gMHhjM2QyZTFmMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIHJvdGw1IChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgNSkgfCAobnVtID4+PiAyNylcbn1cblxuZnVuY3Rpb24gcm90bDMwIChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgMzApIHwgKG51bSA+Pj4gMilcbn1cblxuZnVuY3Rpb24gZnQgKHMsIGIsIGMsIGQpIHtcbiAgaWYgKHMgPT09IDApIHJldHVybiAoYiAmIGMpIHwgKCh+YikgJiBkKVxuICBpZiAocyA9PT0gMikgcmV0dXJuIChiICYgYykgfCAoYiAmIGQpIHwgKGMgJiBkKVxuICByZXR1cm4gYiBeIGMgXiBkXG59XG5cblNoYS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgODA7ICsraSkgV1tpXSA9IFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl1cblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyArK2opIHtcbiAgICB2YXIgcyA9IH5+KGogLyAyMClcbiAgICB2YXIgdCA9IChyb3RsNShhKSArIGZ0KHMsIGIsIGMsIGQpICsgZSArIFdbal0gKyBLW3NdKSB8IDBcblxuICAgIGUgPSBkXG4gICAgZCA9IGNcbiAgICBjID0gcm90bDMwKGIpXG4gICAgYiA9IGFcbiAgICBhID0gdFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxufVxuXG5TaGEucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyMClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hIHwgMCwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiB8IDAsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MgfCAwLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kIHwgMCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UgfCAwLCAxNilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYVxuIiwiLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMSwgYXMgZGVmaW5lZFxuICogaW4gRklQUyBQVUIgMTgwLTFcbiAqIFZlcnNpb24gMi4xYSBDb3B5cmlnaHQgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwMi5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZVxuICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIGRldGFpbHMuXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjIHwgMCwgMHhjYTYyYzFkNiB8IDBcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoODApXG5cbmZ1bmN0aW9uIFNoYTEgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTEsIEhhc2gpXG5cblNoYTEucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gcm90bDEgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAxKSB8IChudW0gPj4+IDMxKVxufVxuXG5mdW5jdGlvbiByb3RsNSAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDUpIHwgKG51bSA+Pj4gMjcpXG59XG5cbmZ1bmN0aW9uIHJvdGwzMCAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDMwKSB8IChudW0gPj4+IDIpXG59XG5cbmZ1bmN0aW9uIGZ0IChzLCBiLCBjLCBkKSB7XG4gIGlmIChzID09PSAwKSByZXR1cm4gKGIgJiBjKSB8ICgofmIpICYgZClcbiAgaWYgKHMgPT09IDIpIHJldHVybiAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZClcbiAgcmV0dXJuIGIgXiBjIF4gZFxufVxuXG5TaGExLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgZm9yICg7IGkgPCA4MDsgKytpKSBXW2ldID0gcm90bDEoV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XSlcblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyArK2opIHtcbiAgICB2YXIgcyA9IH5+KGogLyAyMClcbiAgICB2YXIgdCA9IChyb3RsNShhKSArIGZ0KHMsIGIsIGMsIGQpICsgZSArIFdbal0gKyBLW3NdKSB8IDBcblxuICAgIGUgPSBkXG4gICAgZCA9IGNcbiAgICBjID0gcm90bDMwKGIpXG4gICAgYiA9IGFcbiAgICBhID0gdFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxufVxuXG5TaGExLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjApXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGExXG4iLCIvKipcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMjU2LCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIDE4MC0yXG4gKiBWZXJzaW9uIDIuMi1iZXRhIENvcHlyaWdodCBBbmdlbCBNYXJpbiwgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwOS5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFNoYTI1NiA9IHJlcXVpcmUoJy4vc2hhMjU2JylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjI0ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjI0LCBTaGEyNTYpXG5cblNoYTIyNC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4YzEwNTllZDhcbiAgdGhpcy5fYiA9IDB4MzY3Y2Q1MDdcbiAgdGhpcy5fYyA9IDB4MzA3MGRkMTdcbiAgdGhpcy5fZCA9IDB4ZjcwZTU5MzlcbiAgdGhpcy5fZSA9IDB4ZmZjMDBiMzFcbiAgdGhpcy5fZiA9IDB4Njg1ODE1MTFcbiAgdGhpcy5fZyA9IDB4NjRmOThmYTdcbiAgdGhpcy5faCA9IDB4YmVmYTRmYTRcblxuICByZXR1cm4gdGhpc1xufVxuXG5TaGEyMjQucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyOClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSwgMTYpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2YsIDIwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9nLCAyNClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTIyNFxuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFNIQTUxMiA9IHJlcXVpcmUoJy4vc2hhNTEyJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgVyA9IG5ldyBBcnJheSgxNjApXG5cbmZ1bmN0aW9uIFNoYTM4NCAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDEyOCwgMTEyKVxufVxuXG5pbmhlcml0cyhTaGEzODQsIFNIQTUxMilcblxuU2hhMzg0LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9haCA9IDB4Y2JiYjlkNWRcbiAgdGhpcy5fYmggPSAweDYyOWEyOTJhXG4gIHRoaXMuX2NoID0gMHg5MTU5MDE1YVxuICB0aGlzLl9kaCA9IDB4MTUyZmVjZDhcbiAgdGhpcy5fZWggPSAweDY3MzMyNjY3XG4gIHRoaXMuX2ZoID0gMHg4ZWI0NGE4N1xuICB0aGlzLl9naCA9IDB4ZGIwYzJlMGRcbiAgdGhpcy5faGggPSAweDQ3YjU0ODFkXG5cbiAgdGhpcy5fYWwgPSAweGMxMDU5ZWQ4XG4gIHRoaXMuX2JsID0gMHgzNjdjZDUwN1xuICB0aGlzLl9jbCA9IDB4MzA3MGRkMTdcbiAgdGhpcy5fZGwgPSAweGY3MGU1OTM5XG4gIHRoaXMuX2VsID0gMHhmZmMwMGIzMVxuICB0aGlzLl9mbCA9IDB4Njg1ODE1MTFcbiAgdGhpcy5fZ2wgPSAweDY0Zjk4ZmE3XG4gIHRoaXMuX2hsID0gMHhiZWZhNGZhNFxuXG4gIHJldHVybiB0aGlzXG59XG5cblNoYTM4NC5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQ4KVxuXG4gIGZ1bmN0aW9uIHdyaXRlSW50NjRCRSAoaCwgbCwgb2Zmc2V0KSB7XG4gICAgSC53cml0ZUludDMyQkUoaCwgb2Zmc2V0KVxuICAgIEgud3JpdGVJbnQzMkJFKGwsIG9mZnNldCArIDQpXG4gIH1cblxuICB3cml0ZUludDY0QkUodGhpcy5fYWgsIHRoaXMuX2FsLCAwKVxuICB3cml0ZUludDY0QkUodGhpcy5fYmgsIHRoaXMuX2JsLCA4KVxuICB3cml0ZUludDY0QkUodGhpcy5fY2gsIHRoaXMuX2NsLCAxNilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2RoLCB0aGlzLl9kbCwgMjQpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9laCwgdGhpcy5fZWwsIDMyKVxuICB3cml0ZUludDY0QkUodGhpcy5fZmgsIHRoaXMuX2ZsLCA0MClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTM4NFxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG5cbnZhciBaRVJPUyA9IEJ1ZmZlci5hbGxvYygxMjgpXG52YXIgYmxvY2tzaXplID0gNjRcblxuZnVuY3Rpb24gSG1hYyAoYWxnLCBrZXkpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdkaWdlc3QnKVxuICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICBrZXkgPSBCdWZmZXIuZnJvbShrZXkpXG4gIH1cblxuICB0aGlzLl9hbGcgPSBhbGdcbiAgdGhpcy5fa2V5ID0ga2V5XG5cbiAgaWYgKGtleS5sZW5ndGggPiBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBhbGcoa2V5KVxuICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPCBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIFpFUk9TXSwgYmxvY2tzaXplKVxuICB9XG5cbiAgdmFyIGlwYWQgPSB0aGlzLl9pcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcbiAgdmFyIG9wYWQgPSB0aGlzLl9vcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzZcbiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1Q1xuICB9XG5cbiAgdGhpcy5faGFzaCA9IFtpcGFkXVxufVxuXG5pbmhlcml0cyhIbWFjLCBCYXNlKVxuXG5IbWFjLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5faGFzaC5wdXNoKGRhdGEpXG59XG5cbkhtYWMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGggPSB0aGlzLl9hbGcoQnVmZmVyLmNvbmNhdCh0aGlzLl9oYXNoKSlcbiAgcmV0dXJuIHRoaXMuX2FsZyhCdWZmZXIuY29uY2F0KFt0aGlzLl9vcGFkLCBoXSkpXG59XG5tb2R1bGUuZXhwb3J0cyA9IEhtYWNcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9icm93c2VyL2FsZ29yaXRobXMuanNvbicpXG4iLCJ2YXIgY2hlY2tQYXJhbWV0ZXJzID0gcmVxdWlyZSgnLi9wcmVjb25kaXRpb24nKVxudmFyIGRlZmF1bHRFbmNvZGluZyA9IHJlcXVpcmUoJy4vZGVmYXVsdC1lbmNvZGluZycpXG52YXIgc3luYyA9IHJlcXVpcmUoJy4vc3luYycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIFpFUk9fQlVGXG52YXIgc3VidGxlID0gZ2xvYmFsLmNyeXB0byAmJiBnbG9iYWwuY3J5cHRvLnN1YnRsZVxudmFyIHRvQnJvd3NlciA9IHtcbiAgJ3NoYSc6ICdTSEEtMScsXG4gICdzaGEtMSc6ICdTSEEtMScsXG4gICdzaGExJzogJ1NIQS0xJyxcbiAgJ3NoYTI1Nic6ICdTSEEtMjU2JyxcbiAgJ3NoYS0yNTYnOiAnU0hBLTI1NicsXG4gICdzaGEzODQnOiAnU0hBLTM4NCcsXG4gICdzaGEtMzg0JzogJ1NIQS0zODQnLFxuICAnc2hhLTUxMic6ICdTSEEtNTEyJyxcbiAgJ3NoYTUxMic6ICdTSEEtNTEyJ1xufVxudmFyIGNoZWNrcyA9IFtdXG5mdW5jdGlvbiBjaGVja05hdGl2ZSAoYWxnbykge1xuICBpZiAoZ2xvYmFsLnByb2Nlc3MgJiYgIWdsb2JhbC5wcm9jZXNzLmJyb3dzZXIpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKVxuICB9XG4gIGlmICghc3VidGxlIHx8ICFzdWJ0bGUuaW1wb3J0S2V5IHx8ICFzdWJ0bGUuZGVyaXZlQml0cykge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpXG4gIH1cbiAgaWYgKGNoZWNrc1thbGdvXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNoZWNrc1thbGdvXVxuICB9XG4gIFpFUk9fQlVGID0gWkVST19CVUYgfHwgQnVmZmVyLmFsbG9jKDgpXG4gIHZhciBwcm9tID0gYnJvd3NlclBia2RmMihaRVJPX0JVRiwgWkVST19CVUYsIDEwLCAxMjgsIGFsZ28pXG4gICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9KVxuICBjaGVja3NbYWxnb10gPSBwcm9tXG4gIHJldHVybiBwcm9tXG59XG5cbmZ1bmN0aW9uIGJyb3dzZXJQYmtkZjIgKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBsZW5ndGgsIGFsZ28pIHtcbiAgcmV0dXJuIHN1YnRsZS5pbXBvcnRLZXkoXG4gICAgJ3JhdycsIHBhc3N3b3JkLCB7bmFtZTogJ1BCS0RGMid9LCBmYWxzZSwgWydkZXJpdmVCaXRzJ11cbiAgKS50aGVuKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gc3VidGxlLmRlcml2ZUJpdHMoe1xuICAgICAgbmFtZTogJ1BCS0RGMicsXG4gICAgICBzYWx0OiBzYWx0LFxuICAgICAgaXRlcmF0aW9uczogaXRlcmF0aW9ucyxcbiAgICAgIGhhc2g6IHtcbiAgICAgICAgbmFtZTogYWxnb1xuICAgICAgfVxuICAgIH0sIGtleSwgbGVuZ3RoIDw8IDMpXG4gIH0pLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShyZXMpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVQcm9taXNlIChwcm9taXNlLCBjYWxsYmFjaykge1xuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKG91dCkge1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2sobnVsbCwgb3V0KVxuICAgIH0pXG4gIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsYmFjayhlKVxuICAgIH0pXG4gIH0pXG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBkaWdlc3QsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgZGlnZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBkaWdlc3RcbiAgICBkaWdlc3QgPSB1bmRlZmluZWRcbiAgfVxuXG4gIGRpZ2VzdCA9IGRpZ2VzdCB8fCAnc2hhMSdcbiAgdmFyIGFsZ28gPSB0b0Jyb3dzZXJbZGlnZXN0LnRvTG93ZXJDYXNlKCldXG5cbiAgaWYgKCFhbGdvIHx8IHR5cGVvZiBnbG9iYWwuUHJvbWlzZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBvdXRcbiAgICAgIHRyeSB7XG4gICAgICAgIG91dCA9IHN5bmMocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0KVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZSlcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKG51bGwsIG91dClcbiAgICB9KVxuICB9XG5cbiAgY2hlY2tQYXJhbWV0ZXJzKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4pXG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBFcnJvcignTm8gY2FsbGJhY2sgcHJvdmlkZWQgdG8gcGJrZGYyJylcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3dvcmQpKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkLCBkZWZhdWx0RW5jb2RpbmcpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHNhbHQpKSBzYWx0ID0gQnVmZmVyLmZyb20oc2FsdCwgZGVmYXVsdEVuY29kaW5nKVxuXG4gIHJlc29sdmVQcm9taXNlKGNoZWNrTmF0aXZlKGFsZ28pLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHtcbiAgICBpZiAocmVzcCkgcmV0dXJuIGJyb3dzZXJQYmtkZjIocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgYWxnbylcblxuICAgIHJldHVybiBzeW5jKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdClcbiAgfSksIGNhbGxiYWNrKVxufVxuIiwidmFyIERFUyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktZGVzJylcbnZhciBhZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWFlcy9icm93c2VyJylcbnZhciBhZXNNb2RlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzL21vZGVzJylcbnZhciBkZXNNb2RlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktZGVzL21vZGVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxuXG5mdW5jdGlvbiBjcmVhdGVDaXBoZXIgKHN1aXRlLCBwYXNzd29yZCkge1xuICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKClcblxuICB2YXIga2V5TGVuLCBpdkxlblxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gYWVzTW9kZXNbc3VpdGVdLmtleVxuICAgIGl2TGVuID0gYWVzTW9kZXNbc3VpdGVdLml2XG4gIH0gZWxzZSBpZiAoZGVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gZGVzTW9kZXNbc3VpdGVdLmtleSAqIDhcbiAgICBpdkxlbiA9IGRlc01vZGVzW3N1aXRlXS5pdlxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBrZXlMZW4sIGl2TGVuKVxuICByZXR1cm4gY3JlYXRlQ2lwaGVyaXYoc3VpdGUsIGtleXMua2V5LCBrZXlzLml2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHN1aXRlID0gc3VpdGUudG9Mb3dlckNhc2UoKVxuXG4gIHZhciBrZXlMZW4sIGl2TGVuXG4gIGlmIChhZXNNb2Rlc1tzdWl0ZV0pIHtcbiAgICBrZXlMZW4gPSBhZXNNb2Rlc1tzdWl0ZV0ua2V5XG4gICAgaXZMZW4gPSBhZXNNb2Rlc1tzdWl0ZV0uaXZcbiAgfSBlbHNlIGlmIChkZXNNb2Rlc1tzdWl0ZV0pIHtcbiAgICBrZXlMZW4gPSBkZXNNb2Rlc1tzdWl0ZV0ua2V5ICogOFxuICAgIGl2TGVuID0gZGVzTW9kZXNbc3VpdGVdLml2XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuXG4gIHZhciBrZXlzID0gZWJ0ayhwYXNzd29yZCwgZmFsc2UsIGtleUxlbiwgaXZMZW4pXG4gIHJldHVybiBjcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyaXYgKHN1aXRlLCBrZXksIGl2KSB7XG4gIHN1aXRlID0gc3VpdGUudG9Mb3dlckNhc2UoKVxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSByZXR1cm4gYWVzLmNyZWF0ZUNpcGhlcml2KHN1aXRlLCBrZXksIGl2KVxuICBpZiAoZGVzTW9kZXNbc3VpdGVdKSByZXR1cm4gbmV3IERFUyh7IGtleToga2V5LCBpdjogaXYsIG1vZGU6IHN1aXRlIH0pXG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXJpdiAoc3VpdGUsIGtleSwgaXYpIHtcbiAgc3VpdGUgPSBzdWl0ZS50b0xvd2VyQ2FzZSgpXG4gIGlmIChhZXNNb2Rlc1tzdWl0ZV0pIHJldHVybiBhZXMuY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5LCBpdilcbiAgaWYgKGRlc01vZGVzW3N1aXRlXSkgcmV0dXJuIG5ldyBERVMoeyBrZXk6IGtleSwgaXY6IGl2LCBtb2RlOiBzdWl0ZSwgZGVjcnlwdDogdHJ1ZSB9KVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG59XG5cbmZ1bmN0aW9uIGdldENpcGhlcnMgKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoZGVzTW9kZXMpLmNvbmNhdChhZXMuZ2V0Q2lwaGVycygpKVxufVxuXG5leHBvcnRzLmNyZWF0ZUNpcGhlciA9IGV4cG9ydHMuQ2lwaGVyID0gY3JlYXRlQ2lwaGVyXG5leHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gZXhwb3J0cy5DaXBoZXJpdiA9IGNyZWF0ZUNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gZXhwb3J0cy5EZWNpcGhlciA9IGNyZWF0ZURlY2lwaGVyXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBleHBvcnRzLkRlY2lwaGVyaXYgPSBjcmVhdGVEZWNpcGhlcml2XG5leHBvcnRzLmxpc3RDaXBoZXJzID0gZXhwb3J0cy5nZXRDaXBoZXJzID0gZ2V0Q2lwaGVyc1xuIiwidmFyIENpcGhlckJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgZGVzID0gcmVxdWlyZSgnZGVzLmpzJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgbW9kZXMgPSB7XG4gICdkZXMtZWRlMy1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZTMnOiBkZXMuRURFLFxuICAnZGVzLWVkZS1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZSc6IGRlcy5FREUsXG4gICdkZXMtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuREVTKSxcbiAgJ2Rlcy1lY2InOiBkZXMuREVTXG59XG5tb2Rlcy5kZXMgPSBtb2Rlc1snZGVzLWNiYyddXG5tb2Rlcy5kZXMzID0gbW9kZXNbJ2Rlcy1lZGUzLWNiYyddXG5tb2R1bGUuZXhwb3J0cyA9IERFU1xuaW5oZXJpdHMoREVTLCBDaXBoZXJCYXNlKVxuZnVuY3Rpb24gREVTIChvcHRzKSB7XG4gIENpcGhlckJhc2UuY2FsbCh0aGlzKVxuICB2YXIgbW9kZU5hbWUgPSBvcHRzLm1vZGUudG9Mb3dlckNhc2UoKVxuICB2YXIgbW9kZSA9IG1vZGVzW21vZGVOYW1lXVxuICB2YXIgdHlwZVxuICBpZiAob3B0cy5kZWNyeXB0KSB7XG4gICAgdHlwZSA9ICdkZWNyeXB0J1xuICB9IGVsc2Uge1xuICAgIHR5cGUgPSAnZW5jcnlwdCdcbiAgfVxuICB2YXIga2V5ID0gb3B0cy5rZXlcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoa2V5KSkge1xuICAgIGtleSA9IEJ1ZmZlci5mcm9tKGtleSlcbiAgfVxuICBpZiAobW9kZU5hbWUgPT09ICdkZXMtZWRlJyB8fCBtb2RlTmFtZSA9PT0gJ2Rlcy1lZGUtY2JjJykge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwga2V5LnNsaWNlKDAsIDgpXSlcbiAgfVxuICB2YXIgaXYgPSBvcHRzLml2XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGl2KSkge1xuICAgIGl2ID0gQnVmZmVyLmZyb20oaXYpXG4gIH1cbiAgdGhpcy5fZGVzID0gbW9kZS5jcmVhdGUoe1xuICAgIGtleToga2V5LFxuICAgIGl2OiBpdixcbiAgICB0eXBlOiB0eXBlXG4gIH0pXG59XG5ERVMucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICByZXR1cm4gQnVmZmVyLmZyb20odGhpcy5fZGVzLnVwZGF0ZShkYXRhKSlcbn1cbkRFUy5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gQnVmZmVyLmZyb20odGhpcy5fZGVzLmZpbmFsKCkpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMudXRpbHMgPSByZXF1aXJlKCcuL2Rlcy91dGlscycpO1xuZXhwb3J0cy5DaXBoZXIgPSByZXF1aXJlKCcuL2Rlcy9jaXBoZXInKTtcbmV4cG9ydHMuREVTID0gcmVxdWlyZSgnLi9kZXMvZGVzJyk7XG5leHBvcnRzLkNCQyA9IHJlcXVpcmUoJy4vZGVzL2NiYycpO1xuZXhwb3J0cy5FREUgPSByZXF1aXJlKCcuL2Rlcy9lZGUnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBwcm90byA9IHt9O1xuXG5mdW5jdGlvbiBDQkNTdGF0ZShpdikge1xuICBhc3NlcnQuZXF1YWwoaXYubGVuZ3RoLCA4LCAnSW52YWxpZCBJViBsZW5ndGgnKTtcblxuICB0aGlzLml2ID0gbmV3IEFycmF5KDgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXYubGVuZ3RoOyBpKyspXG4gICAgdGhpcy5pdltpXSA9IGl2W2ldO1xufVxuXG5mdW5jdGlvbiBpbnN0YW50aWF0ZShCYXNlKSB7XG4gIGZ1bmN0aW9uIENCQyhvcHRpb25zKSB7XG4gICAgQmFzZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIHRoaXMuX2NiY0luaXQoKTtcbiAgfVxuICBpbmhlcml0cyhDQkMsIEJhc2UpO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvdG8pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBDQkMucHJvdG90eXBlW2tleV0gPSBwcm90b1trZXldO1xuICB9XG5cbiAgQ0JDLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBDQkMob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIENCQztcbn1cblxuZXhwb3J0cy5pbnN0YW50aWF0ZSA9IGluc3RhbnRpYXRlO1xuXG5wcm90by5fY2JjSW5pdCA9IGZ1bmN0aW9uIF9jYmNJbml0KCkge1xuICB2YXIgc3RhdGUgPSBuZXcgQ0JDU3RhdGUodGhpcy5vcHRpb25zLml2KTtcbiAgdGhpcy5fY2JjU3RhdGUgPSBzdGF0ZTtcbn07XG5cbnByb3RvLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2NiY1N0YXRlO1xuICB2YXIgc3VwZXJQcm90byA9IHRoaXMuY29uc3RydWN0b3Iuc3VwZXJfLnByb3RvdHlwZTtcblxuICB2YXIgaXYgPSBzdGF0ZS5pdjtcbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gXj0gaW5wW2luT2ZmICsgaV07XG5cbiAgICBzdXBlclByb3RvLl91cGRhdGUuY2FsbCh0aGlzLCBpdiwgMCwgb3V0LCBvdXRPZmYpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gPSBvdXRbb3V0T2ZmICsgaV07XG4gIH0gZWxzZSB7XG4gICAgc3VwZXJQcm90by5fdXBkYXRlLmNhbGwodGhpcywgaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgb3V0W291dE9mZiArIGldIF49IGl2W2ldO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gPSBpbnBbaW5PZmYgKyBpXTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBDaXBoZXIgPSByZXF1aXJlKCcuL2NpcGhlcicpO1xudmFyIERFUyA9IHJlcXVpcmUoJy4vZGVzJyk7XG5cbmZ1bmN0aW9uIEVERVN0YXRlKHR5cGUsIGtleSkge1xuICBhc3NlcnQuZXF1YWwoa2V5Lmxlbmd0aCwgMjQsICdJbnZhbGlkIGtleSBsZW5ndGgnKTtcblxuICB2YXIgazEgPSBrZXkuc2xpY2UoMCwgOCk7XG4gIHZhciBrMiA9IGtleS5zbGljZSg4LCAxNik7XG4gIHZhciBrMyA9IGtleS5zbGljZSgxNiwgMjQpO1xuXG4gIGlmICh0eXBlID09PSAnZW5jcnlwdCcpIHtcbiAgICB0aGlzLmNpcGhlcnMgPSBbXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2VuY3J5cHQnLCBrZXk6IGsxIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMiB9KSxcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZW5jcnlwdCcsIGtleTogazMgfSlcbiAgICBdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuY2lwaGVycyA9IFtcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZGVjcnlwdCcsIGtleTogazMgfSksXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2VuY3J5cHQnLCBrZXk6IGsyIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMSB9KVxuICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRURFKG9wdGlvbnMpIHtcbiAgQ2lwaGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdmFyIHN0YXRlID0gbmV3IEVERVN0YXRlKHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLmtleSk7XG4gIHRoaXMuX2VkZVN0YXRlID0gc3RhdGU7XG59XG5pbmhlcml0cyhFREUsIENpcGhlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gRURFO1xuXG5FREUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBFREUob3B0aW9ucyk7XG59O1xuXG5FREUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2VkZVN0YXRlO1xuXG4gIHN0YXRlLmNpcGhlcnNbMF0uX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZik7XG4gIHN0YXRlLmNpcGhlcnNbMV0uX3VwZGF0ZShvdXQsIG91dE9mZiwgb3V0LCBvdXRPZmYpO1xuICBzdGF0ZS5jaXBoZXJzWzJdLl91cGRhdGUob3V0LCBvdXRPZmYsIG91dCwgb3V0T2ZmKTtcbn07XG5cbkVERS5wcm90b3R5cGUuX3BhZCA9IERFUy5wcm90b3R5cGUuX3BhZDtcbkVERS5wcm90b3R5cGUuX3VucGFkID0gREVTLnByb3RvdHlwZS5fdW5wYWQ7XG4iLCJ2YXIgTU9ERVMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBBdXRoQ2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIENpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuXG5pbmhlcml0cyhDaXBoZXIsIFRyYW5zZm9ybSlcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG5cbiAgd2hpbGUgKChjaHVuayA9IHRoaXMuX2NhY2hlLmdldCgpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuXG52YXIgUEFERElORyA9IEJ1ZmZlci5hbGxvYygxNiwgMHgxMClcblxuQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgY2h1bmsgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICByZXR1cm4gY2h1bmtcbiAgfVxuXG4gIGlmICghY2h1bmsuZXF1YWxzKFBBRERJTkcpKSB7XG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpXG4gIH1cbn1cblxuQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE1KSB7XG4gICAgdmFyIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgcmV0dXJuIG91dFxuICB9XG4gIHJldHVybiBudWxsXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxlbiA9IDE2IC0gdGhpcy5jYWNoZS5sZW5ndGhcbiAgdmFyIHBhZEJ1ZmYgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKVxuXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHBhZEJ1ZmYud3JpdGVVSW50OChsZW4sIGkpXG4gIH1cblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgcGFkQnVmZl0pXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZClcbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQga2V5IGxlbmd0aCAnICsgcGFzc3dvcmQubGVuZ3RoKVxuXG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSBpdiA9IEJ1ZmZlci5mcm9tKGl2KVxuICBpZiAoY29uZmlnLm1vZGUgIT09ICdHQ00nICYmIGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuXG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG4gIH1cblxuICByZXR1cm4gbmV3IENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBjcmVhdGVDaXBoZXJcbiIsImV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICByZXR1cm4gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhibG9jaylcbn1cblxuZXhwb3J0cy5kZWNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHJldHVybiBzZWxmLl9jaXBoZXIuZGVjcnlwdEJsb2NrKGJsb2NrKVxufVxuIiwidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgYmxvY2spIHtcbiAgdmFyIGRhdGEgPSB4b3IoYmxvY2ssIHNlbGYuX3ByZXYpXG5cbiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soZGF0YSlcbiAgcmV0dXJuIHNlbGYuX3ByZXZcbn1cblxuZXhwb3J0cy5kZWNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHZhciBwYWQgPSBzZWxmLl9wcmV2XG5cbiAgc2VsZi5fcHJldiA9IGJsb2NrXG4gIHZhciBvdXQgPSBzZWxmLl9jaXBoZXIuZGVjcnlwdEJsb2NrKGJsb2NrKVxuXG4gIHJldHVybiB4b3Iob3V0LCBwYWQpXG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gZW5jcnlwdFN0YXJ0IChzZWxmLCBkYXRhLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBkYXRhLmxlbmd0aFxuICB2YXIgb3V0ID0geG9yKGRhdGEsIHNlbGYuX2NhY2hlKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGxlbilcbiAgc2VsZi5fcHJldiA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX3ByZXYsIGRlY3J5cHQgPyBkYXRhIDogb3V0XSlcbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHZhciBsZW5cblxuICB3aGlsZSAoZGF0YS5sZW5ndGgpIHtcbiAgICBpZiAoc2VsZi5fY2FjaGUubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgICAgIHNlbGYuX3ByZXYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fY2FjaGUubGVuZ3RoIDw9IGRhdGEubGVuZ3RoKSB7XG4gICAgICBsZW4gPSBzZWxmLl9jYWNoZS5sZW5ndGhcbiAgICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW291dCwgZW5jcnlwdFN0YXJ0KHNlbGYsIGRhdGEuc2xpY2UoMCwgbGVuKSwgZGVjcnlwdCldKVxuICAgICAgZGF0YSA9IGRhdGEuc2xpY2UobGVuKVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLCBkZWNyeXB0KV0pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gIHZhciBvdXQgPSBwYWRbMF0gXiBieXRlUGFyYW1cblxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbXG4gICAgc2VsZi5fcHJldi5zbGljZSgxKSxcbiAgICBCdWZmZXIuZnJvbShbZGVjcnlwdCA/IGJ5dGVQYXJhbSA6IG91dF0pXG4gIF0pXG5cbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbilcbiAgdmFyIGkgPSAtMVxuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBlbmNyeXB0Qnl0ZShzZWxmLCBjaHVua1tpXSwgZGVjcnlwdClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWRcbiAgdmFyIGkgPSAtMVxuICB2YXIgbGVuID0gOFxuICB2YXIgb3V0ID0gMFxuICB2YXIgYml0LCB2YWx1ZVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgIGJpdCA9IChieXRlUGFyYW0gJiAoMSA8PCAoNyAtIGkpKSkgPyAweDgwIDogMFxuICAgIHZhbHVlID0gcGFkWzBdIF4gYml0XG4gICAgb3V0ICs9ICgodmFsdWUgJiAweDgwKSA+PiAoaSAlIDgpKVxuICAgIHNlbGYuX3ByZXYgPSBzaGlmdEluKHNlbGYuX3ByZXYsIGRlY3J5cHQgPyBiaXQgOiB2YWx1ZSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHNoaWZ0SW4gKGJ1ZmZlciwgdmFsdWUpIHtcbiAgdmFyIGxlbiA9IGJ1ZmZlci5sZW5ndGhcbiAgdmFyIGkgPSAtMVxuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJ1ZmZlci5sZW5ndGgpXG4gIGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2J1ZmZlciwgQnVmZmVyLmZyb20oW3ZhbHVlXSldKVxuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBidWZmZXJbaV0gPDwgMSB8IGJ1ZmZlcltpICsgMV0gPj4gKDcpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKVxuICB2YXIgaSA9IC0xXG5cbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuIiwidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICBzZWxmLl9wcmV2ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICByZXR1cm4gc2VsZi5fcHJldlxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgd2hpbGUgKHNlbGYuX2NhY2hlLmxlbmd0aCA8IGNodW5rLmxlbmd0aCkge1xuICAgIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fY2FjaGUsIGdldEJsb2NrKHNlbGYpXSlcbiAgfVxuXG4gIHZhciBwYWQgPSBzZWxmLl9jYWNoZS5zbGljZSgwLCBjaHVuay5sZW5ndGgpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UoY2h1bmsubGVuZ3RoKVxuICByZXR1cm4geG9yKGNodW5rLCBwYWQpXG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBaRVJPRVMgPSBCdWZmZXIuYWxsb2MoMTYsIDApXG5cbmZ1bmN0aW9uIHRvQXJyYXkgKGJ1Zikge1xuICByZXR1cm4gW1xuICAgIGJ1Zi5yZWFkVUludDMyQkUoMCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg0KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDgpLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoMTIpXG4gIF1cbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5IChvdXQpIHtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdID4+PiAwLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0gPj4+IDAsIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSA+Pj4gMCwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdID4+PiAwLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBHSEFTSCAoa2V5KSB7XG4gIHRoaXMuaCA9IGtleVxuICB0aGlzLnN0YXRlID0gQnVmZmVyLmFsbG9jKDE2LCAwKVxuICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG59XG5cbi8vIGZyb20gaHR0cDovL2JpdHdpc2VzaGlmdGxlZnQuZ2l0aHViLmlvL3NqY2wvZG9jL3N5bWJvbHMvc3JjL2NvcmVfZ2NtLmpzLmh0bWxcbi8vIGJ5IEp1aG8gVsOkaMOkLUhlcnR0dWFcbkdIQVNILnByb3RvdHlwZS5naGFzaCA9IGZ1bmN0aW9uIChibG9jaykge1xuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBibG9jay5sZW5ndGgpIHtcbiAgICB0aGlzLnN0YXRlW2ldIF49IGJsb2NrW2ldXG4gIH1cbiAgdGhpcy5fbXVsdGlwbHkoKVxufVxuXG5HSEFTSC5wcm90b3R5cGUuX211bHRpcGx5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgVmkgPSB0b0FycmF5KHRoaXMuaClcbiAgdmFyIFppID0gWzAsIDAsIDAsIDBdXG4gIHZhciBqLCB4aSwgbHNiVmlcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgMTI4KSB7XG4gICAgeGkgPSAodGhpcy5zdGF0ZVt+fihpIC8gOCldICYgKDEgPDwgKDcgLSAoaSAlIDgpKSkpICE9PSAwXG4gICAgaWYgKHhpKSB7XG4gICAgICAvLyBaX2krMSA9IFpfaSBeIFZfaVxuICAgICAgWmlbMF0gXj0gVmlbMF1cbiAgICAgIFppWzFdIF49IFZpWzFdXG4gICAgICBaaVsyXSBePSBWaVsyXVxuICAgICAgWmlbM10gXj0gVmlbM11cbiAgICB9XG5cbiAgICAvLyBTdG9yZSB0aGUgdmFsdWUgb2YgTFNCKFZfaSlcbiAgICBsc2JWaSA9IChWaVszXSAmIDEpICE9PSAwXG5cbiAgICAvLyBWX2krMSA9IFZfaSA+PiAxXG4gICAgZm9yIChqID0gMzsgaiA+IDA7IGotLSkge1xuICAgICAgVmlbal0gPSAoVmlbal0gPj4+IDEpIHwgKChWaVtqIC0gMV0gJiAxKSA8PCAzMSlcbiAgICB9XG4gICAgVmlbMF0gPSBWaVswXSA+Pj4gMVxuXG4gICAgLy8gSWYgTFNCKFZfaSkgaXMgMSwgVl9pKzEgPSAoVl9pID4+IDEpIF4gUlxuICAgIGlmIChsc2JWaSkge1xuICAgICAgVmlbMF0gPSBWaVswXSBeICgweGUxIDw8IDI0KVxuICAgIH1cbiAgfVxuICB0aGlzLnN0YXRlID0gZnJvbUFycmF5KFppKVxufVxuXG5HSEFTSC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgYnVmXSlcbiAgdmFyIGNodW5rXG4gIHdoaWxlICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgIGNodW5rID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICB0aGlzLmdoYXNoKGNodW5rKVxuICB9XG59XG5cbkdIQVNILnByb3RvdHlwZS5maW5hbCA9IGZ1bmN0aW9uIChhYmwsIGJsKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCkge1xuICAgIHRoaXMuZ2hhc2goQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgWkVST0VTXSwgMTYpKVxuICB9XG5cbiAgdGhpcy5naGFzaChmcm9tQXJyYXkoWzAsIGFibCwgMCwgYmxdKSlcbiAgcmV0dXJuIHRoaXMuc3RhdGVcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHSEFTSFxuIiwidmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgTU9ERVMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBEZWNpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fbGFzdCA9IHZvaWQgMFxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdilcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSB0cnVlXG59XG5cbmluaGVyaXRzKERlY2lwaGVyLCBUcmFuc2Zvcm0pXG5cbkRlY2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQodGhpcy5fYXV0b3BhZGRpbmcpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cblxuRGVjaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICByZXR1cm4gdW5wYWQodGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKSlcbiAgfSBlbHNlIGlmIChjaHVuaykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuXG5EZWNpcGhlci5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoc2V0VG8pIHtcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSAhIXNldFRvXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGF1dG9QYWRkaW5nKSB7XG4gIHZhciBvdXRcbiAgaWYgKGF1dG9QYWRkaW5nKSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID4gMTYpIHtcbiAgICAgIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICAgIHJldHVybiBvdXRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID49IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHJldHVybiB0aGlzLmNhY2hlXG59XG5cbmZ1bmN0aW9uIHVucGFkIChsYXN0KSB7XG4gIHZhciBwYWRkZWQgPSBsYXN0WzE1XVxuICBpZiAocGFkZGVkIDwgMSB8fCBwYWRkZWQgPiAxNikge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGRlY3J5cHQgZGF0YScpXG4gIH1cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgcGFkZGVkKSB7XG4gICAgaWYgKGxhc3RbKGkgKyAoMTYgLSBwYWRkZWQpKV0gIT09IHBhZGRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgICB9XG4gIH1cbiAgaWYgKHBhZGRlZCA9PT0gMTYpIHJldHVyblxuXG4gIHJldHVybiBsYXN0LnNsaWNlKDAsIDE2IC0gcGFkZGVkKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICBpZiAodHlwZW9mIGl2ID09PSAnc3RyaW5nJykgaXYgPSBCdWZmZXIuZnJvbShpdilcbiAgaWYgKGNvbmZpZy5tb2RlICE9PSAnR0NNJyAmJiBpdi5sZW5ndGggIT09IGNvbmZpZy5pdikgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcblxuICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZClcbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQga2V5IGxlbmd0aCAnICsgcGFzc3dvcmQubGVuZ3RoKVxuXG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH1cblxuICByZXR1cm4gbmV3IERlY2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdilcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXIgKHN1aXRlLCBwYXNzd29yZCkge1xuICB2YXIgY29uZmlnID0gTU9ERVNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG5cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBjcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gY3JlYXRlRGVjaXBoZXJpdlxuIiwiZXhwb3J0c1snZGVzLWVjYiddID0ge1xuICBrZXk6IDgsXG4gIGl2OiAwXG59XG5leHBvcnRzWydkZXMtY2JjJ10gPSBleHBvcnRzLmRlcyA9IHtcbiAga2V5OiA4LFxuICBpdjogOFxufVxuZXhwb3J0c1snZGVzLWVkZTMtY2JjJ10gPSBleHBvcnRzLmRlczMgPSB7XG4gIGtleTogMjQsXG4gIGl2OiA4XG59XG5leHBvcnRzWydkZXMtZWRlMyddID0ge1xuICBrZXk6IDI0LFxuICBpdjogMFxufVxuZXhwb3J0c1snZGVzLWVkZS1jYmMnXSA9IHtcbiAga2V5OiAxNixcbiAgaXY6IDhcbn1cbmV4cG9ydHNbJ2Rlcy1lZGUnXSA9IHtcbiAga2V5OiAxNixcbiAgaXY6IDBcbn1cbiIsInZhciBnZW5lcmF0ZVByaW1lID0gcmVxdWlyZSgnLi9saWIvZ2VuZXJhdGVQcmltZScpXG52YXIgcHJpbWVzID0gcmVxdWlyZSgnLi9saWIvcHJpbWVzLmpzb24nKVxuXG52YXIgREggPSByZXF1aXJlKCcuL2xpYi9kaCcpXG5cbmZ1bmN0aW9uIGdldERpZmZpZUhlbGxtYW4gKG1vZCkge1xuICB2YXIgcHJpbWUgPSBuZXcgQnVmZmVyKHByaW1lc1ttb2RdLnByaW1lLCAnaGV4JylcbiAgdmFyIGdlbiA9IG5ldyBCdWZmZXIocHJpbWVzW21vZF0uZ2VuLCAnaGV4JylcblxuICByZXR1cm4gbmV3IERIKHByaW1lLCBnZW4pXG59XG5cbnZhciBFTkNPRElOR1MgPSB7XG4gICdiaW5hcnknOiB0cnVlLCAnaGV4JzogdHJ1ZSwgJ2Jhc2U2NCc6IHRydWVcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGlmZmllSGVsbG1hbiAocHJpbWUsIGVuYywgZ2VuZXJhdG9yLCBnZW5jKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoZW5jKSB8fCBFTkNPRElOR1NbZW5jXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNyZWF0ZURpZmZpZUhlbGxtYW4ocHJpbWUsICdiaW5hcnknLCBlbmMsIGdlbmVyYXRvcilcbiAgfVxuXG4gIGVuYyA9IGVuYyB8fCAnYmluYXJ5J1xuICBnZW5jID0gZ2VuYyB8fCAnYmluYXJ5J1xuICBnZW5lcmF0b3IgPSBnZW5lcmF0b3IgfHwgbmV3IEJ1ZmZlcihbMl0pXG5cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZ2VuZXJhdG9yKSkge1xuICAgIGdlbmVyYXRvciA9IG5ldyBCdWZmZXIoZ2VuZXJhdG9yLCBnZW5jKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmltZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbmV3IERIKGdlbmVyYXRlUHJpbWUocHJpbWUsIGdlbmVyYXRvciksIGdlbmVyYXRvciwgdHJ1ZSlcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaW1lKSkge1xuICAgIHByaW1lID0gbmV3IEJ1ZmZlcihwcmltZSwgZW5jKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBESChwcmltZSwgZ2VuZXJhdG9yLCB0cnVlKVxufVxuXG5leHBvcnRzLkRpZmZpZUhlbGxtYW5Hcm91cCA9IGV4cG9ydHMuY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwID0gZXhwb3J0cy5nZXREaWZmaWVIZWxsbWFuID0gZ2V0RGlmZmllSGVsbG1hblxuZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuID0gZXhwb3J0cy5EaWZmaWVIZWxsbWFuID0gY3JlYXRlRGlmZmllSGVsbG1hblxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLyogKGlnbm9yZWQpICovIiwiLyogKGlnbm9yZWQpICovIiwidmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBNaWxsZXJSYWJpbiA9IHJlcXVpcmUoJ21pbGxlci1yYWJpbicpO1xudmFyIG1pbGxlclJhYmluID0gbmV3IE1pbGxlclJhYmluKCk7XG52YXIgVFdFTlRZRk9VUiA9IG5ldyBCTigyNCk7XG52YXIgRUxFVkVOID0gbmV3IEJOKDExKTtcbnZhciBURU4gPSBuZXcgQk4oMTApO1xudmFyIFRIUkVFID0gbmV3IEJOKDMpO1xudmFyIFNFVkVOID0gbmV3IEJOKDcpO1xudmFyIHByaW1lcyA9IHJlcXVpcmUoJy4vZ2VuZXJhdGVQcmltZScpO1xudmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gREg7XG5cbmZ1bmN0aW9uIHNldFB1YmxpY0tleShwdWIsIGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ3V0ZjgnO1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwdWIpKSB7XG4gICAgcHViID0gbmV3IEJ1ZmZlcihwdWIsIGVuYyk7XG4gIH1cbiAgdGhpcy5fcHViID0gbmV3IEJOKHB1Yik7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBzZXRQcml2YXRlS2V5KHByaXYsIGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ3V0ZjgnO1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwcml2KSkge1xuICAgIHByaXYgPSBuZXcgQnVmZmVyKHByaXYsIGVuYyk7XG4gIH1cbiAgdGhpcy5fcHJpdiA9IG5ldyBCTihwcml2KTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbnZhciBwcmltZUNhY2hlID0ge307XG5mdW5jdGlvbiBjaGVja1ByaW1lKHByaW1lLCBnZW5lcmF0b3IpIHtcbiAgdmFyIGdlbiA9IGdlbmVyYXRvci50b1N0cmluZygnaGV4Jyk7XG4gIHZhciBoZXggPSBbZ2VuLCBwcmltZS50b1N0cmluZygxNildLmpvaW4oJ18nKTtcbiAgaWYgKGhleCBpbiBwcmltZUNhY2hlKSB7XG4gICAgcmV0dXJuIHByaW1lQ2FjaGVbaGV4XTtcbiAgfVxuICB2YXIgZXJyb3IgPSAwO1xuXG4gIGlmIChwcmltZS5pc0V2ZW4oKSB8fFxuICAgICFwcmltZXMuc2ltcGxlU2lldmUgfHxcbiAgICAhcHJpbWVzLmZlcm1hdFRlc3QocHJpbWUpIHx8XG4gICAgIW1pbGxlclJhYmluLnRlc3QocHJpbWUpKSB7XG4gICAgLy9ub3QgYSBwcmltZSBzbyArMVxuICAgIGVycm9yICs9IDE7XG5cbiAgICBpZiAoZ2VuID09PSAnMDInIHx8IGdlbiA9PT0gJzA1Jykge1xuICAgICAgLy8gd2UnZCBiZSBhYmxlIHRvIGNoZWNrIHRoZSBnZW5lcmF0b3JcbiAgICAgIC8vIGl0IHdvdWxkIGZhaWwgc28gKzhcbiAgICAgIGVycm9yICs9IDg7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vd2Ugd291bGRuJ3QgYmUgYWJsZSB0byB0ZXN0IHRoZSBnZW5lcmF0b3JcbiAgICAgIC8vIHNvICs0XG4gICAgICBlcnJvciArPSA0O1xuICAgIH1cbiAgICBwcmltZUNhY2hlW2hleF0gPSBlcnJvcjtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cbiAgaWYgKCFtaWxsZXJSYWJpbi50ZXN0KHByaW1lLnNocm4oMSkpKSB7XG4gICAgLy9ub3QgYSBzYWZlIHByaW1lXG4gICAgZXJyb3IgKz0gMjtcbiAgfVxuICB2YXIgcmVtO1xuICBzd2l0Y2ggKGdlbikge1xuICAgIGNhc2UgJzAyJzpcbiAgICAgIGlmIChwcmltZS5tb2QoVFdFTlRZRk9VUikuY21wKEVMRVZFTikpIHtcbiAgICAgICAgLy8gdW5zdWlkYWJsZSBnZW5lcmF0b3JcbiAgICAgICAgZXJyb3IgKz0gODtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJzA1JzpcbiAgICAgIHJlbSA9IHByaW1lLm1vZChURU4pO1xuICAgICAgaWYgKHJlbS5jbXAoVEhSRUUpICYmIHJlbS5jbXAoU0VWRU4pKSB7XG4gICAgICAgIC8vIHByaW1lIG1vZCAxMCBuZWVkcyB0byBlcXVhbCAzIG9yIDdcbiAgICAgICAgZXJyb3IgKz0gODtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBlcnJvciArPSA0O1xuICB9XG4gIHByaW1lQ2FjaGVbaGV4XSA9IGVycm9yO1xuICByZXR1cm4gZXJyb3I7XG59XG5cbmZ1bmN0aW9uIERIKHByaW1lLCBnZW5lcmF0b3IsIG1hbGxlYWJsZSkge1xuICB0aGlzLnNldEdlbmVyYXRvcihnZW5lcmF0b3IpO1xuICB0aGlzLl9fcHJpbWUgPSBuZXcgQk4ocHJpbWUpO1xuICB0aGlzLl9wcmltZSA9IEJOLm1vbnQodGhpcy5fX3ByaW1lKTtcbiAgdGhpcy5fcHJpbWVMZW4gPSBwcmltZS5sZW5ndGg7XG4gIHRoaXMuX3B1YiA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fcHJpdiA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fcHJpbWVDb2RlID0gdW5kZWZpbmVkO1xuICBpZiAobWFsbGVhYmxlKSB7XG4gICAgdGhpcy5zZXRQdWJsaWNLZXkgPSBzZXRQdWJsaWNLZXk7XG4gICAgdGhpcy5zZXRQcml2YXRlS2V5ID0gc2V0UHJpdmF0ZUtleTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9wcmltZUNvZGUgPSA4O1xuICB9XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoREgucHJvdG90eXBlLCAndmVyaWZ5RXJyb3InLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fcHJpbWVDb2RlICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5fcHJpbWVDb2RlID0gY2hlY2tQcmltZSh0aGlzLl9fcHJpbWUsIHRoaXMuX19nZW4pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcHJpbWVDb2RlO1xuICB9XG59KTtcbkRILnByb3RvdHlwZS5nZW5lcmF0ZUtleXMgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5fcHJpdikge1xuICAgIHRoaXMuX3ByaXYgPSBuZXcgQk4ocmFuZG9tQnl0ZXModGhpcy5fcHJpbWVMZW4pKTtcbiAgfVxuICB0aGlzLl9wdWIgPSB0aGlzLl9nZW4udG9SZWQodGhpcy5fcHJpbWUpLnJlZFBvdyh0aGlzLl9wcml2KS5mcm9tUmVkKCk7XG4gIHJldHVybiB0aGlzLmdldFB1YmxpY0tleSgpO1xufTtcblxuREgucHJvdG90eXBlLmNvbXB1dGVTZWNyZXQgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgb3RoZXIgPSBuZXcgQk4ob3RoZXIpO1xuICBvdGhlciA9IG90aGVyLnRvUmVkKHRoaXMuX3ByaW1lKTtcbiAgdmFyIHNlY3JldCA9IG90aGVyLnJlZFBvdyh0aGlzLl9wcml2KS5mcm9tUmVkKCk7XG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKHNlY3JldC50b0FycmF5KCkpO1xuICB2YXIgcHJpbWUgPSB0aGlzLmdldFByaW1lKCk7XG4gIGlmIChvdXQubGVuZ3RoIDwgcHJpbWUubGVuZ3RoKSB7XG4gICAgdmFyIGZyb250ID0gbmV3IEJ1ZmZlcihwcmltZS5sZW5ndGggLSBvdXQubGVuZ3RoKTtcbiAgICBmcm9udC5maWxsKDApO1xuICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW2Zyb250LCBvdXRdKTtcbiAgfVxuICByZXR1cm4gb3V0O1xufTtcblxuREgucHJvdG90eXBlLmdldFB1YmxpY0tleSA9IGZ1bmN0aW9uIGdldFB1YmxpY0tleShlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX3B1YiwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRQcml2YXRlS2V5ID0gZnVuY3Rpb24gZ2V0UHJpdmF0ZUtleShlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX3ByaXYsIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0UHJpbWUgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9fcHJpbWUsIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0R2VuZXJhdG9yID0gZnVuY3Rpb24gKGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fZ2VuLCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLnNldEdlbmVyYXRvciA9IGZ1bmN0aW9uIChnZW4sIGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ3V0ZjgnO1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihnZW4pKSB7XG4gICAgZ2VuID0gbmV3IEJ1ZmZlcihnZW4sIGVuYyk7XG4gIH1cbiAgdGhpcy5fX2dlbiA9IGdlbjtcbiAgdGhpcy5fZ2VuID0gbmV3IEJOKGdlbik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZm9ybWF0UmV0dXJuVmFsdWUoYm4sIGVuYykge1xuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihibi50b0FycmF5KCkpO1xuICBpZiAoIWVuYykge1xuICAgIHJldHVybiBidWY7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJ1Zi50b1N0cmluZyhlbmMpO1xuICB9XG59XG4iLCJ2YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbnZhciBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL3NpZ24nKVxudmFyIHZlcmlmeSA9IHJlcXVpcmUoJy4vdmVyaWZ5JylcblxudmFyIGFsZ29yaXRobXMgPSByZXF1aXJlKCcuL2FsZ29yaXRobXMuanNvbicpXG5PYmplY3Qua2V5cyhhbGdvcml0aG1zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgYWxnb3JpdGhtc1trZXldLmlkID0gbmV3IEJ1ZmZlcihhbGdvcml0aG1zW2tleV0uaWQsICdoZXgnKVxuICBhbGdvcml0aG1zW2tleS50b0xvd2VyQ2FzZSgpXSA9IGFsZ29yaXRobXNba2V5XVxufSlcblxuZnVuY3Rpb24gU2lnbiAoYWxnb3JpdGhtKSB7XG4gIHN0cmVhbS5Xcml0YWJsZS5jYWxsKHRoaXMpXG5cbiAgdmFyIGRhdGEgPSBhbGdvcml0aG1zW2FsZ29yaXRobV1cbiAgaWYgKCFkYXRhKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbWVzc2FnZSBkaWdlc3QnKVxuXG4gIHRoaXMuX2hhc2hUeXBlID0gZGF0YS5oYXNoXG4gIHRoaXMuX2hhc2ggPSBjcmVhdGVIYXNoKGRhdGEuaGFzaClcbiAgdGhpcy5fdGFnID0gZGF0YS5pZFxuICB0aGlzLl9zaWduVHlwZSA9IGRhdGEuc2lnblxufVxuaW5oZXJpdHMoU2lnbiwgc3RyZWFtLldyaXRhYmxlKVxuXG5TaWduLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUgKGRhdGEsIF8sIGRvbmUpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgZG9uZSgpXG59XG5cblNpZ24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIGRhdGEgPSBuZXcgQnVmZmVyKGRhdGEsIGVuYylcblxuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuICByZXR1cm4gdGhpc1xufVxuXG5TaWduLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbk1ldGhvZCAoa2V5LCBlbmMpIHtcbiAgdGhpcy5lbmQoKVxuICB2YXIgaGFzaCA9IHRoaXMuX2hhc2guZGlnZXN0KClcbiAgdmFyIHNpZyA9IHNpZ24oaGFzaCwga2V5LCB0aGlzLl9oYXNoVHlwZSwgdGhpcy5fc2lnblR5cGUsIHRoaXMuX3RhZylcblxuICByZXR1cm4gZW5jID8gc2lnLnRvU3RyaW5nKGVuYykgOiBzaWdcbn1cblxuZnVuY3Rpb24gVmVyaWZ5IChhbGdvcml0aG0pIHtcbiAgc3RyZWFtLldyaXRhYmxlLmNhbGwodGhpcylcblxuICB2YXIgZGF0YSA9IGFsZ29yaXRobXNbYWxnb3JpdGhtXVxuICBpZiAoIWRhdGEpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtZXNzYWdlIGRpZ2VzdCcpXG5cbiAgdGhpcy5faGFzaCA9IGNyZWF0ZUhhc2goZGF0YS5oYXNoKVxuICB0aGlzLl90YWcgPSBkYXRhLmlkXG4gIHRoaXMuX3NpZ25UeXBlID0gZGF0YS5zaWduXG59XG5pbmhlcml0cyhWZXJpZnksIHN0cmVhbS5Xcml0YWJsZSlcblxuVmVyaWZ5LnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUgKGRhdGEsIF8sIGRvbmUpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgZG9uZSgpXG59XG5cblZlcmlmeS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChkYXRhLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgZW5jKVxuXG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG4gIHJldHVybiB0aGlzXG59XG5cblZlcmlmeS5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5TWV0aG9kIChrZXksIHNpZywgZW5jKSB7XG4gIGlmICh0eXBlb2Ygc2lnID09PSAnc3RyaW5nJykgc2lnID0gbmV3IEJ1ZmZlcihzaWcsIGVuYylcblxuICB0aGlzLmVuZCgpXG4gIHZhciBoYXNoID0gdGhpcy5faGFzaC5kaWdlc3QoKVxuICByZXR1cm4gdmVyaWZ5KHNpZywgaGFzaCwga2V5LCB0aGlzLl9zaWduVHlwZSwgdGhpcy5fdGFnKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTaWduIChhbGdvcml0aG0pIHtcbiAgcmV0dXJuIG5ldyBTaWduKGFsZ29yaXRobSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVmVyaWZ5IChhbGdvcml0aG0pIHtcbiAgcmV0dXJuIG5ldyBWZXJpZnkoYWxnb3JpdGhtKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgU2lnbjogY3JlYXRlU2lnbixcbiAgVmVyaWZ5OiBjcmVhdGVWZXJpZnksXG4gIGNyZWF0ZVNpZ246IGNyZWF0ZVNpZ24sXG4gIGNyZWF0ZVZlcmlmeTogY3JlYXRlVmVyaWZ5XG59XG4iLCIvLyBtdWNoIG9mIHRoaXMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvc2VsZi1zaWduZWQvYmxvYi9naC1wYWdlcy9saWIvcnNhLmpzXG52YXIgY3JlYXRlSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJylcbnZhciBjcnQgPSByZXF1aXJlKCdicm93c2VyaWZ5LXJzYScpXG52YXIgRUMgPSByZXF1aXJlKCdlbGxpcHRpYycpLmVjXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpXG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi9jdXJ2ZXMuanNvbicpXG5cbmZ1bmN0aW9uIHNpZ24gKGhhc2gsIGtleSwgaGFzaFR5cGUsIHNpZ25UeXBlLCB0YWcpIHtcbiAgdmFyIHByaXYgPSBwYXJzZUtleXMoa2V5KVxuICBpZiAocHJpdi5jdXJ2ZSkge1xuICAgIC8vIHJzYSBrZXlzIGNhbiBiZSBpbnRlcnByZXRlZCBhcyBlY2RzYSBvbmVzIGluIG9wZW5zc2xcbiAgICBpZiAoc2lnblR5cGUgIT09ICdlY2RzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHByaXZhdGUga2V5IHR5cGUnKVxuICAgIHJldHVybiBlY1NpZ24oaGFzaCwgcHJpdilcbiAgfSBlbHNlIGlmIChwcml2LnR5cGUgPT09ICdkc2EnKSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZHNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcbiAgICByZXR1cm4gZHNhU2lnbihoYXNoLCBwcml2LCBoYXNoVHlwZSlcbiAgfSBlbHNlIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdyc2EnICYmIHNpZ25UeXBlICE9PSAnZWNkc2EvcnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcbiAgfVxuICBoYXNoID0gQnVmZmVyLmNvbmNhdChbdGFnLCBoYXNoXSlcbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgdmFyIHBhZCA9IFsgMCwgMSBdXG4gIHdoaWxlIChoYXNoLmxlbmd0aCArIHBhZC5sZW5ndGggKyAxIDwgbGVuKSBwYWQucHVzaCgweGZmKVxuICBwYWQucHVzaCgweDAwKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBoYXNoLmxlbmd0aCkgcGFkLnB1c2goaGFzaFtpXSlcblxuICB2YXIgb3V0ID0gY3J0KHBhZCwgcHJpdilcbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBlY1NpZ24gKGhhc2gsIHByaXYpIHtcbiAgdmFyIGN1cnZlSWQgPSBjdXJ2ZXNbcHJpdi5jdXJ2ZS5qb2luKCcuJyldXG4gIGlmICghY3VydmVJZCkgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGN1cnZlICcgKyBwcml2LmN1cnZlLmpvaW4oJy4nKSlcblxuICB2YXIgY3VydmUgPSBuZXcgRUMoY3VydmVJZClcbiAgdmFyIGtleSA9IGN1cnZlLmtleUZyb21Qcml2YXRlKHByaXYucHJpdmF0ZUtleSlcbiAgdmFyIG91dCA9IGtleS5zaWduKGhhc2gpXG5cbiAgcmV0dXJuIG5ldyBCdWZmZXIob3V0LnRvREVSKCkpXG59XG5cbmZ1bmN0aW9uIGRzYVNpZ24gKGhhc2gsIHByaXYsIGFsZ28pIHtcbiAgdmFyIHggPSBwcml2LnBhcmFtcy5wcml2X2tleVxuICB2YXIgcCA9IHByaXYucGFyYW1zLnBcbiAgdmFyIHEgPSBwcml2LnBhcmFtcy5xXG4gIHZhciBnID0gcHJpdi5wYXJhbXMuZ1xuICB2YXIgciA9IG5ldyBCTigwKVxuICB2YXIga1xuICB2YXIgSCA9IGJpdHMyaW50KGhhc2gsIHEpLm1vZChxKVxuICB2YXIgcyA9IGZhbHNlXG4gIHZhciBrdiA9IGdldEtleSh4LCBxLCBoYXNoLCBhbGdvKVxuICB3aGlsZSAocyA9PT0gZmFsc2UpIHtcbiAgICBrID0gbWFrZUtleShxLCBrdiwgYWxnbylcbiAgICByID0gbWFrZVIoZywgaywgcCwgcSlcbiAgICBzID0gay5pbnZtKHEpLmltdWwoSC5hZGQoeC5tdWwocikpKS5tb2QocSlcbiAgICBpZiAocy5jbXBuKDApID09PSAwKSB7XG4gICAgICBzID0gZmFsc2VcbiAgICAgIHIgPSBuZXcgQk4oMClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvREVSKHIsIHMpXG59XG5cbmZ1bmN0aW9uIHRvREVSIChyLCBzKSB7XG4gIHIgPSByLnRvQXJyYXkoKVxuICBzID0gcy50b0FycmF5KClcblxuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChyWzBdICYgMHg4MCkgciA9IFsgMCBdLmNvbmNhdChyKVxuICBpZiAoc1swXSAmIDB4ODApIHMgPSBbIDAgXS5jb25jYXQocylcblxuICB2YXIgdG90YWwgPSByLmxlbmd0aCArIHMubGVuZ3RoICsgNFxuICB2YXIgcmVzID0gWyAweDMwLCB0b3RhbCwgMHgwMiwgci5sZW5ndGggXVxuICByZXMgPSByZXMuY29uY2F0KHIsIFsgMHgwMiwgcy5sZW5ndGggXSwgcylcbiAgcmV0dXJuIG5ldyBCdWZmZXIocmVzKVxufVxuXG5mdW5jdGlvbiBnZXRLZXkgKHgsIHEsIGhhc2gsIGFsZ28pIHtcbiAgeCA9IG5ldyBCdWZmZXIoeC50b0FycmF5KCkpXG4gIGlmICh4Lmxlbmd0aCA8IHEuYnl0ZUxlbmd0aCgpKSB7XG4gICAgdmFyIHplcm9zID0gbmV3IEJ1ZmZlcihxLmJ5dGVMZW5ndGgoKSAtIHgubGVuZ3RoKVxuICAgIHplcm9zLmZpbGwoMClcbiAgICB4ID0gQnVmZmVyLmNvbmNhdChbIHplcm9zLCB4IF0pXG4gIH1cbiAgdmFyIGhsZW4gPSBoYXNoLmxlbmd0aFxuICB2YXIgaGJpdHMgPSBiaXRzMm9jdGV0cyhoYXNoLCBxKVxuICB2YXIgdiA9IG5ldyBCdWZmZXIoaGxlbilcbiAgdi5maWxsKDEpXG4gIHZhciBrID0gbmV3IEJ1ZmZlcihobGVuKVxuICBrLmZpbGwoMClcbiAgayA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLnVwZGF0ZShuZXcgQnVmZmVyKFsgMCBdKSkudXBkYXRlKHgpLnVwZGF0ZShoYml0cykuZGlnZXN0KClcbiAgdiA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLmRpZ2VzdCgpXG4gIGsgPSBjcmVhdGVIbWFjKGFsZ28sIGspLnVwZGF0ZSh2KS51cGRhdGUobmV3IEJ1ZmZlcihbIDEgXSkpLnVwZGF0ZSh4KS51cGRhdGUoaGJpdHMpLmRpZ2VzdCgpXG4gIHYgPSBjcmVhdGVIbWFjKGFsZ28sIGspLnVwZGF0ZSh2KS5kaWdlc3QoKVxuICByZXR1cm4geyBrOiBrLCB2OiB2IH1cbn1cblxuZnVuY3Rpb24gYml0czJpbnQgKG9iaXRzLCBxKSB7XG4gIHZhciBiaXRzID0gbmV3IEJOKG9iaXRzKVxuICB2YXIgc2hpZnQgPSAob2JpdHMubGVuZ3RoIDw8IDMpIC0gcS5iaXRMZW5ndGgoKVxuICBpZiAoc2hpZnQgPiAwKSBiaXRzLmlzaHJuKHNoaWZ0KVxuICByZXR1cm4gYml0c1xufVxuXG5mdW5jdGlvbiBiaXRzMm9jdGV0cyAoYml0cywgcSkge1xuICBiaXRzID0gYml0czJpbnQoYml0cywgcSlcbiAgYml0cyA9IGJpdHMubW9kKHEpXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGJpdHMudG9BcnJheSgpKVxuICBpZiAob3V0Lmxlbmd0aCA8IHEuYnl0ZUxlbmd0aCgpKSB7XG4gICAgdmFyIHplcm9zID0gbmV3IEJ1ZmZlcihxLmJ5dGVMZW5ndGgoKSAtIG91dC5sZW5ndGgpXG4gICAgemVyb3MuZmlsbCgwKVxuICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoWyB6ZXJvcywgb3V0IF0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBtYWtlS2V5IChxLCBrdiwgYWxnbykge1xuICB2YXIgdFxuICB2YXIga1xuXG4gIGRvIHtcbiAgICB0ID0gbmV3IEJ1ZmZlcigwKVxuXG4gICAgd2hpbGUgKHQubGVuZ3RoICogOCA8IHEuYml0TGVuZ3RoKCkpIHtcbiAgICAgIGt2LnYgPSBjcmVhdGVIbWFjKGFsZ28sIGt2LmspLnVwZGF0ZShrdi52KS5kaWdlc3QoKVxuICAgICAgdCA9IEJ1ZmZlci5jb25jYXQoWyB0LCBrdi52IF0pXG4gICAgfVxuXG4gICAgayA9IGJpdHMyaW50KHQsIHEpXG4gICAga3YuayA9IGNyZWF0ZUhtYWMoYWxnbywga3YuaykudXBkYXRlKGt2LnYpLnVwZGF0ZShuZXcgQnVmZmVyKFsgMCBdKSkuZGlnZXN0KClcbiAgICBrdi52ID0gY3JlYXRlSG1hYyhhbGdvLCBrdi5rKS51cGRhdGUoa3YudikuZGlnZXN0KClcbiAgfSB3aGlsZSAoay5jbXAocSkgIT09IC0xKVxuXG4gIHJldHVybiBrXG59XG5cbmZ1bmN0aW9uIG1ha2VSIChnLCBrLCBwLCBxKSB7XG4gIHJldHVybiBnLnRvUmVkKEJOLm1vbnQocCkpLnJlZFBvdyhrKS5mcm9tUmVkKCkubW9kKHEpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2lnblxubW9kdWxlLmV4cG9ydHMuZ2V0S2V5ID0gZ2V0S2V5XG5tb2R1bGUuZXhwb3J0cy5tYWtlS2V5ID0gbWFrZUtleVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xuXG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBTaG9ydEN1cnZlKGNvbmYpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdzaG9ydCcsIGNvbmYpO1xuXG4gIHRoaXMuYSA9IG5ldyBCTihjb25mLmEsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYiA9IG5ldyBCTihjb25mLmIsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMudGludiA9IHRoaXMudHdvLnJlZEludm0oKTtcblxuICB0aGlzLnplcm9BID0gdGhpcy5hLmZyb21SZWQoKS5jbXBuKDApID09PSAwO1xuICB0aGlzLnRocmVlQSA9IHRoaXMuYS5mcm9tUmVkKCkuc3ViKHRoaXMucCkuY21wbigtMykgPT09IDA7XG5cbiAgLy8gSWYgdGhlIGN1cnZlIGlzIGVuZG9tb3JwaGljLCBwcmVjYWxjdWxhdGUgYmV0YSBhbmQgbGFtYmRhXG4gIHRoaXMuZW5kbyA9IHRoaXMuX2dldEVuZG9tb3JwaGlzbShjb25mKTtcbiAgdGhpcy5fZW5kb1duYWZUMSA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fZW5kb1duYWZUMiA9IG5ldyBBcnJheSg0KTtcbn1cbmluaGVyaXRzKFNob3J0Q3VydmUsIEJhc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBTaG9ydEN1cnZlO1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZ2V0RW5kb21vcnBoaXNtID0gZnVuY3Rpb24gX2dldEVuZG9tb3JwaGlzbShjb25mKSB7XG4gIC8vIE5vIGVmZmljaWVudCBlbmRvbW9ycGhpc21cbiAgaWYgKCF0aGlzLnplcm9BIHx8ICF0aGlzLmcgfHwgIXRoaXMubiB8fCB0aGlzLnAubW9kbigzKSAhPT0gMSlcbiAgICByZXR1cm47XG5cbiAgLy8gQ29tcHV0ZSBiZXRhIGFuZCBsYW1iZGEsIHRoYXQgbGFtYmRhICogUCA9IChiZXRhICogUHg7IFB5KVxuICB2YXIgYmV0YTtcbiAgdmFyIGxhbWJkYTtcbiAgaWYgKGNvbmYuYmV0YSkge1xuICAgIGJldGEgPSBuZXcgQk4oY29uZi5iZXRhLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB9IGVsc2Uge1xuICAgIHZhciBiZXRhcyA9IHRoaXMuX2dldEVuZG9Sb290cyh0aGlzLnApO1xuICAgIC8vIENob29zZSB0aGUgc21hbGxlc3QgYmV0YVxuICAgIGJldGEgPSBiZXRhc1swXS5jbXAoYmV0YXNbMV0pIDwgMCA/IGJldGFzWzBdIDogYmV0YXNbMV07XG4gICAgYmV0YSA9IGJldGEudG9SZWQodGhpcy5yZWQpO1xuICB9XG4gIGlmIChjb25mLmxhbWJkYSkge1xuICAgIGxhbWJkYSA9IG5ldyBCTihjb25mLmxhbWJkYSwgMTYpO1xuICB9IGVsc2Uge1xuICAgIC8vIENob29zZSB0aGUgbGFtYmRhIHRoYXQgaXMgbWF0Y2hpbmcgc2VsZWN0ZWQgYmV0YVxuICAgIHZhciBsYW1iZGFzID0gdGhpcy5fZ2V0RW5kb1Jvb3RzKHRoaXMubik7XG4gICAgaWYgKHRoaXMuZy5tdWwobGFtYmRhc1swXSkueC5jbXAodGhpcy5nLngucmVkTXVsKGJldGEpKSA9PT0gMCkge1xuICAgICAgbGFtYmRhID0gbGFtYmRhc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFtYmRhID0gbGFtYmRhc1sxXTtcbiAgICAgIGFzc2VydCh0aGlzLmcubXVsKGxhbWJkYSkueC5jbXAodGhpcy5nLngucmVkTXVsKGJldGEpKSA9PT0gMCk7XG4gICAgfVxuICB9XG5cbiAgLy8gR2V0IGJhc2lzIHZlY3RvcnMsIHVzZWQgZm9yIGJhbGFuY2VkIGxlbmd0aC10d28gcmVwcmVzZW50YXRpb25cbiAgdmFyIGJhc2lzO1xuICBpZiAoY29uZi5iYXNpcykge1xuICAgIGJhc2lzID0gY29uZi5iYXNpcy5tYXAoZnVuY3Rpb24odmVjKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhOiBuZXcgQk4odmVjLmEsIDE2KSxcbiAgICAgICAgYjogbmV3IEJOKHZlYy5iLCAxNilcbiAgICAgIH07XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgYmFzaXMgPSB0aGlzLl9nZXRFbmRvQmFzaXMobGFtYmRhKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYmV0YTogYmV0YSxcbiAgICBsYW1iZGE6IGxhbWJkYSxcbiAgICBiYXNpczogYmFzaXNcbiAgfTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9nZXRFbmRvUm9vdHMgPSBmdW5jdGlvbiBfZ2V0RW5kb1Jvb3RzKG51bSkge1xuICAvLyBGaW5kIHJvb3RzIG9mIGZvciB4XjIgKyB4ICsgMSBpbiBGXG4gIC8vIFJvb3QgPSAoLTEgKy0gU3FydCgtMykpIC8gMlxuICAvL1xuICB2YXIgcmVkID0gbnVtID09PSB0aGlzLnAgPyB0aGlzLnJlZCA6IEJOLm1vbnQobnVtKTtcbiAgdmFyIHRpbnYgPSBuZXcgQk4oMikudG9SZWQocmVkKS5yZWRJbnZtKCk7XG4gIHZhciBudGludiA9IHRpbnYucmVkTmVnKCk7XG5cbiAgdmFyIHMgPSBuZXcgQk4oMykudG9SZWQocmVkKS5yZWROZWcoKS5yZWRTcXJ0KCkucmVkTXVsKHRpbnYpO1xuXG4gIHZhciBsMSA9IG50aW52LnJlZEFkZChzKS5mcm9tUmVkKCk7XG4gIHZhciBsMiA9IG50aW52LnJlZFN1YihzKS5mcm9tUmVkKCk7XG4gIHJldHVybiBbIGwxLCBsMiBdO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9CYXNpcyA9IGZ1bmN0aW9uIF9nZXRFbmRvQmFzaXMobGFtYmRhKSB7XG4gIC8vIGFwcnhTcXJ0ID49IHNxcnQodGhpcy5uKVxuICB2YXIgYXByeFNxcnQgPSB0aGlzLm4udXNocm4oTWF0aC5mbG9vcih0aGlzLm4uYml0TGVuZ3RoKCkgLyAyKSk7XG5cbiAgLy8gMy43NFxuICAvLyBSdW4gRUdDRCwgdW50aWwgcihMICsgMSkgPCBhcHJ4U3FydFxuICB2YXIgdSA9IGxhbWJkYTtcbiAgdmFyIHYgPSB0aGlzLm4uY2xvbmUoKTtcbiAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICB2YXIgeTEgPSBuZXcgQk4oMCk7XG4gIHZhciB4MiA9IG5ldyBCTigwKTtcbiAgdmFyIHkyID0gbmV3IEJOKDEpO1xuXG4gIC8vIE5PVEU6IGFsbCB2ZWN0b3JzIGFyZSByb290cyBvZjogYSArIGIgKiBsYW1iZGEgPSAwIChtb2QgbilcbiAgdmFyIGEwO1xuICB2YXIgYjA7XG4gIC8vIEZpcnN0IHZlY3RvclxuICB2YXIgYTE7XG4gIHZhciBiMTtcbiAgLy8gU2Vjb25kIHZlY3RvclxuICB2YXIgYTI7XG4gIHZhciBiMjtcblxuICB2YXIgcHJldlI7XG4gIHZhciBpID0gMDtcbiAgdmFyIHI7XG4gIHZhciB4O1xuICB3aGlsZSAodS5jbXBuKDApICE9PSAwKSB7XG4gICAgdmFyIHEgPSB2LmRpdih1KTtcbiAgICByID0gdi5zdWIocS5tdWwodSkpO1xuICAgIHggPSB4Mi5zdWIocS5tdWwoeDEpKTtcbiAgICB2YXIgeSA9IHkyLnN1YihxLm11bCh5MSkpO1xuXG4gICAgaWYgKCFhMSAmJiByLmNtcChhcHJ4U3FydCkgPCAwKSB7XG4gICAgICBhMCA9IHByZXZSLm5lZygpO1xuICAgICAgYjAgPSB4MTtcbiAgICAgIGExID0gci5uZWcoKTtcbiAgICAgIGIxID0geDtcbiAgICB9IGVsc2UgaWYgKGExICYmICsraSA9PT0gMikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHByZXZSID0gcjtcblxuICAgIHYgPSB1O1xuICAgIHUgPSByO1xuICAgIHgyID0geDE7XG4gICAgeDEgPSB4O1xuICAgIHkyID0geTE7XG4gICAgeTEgPSB5O1xuICB9XG4gIGEyID0gci5uZWcoKTtcbiAgYjIgPSB4O1xuXG4gIHZhciBsZW4xID0gYTEuc3FyKCkuYWRkKGIxLnNxcigpKTtcbiAgdmFyIGxlbjIgPSBhMi5zcXIoKS5hZGQoYjIuc3FyKCkpO1xuICBpZiAobGVuMi5jbXAobGVuMSkgPj0gMCkge1xuICAgIGEyID0gYTA7XG4gICAgYjIgPSBiMDtcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBzaWduc1xuICBpZiAoYTEubmVnYXRpdmUpIHtcbiAgICBhMSA9IGExLm5lZygpO1xuICAgIGIxID0gYjEubmVnKCk7XG4gIH1cbiAgaWYgKGEyLm5lZ2F0aXZlKSB7XG4gICAgYTIgPSBhMi5uZWcoKTtcbiAgICBiMiA9IGIyLm5lZygpO1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICB7IGE6IGExLCBiOiBiMSB9LFxuICAgIHsgYTogYTIsIGI6IGIyIH1cbiAgXTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9lbmRvU3BsaXQgPSBmdW5jdGlvbiBfZW5kb1NwbGl0KGspIHtcbiAgdmFyIGJhc2lzID0gdGhpcy5lbmRvLmJhc2lzO1xuICB2YXIgdjEgPSBiYXNpc1swXTtcbiAgdmFyIHYyID0gYmFzaXNbMV07XG5cbiAgdmFyIGMxID0gdjIuYi5tdWwoaykuZGl2Um91bmQodGhpcy5uKTtcbiAgdmFyIGMyID0gdjEuYi5uZWcoKS5tdWwoaykuZGl2Um91bmQodGhpcy5uKTtcblxuICB2YXIgcDEgPSBjMS5tdWwodjEuYSk7XG4gIHZhciBwMiA9IGMyLm11bCh2Mi5hKTtcbiAgdmFyIHExID0gYzEubXVsKHYxLmIpO1xuICB2YXIgcTIgPSBjMi5tdWwodjIuYik7XG5cbiAgLy8gQ2FsY3VsYXRlIGFuc3dlclxuICB2YXIgazEgPSBrLnN1YihwMSkuc3ViKHAyKTtcbiAgdmFyIGsyID0gcTEuYWRkKHEyKS5uZWcoKTtcbiAgcmV0dXJuIHsgazE6IGsxLCBrMjogazIgfTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbVggPSBmdW5jdGlvbiBwb2ludEZyb21YKHgsIG9kZCkge1xuICB4ID0gbmV3IEJOKHgsIDE2KTtcbiAgaWYgKCF4LnJlZClcbiAgICB4ID0geC50b1JlZCh0aGlzLnJlZCk7XG5cbiAgdmFyIHkyID0geC5yZWRTcXIoKS5yZWRNdWwoeCkucmVkSUFkZCh4LnJlZE11bCh0aGlzLmEpKS5yZWRJQWRkKHRoaXMuYik7XG4gIHZhciB5ID0geTIucmVkU3FydCgpO1xuICBpZiAoeS5yZWRTcXIoKS5yZWRTdWIoeTIpLmNtcCh0aGlzLnplcm8pICE9PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuXG4gIC8vIFhYWCBJcyB0aGVyZSBhbnkgd2F5IHRvIHRlbGwgaWYgdGhlIG51bWJlciBpcyBvZGQgd2l0aG91dCBjb252ZXJ0aW5nIGl0XG4gIC8vIHRvIG5vbi1yZWQgZm9ybT9cbiAgdmFyIGlzT2RkID0geS5mcm9tUmVkKCkuaXNPZGQoKTtcbiAgaWYgKG9kZCAmJiAhaXNPZGQgfHwgIW9kZCAmJiBpc09kZClcbiAgICB5ID0geS5yZWROZWcoKTtcblxuICByZXR1cm4gdGhpcy5wb2ludCh4LCB5KTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHtcbiAgaWYgKHBvaW50LmluZilcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB2YXIgeCA9IHBvaW50Lng7XG4gIHZhciB5ID0gcG9pbnQueTtcblxuICB2YXIgYXggPSB0aGlzLmEucmVkTXVsKHgpO1xuICB2YXIgcmhzID0geC5yZWRTcXIoKS5yZWRNdWwoeCkucmVkSUFkZChheCkucmVkSUFkZCh0aGlzLmIpO1xuICByZXR1cm4geS5yZWRTcXIoKS5yZWRJU3ViKHJocykuY21wbigwKSA9PT0gMDtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9lbmRvV25hZk11bEFkZCA9XG4gICAgZnVuY3Rpb24gX2VuZG9XbmFmTXVsQWRkKHBvaW50cywgY29lZmZzLCBqYWNvYmlhblJlc3VsdCkge1xuICB2YXIgbnBvaW50cyA9IHRoaXMuX2VuZG9XbmFmVDE7XG4gIHZhciBuY29lZmZzID0gdGhpcy5fZW5kb1duYWZUMjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3BsaXQgPSB0aGlzLl9lbmRvU3BsaXQoY29lZmZzW2ldKTtcbiAgICB2YXIgcCA9IHBvaW50c1tpXTtcbiAgICB2YXIgYmV0YSA9IHAuX2dldEJldGEoKTtcblxuICAgIGlmIChzcGxpdC5rMS5uZWdhdGl2ZSkge1xuICAgICAgc3BsaXQuazEuaW5lZygpO1xuICAgICAgcCA9IHAubmVnKHRydWUpO1xuICAgIH1cbiAgICBpZiAoc3BsaXQuazIubmVnYXRpdmUpIHtcbiAgICAgIHNwbGl0LmsyLmluZWcoKTtcbiAgICAgIGJldGEgPSBiZXRhLm5lZyh0cnVlKTtcbiAgICB9XG5cbiAgICBucG9pbnRzW2kgKiAyXSA9IHA7XG4gICAgbnBvaW50c1tpICogMiArIDFdID0gYmV0YTtcbiAgICBuY29lZmZzW2kgKiAyXSA9IHNwbGl0LmsxO1xuICAgIG5jb2VmZnNbaSAqIDIgKyAxXSA9IHNwbGl0LmsyO1xuICB9XG4gIHZhciByZXMgPSB0aGlzLl93bmFmTXVsQWRkKDEsIG5wb2ludHMsIG5jb2VmZnMsIGkgKiAyLCBqYWNvYmlhblJlc3VsdCk7XG5cbiAgLy8gQ2xlYW4tdXAgcmVmZXJlbmNlcyB0byBwb2ludHMgYW5kIGNvZWZmaWNpZW50c1xuICBmb3IgKHZhciBqID0gMDsgaiA8IGkgKiAyOyBqKyspIHtcbiAgICBucG9pbnRzW2pdID0gbnVsbDtcbiAgICBuY29lZmZzW2pdID0gbnVsbDtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuZnVuY3Rpb24gUG9pbnQoY3VydmUsIHgsIHksIGlzUmVkKSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdhZmZpbmUnKTtcbiAgaWYgKHggPT09IG51bGwgJiYgeSA9PT0gbnVsbCkge1xuICAgIHRoaXMueCA9IG51bGw7XG4gICAgdGhpcy55ID0gbnVsbDtcbiAgICB0aGlzLmluZiA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTtcbiAgICB0aGlzLnkgPSBuZXcgQk4oeSwgMTYpO1xuICAgIC8vIEZvcmNlIHJlZGdvbWVyeSByZXByZXNlbnRhdGlvbiB3aGVuIGxvYWRpbmcgZnJvbSBKU09OXG4gICAgaWYgKGlzUmVkKSB7XG4gICAgICB0aGlzLnguZm9yY2VSZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgICAgdGhpcy55LmZvcmNlUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLngucmVkKVxuICAgICAgdGhpcy54ID0gdGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMueS5yZWQpXG4gICAgICB0aGlzLnkgPSB0aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIHRoaXMuaW5mID0gZmFsc2U7XG4gIH1cbn1cbmluaGVyaXRzKFBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoeCwgeSwgaXNSZWQpIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB5LCBpc1JlZCk7XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21KU09OID0gZnVuY3Rpb24gcG9pbnRGcm9tSlNPTihvYmosIHJlZCkge1xuICByZXR1cm4gUG9pbnQuZnJvbUpTT04odGhpcywgb2JqLCByZWQpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9nZXRCZXRhID0gZnVuY3Rpb24gX2dldEJldGEoKSB7XG4gIGlmICghdGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybjtcblxuICB2YXIgcHJlID0gdGhpcy5wcmVjb21wdXRlZDtcbiAgaWYgKHByZSAmJiBwcmUuYmV0YSlcbiAgICByZXR1cm4gcHJlLmJldGE7XG5cbiAgdmFyIGJldGEgPSB0aGlzLmN1cnZlLnBvaW50KHRoaXMueC5yZWRNdWwodGhpcy5jdXJ2ZS5lbmRvLmJldGEpLCB0aGlzLnkpO1xuICBpZiAocHJlKSB7XG4gICAgdmFyIGN1cnZlID0gdGhpcy5jdXJ2ZTtcbiAgICB2YXIgZW5kb011bCA9IGZ1bmN0aW9uKHApIHtcbiAgICAgIHJldHVybiBjdXJ2ZS5wb2ludChwLngucmVkTXVsKGN1cnZlLmVuZG8uYmV0YSksIHAueSk7XG4gICAgfTtcbiAgICBwcmUuYmV0YSA9IGJldGE7XG4gICAgYmV0YS5wcmVjb21wdXRlZCA9IHtcbiAgICAgIGJldGE6IG51bGwsXG4gICAgICBuYWY6IHByZS5uYWYgJiYge1xuICAgICAgICB3bmQ6IHByZS5uYWYud25kLFxuICAgICAgICBwb2ludHM6IHByZS5uYWYucG9pbnRzLm1hcChlbmRvTXVsKVxuICAgICAgfSxcbiAgICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHtcbiAgICAgICAgc3RlcDogcHJlLmRvdWJsZXMuc3RlcCxcbiAgICAgICAgcG9pbnRzOiBwcmUuZG91Ymxlcy5wb2ludHMubWFwKGVuZG9NdWwpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICByZXR1cm4gYmV0YTtcbn07XG5cblBvaW50LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gIGlmICghdGhpcy5wcmVjb21wdXRlZClcbiAgICByZXR1cm4gWyB0aGlzLngsIHRoaXMueSBdO1xuXG4gIHJldHVybiBbIHRoaXMueCwgdGhpcy55LCB0aGlzLnByZWNvbXB1dGVkICYmIHtcbiAgICBkb3VibGVzOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMgJiYge1xuICAgICAgc3RlcDogdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzLnN0ZXAsXG4gICAgICBwb2ludHM6IHRoaXMucHJlY29tcHV0ZWQuZG91Ymxlcy5wb2ludHMuc2xpY2UoMSlcbiAgICB9LFxuICAgIG5hZjogdGhpcy5wcmVjb21wdXRlZC5uYWYgJiYge1xuICAgICAgd25kOiB0aGlzLnByZWNvbXB1dGVkLm5hZi53bmQsXG4gICAgICBwb2ludHM6IHRoaXMucHJlY29tcHV0ZWQubmFmLnBvaW50cy5zbGljZSgxKVxuICAgIH1cbiAgfSBdO1xufTtcblxuUG9pbnQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihjdXJ2ZSwgb2JqLCByZWQpIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKVxuICAgIG9iaiA9IEpTT04ucGFyc2Uob2JqKTtcbiAgdmFyIHJlcyA9IGN1cnZlLnBvaW50KG9ialswXSwgb2JqWzFdLCByZWQpO1xuICBpZiAoIW9ialsyXSlcbiAgICByZXR1cm4gcmVzO1xuXG4gIGZ1bmN0aW9uIG9iajJwb2ludChvYmopIHtcbiAgICByZXR1cm4gY3VydmUucG9pbnQob2JqWzBdLCBvYmpbMV0sIHJlZCk7XG4gIH1cblxuICB2YXIgcHJlID0gb2JqWzJdO1xuICByZXMucHJlY29tcHV0ZWQgPSB7XG4gICAgYmV0YTogbnVsbCxcbiAgICBkb3VibGVzOiBwcmUuZG91YmxlcyAmJiB7XG4gICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLFxuICAgICAgcG9pbnRzOiBbIHJlcyBdLmNvbmNhdChwcmUuZG91Ymxlcy5wb2ludHMubWFwKG9iajJwb2ludCkpXG4gICAgfSxcbiAgICBuYWY6IHByZS5uYWYgJiYge1xuICAgICAgd25kOiBwcmUubmFmLnduZCxcbiAgICAgIHBvaW50czogWyByZXMgXS5jb25jYXQocHJlLm5hZi5wb2ludHMubWFwKG9iajJwb2ludCkpXG4gICAgfVxuICB9O1xuICByZXR1cm4gcmVzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgUG9pbnQgSW5maW5pdHk+JztcbiAgcmV0dXJuICc8RUMgUG9pbnQgeDogJyArIHRoaXMueC5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgeTogJyArIHRoaXMueS5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICByZXR1cm4gdGhpcy5pbmY7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHApIHtcbiAgLy8gTyArIFAgPSBQXG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gcDtcblxuICAvLyBQICsgTyA9IFBcbiAgaWYgKHAuaW5mKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIFAgKyBQID0gMlBcbiAgaWYgKHRoaXMuZXEocCkpXG4gICAgcmV0dXJuIHRoaXMuZGJsKCk7XG5cbiAgLy8gUCArICgtUCkgPSBPXG4gIGlmICh0aGlzLm5lZygpLmVxKHApKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpO1xuXG4gIC8vIFAgKyBRID0gT1xuICBpZiAodGhpcy54LmNtcChwLngpID09PSAwKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpO1xuXG4gIHZhciBjID0gdGhpcy55LnJlZFN1YihwLnkpO1xuICBpZiAoYy5jbXBuKDApICE9PSAwKVxuICAgIGMgPSBjLnJlZE11bCh0aGlzLngucmVkU3ViKHAueCkucmVkSW52bSgpKTtcbiAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHRoaXMueCkucmVkSVN1YihwLngpO1xuICB2YXIgbnkgPSBjLnJlZE11bCh0aGlzLngucmVkU3ViKG54KSkucmVkSVN1Yih0aGlzLnkpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnkpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmRibCA9IGZ1bmN0aW9uIGRibCgpIHtcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIDJQID0gT1xuICB2YXIgeXMxID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICBpZiAoeXMxLmNtcG4oMCkgPT09IDApXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7XG5cbiAgdmFyIHgyID0gdGhpcy54LnJlZFNxcigpO1xuICB2YXIgZHlpbnYgPSB5czEucmVkSW52bSgpO1xuICB2YXIgYyA9IHgyLnJlZEFkZCh4MikucmVkSUFkZCh4MikucmVkSUFkZChhKS5yZWRNdWwoZHlpbnYpO1xuXG4gIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0aGlzLngucmVkQWRkKHRoaXMueCkpO1xuICB2YXIgbnkgPSBjLnJlZE11bCh0aGlzLngucmVkU3ViKG54KSkucmVkSVN1Yih0aGlzLnkpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnkpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFggPSBmdW5jdGlvbiBnZXRYKCkge1xuICByZXR1cm4gdGhpcy54LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRZID0gZnVuY3Rpb24gZ2V0WSgpIHtcbiAgcmV0dXJuIHRoaXMueS5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGspIHtcbiAgayA9IG5ldyBCTihrLCAxNik7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcbiAgZWxzZSBpZiAodGhpcy5faGFzRG91YmxlcyhrKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZml4ZWROYWZNdWwodGhpcywgayk7XG4gIGVsc2UgaWYgKHRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQoWyB0aGlzIF0sIFsgayBdKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZChrMSwgcDIsIGsyKSB7XG4gIHZhciBwb2ludHMgPSBbIHRoaXMsIHAyIF07XG4gIHZhciBjb2VmZnMgPSBbIGsxLCBrMiBdO1xuICBpZiAodGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChwb2ludHMsIGNvZWZmcyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBwb2ludHMsIGNvZWZmcywgMik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuam11bEFkZCA9IGZ1bmN0aW9uIGptdWxBZGQoazEsIHAyLCBrMikge1xuICB2YXIgcG9pbnRzID0gWyB0aGlzLCBwMiBdO1xuICB2YXIgY29lZmZzID0gWyBrMSwgazIgXTtcbiAgaWYgKHRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQocG9pbnRzLCBjb2VmZnMsIHRydWUpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgcG9pbnRzLCBjb2VmZnMsIDIsIHRydWUpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEocCkge1xuICByZXR1cm4gdGhpcyA9PT0gcCB8fFxuICAgICAgICAgdGhpcy5pbmYgPT09IHAuaW5mICYmXG4gICAgICAgICAgICAgKHRoaXMuaW5mIHx8IHRoaXMueC5jbXAocC54KSA9PT0gMCAmJiB0aGlzLnkuY21wKHAueSkgPT09IDApO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyhfcHJlY29tcHV0ZSkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgdmFyIHJlcyA9IHRoaXMuY3VydmUucG9pbnQodGhpcy54LCB0aGlzLnkucmVkTmVnKCkpO1xuICBpZiAoX3ByZWNvbXB1dGUgJiYgdGhpcy5wcmVjb21wdXRlZCkge1xuICAgIHZhciBwcmUgPSB0aGlzLnByZWNvbXB1dGVkO1xuICAgIHZhciBuZWdhdGUgPSBmdW5jdGlvbihwKSB7XG4gICAgICByZXR1cm4gcC5uZWcoKTtcbiAgICB9O1xuICAgIHJlcy5wcmVjb21wdXRlZCA9IHtcbiAgICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICAgIHBvaW50czogcHJlLm5hZi5wb2ludHMubWFwKG5lZ2F0ZSlcbiAgICAgIH0sXG4gICAgICBkb3VibGVzOiBwcmUuZG91YmxlcyAmJiB7XG4gICAgICAgIHN0ZXA6IHByZS5kb3VibGVzLnN0ZXAsXG4gICAgICAgIHBvaW50czogcHJlLmRvdWJsZXMucG9pbnRzLm1hcChuZWdhdGUpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnRvSiA9IGZ1bmN0aW9uIHRvSigpIHtcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcblxuICB2YXIgcmVzID0gdGhpcy5jdXJ2ZS5qcG9pbnQodGhpcy54LCB0aGlzLnksIHRoaXMuY3VydmUub25lKTtcbiAgcmV0dXJuIHJlcztcbn07XG5cbmZ1bmN0aW9uIEpQb2ludChjdXJ2ZSwgeCwgeSwgeikge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAnamFjb2JpYW4nKTtcbiAgaWYgKHggPT09IG51bGwgJiYgeSA9PT0gbnVsbCAmJiB6ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy55ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy56ID0gbmV3IEJOKDApO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy55ID0gbmV3IEJOKHksIDE2KTtcbiAgICB0aGlzLnogPSBuZXcgQk4oeiwgMTYpO1xuICB9XG4gIGlmICghdGhpcy54LnJlZClcbiAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICBpZiAoIXRoaXMueS5yZWQpXG4gICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgaWYgKCF0aGlzLnoucmVkKVxuICAgIHRoaXMueiA9IHRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG5cbiAgdGhpcy56T25lID0gdGhpcy56ID09PSB0aGlzLmN1cnZlLm9uZTtcbn1cbmluaGVyaXRzKEpQb2ludCwgQmFzZS5CYXNlUG9pbnQpO1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5qcG9pbnQgPSBmdW5jdGlvbiBqcG9pbnQoeCwgeSwgeikge1xuICByZXR1cm4gbmV3IEpQb2ludCh0aGlzLCB4LCB5LCB6KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUudG9QID0gZnVuY3Rpb24gdG9QKCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgdmFyIHppbnYgPSB0aGlzLnoucmVkSW52bSgpO1xuICB2YXIgemludjIgPSB6aW52LnJlZFNxcigpO1xuICB2YXIgYXggPSB0aGlzLngucmVkTXVsKHppbnYyKTtcbiAgdmFyIGF5ID0gdGhpcy55LnJlZE11bCh6aW52MikucmVkTXVsKHppbnYpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KGF4LCBheSk7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZygpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KHRoaXMueCwgdGhpcy55LnJlZE5lZygpLCB0aGlzLnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gMTJNICsgNFMgKyA3QVxuICB2YXIgcHoyID0gcC56LnJlZFNxcigpO1xuICB2YXIgejIgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciB1MSA9IHRoaXMueC5yZWRNdWwocHoyKTtcbiAgdmFyIHUyID0gcC54LnJlZE11bCh6Mik7XG4gIHZhciBzMSA9IHRoaXMueS5yZWRNdWwocHoyLnJlZE11bChwLnopKTtcbiAgdmFyIHMyID0gcC55LnJlZE11bCh6Mi5yZWRNdWwodGhpcy56KSk7XG5cbiAgdmFyIGggPSB1MS5yZWRTdWIodTIpO1xuICB2YXIgciA9IHMxLnJlZFN1YihzMik7XG4gIGlmIChoLmNtcG4oMCkgPT09IDApIHtcbiAgICBpZiAoci5jbXBuKDApICE9PSAwKVxuICAgICAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiB0aGlzLmRibCgpO1xuICB9XG5cbiAgdmFyIGgyID0gaC5yZWRTcXIoKTtcbiAgdmFyIGgzID0gaDIucmVkTXVsKGgpO1xuICB2YXIgdiA9IHUxLnJlZE11bChoMik7XG5cbiAgdmFyIG54ID0gci5yZWRTcXIoKS5yZWRJQWRkKGgzKS5yZWRJU3ViKHYpLnJlZElTdWIodik7XG4gIHZhciBueSA9IHIucmVkTXVsKHYucmVkSVN1YihueCkpLnJlZElTdWIoczEucmVkTXVsKGgzKSk7XG4gIHZhciBueiA9IHRoaXMuei5yZWRNdWwocC56KS5yZWRNdWwoaCk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5taXhlZEFkZCA9IGZ1bmN0aW9uIG1peGVkQWRkKHApIHtcbiAgLy8gTyArIFAgPSBQXG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gcC50b0ooKTtcblxuICAvLyBQICsgTyA9IFBcbiAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIDhNICsgM1MgKyA3QVxuICB2YXIgejIgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciB1MSA9IHRoaXMueDtcbiAgdmFyIHUyID0gcC54LnJlZE11bCh6Mik7XG4gIHZhciBzMSA9IHRoaXMueTtcbiAgdmFyIHMyID0gcC55LnJlZE11bCh6MikucmVkTXVsKHRoaXMueik7XG5cbiAgdmFyIGggPSB1MS5yZWRTdWIodTIpO1xuICB2YXIgciA9IHMxLnJlZFN1YihzMik7XG4gIGlmIChoLmNtcG4oMCkgPT09IDApIHtcbiAgICBpZiAoci5jbXBuKDApICE9PSAwKVxuICAgICAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiB0aGlzLmRibCgpO1xuICB9XG5cbiAgdmFyIGgyID0gaC5yZWRTcXIoKTtcbiAgdmFyIGgzID0gaDIucmVkTXVsKGgpO1xuICB2YXIgdiA9IHUxLnJlZE11bChoMik7XG5cbiAgdmFyIG54ID0gci5yZWRTcXIoKS5yZWRJQWRkKGgzKS5yZWRJU3ViKHYpLnJlZElTdWIodik7XG4gIHZhciBueSA9IHIucmVkTXVsKHYucmVkSVN1YihueCkpLnJlZElTdWIoczEucmVkTXVsKGgzKSk7XG4gIHZhciBueiA9IHRoaXMuei5yZWRNdWwoaCk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5kYmxwID0gZnVuY3Rpb24gZGJscChwb3cpIHtcbiAgaWYgKHBvdyA9PT0gMClcbiAgICByZXR1cm4gdGhpcztcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuICBpZiAoIXBvdylcbiAgICByZXR1cm4gdGhpcy5kYmwoKTtcblxuICBpZiAodGhpcy5jdXJ2ZS56ZXJvQSB8fCB0aGlzLmN1cnZlLnRocmVlQSkge1xuICAgIHZhciByID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvdzsgaSsrKVxuICAgICAgciA9IHIuZGJsKCk7XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICAvLyAxTSArIDJTICsgMUEgKyBOICogKDRTICsgNU0gKyA4QSlcbiAgLy8gTiA9IDEgPT4gNk0gKyA2UyArIDlBXG4gIHZhciBhID0gdGhpcy5jdXJ2ZS5hO1xuICB2YXIgdGludiA9IHRoaXMuY3VydmUudGludjtcblxuICB2YXIganggPSB0aGlzLng7XG4gIHZhciBqeSA9IHRoaXMueTtcbiAgdmFyIGp6ID0gdGhpcy56O1xuICB2YXIgano0ID0ganoucmVkU3FyKCkucmVkU3FyKCk7XG5cbiAgLy8gUmV1c2UgcmVzdWx0c1xuICB2YXIganlkID0gankucmVkQWRkKGp5KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3c7IGkrKykge1xuICAgIHZhciBqeDIgPSBqeC5yZWRTcXIoKTtcbiAgICB2YXIganlkMiA9IGp5ZC5yZWRTcXIoKTtcbiAgICB2YXIganlkNCA9IGp5ZDIucmVkU3FyKCk7XG4gICAgdmFyIGMgPSBqeDIucmVkQWRkKGp4MikucmVkSUFkZChqeDIpLnJlZElBZGQoYS5yZWRNdWwoano0KSk7XG5cbiAgICB2YXIgdDEgPSBqeC5yZWRNdWwoanlkMik7XG4gICAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHQxLnJlZEFkZCh0MSkpO1xuICAgIHZhciB0MiA9IHQxLnJlZElTdWIobngpO1xuICAgIHZhciBkbnkgPSBjLnJlZE11bCh0Mik7XG4gICAgZG55ID0gZG55LnJlZElBZGQoZG55KS5yZWRJU3ViKGp5ZDQpO1xuICAgIHZhciBueiA9IGp5ZC5yZWRNdWwoanopO1xuICAgIGlmIChpICsgMSA8IHBvdylcbiAgICAgIGp6NCA9IGp6NC5yZWRNdWwoanlkNCk7XG5cbiAgICBqeCA9IG54O1xuICAgIGp6ID0gbno7XG4gICAganlkID0gZG55O1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KGp4LCBqeWQucmVkTXVsKHRpbnYpLCBqeik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmRibCA9IGZ1bmN0aW9uIGRibCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGlmICh0aGlzLmN1cnZlLnplcm9BKVxuICAgIHJldHVybiB0aGlzLl96ZXJvRGJsKCk7XG4gIGVsc2UgaWYgKHRoaXMuY3VydmUudGhyZWVBKVxuICAgIHJldHVybiB0aGlzLl90aHJlZURibCgpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuX2RibCgpO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5femVyb0RibCA9IGZ1bmN0aW9uIF96ZXJvRGJsKCkge1xuICB2YXIgbng7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICAvLyBaID0gMVxuICBpZiAodGhpcy56T25lKSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0wLmh0bWxcbiAgICAvLyAgICAgI2RvdWJsaW5nLW1kYmwtMjAwNy1ibFxuICAgIC8vIDFNICsgNVMgKyAxNEFcblxuICAgIC8vIFhYID0gWDFeMlxuICAgIHZhciB4eCA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBZWSA9IFkxXjJcbiAgICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gWVlZWSA9IFlZXjJcbiAgICB2YXIgeXl5eSA9IHl5LnJlZFNxcigpO1xuICAgIC8vIFMgPSAyICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKVxuICAgIHZhciBzID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgICBzID0gcy5yZWRJQWRkKHMpO1xuICAgIC8vIE0gPSAzICogWFggKyBhOyBhID0gMFxuICAgIHZhciBtID0geHgucmVkQWRkKHh4KS5yZWRJQWRkKHh4KTtcbiAgICAvLyBUID0gTSBeIDIgLSAyKlNcbiAgICB2YXIgdCA9IG0ucmVkU3FyKCkucmVkSVN1YihzKS5yZWRJU3ViKHMpO1xuXG4gICAgLy8gOCAqIFlZWVlcbiAgICB2YXIgeXl5eTggPSB5eXl5LnJlZElBZGQoeXl5eSk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuXG4gICAgLy8gWDMgPSBUXG4gICAgbnggPSB0O1xuICAgIC8vIFkzID0gTSAqIChTIC0gVCkgLSA4ICogWVlZWVxuICAgIG55ID0gbS5yZWRNdWwocy5yZWRJU3ViKHQpKS5yZWRJU3ViKHl5eXk4KTtcbiAgICAvLyBaMyA9IDIqWTFcbiAgICBueiA9IHRoaXMueS5yZWRBZGQodGhpcy55KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbFxuICAgIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDktbFxuICAgIC8vIDJNICsgNVMgKyAxM0FcblxuICAgIC8vIEEgPSBYMV4yXG4gICAgdmFyIGEgPSB0aGlzLngucmVkU3FyKCk7XG4gICAgLy8gQiA9IFkxXjJcbiAgICB2YXIgYiA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBDID0gQl4yXG4gICAgdmFyIGMgPSBiLnJlZFNxcigpO1xuICAgIC8vIEQgPSAyICogKChYMSArIEIpXjIgLSBBIC0gQylcbiAgICB2YXIgZCA9IHRoaXMueC5yZWRBZGQoYikucmVkU3FyKCkucmVkSVN1YihhKS5yZWRJU3ViKGMpO1xuICAgIGQgPSBkLnJlZElBZGQoZCk7XG4gICAgLy8gRSA9IDMgKiBBXG4gICAgdmFyIGUgPSBhLnJlZEFkZChhKS5yZWRJQWRkKGEpO1xuICAgIC8vIEYgPSBFXjJcbiAgICB2YXIgZiA9IGUucmVkU3FyKCk7XG5cbiAgICAvLyA4ICogQ1xuICAgIHZhciBjOCA9IGMucmVkSUFkZChjKTtcbiAgICBjOCA9IGM4LnJlZElBZGQoYzgpO1xuICAgIGM4ID0gYzgucmVkSUFkZChjOCk7XG5cbiAgICAvLyBYMyA9IEYgLSAyICogRFxuICAgIG54ID0gZi5yZWRJU3ViKGQpLnJlZElTdWIoZCk7XG4gICAgLy8gWTMgPSBFICogKEQgLSBYMykgLSA4ICogQ1xuICAgIG55ID0gZS5yZWRNdWwoZC5yZWRJU3ViKG54KSkucmVkSVN1YihjOCk7XG4gICAgLy8gWjMgPSAyICogWTEgKiBaMVxuICAgIG56ID0gdGhpcy55LnJlZE11bCh0aGlzLnopO1xuICAgIG56ID0gbnoucmVkSUFkZChueik7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl90aHJlZURibCA9IGZ1bmN0aW9uIF90aHJlZURibCgpIHtcbiAgdmFyIG54O1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgLy8gWiA9IDFcbiAgaWYgKHRoaXMuek9uZSkge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMy5odG1sXG4gICAgLy8gICAgICNkb3VibGluZy1tZGJsLTIwMDctYmxcbiAgICAvLyAxTSArIDVTICsgMTVBXG5cbiAgICAvLyBYWCA9IFgxXjJcbiAgICB2YXIgeHggPSB0aGlzLngucmVkU3FyKCk7XG4gICAgLy8gWVkgPSBZMV4yXG4gICAgdmFyIHl5ID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIFlZWVkgPSBZWV4yXG4gICAgdmFyIHl5eXkgPSB5eS5yZWRTcXIoKTtcbiAgICAvLyBTID0gMiAqICgoWDEgKyBZWSleMiAtIFhYIC0gWVlZWSlcbiAgICB2YXIgcyA9IHRoaXMueC5yZWRBZGQoeXkpLnJlZFNxcigpLnJlZElTdWIoeHgpLnJlZElTdWIoeXl5eSk7XG4gICAgcyA9IHMucmVkSUFkZChzKTtcbiAgICAvLyBNID0gMyAqIFhYICsgYVxuICAgIHZhciBtID0geHgucmVkQWRkKHh4KS5yZWRJQWRkKHh4KS5yZWRJQWRkKHRoaXMuY3VydmUuYSk7XG4gICAgLy8gVCA9IE1eMiAtIDIgKiBTXG4gICAgdmFyIHQgPSBtLnJlZFNxcigpLnJlZElTdWIocykucmVkSVN1YihzKTtcbiAgICAvLyBYMyA9IFRcbiAgICBueCA9IHQ7XG4gICAgLy8gWTMgPSBNICogKFMgLSBUKSAtIDggKiBZWVlZXG4gICAgdmFyIHl5eXk4ID0geXl5eS5yZWRJQWRkKHl5eXkpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcbiAgICBueSA9IG0ucmVkTXVsKHMucmVkSVN1Yih0KSkucmVkSVN1Yih5eXl5OCk7XG4gICAgLy8gWjMgPSAyICogWTFcbiAgICBueiA9IHRoaXMueS5yZWRBZGQodGhpcy55KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTMuaHRtbCNkb3VibGluZy1kYmwtMjAwMS1iXG4gICAgLy8gM00gKyA1U1xuXG4gICAgLy8gZGVsdGEgPSBaMV4yXG4gICAgdmFyIGRlbHRhID0gdGhpcy56LnJlZFNxcigpO1xuICAgIC8vIGdhbW1hID0gWTFeMlxuICAgIHZhciBnYW1tYSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBiZXRhID0gWDEgKiBnYW1tYVxuICAgIHZhciBiZXRhID0gdGhpcy54LnJlZE11bChnYW1tYSk7XG4gICAgLy8gYWxwaGEgPSAzICogKFgxIC0gZGVsdGEpICogKFgxICsgZGVsdGEpXG4gICAgdmFyIGFscGhhID0gdGhpcy54LnJlZFN1YihkZWx0YSkucmVkTXVsKHRoaXMueC5yZWRBZGQoZGVsdGEpKTtcbiAgICBhbHBoYSA9IGFscGhhLnJlZEFkZChhbHBoYSkucmVkSUFkZChhbHBoYSk7XG4gICAgLy8gWDMgPSBhbHBoYV4yIC0gOCAqIGJldGFcbiAgICB2YXIgYmV0YTQgPSBiZXRhLnJlZElBZGQoYmV0YSk7XG4gICAgYmV0YTQgPSBiZXRhNC5yZWRJQWRkKGJldGE0KTtcbiAgICB2YXIgYmV0YTggPSBiZXRhNC5yZWRBZGQoYmV0YTQpO1xuICAgIG54ID0gYWxwaGEucmVkU3FyKCkucmVkSVN1YihiZXRhOCk7XG4gICAgLy8gWjMgPSAoWTEgKyBaMSleMiAtIGdhbW1hIC0gZGVsdGFcbiAgICBueiA9IHRoaXMueS5yZWRBZGQodGhpcy56KS5yZWRTcXIoKS5yZWRJU3ViKGdhbW1hKS5yZWRJU3ViKGRlbHRhKTtcbiAgICAvLyBZMyA9IGFscGhhICogKDQgKiBiZXRhIC0gWDMpIC0gOCAqIGdhbW1hXjJcbiAgICB2YXIgZ2dhbW1hOCA9IGdhbW1hLnJlZFNxcigpO1xuICAgIGdnYW1tYTggPSBnZ2FtbWE4LnJlZElBZGQoZ2dhbW1hOCk7XG4gICAgZ2dhbW1hOCA9IGdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtcbiAgICBnZ2FtbWE4ID0gZ2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO1xuICAgIG55ID0gYWxwaGEucmVkTXVsKGJldGE0LnJlZElTdWIobngpKS5yZWRJU3ViKGdnYW1tYTgpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5fZGJsID0gZnVuY3Rpb24gX2RibCgpIHtcbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7XG5cbiAgLy8gNE0gKyA2UyArIDEwQVxuICB2YXIganggPSB0aGlzLng7XG4gIHZhciBqeSA9IHRoaXMueTtcbiAgdmFyIGp6ID0gdGhpcy56O1xuICB2YXIgano0ID0ganoucmVkU3FyKCkucmVkU3FyKCk7XG5cbiAgdmFyIGp4MiA9IGp4LnJlZFNxcigpO1xuICB2YXIgankyID0gankucmVkU3FyKCk7XG5cbiAgdmFyIGMgPSBqeDIucmVkQWRkKGp4MikucmVkSUFkZChqeDIpLnJlZElBZGQoYS5yZWRNdWwoano0KSk7XG5cbiAgdmFyIGp4ZDQgPSBqeC5yZWRBZGQoangpO1xuICBqeGQ0ID0ganhkNC5yZWRJQWRkKGp4ZDQpO1xuICB2YXIgdDEgPSBqeGQ0LnJlZE11bChqeTIpO1xuICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodDEucmVkQWRkKHQxKSk7XG4gIHZhciB0MiA9IHQxLnJlZElTdWIobngpO1xuXG4gIHZhciBqeWQ4ID0gankyLnJlZFNxcigpO1xuICBqeWQ4ID0ganlkOC5yZWRJQWRkKGp5ZDgpO1xuICBqeWQ4ID0ganlkOC5yZWRJQWRkKGp5ZDgpO1xuICBqeWQ4ID0ganlkOC5yZWRJQWRkKGp5ZDgpO1xuICB2YXIgbnkgPSBjLnJlZE11bCh0MikucmVkSVN1YihqeWQ4KTtcbiAgdmFyIG56ID0gankucmVkQWRkKGp5KS5yZWRNdWwoanopO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUudHJwbCA9IGZ1bmN0aW9uIHRycGwoKSB7XG4gIGlmICghdGhpcy5jdXJ2ZS56ZXJvQSlcbiAgICByZXR1cm4gdGhpcy5kYmwoKS5hZGQodGhpcyk7XG5cbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0wLmh0bWwjdHJpcGxpbmctdHBsLTIwMDctYmxcbiAgLy8gNU0gKyAxMFMgKyAuLi5cblxuICAvLyBYWCA9IFgxXjJcbiAgdmFyIHh4ID0gdGhpcy54LnJlZFNxcigpO1xuICAvLyBZWSA9IFkxXjJcbiAgdmFyIHl5ID0gdGhpcy55LnJlZFNxcigpO1xuICAvLyBaWiA9IFoxXjJcbiAgdmFyIHp6ID0gdGhpcy56LnJlZFNxcigpO1xuICAvLyBZWVlZID0gWVleMlxuICB2YXIgeXl5eSA9IHl5LnJlZFNxcigpO1xuICAvLyBNID0gMyAqIFhYICsgYSAqIFpaMjsgYSA9IDBcbiAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpO1xuICAvLyBNTSA9IE1eMlxuICB2YXIgbW0gPSBtLnJlZFNxcigpO1xuICAvLyBFID0gNiAqICgoWDEgKyBZWSleMiAtIFhYIC0gWVlZWSkgLSBNTVxuICB2YXIgZSA9IHRoaXMueC5yZWRBZGQoeXkpLnJlZFNxcigpLnJlZElTdWIoeHgpLnJlZElTdWIoeXl5eSk7XG4gIGUgPSBlLnJlZElBZGQoZSk7XG4gIGUgPSBlLnJlZEFkZChlKS5yZWRJQWRkKGUpO1xuICBlID0gZS5yZWRJU3ViKG1tKTtcbiAgLy8gRUUgPSBFXjJcbiAgdmFyIGVlID0gZS5yZWRTcXIoKTtcbiAgLy8gVCA9IDE2KllZWVlcbiAgdmFyIHQgPSB5eXl5LnJlZElBZGQoeXl5eSk7XG4gIHQgPSB0LnJlZElBZGQodCk7XG4gIHQgPSB0LnJlZElBZGQodCk7XG4gIHQgPSB0LnJlZElBZGQodCk7XG4gIC8vIFUgPSAoTSArIEUpXjIgLSBNTSAtIEVFIC0gVFxuICB2YXIgdSA9IG0ucmVkSUFkZChlKS5yZWRTcXIoKS5yZWRJU3ViKG1tKS5yZWRJU3ViKGVlKS5yZWRJU3ViKHQpO1xuICAvLyBYMyA9IDQgKiAoWDEgKiBFRSAtIDQgKiBZWSAqIFUpXG4gIHZhciB5eXU0ID0geXkucmVkTXVsKHUpO1xuICB5eXU0ID0geXl1NC5yZWRJQWRkKHl5dTQpO1xuICB5eXU0ID0geXl1NC5yZWRJQWRkKHl5dTQpO1xuICB2YXIgbnggPSB0aGlzLngucmVkTXVsKGVlKS5yZWRJU3ViKHl5dTQpO1xuICBueCA9IG54LnJlZElBZGQobngpO1xuICBueCA9IG54LnJlZElBZGQobngpO1xuICAvLyBZMyA9IDggKiBZMSAqIChVICogKFQgLSBVKSAtIEUgKiBFRSlcbiAgdmFyIG55ID0gdGhpcy55LnJlZE11bCh1LnJlZE11bCh0LnJlZElTdWIodSkpLnJlZElTdWIoZS5yZWRNdWwoZWUpKSk7XG4gIG55ID0gbnkucmVkSUFkZChueSk7XG4gIG55ID0gbnkucmVkSUFkZChueSk7XG4gIG55ID0gbnkucmVkSUFkZChueSk7XG4gIC8vIFozID0gKFoxICsgRSleMiAtIFpaIC0gRUVcbiAgdmFyIG56ID0gdGhpcy56LnJlZEFkZChlKS5yZWRTcXIoKS5yZWRJU3ViKHp6KS5yZWRJU3ViKGVlKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrLCBrYmFzZSkge1xuICBrID0gbmV3IEJOKGssIGtiYXNlKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bCh0aGlzLCBrKTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShwKSB7XG4gIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKVxuICAgIHJldHVybiB0aGlzLmVxKHAudG9KKCkpO1xuXG4gIGlmICh0aGlzID09PSBwKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIC8vIHgxICogejJeMiA9PSB4MiAqIHoxXjJcbiAgdmFyIHoyID0gdGhpcy56LnJlZFNxcigpO1xuICB2YXIgcHoyID0gcC56LnJlZFNxcigpO1xuICBpZiAodGhpcy54LnJlZE11bChwejIpLnJlZElTdWIocC54LnJlZE11bCh6MikpLmNtcG4oMCkgIT09IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIHkxICogejJeMyA9PSB5MiAqIHoxXjNcbiAgdmFyIHozID0gejIucmVkTXVsKHRoaXMueik7XG4gIHZhciBwejMgPSBwejIucmVkTXVsKHAueik7XG4gIHJldHVybiB0aGlzLnkucmVkTXVsKHB6MykucmVkSVN1YihwLnkucmVkTXVsKHozKSkuY21wbigwKSA9PT0gMDtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZXFYVG9QID0gZnVuY3Rpb24gZXFYVG9QKHgpIHtcbiAgdmFyIHpzID0gdGhpcy56LnJlZFNxcigpO1xuICB2YXIgcnggPSB4LnRvUmVkKHRoaXMuY3VydmUucmVkKS5yZWRNdWwoenMpO1xuICBpZiAodGhpcy54LmNtcChyeCkgPT09IDApXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgdmFyIHhjID0geC5jbG9uZSgpO1xuICB2YXIgdCA9IHRoaXMuY3VydmUucmVkTi5yZWRNdWwoenMpO1xuICBmb3IgKDs7KSB7XG4gICAgeGMuaWFkZCh0aGlzLmN1cnZlLm4pO1xuICAgIGlmICh4Yy5jbXAodGhpcy5jdXJ2ZS5wKSA+PSAwKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcngucmVkSUFkZCh0KTtcbiAgICBpZiAodGhpcy54LmNtcChyeCkgPT09IDApXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuSlBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIEpQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBKUG9pbnQgeDogJyArIHRoaXMueC50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB5OiAnICsgdGhpcy55LnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHo6ICcgKyB0aGlzLnoudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgLy8gWFhYIFRoaXMgY29kZSBhc3N1bWVzIHRoYXQgemVybyBpcyBhbHdheXMgemVybyBpbiByZWRcbiAgcmV0dXJuIHRoaXMuei5jbXBuKDApID09PSAwO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5mdW5jdGlvbiBNb250Q3VydmUoY29uZikge1xuICBCYXNlLmNhbGwodGhpcywgJ21vbnQnLCBjb25mKTtcblxuICB0aGlzLmEgPSBuZXcgQk4oY29uZi5hLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmIgPSBuZXcgQk4oY29uZi5iLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmk0ID0gbmV3IEJOKDQpLnRvUmVkKHRoaXMucmVkKS5yZWRJbnZtKCk7XG4gIHRoaXMudHdvID0gbmV3IEJOKDIpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5hMjQgPSB0aGlzLmk0LnJlZE11bCh0aGlzLmEucmVkQWRkKHRoaXMudHdvKSk7XG59XG5pbmhlcml0cyhNb250Q3VydmUsIEJhc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBNb250Q3VydmU7XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShwb2ludCkge1xuICB2YXIgeCA9IHBvaW50Lm5vcm1hbGl6ZSgpLng7XG4gIHZhciB4MiA9IHgucmVkU3FyKCk7XG4gIHZhciByaHMgPSB4Mi5yZWRNdWwoeCkucmVkQWRkKHgyLnJlZE11bCh0aGlzLmEpKS5yZWRBZGQoeCk7XG4gIHZhciB5ID0gcmhzLnJlZFNxcnQoKTtcblxuICByZXR1cm4geS5yZWRTcXIoKS5jbXAocmhzKSA9PT0gMDtcbn07XG5cbmZ1bmN0aW9uIFBvaW50KGN1cnZlLCB4LCB6KSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdwcm9qZWN0aXZlJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnogPSB0aGlzLmN1cnZlLnplcm87XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTtcbiAgICB0aGlzLnogPSBuZXcgQk4oeiwgMTYpO1xuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnoucmVkKVxuICAgICAgdGhpcy56ID0gdGhpcy56LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgfVxufVxuaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuTW9udEN1cnZlLnByb3RvdHlwZS5kZWNvZGVQb2ludCA9IGZ1bmN0aW9uIGRlY29kZVBvaW50KGJ5dGVzLCBlbmMpIHtcbiAgcmV0dXJuIHRoaXMucG9pbnQodXRpbHMudG9BcnJheShieXRlcywgZW5jKSwgMSk7XG59O1xuXG5Nb250Q3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoeCwgeikge1xuICByZXR1cm4gbmV3IFBvaW50KHRoaXMsIHgsIHopO1xufTtcblxuTW9udEN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21KU09OID0gZnVuY3Rpb24gcG9pbnRGcm9tSlNPTihvYmopIHtcbiAgcmV0dXJuIFBvaW50LmZyb21KU09OKHRoaXMsIG9iaik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUucHJlY29tcHV0ZSA9IGZ1bmN0aW9uIHByZWNvbXB1dGUoKSB7XG4gIC8vIE5vLW9wXG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2VuY29kZSA9IGZ1bmN0aW9uIF9lbmNvZGUoKSB7XG4gIHJldHVybiB0aGlzLmdldFgoKS50b0FycmF5KCdiZScsIHRoaXMuY3VydmUucC5ieXRlTGVuZ3RoKCkpO1xufTtcblxuUG9pbnQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihjdXJ2ZSwgb2JqKSB7XG4gIHJldHVybiBuZXcgUG9pbnQoY3VydmUsIG9ialswXSwgb2JqWzFdIHx8IGN1cnZlLm9uZSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBQb2ludCB4OiAnICsgdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB6OiAnICsgdGhpcy56LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIC8vIFhYWCBUaGlzIGNvZGUgYXNzdW1lcyB0aGF0IHplcm8gaXMgYWx3YXlzIHplcm8gaW4gcmVkXG4gIHJldHVybiB0aGlzLnouY21wbigwKSA9PT0gMDtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIC8vIGh0dHA6Ly9oeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tbW9udGdvbS14ei5odG1sI2RvdWJsaW5nLWRibC0xOTg3LW0tM1xuICAvLyAyTSArIDJTICsgNEFcblxuICAvLyBBID0gWDEgKyBaMVxuICB2YXIgYSA9IHRoaXMueC5yZWRBZGQodGhpcy56KTtcbiAgLy8gQUEgPSBBXjJcbiAgdmFyIGFhID0gYS5yZWRTcXIoKTtcbiAgLy8gQiA9IFgxIC0gWjFcbiAgdmFyIGIgPSB0aGlzLngucmVkU3ViKHRoaXMueik7XG4gIC8vIEJCID0gQl4yXG4gIHZhciBiYiA9IGIucmVkU3FyKCk7XG4gIC8vIEMgPSBBQSAtIEJCXG4gIHZhciBjID0gYWEucmVkU3ViKGJiKTtcbiAgLy8gWDMgPSBBQSAqIEJCXG4gIHZhciBueCA9IGFhLnJlZE11bChiYik7XG4gIC8vIFozID0gQyAqIChCQiArIEEyNCAqIEMpXG4gIHZhciBueiA9IGMucmVkTXVsKGJiLnJlZEFkZCh0aGlzLmN1cnZlLmEyNC5yZWRNdWwoYykpKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCBvbiBNb250Z29tZXJ5IGN1cnZlJyk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGlmZkFkZCA9IGZ1bmN0aW9uIGRpZmZBZGQocCwgZGlmZikge1xuICAvLyBodHRwOi8vaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLW1vbnRnb20teHouaHRtbCNkaWZmYWRkLWRhZGQtMTk4Ny1tLTNcbiAgLy8gNE0gKyAyUyArIDZBXG5cbiAgLy8gQSA9IFgyICsgWjJcbiAgdmFyIGEgPSB0aGlzLngucmVkQWRkKHRoaXMueik7XG4gIC8vIEIgPSBYMiAtIFoyXG4gIHZhciBiID0gdGhpcy54LnJlZFN1Yih0aGlzLnopO1xuICAvLyBDID0gWDMgKyBaM1xuICB2YXIgYyA9IHAueC5yZWRBZGQocC56KTtcbiAgLy8gRCA9IFgzIC0gWjNcbiAgdmFyIGQgPSBwLngucmVkU3ViKHAueik7XG4gIC8vIERBID0gRCAqIEFcbiAgdmFyIGRhID0gZC5yZWRNdWwoYSk7XG4gIC8vIENCID0gQyAqIEJcbiAgdmFyIGNiID0gYy5yZWRNdWwoYik7XG4gIC8vIFg1ID0gWjEgKiAoREEgKyBDQileMlxuICB2YXIgbnggPSBkaWZmLnoucmVkTXVsKGRhLnJlZEFkZChjYikucmVkU3FyKCkpO1xuICAvLyBaNSA9IFgxICogKERBIC0gQ0IpXjJcbiAgdmFyIG56ID0gZGlmZi54LnJlZE11bChkYS5yZWRJU3ViKGNiKS5yZWRTcXIoKSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGspIHtcbiAgdmFyIHQgPSBrLmNsb25lKCk7XG4gIHZhciBhID0gdGhpczsgLy8gKE4gLyAyKSAqIFEgKyBRXG4gIHZhciBiID0gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTsgLy8gKE4gLyAyKSAqIFFcbiAgdmFyIGMgPSB0aGlzOyAvLyBRXG5cbiAgZm9yICh2YXIgYml0cyA9IFtdOyB0LmNtcG4oMCkgIT09IDA7IHQuaXVzaHJuKDEpKVxuICAgIGJpdHMucHVzaCh0LmFuZGxuKDEpKTtcblxuICBmb3IgKHZhciBpID0gYml0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGlmIChiaXRzW2ldID09PSAwKSB7XG4gICAgICAvLyBOICogUSArIFEgPSAoKE4gLyAyKSAqIFEgKyBRKSkgKyAoTiAvIDIpICogUVxuICAgICAgYSA9IGEuZGlmZkFkZChiLCBjKTtcbiAgICAgIC8vIE4gKiBRID0gMiAqICgoTiAvIDIpICogUSArIFEpKVxuICAgICAgYiA9IGIuZGJsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE4gKiBRID0gKChOIC8gMikgKiBRICsgUSkgKyAoKE4gLyAyKSAqIFEpXG4gICAgICBiID0gYS5kaWZmQWRkKGIsIGMpO1xuICAgICAgLy8gTiAqIFEgKyBRID0gMiAqICgoTiAvIDIpICogUSArIFEpXG4gICAgICBhID0gYS5kYmwoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGI7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsQWRkID0gZnVuY3Rpb24gbXVsQWRkKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQgb24gTW9udGdvbWVyeSBjdXJ2ZScpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmp1bWxBZGQgPSBmdW5jdGlvbiBqdW1sQWRkKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQgb24gTW9udGdvbWVyeSBjdXJ2ZScpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0WCgpLmNtcChvdGhlci5nZXRYKCkpID09PSAwO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZSgpIHtcbiAgdGhpcy54ID0gdGhpcy54LnJlZE11bCh0aGlzLnoucmVkSW52bSgpKTtcbiAgdGhpcy56ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gIHJldHVybiB0aGlzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFggPSBmdW5jdGlvbiBnZXRYKCkge1xuICAvLyBOb3JtYWxpemUgY29vcmRpbmF0ZXNcbiAgdGhpcy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gdGhpcy54LmZyb21SZWQoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCYXNlID0gcmVxdWlyZSgnLi9iYXNlJyk7XG5cbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIEVkd2FyZHNDdXJ2ZShjb25mKSB7XG4gIC8vIE5PVEU6IEltcG9ydGFudCBhcyB3ZSBhcmUgY3JlYXRpbmcgcG9pbnQgaW4gQmFzZS5jYWxsKClcbiAgdGhpcy50d2lzdGVkID0gKGNvbmYuYSB8IDApICE9PSAxO1xuICB0aGlzLm1PbmVBID0gdGhpcy50d2lzdGVkICYmIChjb25mLmEgfCAwKSA9PT0gLTE7XG4gIHRoaXMuZXh0ZW5kZWQgPSB0aGlzLm1PbmVBO1xuXG4gIEJhc2UuY2FsbCh0aGlzLCAnZWR3YXJkcycsIGNvbmYpO1xuXG4gIHRoaXMuYSA9IG5ldyBCTihjb25mLmEsIDE2KS51bW9kKHRoaXMucmVkLm0pO1xuICB0aGlzLmEgPSB0aGlzLmEudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmMgPSBuZXcgQk4oY29uZi5jLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmMyID0gdGhpcy5jLnJlZFNxcigpO1xuICB0aGlzLmQgPSBuZXcgQk4oY29uZi5kLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmRkID0gdGhpcy5kLnJlZEFkZCh0aGlzLmQpO1xuXG4gIGFzc2VydCghdGhpcy50d2lzdGVkIHx8IHRoaXMuYy5mcm9tUmVkKCkuY21wbigxKSA9PT0gMCk7XG4gIHRoaXMub25lQyA9IChjb25mLmMgfCAwKSA9PT0gMTtcbn1cbmluaGVyaXRzKEVkd2FyZHNDdXJ2ZSwgQmFzZSk7XG5tb2R1bGUuZXhwb3J0cyA9IEVkd2FyZHNDdXJ2ZTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5fbXVsQSA9IGZ1bmN0aW9uIF9tdWxBKG51bSkge1xuICBpZiAodGhpcy5tT25lQSlcbiAgICByZXR1cm4gbnVtLnJlZE5lZygpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuYS5yZWRNdWwobnVtKTtcbn07XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUuX211bEMgPSBmdW5jdGlvbiBfbXVsQyhudW0pIHtcbiAgaWYgKHRoaXMub25lQylcbiAgICByZXR1cm4gbnVtO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuYy5yZWRNdWwobnVtKTtcbn07XG5cbi8vIEp1c3QgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBTaG9ydCBjdXJ2ZVxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5qcG9pbnQgPSBmdW5jdGlvbiBqcG9pbnQoeCwgeSwgeiwgdCkge1xuICByZXR1cm4gdGhpcy5wb2ludCh4LCB5LCB6LCB0KTtcbn07XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tWCA9IGZ1bmN0aW9uIHBvaW50RnJvbVgoeCwgb2RkKSB7XG4gIHggPSBuZXcgQk4oeCwgMTYpO1xuICBpZiAoIXgucmVkKVxuICAgIHggPSB4LnRvUmVkKHRoaXMucmVkKTtcblxuICB2YXIgeDIgPSB4LnJlZFNxcigpO1xuICB2YXIgcmhzID0gdGhpcy5jMi5yZWRTdWIodGhpcy5hLnJlZE11bCh4MikpO1xuICB2YXIgbGhzID0gdGhpcy5vbmUucmVkU3ViKHRoaXMuYzIucmVkTXVsKHRoaXMuZCkucmVkTXVsKHgyKSk7XG5cbiAgdmFyIHkyID0gcmhzLnJlZE11bChsaHMucmVkSW52bSgpKTtcbiAgdmFyIHkgPSB5Mi5yZWRTcXJ0KCk7XG4gIGlmICh5LnJlZFNxcigpLnJlZFN1Yih5MikuY21wKHRoaXMuemVybykgIT09IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7XG5cbiAgdmFyIGlzT2RkID0geS5mcm9tUmVkKCkuaXNPZGQoKTtcbiAgaWYgKG9kZCAmJiAhaXNPZGQgfHwgIW9kZCAmJiBpc09kZClcbiAgICB5ID0geS5yZWROZWcoKTtcblxuICByZXR1cm4gdGhpcy5wb2ludCh4LCB5KTtcbn07XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tWSA9IGZ1bmN0aW9uIHBvaW50RnJvbVkoeSwgb2RkKSB7XG4gIHkgPSBuZXcgQk4oeSwgMTYpO1xuICBpZiAoIXkucmVkKVxuICAgIHkgPSB5LnRvUmVkKHRoaXMucmVkKTtcblxuICAvLyB4XjIgPSAoeV4yIC0gY14yKSAvIChjXjIgZCB5XjIgLSBhKVxuICB2YXIgeTIgPSB5LnJlZFNxcigpO1xuICB2YXIgbGhzID0geTIucmVkU3ViKHRoaXMuYzIpO1xuICB2YXIgcmhzID0geTIucmVkTXVsKHRoaXMuZCkucmVkTXVsKHRoaXMuYzIpLnJlZFN1Yih0aGlzLmEpO1xuICB2YXIgeDIgPSBsaHMucmVkTXVsKHJocy5yZWRJbnZtKCkpO1xuXG4gIGlmICh4Mi5jbXAodGhpcy56ZXJvKSA9PT0gMCkge1xuICAgIGlmIChvZGQpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQnKTtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gdGhpcy5wb2ludCh0aGlzLnplcm8sIHkpO1xuICB9XG5cbiAgdmFyIHggPSB4Mi5yZWRTcXJ0KCk7XG4gIGlmICh4LnJlZFNxcigpLnJlZFN1Yih4MikuY21wKHRoaXMuemVybykgIT09IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7XG5cbiAgaWYgKHguZnJvbVJlZCgpLmlzT2RkKCkgIT09IG9kZClcbiAgICB4ID0geC5yZWROZWcoKTtcblxuICByZXR1cm4gdGhpcy5wb2ludCh4LCB5KTtcbn07XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShwb2ludCkge1xuICBpZiAocG9pbnQuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIC8vIEN1cnZlOiBBICogWF4yICsgWV4yID0gQ14yICogKDEgKyBEICogWF4yICogWV4yKVxuICBwb2ludC5ub3JtYWxpemUoKTtcblxuICB2YXIgeDIgPSBwb2ludC54LnJlZFNxcigpO1xuICB2YXIgeTIgPSBwb2ludC55LnJlZFNxcigpO1xuICB2YXIgbGhzID0geDIucmVkTXVsKHRoaXMuYSkucmVkQWRkKHkyKTtcbiAgdmFyIHJocyA9IHRoaXMuYzIucmVkTXVsKHRoaXMub25lLnJlZEFkZCh0aGlzLmQucmVkTXVsKHgyKS5yZWRNdWwoeTIpKSk7XG5cbiAgcmV0dXJuIGxocy5jbXAocmhzKSA9PT0gMDtcbn07XG5cbmZ1bmN0aW9uIFBvaW50KGN1cnZlLCB4LCB5LCB6LCB0KSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdwcm9qZWN0aXZlJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHkgPT09IG51bGwgJiYgeiA9PT0gbnVsbCkge1xuICAgIHRoaXMueCA9IHRoaXMuY3VydmUuemVybztcbiAgICB0aGlzLnkgPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnQgPSB0aGlzLmN1cnZlLnplcm87XG4gICAgdGhpcy56T25lID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSBuZXcgQk4oeCwgMTYpO1xuICAgIHRoaXMueSA9IG5ldyBCTih5LCAxNik7XG4gICAgdGhpcy56ID0geiA/IG5ldyBCTih6LCAxNikgOiB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnQgPSB0ICYmIG5ldyBCTih0LCAxNik7XG4gICAgaWYgKCF0aGlzLngucmVkKVxuICAgICAgdGhpcy54ID0gdGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMueS5yZWQpXG4gICAgICB0aGlzLnkgPSB0aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICghdGhpcy56LnJlZClcbiAgICAgIHRoaXMueiA9IHRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKHRoaXMudCAmJiAhdGhpcy50LnJlZClcbiAgICAgIHRoaXMudCA9IHRoaXMudC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgdGhpcy56T25lID0gdGhpcy56ID09PSB0aGlzLmN1cnZlLm9uZTtcblxuICAgIC8vIFVzZSBleHRlbmRlZCBjb29yZGluYXRlc1xuICAgIGlmICh0aGlzLmN1cnZlLmV4dGVuZGVkICYmICF0aGlzLnQpIHtcbiAgICAgIHRoaXMudCA9IHRoaXMueC5yZWRNdWwodGhpcy55KTtcbiAgICAgIGlmICghdGhpcy56T25lKVxuICAgICAgICB0aGlzLnQgPSB0aGlzLnQucmVkTXVsKHRoaXMuei5yZWRJbnZtKCkpO1xuICAgIH1cbiAgfVxufVxuaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludEZyb21KU09OID0gZnVuY3Rpb24gcG9pbnRGcm9tSlNPTihvYmopIHtcbiAgcmV0dXJuIFBvaW50LmZyb21KU09OKHRoaXMsIG9iaik7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoeCwgeSwgeiwgdCkge1xuICByZXR1cm4gbmV3IFBvaW50KHRoaXMsIHgsIHksIHosIHQpO1xufTtcblxuUG9pbnQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihjdXJ2ZSwgb2JqKSB7XG4gIHJldHVybiBuZXcgUG9pbnQoY3VydmUsIG9ialswXSwgb2JqWzFdLCBvYmpbMl0pO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgUG9pbnQgSW5maW5pdHk+JztcbiAgcmV0dXJuICc8RUMgUG9pbnQgeDogJyArIHRoaXMueC5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgeTogJyArIHRoaXMueS5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgejogJyArIHRoaXMuei5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICAvLyBYWFggVGhpcyBjb2RlIGFzc3VtZXMgdGhhdCB6ZXJvIGlzIGFsd2F5cyB6ZXJvIGluIHJlZFxuICByZXR1cm4gdGhpcy54LmNtcG4oMCkgPT09IDAgJiZcbiAgICAodGhpcy55LmNtcCh0aGlzLnopID09PSAwIHx8XG4gICAgKHRoaXMuek9uZSAmJiB0aGlzLnkuY21wKHRoaXMuY3VydmUuYykgPT09IDApKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZXh0RGJsID0gZnVuY3Rpb24gX2V4dERibCgpIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtZXh0ZW5kZWQtMS5odG1sXG4gIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDgtaHdjZFxuICAvLyA0TSArIDRTXG5cbiAgLy8gQSA9IFgxXjJcbiAgdmFyIGEgPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIEIgPSBZMV4yXG4gIHZhciBiID0gdGhpcy55LnJlZFNxcigpO1xuICAvLyBDID0gMiAqIFoxXjJcbiAgdmFyIGMgPSB0aGlzLnoucmVkU3FyKCk7XG4gIGMgPSBjLnJlZElBZGQoYyk7XG4gIC8vIEQgPSBhICogQVxuICB2YXIgZCA9IHRoaXMuY3VydmUuX211bEEoYSk7XG4gIC8vIEUgPSAoWDEgKyBZMSleMiAtIEEgLSBCXG4gIHZhciBlID0gdGhpcy54LnJlZEFkZCh0aGlzLnkpLnJlZFNxcigpLnJlZElTdWIoYSkucmVkSVN1YihiKTtcbiAgLy8gRyA9IEQgKyBCXG4gIHZhciBnID0gZC5yZWRBZGQoYik7XG4gIC8vIEYgPSBHIC0gQ1xuICB2YXIgZiA9IGcucmVkU3ViKGMpO1xuICAvLyBIID0gRCAtIEJcbiAgdmFyIGggPSBkLnJlZFN1YihiKTtcbiAgLy8gWDMgPSBFICogRlxuICB2YXIgbnggPSBlLnJlZE11bChmKTtcbiAgLy8gWTMgPSBHICogSFxuICB2YXIgbnkgPSBnLnJlZE11bChoKTtcbiAgLy8gVDMgPSBFICogSFxuICB2YXIgbnQgPSBlLnJlZE11bChoKTtcbiAgLy8gWjMgPSBGICogR1xuICB2YXIgbnogPSBmLnJlZE11bChnKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueiwgbnQpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9wcm9qRGJsID0gZnVuY3Rpb24gX3Byb2pEYmwoKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLXByb2plY3RpdmUuaHRtbFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA4LWJiamxwXG4gIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDctYmxcbiAgLy8gYW5kIG90aGVyc1xuICAvLyBHZW5lcmFsbHkgM00gKyA0UyBvciAyTSArIDRTXG5cbiAgLy8gQiA9IChYMSArIFkxKV4yXG4gIHZhciBiID0gdGhpcy54LnJlZEFkZCh0aGlzLnkpLnJlZFNxcigpO1xuICAvLyBDID0gWDFeMlxuICB2YXIgYyA9IHRoaXMueC5yZWRTcXIoKTtcbiAgLy8gRCA9IFkxXjJcbiAgdmFyIGQgPSB0aGlzLnkucmVkU3FyKCk7XG5cbiAgdmFyIG54O1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgaWYgKHRoaXMuY3VydmUudHdpc3RlZCkge1xuICAgIC8vIEUgPSBhICogQ1xuICAgIHZhciBlID0gdGhpcy5jdXJ2ZS5fbXVsQShjKTtcbiAgICAvLyBGID0gRSArIERcbiAgICB2YXIgZiA9IGUucmVkQWRkKGQpO1xuICAgIGlmICh0aGlzLnpPbmUpIHtcbiAgICAgIC8vIFgzID0gKEIgLSBDIC0gRCkgKiAoRiAtIDIpXG4gICAgICBueCA9IGIucmVkU3ViKGMpLnJlZFN1YihkKS5yZWRNdWwoZi5yZWRTdWIodGhpcy5jdXJ2ZS50d28pKTtcbiAgICAgIC8vIFkzID0gRiAqIChFIC0gRClcbiAgICAgIG55ID0gZi5yZWRNdWwoZS5yZWRTdWIoZCkpO1xuICAgICAgLy8gWjMgPSBGXjIgLSAyICogRlxuICAgICAgbnogPSBmLnJlZFNxcigpLnJlZFN1YihmKS5yZWRTdWIoZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEggPSBaMV4yXG4gICAgICB2YXIgaCA9IHRoaXMuei5yZWRTcXIoKTtcbiAgICAgIC8vIEogPSBGIC0gMiAqIEhcbiAgICAgIHZhciBqID0gZi5yZWRTdWIoaCkucmVkSVN1YihoKTtcbiAgICAgIC8vIFgzID0gKEItQy1EKSpKXG4gICAgICBueCA9IGIucmVkU3ViKGMpLnJlZElTdWIoZCkucmVkTXVsKGopO1xuICAgICAgLy8gWTMgPSBGICogKEUgLSBEKVxuICAgICAgbnkgPSBmLnJlZE11bChlLnJlZFN1YihkKSk7XG4gICAgICAvLyBaMyA9IEYgKiBKXG4gICAgICBueiA9IGYucmVkTXVsKGopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBFID0gQyArIERcbiAgICB2YXIgZSA9IGMucmVkQWRkKGQpO1xuICAgIC8vIEggPSAoYyAqIFoxKV4yXG4gICAgdmFyIGggPSB0aGlzLmN1cnZlLl9tdWxDKHRoaXMueikucmVkU3FyKCk7XG4gICAgLy8gSiA9IEUgLSAyICogSFxuICAgIHZhciBqID0gZS5yZWRTdWIoaCkucmVkU3ViKGgpO1xuICAgIC8vIFgzID0gYyAqIChCIC0gRSkgKiBKXG4gICAgbnggPSB0aGlzLmN1cnZlLl9tdWxDKGIucmVkSVN1YihlKSkucmVkTXVsKGopO1xuICAgIC8vIFkzID0gYyAqIEUgKiAoQyAtIEQpXG4gICAgbnkgPSB0aGlzLmN1cnZlLl9tdWxDKGUpLnJlZE11bChjLnJlZElTdWIoZCkpO1xuICAgIC8vIFozID0gRSAqIEpcbiAgICBueiA9IGUucmVkTXVsKGopO1xuICB9XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmRibCA9IGZ1bmN0aW9uIGRibCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIERvdWJsZSBpbiBleHRlbmRlZCBjb29yZGluYXRlc1xuICBpZiAodGhpcy5jdXJ2ZS5leHRlbmRlZClcbiAgICByZXR1cm4gdGhpcy5fZXh0RGJsKCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fcHJvakRibCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9leHRBZGQgPSBmdW5jdGlvbiBfZXh0QWRkKHApIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtZXh0ZW5kZWQtMS5odG1sXG4gIC8vICAgICAjYWRkaXRpb24tYWRkLTIwMDgtaHdjZC0zXG4gIC8vIDhNXG5cbiAgLy8gQSA9IChZMSAtIFgxKSAqIChZMiAtIFgyKVxuICB2YXIgYSA9IHRoaXMueS5yZWRTdWIodGhpcy54KS5yZWRNdWwocC55LnJlZFN1YihwLngpKTtcbiAgLy8gQiA9IChZMSArIFgxKSAqIChZMiArIFgyKVxuICB2YXIgYiA9IHRoaXMueS5yZWRBZGQodGhpcy54KS5yZWRNdWwocC55LnJlZEFkZChwLngpKTtcbiAgLy8gQyA9IFQxICogayAqIFQyXG4gIHZhciBjID0gdGhpcy50LnJlZE11bCh0aGlzLmN1cnZlLmRkKS5yZWRNdWwocC50KTtcbiAgLy8gRCA9IFoxICogMiAqIFoyXG4gIHZhciBkID0gdGhpcy56LnJlZE11bChwLnoucmVkQWRkKHAueikpO1xuICAvLyBFID0gQiAtIEFcbiAgdmFyIGUgPSBiLnJlZFN1YihhKTtcbiAgLy8gRiA9IEQgLSBDXG4gIHZhciBmID0gZC5yZWRTdWIoYyk7XG4gIC8vIEcgPSBEICsgQ1xuICB2YXIgZyA9IGQucmVkQWRkKGMpO1xuICAvLyBIID0gQiArIEFcbiAgdmFyIGggPSBiLnJlZEFkZChhKTtcbiAgLy8gWDMgPSBFICogRlxuICB2YXIgbnggPSBlLnJlZE11bChmKTtcbiAgLy8gWTMgPSBHICogSFxuICB2YXIgbnkgPSBnLnJlZE11bChoKTtcbiAgLy8gVDMgPSBFICogSFxuICB2YXIgbnQgPSBlLnJlZE11bChoKTtcbiAgLy8gWjMgPSBGICogR1xuICB2YXIgbnogPSBmLnJlZE11bChnKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueiwgbnQpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9wcm9qQWRkID0gZnVuY3Rpb24gX3Byb2pBZGQocCkge1xuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1wcm9qZWN0aXZlLmh0bWxcbiAgLy8gICAgICNhZGRpdGlvbi1hZGQtMjAwOC1iYmpscFxuICAvLyAgICAgI2FkZGl0aW9uLWFkZC0yMDA3LWJsXG4gIC8vIDEwTSArIDFTXG5cbiAgLy8gQSA9IFoxICogWjJcbiAgdmFyIGEgPSB0aGlzLnoucmVkTXVsKHAueik7XG4gIC8vIEIgPSBBXjJcbiAgdmFyIGIgPSBhLnJlZFNxcigpO1xuICAvLyBDID0gWDEgKiBYMlxuICB2YXIgYyA9IHRoaXMueC5yZWRNdWwocC54KTtcbiAgLy8gRCA9IFkxICogWTJcbiAgdmFyIGQgPSB0aGlzLnkucmVkTXVsKHAueSk7XG4gIC8vIEUgPSBkICogQyAqIERcbiAgdmFyIGUgPSB0aGlzLmN1cnZlLmQucmVkTXVsKGMpLnJlZE11bChkKTtcbiAgLy8gRiA9IEIgLSBFXG4gIHZhciBmID0gYi5yZWRTdWIoZSk7XG4gIC8vIEcgPSBCICsgRVxuICB2YXIgZyA9IGIucmVkQWRkKGUpO1xuICAvLyBYMyA9IEEgKiBGICogKChYMSArIFkxKSAqIChYMiArIFkyKSAtIEMgLSBEKVxuICB2YXIgdG1wID0gdGhpcy54LnJlZEFkZCh0aGlzLnkpLnJlZE11bChwLngucmVkQWRkKHAueSkpLnJlZElTdWIoYykucmVkSVN1YihkKTtcbiAgdmFyIG54ID0gYS5yZWRNdWwoZikucmVkTXVsKHRtcCk7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICBpZiAodGhpcy5jdXJ2ZS50d2lzdGVkKSB7XG4gICAgLy8gWTMgPSBBICogRyAqIChEIC0gYSAqIEMpXG4gICAgbnkgPSBhLnJlZE11bChnKS5yZWRNdWwoZC5yZWRTdWIodGhpcy5jdXJ2ZS5fbXVsQShjKSkpO1xuICAgIC8vIFozID0gRiAqIEdcbiAgICBueiA9IGYucmVkTXVsKGcpO1xuICB9IGVsc2Uge1xuICAgIC8vIFkzID0gQSAqIEcgKiAoRCAtIEMpXG4gICAgbnkgPSBhLnJlZE11bChnKS5yZWRNdWwoZC5yZWRTdWIoYykpO1xuICAgIC8vIFozID0gYyAqIEYgKiBHXG4gICAgbnogPSB0aGlzLmN1cnZlLl9tdWxDKGYpLnJlZE11bChnKTtcbiAgfVxuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQocCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHA7XG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICBpZiAodGhpcy5jdXJ2ZS5leHRlbmRlZClcbiAgICByZXR1cm4gdGhpcy5fZXh0QWRkKHApO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuX3Byb2pBZGQocCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGspIHtcbiAgaWYgKHRoaXMuX2hhc0RvdWJsZXMoaykpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX2ZpeGVkTmFmTXVsKHRoaXMsIGspO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWwodGhpcywgayk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsQWRkID0gZnVuY3Rpb24gbXVsQWRkKGsxLCBwLCBrMikge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBbIHRoaXMsIHAgXSwgWyBrMSwgazIgXSwgMiwgZmFsc2UpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmptdWxBZGQgPSBmdW5jdGlvbiBqbXVsQWRkKGsxLCBwLCBrMikge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBbIHRoaXMsIHAgXSwgWyBrMSwgazIgXSwgMiwgdHJ1ZSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKCkge1xuICBpZiAodGhpcy56T25lKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIE5vcm1hbGl6ZSBjb29yZGluYXRlc1xuICB2YXIgemkgPSB0aGlzLnoucmVkSW52bSgpO1xuICB0aGlzLnggPSB0aGlzLngucmVkTXVsKHppKTtcbiAgdGhpcy55ID0gdGhpcy55LnJlZE11bCh6aSk7XG4gIGlmICh0aGlzLnQpXG4gICAgdGhpcy50ID0gdGhpcy50LnJlZE11bCh6aSk7XG4gIHRoaXMueiA9IHRoaXMuY3VydmUub25lO1xuICB0aGlzLnpPbmUgPSB0cnVlO1xuICByZXR1cm4gdGhpcztcbn07XG5cblBvaW50LnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcoKSB7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KHRoaXMueC5yZWROZWcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnosXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudCAmJiB0aGlzLnQucmVkTmVnKCkpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFggPSBmdW5jdGlvbiBnZXRYKCkge1xuICB0aGlzLm5vcm1hbGl6ZSgpO1xuICByZXR1cm4gdGhpcy54LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRZID0gZnVuY3Rpb24gZ2V0WSgpIHtcbiAgdGhpcy5ub3JtYWxpemUoKTtcbiAgcmV0dXJuIHRoaXMueS5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShvdGhlcikge1xuICByZXR1cm4gdGhpcyA9PT0gb3RoZXIgfHxcbiAgICAgICAgIHRoaXMuZ2V0WCgpLmNtcChvdGhlci5nZXRYKCkpID09PSAwICYmXG4gICAgICAgICB0aGlzLmdldFkoKS5jbXAob3RoZXIuZ2V0WSgpKSA9PT0gMDtcbn07XG5cblBvaW50LnByb3RvdHlwZS5lcVhUb1AgPSBmdW5jdGlvbiBlcVhUb1AoeCkge1xuICB2YXIgcnggPSB4LnRvUmVkKHRoaXMuY3VydmUucmVkKS5yZWRNdWwodGhpcy56KTtcbiAgaWYgKHRoaXMueC5jbXAocngpID09PSAwKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHZhciB4YyA9IHguY2xvbmUoKTtcbiAgdmFyIHQgPSB0aGlzLmN1cnZlLnJlZE4ucmVkTXVsKHRoaXMueik7XG4gIGZvciAoOzspIHtcbiAgICB4Yy5pYWRkKHRoaXMuY3VydmUubik7XG4gICAgaWYgKHhjLmNtcCh0aGlzLmN1cnZlLnApID49IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByeC5yZWRJQWRkKHQpO1xuICAgIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG4vLyBDb21wYXRpYmlsaXR5IHdpdGggQmFzZUN1cnZlXG5Qb2ludC5wcm90b3R5cGUudG9QID0gUG9pbnQucHJvdG90eXBlLm5vcm1hbGl6ZTtcblBvaW50LnByb3RvdHlwZS5taXhlZEFkZCA9IFBvaW50LnByb3RvdHlwZS5hZGQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuc2hhMSA9IHJlcXVpcmUoJy4vc2hhLzEnKTtcbmV4cG9ydHMuc2hhMjI0ID0gcmVxdWlyZSgnLi9zaGEvMjI0Jyk7XG5leHBvcnRzLnNoYTI1NiA9IHJlcXVpcmUoJy4vc2hhLzI1NicpO1xuZXhwb3J0cy5zaGEzODQgPSByZXF1aXJlKCcuL3NoYS8zODQnKTtcbmV4cG9ydHMuc2hhNTEyID0gcmVxdWlyZSgnLi9zaGEvNTEyJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG52YXIgc2hhQ29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcblxudmFyIHJvdGwzMiA9IHV0aWxzLnJvdGwzMjtcbnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyO1xudmFyIHN1bTMyXzUgPSB1dGlscy5zdW0zMl81O1xudmFyIGZ0XzEgPSBzaGFDb21tb24uZnRfMTtcbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG52YXIgc2hhMV9LID0gW1xuICAweDVBODI3OTk5LCAweDZFRDlFQkExLFxuICAweDhGMUJCQ0RDLCAweENBNjJDMUQ2XG5dO1xuXG5mdW5jdGlvbiBTSEExKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMSkpXG4gICAgcmV0dXJuIG5ldyBTSEExKCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLFxuICAgIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjAgXTtcbiAgdGhpcy5XID0gbmV3IEFycmF5KDgwKTtcbn1cblxudXRpbHMuaW5oZXJpdHMoU0hBMSwgQmxvY2tIYXNoKTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMTtcblxuU0hBMS5ibG9ja1NpemUgPSA1MTI7XG5TSEExLm91dFNpemUgPSAxNjA7XG5TSEExLmhtYWNTdHJlbmd0aCA9IDgwO1xuU0hBMS5wYWRMZW5ndGggPSA2NDtcblxuU0hBMS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgVyA9IHRoaXMuVztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspXG4gICAgV1tpXSA9IG1zZ1tzdGFydCArIGldO1xuXG4gIGZvcig7IGkgPCBXLmxlbmd0aDsgaSsrKVxuICAgIFdbaV0gPSByb3RsMzIoV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XSwgMSk7XG5cbiAgdmFyIGEgPSB0aGlzLmhbMF07XG4gIHZhciBiID0gdGhpcy5oWzFdO1xuICB2YXIgYyA9IHRoaXMuaFsyXTtcbiAgdmFyIGQgPSB0aGlzLmhbM107XG4gIHZhciBlID0gdGhpcy5oWzRdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBXLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHMgPSB+fihpIC8gMjApO1xuICAgIHZhciB0ID0gc3VtMzJfNShyb3RsMzIoYSwgNSksIGZ0XzEocywgYiwgYywgZCksIGUsIFdbaV0sIHNoYTFfS1tzXSk7XG4gICAgZSA9IGQ7XG4gICAgZCA9IGM7XG4gICAgYyA9IHJvdGwzMihiLCAzMCk7XG4gICAgYiA9IGE7XG4gICAgYSA9IHQ7XG4gIH1cblxuICB0aGlzLmhbMF0gPSBzdW0zMih0aGlzLmhbMF0sIGEpO1xuICB0aGlzLmhbMV0gPSBzdW0zMih0aGlzLmhbMV0sIGIpO1xuICB0aGlzLmhbMl0gPSBzdW0zMih0aGlzLmhbMl0sIGMpO1xuICB0aGlzLmhbM10gPSBzdW0zMih0aGlzLmhbM10sIGQpO1xuICB0aGlzLmhbNF0gPSBzdW0zMih0aGlzLmhbNF0sIGUpO1xufTtcblxuU0hBMS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdiaWcnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgU0hBMjU2ID0gcmVxdWlyZSgnLi8yNTYnKTtcblxuZnVuY3Rpb24gU0hBMjI0KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMjI0KSlcbiAgICByZXR1cm4gbmV3IFNIQTIyNCgpO1xuXG4gIFNIQTI1Ni5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHhjMTA1OWVkOCwgMHgzNjdjZDUwNywgMHgzMDcwZGQxNywgMHhmNzBlNTkzOSxcbiAgICAweGZmYzAwYjMxLCAweDY4NTgxNTExLCAweDY0Zjk4ZmE3LCAweGJlZmE0ZmE0IF07XG59XG51dGlscy5pbmhlcml0cyhTSEEyMjQsIFNIQTI1Nik7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTIyNDtcblxuU0hBMjI0LmJsb2NrU2l6ZSA9IDUxMjtcblNIQTIyNC5vdXRTaXplID0gMjI0O1xuU0hBMjI0LmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTIyNC5wYWRMZW5ndGggPSA2NDtcblxuU0hBMjI0LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICAvLyBKdXN0IHRydW5jYXRlIG91dHB1dFxuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmguc2xpY2UoMCwgNyksICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaC5zbGljZSgwLCA3KSwgJ2JpZycpO1xufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG52YXIgU0hBNTEyID0gcmVxdWlyZSgnLi81MTInKTtcblxuZnVuY3Rpb24gU0hBMzg0KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMzg0KSlcbiAgICByZXR1cm4gbmV3IFNIQTM4NCgpO1xuXG4gIFNIQTUxMi5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHhjYmJiOWQ1ZCwgMHhjMTA1OWVkOCxcbiAgICAweDYyOWEyOTJhLCAweDM2N2NkNTA3LFxuICAgIDB4OTE1OTAxNWEsIDB4MzA3MGRkMTcsXG4gICAgMHgxNTJmZWNkOCwgMHhmNzBlNTkzOSxcbiAgICAweDY3MzMyNjY3LCAweGZmYzAwYjMxLFxuICAgIDB4OGViNDRhODcsIDB4Njg1ODE1MTEsXG4gICAgMHhkYjBjMmUwZCwgMHg2NGY5OGZhNyxcbiAgICAweDQ3YjU0ODFkLCAweGJlZmE0ZmE0IF07XG59XG51dGlscy5pbmhlcml0cyhTSEEzODQsIFNIQTUxMik7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTM4NDtcblxuU0hBMzg0LmJsb2NrU2l6ZSA9IDEwMjQ7XG5TSEEzODQub3V0U2l6ZSA9IDM4NDtcblNIQTM4NC5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEzODQucGFkTGVuZ3RoID0gMTI4O1xuXG5TSEEzODQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG52YXIgcm90bDMyID0gdXRpbHMucm90bDMyO1xudmFyIHN1bTMyID0gdXRpbHMuc3VtMzI7XG52YXIgc3VtMzJfMyA9IHV0aWxzLnN1bTMyXzM7XG52YXIgc3VtMzJfNCA9IHV0aWxzLnN1bTMyXzQ7XG52YXIgQmxvY2tIYXNoID0gY29tbW9uLkJsb2NrSGFzaDtcblxuZnVuY3Rpb24gUklQRU1EMTYwKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUklQRU1EMTYwKSlcbiAgICByZXR1cm4gbmV3IFJJUEVNRDE2MCgpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuXG4gIHRoaXMuaCA9IFsgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSwgMHg5OGJhZGNmZSwgMHgxMDMyNTQ3NiwgMHhjM2QyZTFmMCBdO1xuICB0aGlzLmVuZGlhbiA9ICdsaXR0bGUnO1xufVxudXRpbHMuaW5oZXJpdHMoUklQRU1EMTYwLCBCbG9ja0hhc2gpO1xuZXhwb3J0cy5yaXBlbWQxNjAgPSBSSVBFTUQxNjA7XG5cblJJUEVNRDE2MC5ibG9ja1NpemUgPSA1MTI7XG5SSVBFTUQxNjAub3V0U2l6ZSA9IDE2MDtcblJJUEVNRDE2MC5obWFjU3RyZW5ndGggPSAxOTI7XG5SSVBFTUQxNjAucGFkTGVuZ3RoID0gNjQ7XG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBBID0gdGhpcy5oWzBdO1xuICB2YXIgQiA9IHRoaXMuaFsxXTtcbiAgdmFyIEMgPSB0aGlzLmhbMl07XG4gIHZhciBEID0gdGhpcy5oWzNdO1xuICB2YXIgRSA9IHRoaXMuaFs0XTtcbiAgdmFyIEFoID0gQTtcbiAgdmFyIEJoID0gQjtcbiAgdmFyIENoID0gQztcbiAgdmFyIERoID0gRDtcbiAgdmFyIEVoID0gRTtcbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgaisrKSB7XG4gICAgdmFyIFQgPSBzdW0zMihcbiAgICAgIHJvdGwzMihcbiAgICAgICAgc3VtMzJfNChBLCBmKGosIEIsIEMsIEQpLCBtc2dbcltqXSArIHN0YXJ0XSwgSyhqKSksXG4gICAgICAgIHNbal0pLFxuICAgICAgRSk7XG4gICAgQSA9IEU7XG4gICAgRSA9IEQ7XG4gICAgRCA9IHJvdGwzMihDLCAxMCk7XG4gICAgQyA9IEI7XG4gICAgQiA9IFQ7XG4gICAgVCA9IHN1bTMyKFxuICAgICAgcm90bDMyKFxuICAgICAgICBzdW0zMl80KEFoLCBmKDc5IC0gaiwgQmgsIENoLCBEaCksIG1zZ1tyaFtqXSArIHN0YXJ0XSwgS2goaikpLFxuICAgICAgICBzaFtqXSksXG4gICAgICBFaCk7XG4gICAgQWggPSBFaDtcbiAgICBFaCA9IERoO1xuICAgIERoID0gcm90bDMyKENoLCAxMCk7XG4gICAgQ2ggPSBCaDtcbiAgICBCaCA9IFQ7XG4gIH1cbiAgVCA9IHN1bTMyXzModGhpcy5oWzFdLCBDLCBEaCk7XG4gIHRoaXMuaFsxXSA9IHN1bTMyXzModGhpcy5oWzJdLCBELCBFaCk7XG4gIHRoaXMuaFsyXSA9IHN1bTMyXzModGhpcy5oWzNdLCBFLCBBaCk7XG4gIHRoaXMuaFszXSA9IHN1bTMyXzModGhpcy5oWzRdLCBBLCBCaCk7XG4gIHRoaXMuaFs0XSA9IHN1bTMyXzModGhpcy5oWzBdLCBCLCBDaCk7XG4gIHRoaXMuaFswXSA9IFQ7XG59O1xuXG5SSVBFTUQxNjAucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2xpdHRsZScpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnbGl0dGxlJyk7XG59O1xuXG5mdW5jdGlvbiBmKGosIHgsIHksIHopIHtcbiAgaWYgKGogPD0gMTUpXG4gICAgcmV0dXJuIHggXiB5IF4gejtcbiAgZWxzZSBpZiAoaiA8PSAzMSlcbiAgICByZXR1cm4gKHggJiB5KSB8ICgofngpICYgeik7XG4gIGVsc2UgaWYgKGogPD0gNDcpXG4gICAgcmV0dXJuICh4IHwgKH55KSkgXiB6O1xuICBlbHNlIGlmIChqIDw9IDYzKVxuICAgIHJldHVybiAoeCAmIHopIHwgKHkgJiAofnopKTtcbiAgZWxzZVxuICAgIHJldHVybiB4IF4gKHkgfCAofnopKTtcbn1cblxuZnVuY3Rpb24gSyhqKSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiAweDAwMDAwMDAwO1xuICBlbHNlIGlmIChqIDw9IDMxKVxuICAgIHJldHVybiAweDVhODI3OTk5O1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAweDZlZDllYmExO1xuICBlbHNlIGlmIChqIDw9IDYzKVxuICAgIHJldHVybiAweDhmMWJiY2RjO1xuICBlbHNlXG4gICAgcmV0dXJuIDB4YTk1M2ZkNGU7XG59XG5cbmZ1bmN0aW9uIEtoKGopIHtcbiAgaWYgKGogPD0gMTUpXG4gICAgcmV0dXJuIDB4NTBhMjhiZTY7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuIDB4NWM0ZGQxMjQ7XG4gIGVsc2UgaWYgKGogPD0gNDcpXG4gICAgcmV0dXJuIDB4NmQ3MDNlZjM7XG4gIGVsc2UgaWYgKGogPD0gNjMpXG4gICAgcmV0dXJuIDB4N2E2ZDc2ZTk7XG4gIGVsc2VcbiAgICByZXR1cm4gMHgwMDAwMDAwMDtcbn1cblxudmFyIHIgPSBbXG4gIDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsXG4gIDcsIDQsIDEzLCAxLCAxMCwgNiwgMTUsIDMsIDEyLCAwLCA5LCA1LCAyLCAxNCwgMTEsIDgsXG4gIDMsIDEwLCAxNCwgNCwgOSwgMTUsIDgsIDEsIDIsIDcsIDAsIDYsIDEzLCAxMSwgNSwgMTIsXG4gIDEsIDksIDExLCAxMCwgMCwgOCwgMTIsIDQsIDEzLCAzLCA3LCAxNSwgMTQsIDUsIDYsIDIsXG4gIDQsIDAsIDUsIDksIDcsIDEyLCAyLCAxMCwgMTQsIDEsIDMsIDgsIDExLCA2LCAxNSwgMTNcbl07XG5cbnZhciByaCA9IFtcbiAgNSwgMTQsIDcsIDAsIDksIDIsIDExLCA0LCAxMywgNiwgMTUsIDgsIDEsIDEwLCAzLCAxMixcbiAgNiwgMTEsIDMsIDcsIDAsIDEzLCA1LCAxMCwgMTQsIDE1LCA4LCAxMiwgNCwgOSwgMSwgMixcbiAgMTUsIDUsIDEsIDMsIDcsIDE0LCA2LCA5LCAxMSwgOCwgMTIsIDIsIDEwLCAwLCA0LCAxMyxcbiAgOCwgNiwgNCwgMSwgMywgMTEsIDE1LCAwLCA1LCAxMiwgMiwgMTMsIDksIDcsIDEwLCAxNCxcbiAgMTIsIDE1LCAxMCwgNCwgMSwgNSwgOCwgNywgNiwgMiwgMTMsIDE0LCAwLCAzLCA5LCAxMVxuXTtcblxudmFyIHMgPSBbXG4gIDExLCAxNCwgMTUsIDEyLCA1LCA4LCA3LCA5LCAxMSwgMTMsIDE0LCAxNSwgNiwgNywgOSwgOCxcbiAgNywgNiwgOCwgMTMsIDExLCA5LCA3LCAxNSwgNywgMTIsIDE1LCA5LCAxMSwgNywgMTMsIDEyLFxuICAxMSwgMTMsIDYsIDcsIDE0LCA5LCAxMywgMTUsIDE0LCA4LCAxMywgNiwgNSwgMTIsIDcsIDUsXG4gIDExLCAxMiwgMTQsIDE1LCAxNCwgMTUsIDksIDgsIDksIDE0LCA1LCA2LCA4LCA2LCA1LCAxMixcbiAgOSwgMTUsIDUsIDExLCA2LCA4LCAxMywgMTIsIDUsIDEyLCAxMywgMTQsIDExLCA4LCA1LCA2XG5dO1xuXG52YXIgc2ggPSBbXG4gIDgsIDksIDksIDExLCAxMywgMTUsIDE1LCA1LCA3LCA3LCA4LCAxMSwgMTQsIDE0LCAxMiwgNixcbiAgOSwgMTMsIDE1LCA3LCAxMiwgOCwgOSwgMTEsIDcsIDcsIDEyLCA3LCA2LCAxNSwgMTMsIDExLFxuICA5LCA3LCAxNSwgMTEsIDgsIDYsIDYsIDE0LCAxMiwgMTMsIDUsIDE0LCAxMywgMTMsIDcsIDUsXG4gIDE1LCA1LCA4LCAxMSwgMTQsIDE0LCA2LCAxNCwgNiwgOSwgMTIsIDksIDEyLCA1LCAxNSwgOCxcbiAgOCwgNSwgMTIsIDksIDEyLCA1LCAxNCwgNiwgOCwgMTMsIDYsIDUsIDE1LCAxMywgMTEsIDExXG5dO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBIbWFjKGhhc2gsIGtleSwgZW5jKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBIbWFjKSlcbiAgICByZXR1cm4gbmV3IEhtYWMoaGFzaCwga2V5LCBlbmMpO1xuICB0aGlzLkhhc2ggPSBoYXNoO1xuICB0aGlzLmJsb2NrU2l6ZSA9IGhhc2guYmxvY2tTaXplIC8gODtcbiAgdGhpcy5vdXRTaXplID0gaGFzaC5vdXRTaXplIC8gODtcbiAgdGhpcy5pbm5lciA9IG51bGw7XG4gIHRoaXMub3V0ZXIgPSBudWxsO1xuXG4gIHRoaXMuX2luaXQodXRpbHMudG9BcnJheShrZXksIGVuYykpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBIbWFjO1xuXG5IbWFjLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQoa2V5KSB7XG4gIC8vIFNob3J0ZW4ga2V5LCBpZiBuZWVkZWRcbiAgaWYgKGtleS5sZW5ndGggPiB0aGlzLmJsb2NrU2l6ZSlcbiAgICBrZXkgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSkuZGlnZXN0KCk7XG4gIGFzc2VydChrZXkubGVuZ3RoIDw9IHRoaXMuYmxvY2tTaXplKTtcblxuICAvLyBBZGQgcGFkZGluZyB0byBrZXlcbiAgZm9yICh2YXIgaSA9IGtleS5sZW5ndGg7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgIGtleS5wdXNoKDApO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspXG4gICAga2V5W2ldIF49IDB4MzY7XG4gIHRoaXMuaW5uZXIgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSk7XG5cbiAgLy8gMHgzNiBeIDB4NWMgPSAweDZhXG4gIGZvciAoaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspXG4gICAga2V5W2ldIF49IDB4NmE7XG4gIHRoaXMub3V0ZXIgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSk7XG59O1xuXG5IbWFjLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgdGhpcy5pbm5lci51cGRhdGUobXNnLCBlbmMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkhtYWMucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy5vdXRlci51cGRhdGUodGhpcy5pbm5lci5kaWdlc3QoKSk7XG4gIHJldHVybiB0aGlzLm91dGVyLmRpZ2VzdChlbmMpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBkb3VibGVzOiB7XG4gICAgc3RlcDogNCxcbiAgICBwb2ludHM6IFtcbiAgICAgIFtcbiAgICAgICAgJ2U2MGZjZTkzYjU5ZTllYzUzMDExYWFiYzIxYzIzZTk3YjJhMzEzNjliODdhNWFlOWM0NGVlODllMmE2ZGVjMGEnLFxuICAgICAgICAnZjdlMzUwNzM5OWU1OTU5MjlkYjk5ZjM0ZjU3OTM3MTAxMjk2ODkxZTQ0ZDIzZjBiZTFmMzJjY2U2OTYxNjgyMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4MjgyMjYzMjEyYzYwOWQ5ZWEyYTZlM2UxNzJkZTIzOGQ4YzM5Y2FiZDVhYzFjYTEwNjQ2ZTIzZmQ1ZjUxNTA4JyxcbiAgICAgICAgJzExZjhhODA5ODU1N2RmZTQ1ZTgyNTZlODMwYjYwYWNlNjJkNjEzYWMyZjdiMTdiZWQzMWI2ZWFmZjZlMjZjYWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTc1ZTE1OWY3MjhiODY1YTcyZjk5Y2M2YzZmYzg0NmRlMGI5MzgzM2ZkMjIyMmVkNzNmY2U1YjU1MWU1YjczOScsXG4gICAgICAgICdkMzUwNmUwZDllM2M3OWViYTRlZjk3YTUxZmY3MWY1ZWFjYjU5NTVhZGQyNDM0NWM2ZWZhNmZmZWU5ZmVkNjk1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM2M2Q5MGQ0NDdiMDBjOWM5OWNlYWMwNWI2MjYyZWUwNTM0NDFjN2U1NTU1MmZmZTUyNmJhZDhmODNmZjQ2NDAnLFxuICAgICAgICAnNGUyNzNhZGZjNzMyMjIxOTUzYjQ0NTM5N2YzMzYzMTQ1YjlhODkwMDgxOTllY2I2MjAwM2M3ZjNiZWU5ZGU5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhiNGI1ZjE2NWRmM2MyYmU4YzYyNDRiNWI3NDU2Mzg4NDNlNGE3ODFhMTViY2QxYjY5Zjc5YTU1ZGZmZGY4MGMnLFxuICAgICAgICAnNGFhZDBhNmY2OGQzMDhiNGIzZmJkNzgxM2FiMGRhMDRmOWUzMzY1NDYxNjJlZTU2YjNlZmYwYzY1ZmQ0ZmQzNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3MjNjYmFhNmU1ZGI5OTZkNmJmNzcxYzAwYmQ1NDhjN2I3MDBkYmZmYTZjMGU3N2JjYjYxMTU5MjUyMzJmY2RhJyxcbiAgICAgICAgJzk2ZTg2N2I1NTk1Y2M0OThhOTIxMTM3NDg4ODI0ZDZlMjY2MGEwNjUzNzc5NDk0ODAxZGMwNjlkOWViMzlmNWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWViZmE0ZDQ5M2JlYmY5OGJhNWZlZWM4MTJjMmQzYjUwOTQ3OTYxMjM3YTkxOTgzOWE1MzNlY2EwZTdkZDdmYScsXG4gICAgICAgICc1ZDlhOGNhMzk3MGVmMGYyNjllZTdlZGFmMTc4MDg5ZDlhZTRjZGMzYTcxMWY3MTJkZGZkNGZkYWUxZGU4OTk5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzEwMGY0NGRhNjk2ZTcxNjcyNzkxZDBhMDliN2JkZTQ1OWYxMjE1YTI5YjNjMDNiZmVmZDc4MzViMzlhNDhkYjAnLFxuICAgICAgICAnY2RkOWUxMzE5MmEwMGI3NzJlYzhmMzMwMGMwOTA2NjZiN2ZmNGExOGZmNTE5NWFjMGZiZDVjZDYyYmM2NWEwOSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlMTAzMWJlMjYyYzdlZDFiMWRjOTIyN2E0YTA0YzAxN2E3N2Y4ZDQ0NjRmM2IzODUyYzhhY2RlNmU1MzRmZDJkJyxcbiAgICAgICAgJzlkNzA2MTkyODk0MDQwNWU2YmI2YTQxNzY1OTc1MzVhZjI5MmRkNDE5ZTFjZWQ3OWE0NGYxOGYyOTQ1NmEwMGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmVlYTZjYWU0NmQ1NWI1MzBhYzI4MzlmMTQzYmQ3ZWM1Y2Y4YjI2NmE0MWQ2YWY1MmQ1ZTY4OGQ5MDk0Njk2ZCcsXG4gICAgICAgICdlNTdjNmI2Yzk3ZGNlMWJhYjA2ZTRlMTJiZjNlY2Q1Yzk4MWM4OTU3Y2M0MTQ0MmQzMTU1ZGViZjE4MDkwMDg4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RhNjdhOTFkOTEwNDljZGNiMzY3YmU0YmU2ZmZjYTNjZmVlZDY1N2Q4MDg1ODNkZTMzZmE5NzhiYzFlYzZjYjEnLFxuICAgICAgICAnOWJhY2FhMzU0ODE2NDJiYzQxZjQ2M2Y3ZWM5NzgwZTVkZWM3YWRjNTA4Zjc0MGExN2U5ZWE4ZTI3YTY4YmUxZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1MzkwNGZhYTBiMzM0Y2RkYTZlMDAwOTM1ZWYyMjE1MWVjMDhkMGY3YmIxMTA2OWY1NzU0NWNjYzFhMzdiN2MwJyxcbiAgICAgICAgJzViYzA4N2QwYmM4MDEwNmQ4OGM5ZWNjYWMyMGQzYzFjMTM5OTk5ODFlMTQ0MzQ2OTlkY2IwOTZiMDIyNzcxYzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGU3YmNkMGJkMzU5ODNhNzcxOWNjYTc3NjRjYTkwNjc3OWI1M2EwNDNhOWI4YmNhZWZmOTU5ZjQzYWQ4NjA0NycsXG4gICAgICAgICcxMGI3NzcwYjJhM2RhNGIzOTQwMzEwNDIwY2E5NTE0NTc5ZTg4ZTJlNDdmZDY4YjNlYTEwMDQ3ZTg0NjAzNzJhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM4NWVlZDM0YzFjZGZmMjFlNmQwODE4Njg5YjgxYmRlNzFhN2Y0ZjE4Mzk3ZTY2OTBhODQxZTE1OTljNDM4NjInLFxuICAgICAgICAnMjgzYmViYzNlOGVhMjNmNTY3MDFkZTE5ZTllYmY0NTc2YjMwNGVlYzIwODZkYzhjYzA0NThmZTU1NDJlNTQ1MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2ZjlkOWI4MDNlY2YxOTE2MzdjNzNhNDQxM2RmYTE4MGZkZGY4NGE1OTQ3ZmJjOWM2MDZlZDg2YzNmYWMzYTcnLFxuICAgICAgICAnN2M4MGM2OGU2MDMwNTliYTY5YjhlMmEzMGU0NWM0ZDQ3ZWE0ZGQyZjVjMjgxMDAyZDg2ODkwNjAzYTg0MjE2MCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMzIyZDQwMTI0M2M0ZTI1ODJhMjE0N2MxMDRkNmVjYmY3NzRkMTYzZGIwZjVlNTMxM2I3ZTBlNzQyZDBlNmJkJyxcbiAgICAgICAgJzU2ZTcwNzk3ZTk2NjRlZjViZmIwMTliYzRkZGFmOWI3MjgwNWY2M2VhMjg3M2FmNjI0ZjNhMmU5NmMyOGIyYTAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODU2NzJjN2QyZGUwYjdkYTJiZDE3NzBkODk2NjU4Njg3NDFiM2Y5YWY3NjQzMzk3NzIxZDc0ZDI4MTM0YWI4MycsXG4gICAgICAgICc3YzQ4MWI5YjViNDNiMmViNjM3NDA0OWJmYTYyYzJlNWU3N2YxN2ZjYzUyOThmNDRjOGUzMDk0Zjc5MDMxM2E2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzk0OGJmODA5YjE5ODhhNDZiMDZjOWYxOTE5NDEzYjEwZjkyMjZjNjBmNjY4ODMyZmZkOTU5YWY2MGM4MmEwYScsXG4gICAgICAgICc1M2E1NjI4NTZkY2I2NjQ2ZGM2Yjc0YzVkMWMzNDE4YzZkNGRmZjA4Yzk3Y2QyYmVkNGNiN2Y4OGQ4YzhlNTg5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYyNjBjZTdmNDYxODAxYzM0ZjA2N2NlMGYwMjg3M2E4ZjFiMGU0NGRmYzY5NzUyYWNjZWNkODE5ZjM4ZmQ4ZTgnLFxuICAgICAgICAnYmMyZGE4MmI2ZmE1YjU3MWE3ZjA5MDQ5Nzc2YTFlZjdlY2QyOTIyMzgwNTFjMTk4YzFhODRlOTViMmI0YWUxNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNTAzN2RlMGFmYzFkOGQ0M2Q4MzQ4NDE0YmJmNDEwMzA0M2VjOGY1NzViZmRjNDMyOTUzY2M4ZDIwMzdmYTJkJyxcbiAgICAgICAgJzQ1NzE1MzRiYWE5NGQzYjVmOWY5OGQwOWZiOTkwYmRkYmQ1ZjViMDNlYzQ4MWYxMGUwZTVkYzg0MWQ3NTViZGEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTA2MzcyYjBmNGEyMDdhZGY1ZWE5MDVlOGYxNzcxYjRlN2U4ZGJkMWM2YTZjNWI3MjU4NjZhMGFlNGZjZTcyNScsXG4gICAgICAgICc3YTkwODk3NGJjZTE4Y2ZlMTJhMjdiYjJhZDVhNDg4Y2Q3NDg0YTc3ODcxMDQ4NzBiMjcwMzRmOTRlZWUzMWRkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzIxM2M3YTcxNWNkNWQ0NTM1OGQwYmJmOWRjMGNlMDIyMDRiMTBiZGRlMmEzZjU4NTQwYWQ2OTA4ZDA1NTk3NTQnLFxuICAgICAgICAnNGI2ZGFkMGI1YWU0NjI1MDcwMTNhZDA2MjQ1YmExOTBiYjQ4NTBmNWYzNmE3ZWVkZGZmMmMyNzUzNGI0NThmMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ZTdjMjcyYTdhZjRiMzRlOGRiYjkzNTJhNTQxOWE4N2UyODM4YzcwYWRjNjJjZGRmMGNjM2EzYjA4ZmJkNTNjJyxcbiAgICAgICAgJzE3NzQ5Yzc2NmM5ZDBiMThlMTZmZDA5ZjZkZWY2ODFiNTMwYjk2MTRiZmY3ZGQzM2UwYjM5NDE4MTdkY2FhZTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmVhNzRlM2RiZTc3OGIxYjEwZjIzOGFkNjE2ODZhYTVjNzZlM2RiMmJlNDMwNTc2MzI0MjdlMjg0MGZiMjdiNicsXG4gICAgICAgICc2ZTA1NjhkYjliMGIxMzI5N2NmNjc0ZGVjY2I2YWY5MzEyNmI1OTZiOTczZjdiNzc3MDFkM2RiN2YyM2NiOTZmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc2ZTY0MTEzZjY3N2NmMGUxMGEyNTcwZDU5OTk2OGQzMTU0NGUxNzliNzYwNDMyOTUyYzAyYTQ0MTdiZGRlMzknLFxuICAgICAgICAnYzkwZGRmOGRlZTRlOTVjZjU3NzA2NmQ3MDY4MWYwZDM1ZTJhMzNkMmI1NmQyMDMyYjRiMTc1MmQxOTAxYWMwMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNzM4YzU2YjAzYjJhYmUxZTgyODFiYWE3NDNmOGY5YThmN2NjNjQzZGYyNmNiZWUzYWIxNTAyNDJiY2JiODkxJyxcbiAgICAgICAgJzg5M2ZiNTc4OTUxYWQyNTM3ZjcxOGYyZWFjYmZiYmJiODIzMTRlZWY3ODgwY2ZlOTE3ZTczNWQ5Njk5YTg0YzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDg5NTYyNjU0OGI2NWI4MWUyNjRjNzYzN2M5NzI4NzdkMWQ3MmU1ZjNhOTI1MDE0MzcyZTlmNjU4OGY2YzE0YicsXG4gICAgICAgICdmZWJmYWEzOGYyYmM3ZWFlNzI4ZWM2MDgxOGMzNDBlYjAzNDI4ZDYzMmJiMDY3ZTE3OTM2M2VkNzVkN2Q5OTFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2I4ZGE5NDAzMmE5NTc1MThlYjBmNjQzMzU3MWU4NzYxY2VmZmM3MzY5M2U4NGVkZDQ5MTUwYTU2NGY2NzZlMDMnLFxuICAgICAgICAnMjgwNGRmYTQ0ODA1YTFlNGQ3Yzk5Y2M5NzYyODA4YjA5MmNjNTg0ZDk1ZmYzYjUxMTQ4OGU0ZTc0ZWZkZjZlNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlODBmZWExNDQ0MWZiMzNhN2Q4YWRhYjk0NzVkN2ZhYjIwMTllZmZiNTE1NmE3OTJmMWExMTc3OGUzYzBkZjVkJyxcbiAgICAgICAgJ2VlZDFkZTdmNjM4ZTAwNzcxZTg5NzY4Y2EzY2E5NDQ3MmQxNTVlODBhZjMyMmVhOWZjYjQyOTFiNmFjOWVjNzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTMwMTY5N2JkZmNkNzA0MzEzYmE0OGU1MWQ1Njc1NDNmMmExODIwMzFlZmQ2OTE1ZGRjMDdiYmNjNGUxNjA3MCcsXG4gICAgICAgICc3MzcwZjkxY2ZiNjdlNGY1MDgxODA5ZmEyNWQ0MGY5YjE3MzVkYmY3YzBhMTFhMTMwYzBkMWEwNDFlMTc3ZWExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkwYWQ4NWIzODlkNmI5MzY0NjNmOWQwNTEyNjc4ZGUyMDhjYzMzMGIxMTMwN2ZmZmFiN2FjNjNlM2ZiMDRlZDQnLFxuICAgICAgICAnZTUwN2EzNjIwYTM4MjYxYWZmZGNiZDk0MjcyMjJiODM5YWVmYWJlMTU4Mjg5NGQ5OTFkNGQ0OGNiNmVmMTUwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhmNjhiOWQyZjYzYjVmMzM5MjM5YzFhZDk4MWYxNjJlZTg4YzU2Nzg3MjNlYTMzNTFiN2I0NDRjOWVjNGMwZGEnLFxuICAgICAgICAnNjYyYTlmMmRiYTA2Mzk4NmRlMWQ5MGMyYjZiZTIxNWRiYmVhMmNmZTk1NTEwYmZkZjIzY2JmNzk1MDFmZmY4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNGYzZmIwMTc2YWY4NWQ2NWZmOTlmZjkxOThjMzYwOTFmNDhlODY1MDM2ODFlM2U2Njg2ZmQ1MDUzMjMxZTExJyxcbiAgICAgICAgJzFlNjM2MzNhZDBlZjRmMWMxNjYxYTZkMGVhMDJiNzI4NmNjN2U3NGVjOTUxZDFjOTgyMmMzODU3NmZlYjczYmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGMwMGZhOWIxOGViZjMzMWViOTYxNTM3YTQ1YTQyNjZjNzAzNGYyZjBkNGUxZDA3MTZmYjZlYWUyMGVhZTI5ZScsXG4gICAgICAgICdlZmE0NzI2N2ZlYTUyMWExYTlkYzM0M2EzNzM2Yzk3NGMyZmFkYWZhODFlMzZjNTRlN2QyYTRjNjY3MDI0MTRiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U3YTI2Y2U2OWRkNDgyOWYzZTEwY2VjMGE5ZTk4ZWQzMTQzZDA4NGYzMDhiOTJjMDk5N2ZkZGZjNjBjYjNlNDEnLFxuICAgICAgICAnMmE3NThlMzAwZmE3OTg0YjQ3MWIwMDZhMWFhZmJiMThkMGE2YjJjMDQyMGU4M2UyMGU4YTk0MjFjZjJjZmQ1MSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiNjQ1OWUwZWUzNjYyZWM4ZDIzNTQwYzIyM2JjYmRjNTcxY2JjYjk2N2Q3OTQyNGYzY2YyOWViM2RlNmI4MGVmJyxcbiAgICAgICAgJzY3Yzg3NmQwNmYzZTA2ZGUxZGFkZjE2ZTU2NjFkYjNjNGIzYWU2ZDQ4ZTM1YjJmZjMwYmYwYjYxYTcxYmE0NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNjhhODBjODI4MGJiODQwNzkzMjM0YWExMThmMDYyMzFkNmYxZmM2N2U3M2M1YTVkZWRhMGY1YjQ5Njk0M2U4JyxcbiAgICAgICAgJ2RiOGJhOWZmZjRiNTg2ZDAwYzRiMWY5MTc3YjBlMjhiNWIwZTdiOGY3ODQ1Mjk1YTI5NGM4NDI2NmIxMzMxMjAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzI0YWVkN2RmNjVjODA0MjUyZGMwMjcwOTA3YTMwYjA5NjEyYWViOTczNDQ5Y2VhNDA5NTk4MGZjMjhkM2Q1ZCcsXG4gICAgICAgICc2NDhhMzY1Nzc0YjYxZjJmZjEzMGMwYzM1YWVjMWY0ZjE5MjEzYjBjN2UzMzI4NDM5NjcyMjRhZjk2YWI3Yzg0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRkZjljMTQ5MTljZGU2MWY2ZDUxZGZkYmU1ZmVlNWRjZWVjNDE0M2JhOGQxY2E4ODhlOGJkMzczZmQwNTRjOTYnLFxuICAgICAgICAnMzVlYzUxMDkyZDg3MjgwNTA5NzRjMjNhMWQ4NWQ0YjVkNTA2Y2RjMjg4NDkwMTkyZWJhYzA2Y2FkMTBkNWQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOWMzOTE5YTg0YTQ3NDg3MGZhZWQ4YTljMWNjNjYwMjE1MjM0ODkwNTRkN2YwMzA4Y2JmYzk5YzhhYzFmOThjZCcsXG4gICAgICAgICdkZGI4NGYwZjRhNGRkZDU3NTg0ZjA0NGJmMjYwZTY0MTkwNTMyNmY3NmM2NGM4ZTZiZTdlNWUwM2Q0ZmM1OTlkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYwNTcxNzBiMWRkMTJmZGY4ZGUwNWYyODFkOGUwNmJiOTFlMTQ5M2E4YjkxZDRjYzVhMjEzODIxMjBhOTU5ZTUnLFxuICAgICAgICAnOWExYWYwYjI2YTZhNDgwN2FkZDlhMmRhZjcxZGYyNjI0NjUxNTJiYzNlZTI0YzY1ZTg5OWJlOTMyMzg1YTJhOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhNTc2ZGY4ZTIzYTA4NDExNDIxNDM5YTQ1MThkYTMxODgwY2VmMGZiYTdkNGRmMTJiMWE2OTczZWVjYjk0MjY2JyxcbiAgICAgICAgJzQwYTZiZjIwZTc2NjQwYjJjOTJiOTdhZmU1OGNkODJjNDMyZTEwYTdmNTE0ZDlmM2VlOGJlMTFhZTFiMjhlYzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzc3OGE3OGMyOGRlYzNlMzBhMDVmZTk2MjlkZThjMzhiYjMwZDFmNWNmOWEzYTIwOGY3NjM4ODliZTU4YWQ3MScsXG4gICAgICAgICczNDYyNmQ5YWI1YTViMjJmZjcwOThlMTJmMmZmNTgwMDg3YjM4NDExZmYyNGFjNTYzYjUxM2ZjMWZkOWY0M2FjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkyODk1NWVlNjM3YTg0NDYzNzI5ZmQzMGU3YWZkMmVkNWY5NjI3NGU1YWQ3ZTVjYjA5ZWRhOWMwNmQ5MDNhYycsXG4gICAgICAgICdjMjU2MjEwMDNkM2Y0MmE4MjdiNzhhMTMwOTNhOTVlZWFjM2QyNmVmYThhOGQ4M2ZjNTE4MGU5MzViY2QwOTFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg1ZDBmZWYzZWM2ZGIxMDkzOTkwNjRmM2EwZTNiMjg1NTY0NWI0YTkwN2FkMzU0NTI3YWFlNzUxNjNkODI3NTEnLFxuICAgICAgICAnMWYwMzY0ODQxM2EzOGMwYmUyOWQ0OTZlNTgyY2Y1NjYzZTg3NTFlOTY4NzczMzE1ODJjMjM3YTI0ZWIxZjk2MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZjJiMGRjZTk3ZWVjZTk3YzFjOWI2MDQxNzk4Yjg1ZGZkZmI2ZDg4ODJkYTIwMzA4ZjU0MDQ4MjQ1MjYwODdlJyxcbiAgICAgICAgJzQ5M2QxM2ZlZjUyNGJhMTg4YWY0YzRkYzU0ZDA3OTM2YzdiN2VkNmZiOTBlMmNlYjJjOTUxZTAxZjBjMjk5MDcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODI3ZmJiZTRiMWU4ODBlYTllZDJiMmU2MzAxYjIxMmI1N2YxZWUxNDhjZDZkZDI4NzgwZTVlMmNmODU2ZTI0MScsXG4gICAgICAgICdjNjBmOWM5MjNjNzI3YjBiNzFiZWYyYzY3ZDFkMTI2ODdmZjdhNjMxODY5MDMxNjZkNjA1YjY4YmFlYzI5M2VjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhYTY0OWYyMWY1MWJkYmFlN2JlNGFlMzRjZTZlNTIxN2E1OGZkY2U3ZjQ3ZjlhYTdmM2I1OGZhMjEyMGUyYjMnLFxuICAgICAgICAnYmUzMjc5ZWQ1YmJiYjAzYWM2OWE4MGY4OTg3OWFhNWEwMWE2Yjk2NWYxM2Y3ZTU5ZDQ3YTUzMDViYTVhZDkzZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNGE0MmQ0M2M1Y2YxNjlkOTM5MWRmNmRlY2Y0MmVlNTQxYjZkOGYwYzlhMTM3NDAxZTIzNjMyZGRhMzRkMjRmJyxcbiAgICAgICAgJzRkOWY5MmU3MTZkMWM3MzUyNmZjOTljY2ZiOGFkMzRjZTg4NmVlZGZhOGQ4ZTRmMTNhN2Y3MTMxZGViYTk0MTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMWVjODBmZWYzNjBjYmRkOTU0MTYwZmFkYWIzNTJiNmI5MmI1MzU3NmE4OGZlYTQ5NDcxNzNiOWQ0MzAwYmYxOScsXG4gICAgICAgICdhZWVmZTkzNzU2YjUzNDBkMmYzYTQ5NThhN2FiYmY1ZTAxNDZlNzdmNjI5NWEwN2I2NzFjZGMxY2MxMDdjZWZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE0NmE3NzhjMDQ2NzBjMmY5MWIwMGFmNDY4MGRmYThiY2UzNDkwNzE3ZDU4YmE4ODlkZGI1OTI4MzY2NjQyYmUnLFxuICAgICAgICAnYjMxOGUwZWMzMzU0MDI4YWRkNjY5ODI3ZjlkNGIyODcwYWFhOTcxZDJmN2U1ZWQxZDBiMjk3NDgzZDgzZWZkMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmYTUwYzBmNjFkMjJlNWYwN2UzYWNlYmIxYWEwN2IxMjhkMDAxMjIwOWEyOGI5Nzc2ZDc2YTg3OTMxODBlZWY5JyxcbiAgICAgICAgJzZiODRjNjkyMjM5N2ViYTliNzJjZDI4NzIyODFhNjhhNWU2ODMyOTNhNTdhMjEzYjM4Y2Q4ZDdkM2Y0ZjI4MTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGExZDYxZDBjYTcyMWExMWIxYTViZjZiN2Q4OGU4NDIxYTI4OGFiNWQ1YmJhNTIyMGU1M2QzMmI1ZjA2N2VjMicsXG4gICAgICAgICc4MTU3ZjU1YTdjOTkzMDZjNzljMDc2NjE2MWM5MWUyOTY2YTczODk5ZDI3OWI0OGE2NTVmYmEwZjFhZDgzNmYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E4ZTI4MmZmMGM5NzA2OTA3MjE1ZmY5OGU4ZmQ0MTY2MTUzMTFkZTA0NDZmMWUwNjJhNzNiMDYxMGQwNjRlMTMnLFxuICAgICAgICAnN2Y5NzM1NWI4ZGI4MWMwOWFiZmI3ZjNjNWIyNTE1ODg4YjY3OWEzZTUwZGQ2YmQ2Y2VmN2M3MzExMWY0Y2MwYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNzRhNTNiOWM5YTI4NTg3MmQzOWU1NmU2OTEzY2FiMTVkNTliMWZhNTEyNTA4YzAyMmYzODJkZTgzMTk0OTdjJyxcbiAgICAgICAgJ2NjYzlkYzM3YWJmYzljMTY1N2I0MTU1ZjJjNDdmOWU2NjQ2YjNhMWQ4Y2I5ODU0MzgzZGExM2FjMDc5YWZhNzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTU5Mzk2OTgxOTQzNzg1YzNkM2U1N2VkZjUwMThjZGJlMDM5ZTczMGU0OTE4YjNkODg0ZmRmZjA5NDc1YjdiYScsXG4gICAgICAgICcyZTdlNTUyODg4YzMzMWRkOGJhMDM4NmE0YjljZDY4NDljNjUzZjY0Yzg3MDkzODVlOWI4YWJmODc1MjRmMmZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QyYTYzYTUwYWU0MDFlNTZkNjQ1YTExNTNiMTA5YThmY2NhMGE0M2Q1NjFmYmEyZGJiNTEzNDBjOWQ4MmIxNTEnLFxuICAgICAgICAnZTgyZDg2ZmI2NDQzZmNiNzU2NWFlZTU4YjI5NDgyMjBhNzBmNzUwYWY0ODRjYTUyZDQxNDIxNzRkY2Y4OTQwNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2NDU4N2UyMzM1NDcxZWI4OTBlZTc4OTZkN2NmZGM4NjZiYWNiZGJkMzgzOTMxN2IzNDM2ZjliNDU2MTdlMDczJyxcbiAgICAgICAgJ2Q5OWZjZGQ1YmY2OTAyZTJhZTk2ZGQ2NDQ3YzI5OWExODViOTBhMzkxMzNhZWFiMzU4Mjk5ZTVlOWZhZjY1ODknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODQ4MWJkZTBlNGU0ZDg4NWIzYTU0NmQzZTU0OWRlMDQyZjBhYTZjZWEyNTBlN2ZkMzU4ZDZjODZkZDQ1ZTQ1OCcsXG4gICAgICAgICczOGVlN2I4Y2JhNTQwNGRkODRhMjViZjM5Y2VjYjJjYTkwMGE3OWM0MmIyNjJlNTU2ZDY0YjFiNTk3NzkwNTdlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzEzNDY0YTU3YTc4MTAyYWE2MmI2OTc5YWU4MTdmNDYzN2ZmY2ZlZDNjNGIxY2UzMGJjZDYzMDNmNmNhZjY2NmInLFxuICAgICAgICAnNjliZTE1OTAwNDYxNDU4MGVmN2U0MzM0NTNjY2IwY2E0OGYzMDBhODFkMDk0MmUxM2Y0OTVhOTA3ZjZlY2MyNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiYzRhOWRmNWI3MTNmZTJlOWFlZjQzMGJjYzFkYzk3YTBjZDljY2VkZTJmMjg1ODhjYWRhM2EwZDJkODNmMzY2JyxcbiAgICAgICAgJ2QzYTgxY2E2ZTc4NWMwNjM4MzkzN2FkZjRiNzk4Y2FhNmU4YTlmYmZhNTQ3YjE2ZDc1OGQ2NjY1ODFmMzNjMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4YzI4YTk3YmY4Mjk4YmMwZDIzZDhjNzQ5NDUyYTMyZTY5NGI2NWUzMGE5NDcyYTM5NTRhYjMwZmU1MzI0Y2FhJyxcbiAgICAgICAgJzQwYTMwNDYzYTMzMDUxOTMzNzhmZWRmMzFmN2NjMGViN2FlNzg0ZjA0NTFjYjk0NTllNzFkYzczY2JlZjk0ODInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGVhOTY2NjEzOTUyN2E4YzFkZDk0Y2U0ZjA3MWZkMjNjOGIzNTBjNWE0YmIzMzc0OGM0YmExMTFmYWNjYWUwJyxcbiAgICAgICAgJzYyMGVmYWJiYzhlZTI3ODJlMjRlN2MwY2ZiOTVjNWQ3MzViNzgzYmU5Y2YwZjhlOTU1YWYzNGEzMGU2MmI5NDUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGQzNjI1ZmFlZjViYTA2MDc0NjY5NzE2YmJkMzc4OGQ4OWJkZGU4MTU5NTk5NjgwOTJmNzZjYzRlYjlhOTc4NycsXG4gICAgICAgICc3YTE4OGZhMzUyMGUzMGQ0NjFkYTI1MDEwNDU3MzFjYTk0MTQ2MTk4Mjg4MzM5NTkzN2Y2OGQwMGM2NDRhNTczJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Y3MTBkNzlkOWViOTYyMjk3ZTRmNjIzMmI0MGU4ZjdmZWIyYmM2MzgxNDYxNGQ2OTJjMTJkZTc1MjQwODIyMWUnLFxuICAgICAgICAnZWE5OGU2NzIzMmQzYjMyOTVkM2I1MzU1MzIxMTVjY2FjODYxMmM3MjE4NTE2MTc1MjZhZTQ3YTljNzdiZmM4MidcbiAgICAgIF1cbiAgICBdXG4gIH0sXG4gIG5hZjoge1xuICAgIHduZDogNyxcbiAgICBwb2ludHM6IFtcbiAgICAgIFtcbiAgICAgICAgJ2Y5MzA4YTAxOTI1OGMzMTA0OTM0NGY4NWY4OWQ1MjI5YjUzMWM4NDU4MzZmOTliMDg2MDFmMTEzYmNlMDM2ZjknLFxuICAgICAgICAnMzg4ZjdiMGY2MzJkZTgxNDBmZTMzN2U2MmEzN2YzNTY2NTAwYTk5OTM0YzIyMzFiNmNiOWZkNzU4NGI4ZTY3MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyZjhiZGU0ZDFhMDcyMDkzNTViNGE3MjUwYTVjNTEyOGU4OGI4NGJkZGM2MTlhYjdjYmE4ZDU2OWIyNDBlZmU0JyxcbiAgICAgICAgJ2Q4YWMyMjI2MzZlNWUzZDZkNGRiYTlkZGE2YzljNDI2Zjc4ODI3MWJhYjBkNjg0MGRjYTg3ZDNhYTZhYzYyZDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNWNiZGYwNjQ2ZTVkYjRlYWEzOThmMzY1ZjJlYTdhMGUzZDQxOWI3ZTAzMzBlMzljZTkyYmRkZWRjYWM0ZjliYycsXG4gICAgICAgICc2YWViY2E0MGJhMjU1OTYwYTMxNzhkNmQ4NjFhNTRkYmE4MTNkMGI4MTNmZGU3YjVhNTA4MjYyODA4NzI2NGRhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2FjZDQ4NGUyZjBjN2Y2NTMwOWFkMTc4YTlmNTU5YWJkZTA5Nzk2OTc0YzU3ZTcxNGMzNWYxMTBkZmMyN2NjYmUnLFxuICAgICAgICAnY2MzMzg5MjFiMGE3ZDlmZDY0MzgwOTcxNzYzYjYxZTlhZGQ4ODhhNDM3NWY4ZTBmMDVjYzI2MmFjNjRmOWMzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NzRhZTdmODU4YTk0MTFlNWVmNDI0NmI3MGM2NWFhYzU2NDk5ODBiZTVjMTc4OTFiYmVjMTc4OTVkYTAwOGNiJyxcbiAgICAgICAgJ2Q5ODRhMDMyZWI2YjVlMTkwMjQzZGQ1NmQ3YjdiMzY1MzcyZGIxZTJkZmY5ZDZhODMwMWQ3NGM5Yzk1M2M2MWInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjI4NzczYzJkOTc1Mjg4YmM3ZDFkMjA1YzM3NDg2NTFiMDc1ZmJjNjYxMGU1OGNkZGVlZGRmOGYxOTQwNWFhOCcsXG4gICAgICAgICdhYjA5MDJlOGQ4ODBhODk3NTgyMTJlYjY1Y2RhZjQ3M2ExYTA2ZGE1MjFmYTkxZjI5YjVjYjUyZGIwM2VkODEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDc5MjRkNGY3ZDQzZWE5NjVhNDY1YWUzMDk1ZmY0MTEzMWU1OTQ2ZjNjODVmNzllNDRhZGJjZjhlMjdlMDgwZScsXG4gICAgICAgICc1ODFlMjg3MmE4NmM3MmE2ODM4NDJlYzIyOGNjNmRlZmVhNDBhZjJiZDg5NmQzYTVjNTA0ZGM5ZmY2YTI2YjU4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RlZmRlYTRjZGI2Nzc3NTBhNDIwZmVlODA3ZWFjZjIxZWI5ODk4YWU3OWI5NzY4NzY2ZTRmYWEwNGEyZDRhMzQnLFxuICAgICAgICAnNDIxMWFiMDY5NDYzNTE2OGU5OTdiMGVhZDJhOTNkYWVjZWQxZjRhMDRhOTVjMGY2Y2ZiMTk5ZjY5ZTU2ZWI3NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyYjRlYTBhNzk3YTQ0M2QyOTNlZjVjZmY0NDRmNDk3OWYwNmFjZmViZDdlODZkMjc3NDc1NjU2MTM4Mzg1YjZjJyxcbiAgICAgICAgJzg1ZTg5YmMwMzc5NDVkOTNiMzQzMDgzYjVhMWM4NjEzMWEwMWY2MGM1MDI2OTc2M2I1NzBjODU0ZTVjMDliN2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzUyYmJmNGE0Y2RkMTI1NjRmOTNmYTMzMmNlMzMzMzAxZDlhZDQwMjcxZjgxMDcxODEzNDBhZWYyNWJlNTlkNScsXG4gICAgICAgICczMjFlYjQwNzUzNDhmNTM0ZDU5YzE4MjU5ZGRhM2UxZjRhMWIzYjJlNzFiMTAzOWM2N2JkM2Q4YmNmODE5OThjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzJmYTIxMDRkNmIzOGQxMWIwMjMwMDEwNTU5ODc5MTI0ZTQyYWI4ZGZlZmY1ZmYyOWRjOWNkYWRkNGVjYWNjM2YnLFxuICAgICAgICAnMmRlMTA2ODI5NWRkODY1YjY0NTY5MzM1YmQ1ZGQ4MDE4MWQ3MGVjZmM4ODI2NDg0MjNiYTc2YjUzMmI3ZDY3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkyNDgyNzliMDliNGQ2OGRhYjIxYTliMDY2ZWRkYTgzMjYzYzNkODRlMDk1NzJlMjY5Y2EwY2Q3ZjU0NTM3MTQnLFxuICAgICAgICAnNzMwMTZmN2JmMjM0YWFkZTVkMWFhNzFiZGVhMmIxZmYzZmMwZGUyYTg4NzkxMmZmZTU0YTMyY2U5N2NiMzQwMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYWVkNGYyYmUzYThiZjI3OGU3MDEzMmZiMGJlYjc1MjJmNTcwZTE0NGJmNjE1YzA3ZTk5NmQ0NDNkZWU4NzI5JyxcbiAgICAgICAgJ2E2OWRjZTRhN2Q2Yzk4ZThkNGExYWNhODdlZjhkNzAwM2Y4M2MyMzBmM2FmYTcyNmFiNDBlNTIyOTBiZTFjNTUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzQ0ZDEyYzcwNjVkODEyZThhY2YyOGQ3Y2JiMTlmOTAxMWVjZDllOWZkZjI4MWIwZTZhM2I1ZTg3ZDIyZTdkYicsXG4gICAgICAgICcyMTE5YTQ2MGNlMzI2Y2RjNzZjNDU5MjZjOTgyZmRhYzBlMTA2ZTg2MWVkZjYxYzVhMDM5MDYzZjBlMGU2NDgyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzZhMjQ1YmY2ZGM2OTg1MDRjODlhMjBjZmRlZDYwODUzMTUyYjY5NTMzNmMyODA2M2I2MWM2NWNiZDI2OWU2YjQnLFxuICAgICAgICAnZTAyMmNmNDJjMmJkNGE3MDhiM2Y1MTI2ZjE2YTI0YWQ4YjMzYmE0OGQwNDIzYjZlZmQ1ZTYzNDgxMDBkOGE4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNjk3ZmZhNmZkOWRlNjI3YzA3N2UzZDJmZTU0MTA4NGNlMTMzMDBiMGJlYzExNDZmOTVhZTU3ZjBkMGJkNmE1JyxcbiAgICAgICAgJ2I5YzM5OGYxODY4MDZmNWQyNzU2MTUwNmU0NTU3NDMzYTJjZjE1MDA5ZTQ5OGFlN2FkZWU5ZDYzZDAxYjIzOTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjA1YmRiMDE5OTgxNzE4Yjk4NmQwZjA3ZTgzNGNiMGQ5ZGViODM2MGZmYjdmNjFkZjk4MjM0NWVmMjdhNzQ3OScsXG4gICAgICAgICcyOTcyZDJkZTRmOGQyMDY4MWE3OGQ5M2VjOTZmZTIzYzI2YmZhZTg0ZmIxNGRiNDNiMDFlMWU5MDU2YjhjNDknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjJkMTRkYWI0MTUwYmY0OTc0MDJmZGM0NWEyMTVlMTBkY2IwMWMzNTQ5NTliMTBjZmUzMWM3ZTlkODdmZjMzZCcsXG4gICAgICAgICc4MGZjMDZiZDhjYzViMDEwOTgwODhhMTk1MGVlZDBkYjAxYWExMzI5NjdhYjQ3MjIzNWY1NjQyNDgzYjI1ZWFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzgwYzYwYWQwMDQwZjI3ZGFkZTViNGIwNmM0MDhlNTZiMmM1MGU5ZjU2YjliOGI0MjVlNTU1YzJmODYzMDhiNmYnLFxuICAgICAgICAnMWMzODMwM2YxY2M1YzMwZjI2ZTY2YmFkN2ZlNzJmNzBhNjVlZWQ0Y2JlNzAyNGViMWFhMDFmNTY0MzBiZDU3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3YTkzNzVhZDYxNjdhZDU0YWE3NGM2MzQ4Y2M1NGQzNDRjYzVkYzk0ODdkODQ3MDQ5ZDVlYWJiMGZhMDNjOGZiJyxcbiAgICAgICAgJ2QwZTNmYTllY2E4NzI2OTA5NTU5ZTBkNzkyNjkwNDZiZGM1OWVhMTBjNzBjZTJiMDJkNDk5ZWMyMjRkYzdmNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNTI4ZWNkOWI2OTZiNTRjOTA3YTllZDA0NTQ0N2E3OWJiNDA4ZWMzOWI2OGRmNTA0YmI1MWY0NTliYzNmZmM5JyxcbiAgICAgICAgJ2VlY2Y0MTI1MzEzNmU1Zjk5OTY2ZjIxODgxZmQ2NTZlYmM0MzQ1NDA1YzUyMGRiYzA2MzQ2NWI1MjE0MDk5MzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDkzNzBhNGI1ZjQzNDEyZWEyNWY1MTRlOGVjZGFkMDUyNjYxMTVlNGE3ZWNiMTM4NzIzMTgwOGY4YjQ1OTYzJyxcbiAgICAgICAgJzc1OGYzZjQxYWZkNmVkNDI4YjMwODFiMDUxMmZkNjJhNTRjM2YzYWZiYjViNjc2NGI2NTMwNTJhMTI5NDljOWEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzdmMjMwOTM2ZWU4OGNiYmQ3M2RmOTMwZDY0NzAyZWY4ODFkODExZTBlMTQ5OGUyZjFjMTNlYjFmYzM0NWQ3NCcsXG4gICAgICAgICc5NThlZjQyYTc4ODZiNjQwMGEwODI2NmU5YmExYjM3ODk2Yzk1MzMwZDk3MDc3Y2JiZThlYjNjNzY3MWM2MGQ2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YyZGFjOTkxY2M0Y2U0YjllYTQ0ODg3ZTVjN2MwYmNlNThjODAwNzRhYjlkNGRiYWViMjg1MzFiNzczOWY1MzAnLFxuICAgICAgICAnZTBkZWRjOWIzYjJmOGRhZDRkYTFmMzJkZWMyNTMxZGY5ZWI1ZmJlYjA1OThlNGZkMWExMTdkYmE3MDNhM2MzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0NjNiM2Q5ZjY2MjYyMWZiMWI0YmU4ZmJiZTI1MjAxMjVhMjE2Y2RmYzlkYWUzZGViY2JhNDg1MGM2OTBkNDViJyxcbiAgICAgICAgJzVlZDQzMGQ3OGMyOTZjMzU0MzExNDMwNmRkODYyMmQ3YzYyMmUyN2M5NzBhMWRlMzFjYjM3N2IwMWFmNzMwN2UnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjE2ZjgwNDI0NGU0NmUyYTA5MjMyZDRhZmYzYjU5OTc2Yjk4ZmFjMTQzMjhhMmQxYTMyNDk2YjQ5OTk4ZjI0NycsXG4gICAgICAgICdjZWRhYmQ5YjgyMjAzZjdlMTNkMjA2ZmNkZjRlMzNkOTJhNmM1M2MyNmU1Y2NlMjZkNjU3OTk2MmM0ZTMxZGY2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2NhZjc1NDI3MmRjODQ1NjNiMDM1MmI3YTE0MzExYWY1NWQyNDUzMTVhY2UyN2M2NTM2OWUxNWY3MTUxZDQxZDEnLFxuICAgICAgICAnY2I0NzQ2NjBlZjM1ZjVmMmE0MWI2NDNmYTVlNDYwNTc1ZjRmYTliNzk2MjIzMmE1YzMyZjkwODMxOGEwNDQ3NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyNjAwY2E0YjI4MmNiOTg2Zjg1ZDBmMTcwOTk3OWQ4YjQ0YTA5YzA3Y2I4NmQ3YzEyNDQ5N2JjODZmMDgyMTIwJyxcbiAgICAgICAgJzQxMTliODg3NTNjMTViZDZhNjkzYjAzZmNkZGJiNDVkNWFjNmJlNzRhYjVmMGVmNDRiMGJlOTQ3NWE3ZTRiNDAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzYzNWNhNzJkN2U4NDMyYzMzOGVjNTNjZDEyMjIwYmMwMWM0ODY4NWUyNGY3ZGM4YzYwMmE3NzQ2OTk4ZTQzNScsXG4gICAgICAgICc5MWI2NDk2MDk0ODlkNjEzZDFkNWU1OTBmNzhlNmQ3NGVjZmMwNjFkNTcwNDhiYWQ5ZTc2ZjMwMmM1YjljNjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzU0ZTMyMzlmMzI1NTcwY2RiYmY0YTg3ZGVlZThhNjZiN2YyYjMzNDc5ZDQ2OGZiYzFhNTA3NDNiZjU2Y2MxOCcsXG4gICAgICAgICc2NzNmYjg2ZTViZGEzMGZiM2NkMGVkMzA0ZWE0OWEwMjNlZTMzZDAxOTdhNjk1ZDBjNWQ5ODA5M2M1MzY2ODMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTNlNmJkMTA3MWExZTk2YWZmNTc4NTljODJkNTcwZjAzMzA4MDA2NjFkMWM5NTJmOWZlMjY5NDY5MWQ5YjllOCcsXG4gICAgICAgICc1OWM5ZTBiYmEzOTRlNzZmNDBjMGFhNTgzNzlhM2NiNmE1YTIyODM5OTNlOTBjNDE2NzAwMmFmNDkyMGUzN2Y1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE4NmI0ODNkMDU2YTAzMzgyNmFlNzNkODhmNzMyOTg1YzRjY2IxZjMyYmEzNWY0YjRjYzQ3ZmRjZjA0YWE2ZWInLFxuICAgICAgICAnM2I5NTJkMzJjNjdjZjc3ZTJlMTc0NDZlMjA0MTgwYWIyMWZiODA5MDg5NTEzOGI0YTRhNzk3Zjg2ZTgwODg4YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkZjlkNzBhNmI5ODc2Y2U1NDRjOTg1NjFmNGJlNGY3MjU0NDJlNmQyYjczN2Q5YzkxYTgzMjE3MjRjZTA5NjNmJyxcbiAgICAgICAgJzU1ZWIyZGFmZDg0ZDZjY2Q1Zjg2MmI3ODVkYzM5ZDRhYjE1NzIyMjcyMGVmOWRhMjE3YjhjNDVjZjJiYTI0MTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNWVkZDVjYzIzYzUxZTg3YTQ5N2NhODE1ZDVkY2UwZjhhYjUyNTU0Zjg0OWVkODk5NWRlNjRjNWYzNGNlNzE0MycsXG4gICAgICAgICdlZmFlOWM4ZGJjMTQxMzA2NjFlOGNlYzAzMGM4OWFkMGMxM2M2NmMwZDE3YTI5MDVjZGM3MDZhYjczOTlhODY4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzI5MDc5OGMyYjY0NzY4MzBkYTEyZmUwMjI4N2U5ZTc3N2FhM2ZiYTFjMzU1YjE3YTcyMmQzNjJmODQ2MTRmYmEnLFxuICAgICAgICAnZTM4ZGE3NmRjZDQ0MDYyMTk4OGQwMGJjZjc5YWYyNWQ1YjI5YzA5NGRiMmEyMzE0NmQwMDNhZmQ0MTk0M2U3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhZjNjNDIzYTk1ZDlmNWIzMDU0NzU0ZWZhMTUwYWMzOWNkMjk1NTJmZTM2MDI1NzM2MmRmZGVjZWY0MDUzYjQ1JyxcbiAgICAgICAgJ2Y5OGEzZmQ4MzFlYjJiNzQ5YTkzYjBlNmYzNWNmYjQwYzhjZDVhYTY2N2ExNTU4MWJjMmZlZGVkNDk4ZmQ5YzYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzY2ZGJiMjRkMTM0ZTc0NWNjY2FhMjhjOTliZjI3NDkwNmJiNjZiMjZkY2Y5OGRmOGQyZmVkNTBkODg0MjQ5YScsXG4gICAgICAgICc3NDRiMTE1MmVhY2JlNWUzOGRjYzg4Nzk4MGRhMzhiODk3NTg0YTY1ZmEwNmNlZGQyYzkyNGY5N2NiYWM1OTk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzU5ZGJmNDZmOGM5NDc1OWJhMjEyNzdjMzM3ODRmNDE2NDVmN2I0NGY2YzU5NmE1OGNlOTJlNjY2MTkxYWJlM2UnLFxuICAgICAgICAnYzUzNGFkNDQxNzVmYmMzMDBmNGVhNmNlNjQ4MzA5YTA0MmNlNzM5YTc5MTk3OThjZDg1ZTIxNmM0YTMwN2Y2ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMTNhZGE5NTEwM2M0NTM3MzA1ZTY5MWU3NGU5YTRhOGRkNjQ3ZTcxMWE5NWU3M2NiNjJkYzYwMThjZmQ4N2I4JyxcbiAgICAgICAgJ2UxMzgxN2I0NGVlMTRkZTY2M2JmNGJjODA4MzQxZjMyNjk0OWUyMWE2YTc1YzI1NzA3Nzg0MTliZGFmNTczM2QnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzc1NGI0ZmEwZThhY2VkMDZkNDE2N2EyYzU5Y2NhNGNkYTE4NjljMDZlYmFkZmI2NDg4NTUwMDE1YTg4NTIyYycsXG4gICAgICAgICczMGU5M2U4NjRlNjY5ZDgyMjI0Yjk2N2MzMDIwYjhmYThkMWU0ZTM1MGI2Y2JjYzUzN2E0OGI1Nzg0MTE2M2EyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzk0OGRjYWRmNTk5MGUwNDhhYTM4NzRkNDZhYmVmOWQ3MDE4NThmOTVkZTgwNDFkMmE2ODI4Yzk5ZTIyNjI1MTknLFxuICAgICAgICAnZTQ5MWE0MjUzN2Y2ZTU5N2Q1ZDI4YTMyMjRiMWJjMjVkZjkxNTRlZmJkMmVmMWQyY2JiYTJjYWU1MzQ3ZDU3ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3OTYyNDE0NDUwYzc2YzE2ODljN2I0OGY4MjAyZWMzN2ZiMjI0Y2Y1YWMwYmZhMTU3MDMyOGE4YTNkN2M3N2FiJyxcbiAgICAgICAgJzEwMGI2MTBlYzRmZmI0NzYwZDVjMWZjMTMzZWY2ZjZiMTI1MDdhMDUxZjA0YWM1NzYwYWZhNWIyOWRiODM0MzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzUxNDA4NzgzNDk2NGI1NGIxNWIxNjA2NDRkOTE1NDg1YTE2OTc3MjI1Yjg4NDdiYjBkZDA4NTEzN2VjNDdjYScsXG4gICAgICAgICdlZjBhZmJiMjA1NjIwNTQ0OGUxNjUyYzQ4ZTgxMjdmYzYwMzllNzdjMTVjMjM3OGI3ZTdkMTVhMGRlMjkzMzExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QzY2MzMGFkNmI0ODNlNGJjNzljZTJjOWRkOGJjNTQ5OTNlOTQ3ZWI4ZGY3ODdiNDQyOTQzZDNmN2I1MjdlYWYnLFxuICAgICAgICAnOGIzNzhhMjJkODI3Mjc4ZDg5YzVlOWJlOGY5NTA4YWUzYzJhZDQ2MjkwMzU4NjMwYWZiMzRkYjA0ZWVkZTBhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNjI0ZDg0NzgwNzMyODYwY2UxYzc4ZmNiZmVmZTA4YjJiMjk4MjNkYjkxM2Y2NDkzOTc1YmEwZmY0ODQ3NjEwJyxcbiAgICAgICAgJzY4NjUxY2Y5YjZkYTkwM2UwOTE0NDQ4YzZjZDlkNGNhODk2ODc4ZjUyODJiZTRjOGNjMDZlMmE0MDQwNzg1NzUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzMzY2U4MGRhOTU1YThhMjY5MDJjOTU2MzNlNjJhOTg1MTkyNDc0YjVhZjIwN2RhNmRmN2I0ZmQ1ZmM2MWNkNCcsXG4gICAgICAgICdmNTQzNWEyYmQyYmFkZjdkNDg1YTRkOGI4ZGI5ZmNjZTNlMWVmOGUwMjAxZTQ1NzhjNTQ2NzNiYzFkYzVlYTFkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE1ZDk0NDEyNTQ5NDUwNjRjZjFhMWMzM2JiZDNiNDlmODk2NmM1MDkyMTcxZTY5OWVmMjU4ZGZhYjgxYzA0NWMnLFxuICAgICAgICAnZDU2ZWIzMGI2OTQ2M2U3MjM0ZjUxMzdiNzNiODQxNzc0MzQ4MDBiYWNlYmZjNjg1ZmMzN2JiZTllZmU0MDcwZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhMWQwZmNmMmVjOWRlNjc1YjYxMjEzNmU1Y2U3MGQyNzFjMjE0MTdjOWQyYjhhYWFhYzEzODU5OWQwNzE3OTQwJyxcbiAgICAgICAgJ2VkZDc3ZjUwYmNiNWEzY2FiMmU5MDczNzMwOTY2N2YyNjQxNDYyYTU0MDcwZjNkNTE5MjEyZDM5YzE5N2E2MjknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTIyZmJlMTVjMGFmOGNjYzU3ODBjMDczNWY4NGRiZTlhNzkwYmFkZWU4MjQ1YzA2YzdjYTM3MzMxY2IzNjk4MCcsXG4gICAgICAgICdhODU1YmFiYWQ1Y2Q2MGM4OGI0MzBhNjlmNTNhMWE3YTM4Mjg5MTU0OTY0Nzk5YmU0M2QwNmQ3N2QzMWRhMDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzExMDkxZGQ5ODYwZThlMjBlZTEzNDczYzExNTVmNWY2OTYzNWUzOTQ3MDRlYWE3NDAwOTQ1MjI0NmNmYTliMycsXG4gICAgICAgICc2NmRiNjU2Zjg3ZDFmMDRmZmZkMWYwNDc4OGMwNjgzMDg3MWVjNWE2NGZlZWU2ODViZDgwZjBiMTI4NmQ4Mzc0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM0YzFmZDA0ZDMwMWJlODliMzFjMDQ0MmQzZTZhYzI0ODgzOTI4YjQ1YTkzNDA3ODE4NjdkNDIzMmVjMmRiZGYnLFxuICAgICAgICAnOTQxNDY4NWU5N2IxYjU5NTRiZDQ2ZjczMDE3NDEzNmQ1N2YxY2VlYjQ4NzQ0M2RjNTMyMTg1N2JhNzNhYmVlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YyMTllYTVkNmI1NDcwMWMxYzE0ZGU1YjU1N2ViNDJhOGQxM2YzYWJiY2QwOGFmZmNjMmE1ZTZiMDQ5YjhkNjMnLFxuICAgICAgICAnNGNiOTU5NTdlODNkNDBiMGY3M2FmNDU0NGNjY2Y2YjFmNGIwOGQzYzA3YjI3ZmI4ZDhjMjk2MmE0MDA3NjZkMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkN2I4NzQwZjc0YThmYmFhYjFmNjgzZGI4ZjQ1ZGUyNjU0M2E1NDkwYmNhNjI3MDg3MjM2OTEyNDY5YTBiNDQ4JyxcbiAgICAgICAgJ2ZhNzc5NjgxMjhkOWM5MmVlMTAxMGYzMzdhZDQ3MTdlZmYxNWRiNWVkM2MwNDliMzQxMWUwMzE1ZWFhNDU5M2InXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzJkMzFjMjIyZjhmNmYwZWY4NmY3Yzk4ZDNhMzMzNWVhZDViY2QzMmFiZGQ5NDI4OWZlNGQzMDkxYWE4MjRiZicsXG4gICAgICAgICc1ZjMwMzJmNTg5MjE1NmUzOWNjZDNkNzkxNWI5ZTFkYTJlNmRhYzllNmYyNmU5NjExMThkMTRiODQ2MmUxNjYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc0NjFmMzcxOTE0YWIzMjY3MTA0NWExNTVkOTgzMWVhODc5M2Q3N2NkNTk1OTJjNDM0MGY4NmNiYzE4MzQ3YjUnLFxuICAgICAgICAnOGVjMGJhMjM4Yjk2YmVjMGNiZGRkY2FlMGFhNDQyNTQyZWVlMWZmNTBjOTg2ZWE2YjM5ODQ3YjNjYzA5MmZmNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlZTA3OWFkYjFkZjE4NjAwNzQzNTZhMjVhYTM4MjA2YTZkNzE2YjJjM2U2NzQ1M2QyODc2OThiYWQ3YjJiMmQ2JyxcbiAgICAgICAgJzhkYzI0MTJhYWZlM2JlNWM0YzVmMzdlMGVjYzVmOWY2YTQ0Njk4OWFmMDRjNGUyNWViYWFjNDc5ZWMxYzhjMWUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTZlYzkzZTQ0N2VjODNmMDQ2N2IxODMwMmVlNjIwZjdlNjVkZTMzMTg3NGM5ZGM3MmJmZDg2MTZiYTlkYTZiNScsXG4gICAgICAgICc1ZTQ2MzExNTBlNjJmYjQwZDBlOGMyYTdjYTU4MDRhMzlkNTgxODZhNTBlNDk3MTM5NjI2Nzc4ZTI1YjA2NzRkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhYTVmOTgwYzI0NWY2ZjAzODk3ODI5MGFmYTcwYjZiZDg4NTU4OTdmOThiNmFhNDg1Yjk2MDY1ZDUzN2JkOTknLFxuICAgICAgICAnZjY1ZjVkM2UyOTJjMmUwODE5YTUyODM5MWM5OTQ2MjRkNzg0ODY5ZDdlNmVhNjdmYjE4MDQxMDI0ZWRjMDdkYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3OGM5NDA3NTQ0YWMxMzI2OTJlZTE5MTBhMDI0Mzk5NThhZTA0ODc3MTUxMzQyZWE5NmM0YjZiMzVhNDlmNTEnLFxuICAgICAgICAnZjNlMDMxOTE2OWViOWI4NWQ1NDA0Nzk1NTM5YTVlNjhmYTFmYmQ1ODNjMDY0ZDI0NjJiNjc1ZjE5NGEzZGRiNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0OTRmNGJlMjE5YTFhNzcwMTZkY2Q4Mzg0MzFhZWEwMDAxY2RjOGFlN2E2ZmM2ODg3MjY1NzhkOTcwMjg1N2E1JyxcbiAgICAgICAgJzQyMjQyYTk2OTI4M2E1ZjMzOWJhN2YwNzVlMzZiYTJhZjkyNWNlMzBkNzY3ZWQ2ZTU1ZjRiMDMxODgwZDU2MmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTU5OGE4MDMwZGE2ZDg2YzZiYzdmMmY1MTQ0ZWE1NDlkMjgyMTFlYTU4ZmFhNzBlYmY0YzFlNjY1YzFmZTliNScsXG4gICAgICAgICcyMDRiNWQ2Zjg0ODIyYzMwN2U0YjRhNzE0MDczN2FlYzIzZmM2M2I2NWIzNWY4NmExMDAyNmRiZDJkODY0ZTZiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M0MTkxNjM2NWFiYjJiNWQwOTE5MmY1ZjJkYmVhZmVjMjA4ZjAyMGYxMjU3MGExODRkYmFkYzNlNTg1OTU5OTcnLFxuICAgICAgICAnNGYxNDM1MWQwMDg3ZWZhNDlkMjQ1YjMyODk4NDk4OWQ1Y2FmOTQ1MGYzNGJmYzBlZDE2ZTk2YjU4ZmE5OTEzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg0MWQ2MDYzYTU4NmZhNDc1YTcyNDYwNGRhMDNiYzViOTJhMmUwZDJlMGEzNmFjZmU0YzczYTU1MTQ3NDI4ODEnLFxuICAgICAgICAnNzM4NjdmNTljMDY1OWU4MTkwNGY5YTFjNzU0MzY5OGU2MjU2MmQ2NzQ0YzE2OWNlN2EzNmRlMDFhOGQ2MTU0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzVlOTViYjM5OWE2OTcxZDM3NjAyNjk0N2Y4OWJkZTJmMjgyYjMzODEwOTI4YmU0ZGVkMTEyYWM0ZDcwZTIwZDUnLFxuICAgICAgICAnMzlmMjNmMzY2ODA5MDg1YmVlYmZjNzExODEzMTM3NzVhOTljOWFlZDdkOGJhMzhiMTYxMzg0Yzc0NjAxMjg2NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNmU0NjQxYTUzOTQ4ZmQ0NzZjMzlmOGE5OWZkOTc0ZTVlYzA3NTY0YjUzMTVkOGJmOTk0NzFiY2EwZWYyZjY2JyxcbiAgICAgICAgJ2QyNDI0YjFiMWFiZTRlYjgxNjQyMjdiMDg1YzlhYTk0NTZlYTEzNDkzZmQ1NjNlMDZmZDUxY2Y1Njk0Yzc4ZmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzM2NTgxZWE3YmZiYmIyOTBjMTkxYTJmNTA3YTQxY2Y1NjQzODQyMTcwZTkxNGZhZWFiMjdjMmM1NzlmNzI2JyxcbiAgICAgICAgJ2VhZDEyMTY4NTk1ZmUxYmU5OTI1MjEyOWI2ZTU2YjMzOTFmN2FiMTQxMGNkMWUwZWYzZGNkY2FiZDJmZGEyMjQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGFiODk4MTZkYWRmZDZiNmExZjI2MzRmY2YwMGVjODQwMzc4MTAyNWVkNjg5MGM0ODQ5NzQyNzA2YmQ0M2VkZScsXG4gICAgICAgICc2ZmRjZWYwOWYyZjZkMGEwNDRlNjU0YWVmNjI0MTM2ZjUwM2Q0NTljM2U4OTg0NTg1OGE0N2E5MTI5Y2RkMjRlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzFlMzNmMWE3NDZjOWM1Nzc4MTMzMzQ0ZDkyOTlmY2FhMjBiMDkzOGU4YWNmZjI1NDRiYjQwMjg0YjhjNWZiOTQnLFxuICAgICAgICAnNjA2NjAyNTdkZDExYjNhYTljOGVkNjE4ZDI0ZWRmZjIzMDZkMzIwZjFkMDMwMTBlMzNhN2QyMDU3ZjNiM2I2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg1YjdjMWRjYjNjZWMxYjdlZTdmMzBkZWQ3OWRkMjBhMGVkMWY0Y2MxOGNiY2ZjZmE0MTAzNjFmZDhmMDhmMzEnLFxuICAgICAgICAnM2Q5OGE5Y2RkMDI2ZGQ0M2YzOTA0OGYyNWE4ODQ3ZjRmY2FmYWQxODk1ZDdhNjMzYzZmZWQzYzM1ZTk5OTUxMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyOWRmOWZiZDhkOWU0NjUwOTI3NWY0YjEyNWQ2ZDQ1ZDdmYmU5YTNiODc4YTdhZjg3MmEyODAwNjYxYWM1ZjUxJyxcbiAgICAgICAgJ2I0YzRmZTk5Yzc3NWE2MDZlMmQ4ODYyMTc5MTM5ZmZkYTYxZGM4NjFjMDE5ZTU1Y2QyODc2ZWIyYTI3ZDg0YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhMGIxY2FlMDZiMGE4NDdhM2ZlYTZlNjcxYWFmOGFkZmRmZTU4Y2EyZjc2ODEwNWM4MDgyYjJlNDQ5ZmNlMjUyJyxcbiAgICAgICAgJ2FlNDM0MTAyZWRkZTA5NThlYzRiMTlkOTE3YTZhMjhlNmI3MmRhMTgzNGFmZjBlNjUwZjA0OTUwM2EyOTZjZjInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNGU4Y2VhZmI5YjNlOWExMzZkYzdmZjY3ZTg0MDI5NWI0OTlkZmIzYjIxMzNlNGJhMTEzZjJlNGMwZTEyMWU1JyxcbiAgICAgICAgJ2NmMjE3NDExOGM4YjZkN2E0YjQ4ZjZkNTM0Y2U1Yzc5NDIyYzA4NmE2MzQ2MDUwMmI4MjdjZTYyYTMyNjY4M2MnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDI0YTQ0ZTA0N2UxOWI2ZjVhZmI4MWM3Y2EyZjY5MDgwYTUwNzY2ODlhMDEwOTE5ZjQyNzI1YzJiNzg5YTMzYicsXG4gICAgICAgICc2ZmI4ZDU1OTFiNDY2ZjhmYzYzZGI1MGYxYzBmMWM2OTAxM2Y5OTY4ODdiODI0NGQyY2RlYzQxN2FmZWE4ZmEzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhMDE2MDZhN2E2YzljZGQyNDlmZGZjZmFjYjk5NTg0MDAxZWRkMjhhYmJhYjc3YjUxMDRlOThlOGUzYjM1ZDQnLFxuICAgICAgICAnMzIyYWY0OTA4YzczMTJiMGNmYmZlMzY5ZjdhN2IzY2RiN2Q0NDk0YmMyODIzNzAwY2ZkNjUyMTg4YTNlYTk4ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhZjhhZGRiZjJiNjYxYzhhNmM2MzI4NjU1ZWI5NjY1MTI1MjAwN2Q4YzVlYTMxYmU0YWQxOTZkZThjZTIxMzFmJyxcbiAgICAgICAgJzY3NDllNjdjMDI5Yjg1ZjUyYTAzNGVhZmQwOTY4MzZiMjUyMDgxODY4MGUyNmFjOGYzZGZiY2RiNzE3NDk3MDAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTNhZTE5NzQ1NjZjYTA2Y2M1MTZkNDdlMGZiMTY1YTY3NGEzZGFiY2ZjYTE1ZTcyMmYwZTM0NTBmNDU4ODknLFxuICAgICAgICAnMmFlYWJlN2U0NTMxNTEwMTE2MjE3ZjA3YmY0ZDA3MzAwZGU5N2U0ODc0ZjgxZjUzMzQyMGE3MmVlYjBiZDZhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1OTFlZTM1NTMxM2Q5OTcyMWNmNjk5M2ZmZWQxZTNlMzAxOTkzZmYzZWQyNTg4MDIwNzVlYThjZWQzOTdlMjQ2JyxcbiAgICAgICAgJ2IwZWE1NThhMTEzYzMwYmVhNjBmYzQ3NzU0NjBjNzkwMWZmMGIwNTNkMjVjYTJiZGVlZTk4ZjFhNGJlNWQxOTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTEzOTZkNTVmZGE1NGM0OWYxOWFhOTczMThkOGRhNjFmYTg1ODRlNDdiMDg0OTQ1MDc3Y2YwMzI1NWI1Mjk4NCcsXG4gICAgICAgICc5OThjNzRhOGNkNDVhYzAxMjg5ZDU4MzNhN2JlYjQ3NDRmZjUzNmIwMWIyNTdiZTRjNTc2N2JlYTkzZWE1N2E0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzNjNWQyYTFiYTM5YzVhMTc5MDAwMDczOGM5ZTBjNDBiOGRjZGZkNTQ2ODc1NGI2NDA1NTQwMTU3ZTAxN2FhN2EnLFxuICAgICAgICAnYjIyODQyNzk5OTVhMzRlMmY5ZDRkZTczOTZmYzE4YjgwZjliOGI5ZmRkMjcwZjY2NjFmNzljYTRjODFiZDI1NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjYzg3MDRiOGE2MGEwZGVmYTNhOTlhNzI5OWYyZTljM2ZiYzM5NWFmYjA0YWMwNzg0MjVlZjhhMTc5M2NjMDMwJyxcbiAgICAgICAgJ2JkZDQ2MDM5ZmVlZDE3ODgxZDFlMDg2MmRiMzQ3ZjhjZjM5NWI3NGZjNGJjZGM0ZTk0MGI3NGUzYWMxZjFiMTMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzUzM2U0ZjdlYTg1NTVhYWNkOTc3N2FjNWNhZDI5Yjk3ZGQ0ZGVmY2NjNTNlZTdlYTIwNDExOWIyODg5YjE5NycsXG4gICAgICAgICc2ZjBhMjU2YmM1ZWZkZjQyOWEyZmI2MjQyZjFhNDNhMmQ5YjkyNWJiNGE0YjNhMjZiYjhlMGY0NWViNTk2MDk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2MxNGY4ZjJjY2IyN2Q2ZjEwOWY2ZDA4ZDAzY2M5NmE2OWJhOGMzNGVlYzA3YmJjZjU2NmQ0OGUzM2RhNjU5MycsXG4gICAgICAgICdjMzU5ZDY5MjNiYjM5OGY3ZmQ0NDczZTE2ZmUxYzI4NDc1Yjc0MGRkMDk4MDc1ZTZjMGU4NjQ5MTEzZGMzYTM4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E2Y2JjMzA0NmJjNmE0NTBiYWMyNDc4OWZhMTcxMTVhNGM5NzM5ZWQ3NWY4ZjIxY2U0NDFmNzJlMGI5MGU2ZWYnLFxuICAgICAgICAnMjFhZTdmNDY4MGU4ODliYjEzMDYxOWUyYzBmOTVhMzYwY2ViNTczYzcwNjAzMTM5ODYyYWZkNjE3ZmE5YjlmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM0N2Q2ZDlhMDJjNDg5MjdlYmZiODZjMTM1OWIxY2FmMTMwYTNjMDI2N2QxMWNlNjM0NGIzOWY5OWQ0M2NjMzgnLFxuICAgICAgICAnNjBlYTdmNjFhMzUzNTI0ZDFjOTg3ZjZlY2VjOTJmMDg2ZDU2NWFiNjg3ODcwY2IxMjY4OWZmMWUzMWM3NDQ0OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYTY1NDVkMjE4MWRiOGQ5ODNmN2RjYjM3NWVmNTg2NmQ0N2M2N2IxYmYzMWM4Y2Y4NTVlZjc0MzdiNzI2NTZhJyxcbiAgICAgICAgJzQ5Yjk2NzE1YWI2ODc4YTc5ZTc4ZjA3Y2U1NjgwYzVkNjY3MzA1MWI0OTM1YmQ4OTdmZWE4MjRiNzdkYzIwOGEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzQwNzQ3Y2M5ZDAxMmNiMWExM2I4MTQ4MzA5YzZkZTdlYzI1ZDY5NDVkNjU3MTQ2YjlkNTk5NGI4ZmViMTExMScsXG4gICAgICAgICc1Y2E1NjA3NTNiZTJhMTJmYzZkZTZjYWYyY2I0ODk1NjVkYjkzNjE1NmI5NTE0ZTFiYjVlODMwMzdlMGZhMmQ0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRlNDJjOGVjODJjOTk3OThjY2YzYTYxMGJlODcwZTc4MzM4YzdmNzEzMzQ4YmQzNGM4MjAzZWY0MDM3ZjM1MDInLFxuICAgICAgICAnNzU3MWQ3NGVlNWUwZmI5MmE3YThiMzNhMDc3ODMzNDFhNTQ5MjE0NGNjNTRiY2M0MGE5NDQ3MzY5MzYwNjQzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNzc1YWI3MDg5YmM2YWY4MjNhYmEyZTFhZjcwYjIzNmQyNTFjYWRiMGM4Njc0MzI4NzUyMmExYjNiMGRlZGVhJyxcbiAgICAgICAgJ2JlNTJkMTA3YmNmYTA5ZDhiY2I5NzM2YTgyOGNmYTdmYWM4ZGIxN2JmN2E3NmEyYzQyYWQ5NjE0MDkwMThjZjcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnY2VlMzFjYmY3ZTM0ZWMzNzlkOTRmYjgxNGQzZDc3NWFkOTU0NTk1ZDEzMTRiYTg4NDY5NTllM2U4MmY3NGUyNicsXG4gICAgICAgICc4ZmQ2NGExNGMwNmI1ODljMjZiOTQ3YWUyYmNmNmJmYTAxNDllZjBiZTE0ZWQ0ZDgwZjQ0OGEwMWM0M2IxYzZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2I0ZjllYWVhMDliNjkxNzYxOWY2ZWE2YTRlYjU0NjRlZmRkYjU4ZmQ0NWIxZWJlZmNkYzFhMDFkMDhiNDc5ODYnLFxuICAgICAgICAnMzllNWM5OTI1YjVhNTRiMDc0MzNhNGYxOGM2MTcyNmY4YmIxMzFjMDEyY2E1NDJlYjI0YThhYzA3MjAwNjgyYSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNDI2M2RmYzNkMmRmOTIzYTAxNzlhNDg5NjZkMzBjZTg0ZTI1MTVhZmMzZGNjYzFiNzc5MDc3OTJlYmNjNjBlJyxcbiAgICAgICAgJzYyZGZhZjA3YTBmNzhmZWIzMGUzMGQ2Mjk1ODUzY2UxODllMTI3NzYwYWQ2Y2Y3ZmFlMTY0ZTEyMmEyMDhkNTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDg0NTc1MjQ4MjBmYTY1YTRmOGQzNWViNjkzMDg1N2MwMDMyYWNjMGE0YTJkZTQyMjIzM2VlZGE4OTc2MTJjNCcsXG4gICAgICAgICcyNWE3NDhhYjM2Nzk3OWQ5ODczM2MzOGExZmExYzJlN2RjNmNjMDdkYjJkNjBhOWFlN2E3NmFhYTQ5YmQwZjc3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RmZWVlZjE4ODExMDFmMmNiMTE2NDRmM2EyYWZkZmMyMDQ1ZTE5OTE5MTUyOTIzZjM2N2ExNzY3YzExY2NlZGEnLFxuICAgICAgICAnZWNmYjcwNTZjZjFkZTA0MmY5NDIwYmFiMzk2NzkzYzBjMzkwYmRlNzRiNGJiZGZmMTZhODNhZTA5YTlhNzUxNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2ZDdlZjZiMTc1NDNmODM3M2M1NzNmNDRlMWYzODk4MzVkODliY2JjNjA2MmNlZDM2YzgyZGY4M2I4ZmFlODU5JyxcbiAgICAgICAgJ2NkNDUwZWMzMzU0Mzg5ODZkZmVmYTEwYzU3ZmVhOWJjYzUyMWEwOTU5YjJkODBiYmY3NGIxOTBkY2E3MTJkMTAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTc1NjA1ZDU5MTAyYTVhMjY4NDUwMGQzYjk5MWYyZTNmM2M4OGI5MzIyNTU0NzAzNWFmMjVhZjY2ZTA0NTQxZicsXG4gICAgICAgICdmNWM1NDc1NGE4ZjcxZWU1NDBiOWI0ODcyODQ3M2UzMTRmNzI5YWM1MzA4YjA2OTM4MzYwOTkwZTJiZmFkMTI1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ViOTg2NjBmNGM0ZGZhYTA2YTJiZTQ1M2Q1MDIwYmM5OWEwYzJlNjBhYmUzODg0NTdkZDQzZmVmYjFlZDYyMGMnLFxuICAgICAgICAnNmNiOWE4ODc2ZDljYjg1MjA2MDlhZjNhZGQyNmNkMjBhMGE3Y2Q4YTk0MTExMzFjZTg1ZjQ0MTAwMDk5MjIzZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxM2U4N2IwMjdkODUxNGQzNTkzOWYyZTY4OTJiMTk5MjIxNTQ1OTY5NDE4ODgzMzZkYzM1NjNlM2I4ZGJhOTQyJyxcbiAgICAgICAgJ2ZlZjVhM2M2ODA1OWE2ZGVjNWQ2MjQxMTRiZjFlOTFhYWMyYjlkYTU2OGQ2YWJlYjI1NzBkNTU2NDZiOGFkZjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWUxNjMwMjZlOWZkNmZlMDE3YzM4ZjA2YTViZTZmYzEyNTQyNGIzNzFjZTI3MDhlN2JmNDQ5MTY5MWU1NzY0YScsXG4gICAgICAgICcxYWNiMjUwZjI1NWRkNjFjNDNkOTRjY2M2NzBkMGY1OGY0OWFlM2ZhMTViOTY2MjNlNTQzMGRhMGFkNmM2MmIyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2IyNjhmNWVmOWFkNTFlNGQ3OGRlM2E3NTBjMmRjODliMWU2MjZkNDM1MDU4Njc5OTk5MzJlNWRiMzNhZjNkODAnLFxuICAgICAgICAnNWYzMTBkNGIzYzk5YjllYmIxOWY3N2Q0MWMxZGVlMDE4Y2YwZDM0ZmQ0MTkxNjE0MDAzZTk0NWExMjE2ZTQyMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZjA3ZjMxMThhOWRmMDM1ZTlmYWQ4NWViNmM3YmZlNDJiMDJmMDFjYTk5Y2VlYTNiZjdmZmRiYTkzYzQ3NTBkJyxcbiAgICAgICAgJzQzODEzNmQ2MDNlODU4YTNhNWM0NDBjMzhlY2NiYWRkYzFkMjk0MjExNGUyZWRkZDQ3NDBkMDk4Y2VkMWYwZDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGQ4Yjk4NTVjN2MwNTJhMzQxNDZmZDIwZmZiNjU4YmVhNGI5ZjY5ZTBkODI1ZWJlYzE2ZThjM2NlMmI1MjZhMScsXG4gICAgICAgICdjZGI1NTllZWRjMmQ3OWY5MjZiYWY0NGZiODRlYTRkNDRiY2Y1MGZlZTUxZDdjZWIzMGUyZTdmNDYzMDM2NzU4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzUyZGIwYjUzODRkZmJmMDViZmE5ZDQ3MmQ3YWUyNmRmZTRiODUxY2VjYTkxYjFlYmE1NDI2MzE4MGRhMzJiNjMnLFxuICAgICAgICAnYzNiOTk3ZDA1MGVlNWQ0MjNlYmFmNjZhNmRiOWY1N2IzMTgwYzkwMjg3NTY3OWRlOTI0YjY5ZDg0YTdiMzc1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U2MmY5NDkwZDNkNTFkYTYzOTVlZmQyNGU4MDkxOWNjN2QwZjI5YzNmM2ZhNDhjNmZmZjU0M2JlY2JkNDMzNTInLFxuICAgICAgICAnNmQ4OWFkN2JhNDg3NmIwYjIyYzJjYTI4MGM2ODI4NjJmMzQyYzg1OTFmMWRhZjUxNzBlMDdiZmQ5Y2NhZmE3ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3ZjMwZWEyNDc2YjM5OWI0OTU3NTA5Yzg4Zjc3ZDAxOTFhZmEyZmY1Y2I3YjE0ZmQ2ZDhlN2Q2NWFhYWIxMTkzJyxcbiAgICAgICAgJ2NhNWVmN2Q0YjIzMWM5NGMzYjE1Mzg5YTVmNjMxMWU5ZGFmZjdiYjY3YjEwM2U5ODgwZWY0YmZmNjM3YWNhZWMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTA5OGZmMWUxZDlmMTRmYjQ2YTIxMGZhZGE2YzkwM2ZlZjBmYjdiNGExZGQxZDlhYzYwYTAzNjE4MDBiN2EwMCcsXG4gICAgICAgICc5NzMxMTQxZDgxZmM4ZjgwODRkMzdjNmU3NTQyMDA2YjNlZTFiNDBkNjBkZmU1MzYyYTViMTMyZmQxN2RkYzAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzJiNzhjN2RlOWVlNTEyYTcyODk1YmU2YjljYmVmYTZlMmYzYzRjY2NlNDQ1Yzk2YjlmMmM4MWUyNzc4YWQ1OCcsXG4gICAgICAgICdlZTE4NDlmNTEzZGY3MWUzMmVmYzM4OTZlZTI4MjYwYzczYmI4MDU0N2FlMjI3NWJhNDk3MjM3Nzk0Yzg3NTNjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UyY2I3NGZkZGM4ZTlmYmNkMDc2ZWVmMmE3YzcyYjBjZTM3ZDUwZjA4MjY5ZGZjMDc0YjU4MTU1MDU0N2E0ZjcnLFxuICAgICAgICAnZDNhYTJlZDcxYzlkZDIyNDdhNjJkZjA2MjczNmViMGJhZGRlYTllMzYxMjJkMmJlODY0MWFiY2IwMDVjYzRhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NDM4NDQ3NTY2ZDRkN2JlZGFkYzI5OTQ5NmFiMzU3NDI2MDA5YTM1ZjIzNWNiMTQxYmUwZDk5Y2QxMGFlM2E4JyxcbiAgICAgICAgJ2M0ZTEwMjA5MTY5ODBhNGRhNWQwMWFjNWU2YWQzMzA3MzRlZjBkNzkwNjYzMWM0ZjIzOTA0MjZiMmVkZDc5MWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDE2MmQ0ODhiODk0MDIwMzliNTg0YzZmYzZjMzA4ODcwNTg3ZDljNDZmNjYwYjg3OGFiNjVjODJjNzExZDY3ZScsXG4gICAgICAgICc2NzE2M2U5MDMyMzYyODlmNzc2ZjIyYzI1ZmI4YTNhZmMxNzMyZjJiODRiNGU5NWRiZGE0N2FlNWEwODUyNjQ5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzNmYWQzZmE4NGNhZjBmMzRmMGY4OWJmZDJkY2Y1NGZjMTc1ZDc2N2FlYzNlNTA2ODRmM2JhNGE0YmY1ZjY4M2QnLFxuICAgICAgICAnY2QxYmM3Y2I2Y2M0MDdiYjJmMGNhNjQ3YzcxOGE3MzBjZjcxODcyZTdkMGQyYTUzZmEyMGVmY2RmZTYxODI2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzY3NGYyNjAwYTMwMDdhMDA1NjhjMWE3Y2UwNWQwODE2YzFmYjg0YmYxMzcwNzk4ZjFjNjk1MzJmYWViMWE4NmInLFxuICAgICAgICAnMjk5ZDIxZjk0MTNmMzNiM2VkZjQzYjI1NzAwNDU4MGI3MGRiNTdkYTBiMTgyMjU5ZTA5ZWVjYzY5ZTBkMzhhNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkMzJmNGRhNTRhZGU3NGFiYjgxYjgxNWFkMWZiM2IyNjNkODJkNmM2OTI3MTRiY2ZmODdkMjliZDVlZTlmMDhmJyxcbiAgICAgICAgJ2Y5NDI5ZTczOGI4ZTUzYjk2OGU5OTAxNmMwNTk3MDc3ODJlMTRmNDUzNTM1OWQ1ODJmYzQxNjkxMGIzZWVhODcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzBlNGU2NzA0MzUzODU1NTZlNTkzNjU3MTM1ODQ1ZDM2ZmJiNjkzMWY3MmIwOGNiMWVkOTU0ZjFlM2NlM2ZmNicsXG4gICAgICAgICc0NjJmOWJjZTYxOTg5ODYzODQ5OTM1MDExM2JiYzliMTBhODc4ZDM1ZGE3MDc0MGRjNjk1YTU1OWViODhkYjdiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2JlMjA2MjAwM2M1MWNjMzAwNDY4MjkwNDMzMGU0ZGVlN2YzZGNkMTBiMDFlNTgwYmYxOTcxYjA0ZDRjYWQyOTcnLFxuICAgICAgICAnNjIxODhiYzQ5ZDYxZTU0Mjg1NzNkNDhhNzRlMWM2NTViMWM2MTA5MDkwNTY4MmEwZDU1NThlZDcyZGNjYjliYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5MzE0NDQyM2FjZTM0NTFlZDI5ZTBmYjlhYzJhZjIxMWNiNmU4NGE2MDFkZjU5OTNjNDE5ODU5ZmZmNWRmMDRhJyxcbiAgICAgICAgJzdjMTBkZmIxNjRjMzQyNWY1YzcxYTNmOWQ3OTkyMDM4ZjEwNjUyMjRmNzJiYjlkMWQ5MDJhNmQxMzAzN2I0N2MnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjAxNWY4MDQ0ZjVmY2JkY2YyMWNhMjZkNmMzNGZiODE5NzgyOTIwNWM3YjdkMmE3Y2I2NjQxOGMxNTdiMTEyYycsXG4gICAgICAgICdhYjhjMWUwODZkMDRlODEzNzQ0YTY1NWIyZGY4ZDVmODNiM2NkYzZmYWEzMDg4YzFkM2FlYTE0NTRlM2ExZDVmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q1ZTllMWRhNjQ5ZDk3ZDg5ZTQ4NjgxMTdhNDY1YTNhNGY4YTE4ZGU1N2ExNDBkMzZiM2YyYWYzNDFhMjFiNTInLFxuICAgICAgICAnNGNiMDQ0MzdmMzkxZWQ3MzExMWExM2NjMWQ0ZGQwZGIxNjkzNDY1YzIyNDA0ODBkODk1NWU4NTkyZjI3NDQ3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkM2FlNDEwNDdkZDdjYTA2NWRiZjhlZDc3Yjk5MjQzOTk4MzAwNWNkNzJlMTZkNmY5OTZhNTMxNmQzNjk2NmJiJyxcbiAgICAgICAgJ2JkMWFlYjIxYWQyMmViYjIyYTEwZjAzMDM0MTdjNmQ5NjRmOGNkZDdkZjBhY2E2MTRiMTBkYzE0ZDEyNWFjNDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDYzZTI3NjNkODg1Zjk1OGZjNjZjZGQyMjgwMGYwYTQ4NzE5N2QwYTgyZTM3N2I0OWY4MGFmODdjODk3YjA2NScsXG4gICAgICAgICdiZmVmYWNkYjBlNWQwZmQ3ZGYzYTMxMWE5NGRlMDYyYjI2YjgwYzYxZmJjOTc1MDhiNzk5OTI2NzFlZjdjYTdmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc5ODVmZGZkMTI3YzA1NjdjNmY1M2VjMWJiNjNlYzMxNThlNTk3YzQwYmZlNzQ3YzgzY2RkZmM5MTA2NDE5MTcnLFxuICAgICAgICAnNjAzYzEyZGFmM2Q5ODYyZWYyYjI1ZmUxZGUyODlhZWQyNGVkMjkxZTBlYzY3MDg3MDNhNWJkNTY3ZjMyZWQwMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NGExYWQ2YjVmNzZlMzlkYjJkZDI0OTQxMGVhYzdmOTllNzRjNTljYjgzZDJkMGVkNWZmMTU0M2RhNzcwM2U5JyxcbiAgICAgICAgJ2NjNjE1N2VmMThjOWM2M2NkNjE5M2Q4MzYzMWJiZWEwMDkzZTA5Njg5NDJlOGMzM2Q1NzM3ZmQ3OTBlMGRiMDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzA2ODJhNTA3MDMzNzVmNjAyZDQxNjY2NGJhMTliN2ZjOWJhYjQyYzcyNzQ3NDYzYTcxZDA4OTZiMjJmNmRhMycsXG4gICAgICAgICc1NTNlMDRmNmIwMThiNGZhNmM4ZjM5ZTdmMzExZDMxNzYyOTBkMGUwZjE5Y2E3M2YxNzcxNGQ5OTc3YTIyZmY4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzllMjE1OGYwZDdjMGQ1ZjI2YzM3OTFlZmVmYTc5NTk3NjU0ZTdhMmIyNDY0ZjUyYjFlZTZjMTM0Nzc2OWVmNTcnLFxuICAgICAgICAnNzEyZmNkZDFiOTA1M2YwOTAwM2EzNDgxZmE3NzYyZTlmZmQ3YzhlZjM1YTM4NTA5ZTJmYmYyNjI5MDA4MzczJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE3NmUyNjk4OWE0M2M5Y2ZlYmE0MDI5YzIwMjUzOGMyODE3MmU1NjZlM2M0ZmNlNzMyMjg1N2YzYmUzMjdkNjYnLFxuICAgICAgICAnZWQ4Y2M5ZDA0YjI5ZWI4NzdkMjcwYjQ4NzhkYzQzYzE5YWVmZDMxZjRlZWUwOWVlN2I0NzgzNGMxZmE0YjFjMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NWQ0NmVmZWEzNzcxZTZlNjhhYmI4OWExM2FkNzQ3ZWNmMTg5MjM5M2RmYzRmMWI3MDA0Nzg4YzUwMzc0ZGE4JyxcbiAgICAgICAgJzk4NTIzOTBhOTk1MDc2NzlmZDBiODZmZDJiMzlhODY4ZDdlZmMyMjE1MTM0NmUxYTNjYTQ3MjY1ODZhNmJlZDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODA5YTIwYzY3ZDY0OTAwZmZiNjk4YzRjODI1ZjZkNWYyMzEwZmIwNDUxYzg2OTM0NWI3MzE5ZjY0NTYwNTcyMScsXG4gICAgICAgICc5ZTk5NDk4MGQ5OTE3ZTIyYjc2YjA2MTkyN2ZhMDQxNDNkMDk2Y2NjNTQ5NjNlNmE1ZWJmYTVmM2Y4ZTI4NmMxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzFiMzg5MDNhNDNmN2YxMTRlZDQ1MDBiNGVhYzcwODNmZGVmZWNlMWNmMjljNjM1MjhkNTYzNDQ2Zjk3MmMxODAnLFxuICAgICAgICAnNDAzNmVkYzkzMWE2MGFlODg5MzUzZjc3ZmQ1M2RlNGEyNzA4YjI2YjZmNWRhNzJhZDMzOTQxMTlkYWY0MDhmOSdcbiAgICAgIF1cbiAgICBdXG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgSG1hY0RSQkcgPSByZXF1aXJlKCdobWFjLWRyYmcnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi4vY3VydmVzJyk7XG52YXIgcmFuZCA9IHJlcXVpcmUoJ2Jyb3JhbmQnKTtcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbnZhciBLZXlQYWlyID0gcmVxdWlyZSgnLi9rZXknKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpO1xuXG5mdW5jdGlvbiBFQyhvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFQykpXG4gICAgcmV0dXJuIG5ldyBFQyhvcHRpb25zKTtcblxuICAvLyBTaG9ydGN1dCBgZWxsaXB0aWMuZWMoY3VydmUtbmFtZSlgXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICBhc3NlcnQoY3VydmVzLmhhc093blByb3BlcnR5KG9wdGlvbnMpLCAnVW5rbm93biBjdXJ2ZSAnICsgb3B0aW9ucyk7XG5cbiAgICBvcHRpb25zID0gY3VydmVzW29wdGlvbnNdO1xuICB9XG5cbiAgLy8gU2hvcnRjdXQgZm9yIGBlbGxpcHRpYy5lYyhlbGxpcHRpYy5jdXJ2ZXMuY3VydmVOYW1lKWBcbiAgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBjdXJ2ZXMuUHJlc2V0Q3VydmUpXG4gICAgb3B0aW9ucyA9IHsgY3VydmU6IG9wdGlvbnMgfTtcblxuICB0aGlzLmN1cnZlID0gb3B0aW9ucy5jdXJ2ZS5jdXJ2ZTtcbiAgdGhpcy5uID0gdGhpcy5jdXJ2ZS5uO1xuICB0aGlzLm5oID0gdGhpcy5uLnVzaHJuKDEpO1xuICB0aGlzLmcgPSB0aGlzLmN1cnZlLmc7XG5cbiAgLy8gUG9pbnQgb24gY3VydmVcbiAgdGhpcy5nID0gb3B0aW9ucy5jdXJ2ZS5nO1xuICB0aGlzLmcucHJlY29tcHV0ZShvcHRpb25zLmN1cnZlLm4uYml0TGVuZ3RoKCkgKyAxKTtcblxuICAvLyBIYXNoIGZvciBmdW5jdGlvbiBmb3IgRFJCR1xuICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2ggfHwgb3B0aW9ucy5jdXJ2ZS5oYXNoO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFQztcblxuRUMucHJvdG90eXBlLmtleVBhaXIgPSBmdW5jdGlvbiBrZXlQYWlyKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBLZXlQYWlyKHRoaXMsIG9wdGlvbnMpO1xufTtcblxuRUMucHJvdG90eXBlLmtleUZyb21Qcml2YXRlID0gZnVuY3Rpb24ga2V5RnJvbVByaXZhdGUocHJpdiwgZW5jKSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21Qcml2YXRlKHRoaXMsIHByaXYsIGVuYyk7XG59O1xuXG5FQy5wcm90b3R5cGUua2V5RnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGtleUZyb21QdWJsaWMocHViLCBlbmMpIHtcbiAgcmV0dXJuIEtleVBhaXIuZnJvbVB1YmxpYyh0aGlzLCBwdWIsIGVuYyk7XG59O1xuXG5FQy5wcm90b3R5cGUuZ2VuS2V5UGFpciA9IGZ1bmN0aW9uIGdlbktleVBhaXIob3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpXG4gICAgb3B0aW9ucyA9IHt9O1xuXG4gIC8vIEluc3RhbnRpYXRlIEhtYWNfRFJCR1xuICB2YXIgZHJiZyA9IG5ldyBIbWFjRFJCRyh7XG4gICAgaGFzaDogdGhpcy5oYXNoLFxuICAgIHBlcnM6IG9wdGlvbnMucGVycyxcbiAgICBwZXJzRW5jOiBvcHRpb25zLnBlcnNFbmMgfHwgJ3V0ZjgnLFxuICAgIGVudHJvcHk6IG9wdGlvbnMuZW50cm9weSB8fCByYW5kKHRoaXMuaGFzaC5obWFjU3RyZW5ndGgpLFxuICAgIGVudHJvcHlFbmM6IG9wdGlvbnMuZW50cm9weSAmJiBvcHRpb25zLmVudHJvcHlFbmMgfHwgJ3V0ZjgnLFxuICAgIG5vbmNlOiB0aGlzLm4udG9BcnJheSgpXG4gIH0pO1xuXG4gIHZhciBieXRlcyA9IHRoaXMubi5ieXRlTGVuZ3RoKCk7XG4gIHZhciBuczIgPSB0aGlzLm4uc3ViKG5ldyBCTigyKSk7XG4gIGRvIHtcbiAgICB2YXIgcHJpdiA9IG5ldyBCTihkcmJnLmdlbmVyYXRlKGJ5dGVzKSk7XG4gICAgaWYgKHByaXYuY21wKG5zMikgPiAwKVxuICAgICAgY29udGludWU7XG5cbiAgICBwcml2LmlhZGRuKDEpO1xuICAgIHJldHVybiB0aGlzLmtleUZyb21Qcml2YXRlKHByaXYpO1xuICB9IHdoaWxlICh0cnVlKTtcbn07XG5cbkVDLnByb3RvdHlwZS5fdHJ1bmNhdGVUb04gPSBmdW5jdGlvbiB0cnVuY2F0ZVRvTihtc2csIHRydW5jT25seSkge1xuICB2YXIgZGVsdGEgPSBtc2cuYnl0ZUxlbmd0aCgpICogOCAtIHRoaXMubi5iaXRMZW5ndGgoKTtcbiAgaWYgKGRlbHRhID4gMClcbiAgICBtc2cgPSBtc2cudXNocm4oZGVsdGEpO1xuICBpZiAoIXRydW5jT25seSAmJiBtc2cuY21wKHRoaXMubikgPj0gMClcbiAgICByZXR1cm4gbXNnLnN1Yih0aGlzLm4pO1xuICBlbHNlXG4gICAgcmV0dXJuIG1zZztcbn07XG5cbkVDLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbihtc2csIGtleSwgZW5jLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZW5jID09PSAnb2JqZWN0Jykge1xuICAgIG9wdGlvbnMgPSBlbmM7XG4gICAgZW5jID0gbnVsbDtcbiAgfVxuICBpZiAoIW9wdGlvbnMpXG4gICAgb3B0aW9ucyA9IHt9O1xuXG4gIGtleSA9IHRoaXMua2V5RnJvbVByaXZhdGUoa2V5LCBlbmMpO1xuICBtc2cgPSB0aGlzLl90cnVuY2F0ZVRvTihuZXcgQk4obXNnLCAxNikpO1xuXG4gIC8vIFplcm8tZXh0ZW5kIGtleSB0byBwcm92aWRlIGVub3VnaCBlbnRyb3B5XG4gIHZhciBieXRlcyA9IHRoaXMubi5ieXRlTGVuZ3RoKCk7XG4gIHZhciBia2V5ID0ga2V5LmdldFByaXZhdGUoKS50b0FycmF5KCdiZScsIGJ5dGVzKTtcblxuICAvLyBaZXJvLWV4dGVuZCBub25jZSB0byBoYXZlIHRoZSBzYW1lIGJ5dGUgc2l6ZSBhcyBOXG4gIHZhciBub25jZSA9IG1zZy50b0FycmF5KCdiZScsIGJ5dGVzKTtcblxuICAvLyBJbnN0YW50aWF0ZSBIbWFjX0RSQkdcbiAgdmFyIGRyYmcgPSBuZXcgSG1hY0RSQkcoe1xuICAgIGhhc2g6IHRoaXMuaGFzaCxcbiAgICBlbnRyb3B5OiBia2V5LFxuICAgIG5vbmNlOiBub25jZSxcbiAgICBwZXJzOiBvcHRpb25zLnBlcnMsXG4gICAgcGVyc0VuYzogb3B0aW9ucy5wZXJzRW5jIHx8ICd1dGY4J1xuICB9KTtcblxuICAvLyBOdW1iZXIgb2YgYnl0ZXMgdG8gZ2VuZXJhdGVcbiAgdmFyIG5zMSA9IHRoaXMubi5zdWIobmV3IEJOKDEpKTtcblxuICBmb3IgKHZhciBpdGVyID0gMDsgdHJ1ZTsgaXRlcisrKSB7XG4gICAgdmFyIGsgPSBvcHRpb25zLmsgP1xuICAgICAgICBvcHRpb25zLmsoaXRlcikgOlxuICAgICAgICBuZXcgQk4oZHJiZy5nZW5lcmF0ZSh0aGlzLm4uYnl0ZUxlbmd0aCgpKSk7XG4gICAgayA9IHRoaXMuX3RydW5jYXRlVG9OKGssIHRydWUpO1xuICAgIGlmIChrLmNtcG4oMSkgPD0gMCB8fCBrLmNtcChuczEpID49IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBrcCA9IHRoaXMuZy5tdWwoayk7XG4gICAgaWYgKGtwLmlzSW5maW5pdHkoKSlcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgdmFyIGtwWCA9IGtwLmdldFgoKTtcbiAgICB2YXIgciA9IGtwWC51bW9kKHRoaXMubik7XG4gICAgaWYgKHIuY21wbigwKSA9PT0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgdmFyIHMgPSBrLmludm0odGhpcy5uKS5tdWwoci5tdWwoa2V5LmdldFByaXZhdGUoKSkuaWFkZChtc2cpKTtcbiAgICBzID0gcy51bW9kKHRoaXMubik7XG4gICAgaWYgKHMuY21wbigwKSA9PT0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgdmFyIHJlY292ZXJ5UGFyYW0gPSAoa3AuZ2V0WSgpLmlzT2RkKCkgPyAxIDogMCkgfFxuICAgICAgICAgICAgICAgICAgICAgICAgKGtwWC5jbXAocikgIT09IDAgPyAyIDogMCk7XG5cbiAgICAvLyBVc2UgY29tcGxlbWVudCBvZiBgc2AsIGlmIGl0IGlzID4gYG4gLyAyYFxuICAgIGlmIChvcHRpb25zLmNhbm9uaWNhbCAmJiBzLmNtcCh0aGlzLm5oKSA+IDApIHtcbiAgICAgIHMgPSB0aGlzLm4uc3ViKHMpO1xuICAgICAgcmVjb3ZlcnlQYXJhbSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU2lnbmF0dXJlKHsgcjogciwgczogcywgcmVjb3ZlcnlQYXJhbTogcmVjb3ZlcnlQYXJhbSB9KTtcbiAgfVxufTtcblxuRUMucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtc2csIHNpZ25hdHVyZSwga2V5LCBlbmMpIHtcbiAgbXNnID0gdGhpcy5fdHJ1bmNhdGVUb04obmV3IEJOKG1zZywgMTYpKTtcbiAga2V5ID0gdGhpcy5rZXlGcm9tUHVibGljKGtleSwgZW5jKTtcbiAgc2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZShzaWduYXR1cmUsICdoZXgnKTtcblxuICAvLyBQZXJmb3JtIHByaW1pdGl2ZSB2YWx1ZXMgdmFsaWRhdGlvblxuICB2YXIgciA9IHNpZ25hdHVyZS5yO1xuICB2YXIgcyA9IHNpZ25hdHVyZS5zO1xuICBpZiAoci5jbXBuKDEpIDwgMCB8fCByLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAocy5jbXBuKDEpIDwgMCB8fCBzLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIFZhbGlkYXRlIHNpZ25hdHVyZVxuICB2YXIgc2ludiA9IHMuaW52bSh0aGlzLm4pO1xuICB2YXIgdTEgPSBzaW52Lm11bChtc2cpLnVtb2QodGhpcy5uKTtcbiAgdmFyIHUyID0gc2ludi5tdWwocikudW1vZCh0aGlzLm4pO1xuXG4gIGlmICghdGhpcy5jdXJ2ZS5fbWF4d2VsbFRyaWNrKSB7XG4gICAgdmFyIHAgPSB0aGlzLmcubXVsQWRkKHUxLCBrZXkuZ2V0UHVibGljKCksIHUyKTtcbiAgICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gcC5nZXRYKCkudW1vZCh0aGlzLm4pLmNtcChyKSA9PT0gMDtcbiAgfVxuXG4gIC8vIE5PVEU6IEdyZWcgTWF4d2VsbCdzIHRyaWNrLCBpbnNwaXJlZCBieTpcbiAgLy8gaHR0cHM6Ly9naXQuaW8vdmFkM0tcblxuICB2YXIgcCA9IHRoaXMuZy5qbXVsQWRkKHUxLCBrZXkuZ2V0UHVibGljKCksIHUyKTtcbiAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBDb21wYXJlIGBwLnhgIG9mIEphY29iaWFuIHBvaW50IHdpdGggYHJgLFxuICAvLyB0aGlzIHdpbGwgZG8gYHAueCA9PSByICogcC56XjJgIGluc3RlYWQgb2YgbXVsdGlwbHlpbmcgYHAueGAgYnkgdGhlXG4gIC8vIGludmVyc2Ugb2YgYHAuel4yYFxuICByZXR1cm4gcC5lcVhUb1Aocik7XG59O1xuXG5FQy5wcm90b3R5cGUucmVjb3ZlclB1YktleSA9IGZ1bmN0aW9uKG1zZywgc2lnbmF0dXJlLCBqLCBlbmMpIHtcbiAgYXNzZXJ0KCgzICYgaikgPT09IGosICdUaGUgcmVjb3ZlcnkgcGFyYW0gaXMgbW9yZSB0aGFuIHR3byBiaXRzJyk7XG4gIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCBlbmMpO1xuXG4gIHZhciBuID0gdGhpcy5uO1xuICB2YXIgZSA9IG5ldyBCTihtc2cpO1xuICB2YXIgciA9IHNpZ25hdHVyZS5yO1xuICB2YXIgcyA9IHNpZ25hdHVyZS5zO1xuXG4gIC8vIEEgc2V0IExTQiBzaWduaWZpZXMgdGhhdCB0aGUgeS1jb29yZGluYXRlIGlzIG9kZFxuICB2YXIgaXNZT2RkID0gaiAmIDE7XG4gIHZhciBpc1NlY29uZEtleSA9IGogPj4gMTtcbiAgaWYgKHIuY21wKHRoaXMuY3VydmUucC51bW9kKHRoaXMuY3VydmUubikpID49IDAgJiYgaXNTZWNvbmRLZXkpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCBzZW5jb25kIGtleSBjYW5kaW5hdGUnKTtcblxuICAvLyAxLjEuIExldCB4ID0gciArIGpuLlxuICBpZiAoaXNTZWNvbmRLZXkpXG4gICAgciA9IHRoaXMuY3VydmUucG9pbnRGcm9tWChyLmFkZCh0aGlzLmN1cnZlLm4pLCBpc1lPZGQpO1xuICBlbHNlXG4gICAgciA9IHRoaXMuY3VydmUucG9pbnRGcm9tWChyLCBpc1lPZGQpO1xuXG4gIHZhciBySW52ID0gc2lnbmF0dXJlLnIuaW52bShuKTtcbiAgdmFyIHMxID0gbi5zdWIoZSkubXVsKHJJbnYpLnVtb2Qobik7XG4gIHZhciBzMiA9IHMubXVsKHJJbnYpLnVtb2Qobik7XG5cbiAgLy8gMS42LjEgQ29tcHV0ZSBRID0gcl4tMSAoc1IgLSAgZUcpXG4gIC8vICAgICAgICAgICAgICAgUSA9IHJeLTEgKHNSICsgLWVHKVxuICByZXR1cm4gdGhpcy5nLm11bEFkZChzMSwgciwgczIpO1xufTtcblxuRUMucHJvdG90eXBlLmdldEtleVJlY292ZXJ5UGFyYW0gPSBmdW5jdGlvbihlLCBzaWduYXR1cmUsIFEsIGVuYykge1xuICBzaWduYXR1cmUgPSBuZXcgU2lnbmF0dXJlKHNpZ25hdHVyZSwgZW5jKTtcbiAgaWYgKHNpZ25hdHVyZS5yZWNvdmVyeVBhcmFtICE9PSBudWxsKVxuICAgIHJldHVybiBzaWduYXR1cmUucmVjb3ZlcnlQYXJhbTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIHZhciBRcHJpbWU7XG4gICAgdHJ5IHtcbiAgICAgIFFwcmltZSA9IHRoaXMucmVjb3ZlclB1YktleShlLCBzaWduYXR1cmUsIGkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChRcHJpbWUuZXEoUSkpXG4gICAgICByZXR1cm4gaTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIHZhbGlkIHJlY292ZXJ5IGZhY3RvcicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc2ggPSByZXF1aXJlKCdoYXNoLmpzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtY3J5cHRvLXV0aWxzJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBIbWFjRFJCRyhvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBIbWFjRFJCRykpXG4gICAgcmV0dXJuIG5ldyBIbWFjRFJCRyhvcHRpb25zKTtcbiAgdGhpcy5oYXNoID0gb3B0aW9ucy5oYXNoO1xuICB0aGlzLnByZWRSZXNpc3QgPSAhIW9wdGlvbnMucHJlZFJlc2lzdDtcblxuICB0aGlzLm91dExlbiA9IHRoaXMuaGFzaC5vdXRTaXplO1xuICB0aGlzLm1pbkVudHJvcHkgPSBvcHRpb25zLm1pbkVudHJvcHkgfHwgdGhpcy5oYXNoLmhtYWNTdHJlbmd0aDtcblxuICB0aGlzLl9yZXNlZWQgPSBudWxsO1xuICB0aGlzLnJlc2VlZEludGVydmFsID0gbnVsbDtcbiAgdGhpcy5LID0gbnVsbDtcbiAgdGhpcy5WID0gbnVsbDtcblxuICB2YXIgZW50cm9weSA9IHV0aWxzLnRvQXJyYXkob3B0aW9ucy5lbnRyb3B5LCBvcHRpb25zLmVudHJvcHlFbmMgfHwgJ2hleCcpO1xuICB2YXIgbm9uY2UgPSB1dGlscy50b0FycmF5KG9wdGlvbnMubm9uY2UsIG9wdGlvbnMubm9uY2VFbmMgfHwgJ2hleCcpO1xuICB2YXIgcGVycyA9IHV0aWxzLnRvQXJyYXkob3B0aW9ucy5wZXJzLCBvcHRpb25zLnBlcnNFbmMgfHwgJ2hleCcpO1xuICBhc3NlcnQoZW50cm9weS5sZW5ndGggPj0gKHRoaXMubWluRW50cm9weSAvIDgpLFxuICAgICAgICAgJ05vdCBlbm91Z2ggZW50cm9weS4gTWluaW11bSBpczogJyArIHRoaXMubWluRW50cm9weSArICcgYml0cycpO1xuICB0aGlzLl9pbml0KGVudHJvcHksIG5vbmNlLCBwZXJzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gSG1hY0RSQkc7XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQoZW50cm9weSwgbm9uY2UsIHBlcnMpIHtcbiAgdmFyIHNlZWQgPSBlbnRyb3B5LmNvbmNhdChub25jZSkuY29uY2F0KHBlcnMpO1xuXG4gIHRoaXMuSyA9IG5ldyBBcnJheSh0aGlzLm91dExlbiAvIDgpO1xuICB0aGlzLlYgPSBuZXcgQXJyYXkodGhpcy5vdXRMZW4gLyA4KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLlYubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLktbaV0gPSAweDAwO1xuICAgIHRoaXMuVltpXSA9IDB4MDE7XG4gIH1cblxuICB0aGlzLl91cGRhdGUoc2VlZCk7XG4gIHRoaXMuX3Jlc2VlZCA9IDE7XG4gIHRoaXMucmVzZWVkSW50ZXJ2YWwgPSAweDEwMDAwMDAwMDAwMDA7ICAvLyAyXjQ4XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuX2htYWMgPSBmdW5jdGlvbiBobWFjKCkge1xuICByZXR1cm4gbmV3IGhhc2guaG1hYyh0aGlzLmhhc2gsIHRoaXMuSyk7XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShzZWVkKSB7XG4gIHZhciBrbWFjID0gdGhpcy5faG1hYygpXG4gICAgICAgICAgICAgICAgIC51cGRhdGUodGhpcy5WKVxuICAgICAgICAgICAgICAgICAudXBkYXRlKFsgMHgwMCBdKTtcbiAgaWYgKHNlZWQpXG4gICAga21hYyA9IGttYWMudXBkYXRlKHNlZWQpO1xuICB0aGlzLksgPSBrbWFjLmRpZ2VzdCgpO1xuICB0aGlzLlYgPSB0aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCk7XG4gIGlmICghc2VlZClcbiAgICByZXR1cm47XG5cbiAgdGhpcy5LID0gdGhpcy5faG1hYygpXG4gICAgICAgICAgICAgICAudXBkYXRlKHRoaXMuVilcbiAgICAgICAgICAgICAgIC51cGRhdGUoWyAweDAxIF0pXG4gICAgICAgICAgICAgICAudXBkYXRlKHNlZWQpXG4gICAgICAgICAgICAgICAuZGlnZXN0KCk7XG4gIHRoaXMuViA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS5kaWdlc3QoKTtcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5yZXNlZWQgPSBmdW5jdGlvbiByZXNlZWQoZW50cm9weSwgZW50cm9weUVuYywgYWRkLCBhZGRFbmMpIHtcbiAgLy8gT3B0aW9uYWwgZW50cm9weSBlbmNcbiAgaWYgKHR5cGVvZiBlbnRyb3B5RW5jICE9PSAnc3RyaW5nJykge1xuICAgIGFkZEVuYyA9IGFkZDtcbiAgICBhZGQgPSBlbnRyb3B5RW5jO1xuICAgIGVudHJvcHlFbmMgPSBudWxsO1xuICB9XG5cbiAgZW50cm9weSA9IHV0aWxzLnRvQXJyYXkoZW50cm9weSwgZW50cm9weUVuYyk7XG4gIGFkZCA9IHV0aWxzLnRvQXJyYXkoYWRkLCBhZGRFbmMpO1xuXG4gIGFzc2VydChlbnRyb3B5Lmxlbmd0aCA+PSAodGhpcy5taW5FbnRyb3B5IC8gOCksXG4gICAgICAgICAnTm90IGVub3VnaCBlbnRyb3B5LiBNaW5pbXVtIGlzOiAnICsgdGhpcy5taW5FbnRyb3B5ICsgJyBiaXRzJyk7XG5cbiAgdGhpcy5fdXBkYXRlKGVudHJvcHkuY29uY2F0KGFkZCB8fCBbXSkpO1xuICB0aGlzLl9yZXNlZWQgPSAxO1xufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gZ2VuZXJhdGUobGVuLCBlbmMsIGFkZCwgYWRkRW5jKSB7XG4gIGlmICh0aGlzLl9yZXNlZWQgPiB0aGlzLnJlc2VlZEludGVydmFsKVxuICAgIHRocm93IG5ldyBFcnJvcignUmVzZWVkIGlzIHJlcXVpcmVkJyk7XG5cbiAgLy8gT3B0aW9uYWwgZW5jb2RpbmdcbiAgaWYgKHR5cGVvZiBlbmMgIT09ICdzdHJpbmcnKSB7XG4gICAgYWRkRW5jID0gYWRkO1xuICAgIGFkZCA9IGVuYztcbiAgICBlbmMgPSBudWxsO1xuICB9XG5cbiAgLy8gT3B0aW9uYWwgYWRkaXRpb25hbCBkYXRhXG4gIGlmIChhZGQpIHtcbiAgICBhZGQgPSB1dGlscy50b0FycmF5KGFkZCwgYWRkRW5jIHx8ICdoZXgnKTtcbiAgICB0aGlzLl91cGRhdGUoYWRkKTtcbiAgfVxuXG4gIHZhciB0ZW1wID0gW107XG4gIHdoaWxlICh0ZW1wLmxlbmd0aCA8IGxlbikge1xuICAgIHRoaXMuViA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS5kaWdlc3QoKTtcbiAgICB0ZW1wID0gdGVtcC5jb25jYXQodGhpcy5WKTtcbiAgfVxuXG4gIHZhciByZXMgPSB0ZW1wLnNsaWNlKDAsIGxlbik7XG4gIHRoaXMuX3VwZGF0ZShhZGQpO1xuICB0aGlzLl9yZXNlZWQrKztcbiAgcmV0dXJuIHV0aWxzLmVuY29kZShyZXMsIGVuYyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIEtleVBhaXIoZWMsIG9wdGlvbnMpIHtcbiAgdGhpcy5lYyA9IGVjO1xuICB0aGlzLnByaXYgPSBudWxsO1xuICB0aGlzLnB1YiA9IG51bGw7XG5cbiAgLy8gS2V5UGFpcihlYywgeyBwcml2OiAuLi4sIHB1YjogLi4uIH0pXG4gIGlmIChvcHRpb25zLnByaXYpXG4gICAgdGhpcy5faW1wb3J0UHJpdmF0ZShvcHRpb25zLnByaXYsIG9wdGlvbnMucHJpdkVuYyk7XG4gIGlmIChvcHRpb25zLnB1YilcbiAgICB0aGlzLl9pbXBvcnRQdWJsaWMob3B0aW9ucy5wdWIsIG9wdGlvbnMucHViRW5jKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gS2V5UGFpcjtcblxuS2V5UGFpci5mcm9tUHVibGljID0gZnVuY3Rpb24gZnJvbVB1YmxpYyhlYywgcHViLCBlbmMpIHtcbiAgaWYgKHB1YiBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHB1YjtcblxuICByZXR1cm4gbmV3IEtleVBhaXIoZWMsIHtcbiAgICBwdWI6IHB1YixcbiAgICBwdWJFbmM6IGVuY1xuICB9KTtcbn07XG5cbktleVBhaXIuZnJvbVByaXZhdGUgPSBmdW5jdGlvbiBmcm9tUHJpdmF0ZShlYywgcHJpdiwgZW5jKSB7XG4gIGlmIChwcml2IGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gcHJpdjtcblxuICByZXR1cm4gbmV3IEtleVBhaXIoZWMsIHtcbiAgICBwcml2OiBwcml2LFxuICAgIHByaXZFbmM6IGVuY1xuICB9KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHZhciBwdWIgPSB0aGlzLmdldFB1YmxpYygpO1xuXG4gIGlmIChwdWIuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB7IHJlc3VsdDogZmFsc2UsIHJlYXNvbjogJ0ludmFsaWQgcHVibGljIGtleScgfTtcbiAgaWYgKCFwdWIudmFsaWRhdGUoKSlcbiAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlLCByZWFzb246ICdQdWJsaWMga2V5IGlzIG5vdCBhIHBvaW50JyB9O1xuICBpZiAoIXB1Yi5tdWwodGhpcy5lYy5jdXJ2ZS5uKS5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHsgcmVzdWx0OiBmYWxzZSwgcmVhc29uOiAnUHVibGljIGtleSAqIE4gIT0gTycgfTtcblxuICByZXR1cm4geyByZXN1bHQ6IHRydWUsIHJlYXNvbjogbnVsbCB9O1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHVibGljID0gZnVuY3Rpb24gZ2V0UHVibGljKGNvbXBhY3QsIGVuYykge1xuICAvLyBjb21wYWN0IGlzIG9wdGlvbmFsIGFyZ3VtZW50XG4gIGlmICh0eXBlb2YgY29tcGFjdCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmMgPSBjb21wYWN0O1xuICAgIGNvbXBhY3QgPSBudWxsO1xuICB9XG5cbiAgaWYgKCF0aGlzLnB1YilcbiAgICB0aGlzLnB1YiA9IHRoaXMuZWMuZy5tdWwodGhpcy5wcml2KTtcblxuICBpZiAoIWVuYylcbiAgICByZXR1cm4gdGhpcy5wdWI7XG5cbiAgcmV0dXJuIHRoaXMucHViLmVuY29kZShlbmMsIGNvbXBhY3QpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHJpdmF0ZSA9IGZ1bmN0aW9uIGdldFByaXZhdGUoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB0aGlzLnByaXYudG9TdHJpbmcoMTYsIDIpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMucHJpdjtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLl9pbXBvcnRQcml2YXRlID0gZnVuY3Rpb24gX2ltcG9ydFByaXZhdGUoa2V5LCBlbmMpIHtcbiAgdGhpcy5wcml2ID0gbmV3IEJOKGtleSwgZW5jIHx8IDE2KTtcblxuICAvLyBFbnN1cmUgdGhhdCB0aGUgcHJpdiB3b24ndCBiZSBiaWdnZXIgdGhhbiBuLCBvdGhlcndpc2Ugd2UgbWF5IGZhaWxcbiAgLy8gaW4gZml4ZWQgbXVsdGlwbGljYXRpb24gbWV0aG9kXG4gIHRoaXMucHJpdiA9IHRoaXMucHJpdi51bW9kKHRoaXMuZWMuY3VydmUubik7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5faW1wb3J0UHVibGljID0gZnVuY3Rpb24gX2ltcG9ydFB1YmxpYyhrZXksIGVuYykge1xuICBpZiAoa2V5LnggfHwga2V5LnkpIHtcbiAgICAvLyBNb250Z29tZXJ5IHBvaW50cyBvbmx5IGhhdmUgYW4gYHhgIGNvb3JkaW5hdGUuXG4gICAgLy8gV2VpZXJzdHJhc3MvRWR3YXJkcyBwb2ludHMgb24gdGhlIG90aGVyIGhhbmQgaGF2ZSBib3RoIGB4YCBhbmRcbiAgICAvLyBgeWAgY29vcmRpbmF0ZXMuXG4gICAgaWYgKHRoaXMuZWMuY3VydmUudHlwZSA9PT0gJ21vbnQnKSB7XG4gICAgICBhc3NlcnQoa2V5LngsICdOZWVkIHggY29vcmRpbmF0ZScpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5lYy5jdXJ2ZS50eXBlID09PSAnc2hvcnQnIHx8XG4gICAgICAgICAgICAgICB0aGlzLmVjLmN1cnZlLnR5cGUgPT09ICdlZHdhcmRzJykge1xuICAgICAgYXNzZXJ0KGtleS54ICYmIGtleS55LCAnTmVlZCBib3RoIHggYW5kIHkgY29vcmRpbmF0ZScpO1xuICAgIH1cbiAgICB0aGlzLnB1YiA9IHRoaXMuZWMuY3VydmUucG9pbnQoa2V5LngsIGtleS55KTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5wdWIgPSB0aGlzLmVjLmN1cnZlLmRlY29kZVBvaW50KGtleSwgZW5jKTtcbn07XG5cbi8vIEVDREhcbktleVBhaXIucHJvdG90eXBlLmRlcml2ZSA9IGZ1bmN0aW9uIGRlcml2ZShwdWIpIHtcbiAgcmV0dXJuIHB1Yi5tdWwodGhpcy5wcml2KS5nZXRYKCk7XG59O1xuXG4vLyBFQ0RTQVxuS2V5UGFpci5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obXNnLCBlbmMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRoaXMuZWMuc2lnbihtc2csIHRoaXMsIGVuYywgb3B0aW9ucyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobXNnLCBzaWduYXR1cmUpIHtcbiAgcmV0dXJuIHRoaXMuZWMudmVyaWZ5KG1zZywgc2lnbmF0dXJlLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICByZXR1cm4gJzxLZXkgcHJpdjogJyArICh0aGlzLnByaXYgJiYgdGhpcy5wcml2LnRvU3RyaW5nKDE2LCAyKSkgK1xuICAgICAgICAgJyBwdWI6ICcgKyAodGhpcy5wdWIgJiYgdGhpcy5wdWIuaW5zcGVjdCgpKSArICcgPic7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gU2lnbmF0dXJlKG9wdGlvbnMsIGVuYykge1xuICBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIFNpZ25hdHVyZSlcbiAgICByZXR1cm4gb3B0aW9ucztcblxuICBpZiAodGhpcy5faW1wb3J0REVSKG9wdGlvbnMsIGVuYykpXG4gICAgcmV0dXJuO1xuXG4gIGFzc2VydChvcHRpb25zLnIgJiYgb3B0aW9ucy5zLCAnU2lnbmF0dXJlIHdpdGhvdXQgciBvciBzJyk7XG4gIHRoaXMuciA9IG5ldyBCTihvcHRpb25zLnIsIDE2KTtcbiAgdGhpcy5zID0gbmV3IEJOKG9wdGlvbnMucywgMTYpO1xuICBpZiAob3B0aW9ucy5yZWNvdmVyeVBhcmFtID09PSB1bmRlZmluZWQpXG4gICAgdGhpcy5yZWNvdmVyeVBhcmFtID0gbnVsbDtcbiAgZWxzZVxuICAgIHRoaXMucmVjb3ZlcnlQYXJhbSA9IG9wdGlvbnMucmVjb3ZlcnlQYXJhbTtcbn1cbm1vZHVsZS5leHBvcnRzID0gU2lnbmF0dXJlO1xuXG5mdW5jdGlvbiBQb3NpdGlvbigpIHtcbiAgdGhpcy5wbGFjZSA9IDA7XG59XG5cbmZ1bmN0aW9uIGdldExlbmd0aChidWYsIHApIHtcbiAgdmFyIGluaXRpYWwgPSBidWZbcC5wbGFjZSsrXTtcbiAgaWYgKCEoaW5pdGlhbCAmIDB4ODApKSB7XG4gICAgcmV0dXJuIGluaXRpYWw7XG4gIH1cbiAgdmFyIG9jdGV0TGVuID0gaW5pdGlhbCAmIDB4ZjtcbiAgdmFyIHZhbCA9IDA7XG4gIGZvciAodmFyIGkgPSAwLCBvZmYgPSBwLnBsYWNlOyBpIDwgb2N0ZXRMZW47IGkrKywgb2ZmKyspIHtcbiAgICB2YWwgPDw9IDg7XG4gICAgdmFsIHw9IGJ1ZltvZmZdO1xuICB9XG4gIHAucGxhY2UgPSBvZmY7XG4gIHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIHJtUGFkZGluZyhidWYpIHtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aCAtIDE7XG4gIHdoaWxlICghYnVmW2ldICYmICEoYnVmW2kgKyAxXSAmIDB4ODApICYmIGkgPCBsZW4pIHtcbiAgICBpKys7XG4gIH1cbiAgaWYgKGkgPT09IDApIHtcbiAgICByZXR1cm4gYnVmO1xuICB9XG4gIHJldHVybiBidWYuc2xpY2UoaSk7XG59XG5cblNpZ25hdHVyZS5wcm90b3R5cGUuX2ltcG9ydERFUiA9IGZ1bmN0aW9uIF9pbXBvcnRERVIoZGF0YSwgZW5jKSB7XG4gIGRhdGEgPSB1dGlscy50b0FycmF5KGRhdGEsIGVuYyk7XG4gIHZhciBwID0gbmV3IFBvc2l0aW9uKCk7XG4gIGlmIChkYXRhW3AucGxhY2UrK10gIT09IDB4MzApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxlbiA9IGdldExlbmd0aChkYXRhLCBwKTtcbiAgaWYgKChsZW4gKyBwLnBsYWNlKSAhPT0gZGF0YS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGRhdGFbcC5wbGFjZSsrXSAhPT0gMHgwMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcmxlbiA9IGdldExlbmd0aChkYXRhLCBwKTtcbiAgdmFyIHIgPSBkYXRhLnNsaWNlKHAucGxhY2UsIHJsZW4gKyBwLnBsYWNlKTtcbiAgcC5wbGFjZSArPSBybGVuO1xuICBpZiAoZGF0YVtwLnBsYWNlKytdICE9PSAweDAyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBzbGVuID0gZ2V0TGVuZ3RoKGRhdGEsIHApO1xuICBpZiAoZGF0YS5sZW5ndGggIT09IHNsZW4gKyBwLnBsYWNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBzID0gZGF0YS5zbGljZShwLnBsYWNlLCBzbGVuICsgcC5wbGFjZSk7XG4gIGlmIChyWzBdID09PSAwICYmIChyWzFdICYgMHg4MCkpIHtcbiAgICByID0gci5zbGljZSgxKTtcbiAgfVxuICBpZiAoc1swXSA9PT0gMCAmJiAoc1sxXSAmIDB4ODApKSB7XG4gICAgcyA9IHMuc2xpY2UoMSk7XG4gIH1cblxuICB0aGlzLnIgPSBuZXcgQk4ocik7XG4gIHRoaXMucyA9IG5ldyBCTihzKTtcbiAgdGhpcy5yZWNvdmVyeVBhcmFtID0gbnVsbDtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdExlbmd0aChhcnIsIGxlbikge1xuICBpZiAobGVuIDwgMHg4MCkge1xuICAgIGFyci5wdXNoKGxlbik7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBvY3RldHMgPSAxICsgKE1hdGgubG9nKGxlbikgLyBNYXRoLkxOMiA+Pj4gMyk7XG4gIGFyci5wdXNoKG9jdGV0cyB8IDB4ODApO1xuICB3aGlsZSAoLS1vY3RldHMpIHtcbiAgICBhcnIucHVzaCgobGVuID4+PiAob2N0ZXRzIDw8IDMpKSAmIDB4ZmYpO1xuICB9XG4gIGFyci5wdXNoKGxlbik7XG59XG5cblNpZ25hdHVyZS5wcm90b3R5cGUudG9ERVIgPSBmdW5jdGlvbiB0b0RFUihlbmMpIHtcbiAgdmFyIHIgPSB0aGlzLnIudG9BcnJheSgpO1xuICB2YXIgcyA9IHRoaXMucy50b0FycmF5KCk7XG5cbiAgLy8gUGFkIHZhbHVlc1xuICBpZiAoclswXSAmIDB4ODApXG4gICAgciA9IFsgMCBdLmNvbmNhdChyKTtcbiAgLy8gUGFkIHZhbHVlc1xuICBpZiAoc1swXSAmIDB4ODApXG4gICAgcyA9IFsgMCBdLmNvbmNhdChzKTtcblxuICByID0gcm1QYWRkaW5nKHIpO1xuICBzID0gcm1QYWRkaW5nKHMpO1xuXG4gIHdoaWxlICghc1swXSAmJiAhKHNbMV0gJiAweDgwKSkge1xuICAgIHMgPSBzLnNsaWNlKDEpO1xuICB9XG4gIHZhciBhcnIgPSBbIDB4MDIgXTtcbiAgY29uc3RydWN0TGVuZ3RoKGFyciwgci5sZW5ndGgpO1xuICBhcnIgPSBhcnIuY29uY2F0KHIpO1xuICBhcnIucHVzaCgweDAyKTtcbiAgY29uc3RydWN0TGVuZ3RoKGFyciwgcy5sZW5ndGgpO1xuICB2YXIgYmFja0hhbGYgPSBhcnIuY29uY2F0KHMpO1xuICB2YXIgcmVzID0gWyAweDMwIF07XG4gIGNvbnN0cnVjdExlbmd0aChyZXMsIGJhY2tIYWxmLmxlbmd0aCk7XG4gIHJlcyA9IHJlcy5jb25jYXQoYmFja0hhbGYpO1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHJlcywgZW5jKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpO1xudmFyIGN1cnZlcyA9IHJlcXVpcmUoJy4uL2N1cnZlcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG52YXIgcGFyc2VCeXRlcyA9IHV0aWxzLnBhcnNlQnl0ZXM7XG52YXIgS2V5UGFpciA9IHJlcXVpcmUoJy4va2V5Jyk7XG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZSgnLi9zaWduYXR1cmUnKTtcblxuZnVuY3Rpb24gRUREU0EoY3VydmUpIHtcbiAgYXNzZXJ0KGN1cnZlID09PSAnZWQyNTUxOScsICdvbmx5IHRlc3RlZCB3aXRoIGVkMjU1MTkgc28gZmFyJyk7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEVERFNBKSlcbiAgICByZXR1cm4gbmV3IEVERFNBKGN1cnZlKTtcblxuICB2YXIgY3VydmUgPSBjdXJ2ZXNbY3VydmVdLmN1cnZlO1xuICB0aGlzLmN1cnZlID0gY3VydmU7XG4gIHRoaXMuZyA9IGN1cnZlLmc7XG4gIHRoaXMuZy5wcmVjb21wdXRlKGN1cnZlLm4uYml0TGVuZ3RoKCkgKyAxKTtcblxuICB0aGlzLnBvaW50Q2xhc3MgPSBjdXJ2ZS5wb2ludCgpLmNvbnN0cnVjdG9yO1xuICB0aGlzLmVuY29kaW5nTGVuZ3RoID0gTWF0aC5jZWlsKGN1cnZlLm4uYml0TGVuZ3RoKCkgLyA4KTtcbiAgdGhpcy5oYXNoID0gaGFzaC5zaGE1MTI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRUREU0E7XG5cbi8qKlxuKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gbWVzc2FnZSAtIG1lc3NhZ2UgYnl0ZXNcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd8S2V5UGFpcn0gc2VjcmV0IC0gc2VjcmV0IGJ5dGVzIG9yIGEga2V5cGFpclxuKiBAcmV0dXJucyB7U2lnbmF0dXJlfSAtIHNpZ25hdHVyZVxuKi9cbkVERFNBLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbihtZXNzYWdlLCBzZWNyZXQpIHtcbiAgbWVzc2FnZSA9IHBhcnNlQnl0ZXMobWVzc2FnZSk7XG4gIHZhciBrZXkgPSB0aGlzLmtleUZyb21TZWNyZXQoc2VjcmV0KTtcbiAgdmFyIHIgPSB0aGlzLmhhc2hJbnQoa2V5Lm1lc3NhZ2VQcmVmaXgoKSwgbWVzc2FnZSk7XG4gIHZhciBSID0gdGhpcy5nLm11bChyKTtcbiAgdmFyIFJlbmNvZGVkID0gdGhpcy5lbmNvZGVQb2ludChSKTtcbiAgdmFyIHNfID0gdGhpcy5oYXNoSW50KFJlbmNvZGVkLCBrZXkucHViQnl0ZXMoKSwgbWVzc2FnZSlcbiAgICAgICAgICAgICAgIC5tdWwoa2V5LnByaXYoKSk7XG4gIHZhciBTID0gci5hZGQoc18pLnVtb2QodGhpcy5jdXJ2ZS5uKTtcbiAgcmV0dXJuIHRoaXMubWFrZVNpZ25hdHVyZSh7IFI6IFIsIFM6IFMsIFJlbmNvZGVkOiBSZW5jb2RlZCB9KTtcbn07XG5cbi8qKlxuKiBAcGFyYW0ge0FycmF5fSBtZXNzYWdlIC0gbWVzc2FnZSBieXRlc1xuKiBAcGFyYW0ge0FycmF5fFN0cmluZ3xTaWduYXR1cmV9IHNpZyAtIHNpZyBieXRlc1xuKiBAcGFyYW0ge0FycmF5fFN0cmluZ3xQb2ludHxLZXlQYWlyfSBwdWIgLSBwdWJsaWMga2V5XG4qIEByZXR1cm5zIHtCb29sZWFufSAtIHRydWUgaWYgcHVibGljIGtleSBtYXRjaGVzIHNpZyBvZiBtZXNzYWdlXG4qL1xuRUREU0EucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlLCBzaWcsIHB1Yikge1xuICBtZXNzYWdlID0gcGFyc2VCeXRlcyhtZXNzYWdlKTtcbiAgc2lnID0gdGhpcy5tYWtlU2lnbmF0dXJlKHNpZyk7XG4gIHZhciBrZXkgPSB0aGlzLmtleUZyb21QdWJsaWMocHViKTtcbiAgdmFyIGggPSB0aGlzLmhhc2hJbnQoc2lnLlJlbmNvZGVkKCksIGtleS5wdWJCeXRlcygpLCBtZXNzYWdlKTtcbiAgdmFyIFNHID0gdGhpcy5nLm11bChzaWcuUygpKTtcbiAgdmFyIFJwbHVzQWggPSBzaWcuUigpLmFkZChrZXkucHViKCkubXVsKGgpKTtcbiAgcmV0dXJuIFJwbHVzQWguZXEoU0cpO1xufTtcblxuRUREU0EucHJvdG90eXBlLmhhc2hJbnQgPSBmdW5jdGlvbiBoYXNoSW50KCkge1xuICB2YXIgaGFzaCA9IHRoaXMuaGFzaCgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcbiAgICBoYXNoLnVwZGF0ZShhcmd1bWVudHNbaV0pO1xuICByZXR1cm4gdXRpbHMuaW50RnJvbUxFKGhhc2guZGlnZXN0KCkpLnVtb2QodGhpcy5jdXJ2ZS5uKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5rZXlGcm9tUHVibGljID0gZnVuY3Rpb24ga2V5RnJvbVB1YmxpYyhwdWIpIHtcbiAgcmV0dXJuIEtleVBhaXIuZnJvbVB1YmxpYyh0aGlzLCBwdWIpO1xufTtcblxuRUREU0EucHJvdG90eXBlLmtleUZyb21TZWNyZXQgPSBmdW5jdGlvbiBrZXlGcm9tU2VjcmV0KHNlY3JldCkge1xuICByZXR1cm4gS2V5UGFpci5mcm9tU2VjcmV0KHRoaXMsIHNlY3JldCk7XG59O1xuXG5FRERTQS5wcm90b3R5cGUubWFrZVNpZ25hdHVyZSA9IGZ1bmN0aW9uIG1ha2VTaWduYXR1cmUoc2lnKSB7XG4gIGlmIChzaWcgaW5zdGFuY2VvZiBTaWduYXR1cmUpXG4gICAgcmV0dXJuIHNpZztcbiAgcmV0dXJuIG5ldyBTaWduYXR1cmUodGhpcywgc2lnKTtcbn07XG5cbi8qKlxuKiAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1qb3NlZnNzb24tZWRkc2EtZWQyNTUxOS0wMyNzZWN0aW9uLTUuMlxuKlxuKiBFRERTQSBkZWZpbmVzIG1ldGhvZHMgZm9yIGVuY29kaW5nIGFuZCBkZWNvZGluZyBwb2ludHMgYW5kIGludGVnZXJzLiBUaGVzZSBhcmVcbiogaGVscGVyIGNvbnZlbmllbmNlIG1ldGhvZHMsIHRoYXQgcGFzcyBhbG9uZyB0byB1dGlsaXR5IGZ1bmN0aW9ucyBpbXBsaWVkXG4qIHBhcmFtZXRlcnMuXG4qXG4qL1xuRUREU0EucHJvdG90eXBlLmVuY29kZVBvaW50ID0gZnVuY3Rpb24gZW5jb2RlUG9pbnQocG9pbnQpIHtcbiAgdmFyIGVuYyA9IHBvaW50LmdldFkoKS50b0FycmF5KCdsZScsIHRoaXMuZW5jb2RpbmdMZW5ndGgpO1xuICBlbmNbdGhpcy5lbmNvZGluZ0xlbmd0aCAtIDFdIHw9IHBvaW50LmdldFgoKS5pc09kZCgpID8gMHg4MCA6IDA7XG4gIHJldHVybiBlbmM7XG59O1xuXG5FRERTQS5wcm90b3R5cGUuZGVjb2RlUG9pbnQgPSBmdW5jdGlvbiBkZWNvZGVQb2ludChieXRlcykge1xuICBieXRlcyA9IHV0aWxzLnBhcnNlQnl0ZXMoYnl0ZXMpO1xuXG4gIHZhciBsYXN0SXggPSBieXRlcy5sZW5ndGggLSAxO1xuICB2YXIgbm9ybWVkID0gYnl0ZXMuc2xpY2UoMCwgbGFzdEl4KS5jb25jYXQoYnl0ZXNbbGFzdEl4XSAmIH4weDgwKTtcbiAgdmFyIHhJc09kZCA9IChieXRlc1tsYXN0SXhdICYgMHg4MCkgIT09IDA7XG5cbiAgdmFyIHkgPSB1dGlscy5pbnRGcm9tTEUobm9ybWVkKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnRGcm9tWSh5LCB4SXNPZGQpO1xufTtcblxuRUREU0EucHJvdG90eXBlLmVuY29kZUludCA9IGZ1bmN0aW9uIGVuY29kZUludChudW0pIHtcbiAgcmV0dXJuIG51bS50b0FycmF5KCdsZScsIHRoaXMuZW5jb2RpbmdMZW5ndGgpO1xufTtcblxuRUREU0EucHJvdG90eXBlLmRlY29kZUludCA9IGZ1bmN0aW9uIGRlY29kZUludChieXRlcykge1xuICByZXR1cm4gdXRpbHMuaW50RnJvbUxFKGJ5dGVzKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5pc1BvaW50ID0gZnVuY3Rpb24gaXNQb2ludCh2YWwpIHtcbiAgcmV0dXJuIHZhbCBpbnN0YW5jZW9mIHRoaXMucG9pbnRDbGFzcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xudmFyIHBhcnNlQnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzO1xudmFyIGNhY2hlZFByb3BlcnR5ID0gdXRpbHMuY2FjaGVkUHJvcGVydHk7XG5cbi8qKlxuKiBAcGFyYW0ge0VERFNBfSBlZGRzYSAtIGluc3RhbmNlXG4qIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBwdWJsaWMvcHJpdmF0ZSBrZXkgcGFyYW1ldGVyc1xuKlxuKiBAcGFyYW0ge0FycmF5PEJ5dGU+fSBbcGFyYW1zLnNlY3JldF0gLSBzZWNyZXQgc2VlZCBieXRlc1xuKiBAcGFyYW0ge1BvaW50fSBbcGFyYW1zLnB1Yl0gLSBwdWJsaWMga2V5IHBvaW50IChha2EgYEFgIGluIGVkZHNhIHRlcm1zKVxuKiBAcGFyYW0ge0FycmF5PEJ5dGU+fSBbcGFyYW1zLnB1Yl0gLSBwdWJsaWMga2V5IHBvaW50IGVuY29kZWQgYXMgYnl0ZXNcbipcbiovXG5mdW5jdGlvbiBLZXlQYWlyKGVkZHNhLCBwYXJhbXMpIHtcbiAgdGhpcy5lZGRzYSA9IGVkZHNhO1xuICB0aGlzLl9zZWNyZXQgPSBwYXJzZUJ5dGVzKHBhcmFtcy5zZWNyZXQpO1xuICBpZiAoZWRkc2EuaXNQb2ludChwYXJhbXMucHViKSlcbiAgICB0aGlzLl9wdWIgPSBwYXJhbXMucHViO1xuICBlbHNlXG4gICAgdGhpcy5fcHViQnl0ZXMgPSBwYXJzZUJ5dGVzKHBhcmFtcy5wdWIpO1xufVxuXG5LZXlQYWlyLmZyb21QdWJsaWMgPSBmdW5jdGlvbiBmcm9tUHVibGljKGVkZHNhLCBwdWIpIHtcbiAgaWYgKHB1YiBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHB1YjtcbiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVkZHNhLCB7IHB1YjogcHViIH0pO1xufTtcblxuS2V5UGFpci5mcm9tU2VjcmV0ID0gZnVuY3Rpb24gZnJvbVNlY3JldChlZGRzYSwgc2VjcmV0KSB7XG4gIGlmIChzZWNyZXQgaW5zdGFuY2VvZiBLZXlQYWlyKVxuICAgIHJldHVybiBzZWNyZXQ7XG4gIHJldHVybiBuZXcgS2V5UGFpcihlZGRzYSwgeyBzZWNyZXQ6IHNlY3JldCB9KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnNlY3JldCA9IGZ1bmN0aW9uIHNlY3JldCgpIHtcbiAgcmV0dXJuIHRoaXMuX3NlY3JldDtcbn07XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwdWJCeXRlcycsIGZ1bmN0aW9uIHB1YkJ5dGVzKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5lbmNvZGVQb2ludCh0aGlzLnB1YigpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHViJywgZnVuY3Rpb24gcHViKCkge1xuICBpZiAodGhpcy5fcHViQnl0ZXMpXG4gICAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlUG9pbnQodGhpcy5fcHViQnl0ZXMpO1xuICByZXR1cm4gdGhpcy5lZGRzYS5nLm11bCh0aGlzLnByaXYoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ3ByaXZCeXRlcycsIGZ1bmN0aW9uIHByaXZCeXRlcygpIHtcbiAgdmFyIGVkZHNhID0gdGhpcy5lZGRzYTtcbiAgdmFyIGhhc2ggPSB0aGlzLmhhc2goKTtcbiAgdmFyIGxhc3RJeCA9IGVkZHNhLmVuY29kaW5nTGVuZ3RoIC0gMTtcblxuICB2YXIgYSA9IGhhc2guc2xpY2UoMCwgZWRkc2EuZW5jb2RpbmdMZW5ndGgpO1xuICBhWzBdICY9IDI0ODtcbiAgYVtsYXN0SXhdICY9IDEyNztcbiAgYVtsYXN0SXhdIHw9IDY0O1xuXG4gIHJldHVybiBhO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwcml2JywgZnVuY3Rpb24gcHJpdigpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlSW50KHRoaXMucHJpdkJ5dGVzKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdoYXNoJywgZnVuY3Rpb24gaGFzaCgpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuaGFzaCgpLnVwZGF0ZSh0aGlzLnNlY3JldCgpKS5kaWdlc3QoKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAnbWVzc2FnZVByZWZpeCcsIGZ1bmN0aW9uIG1lc3NhZ2VQcmVmaXgoKSB7XG4gIHJldHVybiB0aGlzLmhhc2goKS5zbGljZSh0aGlzLmVkZHNhLmVuY29kaW5nTGVuZ3RoKTtcbn0pO1xuXG5LZXlQYWlyLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbihtZXNzYWdlKSB7XG4gIGFzc2VydCh0aGlzLl9zZWNyZXQsICdLZXlQYWlyIGNhbiBvbmx5IHZlcmlmeScpO1xuICByZXR1cm4gdGhpcy5lZGRzYS5zaWduKG1lc3NhZ2UsIHRoaXMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UsIHNpZykge1xuICByZXR1cm4gdGhpcy5lZGRzYS52ZXJpZnkobWVzc2FnZSwgc2lnLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFNlY3JldCA9IGZ1bmN0aW9uIGdldFNlY3JldChlbmMpIHtcbiAgYXNzZXJ0KHRoaXMuX3NlY3JldCwgJ0tleVBhaXIgaXMgcHVibGljIG9ubHknKTtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLnNlY3JldCgpLCBlbmMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHVibGljID0gZnVuY3Rpb24gZ2V0UHVibGljKGVuYykge1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHRoaXMucHViQnl0ZXMoKSwgZW5jKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gS2V5UGFpcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xudmFyIGNhY2hlZFByb3BlcnR5ID0gdXRpbHMuY2FjaGVkUHJvcGVydHk7XG52YXIgcGFyc2VCeXRlcyA9IHV0aWxzLnBhcnNlQnl0ZXM7XG5cbi8qKlxuKiBAcGFyYW0ge0VERFNBfSBlZGRzYSAtIGVkZHNhIGluc3RhbmNlXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fE9iamVjdH0gc2lnIC1cbiogQHBhcmFtIHtBcnJheTxCeXRlcz58UG9pbnR9IFtzaWcuUl0gLSBSIHBvaW50IGFzIFBvaW50IG9yIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fGJufSBbc2lnLlNdIC0gUyBzY2FsYXIgYXMgYm4gb3IgYnl0ZXNcbiogQHBhcmFtIHtBcnJheTxCeXRlcz59IFtzaWcuUmVuY29kZWRdIC0gUiBwb2ludCBlbmNvZGVkXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fSBbc2lnLlNlbmNvZGVkXSAtIFMgc2NhbGFyIGVuY29kZWRcbiovXG5mdW5jdGlvbiBTaWduYXR1cmUoZWRkc2EsIHNpZykge1xuICB0aGlzLmVkZHNhID0gZWRkc2E7XG5cbiAgaWYgKHR5cGVvZiBzaWcgIT09ICdvYmplY3QnKVxuICAgIHNpZyA9IHBhcnNlQnl0ZXMoc2lnKTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShzaWcpKSB7XG4gICAgc2lnID0ge1xuICAgICAgUjogc2lnLnNsaWNlKDAsIGVkZHNhLmVuY29kaW5nTGVuZ3RoKSxcbiAgICAgIFM6IHNpZy5zbGljZShlZGRzYS5lbmNvZGluZ0xlbmd0aClcbiAgICB9O1xuICB9XG5cbiAgYXNzZXJ0KHNpZy5SICYmIHNpZy5TLCAnU2lnbmF0dXJlIHdpdGhvdXQgUiBvciBTJyk7XG5cbiAgaWYgKGVkZHNhLmlzUG9pbnQoc2lnLlIpKVxuICAgIHRoaXMuX1IgPSBzaWcuUjtcbiAgaWYgKHNpZy5TIGluc3RhbmNlb2YgQk4pXG4gICAgdGhpcy5fUyA9IHNpZy5TO1xuXG4gIHRoaXMuX1JlbmNvZGVkID0gQXJyYXkuaXNBcnJheShzaWcuUikgPyBzaWcuUiA6IHNpZy5SZW5jb2RlZDtcbiAgdGhpcy5fU2VuY29kZWQgPSBBcnJheS5pc0FycmF5KHNpZy5TKSA/IHNpZy5TIDogc2lnLlNlbmNvZGVkO1xufVxuXG5jYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdTJywgZnVuY3Rpb24gUygpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlSW50KHRoaXMuU2VuY29kZWQoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnUicsIGZ1bmN0aW9uIFIoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZVBvaW50KHRoaXMuUmVuY29kZWQoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnUmVuY29kZWQnLCBmdW5jdGlvbiBSZW5jb2RlZCgpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZW5jb2RlUG9pbnQodGhpcy5SKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KFNpZ25hdHVyZSwgJ1NlbmNvZGVkJywgZnVuY3Rpb24gU2VuY29kZWQoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmVuY29kZUludCh0aGlzLlMoKSk7XG59KTtcblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b0J5dGVzID0gZnVuY3Rpb24gdG9CeXRlcygpIHtcbiAgcmV0dXJuIHRoaXMuUmVuY29kZWQoKS5jb25jYXQodGhpcy5TZW5jb2RlZCgpKTtcbn07XG5cblNpZ25hdHVyZS5wcm90b3R5cGUudG9IZXggPSBmdW5jdGlvbiB0b0hleCgpIHtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLnRvQnl0ZXMoKSwgJ2hleCcpLnRvVXBwZXJDYXNlKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNpZ25hdHVyZTtcbiIsIi8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvc2VsZi1zaWduZWQvYmxvYi9naC1wYWdlcy9saWIvYXNuMS5qc1xuLy8gRmVkb3IsIHlvdSBhcmUgYW1hemluZy5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYXNuMSA9IHJlcXVpcmUoJ2FzbjEuanMnKVxuXG5leHBvcnRzLmNlcnRpZmljYXRlID0gcmVxdWlyZSgnLi9jZXJ0aWZpY2F0ZScpXG5cbnZhciBSU0FQcml2YXRlS2V5ID0gYXNuMS5kZWZpbmUoJ1JTQVByaXZhdGVLZXknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ21vZHVsdXMnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHVibGljRXhwb25lbnQnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpdmF0ZUV4cG9uZW50JykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaW1lMScpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcmltZTInKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnZXhwb25lbnQxJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2V4cG9uZW50MicpLmludCgpLFxuICAgIHRoaXMua2V5KCdjb2VmZmljaWVudCcpLmludCgpXG4gIClcbn0pXG5leHBvcnRzLlJTQVByaXZhdGVLZXkgPSBSU0FQcml2YXRlS2V5XG5cbnZhciBSU0FQdWJsaWNLZXkgPSBhc24xLmRlZmluZSgnUlNBUHVibGljS2V5JywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnbW9kdWx1cycpLmludCgpLFxuICAgIHRoaXMua2V5KCdwdWJsaWNFeHBvbmVudCcpLmludCgpXG4gIClcbn0pXG5leHBvcnRzLlJTQVB1YmxpY0tleSA9IFJTQVB1YmxpY0tleVxuXG52YXIgUHVibGljS2V5ID0gYXNuMS5kZWZpbmUoJ1N1YmplY3RQdWJsaWNLZXlJbmZvJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHVibGljS2V5JykuYml0c3RyKClcbiAgKVxufSlcbmV4cG9ydHMuUHVibGljS2V5ID0gUHVibGljS2V5XG5cbnZhciBBbGdvcml0aG1JZGVudGlmaWVyID0gYXNuMS5kZWZpbmUoJ0FsZ29yaXRobUlkZW50aWZpZXInLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS5vYmppZCgpLFxuICAgIHRoaXMua2V5KCdub25lJykubnVsbF8oKS5vcHRpb25hbCgpLFxuICAgIHRoaXMua2V5KCdjdXJ2ZScpLm9iamlkKCkub3B0aW9uYWwoKSxcbiAgICB0aGlzLmtleSgncGFyYW1zJykuc2VxKCkub2JqKFxuICAgICAgdGhpcy5rZXkoJ3AnKS5pbnQoKSxcbiAgICAgIHRoaXMua2V5KCdxJykuaW50KCksXG4gICAgICB0aGlzLmtleSgnZycpLmludCgpXG4gICAgKS5vcHRpb25hbCgpXG4gIClcbn0pXG5cbnZhciBQcml2YXRlS2V5SW5mbyA9IGFzbjEuZGVmaW5lKCdQcml2YXRlS2V5SW5mbycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHJpdmF0ZUtleScpLm9jdHN0cigpXG4gIClcbn0pXG5leHBvcnRzLlByaXZhdGVLZXkgPSBQcml2YXRlS2V5SW5mb1xudmFyIEVuY3J5cHRlZFByaXZhdGVLZXlJbmZvID0gYXNuMS5kZWZpbmUoJ0VuY3J5cHRlZFByaXZhdGVLZXlJbmZvJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykuc2VxKCkub2JqKFxuICAgICAgdGhpcy5rZXkoJ2lkJykub2JqaWQoKSxcbiAgICAgIHRoaXMua2V5KCdkZWNyeXB0Jykuc2VxKCkub2JqKFxuICAgICAgICB0aGlzLmtleSgna2RlJykuc2VxKCkub2JqKFxuICAgICAgICAgIHRoaXMua2V5KCdpZCcpLm9iamlkKCksXG4gICAgICAgICAgdGhpcy5rZXkoJ2tkZXBhcmFtcycpLnNlcSgpLm9iaihcbiAgICAgICAgICAgIHRoaXMua2V5KCdzYWx0Jykub2N0c3RyKCksXG4gICAgICAgICAgICB0aGlzLmtleSgnaXRlcnMnKS5pbnQoKVxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgdGhpcy5rZXkoJ2NpcGhlcicpLnNlcSgpLm9iaihcbiAgICAgICAgICB0aGlzLmtleSgnYWxnbycpLm9iamlkKCksXG4gICAgICAgICAgdGhpcy5rZXkoJ2l2Jykub2N0c3RyKClcbiAgICAgICAgKVxuICAgICAgKVxuICAgICksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RQcml2YXRlS2V5Jykub2N0c3RyKClcbiAgKVxufSlcblxuZXhwb3J0cy5FbmNyeXB0ZWRQcml2YXRlS2V5ID0gRW5jcnlwdGVkUHJpdmF0ZUtleUluZm9cblxudmFyIERTQVByaXZhdGVLZXkgPSBhc24xLmRlZmluZSgnRFNBUHJpdmF0ZUtleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncCcpLmludCgpLFxuICAgIHRoaXMua2V5KCdxJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2cnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHViX2tleScpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcml2X2tleScpLmludCgpXG4gIClcbn0pXG5leHBvcnRzLkRTQVByaXZhdGVLZXkgPSBEU0FQcml2YXRlS2V5XG5cbmV4cG9ydHMuRFNBcGFyYW0gPSBhc24xLmRlZmluZSgnRFNBcGFyYW0nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaW50KClcbn0pXG5cbnZhciBFQ1ByaXZhdGVLZXkgPSBhc24xLmRlZmluZSgnRUNQcml2YXRlS2V5JywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcml2YXRlS2V5Jykub2N0c3RyKCksXG4gICAgdGhpcy5rZXkoJ3BhcmFtZXRlcnMnKS5vcHRpb25hbCgpLmV4cGxpY2l0KDApLnVzZShFQ1BhcmFtZXRlcnMpLFxuICAgIHRoaXMua2V5KCdwdWJsaWNLZXknKS5vcHRpb25hbCgpLmV4cGxpY2l0KDEpLmJpdHN0cigpXG4gIClcbn0pXG5leHBvcnRzLkVDUHJpdmF0ZUtleSA9IEVDUHJpdmF0ZUtleVxuXG52YXIgRUNQYXJhbWV0ZXJzID0gYXNuMS5kZWZpbmUoJ0VDUGFyYW1ldGVycycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jaG9pY2Uoe1xuICAgIG5hbWVkQ3VydmU6IHRoaXMub2JqaWQoKVxuICB9KVxufSlcblxuZXhwb3J0cy5zaWduYXR1cmUgPSBhc24xLmRlZmluZSgnc2lnbmF0dXJlJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgncicpLmludCgpLFxuICAgIHRoaXMua2V5KCdzJykuaW50KClcbiAgKVxufSlcbiIsInZhciBhc24xID0gcmVxdWlyZSgnLi4vYXNuMScpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIGFwaSA9IGV4cG9ydHM7XG5cbmFwaS5kZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUobmFtZSwgYm9keSkge1xuICByZXR1cm4gbmV3IEVudGl0eShuYW1lLCBib2R5KTtcbn07XG5cbmZ1bmN0aW9uIEVudGl0eShuYW1lLCBib2R5KSB7XG4gIHRoaXMubmFtZSA9IG5hbWU7XG4gIHRoaXMuYm9keSA9IGJvZHk7XG5cbiAgdGhpcy5kZWNvZGVycyA9IHt9O1xuICB0aGlzLmVuY29kZXJzID0ge307XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLl9jcmVhdGVOYW1lZCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkKGJhc2UpIHtcbiAgdmFyIG5hbWVkO1xuICB0cnkge1xuICAgIG5hbWVkID0gcmVxdWlyZSgndm0nKS5ydW5JblRoaXNDb250ZXh0KFxuICAgICAgJyhmdW5jdGlvbiAnICsgdGhpcy5uYW1lICsgJyhlbnRpdHkpIHtcXG4nICtcbiAgICAgICcgIHRoaXMuX2luaXROYW1lZChlbnRpdHkpO1xcbicgK1xuICAgICAgJ30pJ1xuICAgICk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBuYW1lZCA9IGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICAgIHRoaXMuX2luaXROYW1lZChlbnRpdHkpO1xuICAgIH07XG4gIH1cbiAgaW5oZXJpdHMobmFtZWQsIGJhc2UpO1xuICBuYW1lZC5wcm90b3R5cGUuX2luaXROYW1lZCA9IGZ1bmN0aW9uIGluaXRuYW1lZChlbnRpdHkpIHtcbiAgICBiYXNlLmNhbGwodGhpcywgZW50aXR5KTtcbiAgfTtcblxuICByZXR1cm4gbmV3IG5hbWVkKHRoaXMpO1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5fZ2V0RGVjb2RlciA9IGZ1bmN0aW9uIF9nZXREZWNvZGVyKGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ2Rlcic7XG4gIC8vIExhemlseSBjcmVhdGUgZGVjb2RlclxuICBpZiAoIXRoaXMuZGVjb2RlcnMuaGFzT3duUHJvcGVydHkoZW5jKSlcbiAgICB0aGlzLmRlY29kZXJzW2VuY10gPSB0aGlzLl9jcmVhdGVOYW1lZChhc24xLmRlY29kZXJzW2VuY10pO1xuICByZXR1cm4gdGhpcy5kZWNvZGVyc1tlbmNdO1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoZGF0YSwgZW5jLCBvcHRpb25zKSB7XG4gIHJldHVybiB0aGlzLl9nZXREZWNvZGVyKGVuYykuZGVjb2RlKGRhdGEsIG9wdGlvbnMpO1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5fZ2V0RW5jb2RlciA9IGZ1bmN0aW9uIF9nZXRFbmNvZGVyKGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ2Rlcic7XG4gIC8vIExhemlseSBjcmVhdGUgZW5jb2RlclxuICBpZiAoIXRoaXMuZW5jb2RlcnMuaGFzT3duUHJvcGVydHkoZW5jKSlcbiAgICB0aGlzLmVuY29kZXJzW2VuY10gPSB0aGlzLl9jcmVhdGVOYW1lZChhc24xLmVuY29kZXJzW2VuY10pO1xuICByZXR1cm4gdGhpcy5lbmNvZGVyc1tlbmNdO1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgZW5jLCAvKiBpbnRlcm5hbCAqLyByZXBvcnRlcikge1xuICByZXR1cm4gdGhpcy5fZ2V0RW5jb2RlcihlbmMpLmVuY29kZShkYXRhLCByZXBvcnRlcik7XG59O1xuIiwidmFyIGluZGV4T2YgPSBmdW5jdGlvbiAoeHMsIGl0ZW0pIHtcbiAgICBpZiAoeHMuaW5kZXhPZikgcmV0dXJuIHhzLmluZGV4T2YoaXRlbSk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh4c1tpXSA9PT0gaXRlbSkgcmV0dXJuIGk7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn07XG52YXIgT2JqZWN0X2tleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgaWYgKE9iamVjdC5rZXlzKSByZXR1cm4gT2JqZWN0LmtleXMob2JqKVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgcmVzID0gW107XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHJlcy5wdXNoKGtleSlcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG59O1xuXG52YXIgZm9yRWFjaCA9IGZ1bmN0aW9uICh4cywgZm4pIHtcbiAgICBpZiAoeHMuZm9yRWFjaCkgcmV0dXJuIHhzLmZvckVhY2goZm4pXG4gICAgZWxzZSBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZuKHhzW2ldLCBpLCB4cyk7XG4gICAgfVxufTtcblxudmFyIGRlZmluZVByb3AgPSAoZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnXycsIHt9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG5hbWUsIHtcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgb2JqW25hbWVdID0gdmFsdWU7XG4gICAgICAgIH07XG4gICAgfVxufSgpKTtcblxudmFyIGdsb2JhbHMgPSBbJ0FycmF5JywgJ0Jvb2xlYW4nLCAnRGF0ZScsICdFcnJvcicsICdFdmFsRXJyb3InLCAnRnVuY3Rpb24nLFxuJ0luZmluaXR5JywgJ0pTT04nLCAnTWF0aCcsICdOYU4nLCAnTnVtYmVyJywgJ09iamVjdCcsICdSYW5nZUVycm9yJyxcbidSZWZlcmVuY2VFcnJvcicsICdSZWdFeHAnLCAnU3RyaW5nJywgJ1N5bnRheEVycm9yJywgJ1R5cGVFcnJvcicsICdVUklFcnJvcicsXG4nZGVjb2RlVVJJJywgJ2RlY29kZVVSSUNvbXBvbmVudCcsICdlbmNvZGVVUkknLCAnZW5jb2RlVVJJQ29tcG9uZW50JywgJ2VzY2FwZScsXG4nZXZhbCcsICdpc0Zpbml0ZScsICdpc05hTicsICdwYXJzZUZsb2F0JywgJ3BhcnNlSW50JywgJ3VuZGVmaW5lZCcsICd1bmVzY2FwZSddO1xuXG5mdW5jdGlvbiBDb250ZXh0KCkge31cbkNvbnRleHQucHJvdG90eXBlID0ge307XG5cbnZhciBTY3JpcHQgPSBleHBvcnRzLlNjcmlwdCA9IGZ1bmN0aW9uIE5vZGVTY3JpcHQgKGNvZGUpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU2NyaXB0KSkgcmV0dXJuIG5ldyBTY3JpcHQoY29kZSk7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbn07XG5cblNjcmlwdC5wcm90b3R5cGUucnVuSW5Db250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICBpZiAoIShjb250ZXh0IGluc3RhbmNlb2YgQ29udGV4dCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIm5lZWRzIGEgJ2NvbnRleHQnIGFyZ3VtZW50LlwiKTtcbiAgICB9XG4gICAgXG4gICAgdmFyIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgIGlmICghaWZyYW1lLnN0eWxlKSBpZnJhbWUuc3R5bGUgPSB7fTtcbiAgICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgXG4gICAgdmFyIHdpbiA9IGlmcmFtZS5jb250ZW50V2luZG93O1xuICAgIHZhciB3RXZhbCA9IHdpbi5ldmFsLCB3RXhlY1NjcmlwdCA9IHdpbi5leGVjU2NyaXB0O1xuXG4gICAgaWYgKCF3RXZhbCAmJiB3RXhlY1NjcmlwdCkge1xuICAgICAgICAvLyB3aW4uZXZhbCgpIG1hZ2ljYWxseSBhcHBlYXJzIHdoZW4gdGhpcyBpcyBjYWxsZWQgaW4gSUU6XG4gICAgICAgIHdFeGVjU2NyaXB0LmNhbGwod2luLCAnbnVsbCcpO1xuICAgICAgICB3RXZhbCA9IHdpbi5ldmFsO1xuICAgIH1cbiAgICBcbiAgICBmb3JFYWNoKE9iamVjdF9rZXlzKGNvbnRleHQpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHdpbltrZXldID0gY29udGV4dFtrZXldO1xuICAgIH0pO1xuICAgIGZvckVhY2goZ2xvYmFscywgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoY29udGV4dFtrZXldKSB7XG4gICAgICAgICAgICB3aW5ba2V5XSA9IGNvbnRleHRba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIHZhciB3aW5LZXlzID0gT2JqZWN0X2tleXMod2luKTtcblxuICAgIHZhciByZXMgPSB3RXZhbC5jYWxsKHdpbiwgdGhpcy5jb2RlKTtcbiAgICBcbiAgICBmb3JFYWNoKE9iamVjdF9rZXlzKHdpbiksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgLy8gQXZvaWQgY29weWluZyBjaXJjdWxhciBvYmplY3RzIGxpa2UgYHRvcGAgYW5kIGB3aW5kb3dgIGJ5IG9ubHlcbiAgICAgICAgLy8gdXBkYXRpbmcgZXhpc3RpbmcgY29udGV4dCBwcm9wZXJ0aWVzIG9yIG5ldyBwcm9wZXJ0aWVzIGluIHRoZSBgd2luYFxuICAgICAgICAvLyB0aGF0IHdhcyBvbmx5IGludHJvZHVjZWQgYWZ0ZXIgdGhlIGV2YWwuXG4gICAgICAgIGlmIChrZXkgaW4gY29udGV4dCB8fCBpbmRleE9mKHdpbktleXMsIGtleSkgPT09IC0xKSB7XG4gICAgICAgICAgICBjb250ZXh0W2tleV0gPSB3aW5ba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgZm9yRWFjaChnbG9iYWxzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghKGtleSBpbiBjb250ZXh0KSkge1xuICAgICAgICAgICAgZGVmaW5lUHJvcChjb250ZXh0LCBrZXksIHdpbltrZXldKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICBcbiAgICByZXR1cm4gcmVzO1xufTtcblxuU2NyaXB0LnByb3RvdHlwZS5ydW5JblRoaXNDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBldmFsKHRoaXMuY29kZSk7IC8vIG1heWJlLi4uXG59O1xuXG5TY3JpcHQucHJvdG90eXBlLnJ1bkluTmV3Q29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgdmFyIGN0eCA9IFNjcmlwdC5jcmVhdGVDb250ZXh0KGNvbnRleHQpO1xuICAgIHZhciByZXMgPSB0aGlzLnJ1bkluQ29udGV4dChjdHgpO1xuXG4gICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgZm9yRWFjaChPYmplY3Rfa2V5cyhjdHgpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBjb250ZXh0W2tleV0gPSBjdHhba2V5XTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbn07XG5cbmZvckVhY2goT2JqZWN0X2tleXMoU2NyaXB0LnByb3RvdHlwZSksIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgZXhwb3J0c1tuYW1lXSA9IFNjcmlwdFtuYW1lXSA9IGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgICAgIHZhciBzID0gU2NyaXB0KGNvZGUpO1xuICAgICAgICByZXR1cm4gc1tuYW1lXS5hcHBseShzLCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgIH07XG59KTtcblxuZXhwb3J0cy5pc0NvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHJldHVybiBjb250ZXh0IGluc3RhbmNlb2YgQ29udGV4dDtcbn07XG5cbmV4cG9ydHMuY3JlYXRlU2NyaXB0ID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5TY3JpcHQoY29kZSk7XG59O1xuXG5leHBvcnRzLmNyZWF0ZUNvbnRleHQgPSBTY3JpcHQuY3JlYXRlQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgdmFyIGNvcHkgPSBuZXcgQ29udGV4dCgpO1xuICAgIGlmKHR5cGVvZiBjb250ZXh0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3JFYWNoKE9iamVjdF9rZXlzKGNvbnRleHQpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBjb3B5W2tleV0gPSBjb250ZXh0W2tleV07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY29weTtcbn07XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5mdW5jdGlvbiBSZXBvcnRlcihvcHRpb25zKSB7XG4gIHRoaXMuX3JlcG9ydGVyU3RhdGUgPSB7XG4gICAgb2JqOiBudWxsLFxuICAgIHBhdGg6IFtdLFxuICAgIG9wdGlvbnM6IG9wdGlvbnMgfHwge30sXG4gICAgZXJyb3JzOiBbXVxuICB9O1xufVxuZXhwb3J0cy5SZXBvcnRlciA9IFJlcG9ydGVyO1xuXG5SZXBvcnRlci5wcm90b3R5cGUuaXNFcnJvciA9IGZ1bmN0aW9uIGlzRXJyb3Iob2JqKSB7XG4gIHJldHVybiBvYmogaW5zdGFuY2VvZiBSZXBvcnRlckVycm9yO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiBzYXZlKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHJldHVybiB7IG9iajogc3RhdGUub2JqLCBwYXRoTGVuOiBzdGF0ZS5wYXRoLmxlbmd0aCB9O1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLnJlc3RvcmUgPSBmdW5jdGlvbiByZXN0b3JlKGRhdGEpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICBzdGF0ZS5vYmogPSBkYXRhLm9iajtcbiAgc3RhdGUucGF0aCA9IHN0YXRlLnBhdGguc2xpY2UoMCwgZGF0YS5wYXRoTGVuKTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5lbnRlcktleSA9IGZ1bmN0aW9uIGVudGVyS2V5KGtleSkge1xuICByZXR1cm4gdGhpcy5fcmVwb3J0ZXJTdGF0ZS5wYXRoLnB1c2goa2V5KTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5leGl0S2V5ID0gZnVuY3Rpb24gZXhpdEtleShpbmRleCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHN0YXRlLnBhdGggPSBzdGF0ZS5wYXRoLnNsaWNlKDAsIGluZGV4IC0gMSk7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUubGVhdmVLZXkgPSBmdW5jdGlvbiBsZWF2ZUtleShpbmRleCwga2V5LCB2YWx1ZSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHRoaXMuZXhpdEtleShpbmRleCk7XG4gIGlmIChzdGF0ZS5vYmogIT09IG51bGwpXG4gICAgc3RhdGUub2JqW2tleV0gPSB2YWx1ZTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5wYXRoID0gZnVuY3Rpb24gcGF0aCgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlcG9ydGVyU3RhdGUucGF0aC5qb2luKCcvJyk7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuZW50ZXJPYmplY3QgPSBmdW5jdGlvbiBlbnRlck9iamVjdCgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICB2YXIgcHJldiA9IHN0YXRlLm9iajtcbiAgc3RhdGUub2JqID0ge307XG4gIHJldHVybiBwcmV2O1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmxlYXZlT2JqZWN0ID0gZnVuY3Rpb24gbGVhdmVPYmplY3QocHJldikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHZhciBub3cgPSBzdGF0ZS5vYmo7XG4gIHN0YXRlLm9iaiA9IHByZXY7XG4gIHJldHVybiBub3c7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiBlcnJvcihtc2cpIHtcbiAgdmFyIGVycjtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICB2YXIgaW5oZXJpdGVkID0gbXNnIGluc3RhbmNlb2YgUmVwb3J0ZXJFcnJvcjtcbiAgaWYgKGluaGVyaXRlZCkge1xuICAgIGVyciA9IG1zZztcbiAgfSBlbHNlIHtcbiAgICBlcnIgPSBuZXcgUmVwb3J0ZXJFcnJvcihzdGF0ZS5wYXRoLm1hcChmdW5jdGlvbihlbGVtKSB7XG4gICAgICByZXR1cm4gJ1snICsgSlNPTi5zdHJpbmdpZnkoZWxlbSkgKyAnXSc7XG4gICAgfSkuam9pbignJyksIG1zZy5tZXNzYWdlIHx8IG1zZywgbXNnLnN0YWNrKTtcbiAgfVxuXG4gIGlmICghc3RhdGUub3B0aW9ucy5wYXJ0aWFsKVxuICAgIHRocm93IGVycjtcblxuICBpZiAoIWluaGVyaXRlZClcbiAgICBzdGF0ZS5lcnJvcnMucHVzaChlcnIpO1xuXG4gIHJldHVybiBlcnI7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUud3JhcFJlc3VsdCA9IGZ1bmN0aW9uIHdyYXBSZXN1bHQocmVzdWx0KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG4gIGlmICghc3RhdGUub3B0aW9ucy5wYXJ0aWFsKVxuICAgIHJldHVybiByZXN1bHQ7XG5cbiAgcmV0dXJuIHtcbiAgICByZXN1bHQ6IHRoaXMuaXNFcnJvcihyZXN1bHQpID8gbnVsbCA6IHJlc3VsdCxcbiAgICBlcnJvcnM6IHN0YXRlLmVycm9yc1xuICB9O1xufTtcblxuZnVuY3Rpb24gUmVwb3J0ZXJFcnJvcihwYXRoLCBtc2cpIHtcbiAgdGhpcy5wYXRoID0gcGF0aDtcbiAgdGhpcy5yZXRocm93KG1zZyk7XG59O1xuaW5oZXJpdHMoUmVwb3J0ZXJFcnJvciwgRXJyb3IpO1xuXG5SZXBvcnRlckVycm9yLnByb3RvdHlwZS5yZXRocm93ID0gZnVuY3Rpb24gcmV0aHJvdyhtc2cpIHtcbiAgdGhpcy5tZXNzYWdlID0gbXNnICsgJyBhdDogJyArICh0aGlzLnBhdGggfHwgJyhzaGFsbG93KScpO1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgUmVwb3J0ZXJFcnJvcik7XG5cbiAgaWYgKCF0aGlzLnN0YWNrKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIElFIG9ubHkgYWRkcyBzdGFjayB3aGVuIHRocm93blxuICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMubWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5zdGFjayA9IGUuc3RhY2s7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufTtcbiIsInZhciBSZXBvcnRlciA9IHJlcXVpcmUoJy4uL2Jhc2UnKS5SZXBvcnRlcjtcbnZhciBFbmNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi4vYmFzZScpLkVuY29kZXJCdWZmZXI7XG52YXIgRGVjb2RlckJ1ZmZlciA9IHJlcXVpcmUoJy4uL2Jhc2UnKS5EZWNvZGVyQnVmZmVyO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuLy8gU3VwcG9ydGVkIHRhZ3NcbnZhciB0YWdzID0gW1xuICAnc2VxJywgJ3NlcW9mJywgJ3NldCcsICdzZXRvZicsICdvYmppZCcsICdib29sJyxcbiAgJ2dlbnRpbWUnLCAndXRjdGltZScsICdudWxsXycsICdlbnVtJywgJ2ludCcsICdvYmpEZXNjJyxcbiAgJ2JpdHN0cicsICdibXBzdHInLCAnY2hhcnN0cicsICdnZW5zdHInLCAnZ3JhcGhzdHInLCAnaWE1c3RyJywgJ2lzbzY0NnN0cicsXG4gICdudW1zdHInLCAnb2N0c3RyJywgJ3ByaW50c3RyJywgJ3Q2MXN0cicsICd1bmlzdHInLCAndXRmOHN0cicsICd2aWRlb3N0cidcbl07XG5cbi8vIFB1YmxpYyBtZXRob2RzIGxpc3RcbnZhciBtZXRob2RzID0gW1xuICAna2V5JywgJ29iaicsICd1c2UnLCAnb3B0aW9uYWwnLCAnZXhwbGljaXQnLCAnaW1wbGljaXQnLCAnZGVmJywgJ2Nob2ljZScsXG4gICdhbnknLCAnY29udGFpbnMnXG5dLmNvbmNhdCh0YWdzKTtcblxuLy8gT3ZlcnJpZGVkIG1ldGhvZHMgbGlzdFxudmFyIG92ZXJyaWRlZCA9IFtcbiAgJ19wZWVrVGFnJywgJ19kZWNvZGVUYWcnLCAnX3VzZScsXG4gICdfZGVjb2RlU3RyJywgJ19kZWNvZGVPYmppZCcsICdfZGVjb2RlVGltZScsXG4gICdfZGVjb2RlTnVsbCcsICdfZGVjb2RlSW50JywgJ19kZWNvZGVCb29sJywgJ19kZWNvZGVMaXN0JyxcblxuICAnX2VuY29kZUNvbXBvc2l0ZScsICdfZW5jb2RlU3RyJywgJ19lbmNvZGVPYmppZCcsICdfZW5jb2RlVGltZScsXG4gICdfZW5jb2RlTnVsbCcsICdfZW5jb2RlSW50JywgJ19lbmNvZGVCb29sJ1xuXTtcblxuZnVuY3Rpb24gTm9kZShlbmMsIHBhcmVudCkge1xuICB2YXIgc3RhdGUgPSB7fTtcbiAgdGhpcy5fYmFzZVN0YXRlID0gc3RhdGU7XG5cbiAgc3RhdGUuZW5jID0gZW5jO1xuXG4gIHN0YXRlLnBhcmVudCA9IHBhcmVudCB8fCBudWxsO1xuICBzdGF0ZS5jaGlsZHJlbiA9IG51bGw7XG5cbiAgLy8gU3RhdGVcbiAgc3RhdGUudGFnID0gbnVsbDtcbiAgc3RhdGUuYXJncyA9IG51bGw7XG4gIHN0YXRlLnJldmVyc2VBcmdzID0gbnVsbDtcbiAgc3RhdGUuY2hvaWNlID0gbnVsbDtcbiAgc3RhdGUub3B0aW9uYWwgPSBmYWxzZTtcbiAgc3RhdGUuYW55ID0gZmFsc2U7XG4gIHN0YXRlLm9iaiA9IGZhbHNlO1xuICBzdGF0ZS51c2UgPSBudWxsO1xuICBzdGF0ZS51c2VEZWNvZGVyID0gbnVsbDtcbiAgc3RhdGUua2V5ID0gbnVsbDtcbiAgc3RhdGVbJ2RlZmF1bHQnXSA9IG51bGw7XG4gIHN0YXRlLmV4cGxpY2l0ID0gbnVsbDtcbiAgc3RhdGUuaW1wbGljaXQgPSBudWxsO1xuICBzdGF0ZS5jb250YWlucyA9IG51bGw7XG5cbiAgLy8gU2hvdWxkIGNyZWF0ZSBuZXcgaW5zdGFuY2Ugb24gZWFjaCBtZXRob2RcbiAgaWYgKCFzdGF0ZS5wYXJlbnQpIHtcbiAgICBzdGF0ZS5jaGlsZHJlbiA9IFtdO1xuICAgIHRoaXMuX3dyYXAoKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBOb2RlO1xuXG52YXIgc3RhdGVQcm9wcyA9IFtcbiAgJ2VuYycsICdwYXJlbnQnLCAnY2hpbGRyZW4nLCAndGFnJywgJ2FyZ3MnLCAncmV2ZXJzZUFyZ3MnLCAnY2hvaWNlJyxcbiAgJ29wdGlvbmFsJywgJ2FueScsICdvYmonLCAndXNlJywgJ2FsdGVyZWRVc2UnLCAna2V5JywgJ2RlZmF1bHQnLCAnZXhwbGljaXQnLFxuICAnaW1wbGljaXQnLCAnY29udGFpbnMnXG5dO1xuXG5Ob2RlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIHZhciBjc3RhdGUgPSB7fTtcbiAgc3RhdGVQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICBjc3RhdGVbcHJvcF0gPSBzdGF0ZVtwcm9wXTtcbiAgfSk7XG4gIHZhciByZXMgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcihjc3RhdGUucGFyZW50KTtcbiAgcmVzLl9iYXNlU3RhdGUgPSBjc3RhdGU7XG4gIHJldHVybiByZXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fd3JhcCA9IGZ1bmN0aW9uIHdyYXAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIHRoaXNbbWV0aG9kXSA9IGZ1bmN0aW9uIF93cmFwcGVkTWV0aG9kKCkge1xuICAgICAgdmFyIGNsb25lID0gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyk7XG4gICAgICBzdGF0ZS5jaGlsZHJlbi5wdXNoKGNsb25lKTtcbiAgICAgIHJldHVybiBjbG9uZVttZXRob2RdLmFwcGx5KGNsb25lLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0sIHRoaXMpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KGJvZHkpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5wYXJlbnQgPT09IG51bGwpO1xuICBib2R5LmNhbGwodGhpcyk7XG5cbiAgLy8gRmlsdGVyIGNoaWxkcmVuXG4gIHN0YXRlLmNoaWxkcmVuID0gc3RhdGUuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkLl9iYXNlU3RhdGUucGFyZW50ID09PSB0aGlzO1xuICB9LCB0aGlzKTtcbiAgYXNzZXJ0LmVxdWFsKHN0YXRlLmNoaWxkcmVuLmxlbmd0aCwgMSwgJ1Jvb3Qgbm9kZSBjYW4gaGF2ZSBvbmx5IG9uZSBjaGlsZCcpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX3VzZUFyZ3MgPSBmdW5jdGlvbiB1c2VBcmdzKGFyZ3MpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIC8vIEZpbHRlciBjaGlsZHJlbiBhbmQgYXJnc1xuICB2YXIgY2hpbGRyZW4gPSBhcmdzLmZpbHRlcihmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvcjtcbiAgfSwgdGhpcyk7XG4gIGFyZ3MgPSBhcmdzLmZpbHRlcihmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gIShhcmcgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfSwgdGhpcyk7XG5cbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzc2VydChzdGF0ZS5jaGlsZHJlbiA9PT0gbnVsbCk7XG4gICAgc3RhdGUuY2hpbGRyZW4gPSBjaGlsZHJlbjtcblxuICAgIC8vIFJlcGxhY2UgcGFyZW50IHRvIG1haW50YWluIGJhY2t3YXJkIGxpbmtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICBjaGlsZC5fYmFzZVN0YXRlLnBhcmVudCA9IHRoaXM7XG4gICAgfSwgdGhpcyk7XG4gIH1cbiAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgYXNzZXJ0KHN0YXRlLmFyZ3MgPT09IG51bGwpO1xuICAgIHN0YXRlLmFyZ3MgPSBhcmdzO1xuICAgIHN0YXRlLnJldmVyc2VBcmdzID0gYXJncy5tYXAoZnVuY3Rpb24oYXJnKSB7XG4gICAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ29iamVjdCcgfHwgYXJnLmNvbnN0cnVjdG9yICE9PSBPYmplY3QpXG4gICAgICAgIHJldHVybiBhcmc7XG5cbiAgICAgIHZhciByZXMgPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKGFyZykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGtleSA9PSAoa2V5IHwgMCkpXG4gICAgICAgICAga2V5IHw9IDA7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFyZ1trZXldO1xuICAgICAgICByZXNbdmFsdWVdID0ga2V5O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0pO1xuICB9XG59O1xuXG4vL1xuLy8gT3ZlcnJpZGVkIG1ldGhvZHNcbi8vXG5cbm92ZXJyaWRlZC5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICBOb2RlLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24gX292ZXJyaWRlZCgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArICcgbm90IGltcGxlbWVudGVkIGZvciBlbmNvZGluZzogJyArIHN0YXRlLmVuYyk7XG4gIH07XG59KTtcblxuLy9cbi8vIFB1YmxpYyBtZXRob2RzXG4vL1xuXG50YWdzLmZvckVhY2goZnVuY3Rpb24odGFnKSB7XG4gIE5vZGUucHJvdG90eXBlW3RhZ10gPSBmdW5jdGlvbiBfdGFnTWV0aG9kKCkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgICBhc3NlcnQoc3RhdGUudGFnID09PSBudWxsKTtcbiAgICBzdGF0ZS50YWcgPSB0YWc7XG5cbiAgICB0aGlzLl91c2VBcmdzKGFyZ3MpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59KTtcblxuTm9kZS5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGl0ZW0pIHtcbiAgYXNzZXJ0KGl0ZW0pO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLnVzZSA9PT0gbnVsbCk7XG4gIHN0YXRlLnVzZSA9IGl0ZW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5vcHRpb25hbCA9IGZ1bmN0aW9uIG9wdGlvbmFsKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgc3RhdGUub3B0aW9uYWwgPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuZGVmID0gZnVuY3Rpb24gZGVmKHZhbCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlWydkZWZhdWx0J10gPT09IG51bGwpO1xuICBzdGF0ZVsnZGVmYXVsdCddID0gdmFsO1xuICBzdGF0ZS5vcHRpb25hbCA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5leHBsaWNpdCA9IGZ1bmN0aW9uIGV4cGxpY2l0KG51bSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLmV4cGxpY2l0ID09PSBudWxsICYmIHN0YXRlLmltcGxpY2l0ID09PSBudWxsKTtcbiAgc3RhdGUuZXhwbGljaXQgPSBudW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5pbXBsaWNpdCA9IGZ1bmN0aW9uIGltcGxpY2l0KG51bSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLmV4cGxpY2l0ID09PSBudWxsICYmIHN0YXRlLmltcGxpY2l0ID09PSBudWxsKTtcbiAgc3RhdGUuaW1wbGljaXQgPSBudW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5vYmogPSBmdW5jdGlvbiBvYmooKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gIHN0YXRlLm9iaiA9IHRydWU7XG5cbiAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKVxuICAgIHRoaXMuX3VzZUFyZ3MoYXJncyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5rZXkgPSBmdW5jdGlvbiBrZXkobmV3S2V5KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUua2V5ID09PSBudWxsKTtcbiAgc3RhdGUua2V5ID0gbmV3S2V5O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuYW55ID0gZnVuY3Rpb24gYW55KCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgc3RhdGUuYW55ID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmNob2ljZSA9IGZ1bmN0aW9uIGNob2ljZShvYmopIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5jaG9pY2UgPT09IG51bGwpO1xuICBzdGF0ZS5jaG9pY2UgPSBvYmo7XG4gIHRoaXMuX3VzZUFyZ3MoT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9KSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zKGl0ZW0pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS51c2UgPT09IG51bGwpO1xuICBzdGF0ZS5jb250YWlucyA9IGl0ZW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gRGVjb2Rpbmdcbi8vXG5cbk5vZGUucHJvdG90eXBlLl9kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIC8vIERlY29kZSByb290IG5vZGVcbiAgaWYgKHN0YXRlLnBhcmVudCA9PT0gbnVsbClcbiAgICByZXR1cm4gaW5wdXQud3JhcFJlc3VsdChzdGF0ZS5jaGlsZHJlblswXS5fZGVjb2RlKGlucHV0LCBvcHRpb25zKSk7XG5cbiAgdmFyIHJlc3VsdCA9IHN0YXRlWydkZWZhdWx0J107XG4gIHZhciBwcmVzZW50ID0gdHJ1ZTtcblxuICB2YXIgcHJldktleSA9IG51bGw7XG4gIGlmIChzdGF0ZS5rZXkgIT09IG51bGwpXG4gICAgcHJldktleSA9IGlucHV0LmVudGVyS2V5KHN0YXRlLmtleSk7XG5cbiAgLy8gQ2hlY2sgaWYgdGFnIGlzIHRoZXJlXG4gIGlmIChzdGF0ZS5vcHRpb25hbCkge1xuICAgIHZhciB0YWcgPSBudWxsO1xuICAgIGlmIChzdGF0ZS5leHBsaWNpdCAhPT0gbnVsbClcbiAgICAgIHRhZyA9IHN0YXRlLmV4cGxpY2l0O1xuICAgIGVsc2UgaWYgKHN0YXRlLmltcGxpY2l0ICE9PSBudWxsKVxuICAgICAgdGFnID0gc3RhdGUuaW1wbGljaXQ7XG4gICAgZWxzZSBpZiAoc3RhdGUudGFnICE9PSBudWxsKVxuICAgICAgdGFnID0gc3RhdGUudGFnO1xuXG4gICAgaWYgKHRhZyA9PT0gbnVsbCAmJiAhc3RhdGUuYW55KSB7XG4gICAgICAvLyBUcmlhbCBhbmQgRXJyb3JcbiAgICAgIHZhciBzYXZlID0gaW5wdXQuc2F2ZSgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHN0YXRlLmNob2ljZSA9PT0gbnVsbClcbiAgICAgICAgICB0aGlzLl9kZWNvZGVHZW5lcmljKHN0YXRlLnRhZywgaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgdGhpcy5fZGVjb2RlQ2hvaWNlKGlucHV0LCBvcHRpb25zKTtcbiAgICAgICAgcHJlc2VudCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHByZXNlbnQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlucHV0LnJlc3RvcmUoc2F2ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXNlbnQgPSB0aGlzLl9wZWVrVGFnKGlucHV0LCB0YWcsIHN0YXRlLmFueSk7XG5cbiAgICAgIGlmIChpbnB1dC5pc0Vycm9yKHByZXNlbnQpKVxuICAgICAgICByZXR1cm4gcHJlc2VudDtcbiAgICB9XG4gIH1cblxuICAvLyBQdXNoIG9iamVjdCBvbiBzdGFja1xuICB2YXIgcHJldk9iajtcbiAgaWYgKHN0YXRlLm9iaiAmJiBwcmVzZW50KVxuICAgIHByZXZPYmogPSBpbnB1dC5lbnRlck9iamVjdCgpO1xuXG4gIGlmIChwcmVzZW50KSB7XG4gICAgLy8gVW53cmFwIGV4cGxpY2l0IHZhbHVlc1xuICAgIGlmIChzdGF0ZS5leHBsaWNpdCAhPT0gbnVsbCkge1xuICAgICAgdmFyIGV4cGxpY2l0ID0gdGhpcy5fZGVjb2RlVGFnKGlucHV0LCBzdGF0ZS5leHBsaWNpdCk7XG4gICAgICBpZiAoaW5wdXQuaXNFcnJvcihleHBsaWNpdCkpXG4gICAgICAgIHJldHVybiBleHBsaWNpdDtcbiAgICAgIGlucHV0ID0gZXhwbGljaXQ7XG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0ID0gaW5wdXQub2Zmc2V0O1xuXG4gICAgLy8gVW53cmFwIGltcGxpY2l0IGFuZCBub3JtYWwgdmFsdWVzXG4gICAgaWYgKHN0YXRlLnVzZSA9PT0gbnVsbCAmJiBzdGF0ZS5jaG9pY2UgPT09IG51bGwpIHtcbiAgICAgIGlmIChzdGF0ZS5hbnkpXG4gICAgICAgIHZhciBzYXZlID0gaW5wdXQuc2F2ZSgpO1xuICAgICAgdmFyIGJvZHkgPSB0aGlzLl9kZWNvZGVUYWcoXG4gICAgICAgIGlucHV0LFxuICAgICAgICBzdGF0ZS5pbXBsaWNpdCAhPT0gbnVsbCA/IHN0YXRlLmltcGxpY2l0IDogc3RhdGUudGFnLFxuICAgICAgICBzdGF0ZS5hbnlcbiAgICAgICk7XG4gICAgICBpZiAoaW5wdXQuaXNFcnJvcihib2R5KSlcbiAgICAgICAgcmV0dXJuIGJvZHk7XG5cbiAgICAgIGlmIChzdGF0ZS5hbnkpXG4gICAgICAgIHJlc3VsdCA9IGlucHV0LnJhdyhzYXZlKTtcbiAgICAgIGVsc2VcbiAgICAgICAgaW5wdXQgPSBib2R5O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudHJhY2sgJiYgc3RhdGUudGFnICE9PSBudWxsKVxuICAgICAgb3B0aW9ucy50cmFjayhpbnB1dC5wYXRoKCksIHN0YXJ0LCBpbnB1dC5sZW5ndGgsICd0YWdnZWQnKTtcblxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudHJhY2sgJiYgc3RhdGUudGFnICE9PSBudWxsKVxuICAgICAgb3B0aW9ucy50cmFjayhpbnB1dC5wYXRoKCksIGlucHV0Lm9mZnNldCwgaW5wdXQubGVuZ3RoLCAnY29udGVudCcpO1xuXG4gICAgLy8gU2VsZWN0IHByb3BlciBtZXRob2QgZm9yIHRhZ1xuICAgIGlmIChzdGF0ZS5hbnkpXG4gICAgICByZXN1bHQgPSByZXN1bHQ7XG4gICAgZWxzZSBpZiAoc3RhdGUuY2hvaWNlID09PSBudWxsKVxuICAgICAgcmVzdWx0ID0gdGhpcy5fZGVjb2RlR2VuZXJpYyhzdGF0ZS50YWcsIGlucHV0LCBvcHRpb25zKTtcbiAgICBlbHNlXG4gICAgICByZXN1bHQgPSB0aGlzLl9kZWNvZGVDaG9pY2UoaW5wdXQsIG9wdGlvbnMpO1xuXG4gICAgaWYgKGlucHV0LmlzRXJyb3IocmVzdWx0KSlcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAvLyBEZWNvZGUgY2hpbGRyZW5cbiAgICBpZiAoIXN0YXRlLmFueSAmJiBzdGF0ZS5jaG9pY2UgPT09IG51bGwgJiYgc3RhdGUuY2hpbGRyZW4gIT09IG51bGwpIHtcbiAgICAgIHN0YXRlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gZGVjb2RlQ2hpbGRyZW4oY2hpbGQpIHtcbiAgICAgICAgLy8gTk9URTogV2UgYXJlIGlnbm9yaW5nIGVycm9ycyBoZXJlLCB0byBsZXQgcGFyc2VyIGNvbnRpbnVlIHdpdGggb3RoZXJcbiAgICAgICAgLy8gcGFydHMgb2YgZW5jb2RlZCBkYXRhXG4gICAgICAgIGNoaWxkLl9kZWNvZGUoaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gRGVjb2RlIGNvbnRhaW5lZC9lbmNvZGVkIGJ5IHNjaGVtYSwgb25seSBpbiBiaXQgb3Igb2N0ZXQgc3RyaW5nc1xuICAgIGlmIChzdGF0ZS5jb250YWlucyAmJiAoc3RhdGUudGFnID09PSAnb2N0c3RyJyB8fCBzdGF0ZS50YWcgPT09ICdiaXRzdHInKSkge1xuICAgICAgdmFyIGRhdGEgPSBuZXcgRGVjb2RlckJ1ZmZlcihyZXN1bHQpO1xuICAgICAgcmVzdWx0ID0gdGhpcy5fZ2V0VXNlKHN0YXRlLmNvbnRhaW5zLCBpbnB1dC5fcmVwb3J0ZXJTdGF0ZS5vYmopXG4gICAgICAgICAgLl9kZWNvZGUoZGF0YSwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgLy8gUG9wIG9iamVjdFxuICBpZiAoc3RhdGUub2JqICYmIHByZXNlbnQpXG4gICAgcmVzdWx0ID0gaW5wdXQubGVhdmVPYmplY3QocHJldk9iaik7XG5cbiAgLy8gU2V0IGtleVxuICBpZiAoc3RhdGUua2V5ICE9PSBudWxsICYmIChyZXN1bHQgIT09IG51bGwgfHwgcHJlc2VudCA9PT0gdHJ1ZSkpXG4gICAgaW5wdXQubGVhdmVLZXkocHJldktleSwgc3RhdGUua2V5LCByZXN1bHQpO1xuICBlbHNlIGlmIChwcmV2S2V5ICE9PSBudWxsKVxuICAgIGlucHV0LmV4aXRLZXkocHJldktleSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9kZWNvZGVHZW5lcmljID0gZnVuY3Rpb24gZGVjb2RlR2VuZXJpYyh0YWcsIGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBpZiAodGFnID09PSAnc2VxJyB8fCB0YWcgPT09ICdzZXQnKVxuICAgIHJldHVybiBudWxsO1xuICBpZiAodGFnID09PSAnc2Vxb2YnIHx8IHRhZyA9PT0gJ3NldG9mJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlTGlzdChpbnB1dCwgdGFnLCBzdGF0ZS5hcmdzWzBdLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAoL3N0ciQvLnRlc3QodGFnKSlcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlU3RyKGlucHV0LCB0YWcsIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcgJiYgc3RhdGUuYXJncylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlT2JqaWQoaW5wdXQsIHN0YXRlLmFyZ3NbMF0sIHN0YXRlLmFyZ3NbMV0sIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZU9iamlkKGlucHV0LCBudWxsLCBudWxsLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnZ2VudGltZScgfHwgdGFnID09PSAndXRjdGltZScpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZVRpbWUoaW5wdXQsIHRhZywgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ251bGxfJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlTnVsbChpbnB1dCwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2Jvb2wnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVCb29sKGlucHV0LCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqRGVzYycpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZVN0cihpbnB1dCwgdGFnLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnaW50JyB8fCB0YWcgPT09ICdlbnVtJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlSW50KGlucHV0LCBzdGF0ZS5hcmdzICYmIHN0YXRlLmFyZ3NbMF0sIG9wdGlvbnMpO1xuXG4gIGlmIChzdGF0ZS51c2UgIT09IG51bGwpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0VXNlKHN0YXRlLnVzZSwgaW5wdXQuX3JlcG9ydGVyU3RhdGUub2JqKVxuICAgICAgICAuX2RlY29kZShpbnB1dCwgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGlucHV0LmVycm9yKCd1bmtub3duIHRhZzogJyArIHRhZyk7XG4gIH1cbn07XG5cbk5vZGUucHJvdG90eXBlLl9nZXRVc2UgPSBmdW5jdGlvbiBfZ2V0VXNlKGVudGl0eSwgb2JqKSB7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAvLyBDcmVhdGUgYWx0ZXJlZCB1c2UgZGVjb2RlciBpZiBpbXBsaWNpdCBpcyBzZXRcbiAgc3RhdGUudXNlRGVjb2RlciA9IHRoaXMuX3VzZShlbnRpdHksIG9iaik7XG4gIGFzc2VydChzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUucGFyZW50ID09PSBudWxsKTtcbiAgc3RhdGUudXNlRGVjb2RlciA9IHN0YXRlLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5jaGlsZHJlblswXTtcbiAgaWYgKHN0YXRlLmltcGxpY2l0ICE9PSBzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUuaW1wbGljaXQpIHtcbiAgICBzdGF0ZS51c2VEZWNvZGVyID0gc3RhdGUudXNlRGVjb2Rlci5jbG9uZSgpO1xuICAgIHN0YXRlLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5pbXBsaWNpdCA9IHN0YXRlLmltcGxpY2l0O1xuICB9XG4gIHJldHVybiBzdGF0ZS51c2VEZWNvZGVyO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2RlY29kZUNob2ljZSA9IGZ1bmN0aW9uIGRlY29kZUNob2ljZShpbnB1dCwgb3B0aW9ucykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIHZhciByZXN1bHQgPSBudWxsO1xuICB2YXIgbWF0Y2ggPSBmYWxzZTtcblxuICBPYmplY3Qua2V5cyhzdGF0ZS5jaG9pY2UpLnNvbWUoZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHNhdmUgPSBpbnB1dC5zYXZlKCk7XG4gICAgdmFyIG5vZGUgPSBzdGF0ZS5jaG9pY2Vba2V5XTtcbiAgICB0cnkge1xuICAgICAgdmFyIHZhbHVlID0gbm9kZS5fZGVjb2RlKGlucHV0LCBvcHRpb25zKTtcbiAgICAgIGlmIChpbnB1dC5pc0Vycm9yKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICByZXN1bHQgPSB7IHR5cGU6IGtleSwgdmFsdWU6IHZhbHVlIH07XG4gICAgICBtYXRjaCA9IHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaW5wdXQucmVzdG9yZShzYXZlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sIHRoaXMpO1xuXG4gIGlmICghbWF0Y2gpXG4gICAgcmV0dXJuIGlucHV0LmVycm9yKCdDaG9pY2Ugbm90IG1hdGNoZWQnKTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy9cbi8vIEVuY29kaW5nXG4vL1xuXG5Ob2RlLnByb3RvdHlwZS5fY3JlYXRlRW5jb2RlckJ1ZmZlciA9IGZ1bmN0aW9uIGNyZWF0ZUVuY29kZXJCdWZmZXIoZGF0YSkge1xuICByZXR1cm4gbmV3IEVuY29kZXJCdWZmZXIoZGF0YSwgdGhpcy5yZXBvcnRlcik7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIHJlcG9ydGVyLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICBpZiAoc3RhdGVbJ2RlZmF1bHQnXSAhPT0gbnVsbCAmJiBzdGF0ZVsnZGVmYXVsdCddID09PSBkYXRhKVxuICAgIHJldHVybjtcblxuICB2YXIgcmVzdWx0ID0gdGhpcy5fZW5jb2RlVmFsdWUoZGF0YSwgcmVwb3J0ZXIsIHBhcmVudCk7XG4gIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm47XG5cbiAgaWYgKHRoaXMuX3NraXBEZWZhdWx0KHJlc3VsdCwgcmVwb3J0ZXIsIHBhcmVudCkpXG4gICAgcmV0dXJuO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlVmFsdWUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgcmVwb3J0ZXIsIHBhcmVudCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgLy8gRGVjb2RlIHJvb3Qgbm9kZVxuICBpZiAoc3RhdGUucGFyZW50ID09PSBudWxsKVxuICAgIHJldHVybiBzdGF0ZS5jaGlsZHJlblswXS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyIHx8IG5ldyBSZXBvcnRlcigpKTtcblxuICB2YXIgcmVzdWx0ID0gbnVsbDtcblxuICAvLyBTZXQgcmVwb3J0ZXIgdG8gc2hhcmUgaXQgd2l0aCBhIGNoaWxkIGNsYXNzXG4gIHRoaXMucmVwb3J0ZXIgPSByZXBvcnRlcjtcblxuICAvLyBDaGVjayBpZiBkYXRhIGlzIHRoZXJlXG4gIGlmIChzdGF0ZS5vcHRpb25hbCAmJiBkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoc3RhdGVbJ2RlZmF1bHQnXSAhPT0gbnVsbClcbiAgICAgIGRhdGEgPSBzdGF0ZVsnZGVmYXVsdCddXG4gICAgZWxzZVxuICAgICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRW5jb2RlIGNoaWxkcmVuIGZpcnN0XG4gIHZhciBjb250ZW50ID0gbnVsbDtcbiAgdmFyIHByaW1pdGl2ZSA9IGZhbHNlO1xuICBpZiAoc3RhdGUuYW55KSB7XG4gICAgLy8gQW55dGhpbmcgdGhhdCB3YXMgZ2l2ZW4gaXMgdHJhbnNsYXRlZCB0byBidWZmZXJcbiAgICByZXN1bHQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGRhdGEpO1xuICB9IGVsc2UgaWYgKHN0YXRlLmNob2ljZSkge1xuICAgIHJlc3VsdCA9IHRoaXMuX2VuY29kZUNob2ljZShkYXRhLCByZXBvcnRlcik7XG4gIH0gZWxzZSBpZiAoc3RhdGUuY29udGFpbnMpIHtcbiAgICBjb250ZW50ID0gdGhpcy5fZ2V0VXNlKHN0YXRlLmNvbnRhaW5zLCBwYXJlbnQpLl9lbmNvZGUoZGF0YSwgcmVwb3J0ZXIpO1xuICAgIHByaW1pdGl2ZSA9IHRydWU7XG4gIH0gZWxzZSBpZiAoc3RhdGUuY2hpbGRyZW4pIHtcbiAgICBjb250ZW50ID0gc3RhdGUuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX2Jhc2VTdGF0ZS50YWcgPT09ICdudWxsXycpXG4gICAgICAgIHJldHVybiBjaGlsZC5fZW5jb2RlKG51bGwsIHJlcG9ydGVyLCBkYXRhKTtcblxuICAgICAgaWYgKGNoaWxkLl9iYXNlU3RhdGUua2V5ID09PSBudWxsKVxuICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ0NoaWxkIHNob3VsZCBoYXZlIGEga2V5Jyk7XG4gICAgICB2YXIgcHJldktleSA9IHJlcG9ydGVyLmVudGVyS2V5KGNoaWxkLl9iYXNlU3RhdGUua2V5KTtcblxuICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JylcbiAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdDaGlsZCBleHBlY3RlZCwgYnV0IGlucHV0IGlzIG5vdCBvYmplY3QnKTtcblxuICAgICAgdmFyIHJlcyA9IGNoaWxkLl9lbmNvZGUoZGF0YVtjaGlsZC5fYmFzZVN0YXRlLmtleV0sIHJlcG9ydGVyLCBkYXRhKTtcbiAgICAgIHJlcG9ydGVyLmxlYXZlS2V5KHByZXZLZXkpO1xuXG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0sIHRoaXMpLmZpbHRlcihmdW5jdGlvbihjaGlsZCkge1xuICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH0pO1xuICAgIGNvbnRlbnQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGNvbnRlbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmIChzdGF0ZS50YWcgPT09ICdzZXFvZicgfHwgc3RhdGUudGFnID09PSAnc2V0b2YnKSB7XG4gICAgICAvLyBUT0RPKGluZHV0bnkpOiB0aGlzIHNob3VsZCBiZSB0aHJvd24gb24gRFNMIGxldmVsXG4gICAgICBpZiAoIShzdGF0ZS5hcmdzICYmIHN0YXRlLmFyZ3MubGVuZ3RoID09PSAxKSlcbiAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdUb28gbWFueSBhcmdzIGZvciA6ICcgKyBzdGF0ZS50YWcpO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpXG4gICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignc2Vxb2Yvc2V0b2YsIGJ1dCBkYXRhIGlzIG5vdCBBcnJheScpO1xuXG4gICAgICB2YXIgY2hpbGQgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjaGlsZC5fYmFzZVN0YXRlLmltcGxpY2l0ID0gbnVsbDtcbiAgICAgIGNvbnRlbnQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGRhdGEubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRVc2Uoc3RhdGUuYXJnc1swXSwgZGF0YSkuX2VuY29kZShpdGVtLCByZXBvcnRlcik7XG4gICAgICB9LCBjaGlsZCkpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUudXNlICE9PSBudWxsKSB7XG4gICAgICByZXN1bHQgPSB0aGlzLl9nZXRVc2Uoc3RhdGUudXNlLCBwYXJlbnQpLl9lbmNvZGUoZGF0YSwgcmVwb3J0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50ID0gdGhpcy5fZW5jb2RlUHJpbWl0aXZlKHN0YXRlLnRhZywgZGF0YSk7XG4gICAgICBwcmltaXRpdmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEVuY29kZSBkYXRhIGl0c2VsZlxuICB2YXIgcmVzdWx0O1xuICBpZiAoIXN0YXRlLmFueSAmJiBzdGF0ZS5jaG9pY2UgPT09IG51bGwpIHtcbiAgICB2YXIgdGFnID0gc3RhdGUuaW1wbGljaXQgIT09IG51bGwgPyBzdGF0ZS5pbXBsaWNpdCA6IHN0YXRlLnRhZztcbiAgICB2YXIgY2xzID0gc3RhdGUuaW1wbGljaXQgPT09IG51bGwgPyAndW5pdmVyc2FsJyA6ICdjb250ZXh0JztcblxuICAgIGlmICh0YWcgPT09IG51bGwpIHtcbiAgICAgIGlmIChzdGF0ZS51c2UgPT09IG51bGwpXG4gICAgICAgIHJlcG9ydGVyLmVycm9yKCdUYWcgY291bGQgYmUgb21pdHRlZCBvbmx5IGZvciAudXNlKCknKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0YXRlLnVzZSA9PT0gbnVsbClcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5fZW5jb2RlQ29tcG9zaXRlKHRhZywgcHJpbWl0aXZlLCBjbHMsIGNvbnRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFdyYXAgaW4gZXhwbGljaXRcbiAgaWYgKHN0YXRlLmV4cGxpY2l0ICE9PSBudWxsKVxuICAgIHJlc3VsdCA9IHRoaXMuX2VuY29kZUNvbXBvc2l0ZShzdGF0ZS5leHBsaWNpdCwgZmFsc2UsICdjb250ZXh0JywgcmVzdWx0KTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZUNob2ljZSA9IGZ1bmN0aW9uIGVuY29kZUNob2ljZShkYXRhLCByZXBvcnRlcikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgdmFyIG5vZGUgPSBzdGF0ZS5jaG9pY2VbZGF0YS50eXBlXTtcbiAgaWYgKCFub2RlKSB7XG4gICAgYXNzZXJ0KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgZGF0YS50eXBlICsgJyBub3QgZm91bmQgaW4gJyArXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhzdGF0ZS5jaG9pY2UpKSk7XG4gIH1cbiAgcmV0dXJuIG5vZGUuX2VuY29kZShkYXRhLnZhbHVlLCByZXBvcnRlcik7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlUHJpbWl0aXZlID0gZnVuY3Rpb24gZW5jb2RlUHJpbWl0aXZlKHRhZywgZGF0YSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgaWYgKC9zdHIkLy50ZXN0KHRhZykpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZVN0cihkYXRhLCB0YWcpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcgJiYgc3RhdGUuYXJncylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlT2JqaWQoZGF0YSwgc3RhdGUucmV2ZXJzZUFyZ3NbMF0sIHN0YXRlLmFyZ3NbMV0pO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZU9iamlkKGRhdGEsIG51bGwsIG51bGwpO1xuICBlbHNlIGlmICh0YWcgPT09ICdnZW50aW1lJyB8fCB0YWcgPT09ICd1dGN0aW1lJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlVGltZShkYXRhLCB0YWcpO1xuICBlbHNlIGlmICh0YWcgPT09ICdudWxsXycpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZU51bGwoKTtcbiAgZWxzZSBpZiAodGFnID09PSAnaW50JyB8fCB0YWcgPT09ICdlbnVtJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlSW50KGRhdGEsIHN0YXRlLmFyZ3MgJiYgc3RhdGUucmV2ZXJzZUFyZ3NbMF0pO1xuICBlbHNlIGlmICh0YWcgPT09ICdib29sJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlQm9vbChkYXRhKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqRGVzYycpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZVN0cihkYXRhLCB0YWcpO1xuICBlbHNlXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB0YWc6ICcgKyB0YWcpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2lzTnVtc3RyID0gZnVuY3Rpb24gaXNOdW1zdHIoc3RyKSB7XG4gIHJldHVybiAvXlswLTkgXSokLy50ZXN0KHN0cik7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5faXNQcmludHN0ciA9IGZ1bmN0aW9uIGlzUHJpbnRzdHIoc3RyKSB7XG4gIHJldHVybiAvXltBLVphLXowLTkgJ1xcKFxcKVxcKyxcXC1cXC5cXC86PVxcP10qJC8udGVzdChzdHIpO1xufTtcbiIsInZhciBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKTtcblxuZXhwb3J0cy50YWdDbGFzcyA9IHtcbiAgMDogJ3VuaXZlcnNhbCcsXG4gIDE6ICdhcHBsaWNhdGlvbicsXG4gIDI6ICdjb250ZXh0JyxcbiAgMzogJ3ByaXZhdGUnXG59O1xuZXhwb3J0cy50YWdDbGFzc0J5TmFtZSA9IGNvbnN0YW50cy5fcmV2ZXJzZShleHBvcnRzLnRhZ0NsYXNzKTtcblxuZXhwb3J0cy50YWcgPSB7XG4gIDB4MDA6ICdlbmQnLFxuICAweDAxOiAnYm9vbCcsXG4gIDB4MDI6ICdpbnQnLFxuICAweDAzOiAnYml0c3RyJyxcbiAgMHgwNDogJ29jdHN0cicsXG4gIDB4MDU6ICdudWxsXycsXG4gIDB4MDY6ICdvYmppZCcsXG4gIDB4MDc6ICdvYmpEZXNjJyxcbiAgMHgwODogJ2V4dGVybmFsJyxcbiAgMHgwOTogJ3JlYWwnLFxuICAweDBhOiAnZW51bScsXG4gIDB4MGI6ICdlbWJlZCcsXG4gIDB4MGM6ICd1dGY4c3RyJyxcbiAgMHgwZDogJ3JlbGF0aXZlT2lkJyxcbiAgMHgxMDogJ3NlcScsXG4gIDB4MTE6ICdzZXQnLFxuICAweDEyOiAnbnVtc3RyJyxcbiAgMHgxMzogJ3ByaW50c3RyJyxcbiAgMHgxNDogJ3Q2MXN0cicsXG4gIDB4MTU6ICd2aWRlb3N0cicsXG4gIDB4MTY6ICdpYTVzdHInLFxuICAweDE3OiAndXRjdGltZScsXG4gIDB4MTg6ICdnZW50aW1lJyxcbiAgMHgxOTogJ2dyYXBoc3RyJyxcbiAgMHgxYTogJ2lzbzY0NnN0cicsXG4gIDB4MWI6ICdnZW5zdHInLFxuICAweDFjOiAndW5pc3RyJyxcbiAgMHgxZDogJ2NoYXJzdHInLFxuICAweDFlOiAnYm1wc3RyJ1xufTtcbmV4cG9ydHMudGFnQnlOYW1lID0gY29uc3RhbnRzLl9yZXZlcnNlKGV4cG9ydHMudGFnKTtcbiIsInZhciBkZWNvZGVycyA9IGV4cG9ydHM7XG5cbmRlY29kZXJzLmRlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5kZWNvZGVycy5wZW0gPSByZXF1aXJlKCcuL3BlbScpO1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbnZhciBERVJEZWNvZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcblxuZnVuY3Rpb24gUEVNRGVjb2RlcihlbnRpdHkpIHtcbiAgREVSRGVjb2Rlci5jYWxsKHRoaXMsIGVudGl0eSk7XG4gIHRoaXMuZW5jID0gJ3BlbSc7XG59O1xuaW5oZXJpdHMoUEVNRGVjb2RlciwgREVSRGVjb2Rlcik7XG5tb2R1bGUuZXhwb3J0cyA9IFBFTURlY29kZXI7XG5cblBFTURlY29kZXIucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBsaW5lcyA9IGRhdGEudG9TdHJpbmcoKS5zcGxpdCgvW1xcclxcbl0rL2cpO1xuXG4gIHZhciBsYWJlbCA9IG9wdGlvbnMubGFiZWwudG9VcHBlckNhc2UoKTtcblxuICB2YXIgcmUgPSAvXi0tLS0tKEJFR0lOfEVORCkgKFteLV0rKS0tLS0tJC87XG4gIHZhciBzdGFydCA9IC0xO1xuICB2YXIgZW5kID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWF0Y2ggPSBsaW5lc1tpXS5tYXRjaChyZSk7XG4gICAgaWYgKG1hdGNoID09PSBudWxsKVxuICAgICAgY29udGludWU7XG5cbiAgICBpZiAobWF0Y2hbMl0gIT09IGxhYmVsKVxuICAgICAgY29udGludWU7XG5cbiAgICBpZiAoc3RhcnQgPT09IC0xKSB7XG4gICAgICBpZiAobWF0Y2hbMV0gIT09ICdCRUdJTicpXG4gICAgICAgIGJyZWFrO1xuICAgICAgc3RhcnQgPSBpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobWF0Y2hbMV0gIT09ICdFTkQnKVxuICAgICAgICBicmVhaztcbiAgICAgIGVuZCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKHN0YXJ0ID09PSAtMSB8fCBlbmQgPT09IC0xKVxuICAgIHRocm93IG5ldyBFcnJvcignUEVNIHNlY3Rpb24gbm90IGZvdW5kIGZvcjogJyArIGxhYmVsKTtcblxuICB2YXIgYmFzZTY0ID0gbGluZXMuc2xpY2Uoc3RhcnQgKyAxLCBlbmQpLmpvaW4oJycpO1xuICAvLyBSZW1vdmUgZXhjZXNzaXZlIHN5bWJvbHNcbiAgYmFzZTY0LnJlcGxhY2UoL1teYS16MC05XFwrXFwvPV0rL2dpLCAnJyk7XG5cbiAgdmFyIGlucHV0ID0gbmV3IEJ1ZmZlcihiYXNlNjQsICdiYXNlNjQnKTtcbiAgcmV0dXJuIERFUkRlY29kZXIucHJvdG90eXBlLmRlY29kZS5jYWxsKHRoaXMsIGlucHV0LCBvcHRpb25zKTtcbn07XG4iLCJ2YXIgZW5jb2RlcnMgPSBleHBvcnRzO1xuXG5lbmNvZGVycy5kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuZW5jb2RlcnMucGVtID0gcmVxdWlyZSgnLi9wZW0nKTtcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBERVJFbmNvZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcblxuZnVuY3Rpb24gUEVNRW5jb2RlcihlbnRpdHkpIHtcbiAgREVSRW5jb2Rlci5jYWxsKHRoaXMsIGVudGl0eSk7XG4gIHRoaXMuZW5jID0gJ3BlbSc7XG59O1xuaW5oZXJpdHMoUEVNRW5jb2RlciwgREVSRW5jb2Rlcik7XG5tb2R1bGUuZXhwb3J0cyA9IFBFTUVuY29kZXI7XG5cblBFTUVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBidWYgPSBERVJFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUuY2FsbCh0aGlzLCBkYXRhKTtcblxuICB2YXIgcCA9IGJ1Zi50b1N0cmluZygnYmFzZTY0Jyk7XG4gIHZhciBvdXQgPSBbICctLS0tLUJFR0lOICcgKyBvcHRpb25zLmxhYmVsICsgJy0tLS0tJyBdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHAubGVuZ3RoOyBpICs9IDY0KVxuICAgIG91dC5wdXNoKHAuc2xpY2UoaSwgaSArIDY0KSk7XG4gIG91dC5wdXNoKCctLS0tLUVORCAnICsgb3B0aW9ucy5sYWJlbCArICctLS0tLScpO1xuICByZXR1cm4gb3V0LmpvaW4oJ1xcbicpO1xufTtcbiIsIi8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL1JhbnRhbmVuL25vZGUtZHRscy9ibG9iLzI1YTdkYzg2MWJkYTM4Y2ZlYWM5M2E3MjM1MDBlZWE0ZjBhYzJlODYvQ2VydGlmaWNhdGUuanNcbi8vIHRoYW5rcyB0byBAUmFudGFuZW5cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBhc24gPSByZXF1aXJlKCdhc24xLmpzJylcblxudmFyIFRpbWUgPSBhc24uZGVmaW5lKCdUaW1lJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLmNob2ljZSh7XG4gICAgdXRjVGltZTogdGhpcy51dGN0aW1lKCksXG4gICAgZ2VuZXJhbFRpbWU6IHRoaXMuZ2VudGltZSgpXG4gIH0pXG59KVxuXG52YXIgQXR0cmlidXRlVHlwZVZhbHVlID0gYXNuLmRlZmluZSgnQXR0cmlidXRlVHlwZVZhbHVlJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndHlwZScpLm9iamlkKCksXG4gICAgdGhpcy5rZXkoJ3ZhbHVlJykuYW55KClcbiAgKVxufSlcblxudmFyIEFsZ29yaXRobUlkZW50aWZpZXIgPSBhc24uZGVmaW5lKCdBbGdvcml0aG1JZGVudGlmaWVyJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykub2JqaWQoKSxcbiAgICB0aGlzLmtleSgncGFyYW1ldGVycycpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ2N1cnZlJykub2JqaWQoKS5vcHRpb25hbCgpXG4gIClcbn0pXG5cbnZhciBTdWJqZWN0UHVibGljS2V5SW5mbyA9IGFzbi5kZWZpbmUoJ1N1YmplY3RQdWJsaWNLZXlJbmZvJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHVibGljS2V5JykuYml0c3RyKClcbiAgKVxufSlcblxudmFyIFJlbGF0aXZlRGlzdGluZ3Vpc2hlZE5hbWUgPSBhc24uZGVmaW5lKCdSZWxhdGl2ZURpc3Rpbmd1aXNoZWROYW1lJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNldG9mKEF0dHJpYnV0ZVR5cGVWYWx1ZSlcbn0pXG5cbnZhciBSRE5TZXF1ZW5jZSA9IGFzbi5kZWZpbmUoJ1JETlNlcXVlbmNlJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcW9mKFJlbGF0aXZlRGlzdGluZ3Vpc2hlZE5hbWUpXG59KVxuXG52YXIgTmFtZSA9IGFzbi5kZWZpbmUoJ05hbWUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2hvaWNlKHtcbiAgICByZG5TZXF1ZW5jZTogdGhpcy51c2UoUkROU2VxdWVuY2UpXG4gIH0pXG59KVxuXG52YXIgVmFsaWRpdHkgPSBhc24uZGVmaW5lKCdWYWxpZGl0eScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ25vdEJlZm9yZScpLnVzZShUaW1lKSxcbiAgICB0aGlzLmtleSgnbm90QWZ0ZXInKS51c2UoVGltZSlcbiAgKVxufSlcblxudmFyIEV4dGVuc2lvbiA9IGFzbi5kZWZpbmUoJ0V4dGVuc2lvbicsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2V4dG5JRCcpLm9iamlkKCksXG4gICAgdGhpcy5rZXkoJ2NyaXRpY2FsJykuYm9vbCgpLmRlZihmYWxzZSksXG4gICAgdGhpcy5rZXkoJ2V4dG5WYWx1ZScpLm9jdHN0cigpXG4gIClcbn0pXG5cbnZhciBUQlNDZXJ0aWZpY2F0ZSA9IGFzbi5kZWZpbmUoJ1RCU0NlcnRpZmljYXRlJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmV4cGxpY2l0KDApLmludCgpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ3NlcmlhbE51bWJlcicpLmludCgpLFxuICAgIHRoaXMua2V5KCdzaWduYXR1cmUnKS51c2UoQWxnb3JpdGhtSWRlbnRpZmllciksXG4gICAgdGhpcy5rZXkoJ2lzc3VlcicpLnVzZShOYW1lKSxcbiAgICB0aGlzLmtleSgndmFsaWRpdHknKS51c2UoVmFsaWRpdHkpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0JykudXNlKE5hbWUpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHVibGljS2V5SW5mbycpLnVzZShTdWJqZWN0UHVibGljS2V5SW5mbyksXG4gICAgdGhpcy5rZXkoJ2lzc3VlclVuaXF1ZUlEJykuaW1wbGljaXQoMSkuYml0c3RyKCkub3B0aW9uYWwoKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFVuaXF1ZUlEJykuaW1wbGljaXQoMikuYml0c3RyKCkub3B0aW9uYWwoKSxcbiAgICB0aGlzLmtleSgnZXh0ZW5zaW9ucycpLmV4cGxpY2l0KDMpLnNlcW9mKEV4dGVuc2lvbikub3B0aW9uYWwoKVxuICApXG59KVxuXG52YXIgWDUwOUNlcnRpZmljYXRlID0gYXNuLmRlZmluZSgnWDUwOUNlcnRpZmljYXRlJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndGJzQ2VydGlmaWNhdGUnKS51c2UoVEJTQ2VydGlmaWNhdGUpLFxuICAgIHRoaXMua2V5KCdzaWduYXR1cmVBbGdvcml0aG0nKS51c2UoQWxnb3JpdGhtSWRlbnRpZmllciksXG4gICAgdGhpcy5rZXkoJ3NpZ25hdHVyZVZhbHVlJykuYml0c3RyKClcbiAgKVxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBYNTA5Q2VydGlmaWNhdGVcbiIsIi8vIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYXBhdGlsL3BlbXN0cmlwXG52YXIgZmluZFByb2MgPSAvUHJvYy1UeXBlOiA0LEVOQ1JZUFRFRFtcXG5cXHJdK0RFSy1JbmZvOiBBRVMtKCg/OjEyOCl8KD86MTkyKXwoPzoyNTYpKS1DQkMsKFswLTlBLUhdKylbXFxuXFxyXSsoWzAtOUEtelxcblxcclxcK1xcL1xcPV0rKVtcXG5cXHJdKy9tXG52YXIgc3RhcnRSZWdleCA9IC9eLS0tLS1CRUdJTiAoKD86Lio/IEtFWSl8Q0VSVElGSUNBVEUpLS0tLS0vbVxudmFyIGZ1bGxSZWdleCA9IC9eLS0tLS1CRUdJTiAoKD86Lio/IEtFWSl8Q0VSVElGSUNBVEUpLS0tLS0oWzAtOUEtelxcblxcclxcK1xcL1xcPV0rKS0tLS0tRU5EIFxcMS0tLS0tJC9tXG52YXIgZXZwID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIGNpcGhlcnMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWFlcycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9rZXksIHBhc3N3b3JkKSB7XG4gIHZhciBrZXkgPSBva2V5LnRvU3RyaW5nKClcbiAgdmFyIG1hdGNoID0ga2V5Lm1hdGNoKGZpbmRQcm9jKVxuICB2YXIgZGVjcnlwdGVkXG4gIGlmICghbWF0Y2gpIHtcbiAgICB2YXIgbWF0Y2gyID0ga2V5Lm1hdGNoKGZ1bGxSZWdleClcbiAgICBkZWNyeXB0ZWQgPSBuZXcgQnVmZmVyKG1hdGNoMlsyXS5yZXBsYWNlKC9bXFxyXFxuXS9nLCAnJyksICdiYXNlNjQnKVxuICB9IGVsc2Uge1xuICAgIHZhciBzdWl0ZSA9ICdhZXMnICsgbWF0Y2hbMV1cbiAgICB2YXIgaXYgPSBCdWZmZXIuZnJvbShtYXRjaFsyXSwgJ2hleCcpXG4gICAgdmFyIGNpcGhlclRleHQgPSBCdWZmZXIuZnJvbShtYXRjaFszXS5yZXBsYWNlKC9bXFxyXFxuXS9nLCAnJyksICdiYXNlNjQnKVxuICAgIHZhciBjaXBoZXJLZXkgPSBldnAocGFzc3dvcmQsIGl2LnNsaWNlKDAsIDgpLCBwYXJzZUludChtYXRjaFsxXSwgMTApKS5rZXlcbiAgICB2YXIgb3V0ID0gW11cbiAgICB2YXIgY2lwaGVyID0gY2lwaGVycy5jcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBjaXBoZXJLZXksIGl2KVxuICAgIG91dC5wdXNoKGNpcGhlci51cGRhdGUoY2lwaGVyVGV4dCkpXG4gICAgb3V0LnB1c2goY2lwaGVyLmZpbmFsKCkpXG4gICAgZGVjcnlwdGVkID0gQnVmZmVyLmNvbmNhdChvdXQpXG4gIH1cbiAgdmFyIHRhZyA9IGtleS5tYXRjaChzdGFydFJlZ2V4KVsxXVxuICByZXR1cm4ge1xuICAgIHRhZzogdGFnLFxuICAgIGRhdGE6IGRlY3J5cHRlZFxuICB9XG59XG4iLCIvLyBtdWNoIG9mIHRoaXMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvc2VsZi1zaWduZWQvYmxvYi9naC1wYWdlcy9saWIvcnNhLmpzXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgRUMgPSByZXF1aXJlKCdlbGxpcHRpYycpLmVjXG52YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpXG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi9jdXJ2ZXMuanNvbicpXG5cbmZ1bmN0aW9uIHZlcmlmeSAoc2lnLCBoYXNoLCBrZXksIHNpZ25UeXBlLCB0YWcpIHtcbiAgdmFyIHB1YiA9IHBhcnNlS2V5cyhrZXkpXG4gIGlmIChwdWIudHlwZSA9PT0gJ2VjJykge1xuICAgIC8vIHJzYSBrZXlzIGNhbiBiZSBpbnRlcnByZXRlZCBhcyBlY2RzYSBvbmVzIGluIG9wZW5zc2xcbiAgICBpZiAoc2lnblR5cGUgIT09ICdlY2RzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHB1YmxpYyBrZXkgdHlwZScpXG4gICAgcmV0dXJuIGVjVmVyaWZ5KHNpZywgaGFzaCwgcHViKVxuICB9IGVsc2UgaWYgKHB1Yi50eXBlID09PSAnZHNhJykge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ2RzYScpIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHVibGljIGtleSB0eXBlJylcbiAgICByZXR1cm4gZHNhVmVyaWZ5KHNpZywgaGFzaCwgcHViKVxuICB9IGVsc2Uge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ3JzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHB1YmxpYyBrZXkgdHlwZScpXG4gIH1cbiAgaGFzaCA9IEJ1ZmZlci5jb25jYXQoW3RhZywgaGFzaF0pXG4gIHZhciBsZW4gPSBwdWIubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgdmFyIHBhZCA9IFsgMSBdXG4gIHZhciBwYWROdW0gPSAwXG4gIHdoaWxlIChoYXNoLmxlbmd0aCArIHBhZC5sZW5ndGggKyAyIDwgbGVuKSB7XG4gICAgcGFkLnB1c2goMHhmZilcbiAgICBwYWROdW0rK1xuICB9XG4gIHBhZC5wdXNoKDB4MDApXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGhhc2gubGVuZ3RoKSB7XG4gICAgcGFkLnB1c2goaGFzaFtpXSlcbiAgfVxuICBwYWQgPSBuZXcgQnVmZmVyKHBhZClcbiAgdmFyIHJlZCA9IEJOLm1vbnQocHViLm1vZHVsdXMpXG4gIHNpZyA9IG5ldyBCTihzaWcpLnRvUmVkKHJlZClcblxuICBzaWcgPSBzaWcucmVkUG93KG5ldyBCTihwdWIucHVibGljRXhwb25lbnQpKVxuICBzaWcgPSBuZXcgQnVmZmVyKHNpZy5mcm9tUmVkKCkudG9BcnJheSgpKVxuICB2YXIgb3V0ID0gcGFkTnVtIDwgOCA/IDEgOiAwXG4gIGxlbiA9IE1hdGgubWluKHNpZy5sZW5ndGgsIHBhZC5sZW5ndGgpXG4gIGlmIChzaWcubGVuZ3RoICE9PSBwYWQubGVuZ3RoKSBvdXQgPSAxXG5cbiAgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIG91dCB8PSBzaWdbaV0gXiBwYWRbaV1cbiAgcmV0dXJuIG91dCA9PT0gMFxufVxuXG5mdW5jdGlvbiBlY1ZlcmlmeSAoc2lnLCBoYXNoLCBwdWIpIHtcbiAgdmFyIGN1cnZlSWQgPSBjdXJ2ZXNbcHViLmRhdGEuYWxnb3JpdGhtLmN1cnZlLmpvaW4oJy4nKV1cbiAgaWYgKCFjdXJ2ZUlkKSB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gY3VydmUgJyArIHB1Yi5kYXRhLmFsZ29yaXRobS5jdXJ2ZS5qb2luKCcuJykpXG5cbiAgdmFyIGN1cnZlID0gbmV3IEVDKGN1cnZlSWQpXG4gIHZhciBwdWJrZXkgPSBwdWIuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleS5kYXRhXG5cbiAgcmV0dXJuIGN1cnZlLnZlcmlmeShoYXNoLCBzaWcsIHB1YmtleSlcbn1cblxuZnVuY3Rpb24gZHNhVmVyaWZ5IChzaWcsIGhhc2gsIHB1Yikge1xuICB2YXIgcCA9IHB1Yi5kYXRhLnBcbiAgdmFyIHEgPSBwdWIuZGF0YS5xXG4gIHZhciBnID0gcHViLmRhdGEuZ1xuICB2YXIgeSA9IHB1Yi5kYXRhLnB1Yl9rZXlcbiAgdmFyIHVucGFja2VkID0gcGFyc2VLZXlzLnNpZ25hdHVyZS5kZWNvZGUoc2lnLCAnZGVyJylcbiAgdmFyIHMgPSB1bnBhY2tlZC5zXG4gIHZhciByID0gdW5wYWNrZWQuclxuICBjaGVja1ZhbHVlKHMsIHEpXG4gIGNoZWNrVmFsdWUociwgcSlcbiAgdmFyIG1vbnRwID0gQk4ubW9udChwKVxuICB2YXIgdyA9IHMuaW52bShxKVxuICB2YXIgdiA9IGcudG9SZWQobW9udHApXG4gICAgLnJlZFBvdyhuZXcgQk4oaGFzaCkubXVsKHcpLm1vZChxKSlcbiAgICAuZnJvbVJlZCgpXG4gICAgLm11bCh5LnRvUmVkKG1vbnRwKS5yZWRQb3coci5tdWwodykubW9kKHEpKS5mcm9tUmVkKCkpXG4gICAgLm1vZChwKVxuICAgIC5tb2QocSlcbiAgcmV0dXJuIHYuY21wKHIpID09PSAwXG59XG5cbmZ1bmN0aW9uIGNoZWNrVmFsdWUgKGIsIHEpIHtcbiAgaWYgKGIuY21wbigwKSA8PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgc2lnJylcbiAgaWYgKGIuY21wKHEpID49IHEpIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzaWcnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcmlmeVxuIiwidmFyIGVsbGlwdGljID0gcmVxdWlyZSgnZWxsaXB0aWMnKVxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVDREggKGN1cnZlKSB7XG4gIHJldHVybiBuZXcgRUNESChjdXJ2ZSlcbn1cblxudmFyIGFsaWFzZXMgPSB7XG4gIHNlY3AyNTZrMToge1xuICAgIG5hbWU6ICdzZWNwMjU2azEnLFxuICAgIGJ5dGVMZW5ndGg6IDMyXG4gIH0sXG4gIHNlY3AyMjRyMToge1xuICAgIG5hbWU6ICdwMjI0JyxcbiAgICBieXRlTGVuZ3RoOiAyOFxuICB9LFxuICBwcmltZTI1NnYxOiB7XG4gICAgbmFtZTogJ3AyNTYnLFxuICAgIGJ5dGVMZW5ndGg6IDMyXG4gIH0sXG4gIHByaW1lMTkydjE6IHtcbiAgICBuYW1lOiAncDE5MicsXG4gICAgYnl0ZUxlbmd0aDogMjRcbiAgfSxcbiAgZWQyNTUxOToge1xuICAgIG5hbWU6ICdlZDI1NTE5JyxcbiAgICBieXRlTGVuZ3RoOiAzMlxuICB9LFxuICBzZWNwMzg0cjE6IHtcbiAgICBuYW1lOiAncDM4NCcsXG4gICAgYnl0ZUxlbmd0aDogNDhcbiAgfSxcbiAgc2VjcDUyMXIxOiB7XG4gICAgbmFtZTogJ3A1MjEnLFxuICAgIGJ5dGVMZW5ndGg6IDY2XG4gIH1cbn1cblxuYWxpYXNlcy5wMjI0ID0gYWxpYXNlcy5zZWNwMjI0cjFcbmFsaWFzZXMucDI1NiA9IGFsaWFzZXMuc2VjcDI1NnIxID0gYWxpYXNlcy5wcmltZTI1NnYxXG5hbGlhc2VzLnAxOTIgPSBhbGlhc2VzLnNlY3AxOTJyMSA9IGFsaWFzZXMucHJpbWUxOTJ2MVxuYWxpYXNlcy5wMzg0ID0gYWxpYXNlcy5zZWNwMzg0cjFcbmFsaWFzZXMucDUyMSA9IGFsaWFzZXMuc2VjcDUyMXIxXG5cbmZ1bmN0aW9uIEVDREggKGN1cnZlKSB7XG4gIHRoaXMuY3VydmVUeXBlID0gYWxpYXNlc1tjdXJ2ZV1cbiAgaWYgKCF0aGlzLmN1cnZlVHlwZSkge1xuICAgIHRoaXMuY3VydmVUeXBlID0ge1xuICAgICAgbmFtZTogY3VydmVcbiAgICB9XG4gIH1cbiAgdGhpcy5jdXJ2ZSA9IG5ldyBlbGxpcHRpYy5lYyh0aGlzLmN1cnZlVHlwZS5uYW1lKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbiAgdGhpcy5rZXlzID0gdm9pZCAwXG59XG5cbkVDREgucHJvdG90eXBlLmdlbmVyYXRlS2V5cyA9IGZ1bmN0aW9uIChlbmMsIGZvcm1hdCkge1xuICB0aGlzLmtleXMgPSB0aGlzLmN1cnZlLmdlbktleVBhaXIoKVxuICByZXR1cm4gdGhpcy5nZXRQdWJsaWNLZXkoZW5jLCBmb3JtYXQpXG59XG5cbkVDREgucHJvdG90eXBlLmNvbXB1dGVTZWNyZXQgPSBmdW5jdGlvbiAob3RoZXIsIGluZW5jLCBlbmMpIHtcbiAgaW5lbmMgPSBpbmVuYyB8fCAndXRmOCdcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgb3RoZXIgPSBuZXcgQnVmZmVyKG90aGVyLCBpbmVuYylcbiAgfVxuICB2YXIgb3RoZXJQdWIgPSB0aGlzLmN1cnZlLmtleUZyb21QdWJsaWMob3RoZXIpLmdldFB1YmxpYygpXG4gIHZhciBvdXQgPSBvdGhlclB1Yi5tdWwodGhpcy5rZXlzLmdldFByaXZhdGUoKSkuZ2V0WCgpXG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZShvdXQsIGVuYywgdGhpcy5jdXJ2ZVR5cGUuYnl0ZUxlbmd0aClcbn1cblxuRUNESC5wcm90b3R5cGUuZ2V0UHVibGljS2V5ID0gZnVuY3Rpb24gKGVuYywgZm9ybWF0KSB7XG4gIHZhciBrZXkgPSB0aGlzLmtleXMuZ2V0UHVibGljKGZvcm1hdCA9PT0gJ2NvbXByZXNzZWQnLCB0cnVlKVxuICBpZiAoZm9ybWF0ID09PSAnaHlicmlkJykge1xuICAgIGlmIChrZXlba2V5Lmxlbmd0aCAtIDFdICUgMikge1xuICAgICAga2V5WzBdID0gN1xuICAgIH0gZWxzZSB7XG4gICAgICBrZXlbMF0gPSA2XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZShrZXksIGVuYylcbn1cblxuRUNESC5wcm90b3R5cGUuZ2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMua2V5cy5nZXRQcml2YXRlKCksIGVuYylcbn1cblxuRUNESC5wcm90b3R5cGUuc2V0UHVibGljS2V5ID0gZnVuY3Rpb24gKHB1YiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCdcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHViKSkge1xuICAgIHB1YiA9IG5ldyBCdWZmZXIocHViLCBlbmMpXG4gIH1cbiAgdGhpcy5rZXlzLl9pbXBvcnRQdWJsaWMocHViKVxuICByZXR1cm4gdGhpc1xufVxuXG5FQ0RILnByb3RvdHlwZS5zZXRQcml2YXRlS2V5ID0gZnVuY3Rpb24gKHByaXYsIGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ3V0ZjgnXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaXYpKSB7XG4gICAgcHJpdiA9IG5ldyBCdWZmZXIocHJpdiwgZW5jKVxuICB9XG5cbiAgdmFyIF9wcml2ID0gbmV3IEJOKHByaXYpXG4gIF9wcml2ID0gX3ByaXYudG9TdHJpbmcoMTYpXG4gIHRoaXMua2V5cyA9IHRoaXMuY3VydmUuZ2VuS2V5UGFpcigpXG4gIHRoaXMua2V5cy5faW1wb3J0UHJpdmF0ZShfcHJpdilcbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gZm9ybWF0UmV0dXJuVmFsdWUgKGJuLCBlbmMsIGxlbikge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYm4pKSB7XG4gICAgYm4gPSBibi50b0FycmF5KClcbiAgfVxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihibilcbiAgaWYgKGxlbiAmJiBidWYubGVuZ3RoIDwgbGVuKSB7XG4gICAgdmFyIHplcm9zID0gbmV3IEJ1ZmZlcihsZW4gLSBidWYubGVuZ3RoKVxuICAgIHplcm9zLmZpbGwoMClcbiAgICBidWYgPSBCdWZmZXIuY29uY2F0KFt6ZXJvcywgYnVmXSlcbiAgfVxuICBpZiAoIWVuYykge1xuICAgIHJldHVybiBidWZcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYnVmLnRvU3RyaW5nKGVuYylcbiAgfVxufVxuIiwiZXhwb3J0cy5wdWJsaWNFbmNyeXB0ID0gcmVxdWlyZSgnLi9wdWJsaWNFbmNyeXB0JylcbmV4cG9ydHMucHJpdmF0ZURlY3J5cHQgPSByZXF1aXJlKCcuL3ByaXZhdGVEZWNyeXB0JylcblxuZXhwb3J0cy5wcml2YXRlRW5jcnlwdCA9IGZ1bmN0aW9uIHByaXZhdGVFbmNyeXB0IChrZXksIGJ1Zikge1xuICByZXR1cm4gZXhwb3J0cy5wdWJsaWNFbmNyeXB0KGtleSwgYnVmLCB0cnVlKVxufVxuXG5leHBvcnRzLnB1YmxpY0RlY3J5cHQgPSBmdW5jdGlvbiBwdWJsaWNEZWNyeXB0IChrZXksIGJ1Zikge1xuICByZXR1cm4gZXhwb3J0cy5wcml2YXRlRGVjcnlwdChrZXksIGJ1ZiwgdHJ1ZSlcbn1cbiIsInZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJylcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJylcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxudmFyIG1nZiA9IHJlcXVpcmUoJy4vbWdmJylcbnZhciB4b3IgPSByZXF1aXJlKCcuL3hvcicpXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgd2l0aFB1YmxpYyA9IHJlcXVpcmUoJy4vd2l0aFB1YmxpYycpXG52YXIgY3J0ID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1yc2EnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHVibGljRW5jcnlwdCAocHVibGljS2V5LCBtc2csIHJldmVyc2UpIHtcbiAgdmFyIHBhZGRpbmdcbiAgaWYgKHB1YmxpY0tleS5wYWRkaW5nKSB7XG4gICAgcGFkZGluZyA9IHB1YmxpY0tleS5wYWRkaW5nXG4gIH0gZWxzZSBpZiAocmV2ZXJzZSkge1xuICAgIHBhZGRpbmcgPSAxXG4gIH0gZWxzZSB7XG4gICAgcGFkZGluZyA9IDRcbiAgfVxuICB2YXIga2V5ID0gcGFyc2VLZXlzKHB1YmxpY0tleSlcbiAgdmFyIHBhZGRlZE1zZ1xuICBpZiAocGFkZGluZyA9PT0gNCkge1xuICAgIHBhZGRlZE1zZyA9IG9hZXAoa2V5LCBtc2cpXG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMSkge1xuICAgIHBhZGRlZE1zZyA9IHBrY3MxKGtleSwgbXNnLCByZXZlcnNlKVxuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDMpIHtcbiAgICBwYWRkZWRNc2cgPSBuZXcgQk4obXNnKVxuICAgIGlmIChwYWRkZWRNc2cuY21wKGtleS5tb2R1bHVzKSA+PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgdG9vIGxvbmcgZm9yIG1vZHVsdXMnKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gcGFkZGluZycpXG4gIH1cbiAgaWYgKHJldmVyc2UpIHtcbiAgICByZXR1cm4gY3J0KHBhZGRlZE1zZywga2V5KVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB3aXRoUHVibGljKHBhZGRlZE1zZywga2V5KVxuICB9XG59XG5cbmZ1bmN0aW9uIG9hZXAgKGtleSwgbXNnKSB7XG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIHZhciBtTGVuID0gbXNnLmxlbmd0aFxuICB2YXIgaUhhc2ggPSBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKEJ1ZmZlci5hbGxvYygwKSkuZGlnZXN0KClcbiAgdmFyIGhMZW4gPSBpSGFzaC5sZW5ndGhcbiAgdmFyIGhMZW4yID0gMiAqIGhMZW5cbiAgaWYgKG1MZW4gPiBrIC0gaExlbjIgLSAyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlIHRvbyBsb25nJylcbiAgfVxuICB2YXIgcHMgPSBCdWZmZXIuYWxsb2MoayAtIG1MZW4gLSBoTGVuMiAtIDIpXG4gIHZhciBkYmxlbiA9IGsgLSBoTGVuIC0gMVxuICB2YXIgc2VlZCA9IHJhbmRvbUJ5dGVzKGhMZW4pXG4gIHZhciBtYXNrZWREYiA9IHhvcihCdWZmZXIuY29uY2F0KFtpSGFzaCwgcHMsIEJ1ZmZlci5hbGxvYygxLCAxKSwgbXNnXSwgZGJsZW4pLCBtZ2Yoc2VlZCwgZGJsZW4pKVxuICB2YXIgbWFza2VkU2VlZCA9IHhvcihzZWVkLCBtZ2YobWFza2VkRGIsIGhMZW4pKVxuICByZXR1cm4gbmV3IEJOKEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5hbGxvYygxKSwgbWFza2VkU2VlZCwgbWFza2VkRGJdLCBrKSlcbn1cbmZ1bmN0aW9uIHBrY3MxIChrZXksIG1zZywgcmV2ZXJzZSkge1xuICB2YXIgbUxlbiA9IG1zZy5sZW5ndGhcbiAgdmFyIGsgPSBrZXkubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgaWYgKG1MZW4gPiBrIC0gMTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UgdG9vIGxvbmcnKVxuICB9XG4gIHZhciBwc1xuICBpZiAocmV2ZXJzZSkge1xuICAgIHBzID0gQnVmZmVyLmFsbG9jKGsgLSBtTGVuIC0gMywgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBwcyA9IG5vblplcm8oayAtIG1MZW4gLSAzKVxuICB9XG4gIHJldHVybiBuZXcgQk4oQnVmZmVyLmNvbmNhdChbQnVmZmVyLmZyb20oWzAsIHJldmVyc2UgPyAxIDogMl0pLCBwcywgQnVmZmVyLmFsbG9jKDEpLCBtc2ddLCBrKSlcbn1cbmZ1bmN0aW9uIG5vblplcm8gKGxlbikge1xuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbilcbiAgdmFyIGkgPSAwXG4gIHZhciBjYWNoZSA9IHJhbmRvbUJ5dGVzKGxlbiAqIDIpXG4gIHZhciBjdXIgPSAwXG4gIHZhciBudW1cbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICBpZiAoY3VyID09PSBjYWNoZS5sZW5ndGgpIHtcbiAgICAgIGNhY2hlID0gcmFuZG9tQnl0ZXMobGVuICogMilcbiAgICAgIGN1ciA9IDBcbiAgICB9XG4gICAgbnVtID0gY2FjaGVbY3VyKytdXG4gICAgaWYgKG51bSkge1xuICAgICAgb3V0W2krK10gPSBudW1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dFxufVxuIiwidmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKVxudmFyIG1nZiA9IHJlcXVpcmUoJy4vbWdmJylcbnZhciB4b3IgPSByZXF1aXJlKCcuL3hvcicpXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgY3J0ID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1yc2EnKVxudmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpXG52YXIgd2l0aFB1YmxpYyA9IHJlcXVpcmUoJy4vd2l0aFB1YmxpYycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwcml2YXRlRGVjcnlwdCAocHJpdmF0ZUtleSwgZW5jLCByZXZlcnNlKSB7XG4gIHZhciBwYWRkaW5nXG4gIGlmIChwcml2YXRlS2V5LnBhZGRpbmcpIHtcbiAgICBwYWRkaW5nID0gcHJpdmF0ZUtleS5wYWRkaW5nXG4gIH0gZWxzZSBpZiAocmV2ZXJzZSkge1xuICAgIHBhZGRpbmcgPSAxXG4gIH0gZWxzZSB7XG4gICAgcGFkZGluZyA9IDRcbiAgfVxuXG4gIHZhciBrZXkgPSBwYXJzZUtleXMocHJpdmF0ZUtleSlcbiAgdmFyIGsgPSBrZXkubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgaWYgKGVuYy5sZW5ndGggPiBrIHx8IG5ldyBCTihlbmMpLmNtcChrZXkubW9kdWx1cykgPj0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpXG4gIH1cbiAgdmFyIG1zZ1xuICBpZiAocmV2ZXJzZSkge1xuICAgIG1zZyA9IHdpdGhQdWJsaWMobmV3IEJOKGVuYyksIGtleSlcbiAgfSBlbHNlIHtcbiAgICBtc2cgPSBjcnQoZW5jLCBrZXkpXG4gIH1cbiAgdmFyIHpCdWZmZXIgPSBCdWZmZXIuYWxsb2MoayAtIG1zZy5sZW5ndGgpXG4gIG1zZyA9IEJ1ZmZlci5jb25jYXQoW3pCdWZmZXIsIG1zZ10sIGspXG4gIGlmIChwYWRkaW5nID09PSA0KSB7XG4gICAgcmV0dXJuIG9hZXAoa2V5LCBtc2cpXG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMSkge1xuICAgIHJldHVybiBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSlcbiAgfSBlbHNlIGlmIChwYWRkaW5nID09PSAzKSB7XG4gICAgcmV0dXJuIG1zZ1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBwYWRkaW5nJylcbiAgfVxufVxuXG5mdW5jdGlvbiBvYWVwIChrZXksIG1zZykge1xuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKVxuICB2YXIgaUhhc2ggPSBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKEJ1ZmZlci5hbGxvYygwKSkuZGlnZXN0KClcbiAgdmFyIGhMZW4gPSBpSGFzaC5sZW5ndGhcbiAgaWYgKG1zZ1swXSAhPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpXG4gIH1cbiAgdmFyIG1hc2tlZFNlZWQgPSBtc2cuc2xpY2UoMSwgaExlbiArIDEpXG4gIHZhciBtYXNrZWREYiA9IG1zZy5zbGljZShoTGVuICsgMSlcbiAgdmFyIHNlZWQgPSB4b3IobWFza2VkU2VlZCwgbWdmKG1hc2tlZERiLCBoTGVuKSlcbiAgdmFyIGRiID0geG9yKG1hc2tlZERiLCBtZ2Yoc2VlZCwgayAtIGhMZW4gLSAxKSlcbiAgaWYgKGNvbXBhcmUoaUhhc2gsIGRiLnNsaWNlKDAsIGhMZW4pKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpXG4gIH1cbiAgdmFyIGkgPSBoTGVuXG4gIHdoaWxlIChkYltpXSA9PT0gMCkge1xuICAgIGkrK1xuICB9XG4gIGlmIChkYltpKytdICE9PSAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJylcbiAgfVxuICByZXR1cm4gZGIuc2xpY2UoaSlcbn1cblxuZnVuY3Rpb24gcGtjczEgKGtleSwgbXNnLCByZXZlcnNlKSB7XG4gIHZhciBwMSA9IG1zZy5zbGljZSgwLCAyKVxuICB2YXIgaSA9IDJcbiAgdmFyIHN0YXR1cyA9IDBcbiAgd2hpbGUgKG1zZ1tpKytdICE9PSAwKSB7XG4gICAgaWYgKGkgPj0gbXNnLmxlbmd0aCkge1xuICAgICAgc3RhdHVzKytcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHZhciBwcyA9IG1zZy5zbGljZSgyLCBpIC0gMSlcblxuICBpZiAoKHAxLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzAwMDInICYmICFyZXZlcnNlKSB8fCAocDEudG9TdHJpbmcoJ2hleCcpICE9PSAnMDAwMScgJiYgcmV2ZXJzZSkpIHtcbiAgICBzdGF0dXMrK1xuICB9XG4gIGlmIChwcy5sZW5ndGggPCA4KSB7XG4gICAgc3RhdHVzKytcbiAgfVxuICBpZiAoc3RhdHVzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJylcbiAgfVxuICByZXR1cm4gbXNnLnNsaWNlKGkpXG59XG5mdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGEgPSBCdWZmZXIuZnJvbShhKVxuICBiID0gQnVmZmVyLmZyb20oYilcbiAgdmFyIGRpZiA9IDBcbiAgdmFyIGxlbiA9IGEubGVuZ3RoXG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICBkaWYrK1xuICAgIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgfVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBkaWYgKz0gKGFbaV0gXiBiW2ldKVxuICB9XG4gIHJldHVybiBkaWZcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5mdW5jdGlvbiBvbGRCcm93c2VyICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdzZWN1cmUgcmFuZG9tIG51bWJlciBnZW5lcmF0aW9uIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyXFxudXNlIGNocm9tZSwgRmlyZUZveCBvciBJbnRlcm5ldCBFeHBsb3JlciAxMScpXG59XG52YXIgc2FmZUJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJylcbnZhciByYW5kb21ieXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJylcbnZhciBCdWZmZXIgPSBzYWZlQnVmZmVyLkJ1ZmZlclxudmFyIGtCdWZmZXJNYXhMZW5ndGggPSBzYWZlQnVmZmVyLmtNYXhMZW5ndGhcbnZhciBjcnlwdG8gPSBnbG9iYWwuY3J5cHRvIHx8IGdsb2JhbC5tc0NyeXB0b1xudmFyIGtNYXhVaW50MzIgPSBNYXRoLnBvdygyLCAzMikgLSAxXG5mdW5jdGlvbiBhc3NlcnRPZmZzZXQgKG9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgIT09IG9mZnNldCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29mZnNldCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChvZmZzZXQgPiBrTWF4VWludDMyIHx8IG9mZnNldCA8IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvZmZzZXQgbXVzdCBiZSBhIHVpbnQzMicpXG4gIH1cblxuICBpZiAob2Zmc2V0ID4ga0J1ZmZlck1heExlbmd0aCB8fCBvZmZzZXQgPiBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IG91dCBvZiByYW5nZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJyB8fCBzaXplICE9PSBzaXplKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2l6ZSBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChzaXplID4ga01heFVpbnQzMiB8fCBzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NpemUgbXVzdCBiZSBhIHVpbnQzMicpXG4gIH1cblxuICBpZiAoc2l6ZSArIG9mZnNldCA+IGxlbmd0aCB8fCBzaXplID4ga0J1ZmZlck1heExlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdidWZmZXIgdG9vIHNtYWxsJylcbiAgfVxufVxuaWYgKChjcnlwdG8gJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcykgfHwgIXByb2Nlc3MuYnJvd3Nlcikge1xuICBleHBvcnRzLnJhbmRvbUZpbGwgPSByYW5kb21GaWxsXG4gIGV4cG9ydHMucmFuZG9tRmlsbFN5bmMgPSByYW5kb21GaWxsU3luY1xufSBlbHNlIHtcbiAgZXhwb3J0cy5yYW5kb21GaWxsID0gb2xkQnJvd3NlclxuICBleHBvcnRzLnJhbmRvbUZpbGxTeW5jID0gb2xkQnJvd3NlclxufVxuZnVuY3Rpb24gcmFuZG9tRmlsbCAoYnVmLCBvZmZzZXQsIHNpemUsIGNiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikgJiYgIShidWYgaW5zdGFuY2VvZiBnbG9iYWwuVWludDhBcnJheSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZlwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgb3IgVWludDhBcnJheScpXG4gIH1cblxuICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gb2Zmc2V0XG4gICAgb2Zmc2V0ID0gMFxuICAgIHNpemUgPSBidWYubGVuZ3RoXG4gIH0gZWxzZSBpZiAodHlwZW9mIHNpemUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IHNpemVcbiAgICBzaXplID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICB9IGVsc2UgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiY2JcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKVxuICB9XG4gIGFzc2VydE9mZnNldChvZmZzZXQsIGJ1Zi5sZW5ndGgpXG4gIGFzc2VydFNpemUoc2l6ZSwgb2Zmc2V0LCBidWYubGVuZ3RoKVxuICByZXR1cm4gYWN0dWFsRmlsbChidWYsIG9mZnNldCwgc2l6ZSwgY2IpXG59XG5cbmZ1bmN0aW9uIGFjdHVhbEZpbGwgKGJ1Ziwgb2Zmc2V0LCBzaXplLCBjYikge1xuICBpZiAocHJvY2Vzcy5icm93c2VyKSB7XG4gICAgdmFyIG91ckJ1ZiA9IGJ1Zi5idWZmZXJcbiAgICB2YXIgdWludCA9IG5ldyBVaW50OEFycmF5KG91ckJ1Ziwgb2Zmc2V0LCBzaXplKVxuICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXModWludClcbiAgICBpZiAoY2IpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBjYihudWxsLCBidWYpXG4gICAgICB9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHJldHVybiBidWZcbiAgfVxuICBpZiAoY2IpIHtcbiAgICByYW5kb21ieXRlcyhzaXplLCBmdW5jdGlvbiAoZXJyLCBieXRlcykge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gY2IoZXJyKVxuICAgICAgfVxuICAgICAgYnl0ZXMuY29weShidWYsIG9mZnNldClcbiAgICAgIGNiKG51bGwsIGJ1ZilcbiAgICB9KVxuICAgIHJldHVyblxuICB9XG4gIHZhciBieXRlcyA9IHJhbmRvbWJ5dGVzKHNpemUpXG4gIGJ5dGVzLmNvcHkoYnVmLCBvZmZzZXQpXG4gIHJldHVybiBidWZcbn1cbmZ1bmN0aW9uIHJhbmRvbUZpbGxTeW5jIChidWYsIG9mZnNldCwgc2l6ZSkge1xuICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBvZmZzZXQgPSAwXG4gIH1cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSAmJiAhKGJ1ZiBpbnN0YW5jZW9mIGdsb2JhbC5VaW50OEFycmF5KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBvciBVaW50OEFycmF5JylcbiAgfVxuXG4gIGFzc2VydE9mZnNldChvZmZzZXQsIGJ1Zi5sZW5ndGgpXG5cbiAgaWYgKHNpemUgPT09IHVuZGVmaW5lZCkgc2l6ZSA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcblxuICBhc3NlcnRTaXplKHNpemUsIG9mZnNldCwgYnVmLmxlbmd0aClcblxuICByZXR1cm4gYWN0dWFsRmlsbChidWYsIG9mZnNldCwgc2l6ZSlcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=